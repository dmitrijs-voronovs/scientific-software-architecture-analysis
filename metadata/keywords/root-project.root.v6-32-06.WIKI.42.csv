id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:28806,Performance,perform,perform,28806,"elements in a vectorised fashion, similarly to Python's NumPy arrays.; For example, to fill a histogram with the ""pt"" of selected particles for each event, Define() can be used to create a column that contains the desired array elements as follows:; // h is filled with all the elements of `good_pts`, for each event; auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); .Histo1D(""good_pts"");; ROOT::VecOps::RVec< float >; ptTPaveText * ptDefinition entrylist_figure1.C:7; And in Python:; h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); Learn more at ROOT::VecOps::RVec. Transformations: manipulating data. Filters; A filter is created through a call to Filter(f, columnList) or Filter(filterString). In the first overload, f can be a function, a lambda expression, a functor class, or any other callable object. It must return a bool signalling whether the event has passed the selection (true) or not (false). It should perform ""read-only"" operations on the columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column names are used as variable names (e.g. Filter(""x[0] + x[1] > 0"")). This is a convenience feature that comes with a certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event loop. See the paragraph about ""Just-in-time compilation"" below for more information.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded and triggers the processing of the next entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:28976,Performance,multi-thread,multi-threading,28976,"with the ""pt"" of selected particles for each event, Define() can be used to create a column that contains the desired array elements as follows:; // h is filled with all the elements of `good_pts`, for each event; auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); .Histo1D(""good_pts"");; ROOT::VecOps::RVec< float >; ptTPaveText * ptDefinition entrylist_figure1.C:7; And in Python:; h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); Learn more at ROOT::VecOps::RVec. Transformations: manipulating data. Filters; A filter is created through a call to Filter(f, columnList) or Filter(filterString). In the first overload, f can be a function, a lambda expression, a functor class, or any other callable object. It must return a bool signalling whether the event has passed the selection (true) or not (false). It should perform ""read-only"" operations on the columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column names are used as variable names (e.g. Filter(""x[0] + x[1] > 0"")). This is a convenience feature that comes with a certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event loop. See the paragraph about ""Just-in-time compilation"" below for more information.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded and triggers the processing of the next entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and cutflow reports; An optional string parameter name can be passed to the Filter() method to create a named",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:29808,Performance,cache,cached,29808,"hether the event has passed the selection (true) or not (false). It should perform ""read-only"" operations on the columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column names are used as variable names (e.g. Filter(""x[0] + x[1] > 0"")). This is a convenience feature that comes with a certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event loop. See the paragraph about ""Just-in-time compilation"" below for more information.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded and triggers the processing of the next entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and cutflow reports; An optional string parameter name can be passed to the Filter() method to create a named filter. Named filters work as usual, but also keep track of how many entries they accept and reject.; Statistics are retrieved through a call to the Report() method:. when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all named filters declared up to that point; when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative all named filters in the section of the chain between the main RDataFrame and that node (included). Stats are stored in the same order as named filters have been added to the graph, and refer to the latest event-loop that has been run using the relevant RDataFrame. Ranges; When RDataFrame is not being used in a mult",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:30727,Performance,multi-thread,multi-thread,30727,"r is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and cutflow reports; An optional string parameter name can be passed to the Filter() method to create a named filter. Named filters work as usual, but also keep track of how many entries they accept and reject.; Statistics are retrieved through a call to the Report() method:. when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all named filters declared up to that point; when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative all named filters in the section of the chain between the main RDataFrame and that node (included). Stats are stored in the same order as named filters have been added to the graph, and refer to the latest event-loop that has been run using the relevant RDataFrame. Ranges; When RDataFrame is not being used in a multi-thread environment (i.e. no call to EnableImplicitMT() was made), Range() transformations are available. These act very much like filters but instead of basing their decision on a filter expression, they rely on begin,end and stride parameters. begin: initial entry number considered for this range.; end: final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; stride: process one entry of the [begin, end) range every stride entries. Must be strictly greater than 0. The actual number of entries processed downstream of a Range() node will be (end - begin)/stride (or less if less entries than that are available).; Note that ranges act ""locally"", not based on the global entry count: Range(10,50) means ""skip the first 10 entries; that reach this node*, let the next 40 entries pass, then stop processing"". If a range node hangs from a filter node, and the range has a begin parameter of 10, that means the range will ski",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:36254,Performance,optimiz,optimized,36254,"ion that needs values for its computations will request it from a reader, e.g. a column created via Define or available from the input dataset. The action will request values from each column of the list of input columns (either inferred or specified by the user), in order. For example:; ROOT::RDataFrame df{1};; auto df1 = df.Define(""x"", []{ return 11; });; auto df2 = df1.Define(""y"", []{ return 22; });; auto graph = df2.Graph<int, int>(""x"",""y"");; graphDefinition graph.py:1; The Graph action is going to request first the value from column ""x"", then that of column ""y"". Specifically, the order of execution of the operations of nodes in this branch of the computation graph is guaranteed to be top to bottom. Distributed execution; RDataFrame applications can be executed in parallel through distributed computing frameworks on a set of remote machines thanks to the Python package ROOT.RDF.Experimental.Distributed. This experimental, Python-only package allows to scale the optimized performance RDataFrame can achieve on a single machine to multiple nodes at the same time. It is designed so that different backends can be easily plugged in, currently supporting Apache Spark and Dask. To make use of distributed RDataFrame, you only need to switch ROOT.RDataFrame with the backend-specific RDataFrame of your choice, for example:; import ROOT; ; # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # It still accepts the same constructor arguments as traditional RDataFrame; df = RDataFrame(""mytree"", ""myfile.root""); ; # Continue the application with the traditional RDataFrame API; sum = df.Filter(""x > 10"").Sum(""y""); h = df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); ; print(sum.GetValue()); h.Draw(); The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all parts of the RDataFrame API currently work with this package. The subset that is currently availab",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:36264,Performance,perform,performance,36264,"ion that needs values for its computations will request it from a reader, e.g. a column created via Define or available from the input dataset. The action will request values from each column of the list of input columns (either inferred or specified by the user), in order. For example:; ROOT::RDataFrame df{1};; auto df1 = df.Define(""x"", []{ return 11; });; auto df2 = df1.Define(""y"", []{ return 22; });; auto graph = df2.Graph<int, int>(""x"",""y"");; graphDefinition graph.py:1; The Graph action is going to request first the value from column ""x"", then that of column ""y"". Specifically, the order of execution of the operations of nodes in this branch of the computation graph is guaranteed to be top to bottom. Distributed execution; RDataFrame applications can be executed in parallel through distributed computing frameworks on a set of remote machines thanks to the Python package ROOT.RDF.Experimental.Distributed. This experimental, Python-only package allows to scale the optimized performance RDataFrame can achieve on a single machine to multiple nodes at the same time. It is designed so that different backends can be easily plugged in, currently supporting Apache Spark and Dask. To make use of distributed RDataFrame, you only need to switch ROOT.RDataFrame with the backend-specific RDataFrame of your choice, for example:; import ROOT; ; # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # It still accepts the same constructor arguments as traditional RDataFrame; df = RDataFrame(""mytree"", ""myfile.root""); ; # Continue the application with the traditional RDataFrame API; sum = df.Filter(""x > 10"").Sum(""y""); h = df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); ; print(sum.GetValue()); h.Draw(); The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all parts of the RDataFrame API currently work with this package. The subset that is currently availab",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:42654,Performance,concurren,concurrently,42654,"Tree can be retrieved by typing rootls -lt myfile.root at a command line. Distributed Snapshot; The Snapshot operation behaves slightly differently when executed distributedly. First off, it requires the path supplied to the Snapshot call to be accessible from any worker of the cluster and from the client machine (in general it should be provided as an absolute path). Another important difference is that n separate files will be produced, where n is the number of dataset partitions. As with local RDataFrame, the result of a Snapshot on a distributed RDataFrame is another distributed RDataFrame on which we can define a new computation graph and run more distributed computations. Distributed RunGraphs; Submitting multiple distributed RDataFrame executions is supported through the RunGraphs function. Similarly to its local counterpart, the function expects an iterable of objects representing an RDataFrame action. Each action will be triggered concurrently to send multiple computation graphs to a distributed cluster at the same time:; import ROOT; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs; ; # Create 3 different dataframes and book an histogram on each one; histoproxies = [; RDataFrame(100); .Define(""x"", ""rdfentry_""); .Histo1D((""name"", ""title"", 10, 0, 100), ""x""); for _ in range(4); ]; ; # Execute the 3 computation graphs; RunGraphs(histoproxies); # Retrieve all the histograms in one go; histos = [histoproxy.GetValue() for histoproxy in histoproxies]; Every distributed backend supports this feature and graphs belonging to different backends can be still triggered with a single call to RunGraphs (e.g. it is possible to send a Spark job and a Dask job at the same time). Histogram models in distributed mode; When calling a Histo*D operation in distributed mode, remember to pass to the function the model of the histogram to be computed, e.g. the axis range and the number of bins:; import ROOT; RData",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:46510,Performance,perform,perform,46510,"pplied to all plots. For example:. def set_fill_color(hist):; hist.SetFillColor(ROOT.kBlue); ; LiveVisualize([h_gaus, h_exp, h_random], set_fill_color). Passing a Dictionary of drawables and callback functions: For more control, you can create a dictionary where keys are plots and values are corresponding (optional) callback functions. For example:. plot_callback_dict = {; graph: set_marker,; h_exp: fit_exp,; tprofile_2d: None; }; ; LiveVisualize(plot_callback_dict). Passing a Dictionary of drawables and callback functions with a global callback function: You can also combine a dictionary of plots and callbacks with a global callback function:. LiveVisualize(plot_callback_dict, write_to_tfile); NoteThe allowed operations to pass to LiveVisualize are:; Histo1D(), Histo2D(), Histo3D(); Graph(); Profile1D(), Profile2D(). WarningThe Live Visualization feature is only supported for the Dask backend. Performance tips and parallel execution; As pointed out before in this document, RDataFrame can transparently perform multi-threaded event loops to speed up the execution of its actions. Users have to call ROOT::EnableImplicitMT() before constructing the RDataFrame object to indicate that it should take advantage of a pool of worker threads. Each worker thread processes a distinct subset of entries, and their partial results are merged before returning the final values to the user. There are no guarantees on the order in which threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared comp",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:46518,Performance,multi-thread,multi-threaded,46518,"pplied to all plots. For example:. def set_fill_color(hist):; hist.SetFillColor(ROOT.kBlue); ; LiveVisualize([h_gaus, h_exp, h_random], set_fill_color). Passing a Dictionary of drawables and callback functions: For more control, you can create a dictionary where keys are plots and values are corresponding (optional) callback functions. For example:. plot_callback_dict = {; graph: set_marker,; h_exp: fit_exp,; tprofile_2d: None; }; ; LiveVisualize(plot_callback_dict). Passing a Dictionary of drawables and callback functions with a global callback function: You can also combine a dictionary of plots and callbacks with a global callback function:. LiveVisualize(plot_callback_dict, write_to_tfile); NoteThe allowed operations to pass to LiveVisualize are:; Histo1D(), Histo2D(), Histo3D(); Graph(); Profile1D(), Profile2D(). WarningThe Live Visualization feature is only supported for the Dask backend. Performance tips and parallel execution; As pointed out before in this document, RDataFrame can transparently perform multi-threaded event loops to speed up the execution of its actions. Users have to call ROOT::EnableImplicitMT() before constructing the RDataFrame object to indicate that it should take advantage of a pool of worker threads. Each worker thread processes a distinct subset of entries, and their partial results are merged before returning the final values to the user. There are no guarantees on the order in which threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared comp",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:47024,Performance,multi-thread,multi-thread,47024,"tionary of plots and callbacks with a global callback function:. LiveVisualize(plot_callback_dict, write_to_tfile); NoteThe allowed operations to pass to LiveVisualize are:; Histo1D(), Histo2D(), Histo3D(); Graph(); Profile1D(), Profile2D(). WarningThe Live Visualization feature is only supported for the Dask backend. Performance tips and parallel execution; As pointed out before in this document, RDataFrame can transparently perform multi-threaded event loops to speed up the execution of its actions. Users have to call ROOT::EnableImplicitMT() before constructing the RDataFrame object to indicate that it should take advantage of a pool of worker threads. Each worker thread processes a distinct subset of entries, and their partial results are merged before returning the final values to the user. There are no guarantees on the order in which threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:47311,Performance,multi-thread,multi-thread,47311,"le2D(). WarningThe Live Visualization feature is only supported for the Dask backend. Performance tips and parallel execution; As pointed out before in this document, RDataFrame can transparently perform multi-threaded event loops to speed up the execution of its actions. Users have to call ROOT::EnableImplicitMT() before constructing the RDataFrame object to indicate that it should take advantage of a pool of worker threads. Each worker thread processes a distinct subset of entries, and their partial results are merged before returning the final values to the user. There are no guarantees on the order in which threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state)",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:47829,Performance,multi-thread,multi-thread,47829," distinct subset of entries, and their partial results are merged before returning the final values to the user. There are no guarantees on the order in which threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:48042,Performance,concurren,concurrently,48042," loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be asso",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:48346,Performance,race condition,race conditions,48346,"column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writi",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:48735,Performance,concurren,concurrently,48735,"teed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different processing slot, e.g. a different element of a list. See here for an example usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently t",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:49790,Performance,concurren,concurrently,49790," that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different processing slot, e.g. a different element of a list. See here for an example usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:49900,Performance,concurren,concurrently,49900,"1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different processing slot, e.g. a different element of a list. See here for an example usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requir",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:50225,Performance,multi-thread,multi-thread,50225,"usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:50281,Performance,multi-thread,multi-thread,50281,"usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:50405,Performance,concurren,concurrently,50405,"usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:50641,Performance,concurren,concurrently,50641,"usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:50734,Performance,perform,performance,50734,"ent event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that po",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:51228,Performance,perform,performance-critical,51228,"eparate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-i",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:60757,Performance,perform,performance,60757,"y cheap to copy and it's possible to both pass them to (or move them into) functions and to return them from functions. However, in general each dataframe node will have a different C++ type, which includes all available compile-time information about what that node does. One way to cope with this complication is to use template functions and/or C++14 auto return types: template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode: // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function ROOT.RDF.AsRNode. Storing RDataFrame objects in collections; ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a std::vector<RNode> or a std::map<std::string, RNode>:; std::vector<ROOT::RDF::RNode> dfs;; dfs.emplace_back(ROOT::RDataFrame(10));; dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));. Executing callbacks every N events; It's possible to schedule execution of arbitrary functions (callbacks) during the event loop. Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running, drawing a partially-filled histogram every time a certain number of new entries is processed, or displaying a progress bar while the event loop runs.; For example one can draw an up-to-date version of a result histogram every",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:60816,Performance,perform,perform,60816,"+ type, which includes all available compile-time information about what that node does. One way to cope with this complication is to use template functions and/or C++14 auto return types: template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode: // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function ROOT.RDF.AsRNode. Storing RDataFrame objects in collections; ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a std::vector<RNode> or a std::map<std::string, RNode>:; std::vector<ROOT::RDF::RNode> dfs;; dfs.emplace_back(ROOT::RDataFrame(10));; dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));. Executing callbacks every N events; It's possible to schedule execution of arbitrary functions (callbacks) during the event loop. Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running, drawing a partially-filled histogram every time a certain number of new entries is processed, or displaying a progress bar while the event loop runs.; For example one can draw an up-to-date version of a result histogram every 100 entries like this: auto h = df.Histo1D(""x"");; TCanvas c(""c"",""x hist"");; h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); h_.Draw(); c.Update(); });; // event loop runs here, this fi",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:64076,Performance,multi-thread,multi-thread,64076,"});; auto min = d2.Filter([](double b2) { return b2 > 0; }, {""b2""}) // we can still specify non-default column lists; .Min(); // returns the minimum value of ""b1"" for the filtered entries; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::MinRResultPtr< RDFDetail::MinReturnType_t< T > > Min(std::string_view columnName="""")Return the minimum of processed column values (lazy action).Definition RInterface.hxx:2640. Special helper columns: rdfentry_ and rdfslot_; Every instance of RDataFrame is created with two special columns called rdfentry_ and rdfslot_. The rdfentry_ column is of type ULong64_t and it holds the current entry number while rdfslot_ is an unsigned int holding the index of the current data processing slot. For backwards compatibility reasons, the names tdfentry_ and tdfslot_ are also accepted. These columns are ignored by operations such as Cache or Snapshot.; WarningNote that in multi-thread event loops the values of rdfentry_ do not correspond to what would be the entry numbers of a TChain constructed over the same set of ROOT files, as the entries are processed in an unspecified order. Just-in-time compilation: column type inference and explicit declaration of column types; C++ is a statically typed language: all types must be known at compile-time. This includes the types of the TTree branches we want to work on. For filters, defined columns and some of the actions, column types are deduced from the signature of the relevant filter function/temporary column expression/action function: // here b1 is deduced to be `int` and b2 to be `double`; df.Filter([](int x, double y) { return x > 0 && y < 0.; }, {""b1"", ""b2""});; If we specify an incorrect type for one of the columns, an exception with an informative message will be thrown at runtime, when the column value is actually read from the dataset: RDataFrame detects type mismatches. The same would happen if we swapped the order of ""b1"" and ""b2"" in the column list passed to Filter().; Certain actions, on th",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:66026,Performance,perform,performance,66026,", an exception with an informative message will be thrown at runtime, when the column value is actually read from the dataset: RDataFrame detects type mismatches. The same would happen if we swapped the order of ""b1"" and ""b2"" in the column list passed to Filter().; Certain actions, on the other hand, do not take a function as argument (e.g. Histo1D()), so we cannot deduce the type of the column at compile-time. In this case RDataFrame infers the type of the column from the TTree itself. This is why we never needed to specify the column types for all actions in the above snippets.; When the column type is not a common one such as int, double, char or float it is nonetheless good practice to specify it as a template parameter to the action itself, like this: df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing x = 0 rather than x == 0:; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");. User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; Implementing custom actions with Book(); Through the Book() method, users can implement a custom action and have access to the same features that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the event loop, or the possibility to return a lazy RResultPtr to an arbitrar",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:66422,Performance,perform,performed,66422," is why we never needed to specify the column types for all actions in the above snippets.; When the column type is not a common one such as int, double, char or float it is nonetheless good practice to specify it as a template parameter to the action itself, like this: df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing x = 0 rather than x == 0:; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");. User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; Implementing custom actions with Book(); Through the Book() method, users can implement a custom action and have access to the same features that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; #include <ROOT/RDataFrame.hxx>; #include <memory>; ; class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;; ; public:; // We use a public type alias to advertise the type of the result of this action; using Result_t = int;; ; MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}; ; // Called before the event loop to retrieve the address of the result t",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:66516,Performance,perform,perform,66516,"mmon one such as int, double, char or float it is nonetheless good practice to specify it as a template parameter to the action itself, like this: df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing x = 0 rather than x == 0:; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");. User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; Implementing custom actions with Book(); Through the Book() method, users can implement a custom action and have access to the same features that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; #include <ROOT/RDataFrame.hxx>; #include <memory>; ; class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;; ; public:; // We use a public type alias to advertise the type of the result of this action; using Result_t = int;; ; MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}; ; // Called before the event loop to retrieve the address of the result that will be filled/generated.; std::shared_ptr<int> GetResultPtr() const { return fFinalResult; }; ; // Called at the beginn",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:69176,Performance,perform,perform,69176,"<< ""Number of processed entries: "" << resultPtr.GetValue() << std::endl;; }; mainint main()Definition Prototype.cxx:12; RDataFrame.hxx; ROOT::Detail::RDF::RActionImplBase class for action helpers, see RInterface::Book() for more information.Definition RActionImpl.hxx:26; ROOT::RDF::RResultPtrSmart pointer for the return type of actions.Definition RResultPtr.hxx:119; ROOT::RDF::RResultPtr::GetValueconst T & GetValue()Get a const reference to the encapsulated object.Definition RResultPtr.hxx:228; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; See the Book() method for more information and this tutorial for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:69601,Performance,multi-thread,multi-thread,69601,"nition RResultPtr.hxx:228; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; See the Book() method for more information and this tutorial for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned i",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:69738,Performance,concurren,concurrently,69738,"nition RResultPtr.hxx:228; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; See the Book() method for more information and this tutorial for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned i",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:69837,Performance,concurren,concurrent,69837,"al for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.be",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:70255,Performance,concurren,concurrent,70255,"the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; Notice how we created one double variable for each processing slot and later merged their results via std::accumulate. Dataset joins with friend trees; Vertically concatenating multiple trees that have the same columns (cre",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:72509,Performance,multi-thread,multi-thread,72509,"ees or chains (creating a logical dataset with the same number of rows and the union of the columns of multiple trees) leverages TTree's ""friend"" mechanism.; Simple joins of trees that do not have the same number of rows are also possible with indexed friend trees (see below).; To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interface",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:72741,Performance,perform,perform,72741,"lso possible with indexed friend trees (see below).; To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information abou",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:72854,Performance,load,loaded,72854,"instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry. Some predefin",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:72901,Performance,load,load,72901,"instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry. Some predefin",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:73122,Performance,load,loads,73122,"the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry. Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files: auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; auto filteredEvents =; tdf.Filter(""Q1 * Q2 == -1""); .Define(""m"", ""sqrt(pow(E1 ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:73152,Performance,load,loads,73152,"the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry. Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files: auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; auto filteredEvents =; tdf.Filter(""Q1 * Q2 == -1""); .Define(""m"", ""sqrt(pow(E1 ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:73435,Performance,multi-thread,multi-thread,73435," common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry. Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files: auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; auto filteredEvents =; tdf.Filter(""Q1 * Q2 == -1""); .Define(""m"", ""sqrt(pow(E1 + E2, 2) - (pow(px1 + px2, 2) + pow(py1 + py2, 2) + pow(pz1 + pz2, 2)))"");; auto h = filteredEvents.Histo1D(""m"");; h->Draw();; See also FromNumpy (Python-only), FromRNTuple(), FromArrow(), FromSqlite(). Computation graphs (storing and reusing sets of transformations); As we saw, transformed data",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:77550,Performance,multi-thread,multi-thread,77550,"taFrame has experimental support for verbose logging of the event loop runtimes and other interesting related information. It is activated as follows: #include <ROOT/RLogger.hxx>; ; // this increases RDF's verbosity level as long as the `verbosity` variable is in scope; auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel::kInfo);; RLogger.hxx; ROOT::Experimental::RLogScopedVerbosityChange the verbosity level (global or specific to the RLogChannel passed to the constructor) for the ...Definition RLogger.hxx:243; ROOT::Detail::RDF::RDFLogChannelROOT::Experimental::RLogChannel & RDFLogChannel()Definition RDFUtils.cxx:37; ROOT::Experimental::ELogLevel::kInfo@ kInfoInformational messages; used for instance for tracing.; or in Python: import ROOT; ; verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kInfo); More information (e.g. start and end of each multi-thread task) is printed using ELogLevel.kDebug and even more (e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using ELogLevel.kDebug+10. Creating an RDataFrame from a dataset specification file; RDataFrame can be created using a dataset specification JSON file:; import ROOT; ; df = ROOT.RDF.Experimental.FromSpec(""spec.json""); ROOT::RDF::Experimental::FromSpecROOT::RDataFrame FromSpec(const std::string &jsonFile)Factory method to create an RDataFrame from a JSON specification file.Definition RDataFrame.cxx:1906; The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each sample in the ""metadata"" key.; A simple example for the formatting of the specification in the JSON fil",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:87081,Performance,perform,perform,87081," Only keep the entries where ""col"" has values; df_filtered.Display({""twice""})->Print();; Further considerations; Note that working with missing values is currently supported with a TTree-based data source. Support of this functionality for other data sources may come in the future. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:87608,Performance,perform,performance,87608,"ame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code; ROOT also offers the option to compile Python functions with fundamental types and arrays thereof using Numba. Such compiled functions can then be used in a C++ expression provided to RDataFrame.; The function to be compiled should be decorated with ROOT.Numba.Declare, which allows to specify the parameter and return types. See the following snippet for a simple example or the full tutorial here.; @ROOT.Numba.Declare([""float""], ""bool""); def myFilter(x):; return x > 10; ; df = ROOT.RDataFr",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:87688,Performance,optimiz,optimizations,87688,"ame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code; ROOT also offers the option to compile Python functions with fundamental types and arrays thereof using Numba. Such compiled functions can then be used in a C++ expression provided to RDataFrame.; The function to be compiled should be decorated with ROOT.Numba.Declare, which allows to specify the parameter and return types. See the following snippet for a simple example or the full tutorial here.; @ROOT.Numba.Declare([""float""], ""bool""); def myFilter(x):; return x > 10; ; df = ROOT.RDataFr",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:87706,Performance,load,load,87706,"ame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code; ROOT also offers the option to compile Python functions with fundamental types and arrays thereof using Numba. Such compiled functions can then be used in a C++ expression provided to RDataFrame.; The function to be compiled should be decorated with ROOT.Numba.Declare, which allows to specify the parameter and return types. See the following snippet for a simple example or the full tutorial here.; @ROOT.Numba.Declare([""float""], ""bool""); def myFilter(x):; return x > 10; ; df = ROOT.RDataFr",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:90336,Performance,perform,performed,90336,"ent of the RDataFrame or process the data further with Python libraries. For this purpose, we provide the AsNumpy() function, which returns the columns of your RDataFrame as a dictionary of NumPy arrays. See a simple example below or a full tutorial here.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); cols = df.Filter(""x > 10"").AsNumpy([""x"", ""y""]) # retrieve columns ""x"" and ""y"" as NumPy arrays; print(cols[""x""], cols[""y""]) # the values of the cols dictionary are NumPy arrays; Processing data stored in NumPy arrays; In case you have data in NumPy arrays in Python and you want to process the data with ROOT, you can easily create an RDataFrame using ROOT.RDF.FromNumpy. The factory function accepts a dictionary where the keys are the column names and the values are NumPy arrays, and returns a new RDataFrame with the provided columns.; Only arrays of fundamental types (integers and floating point values) are supported and the arrays must have the same length. Data is read directly from the arrays: no copies are performed.; # Read data from NumPy arrays; # The column names in the RDataFrame are taken from the dictionary keys; x, y = numpy.array([1, 2, 3]), numpy.array([4, 5, 6]); df = ROOT.RDF.FromNumpy({""x"": x, ""y"": y}); ; # Use RDataFrame as usual, e.g. write out a ROOT file; df.Define(""z"", ""x + y"").Snapshot(""tree"", ""file.root""). Construct histogram and profile models from a tuple; The Histo1D(), Histo2D(), Histo3D(), Profile1D() and Profile2D() methods return histograms and profiles, respectively, which can be constructed using a model argument.; In Python, we can specify the arguments for the constructor of such histogram or profile model with a Python tuple, as shown in the example below:; # First argument is a tuple with the arguments to construct a TH1D model; h = df.Histo1D((""histName"", ""histTitle"", 64, 0., 128.), ""myColumn""). AsRNode helper function; The ROOT::RDF::AsRNode function casts an RDataFrame node to the generic ROOT::RDF::RNode type. From Python, it can",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:1367,Safety,safe,safe,1367,"r Python. ; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (stor",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:3604,Safety,safe,safe,3604,"set. Efficient analysis in Python; Class reference. Cheat sheet; These are the operations which can be performed with RDataFrame. Transformations; Transformations are a way to manipulate the data. Transformation Description . Alias() Introduce an alias for a particular column name. . DefaultValueFor() If the value of the input column is missing, provide a default value instead. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the pts of ""good"" muons). . DefinePerSample() Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. . DefineSlot() Same as Define(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just as well with single-thread execution: in that case slot will always be 0. . DefineSlotEntry() Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see here. . Filter() Filter rows based on user-defined conditions. . FilterAvailable() Specialized Filter. If the value of the input column is available, keep the entry, otherwise discard it. . FilterMissing() Specialized Filter. If the value of the input column is missing, keep the entry, otherwise discard it. . Range() Filter rows based on entry number (single-thread only). . Redefine() Overwrite the value and/or type of an existing column. See Define() for more information. . RedefineSlot() Overwrite the value and/or type of an existing column. See DefineSlot() for more information. . Rede",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:8409,Safety,safe,safety,8409,"he reduction operation. An optional parameter allows initialization of the result object to non-default values. . Report() Obtain statistics on how many entries have been accepted and rejected by the filters. See the section on named filters for a more detailed explanation. The method returns a ROOT::RDF::RCutFlowReport instance which can be queried programmatically to get information about the effects of the individual cuts. . Stats() Return a TStatistic object filled with the input columns. . StdDev() Return the unbiased standard deviation of the processed column values. . Sum() Return the sum of the values in the column. If the type of the column is inferred, the return type is double, the type of the column otherwise. . Take() Extract a column from the dataset as a collection of values, e.g. a std::vector<float> for a column of type float. . Instant action Description . Foreach() Execute a user-defined function on each entry. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. . ForeachSlot() Same as Foreach(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case slot will always be 0. . Snapshot() Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made lazy setting the appropriate flag in the snapshot options. . Queries; These operations do not modify the dataframe or book computations but simply return information on the RDataFrame object. Operation Description . ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:8740,Safety,safe,safe,8740,"nce which can be queried programmatically to get information about the effects of the individual cuts. . Stats() Return a TStatistic object filled with the input columns. . StdDev() Return the unbiased standard deviation of the processed column values. . Sum() Return the sum of the values in the column. If the type of the column is inferred, the return type is double, the type of the column otherwise. . Take() Extract a column from the dataset as a collection of values, e.g. a std::vector<float> for a column of type float. . Instant action Description . Foreach() Execute a user-defined function on each entry. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. . ForeachSlot() Same as Foreach(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case slot will always be 0. . Snapshot() Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made lazy setting the appropriate flag in the snapshot options. . Queries; These operations do not modify the dataframe or book computations but simply return information on the RDataFrame object. Operation Description . Describe() Get useful information describing the dataframe, e.g. columns and their types. . GetColumnNames() Get the names of all the available columns of the dataset. . GetColumnType() Return the type of a given column as a string. . GetColumnTypeNamesList() Return the list of type names of columns in the dataset. . GetDefin",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:47703,Safety,safe,safety,47703," distinct subset of entries, and their partial results are merged before returning the final values to the user. There are no guarantees on the order in which threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:47996,Safety,safe,safe,47996,"ich threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:48337,Safety,risk,risks,48337,"column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writi",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:48405,Safety,safe,safe,48405,". Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different processing slot, e.g. a different element of a list. See here for an example usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produc",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:49223,Safety,safe,safe,49223,"nal programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different processing slot, e.g. a different element of a list. See here for an example usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread even",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:50778,Safety,avoid,avoid,50778,"ent event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that po",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:65021,Safety,detect,detects,65021," reasons, the names tdfentry_ and tdfslot_ are also accepted. These columns are ignored by operations such as Cache or Snapshot.; WarningNote that in multi-thread event loops the values of rdfentry_ do not correspond to what would be the entry numbers of a TChain constructed over the same set of ROOT files, as the entries are processed in an unspecified order. Just-in-time compilation: column type inference and explicit declaration of column types; C++ is a statically typed language: all types must be known at compile-time. This includes the types of the TTree branches we want to work on. For filters, defined columns and some of the actions, column types are deduced from the signature of the relevant filter function/temporary column expression/action function: // here b1 is deduced to be `int` and b2 to be `double`; df.Filter([](int x, double y) { return x > 0 && y < 0.; }, {""b1"", ""b2""});; If we specify an incorrect type for one of the columns, an exception with an informative message will be thrown at runtime, when the column value is actually read from the dataset: RDataFrame detects type mismatches. The same would happen if we swapped the order of ""b1"" and ""b2"" in the column list passed to Filter().; Certain actions, on the other hand, do not take a function as argument (e.g. Histo1D()), so we cannot deduce the type of the column at compile-time. In this case RDataFrame infers the type of the column from the TTree itself. This is why we never needed to specify the column types for all actions in the above snippets.; When the column type is not a common one such as int, double, char or float it is nonetheless good practice to specify it as a template parameter to the action itself, like this: df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:66162,Safety,avoid,avoids,66162,"nt (e.g. Histo1D()), so we cannot deduce the type of the column at compile-time. In this case RDataFrame infers the type of the column from the TTree itself. This is why we never needed to specify the column types for all actions in the above snippets.; When the column type is not a common one such as int, double, char or float it is nonetheless good practice to specify it as a template parameter to the action itself, like this: df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing x = 0 rather than x == 0:; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");. User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; Implementing custom actions with Book(); Through the Book() method, users can implement a custom action and have access to the same features that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; #include <ROOT/RDataFrame.hxx>; #include <memory>; ; class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;; ; public:; // We use a public type alias to advertise the type of the result of this action;",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:69657,Safety,safe,safety,69657,"nition RResultPtr.hxx:228; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; See the Book() method for more information and this tutorial for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned i",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:70434,Safety,safe,safe,70434," {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; Notice how we created one double variable for each processing slot and later merged their results via std::accumulate. Dataset joins with friend trees; Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same columns and more rows) is trivial in RDataFrame: just pass the tree name and a list of file names to RDataFrame's constructor, or create a TChain out of the desired trees and pass that to RDa",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:70481,Safety,safe,safe,70481," {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; Notice how we created one double variable for each processing slot and later merged their results via std::accumulate. Dataset joins with friend trees; Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same columns and more rows) is trivial in RDataFrame: just pass the tree name and a list of file names to RDataFrame's constructor, or create a TChain out of the desired trees and pass that to RDa",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:74730,Safety,detect,detects,74730," to advance the readers to the desired data entry. Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files: auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; auto filteredEvents =; tdf.Filter(""Q1 * Q2 == -1""); .Define(""m"", ""sqrt(pow(E1 + E2, 2) - (pow(px1 + px2, 2) + pow(py1 + py2, 2) + pow(pz1 + pz2, 2)))"");; auto h = filteredEvents.Histo1D(""m"");; h->Draw();; See also FromNumpy (Python-only), FromRNTuple(), FromArrow(), FromSqlite(). Computation graphs (storing and reusing sets of transformations); As we saw, transformed dataframes can be stored as variables and reused multiple times to create modified versions of the dataset. This implicitly defines a computation graph in which several paths of filtering/creation of columns are executed simultaneously, and finally aggregated results are produced.; RDataFrame detects when several actions use the same filter or the same defined column, and only evaluates each filter or defined column once per event, regardless of how many times that result is used down the computation graph. Objects read from each column are built once and never copied, for maximum efficiency. When ""upstream"" filters are not passed, subsequent filters, temporary column expressions and actions are not evaluated, so it might be advisable to put the strictest filters first in the graph. Visualizing the computation graph; It is possible to print the computation graph from any node to obtain a DOT (graphviz) representation either on the standard output or in a file.; Invoking the function ROOT::RDF::SaveGraph() on any node that is not the head node, the computation graph of the branch the node belongs to is printed. By using the head node, the entire computation graph is printed.; Following there is an example of usage: // First, a sample computational graph is built; ROOT::RDataFrame df(""tree"", ""f.root"");; ; auto df2 = df.Define(""x"", []() { return 1; }); .Filter(""col0 % 1 == col0",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:923,Security,access,access,923,". ROOT: ROOT::RDataFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::RDataFrame Class ReferenceDataframe. ; ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. ; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and re",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:5211,Security,access,accessed,5211,"Missing() Specialized Filter. If the value of the input column is missing, keep the entry, otherwise discard it. . Range() Filter rows based on entry number (single-thread only). . Redefine() Overwrite the value and/or type of an existing column. See Define() for more information. . RedefineSlot() Overwrite the value and/or type of an existing column. See DefineSlot() for more information. . RedefineSlotEntry() Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. . Vary() Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). . Actions; Actions aggregate data into a result. Each one is described in more detail in the reference guide.; In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to produce many different results in one event loop. Instant actions trigger the event loop instantly. Lazy action Description . Aggregate() Execute a user-defined accumulation operation on the processed column values. . Book() Book execution of a custom action using a user-defined helper object. . Cache() Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). . Count() Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. . Display() Provides a printable representation of the dataset contents. The method returns a ROOT::RDF::RDisplay() instance which can print a tabular representation of the data or return it as a string. . Fill() Fill a user-defined object with the values of the specified columns, as if by calling Obj.Fill(col1, col2, ...). . Graph() Fills a TGraph with the two columns provi",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:11464,Security,access,accessed,11464,"es as well as low-level details such as I/O and parallelization. RDataFrame provides methods to perform most common operations required by ROOT analyses; at the same time, users can just as easily specify custom code that will be executed in the event loop.; RDataFrame is built with a modular and flexible workflow in mind, summarised as follows:. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, CSV files, SQLite files, RNTuples, and it can be extended to custom data formats. From Python, NumPy arrays can be imported into RDataFrame as well.; Transform the dataframe by:; Applying filters. This selects only specific rows of the dataset.; Creating custom columns. Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. Produce results. Actions are used to aggregate data into results. Most actions are lazy, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the crash course to discover more idiomatic and flexible ways to express analyses with RDataFrame. . TTreeReader ROOT::RDataFrame . TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174;",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:11554,Security,access,access,11554,"perations required by ROOT analyses; at the same time, users can just as easily specify custom code that will be executed in the event loop.; RDataFrame is built with a modular and flexible workflow in mind, summarised as follows:. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, CSV files, SQLite files, RNTuples, and it can be extended to custom data formats. From Python, NumPy arrays can be imported into RDataFrame as well.; Transform the dataframe by:; Applying filters. This selects only specific rows of the dataset.; Creating custom columns. Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. Produce results. Actions are used to aggregate data into results. Most actions are lazy, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the crash course to discover more idiomatic and flexible ways to express analyses with RDataFrame. . TTreeReader ROOT::RDataFrame . TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definitio",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:11692,Security,access,access,11692,"e executed in the event loop.; RDataFrame is built with a modular and flexible workflow in mind, summarised as follows:. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, CSV files, SQLite files, RNTuples, and it can be extended to custom data formats. From Python, NumPy arrays can be imported into RDataFrame as well.; Transform the dataframe by:; Applying filters. This selects only specific rows of the dataset.; Creating custom columns. Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. Produce results. Actions are used to aggregate data into results. Most actions are lazy, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the crash course to discover more idiomatic and flexible ways to express analyses with RDataFrame. . TTreeReader ROOT::RDataFrame . TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; d.Filter(IsGoodEvent).Foreach(DoStuff",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:18063,Security,access,access,18063,"(""MET"");; h->Draw();; The first line creates an RDataFrame associated to the TTree ""myTree"". This tree has a branch named ""MET"".; Histo1D() is an action; it returns a smart pointer (a ROOT::RDF::RResultPtr, to be precise) to a TH1D histogram filled with the MET of all events. If the quantity stored in the column is a collection (e.g. a vector or an array), the histogram is filled with all vector elements for each event.; You can use the objects returned by actions as if they were pointers to the desired results. There are many other possible actions, and all their results are wrapped in smart pointers; we'll see why in a minute. Applying a filter; Let's say we want to cut over the value of branch ""MET"" and count how many events pass this cut. This is one way to do it: RDataFrame d(""myTree"", ""file.root"");; auto c = d.Filter(""MET > 4."").Count(); // computations booked, not run; std::cout << *c << std::endl; // computations run here, upon first access to the result; The filter string (which must contain a valid C++ expression) is applied to the specified columns for each event; the name and types of the columns are inferred automatically. The string expression is required to return a bool which signals whether the event passes the filter (true) or not (false).; You can think of your data as ""flowing"" through the chain of calls, being transformed, filtered and finally used to perform actions. Multiple Filter() calls can be chained one after another.; Using string filters is nice for simple things, but they are limited to specifying the equivalent of a single return statement or the body of a lambda, so it's cumbersome to use strings with more complex filters. They also add a small runtime overhead, as ROOT needs to just-in-time compile the string into C++ code. When more freedom is required or runtime performance is very important, a C++ callable can be specified instead (a lambda in the following snippet, but it can be any kind of function or even a functor class), tog",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:25694,Security,access,accessed,25694,"event every 3; auto d15each3 = d.Range(0, 15, 3);; Note that ranges are not available when multi-threading is enabled. More information on ranges is available here. Executing multiple actions in the same event loop; As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of the filtered events. By now, you should be able to easily understand what is happening: RDataFrame d(""treeName"", ""file.root"");; auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; auto h2 = d.Histo1D(""pt_v"");; h1->Draw(); // event loop is run once here; h2->Draw(""SAME""); // no need to run the event loop again; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; h1TH1F * h1Definition legend1.C:5; RDataFrame executes all above actions by running the event-loop only once. The trick is that actions are not executed at the moment they are called, but they are lazy, i.e. delayed until the moment one of their results is accessed through the smart pointer. At that time, the event loop is triggered and all results are produced simultaneously. Properly exploiting RDataFrame laziness; For yet another example of the difference between the correct and incorrect running of the event-loop, see the following two code snippets. We assume our ROOT file has branches a, b and c.; The correct way - the dataset is only processed once. df_correct = ROOT.RDataFrame(treename, filename);; ; h_a = df_correct.Histo1D(""a""); h_b = df_correct.Histo1D(""b""); h_c = df_correct.Histo1D(""c""); ; h_a_val = h_a.GetValue(); h_b_val = h_b.GetValue(); h_c_val = h_c.GetValue(); ; print(f""How many times was the data set processed? {df_wrong.GetNRuns()} time."") # The answer will be 1 time. ; An incorrect way - the dataset is processed three times. df_incorrect = ROOT.RDataFrame(treename, filename);; ; h_a = df_incorrect.Histo1D(""a""); h_a_val = h_a.GetValue(); ; h_b = df_incorrect.Histo1D(""b""); h_b_val = h_b.GetValue(); ; h_c = df_in",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:26936,Security,access,accessing,26936,"of the event-loop, see the following two code snippets. We assume our ROOT file has branches a, b and c.; The correct way - the dataset is only processed once. df_correct = ROOT.RDataFrame(treename, filename);; ; h_a = df_correct.Histo1D(""a""); h_b = df_correct.Histo1D(""b""); h_c = df_correct.Histo1D(""c""); ; h_a_val = h_a.GetValue(); h_b_val = h_b.GetValue(); h_c_val = h_c.GetValue(); ; print(f""How many times was the data set processed? {df_wrong.GetNRuns()} time."") # The answer will be 1 time. ; An incorrect way - the dataset is processed three times. df_incorrect = ROOT.RDataFrame(treename, filename);; ; h_a = df_incorrect.Histo1D(""a""); h_a_val = h_a.GetValue(); ; h_b = df_incorrect.Histo1D(""b""); h_b_val = h_b.GetValue(); ; h_c = df_incorrect.Histo1D(""c""); h_c_val = h_c.GetValue(); ; print(f""How many times was the data set processed? {df_wrong.GetNRuns()} times."") # The answer will be 3 times. ; It is therefore good practice to declare all your transformations and actions before accessing their results, allowing RDataFrame to run the loop once and produce all results in one go. Going parallel; Let's say we would like to run the previous examples in parallel on several cores, dividing events fairly between cores. The only modification required to the snippets would be the addition of this line before constructing the main dataframe object: ROOT::EnableImplicitMT();; Simple as that. More details are given below. Working with collections and object selections; RDataFrame reads collections as the special type ROOT::RVec: for example, a column containing an array of floating point numbers can be read as a ROOT::RVecF. C-style arrays (with variable or static size), STL vectors and most other collection types can be read this way.; RVec is a container similar to std::vector (and can be used just like a std::vector) but it also offers a rich interface to operate on the array elements in a vectorised fashion, similarly to Python's NumPy arrays.; For example, to fill a histog",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:29782,Security,access,access,29782,"hether the event has passed the selection (true) or not (false). It should perform ""read-only"" operations on the columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column names are used as variable names (e.g. Filter(""x[0] + x[1] > 0"")). This is a convenience feature that comes with a certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event loop. See the paragraph about ""Just-in-time compilation"" below for more information.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded and triggers the processing of the next entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and cutflow reports; An optional string parameter name can be passed to the Filter() method to create a named filter. Named filters work as usual, but also keep track of how many entries they accept and reject.; Statistics are retrieved through a call to the Report() method:. when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all named filters declared up to that point; when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative all named filters in the section of the chain between the main RDataFrame and that node (included). Stats are stored in the same order as named filters have been added to the graph, and refer to the latest event-loop that has been run using the relevant RDataFrame. Ranges; When RDataFrame is not being used in a mult",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:32428,Security,access,accessible,32428," on the global entry count: Range(10,50) means ""skip the first 10 entries; that reach this node*, let the next 40 entries pass, then stop processing"". If a range node hangs from a filter node, and the range has a begin parameter of 10, that means the range will skip the first 10 entries that pass the preceding filter.; Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their end value of processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations. Custom columns; Custom columns are created by invoking Define(name, f, columnList). As usual, f can be any callable object (function, lambda expression, functor class...); it takes the values of the columns listed in columnList (a list of strings) as parameters, in the same order as they are listed in columnList. f must return the value that will be assigned to the temporary column.; A new variable is created called name, accessible as if it was contained in the dataset from subsequent transformations/actions.; Use cases include:; caching the results of complex calculations for easy and efficient multiple access; extraction of quantities of interest from complex objects; branch aliasing, i.e. changing the name of a branch. An exception is thrown if the name of the new column/branch is already in use for another branch in the TTree.; It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method Define(name, expression). For example this invocation; df.Define(""pt"", ""sqrt(px*px + py*py)"");; will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches from the names of the variables specified by the user.; Custom columns as function of slot and entry number; It is possible to create custom columns ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:32615,Security,access,access,32615,"ange node hangs from a filter node, and the range has a begin parameter of 10, that means the range will skip the first 10 entries that pass the preceding filter.; Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their end value of processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations. Custom columns; Custom columns are created by invoking Define(name, f, columnList). As usual, f can be any callable object (function, lambda expression, functor class...); it takes the values of the columns listed in columnList (a list of strings) as parameters, in the same order as they are listed in columnList. f must return the value that will be assigned to the temporary column.; A new variable is created called name, accessible as if it was contained in the dataset from subsequent transformations/actions.; Use cases include:; caching the results of complex calculations for easy and efficient multiple access; extraction of quantities of interest from complex objects; branch aliasing, i.e. changing the name of a branch. An exception is thrown if the name of the new column/branch is already in use for another branch in the TTree.; It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method Define(name, expression). For example this invocation; df.Define(""pt"", ""sqrt(px*px + py*py)"");; will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches from the names of the variables specified by the user.; Custom columns as function of slot and entry number; It is possible to create custom columns also as a function of the processing slot and entry numbers. The methods that can be invoked are:; DefineSlot(name, f, columnList). In this case the callable",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:34191,Security,access,accessed,34191," from the columns px and py. The system builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches from the names of the variables specified by the user.; Custom columns as function of slot and entry number; It is possible to create custom columns also as a function of the processing slot and entry numbers. The methods that can be invoked are:; DefineSlot(name, f, columnList). In this case the callable f has this signature R(unsigned int, T1, T2, ...): the first parameter is the slot number which ranges from 0 to ROOT::GetThreadPoolSize() - 1.; DefineSlotEntry(name, f, columnList). In this case the callable f has this signature R(unsigned int, ULong64_t,; T1, T2, ...): the first parameter is the slot number while the second one the number of the entry being processed. Actions: getting results. Instant and lazy actions; Actions can be instant or lazy. Instant actions are executed as soon as they are called, while lazy actions are executed whenever the object they return is accessed for the first time. As a rule of thumb, actions with a return value are lazy, the others are instant. Return type of a lazy action; When a lazy action is called, it returns a ROOT::RDF::RResultPtr<T>, where T is the type of the result of the action. The final result will be stored in the RResultPtr and can be retrieved by dereferencing it or via its GetValue method. Actions that return collections; If the type of the return value of an action is a collection, e.g. std::vector<int>, you can iterate its elements directly through the wrapping RResultPtr:; ROOT::RDataFrame df{5};; auto df1 = df.Define(""x"", []{ return 42; });; for (const auto &el: df1.Take<int>(""x"")){; std::cout << ""Element: "" << el << ""\n"";; }; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::TakeRResultPtr< COLL > Take(std::string_view column="""")Return a collection of values of a column (lazy action, returns a std::vector by default).Definition RInterface.hxx:1761;",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:37932,Security,access,access,37932," ""title"", 10, 0, 10), ""x""); ; print(sum.GetValue()); h.Draw(); The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all parts of the RDataFrame API currently work with this package. The subset that is currently available is:; AsNumpy; Count; Define; DefinePerSample; Filter; Graph; Histo[1,2,3]D; HistoND; Max; Mean; Min; Profile[1,2,3]D; Redefine; Snapshot; Stats; StdDev; Sum; Systematic variations: Vary and VariationsFor.; Parallel submission of distributed graphs: RunGraphs.; Information about the dataframe: GetColumnNames. with support for more operations coming in the future. Data sources other than TTree and TChain (e.g. CSV, RNTuple) are currently not supported.; NoteThe distributed RDataFrame module requires at least Python version 3.8. Connecting to a Spark cluster; In order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the official Spark API, then hook the connection instance to the distributed RDataFrame object like so:; import pyspark; import ROOT; ; # Create a SparkContext object with the right configuration for your Spark cluster; conf = SparkConf().setAppName(appName).setMaster(master); sc = SparkContext(conf=conf); ; # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; # and it will distribute the application to the connected cluster; df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); If an instance of SparkContext is not provided, the default behaviour is to create one in the background for you. Connecting to a Dask cluster; Similarly, you can connect to a Dask cluster by creating your own connection object which internally operates with one of the cluster schedulers supported by Dask (more information in the Dask distributed docs):; import ROOT; from dask.distributed import Clien",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:39321,Security,expose,exposes,39321,"conf); ; # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; # and it will distribute the application to the connected cluster; df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); If an instance of SparkContext is not provided, the default behaviour is to create one in the background for you. Connecting to a Dask cluster; Similarly, you can connect to a Dask cluster by creating your own connection object which internally operates with one of the cluster schedulers supported by Dask (more information in the Dask distributed docs):; import ROOT; from dask.distributed import Client; ; # Point RDataFrame calls to the Dask specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ; # In a Python script the Dask client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""); ; # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); If an instance of distributed.Client is not provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine using all cores available. Choosing the number of distributed tasks; A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will b",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:41105,Security,access,access,41105,"kend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to a batch system. The client object created at the beginning of the application does not automatically know how many cores will be available during distributed execution, since the jobs are submitted to the batch system after the creation of the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional keyword argument npartitions when creating the RDataFrame object. This parameter is accepted irrespectively of the backend used:; import ROOT; ; # Define correct imports and access the distributed RDataFrame appropriate for the; # backend used in the analysis; RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; ; if __name__ == ""__main__"":; # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); Note that when processing a TTree or TChain dataset, the npartitions value should not exceed the number of clusters in the dataset. The number of clusters in a TTree can be retrieved by typing rootls -lt myfile.root at a command line. Distributed Snapshot; The Snapshot operation behaves slightly differently when executed distributedly. First off, it requires the path supplied to the Snapshot call to be accessible from any worker of the cluster and from the client machine (in general it should be provided as an absolute path). Another important difference is ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:41945,Security,access,accessible,41945," the RDataFrame object. This parameter is accepted irrespectively of the backend used:; import ROOT; ; # Define correct imports and access the distributed RDataFrame appropriate for the; # backend used in the analysis; RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; ; if __name__ == ""__main__"":; # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); Note that when processing a TTree or TChain dataset, the npartitions value should not exceed the number of clusters in the dataset. The number of clusters in a TTree can be retrieved by typing rootls -lt myfile.root at a command line. Distributed Snapshot; The Snapshot operation behaves slightly differently when executed distributedly. First off, it requires the path supplied to the Snapshot call to be accessible from any worker of the cluster and from the client machine (in general it should be provided as an absolute path). Another important difference is that n separate files will be produced, where n is the number of dataset partitions. As with local RDataFrame, the result of a Snapshot on a distributed RDataFrame is another distributed RDataFrame on which we can define a new computation graph and run more distributed computations. Distributed RunGraphs; Submitting multiple distributed RDataFrame executions is supported through the RunGraphs function. Similarly to its local counterpart, the function expects an iterable of objects representing an RDataFrame action. Each action will be triggered concurrently to send multiple computation graphs to a distributed cluster at the same time:; import ROOT; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs; ; # Create 3 different dataframes and book an histogram on each one; histoproxies = [; RData",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:50103,Security,access,accessing,50103,"usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:55247,Security,access,access,55247,"ax to define systematic variations. This is done in two steps: a) register variations for one or more existing columns using Vary() and b) extract variations of normal RDataFrame results using VariationsFor(). In between these steps, no other change to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied results. VariationsFor() is included in header ROOT/RDFHelpers.hxx. The compiled C++ programs must include this header explicitly, this is not required for ROOT macros.; An example usage of Vary() and VariationsFor() in C++:; auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); .Filter(""pt > pt_cut""); .Define(""x"", someFunc, {""pt""}); .Histo1D<float>(""x"");; ; // request the generation of varied results from the nominal_hx; ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; ; // the event loop runs here, upon first access to any of the results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ROOT::RDF::Experimental::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second to the tag ""up""). The full variation name will be composed of the varied column name and the variation tags (e.g. ""pt:down"", ""pt:up"" in this exampl",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:66484,Security,inject,inject,66484,"mmon one such as int, double, char or float it is nonetheless good practice to specify it as a template parameter to the action itself, like this: df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing x = 0 rather than x == 0:; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");. User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; Implementing custom actions with Book(); Through the Book() method, users can implement a custom action and have access to the same features that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; #include <ROOT/RDataFrame.hxx>; #include <memory>; ; class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;; ; public:; // We use a public type alias to advertise the type of the result of this action; using Result_t = int;; ; MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}; ; // Called before the event loop to retrieve the address of the result that will be filled/generated.; std::shared_ptr<int> GetResultPtr() const { return fFinalResult; }; ; // Called at the beginn",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:66675,Security,access,access,66675,".Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing x = 0 rather than x == 0:; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");. User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; Implementing custom actions with Book(); Through the Book() method, users can implement a custom action and have access to the same features that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; #include <ROOT/RDataFrame.hxx>; #include <memory>; ; class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;; ; public:; // We use a public type alias to advertise the type of the result of this action; using Result_t = int;; ; MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}; ; // Called before the event loop to retrieve the address of the result that will be filled/generated.; std::shared_ptr<int> GetResultPtr() const { return fFinalResult; }; ; // Called at the beginning of the event loop.; void Initialize() {}; ; // Called at the beginning of each processing task.; void InitTask(TTreeReader *, int) {}; ; /// Call",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:79009,Security,access,accessed,79009,"(const std::string &jsonFile)Factory method to create an RDataFrame from a JSON specification file.Definition RDataFrame.cxx:1906; The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each sample in the ""metadata"" key.; A simple example for the formatting of the specification in the JSON file is the following:; {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; The metadata information from the specification file can be then accessed using the DefinePerSample function. For example, to access luminosity information (stored as a double):; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); or sample_category information (stored as a string):; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); or directly the filename:; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also provides a corresponding exemplary JSON file for the dataset specification. Adding a progress bar; A progress bar showing the processed event statistics can be added to any RDataFrame program. The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every n ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:79070,Security,access,access,79070,"ame.cxx:1906; The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each sample in the ""metadata"" key.; A simple example for the formatting of the specification in the JSON file is the following:; {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; The metadata information from the specification file can be then accessed using the DefinePerSample function. For example, to access luminosity information (stored as a double):; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); or sample_category information (stored as a string):; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); or directly the filename:; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also provides a corresponding exemplary JSON file for the dataset specification. Adding a progress bar; A progress bar showing the processed event statistics can be added to any RDataFrame program. The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled.;",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:83139,Security,access,access,83139,"erations. They take as input argument the name of a column of the dataset to watch for missing values. Like Filter, they will either keep or discard an entire entry based on whether a condition returns true or false. Specifically:. FilterAvailable: the condition is whether the value of the column is present. If so, the entry is kept. Otherwise if the value is missing the entry is discarded.; FilterMissing: the condition is whether the value of the column is missing. If so, the entry is kept. Otherwise if the value is present the entry is discarded. df = ROOT.RDataFrame(dataset); ; # Anytime an entry from ""col"" is missing, the entire entry will be filtered out; df_available = df.FilterAvailable(""col""); df_available = df_available.Define(""twice"", ""col * 2""); ; # Conversely, if we want to select the entries for which the column has missing; # values, we do the following; df_missingcol = df.FilterMissing(""col""); # Following operations in the same branch of the computation graph clearly; # cannot access that same column, since there would be no value to read; df_missingcol = df_missingcol.Define(""observable"", ""othercolumn * 2""); ROOT::RDataFrame df{dataset};; ; // Anytime an entry from ""col"" is missing, the entire entry will be filtered out; auto df_available = df.FilterAvailable(""col"");; auto df_twicecol = df_available.Define(""twice"", ""col * 2"");; ; // Conversely, if we want to select the entries for which the column has missing; // values, we do the following; auto df_missingcol = df.FilterMissing(""col"");; // Following operations in the same branch of the computation graph clearly; // cannot access that same column, since there would be no value to read; auto df_observable = df_missingcol.Define(""observable"", ""othercolumn * 2"");; DefaultValueFor; DefaultValueFor creates a node of the computation graph which just forwards the values of the columns necessary for other downstream nodes, when they are available. In case a value of the input column passed to this function is",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:83748,Security,access,access,83748,"m ""col"" is missing, the entire entry will be filtered out; df_available = df.FilterAvailable(""col""); df_available = df_available.Define(""twice"", ""col * 2""); ; # Conversely, if we want to select the entries for which the column has missing; # values, we do the following; df_missingcol = df.FilterMissing(""col""); # Following operations in the same branch of the computation graph clearly; # cannot access that same column, since there would be no value to read; df_missingcol = df_missingcol.Define(""observable"", ""othercolumn * 2""); ROOT::RDataFrame df{dataset};; ; // Anytime an entry from ""col"" is missing, the entire entry will be filtered out; auto df_available = df.FilterAvailable(""col"");; auto df_twicecol = df_available.Define(""twice"", ""col * 2"");; ; // Conversely, if we want to select the entries for which the column has missing; // values, we do the following; auto df_missingcol = df.FilterMissing(""col"");; // Following operations in the same branch of the computation graph clearly; // cannot access that same column, since there would be no value to read; auto df_observable = df_missingcol.Define(""observable"", ""othercolumn * 2"");; DefaultValueFor; DefaultValueFor creates a node of the computation graph which just forwards the values of the columns necessary for other downstream nodes, when they are available. In case a value of the input column passed to this function is not available, the node will provide the default value passed to this function call instead. Example:; df = ROOT.RDataFrame(dataset); # Anytime an entry from ""col"" is missing, the value will be the default one; default_value = ... # Some sensible default value here; df = df.DefaultValueFor(""col"", default_value) ; df = df.Define(""twice"", ""col * 2""); ROOT::RDataFrame df{dataset};; // Anytime an entry from ""col"" is missing, the value will be the default one; constexpr auto default_value = ... // Some sensible default value here; auto df_default = df.DefaultValueFor(""col"", default_value);; auto df_col = df",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:117037,Security,access,access,117037,"nterface for the documentation of the methods available. ; Definition at line 1807 of file RDataFrame.cxx. ◆ RDataFrame() [6/10]. ROOT::RDataFrame::RDataFrame ; (; ULong64_t ; numEntries). Build a dataframe that generates numEntries entries. ; Parameters. [in]numEntriesThe number of entries to generate. An empty-source dataframe constructed with a number of entries will generate those entries on the fly when some action is triggered, and it will do so for all the previously-defined columns. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1820 of file RDataFrame.cxx. ◆ RDataFrame() [7/10]. ROOT::RDataFrame::RDataFrame ; (; std::unique_ptr< ROOT::RDF::RDataSource > ; ds, . const ColumnNames_t & ; defaultColumns = {} . ). Build dataframe associated to data source. ; Parameters. [in]dsThe data source object. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. A dataframe associated to a data source will query it to access column values. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1833 of file RDataFrame.cxx. ◆ RDataFrame() [8/10]. ROOT::RDataFrame::RDataFrame ; (; ROOT::RDF::Experimental::RDatasetSpec ; spec). Build dataframe from an RDatasetSpec object. ; Parameters. [in]specThe dataset specification object. A dataset specification includes trees and file names, as well as an optional friend list and/or entry range. Example usage from Python:; spec = (; ROOT.RDF.Experimental.RDatasetSpec(); .AddSample((""data"", ""tree"", ""file.root"")); .WithGlobalFriends(""friendTree"", ""friend.root"", ""alias""); .WithGlobalRange((100, 200)); ); df = ROOT.RDataFrame(spec); ROOT::RDF::Experimental::RDatasetSpecThe dataset specification for RDataFrame.Definition RDatasetSpec.hxx:47; See also ROOT::RDataFrame::FromSpec(). ; Definition at line 1857 of file RDataFrame.cxx. ◆ RDataFrame() [9/10]. ROOT::RDataFrame::RDataFrame ; (; const RDataFrame & ; ).",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:2496,Testability,log,logs,2496,"T(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (storing and reusing sets of transformations); Visualizing the computation graph; Activating RDataFrame execution logs; Creating an RDataFrame from a dataset specification file; Adding a progress bar; Working with missing values in the dataset. Efficient analysis in Python; Class reference. Cheat sheet; These are the operations which can be performed with RDataFrame. Transformations; Transformations are a way to manipulate the data. Transformation Description . Alias() Introduce an alias for a particular column name. . DefaultValueFor() If the value of the input column is missing, provide a default value instead. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:39921,Testability,log,logic,39921,"buted docs):; import ROOT; from dask.distributed import Client; ; # Point RDataFrame calls to the Dask specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ; # In a Python script the Dask client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""); ; # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); If an instance of distributed.Client is not provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine using all cores available. Choosing the number of distributed tasks; A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to a batch system. The client object created at the beginning of the application does not automatically know how many cores will be available during distributed execution, since the jobs are submitted to the batch system after the creation of the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional keyword",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:40091,Testability,log,logic,40091,"sk client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""); ; # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); If an instance of distributed.Client is not provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine using all cores available. Choosing the number of distributed tasks; A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to a batch system. The client object created at the beginning of the application does not automatically know how many cores will be available during distributed execution, since the jobs are submitted to the batch system after the creation of the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional keyword argument npartitions when creating the RDataFrame object. This parameter is accepted irrespectively of the backend used:; import ROOT; ; # Define correct imports and access the distributed RDataFrame appropriate for ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:40753,Testability,log,logic,40753,"un the computations in the local machine using all cores available. Choosing the number of distributed tasks; A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to a batch system. The client object created at the beginning of the application does not automatically know how many cores will be available during distributed execution, since the jobs are submitted to the batch system after the creation of the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional keyword argument npartitions when creating the RDataFrame object. This parameter is accepted irrespectively of the backend used:; import ROOT; ; # Define correct imports and access the distributed RDataFrame appropriate for the; # backend used in the analysis; RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; ; if __name__ == ""__main__"":; # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); Note that when processing a TTree or TChain dataset, the npartitions value should not exceed the number of clusters in the dataset. The number of clusters in a TTree can be retrieved by typing rootls -lt myfile.root at a command line.",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:50955,Testability,log,logic,50955,"ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not de",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:52084,Testability,log,logging,52084,"ile Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See Activating RDataFrame execution logs. Memory usage; There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitig",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:52285,Testability,log,logs,52285,"n applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See Activating RDataFrame execution logs. Memory usage; There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-process, or booking all operations for all diff",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:71263,Testability,log,logical,71263,"dfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; Notice how we created one double variable for each processing slot and later merged their results via std::accumulate. Dataset joins with friend trees; Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same columns and more rows) is trivial in RDataFrame: just pass the tree name and a list of file names to RDataFrame's constructor, or create a TChain out of the desired trees and pass that to RDataFrame.; Horizontal concatenations of trees or chains (creating a logical dataset with the same number of rows and the union of the columns of multiple trees) leverages TTree's ""friend"" mechanism.; Simple joins of trees that do not have the same number of rows are also possible with indexed friend trees (see below).; To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:71551,Testability,log,logical,71551,"ots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; Notice how we created one double variable for each processing slot and later merged their results via std::accumulate. Dataset joins with friend trees; Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same columns and more rows) is trivial in RDataFrame: just pass the tree name and a list of file names to RDataFrame's constructor, or create a TChain out of the desired trees and pass that to RDataFrame.; Horizontal concatenations of trees or chains (creating a logical dataset with the same number of rows and the union of the columns of multiple trees) leverages TTree's ""friend"" mechanism.; Simple joins of trees that do not have the same number of rows are also possible with indexed friend trees (see below).; To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled wit",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:76552,Testability,log,logs,76552,"mputation graph is printed.; Following there is an example of usage: // First, a sample computational graph is built; ROOT::RDataFrame df(""tree"", ""f.root"");; ; auto df2 = df.Define(""x"", []() { return 1; }); .Filter(""col0 % 1 == col0""); .Filter([](int b1) { return b1 <2; }, {""cut1""}); .Define(""y"", []() { return 1; });; ; auto count = df2.Count();; ; // Prints the graph to the rd1.dot file in the current directory; ROOT::RDF::SaveGraph(df, ""./mydot.dot"");; // Prints the graph to standard output; ROOT::RDF::SaveGraph(df);; ROOT::RDF::SaveGraphstd::string SaveGraph(NodeType node)Create a graphviz representation of the dataframe computation graph, return it as a string.Definition RDFHelpers.hxx:120; The generated graph can be rendered using one of the graphviz filters, e.g. dot. For instance, the image below can be generated with the following command: $ dot -Tpng computation_graph.dot -ocomputation_graph.png. Activating RDataFrame execution logs; RDataFrame has experimental support for verbose logging of the event loop runtimes and other interesting related information. It is activated as follows: #include <ROOT/RLogger.hxx>; ; // this increases RDF's verbosity level as long as the `verbosity` variable is in scope; auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel::kInfo);; RLogger.hxx; ROOT::Experimental::RLogScopedVerbosityChange the verbosity level (global or specific to the RLogChannel passed to the constructor) for the ...Definition RLogger.hxx:243; ROOT::Detail::RDF::RDFLogChannelROOT::Experimental::RLogChannel & RDFLogChannel()Definition RDFUtils.cxx:37; ROOT::Experimental::ELogLevel::kInfo@ kInfoInformational messages; used for instance for tracing.; or in Python: import ROOT; ; verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kInfo); More information (e.g. start and end of each multi-thread task) is printed using ELogLevel.kDebu",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:76606,Testability,log,logging,76606,"mputation graph is printed.; Following there is an example of usage: // First, a sample computational graph is built; ROOT::RDataFrame df(""tree"", ""f.root"");; ; auto df2 = df.Define(""x"", []() { return 1; }); .Filter(""col0 % 1 == col0""); .Filter([](int b1) { return b1 <2; }, {""cut1""}); .Define(""y"", []() { return 1; });; ; auto count = df2.Count();; ; // Prints the graph to the rd1.dot file in the current directory; ROOT::RDF::SaveGraph(df, ""./mydot.dot"");; // Prints the graph to standard output; ROOT::RDF::SaveGraph(df);; ROOT::RDF::SaveGraphstd::string SaveGraph(NodeType node)Create a graphviz representation of the dataframe computation graph, return it as a string.Definition RDFHelpers.hxx:120; The generated graph can be rendered using one of the graphviz filters, e.g. dot. For instance, the image below can be generated with the following command: $ dot -Tpng computation_graph.dot -ocomputation_graph.png. Activating RDataFrame execution logs; RDataFrame has experimental support for verbose logging of the event loop runtimes and other interesting related information. It is activated as follows: #include <ROOT/RLogger.hxx>; ; // this increases RDF's verbosity level as long as the `verbosity` variable is in scope; auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel::kInfo);; RLogger.hxx; ROOT::Experimental::RLogScopedVerbosityChange the verbosity level (global or specific to the RLogChannel passed to the constructor) for the ...Definition RLogger.hxx:243; ROOT::Detail::RDF::RDFLogChannelROOT::Experimental::RLogChannel & RDFLogChannel()Definition RDFUtils.cxx:37; ROOT::Experimental::ELogLevel::kInfo@ kInfoInformational messages; used for instance for tracing.; or in Python: import ROOT; ; verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kInfo); More information (e.g. start and end of each multi-thread task) is printed using ELogLevel.kDebu",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:615,Usability,guid,guide,615,". ROOT: ROOT::RDataFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::RDataFrame Class ReferenceDataframe. ; ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. ; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and re",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:2569,Usability,progress bar,progress bar,2569,"T(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (storing and reusing sets of transformations); Visualizing the computation graph; Activating RDataFrame execution logs; Creating an RDataFrame from a dataset specification file; Adding a progress bar; Working with missing values in the dataset. Efficient analysis in Python; Class reference. Cheat sheet; These are the operations which can be performed with RDataFrame. Transformations; Transformations are a way to manipulate the data. Transformation Description . Alias() Introduce an alias for a particular column name. . DefaultValueFor() If the value of the input column is missing, provide a default value instead. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:4960,Usability,guid,guide,4960,"ion depends on the entry number. For details about entry numbers in multi-threaded runs, see here. . Filter() Filter rows based on user-defined conditions. . FilterAvailable() Specialized Filter. If the value of the input column is available, keep the entry, otherwise discard it. . FilterMissing() Specialized Filter. If the value of the input column is missing, keep the entry, otherwise discard it. . Range() Filter rows based on entry number (single-thread only). . Redefine() Overwrite the value and/or type of an existing column. See Define() for more information. . RedefineSlot() Overwrite the value and/or type of an existing column. See DefineSlot() for more information. . RedefineSlotEntry() Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. . Vary() Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). . Actions; Actions aggregate data into a result. Each one is described in more detail in the reference guide.; In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to produce many different results in one event loop. Instant actions trigger the event loop instantly. Lazy action Description . Aggregate() Execute a user-defined accumulation operation on the processed column values. . Book() Book execution of a custom action using a user-defined helper object. . Cache() Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). . Count() Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. . Display() Provides a printable representation of the dataset contents. The method retur",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:9353,Usability,simpl,simply,9353,"r-defined function on each entry. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. . ForeachSlot() Same as Foreach(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case slot will always be 0. . Snapshot() Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made lazy setting the appropriate flag in the snapshot options. . Queries; These operations do not modify the dataframe or book computations but simply return information on the RDataFrame object. Operation Description . Describe() Get useful information describing the dataframe, e.g. columns and their types. . GetColumnNames() Get the names of all the available columns of the dataset. . GetColumnType() Return the type of a given column as a string. . GetColumnTypeNamesList() Return the list of type names of columns in the dataset. . GetDefinedColumnNames() Get the names of all the defined columns. . GetFilterNames() Return the names of all filters in the computation graph. . GetNRuns() Return the number of event loops run by this RDataFrame instance so far. . GetNSlots() Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). . SaveGraph() Store the computation graph of an RDataFrame in DOT format (graphviz) for easy inspection. See the relevant section for details. . Introduction; Users define their analysis as a sequence of operations to be performed on",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:12441,Usability,simpl,simple,12441,"the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the crash course to discover more idiomatic and flexible ways to express analyses with RDataFrame. . TTreeReader ROOT::RDataFrame . TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; d.Filter(IsGoodEvent).Foreach(DoStuff);; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:219; . TTree::Draw ROOT::RDataFrame . auto *tree = file->Get<TTree>(""myTree"");; tree->Draw(""x"", ""y > 2"");; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ROOT::RDataFrame df(""myTree"", file);; auto h = df.Filter(""y > 2"").Histo1D(""x"");; h->Draw(); h#define h(i)Definition RSha256.hxx:106; . tree->Draw(""jet_eta"", ""weight*(event == 1)"");; df.Filter(""event == 1"").Histo1D(""jet_eta"", ""weight"");; // or the fully compiled version:; df.Filter([] (ULong64_t e) { return e == 1; }, {""event""}).Histo1D<RVec<float>>(""jet_eta"", ""weight"");; e#define e(i)Definition RSha256.hxx:103; ULong64_tunsigned ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:16213,Usability,simpl,simple,16213,"Frame d5(""myTree"", files);; RDataFrame d6(""myTree"", ""file*.root""); // the glob is passed as-is to TChain's constructor; RDataFrame d7(chain);; f#define f(i)Definition RSha256.hxx:104; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; Additionally, users can construct an RDataFrame with no data source by passing an integer number. This is the number of rows that will be generated by this RDataFrame. RDataFrame d(10); // a RDF with 10 entries (and no columns/branches, for now); d.Foreach([] { static int i = 0; std::cout << i++ << std::endl; }); // silly example usage: count to ten; This is useful to generate simple datasets on the fly: the contents of each event can be specified with Define() (explained below). For example, we have used this method to generate Pythia events and write them to disk in parallel (with the Snapshot action).; For data sources other than TTrees and TChains, RDataFrame objects are constructed using ad-hoc factory functions (see e.g. FromCSV(), FromSqlite(), FromArrow()):; auto df = ROOT::RDF::FromCSV(""input.csv"");; // use df as usual; ROOT::RDF::FromCSVRDataFrame FromCSV(std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={})Factory method to create a CSV RDataFrame.Definition RCsvDS.cxx:558. Filling a histogram; Let's now tackle a very common task, filling a histogram: // Fill a TH1D with the ""MET"" branch; RDataFrame d(""myTree"", ""file.root"");; auto h = d.Histo1D(""MET"");; h->Draw();; The first line creates an RDataFrame associated to the TTree ""myTree"". ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:18611,Usability,simpl,simple,18611,"ts are wrapped in smart pointers; we'll see why in a minute. Applying a filter; Let's say we want to cut over the value of branch ""MET"" and count how many events pass this cut. This is one way to do it: RDataFrame d(""myTree"", ""file.root"");; auto c = d.Filter(""MET > 4."").Count(); // computations booked, not run; std::cout << *c << std::endl; // computations run here, upon first access to the result; The filter string (which must contain a valid C++ expression) is applied to the specified columns for each event; the name and types of the columns are inferred automatically. The string expression is required to return a bool which signals whether the event passes the filter (true) or not (false).; You can think of your data as ""flowing"" through the chain of calls, being transformed, filtered and finally used to perform actions. Multiple Filter() calls can be chained one after another.; Using string filters is nice for simple things, but they are limited to specifying the equivalent of a single return statement or the body of a lambda, so it's cumbersome to use strings with more complex filters. They also add a small runtime overhead, as ROOT needs to just-in-time compile the string into C++ code. When more freedom is required or runtime performance is very important, a C++ callable can be specified instead (a lambda in the following snippet, but it can be any kind of function or even a functor class), together with a list of column names. This snippet is analogous to the one above: RDataFrame d(""myTree"", ""file.root"");; auto metCut = [](double x) { return x > 4.; }; // a C++11 lambda function checking ""x > 4""; auto c = d.Filter(metCut, {""MET""}).Count();; std::cout << *c << std::endl;; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::CountRResultPtr< ULong64_t > Count()Return the number of entries processed (lazy action).Definition RInterface.hxx:1729; xDouble_t x[n]Definition legend1.C:17; An example of a more complex filter expressed as a string containing C++ code is ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:23277,Usability,simpl,simple,23277,"using PyROOT.; Previously, when showing the different ways an RDataFrame can be created, we showed a constructor that takes a number of entries as a parameter. In the following example we show how to combine such an ""empty"" RDataFrame with Define() transformations to create a dataset on the fly. We then save the generated data on disk using the Snapshot() action. RDataFrame d(100); // an RDF that will generate 100 entries (currently empty); int x = -1;; auto d_with_columns = d.Define(""x"", [&x] { return ++x; }); .Define(""xx"", [&x] { return x*x; });; d_with_columns.Snapshot(""myNewTree"", ""newfile.root"");; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::DefineRInterface< RDFDetail::RLoopManager, DS_t > Define(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column.Definition RInterface.hxx:441; This example is slightly more advanced than what we have seen so far. First, it makes use of lambda captures (a simple way to make external variables available inside the body of C++ lambdas) to act on the same variable x from both Define() transformations. Second, we have stored the transformed dataframe in a variable. This is always possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more on this below).; You can read more about defining new columns here. A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action. Running on a range of entries; It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act exclusively on the entries passing the filter – it will not even count the other entries! The same goes for a Ra",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:29792,Usability,simpl,simply,29792,"hether the event has passed the selection (true) or not (false). It should perform ""read-only"" operations on the columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column names are used as variable names (e.g. Filter(""x[0] + x[1] > 0"")). This is a convenience feature that comes with a certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event loop. See the paragraph about ""Just-in-time compilation"" below for more information.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded and triggers the processing of the next entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and cutflow reports; An optional string parameter name can be passed to the Filter() method to create a named filter. Named filters work as usual, but also keep track of how many entries they accept and reject.; Statistics are retrieved through a call to the Report() method:. when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all named filters declared up to that point; when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative all named filters in the section of the chain between the main RDataFrame and that node (included). Stats are stored in the same order as named filters have been added to the graph, and refer to the latest event-loop that has been run using the relevant RDataFrame. Ranges; When RDataFrame is not being used in a mult",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:48090,Usability,simpl,simple,48090,"column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writi",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:52105,Usability,simpl,simplifies,52105,"ile Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See Activating RDataFrame execution logs. Memory usage; There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitig",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:56279,Usability,simpl,simply,56279,"e results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ROOT::RDF::Experimental::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second to the tag ""up""). The full variation name will be composed of the varied column name and the variation tags (e.g. ""pt:down"", ""pt:up"" in this example). Python usage looks similar.; Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define calls for each variation and fill the histogram with values and cuts that depend on the variation.; There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and complex functors. The callable can be applied to zero or more existing columns and it will always receive their nominal value in input.; Varying multiple columns in lockstep; In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or ""in lockstep"":; df.Vary([""pt"", ""eta""],; ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; variationTags=[""down"", ""up""],; variationName=""ptAndEta""); The expression returns an RVec of two RVecs: each inner vect",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:59115,Usability,feedback,feedback,59115," similar:; auto df = _df.Vary(""pt"",; ""ROOT::RVecD{pt*0.9, pt*1.1}"",; {""down"", ""up""}); .Vary(""eta"",; [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; {""eta""},; 2);; ; auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; auto all_hs = VariationsFor(nom_h);; all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::VaryRInterface< RDFDetail::RLoopManager, DS_t > Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName="""")Register systematic variations for a single existing column using custom variation tags.Definition RInterface.hxx:862; Note how we passed the integer 2 instead of a list of variation tags to the second Vary() invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, VariationsFor() and RResultMap are in the ROOT::RDF::Experimental namespace, to indicate that these interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related programming model will be streamlined in future versions. Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary and VariationsFor() in the analysis. RDataFrame objects as function arguments and return values; RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into) functions and to return them from functions. However, in general each dataframe node will have a different C++ type, which includes all available compile-time information about what that node does. One way to cope with this complication is to use template functions and/or C++14 auto return types: template <t",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:60166,Usability,simpl,simpler,60166,"), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary and VariationsFor() in the analysis. RDataFrame objects as function arguments and return values; RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into) functions and to return them from functions. However, in general each dataframe node will have a different C++ type, which includes all available compile-time information about what that node does. One way to cope with this complication is to use template functions and/or C++14 auto return types: template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode: // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function ROOT.RDF.AsRNode. Storing RDataFrame objects in collections; ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a std::vector<RNode> or a std::map<std::string, RNode>:; std::vector<ROOT::RDF::RNode> dfs;; dfs.emplace_back(ROOT::RDataFrame(10));; dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));. Executing callbacks every N events; It's possible to schedule execution o",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:60956,Usability,simpl,simple,60956,"his complication is to use template functions and/or C++14 auto return types: template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode: // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function ROOT.RDF.AsRNode. Storing RDataFrame objects in collections; ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a std::vector<RNode> or a std::map<std::string, RNode>:; std::vector<ROOT::RDF::RNode> dfs;; dfs.emplace_back(ROOT::RDataFrame(10));; dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));. Executing callbacks every N events; It's possible to schedule execution of arbitrary functions (callbacks) during the event loop. Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running, drawing a partially-filled histogram every time a certain number of new entries is processed, or displaying a progress bar while the event loop runs.; For example one can draw an up-to-date version of a result histogram every 100 entries like this: auto h = df.Histo1D(""x"");; TCanvas c(""c"",""x hist"");; h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); h_.Draw(); c.Update(); });; // event loop runs here, this final `Draw` is executed after the event loop is finished; h->Draw();; TCanvasThe Canvas class.Definition TCanva",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:61534,Usability,progress bar,progress bar,61534,"tAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function ROOT.RDF.AsRNode. Storing RDataFrame objects in collections; ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a std::vector<RNode> or a std::map<std::string, RNode>:; std::vector<ROOT::RDF::RNode> dfs;; dfs.emplace_back(ROOT::RDataFrame(10));; dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));. Executing callbacks every N events; It's possible to schedule execution of arbitrary functions (callbacks) during the event loop. Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running, drawing a partially-filled histogram every time a certain number of new entries is processed, or displaying a progress bar while the event loop runs.; For example one can draw an up-to-date version of a result histogram every 100 entries like this: auto h = df.Histo1D(""x"");; TCanvas c(""c"",""x hist"");; h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); h_.Draw(); c.Update(); });; // event loop runs here, this final `Draw` is executed after the event loop is finished; h->Draw();; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; Callbacks are registered to a ROOT::RDF::RResultPtr and must be callables that takes a reference to the result type as argument and return nothing. RDataFrame will invoke registered callbacks passing partial action results as arguments to them (e.g. a histogram filled with a part of the selected events).; Read more on ROOT::RDF::RResultPtr::OnPartialResult() and ROOT::RDF::RResultPtr::OnPartialResultSlot(). Default ",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:69918,Usability,simpl,simple,69918,"al for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.be",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:72749,Usability,simpl,simple,72749,"lso possible with indexed friend trees (see below).; To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information abou",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:78492,Usability,simpl,simple,78492,"inted using ELogLevel.kDebug and even more (e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using ELogLevel.kDebug+10. Creating an RDataFrame from a dataset specification file; RDataFrame can be created using a dataset specification JSON file:; import ROOT; ; df = ROOT.RDF.Experimental.FromSpec(""spec.json""); ROOT::RDF::Experimental::FromSpecROOT::RDataFrame FromSpec(const std::string &jsonFile)Factory method to create an RDataFrame from a JSON specification file.Definition RDataFrame.cxx:1906; The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each sample in the ""metadata"" key.; A simple example for the formatting of the specification in the JSON file is the following:; {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; The metadata information from the specification file can be then accessed using the DefinePerSample function. For example, to access luminosity information (stored as a double):; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); or sample_category information (stored as a string):; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); or directly the filename:; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also provides a corresponding exemplary JSON file for the",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:79608,Usability,progress bar,progress bar,79608,"ile1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; The metadata information from the specification file can be then accessed using the DefinePerSample function. For example, to access luminosity information (stored as a double):; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); or sample_category information (stored as a string):; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); or directly the filename:; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also provides a corresponding exemplary JSON file for the dataset specification. Adding a progress bar; A progress bar showing the processed event statistics can be added to any RDataFrame program. The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled.; ProgressBar is added after creating the dataframe object (df): ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility For example, it can be called at any computational node, such as Filter or Define, not only the head node, with no change to the ProgressBar function itself (please see the Eff",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:79624,Usability,progress bar,progress bar,79624,"ile1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; The metadata information from the specification file can be then accessed using the DefinePerSample function. For example, to access luminosity information (stored as a double):; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); or sample_category information (stored as a string):; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); or directly the filename:; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also provides a corresponding exemplary JSON file for the dataset specification. Adding a progress bar; A progress bar showing the processed event statistics can be added to any RDataFrame program. The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled.; ProgressBar is added after creating the dataframe object (df): ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility For example, it can be called at any computational node, such as Filter or Define, not only the head node, with no change to the ProgressBar function itself (please see the Eff",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:80994,Usability,progress bar,progress bars,80994,"ressBar can be also added when the multithread (MT) mode is enabled.; ProgressBar is added after creating the dataframe object (df): ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility For example, it can be called at any computational node, such as Filter or Define, not only the head node, with no change to the ProgressBar function itself (please see the Efficient analysis in Python section for appropriate usage in Python): ROOT::RDataFrame df(""tree"", ""file.root"");; auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; Examples of implemented progress bars can be seen by running Higgs to Four Lepton tutorial and Dimuon tutorial. Working with missing values in the dataset; In certain situations a dataset might be missing one or more values at one or more of its entries. For example:. If the dataset is composed of multiple files and one or more files is missing one or more columns required by the analysis.; When joining different datasets horizontally according to some index value (e.g. the event number), if the index does not find a match in one or more other datasets for a certain entry. For example, suppose that column ""y"" does not have a value for entry 42:; +-------+---+---+; | Entry | x | y |; +-------+---+---+; | 42 | 1 | |; +-------+---+---+; If the RDataFrame application reads that column, for example if a Take() action was requested, the default behaviour is to throw an exception indicating that that column is missing an entry.; The following paragraphs discuss the functionalities provided by RDataFrame to work with missing values in the datas",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:83121,Usability,clear,clearly,83121,"erations. They take as input argument the name of a column of the dataset to watch for missing values. Like Filter, they will either keep or discard an entire entry based on whether a condition returns true or false. Specifically:. FilterAvailable: the condition is whether the value of the column is present. If so, the entry is kept. Otherwise if the value is missing the entry is discarded.; FilterMissing: the condition is whether the value of the column is missing. If so, the entry is kept. Otherwise if the value is present the entry is discarded. df = ROOT.RDataFrame(dataset); ; # Anytime an entry from ""col"" is missing, the entire entry will be filtered out; df_available = df.FilterAvailable(""col""); df_available = df_available.Define(""twice"", ""col * 2""); ; # Conversely, if we want to select the entries for which the column has missing; # values, we do the following; df_missingcol = df.FilterMissing(""col""); # Following operations in the same branch of the computation graph clearly; # cannot access that same column, since there would be no value to read; df_missingcol = df_missingcol.Define(""observable"", ""othercolumn * 2""); ROOT::RDataFrame df{dataset};; ; // Anytime an entry from ""col"" is missing, the entire entry will be filtered out; auto df_available = df.FilterAvailable(""col"");; auto df_twicecol = df_available.Define(""twice"", ""col * 2"");; ; // Conversely, if we want to select the entries for which the column has missing; // values, we do the following; auto df_missingcol = df.FilterMissing(""col"");; // Following operations in the same branch of the computation graph clearly; // cannot access that same column, since there would be no value to read; auto df_observable = df_missingcol.Define(""observable"", ""othercolumn * 2"");; DefaultValueFor; DefaultValueFor creates a node of the computation graph which just forwards the values of the columns necessary for other downstream nodes, when they are available. In case a value of the input column passed to this function is",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:83729,Usability,clear,clearly,83729,"m ""col"" is missing, the entire entry will be filtered out; df_available = df.FilterAvailable(""col""); df_available = df_available.Define(""twice"", ""col * 2""); ; # Conversely, if we want to select the entries for which the column has missing; # values, we do the following; df_missingcol = df.FilterMissing(""col""); # Following operations in the same branch of the computation graph clearly; # cannot access that same column, since there would be no value to read; df_missingcol = df_missingcol.Define(""observable"", ""othercolumn * 2""); ROOT::RDataFrame df{dataset};; ; // Anytime an entry from ""col"" is missing, the entire entry will be filtered out; auto df_available = df.FilterAvailable(""col"");; auto df_twicecol = df_available.Define(""twice"", ""col * 2"");; ; // Conversely, if we want to select the entries for which the column has missing; // values, we do the following; auto df_missingcol = df.FilterMissing(""col"");; // Following operations in the same branch of the computation graph clearly; // cannot access that same column, since there would be no value to read; auto df_observable = df_missingcol.Define(""observable"", ""othercolumn * 2"");; DefaultValueFor; DefaultValueFor creates a node of the computation graph which just forwards the values of the columns necessary for other downstream nodes, when they are available. In case a value of the input column passed to this function is not available, the node will provide the default value passed to this function call instead. Example:; df = ROOT.RDataFrame(dataset); # Anytime an entry from ""col"" is missing, the value will be the default one; default_value = ... # Some sensible default value here; df = df.DefaultValueFor(""col"", default_value) ; df = df.Define(""twice"", ""col * 2""); ROOT::RDataFrame df{dataset};; // Anytime an entry from ""col"" is missing, the value will be the default one; constexpr auto default_value = ... // Some sensible default value here; auto df_default = df.DefaultValueFor(""col"", default_value);; auto df_col = df",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:86631,Usability,simpl,simple,86631,"; Printvoid Print(GNN_Data &d, std::string txt="""")Definition TMVA_SOFIE_GNN_Application.C:59; ROOT::RDataFrame df{dataset};; ; // Anytime an entry from ""col"" is missing, the value will be the default one; constexpr auto default_value = ... // Some sensible default value here; auto df_default = df.DefaultValueFor(""col"", default_value).Define(""twice"", ""col * 2"");; auto df_filtered = df.FilterAvailable(""col"").Define(""twice"", ""col * 2"");; ; // Same number of total entries as the input dataset, with defaulted values; df_default.Display({""twice""})->Print();; // Only keep the entries where ""col"" has values; df_filtered.Display({""twice""})->Print();; Further considerations; Note that working with missing values is currently supported with a TTree-based data source. Support of this functionality for other data sources may come in the future. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performa",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:86817,Usability,simpl,simple,86817,"ensible default value here; auto df_default = df.DefaultValueFor(""col"", default_value).Define(""twice"", ""col * 2"");; auto df_filtered = df.FilterAvailable(""col"").Define(""twice"", ""col * 2"");; ; // Same number of total entries as the input dataset, with defaulted values; df_default.Display({""twice""})->Print();; // Only keep the entries where ""col"" has values; df_filtered.Display({""twice""})->Print();; Further considerations; Note that working with missing values is currently supported with a TTree-based data source. Support of this functionality for other data sources may come in the future. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterprete",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:87135,Usability,simpl,simple,87135," Only keep the entries where ""col"" has values; df_filtered.Display({""twice""})->Print();; Further considerations; Note that working with missing values is currently supported with a TTree-based data source. Support of this functionality for other data sources may come in the future. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:88538,Usability,simpl,simple,88538,"r(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code; ROOT also offers the option to compile Python functions with fundamental types and arrays thereof using Numba. Such compiled functions can then be used in a C++ expression provided to RDataFrame.; The function to be compiled should be decorated with ROOT.Numba.Declare, which allows to specify the parameter and return types. See the following snippet for a simple example or the full tutorial here.; @ROOT.Numba.Declare([""float""], ""bool""); def myFilter(x):; return x > 10; ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""Numba::myFilter(x)"").Sum(""y""); print(sum.GetValue()); It also works with collections: RVec objects of fundamental types can be transparently converted to/from numpy arrays:; @ROOT.Numba.Declare(['RVec<float>', 'int'], 'RVec<float>'); def pypowarray(numpyvec, pow):; return numpyvec**pow; ; df.Define('array', 'ROOT::RVecF{1.,2.,3.}')\; .Define('arraySquared', 'Numba::pypowarray(array, 2)'); Note that this functionality requires the Python packages numba and cffi to be installed. Interoperability with NumPy; Conversion to NumPy arrays; Eventually, you probably would like to inspect the content of the RDataFrame or process the data further with Python libraries. For this purpose, we provide the AsNumpy() function, which returns the columns of your RDataFrame as a dictionary of NumPy arrays. See a simple example bel",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDataFrame.html:89524,Usability,simpl,simple,89524,"e example or the full tutorial here.; @ROOT.Numba.Declare([""float""], ""bool""); def myFilter(x):; return x > 10; ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""Numba::myFilter(x)"").Sum(""y""); print(sum.GetValue()); It also works with collections: RVec objects of fundamental types can be transparently converted to/from numpy arrays:; @ROOT.Numba.Declare(['RVec<float>', 'int'], 'RVec<float>'); def pypowarray(numpyvec, pow):; return numpyvec**pow; ; df.Define('array', 'ROOT::RVecF{1.,2.,3.}')\; .Define('arraySquared', 'Numba::pypowarray(array, 2)'); Note that this functionality requires the Python packages numba and cffi to be installed. Interoperability with NumPy; Conversion to NumPy arrays; Eventually, you probably would like to inspect the content of the RDataFrame or process the data further with Python libraries. For this purpose, we provide the AsNumpy() function, which returns the columns of your RDataFrame as a dictionary of NumPy arrays. See a simple example below or a full tutorial here.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); cols = df.Filter(""x > 10"").AsNumpy([""x"", ""y""]) # retrieve columns ""x"" and ""y"" as NumPy arrays; print(cols[""x""], cols[""y""]) # the values of the cols dictionary are NumPy arrays; Processing data stored in NumPy arrays; In case you have data in NumPy arrays in Python and you want to process the data with ROOT, you can easily create an RDataFrame using ROOT.RDF.FromNumpy. The factory function accepts a dictionary where the keys are the column names and the values are NumPy arrays, and returns a new RDataFrame with the provided columns.; Only arrays of fundamental types (integers and floating point values) are supported and the arrays must have the same length. Data is read directly from the arrays: no copies are performed.; # Read data from NumPy arrays; # The column names in the RDataFrame are taken from the dictionary keys; x, y = numpy.array([1, 2, 3]), numpy.array([4, 5, 6]); df = ROOT.RDF.FromNumpy({""x"": x, ""y""",MatchSource.WIKI,doc/master/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1Experimental_1_1RDatasetSpec.html:730,Availability,avail,available,730,". ROOT: ROOT::RDF::Experimental::RDatasetSpec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::Experimental::RDatasetSpec Class ReferenceDataframe. ; The dataset specification for RDataFrame. ; This class allows users to create the dataset specification for RDataFrame to which they add samples (using the RSample class object) with tree names and file names, and, optionally, the metadata information (using the RMetaData class objects). Adding global friend trees and/or setting the range of events to be processed are also available.; Note, there exists yet another method to build RDataFrame from the dataset information using the JSON file format: FromSpec(). ; Definition at line 47 of file RDatasetSpec.hxx. Classes; struct  REntryRange;  . Public Member Functions;  RDatasetSpec ()=default;  ; RDatasetSpec & AddSample (RSample sample);  Add sample (RSample class object) to the RDatasetSpec object. ;  ; Long64_t GetEntryRangeBegin () const;  Returns the first entry as defined by the global range provided in the specification. ;  ; Long64_t GetEntryRangeEnd () const;  Returns the last entry as defined by the global range provided in the specification. ;  ; const std::vector< std::string > GetFileNameGlobs () const;  Returns the collection of the dataset's paths to files, or globs if specified in input. ;  ; const ROOT::TreeUtils::RFriendInfo & GetFriendInfo () const;  Returns the reference to the friend tree information. ;  ; const std::vector< RMetaData > GetMetaData () const;  Returns the collection of the dataset's metadata (RMetaData class objects). ;  ; const std::vector< std::string > GetSampleNames () const;  Returns the collection of the dataset's sample names. ;  ; const std::vector< std::string > GetTreeNames () const;  Returns the collection of the dataset's tr",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1Experimental_1_1RDatasetSpec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1Experimental_1_1RDatasetSpec.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1Experimental_1_1RDatasetSpec.html:5739,Integrability,interface,interface,5739,"Spec object to which we add the sample (RSample object).; ROOT::RDF::Experimental::RDatasetSpec spec;; spec.AddSample(mySample);; // Finally, create an RDataFrame from the RDatasetSpec object.; auto df = ROOT::RDataFrame(spec);; ROOT::RDF::Experimental::RDatasetSpecThe dataset specification for RDataFrame.Definition RDatasetSpec.hxx:47; ROOT::RDF::Experimental::RDatasetSpec::AddSampleRDatasetSpec & AddSample(RSample sample)Add sample (RSample class object) to the RDatasetSpec object.Definition RDatasetSpec.cxx:131; ROOT::RDF::Experimental::RMetaDataClass behaving as a heterogenuous dictionary to store the metadata of a dataset.Definition RMetaData.hxx:50; ROOT::RDF::Experimental::RMetaData::Addvoid Add(const std::string &key, int val)Add an RMetaData class instance.Definition RMetaData.cxx:42; ROOT::RDF::Experimental::RSampleClass representing a sample which is a grouping of trees and their fileglobs, and,...Definition RSample.hxx:39; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41. Definition at line 131 of file RDatasetSpec.cxx. ◆ GetEntryRangeBegin(). Long64_t ROOT::RDF::Experimental::RDatasetSpec::GetEntryRangeBegin ; (; ); const. Returns the first entry as defined by the global range provided in the specification. ; The first entry is inclusive. ; Definition at line 85 of file RDatasetSpec.cxx. ◆ GetEntryRangeEnd(). Long64_t ROOT::RDF::Experimental::RDatasetSpec::GetEntryRangeEnd ; (; ); const. Returns the last entry as defined by the global range provided in the specification. ; The last entry is exclusive. ; Definition at line 93 of file RDatasetSpec.cxx. ◆ GetFileNameGlobs(). const std::vector< std::string > ROOT::RDF::Experimental::RDatasetSpec::GetFileNameGlobs ; (; ); const. Returns the collection of the dataset's paths to files, or globs if specified in input. ; Definition at line 55 of file RDatasetSpec.cxx. ◆ GetFriendInfo(). const ROOT::TreeUtils::RFriendInfo ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1Experimental_1_1RDatasetSpec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1Experimental_1_1RDatasetSpec.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html:2690,Availability,avail,available,2690,"must have the same number of fields, in the same order.; Any field may be quoted. ""1997"",""Ford"",""E350"". Fields with embedded delimiters (e.g. comma) must be quoted. 1997,Ford,E350,""Super, luxurious truck"". Fields with double-quote characters must be quoted, and each of the embedded double-quote characters must be represented by a pair of double-quote characters. 1997,Ford,E350,""Super, """"luxurious"""" truck"". Fields with embedded line breaks are not supported, even when quoted. 1997,Ford,E350,""Go get one now; they are going fast"". Spaces are considered part of a field and are not ignored. 1997, Ford , E350; not same as; 1997,Ford,E350; but same as; 1997, ""Ford"" , E350. If a header row is provided, it must contain column names for each of the fields. Year,Make,Model; 1997,Ford,E350; 2000,Mercury,Cougar. The current implementation of RCsvDS reads the entire CSV file content into memory before RDataFrame starts processing it. Therefore, before creating a CSV RDataFrame, it is important to check both how much memory is available and the size of the CSV file.; RCsvDS can handle empty cells and also allows the usage of the special keywords ""NaN"" and ""nan"" to indicate nan values. If the column is of type double, these cells are stored internally as nan. Empty cells and explicit nan-s inside columns of type Long64_t/bool are stored as zeros. ; Definition at line 35 of file RCsvDS.hxx. Public Member Functions;  RCsvDS (std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={});  Constructor to create a CSV RDataSource for RDataFrame. ;  ;  ~RCsvDS ();  Destructor. ;  ; void Finalize () final;  Convenience method called after concluding an event-loop. ;  ; const std::vector< std::string > & GetColumnNames () const final;  Returns a reference to the collection of the dataset's column names. ;  ; std::vector< std::pair< ULong64_t, ULong64_t > > GetEntryRanges () final;  Return ranges of",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RCsvDS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html:4407,Modifiability,inherit,inherited,4407,"nal;  Returns a reference to the collection of the dataset's column names. ;  ; std::vector< std::pair< ULong64_t, ULong64_t > > GetEntryRanges () final;  Return ranges of entries to distribute to tasks. ;  ; std::string GetLabel () final;  Return a string representation of the datasource type. ;  ; std::size_t GetNFiles () const final;  Returns the number of files from which the dataset is constructed. ;  ; std::string GetTypeName (std::string_view colName) const final;  Type of a column as a string, e.g. ;  ; bool HasColumn (std::string_view colName) const final;  Checks if the dataset has a certain column. ;  ; bool SetEntry (unsigned int slot, ULong64_t entry) final;  Advance the ""cursors"" returned by GetColumnReaders to the selected entry for a particular slot. ;  ; void SetNSlots (unsigned int nSlots) final;  Inform RDataSource of the number of processing slots (i.e. ;  ;  Public Member Functions inherited from ROOT::RDF::RDataSource; virtual ~RDataSource ()=default;  ; virtual void FinalizeSlot (unsigned int);  Convenience method called at the end of the data processing associated to a slot. ;  ; template<typename T > ; std::vector< T ** > GetColumnReaders (std::string_view columnName);  Called at most once per column by RDF. ;  ; virtual std::unique_ptr< ROOT::Detail::RDF::RColumnReaderBase > GetColumnReaders (unsigned int, std::string_view, const std::type_info &);  If the other GetColumnReaders overload returns an empty vector, this overload will be called instead. ;  ; virtual void Initialize ();  Convenience method called before starting an event-loop. ;  ; virtual void InitSlot (unsigned int, ULong64_t);  Convenience method called at the start of the data processing associated to a slot. ;  . Protected Member Functions; std::string AsString () final;  . Private Types; using ColType_t = char;  . Private Member Functions; void FillHeaders (const std::string &);  ; void FillRecord (const std::string &, Record_t &);  ; void FreeRecords ();  ; void GenerateH",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RCsvDS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html:7263,Modifiability,inherit,inherited,7263,"> fColTypes;  ; std::list< ColType_t > fColTypesList;  ; std::unique_ptr< ROOT::Internal::RRawFile > fCsvFile;  ; std::uint64_t fDataPos = 0;  ; const char fDelimiter;  ; std::vector< std::vector< double > > fDoubleEvtValues;  ; ULong64_t fEntryRangesRequested = 0ULL;  ; std::vector< std::string > fHeaders;  ; const Long64_t fLinesChunkSize;  ; std::vector< std::vector< Long64_t > > fLong64EvtValues;  ; unsigned int fNSlots = 0U;  ; ULong64_t fProcessedLines = 0ULL;  ; bool fReadHeaders = false;  ; std::vector< Record_t > fRecords;  ; std::vector< std::vector< std::string > > fStringEvtValues;  . Static Private Attributes; static const std::unordered_map< ColType_t, std::string > fgColTypeMap;  ; static const TRegexp fgDoubleRegex1;  ; static const TRegexp fgDoubleRegex2;  ; static const TRegexp fgDoubleRegex3;  ; static const TRegexp fgFalseRegex;  ; static const TRegexp fgIntRegex;  ; static const TRegexp fgTrueRegex;  . Additional Inherited Members;  Protected Types inherited from ROOT::RDF::RDataSource; using Record_t = std::vector< void * >;  . #include <ROOT/RCsvDS.hxx>. Inheritance diagram for ROOT::RDF::RCsvDS:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ColType_t. using ROOT::RDF::RCsvDS::ColType_t = char. private . Definition at line 39 of file RCsvDS.hxx. Constructor & Destructor Documentation. ◆ RCsvDS(). ROOT::RDF::RCsvDS::RCsvDS ; (; std::string_view ; fileName, . bool ; readHeaders = true, . char ; delimiter = ',', . Long64_t ; linesChunkSize = -1LL, . std::unordered_map< std::string, char > && ; colTypes = {} . ). Constructor to create a CSV RDataSource for RDataFrame. ; Parameters. [in]fileNamePath or URL of the CSV file. ; [in]readHeaderstrue if the CSV file contains headers as first row, false otherwise (default true). ; [in]delimiterDelimiter character (default ','). ; [in]linesChunkSizebunch of lines to read, use -1 to read all ; [in]colTypesAllows users to manua",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RCsvDS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html:14074,Performance,concurren,concurrently,14074,"ate . Definition at line 287 of file RCsvDS.cxx. ◆ SetEntry(). bool ROOT::RDF::RCsvDS::SetEntry ; (; unsigned int ; slot, . ULong64_t ; entry . ). finalvirtual . Advance the ""cursors"" returned by GetColumnReaders to the selected entry for a particular slot. ; Parameters. [in]slotThe data processing slot that needs to be considered ; [in]entryThe entry which needs to be pointed to by the reader pointers Slots are adopted to accommodate parallel data processing. Different workers will loop over different ranges and will be labelled by different ""slot"" values. Returns true if the entry has to be processed, false otherwise. . Implements ROOT::RDF::RDataSource.; Definition at line 505 of file RCsvDS.cxx. ◆ SetNSlots(). void ROOT::RDF::RCsvDS::SetNSlots ; (; unsigned int ; nSlots). finalvirtual . Inform RDataSource of the number of processing slots (i.e. ; worker threads) used by the associated RDataFrame. Slots numbers are used to simplify parallel execution: RDataFrame guarantees that different threads will always pass different slot values when calling methods concurrently. ; Implements ROOT::RDF::RDataSource.; Definition at line 536 of file RCsvDS.cxx. ◆ ValidateColTypes(). void ROOT::RDF::RCsvDS::ValidateColTypes ; (; std::vector< std::string > & ; columns); const. private . Definition at line 203 of file RCsvDS.cxx. Member Data Documentation. ◆ fBoolEvtValues. std::vector<std::deque<bool> > ROOT::RDF::RCsvDS::fBoolEvtValues. private . Definition at line 64 of file RCsvDS.hxx. ◆ fColAddresses. std::vector<std::vector<void *> > ROOT::RDF::RCsvDS::fColAddresses. private . Definition at line 57 of file RCsvDS.hxx. ◆ fColContainingEmpty. std::set<std::string> ROOT::RDF::RCsvDS::fColContainingEmpty. private . Definition at line 55 of file RCsvDS.hxx. ◆ fColTypes. std::unordered_map<std::string, ColType_t> ROOT::RDF::RCsvDS::fColTypes. private . Definition at line 54 of file RCsvDS.hxx. ◆ fColTypesList. std::list<ColType_t> ROOT::RDF::RCsvDS::fColTypesList. private . Defin",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RCsvDS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html:13940,Usability,simpl,simplify,13940,"ate . Definition at line 287 of file RCsvDS.cxx. ◆ SetEntry(). bool ROOT::RDF::RCsvDS::SetEntry ; (; unsigned int ; slot, . ULong64_t ; entry . ). finalvirtual . Advance the ""cursors"" returned by GetColumnReaders to the selected entry for a particular slot. ; Parameters. [in]slotThe data processing slot that needs to be considered ; [in]entryThe entry which needs to be pointed to by the reader pointers Slots are adopted to accommodate parallel data processing. Different workers will loop over different ranges and will be labelled by different ""slot"" values. Returns true if the entry has to be processed, false otherwise. . Implements ROOT::RDF::RDataSource.; Definition at line 505 of file RCsvDS.cxx. ◆ SetNSlots(). void ROOT::RDF::RCsvDS::SetNSlots ; (; unsigned int ; nSlots). finalvirtual . Inform RDataSource of the number of processing slots (i.e. ; worker threads) used by the associated RDataFrame. Slots numbers are used to simplify parallel execution: RDataFrame guarantees that different threads will always pass different slot values when calling methods concurrently. ; Implements ROOT::RDF::RDataSource.; Definition at line 536 of file RCsvDS.cxx. ◆ ValidateColTypes(). void ROOT::RDF::RCsvDS::ValidateColTypes ; (; std::vector< std::string > & ; columns); const. private . Definition at line 203 of file RCsvDS.cxx. Member Data Documentation. ◆ fBoolEvtValues. std::vector<std::deque<bool> > ROOT::RDF::RCsvDS::fBoolEvtValues. private . Definition at line 64 of file RCsvDS.hxx. ◆ fColAddresses. std::vector<std::vector<void *> > ROOT::RDF::RCsvDS::fColAddresses. private . Definition at line 57 of file RCsvDS.hxx. ◆ fColContainingEmpty. std::set<std::string> ROOT::RDF::RCsvDS::fColContainingEmpty. private . Definition at line 55 of file RCsvDS.hxx. ◆ fColTypes. std::unordered_map<std::string, ColType_t> ROOT::RDF::RCsvDS::fColTypes. private . Definition at line 54 of file RCsvDS.hxx. ◆ fColTypesList. std::list<ColType_t> ROOT::RDF::RCsvDS::fColTypesList. private . Defin",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RCsvDS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html:529,Energy Efficiency,adapt,adaptor,529,". ROOT: ROOT::RDF::RDataSource Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Protected Member Functions |; List of all members ; ROOT::RDF::RDataSource Class ReferenceabstractDataframe. ; RDataSource defines an API that RDataFrame can use to read arbitrary data formats. ; A concrete RDataSource implementation (i.e. a class that inherits from RDataSource and implements all of its pure methods) provides an adaptor that RDataFrame can leverage to read any kind of tabular data formats. RDataFrame calls into RDataSource to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry.; The sequence of calls that RDataFrame (or any other client of a RDataSource) performs is the following:. SetNSlots() : inform RDataSource of the desired level of parallelism; GetColumnReaders() : retrieve from RDataSource per-thread readers for the desired columns; Initialize() : inform RDataSource that an event-loop is about to start; GetEntryRanges() : retrieve from RDataSource a set of ranges of entries that can be processed concurrently; InitSlot() : inform RDataSource that a certain thread is about to start working on a certain range of entries; SetEntry() : inform RDataSource that a certain thread is about to start working on a certain entry; FinalizeSlot() : inform RDataSource that a certain thread finished working on a certain range of entries; Finalize() : inform RDataSource that an event-loop finished. RDataSource implementations must support running multiple event-loops consecutively (although sequentially) on the same dataset.; SetNSlots() is called once per RDataSource object, typically when it is associated to a RDataFrame.; GetColumnReaders() can be called several times, potentially with the same arguments, also in-between event-loops, but not during an event-loop.",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RDataSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html:451,Modifiability,inherit,inherits,451,". ROOT: ROOT::RDF::RDataSource Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Protected Member Functions |; List of all members ; ROOT::RDF::RDataSource Class ReferenceabstractDataframe. ; RDataSource defines an API that RDataFrame can use to read arbitrary data formats. ; A concrete RDataSource implementation (i.e. a class that inherits from RDataSource and implements all of its pure methods) provides an adaptor that RDataFrame can leverage to read any kind of tabular data formats. RDataFrame calls into RDataSource to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry.; The sequence of calls that RDataFrame (or any other client of a RDataSource) performs is the following:. SetNSlots() : inform RDataSource of the desired level of parallelism; GetColumnReaders() : retrieve from RDataSource per-thread readers for the desired columns; Initialize() : inform RDataSource that an event-loop is about to start; GetEntryRanges() : retrieve from RDataSource a set of ranges of entries that can be processed concurrently; InitSlot() : inform RDataSource that a certain thread is about to start working on a certain range of entries; SetEntry() : inform RDataSource that a certain thread is about to start working on a certain entry; FinalizeSlot() : inform RDataSource that a certain thread finished working on a certain range of entries; Finalize() : inform RDataSource that an event-loop finished. RDataSource implementations must support running multiple event-loops consecutively (although sequentially) on the same dataset.; SetNSlots() is called once per RDataSource object, typically when it is associated to a RDataFrame.; GetColumnReaders() can be called several times, potentially with the same arguments, also in-between event-loops, but not during an event-loop.",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RDataSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html:529,Modifiability,adapt,adaptor,529,". ROOT: ROOT::RDF::RDataSource Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Protected Member Functions |; List of all members ; ROOT::RDF::RDataSource Class ReferenceabstractDataframe. ; RDataSource defines an API that RDataFrame can use to read arbitrary data formats. ; A concrete RDataSource implementation (i.e. a class that inherits from RDataSource and implements all of its pure methods) provides an adaptor that RDataFrame can leverage to read any kind of tabular data formats. RDataFrame calls into RDataSource to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry.; The sequence of calls that RDataFrame (or any other client of a RDataSource) performs is the following:. SetNSlots() : inform RDataSource of the desired level of parallelism; GetColumnReaders() : retrieve from RDataSource per-thread readers for the desired columns; Initialize() : inform RDataSource that an event-loop is about to start; GetEntryRanges() : retrieve from RDataSource a set of ranges of entries that can be processed concurrently; InitSlot() : inform RDataSource that a certain thread is about to start working on a certain range of entries; SetEntry() : inform RDataSource that a certain thread is about to start working on a certain entry; FinalizeSlot() : inform RDataSource that a certain thread finished working on a certain range of entries; Finalize() : inform RDataSource that an event-loop finished. RDataSource implementations must support running multiple event-loops consecutively (although sequentially) on the same dataset.; SetNSlots() is called once per RDataSource object, typically when it is associated to a RDataFrame.; GetColumnReaders() can be called several times, potentially with the same arguments, also in-between event-loops, but not during an event-loop.",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RDataSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html:2519,Modifiability,inherit,inheritance,2519,"f entries; Finalize() : inform RDataSource that an event-loop finished. RDataSource implementations must support running multiple event-loops consecutively (although sequentially) on the same dataset.; SetNSlots() is called once per RDataSource object, typically when it is associated to a RDataFrame.; GetColumnReaders() can be called several times, potentially with the same arguments, also in-between event-loops, but not during an event-loop.; GetEntryRanges() will be called several times, including during an event loop, as additional ranges are needed. It will not be called concurrently.; Initialize() and Finalize() are called once per event-loop, right before starting and right after finishing.; InitSlot(), SetEntry(), and FinalizeSlot() can be called concurrently from multiple threads, multiple times per event-loop. Advanced users that plan to implement a custom RDataSource can check out existing implementations, e.g. RCsvDS or RNTupleDS. See the inheritance diagram below for the full list of existing concrete implementations. ; Definition at line 109 of file RDataSource.hxx. Public Member Functions; virtual ~RDataSource ()=default;  ; virtual void Finalize ();  Convenience method called after concluding an event-loop. ;  ; virtual void FinalizeSlot (unsigned int);  Convenience method called at the end of the data processing associated to a slot. ;  ; virtual const std::vector< std::string > & GetColumnNames () const =0;  Returns a reference to the collection of the dataset's column names. ;  ; template<typename T > ; std::vector< T ** > GetColumnReaders (std::string_view columnName);  Called at most once per column by RDF. ;  ; virtual std::unique_ptr< ROOT::Detail::RDF::RColumnReaderBase > GetColumnReaders (unsigned int, std::string_view, const std::type_info &);  If the other GetColumnReaders overload returns an empty vector, this overload will be called instead. ;  ; virtual std::vector< std::pair< ULong64_t, ULong64_t > > GetEntryRanges ()=0;  Return ranges ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RDataSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html:880,Performance,perform,performs,880,". ROOT: ROOT::RDF::RDataSource Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Protected Member Functions |; List of all members ; ROOT::RDF::RDataSource Class ReferenceabstractDataframe. ; RDataSource defines an API that RDataFrame can use to read arbitrary data formats. ; A concrete RDataSource implementation (i.e. a class that inherits from RDataSource and implements all of its pure methods) provides an adaptor that RDataFrame can leverage to read any kind of tabular data formats. RDataFrame calls into RDataSource to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry.; The sequence of calls that RDataFrame (or any other client of a RDataSource) performs is the following:. SetNSlots() : inform RDataSource of the desired level of parallelism; GetColumnReaders() : retrieve from RDataSource per-thread readers for the desired columns; Initialize() : inform RDataSource that an event-loop is about to start; GetEntryRanges() : retrieve from RDataSource a set of ranges of entries that can be processed concurrently; InitSlot() : inform RDataSource that a certain thread is about to start working on a certain range of entries; SetEntry() : inform RDataSource that a certain thread is about to start working on a certain entry; FinalizeSlot() : inform RDataSource that a certain thread finished working on a certain range of entries; Finalize() : inform RDataSource that an event-loop finished. RDataSource implementations must support running multiple event-loops consecutively (although sequentially) on the same dataset.; SetNSlots() is called once per RDataSource object, typically when it is associated to a RDataFrame.; GetColumnReaders() can be called several times, potentially with the same arguments, also in-between event-loops, but not during an event-loop.",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RDataSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html:1235,Performance,concurren,concurrently,1235,"Source Class ReferenceabstractDataframe. ; RDataSource defines an API that RDataFrame can use to read arbitrary data formats. ; A concrete RDataSource implementation (i.e. a class that inherits from RDataSource and implements all of its pure methods) provides an adaptor that RDataFrame can leverage to read any kind of tabular data formats. RDataFrame calls into RDataSource to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry.; The sequence of calls that RDataFrame (or any other client of a RDataSource) performs is the following:. SetNSlots() : inform RDataSource of the desired level of parallelism; GetColumnReaders() : retrieve from RDataSource per-thread readers for the desired columns; Initialize() : inform RDataSource that an event-loop is about to start; GetEntryRanges() : retrieve from RDataSource a set of ranges of entries that can be processed concurrently; InitSlot() : inform RDataSource that a certain thread is about to start working on a certain range of entries; SetEntry() : inform RDataSource that a certain thread is about to start working on a certain entry; FinalizeSlot() : inform RDataSource that a certain thread finished working on a certain range of entries; Finalize() : inform RDataSource that an event-loop finished. RDataSource implementations must support running multiple event-loops consecutively (although sequentially) on the same dataset.; SetNSlots() is called once per RDataSource object, typically when it is associated to a RDataFrame.; GetColumnReaders() can be called several times, potentially with the same arguments, also in-between event-loops, but not during an event-loop.; GetEntryRanges() will be called several times, including during an event loop, as additional ranges are needed. It will not be called concurrently.; Initialize() and Finalize() are called once per event-loop, right before starting and right after finishing.; InitS",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RDataSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html:2137,Performance,concurren,concurrently,2137,"o start; GetEntryRanges() : retrieve from RDataSource a set of ranges of entries that can be processed concurrently; InitSlot() : inform RDataSource that a certain thread is about to start working on a certain range of entries; SetEntry() : inform RDataSource that a certain thread is about to start working on a certain entry; FinalizeSlot() : inform RDataSource that a certain thread finished working on a certain range of entries; Finalize() : inform RDataSource that an event-loop finished. RDataSource implementations must support running multiple event-loops consecutively (although sequentially) on the same dataset.; SetNSlots() is called once per RDataSource object, typically when it is associated to a RDataFrame.; GetColumnReaders() can be called several times, potentially with the same arguments, also in-between event-loops, but not during an event-loop.; GetEntryRanges() will be called several times, including during an event loop, as additional ranges are needed. It will not be called concurrently.; Initialize() and Finalize() are called once per event-loop, right before starting and right after finishing.; InitSlot(), SetEntry(), and FinalizeSlot() can be called concurrently from multiple threads, multiple times per event-loop. Advanced users that plan to implement a custom RDataSource can check out existing implementations, e.g. RCsvDS or RNTupleDS. See the inheritance diagram below for the full list of existing concrete implementations. ; Definition at line 109 of file RDataSource.hxx. Public Member Functions; virtual ~RDataSource ()=default;  ; virtual void Finalize ();  Convenience method called after concluding an event-loop. ;  ; virtual void FinalizeSlot (unsigned int);  Convenience method called at the end of the data processing associated to a slot. ;  ; virtual const std::vector< std::string > & GetColumnNames () const =0;  Returns a reference to the collection of the dataset's column names. ;  ; template<typename T > ; std::vector< T ** > GetColumnR",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RDataSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html:2319,Performance,concurren,concurrently,2319,"orking on a certain range of entries; SetEntry() : inform RDataSource that a certain thread is about to start working on a certain entry; FinalizeSlot() : inform RDataSource that a certain thread finished working on a certain range of entries; Finalize() : inform RDataSource that an event-loop finished. RDataSource implementations must support running multiple event-loops consecutively (although sequentially) on the same dataset.; SetNSlots() is called once per RDataSource object, typically when it is associated to a RDataFrame.; GetColumnReaders() can be called several times, potentially with the same arguments, also in-between event-loops, but not during an event-loop.; GetEntryRanges() will be called several times, including during an event loop, as additional ranges are needed. It will not be called concurrently.; Initialize() and Finalize() are called once per event-loop, right before starting and right after finishing.; InitSlot(), SetEntry(), and FinalizeSlot() can be called concurrently from multiple threads, multiple times per event-loop. Advanced users that plan to implement a custom RDataSource can check out existing implementations, e.g. RCsvDS or RNTupleDS. See the inheritance diagram below for the full list of existing concrete implementations. ; Definition at line 109 of file RDataSource.hxx. Public Member Functions; virtual ~RDataSource ()=default;  ; virtual void Finalize ();  Convenience method called after concluding an event-loop. ;  ; virtual void FinalizeSlot (unsigned int);  Convenience method called at the end of the data processing associated to a slot. ;  ; virtual const std::vector< std::string > & GetColumnNames () const =0;  Returns a reference to the collection of the dataset's column names. ;  ; template<typename T > ; std::vector< T ** > GetColumnReaders (std::string_view columnName);  Called at most once per column by RDF. ;  ; virtual std::unique_ptr< ROOT::Detail::RDF::RColumnReaderBase > GetColumnReaders (unsigned int, std::string_",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RDataSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html:13917,Performance,concurren,concurrently,13917,"EntryThe first entry of the range that the task will process. This method might be called multiple times per thread per event-loop. . Reimplemented in ROOT::RDF::RArrowDS, ROOT::Experimental::RNTupleDS, and ROOT::Internal::RDF::RRootDS.; Definition at line 210 of file RDataSource.hxx. ◆ SetEntry(). virtual bool ROOT::RDF::RDataSource::SetEntry ; (; unsigned int ; slot, . ULong64_t ; entry . ). pure virtual . Advance the ""cursors"" returned by GetColumnReaders to the selected entry for a particular slot. ; Parameters. [in]slotThe data processing slot that needs to be considered ; [in]entryThe entry which needs to be pointed to by the reader pointers Slots are adopted to accommodate parallel data processing. Different workers will loop over different ranges and will be labelled by different ""slot"" values. Returns true if the entry has to be processed, false otherwise. . Implemented in ROOT::Internal::RDF::RVecDS< ColumnTypes >, ROOT::RDF::RArrowDS, ROOT::RDF::RCsvDS, ROOT::RDF::RLazyDS< ColumnTypes >, ROOT::Internal::RDF::RRootDS, ROOT::RDF::RSqliteDS, ROOT::RDF::RTrivialDS, and ROOT::Experimental::RNTupleDS. ◆ SetNSlots(). virtual void ROOT::RDF::RDataSource::SetNSlots ; (; unsigned int ; nSlots). pure virtual . Inform RDataSource of the number of processing slots (i.e. ; worker threads) used by the associated RDataFrame. Slots numbers are used to simplify parallel execution: RDataFrame guarantees that different threads will always pass different slot values when calling methods concurrently. ; Implemented in ROOT::Internal::RDF::RVecDS< ColumnTypes >, ROOT::RDF::RArrowDS, ROOT::RDF::RCsvDS, ROOT::RDF::RLazyDS< ColumnTypes >, ROOT::Experimental::RNTupleDS, ROOT::Internal::RDF::RRootDS, ROOT::RDF::RSqliteDS, and ROOT::RDF::RTrivialDS. The documentation for this class was generated from the following file:; tree/dataframe/inc/ROOT/RDataSource.hxx. ROOTRDFRDataSource. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RDataSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html:13783,Usability,simpl,simplify,13783,"EntryThe first entry of the range that the task will process. This method might be called multiple times per thread per event-loop. . Reimplemented in ROOT::RDF::RArrowDS, ROOT::Experimental::RNTupleDS, and ROOT::Internal::RDF::RRootDS.; Definition at line 210 of file RDataSource.hxx. ◆ SetEntry(). virtual bool ROOT::RDF::RDataSource::SetEntry ; (; unsigned int ; slot, . ULong64_t ; entry . ). pure virtual . Advance the ""cursors"" returned by GetColumnReaders to the selected entry for a particular slot. ; Parameters. [in]slotThe data processing slot that needs to be considered ; [in]entryThe entry which needs to be pointed to by the reader pointers Slots are adopted to accommodate parallel data processing. Different workers will loop over different ranges and will be labelled by different ""slot"" values. Returns true if the entry has to be processed, false otherwise. . Implemented in ROOT::Internal::RDF::RVecDS< ColumnTypes >, ROOT::RDF::RArrowDS, ROOT::RDF::RCsvDS, ROOT::RDF::RLazyDS< ColumnTypes >, ROOT::Internal::RDF::RRootDS, ROOT::RDF::RSqliteDS, ROOT::RDF::RTrivialDS, and ROOT::Experimental::RNTupleDS. ◆ SetNSlots(). virtual void ROOT::RDF::RDataSource::SetNSlots ; (; unsigned int ; nSlots). pure virtual . Inform RDataSource of the number of processing slots (i.e. ; worker threads) used by the associated RDataFrame. Slots numbers are used to simplify parallel execution: RDataFrame guarantees that different threads will always pass different slot values when calling methods concurrently. ; Implemented in ROOT::Internal::RDF::RVecDS< ColumnTypes >, ROOT::RDF::RArrowDS, ROOT::RDF::RCsvDS, ROOT::RDF::RLazyDS< ColumnTypes >, ROOT::Experimental::RNTupleDS, ROOT::Internal::RDF::RRootDS, ROOT::RDF::RSqliteDS, and ROOT::RDF::RTrivialDS. The documentation for this class was generated from the following file:; tree/dataframe/inc/ROOT/RDataSource.hxx. ROOTRDFRDataSource. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RDataSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface-members.html:261,Modifiability,inherit,inherited,261,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::RDF::RInterface< Proxied, DataSource > Member List. This is the complete list of members for ROOT::RDF::RInterface< Proxied, DataSource >, including all inherited members. AddDefaultColumns()ROOT::RDF::RInterfaceBaseprotected; Aggregate(AccFun aggregator, MergeFun merger, std::string_view columnName, const U &aggIdentity)ROOT::RDF::RInterface< Proxied, DataSource >inline; Aggregate(AccFun aggregator, MergeFun merger, std::string_view columnName="""")ROOT::RDF::RInterface< Proxied, DataSource >inline; Alias(std::string_view alias, std::string_view columnName)ROOT::RDF::RInterface< Proxied, DataSource >inline; Book(Helper &&helper, const ColumnNames_t &columns={})ROOT::RDF::RInterface< Proxied, DataSource >inline; Cache(const ColumnNames_t &columnList)ROOT::RDF::RInterface< Proxied, DataSource >inline; Cache(const ColumnNames_t &columnList)ROOT::RDF::RInterface< Proxied, DataSource >inline; Cache(std::string_view columnNameRegexp="""")ROOT::RDF::RInterface< Proxied, DataSource >inline; Cache(std::initializer_list< std::string > columnList)ROOT::RDF::RInterface< Proxied, DataSource >inline; CacheImpl(const ColumnNames_t &columnList, std::index_sequence< S... >)ROOT::RDF::RInterface< Proxied, DataSource >inlineprivate; CallCreateActionWithoutColsIfPossible(const std::shared_ptr< ActionResultType > &resPtr, const std::shared_ptr< Helper > &hPtr, TTraits::TypeList< RDFDetail::RInferredType >) -> decltype(hPtr->Exec(0u), RResultPtr< ActionResultType >{})ROOT::RDF::RInterface< Proxied, DataSource >inlineprivate; CallCreateActionWithoutColsIfPossible(const std::shared_ptr< ActionResultType > &, const std::shared_ptr< Helper > &, Others...)ROOT::RDF::RInterface< Proxied, DataSource >inlineprivate; CheckAndFillDSColumns(ColumnNames_t validCols, TTraits::TypeList< ColumnTypes... > typeList)ROOT::RDF::RInterfaceBaseinlineprotected; CheckIMTDisabled(std::string_view callerName)R",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface-members.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:21739,Availability,avail,available,21739,":string_view variationName="""");  Register systematic variations for a single existing column using auto-generated variation tags. ;  ; RInterface< Proxied, DS_t > Vary (std::string_view colName, std::string_view expression, const std::vector< std::string > &variationTags, std::string_view variationName="""");  Register systematic variations for a single existing column using custom variation tags. ;  ; RInterface< Proxied, DS_t > Vary (std::string_view colName, std::string_view expression, std::size_t nVariations, std::string_view variationName="""");  Register systematic variations for a single existing column using auto-generated variation tags. ;  ;  Public Member Functions inherited from ROOT::RDF::RInterfaceBase;  RInterfaceBase (RDFDetail::RLoopManager &lm, const RDFInternal::RColumnRegister &colRegister);  ;  RInterfaceBase (std::shared_ptr< RDFDetail::RLoopManager > lm);  ; RDFDescription Describe ();  Return information about the dataframe. ;  ; ColumnNames_t GetColumnNames ();  Returns the names of the available columns. ;  ; std::string GetColumnType (std::string_view column);  Return the type of a given column as a string. ;  ; ColumnNames_t GetDefinedColumnNames ();  Returns the names of the defined columns. ;  ; unsigned int GetNFiles ();  ; unsigned int GetNRuns () const;  Gets the number of event loops run. ;  ; unsigned int GetNSlots () const;  Gets the number of data processing slots. ;  ; RVariationsDescription GetVariations () const;  Return a descriptor for the systematic variations registered in this branch of the computation graph. ;  ; bool HasColumn (std::string_view columnName);  Checks if a column is present in the dataset. ;  . Protected Member Functions;  RInterface (const std::shared_ptr< Proxied > &proxied, RLoopManager &lm, const RDFInternal::RColumnRegister &colRegister);  ; const std::shared_ptr< Proxied > & GetProxiedPtr () const;  ;  Protected Member Functions inherited from ROOT::RDF::RInterfaceBase; void AddDefaultColumns ();  ; temp",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:30005,Availability,avail,available,30005,"F::RInterface< Proxied, DataSource >::RRangeBase = RDFDetail::RRangeBase. private . Definition at line 116 of file RInterface.hxx. Constructor & Destructor Documentation. ◆ RInterface() [1/4]. template<typename Proxied , typename DataSource = void> . ROOT::RDF::RInterface< Proxied, DataSource >::RInterface ; (; const RInterface< Proxied, DataSource > & ; ). default . Copy-ctor for RInterface. . ◆ RInterface() [2/4]. template<typename Proxied , typename DataSource = void> . ROOT::RDF::RInterface< Proxied, DataSource >::RInterface ; (; RInterface< Proxied, DataSource > && ; ). default . Move-ctor for RInterface. . ◆ RInterface() [3/4]. template<typename Proxied , typename DataSource = void> . template<typename T = Proxied, typename = std::enable_if_t<std::is_same<T, RLoopManager>::value, int>> . ROOT::RDF::RInterface< Proxied, DataSource >::RInterface ; (; const std::shared_ptr< RLoopManager > & ; proxied). inline . Build a RInterface from a RLoopManager. ; This constructor is only available for RInterface<RLoopManager>. ; Definition at line 151 of file RInterface.hxx. ◆ RInterface() [4/4]. template<typename Proxied , typename DataSource = void> . ROOT::RDF::RInterface< Proxied, DataSource >::RInterface ; (; const std::shared_ptr< Proxied > & ; proxied, . RLoopManager & ; lm, . const RDFInternal::RColumnRegister & ; colRegister . ). inlineprotected . Definition at line 3312 of file RInterface.hxx. Member Function Documentation. ◆ Aggregate() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename AccFun , typename MergeFun , typename R = typename TTraits::CallableTraits<AccFun>::ret_type, typename ArgTypes = typename TTraits::CallableTraits<AccFun>::arg_types, typename ArgTypesNoDecay = typename TTraits::CallableTraits<AccFun>::arg_types_nodecay, typename U = TTraits::TakeFirstParameter_t<ArgTypes>, typename T = TTraits::TakeFirstParameter_t<TTraits::RemoveFirstParameter_t<ArgTypes>>> . RResultPtr< U > ROOT::RDF::RInterface< Proxied, DataSour",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:36689,Availability,avail,available,36689,"he reduction to. Automatically deduced. . Parameters. [in]aggregatorA callable with signature U(U,T) or void(U,T), where T is the type of the column, U is the type of the aggregator variable ; [in]mergerA callable with signature U(U,U) or void(std::vector<U>&) used to merge the results of the accumulations of each thread ; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. . Returnsthe result of the aggregation wrapped in a RResultPtr.; See previous Aggregate overload for more information. ; Definition at line 2913 of file RInterface.hxx. ◆ Alias(). template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Alias ; (; std::string_view ; alias, . std::string_view ; columnName . ). inline . Allow to refer to a column with a different name. ; Parameters. [in]aliasname of the column alias ; [in]columnNameof the column to be aliased . Returnsthe first node of the computation graph for which the alias is available.; Aliasing an alias is supported. Example usage:; auto df_with_alias = df.Alias(""simple_name"", ""very_long&complex_name!!!"");. Definition at line 1214 of file RInterface.hxx. ◆ Book(). template<typename Proxied , typename DataSource = void> . template<typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename Helper > . RResultPtr< typename std::decay_t< Helper >::Result_t > ROOT::RDF::RInterface< Proxied, DataSource >::Book ; (; Helper && ; helper, . const ColumnNames_t & ; columns = {} . ). inline . Book execution of a custom action using a user-defined helper object. ; Template Parameters. FirstColumnThe type of the first column used by this action. Inferred together with OtherColumns if not present. ; OtherColumnsA list of the types of the other columns used by this action ; HelperThe type of the user-defined helper. See below for the required interface it should expose. . Parameters. [in]helperThe Action Helper to be ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:42634,Availability,avail,available,42634,"ns at ActionHelpers.hxx. ; Definition at line 2984 of file RInterface.hxx. ◆ Cache() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; This action returns a new RDataFrame object, completely detached from the originating RDataFrame. The new dataframe only contains the cached columns and stores their content in memory for fast, zero-copy subsequent access.; Use Cache if you know you will only need a subset of the (Filtered) data that fits in memory and that will be accessed many times.; NoteCache will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; Types inferred and columns selected with a regexp (this invocation relies on jitting): auto cache_all_cols_df = df.Cache(myRegexp);. Definition at line 1459 of file RInterface.hxx. ◆ Cache() [2/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnList",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:47972,Availability,down,downstream,47972," the calculation is booked but not executed. Also see RResultPtr. Example usage:; auto nEntriesAfterCuts = myFilteredDf.Count();. Definition at line 1729 of file RInterface.hxx. ◆ DefaultValueFor(). template<typename Proxied , typename DataSource = void> . template<typename T > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefaultValueFor ; (; std::string_view ; column, . const T & ; defaultValue . ). inline . In case the value in the given column is missing, provide a default value. ; Template Parameters. TThe type of the column . Parameters. [in]columnColumn name where missing values should be replaced by the given default value ; [in]defaultValueValue to provide instead of a missing value . ReturnsThe node of the graph that will provide a default value; This operation is useful in case an entry of the dataset is incomplete, i.e. if one or more of the columns do not have valid values. It does not modify the values of the column, but in case any entry is missing, it will provide the default value to downstream nodes instead.; Use cases include:; When processing multiple files, one or more of them is missing a column; In horizontal joining with entry matching, a certain dataset has no match for the current entry. Example usage:; // Assume a dataset with columns [idx, x] matching another dataset with; // columns [idx, y]. For idx == 42, the right-hand dataset has no match; ROOT::RDataFrame df{dataset};; auto df_default = df.DefaultValueFor(""y"", 33); .Define(""z"", [](int x, int y) { return x + y; }, {""x"", ""y""});; auto colz = df_default.Take<int>(""z"");; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; yDouble_t y[n]Definition legend1.C:17; df = ROOT.RDataFrame(dataset); df_default = df.DefaultValueFor(""y"", 33).Define(""z"", ""x + y""); colz = df_default.Take[int](""z""). Definition at line 672 of file RInterface.hxx. ◆ Define() [1/2]. template<typename P",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:81626,Availability,error,errors,81626,"gram, ROOT might display a blank canvas). ; Definition at line 2225 of file RInterface.hxx. ◆ GraphAsymmErrors(). template<typename Proxied , typename DataSource = void> . template<typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType, typename EXL = RDFDetail::RInferredType, typename EXH = RDFDetail::RInferredType, typename EYL = RDFDetail::RInferredType, typename EYH = RDFDetail::RInferredType> . RResultPtr<::TGraphAsymmErrors > ROOT::RDF::RInterface< Proxied, DataSource >::GraphAsymmErrors ; (; std::string_view ; x = """", . std::string_view ; y = """", . std::string_view ; exl = """", . std::string_view ; exh = """", . std::string_view ; eyl = """", . std::string_view ; eyh = """" . ). inline . Fill and return a TGraphAsymmErrors object (lazy action). ; Parameters. [in]xThe name of the column that will fill the x axis. ; [in]yThe name of the column that will fill the y axis. ; [in]exlThe name of the column of X low errors ; [in]exhThe name of the column of X high errors ; [in]eylThe name of the column of Y low errors ; [in]eyhThe name of the column of Y high errors . Returnsthe TGraphAsymmErrors wrapped in a RResultPtr.; Columns can be of a container type (e.g. std::vector<double>), in which case the graph is filled with each one of the elements of the container. If Multithreading is enabled, the order in which points are inserted is undefined.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myGAE1 = myDf.GraphAsymmErrors(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; // Explicit column types; using f = float; auto myGAE2 = myDf.GraphAsymmErrors<f, f, f, f, f, f>(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; f#define f(i)Definition RSha256.hxx:104; NoteDifferently from other ROOT interfaces, the returned TGraphAsymmErrors is not associated to gDirectory and the caller is responsible fo",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:81675,Availability,error,errors,81675,"gram, ROOT might display a blank canvas). ; Definition at line 2225 of file RInterface.hxx. ◆ GraphAsymmErrors(). template<typename Proxied , typename DataSource = void> . template<typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType, typename EXL = RDFDetail::RInferredType, typename EXH = RDFDetail::RInferredType, typename EYL = RDFDetail::RInferredType, typename EYH = RDFDetail::RInferredType> . RResultPtr<::TGraphAsymmErrors > ROOT::RDF::RInterface< Proxied, DataSource >::GraphAsymmErrors ; (; std::string_view ; x = """", . std::string_view ; y = """", . std::string_view ; exl = """", . std::string_view ; exh = """", . std::string_view ; eyl = """", . std::string_view ; eyh = """" . ). inline . Fill and return a TGraphAsymmErrors object (lazy action). ; Parameters. [in]xThe name of the column that will fill the x axis. ; [in]yThe name of the column that will fill the y axis. ; [in]exlThe name of the column of X low errors ; [in]exhThe name of the column of X high errors ; [in]eylThe name of the column of Y low errors ; [in]eyhThe name of the column of Y high errors . Returnsthe TGraphAsymmErrors wrapped in a RResultPtr.; Columns can be of a container type (e.g. std::vector<double>), in which case the graph is filled with each one of the elements of the container. If Multithreading is enabled, the order in which points are inserted is undefined.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myGAE1 = myDf.GraphAsymmErrors(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; // Explicit column types; using f = float; auto myGAE2 = myDf.GraphAsymmErrors<f, f, f, f, f, f>(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; f#define f(i)Definition RSha256.hxx:104; NoteDifferently from other ROOT interfaces, the returned TGraphAsymmErrors is not associated to gDirectory and the caller is responsible fo",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:81723,Availability,error,errors,81723,"gram, ROOT might display a blank canvas). ; Definition at line 2225 of file RInterface.hxx. ◆ GraphAsymmErrors(). template<typename Proxied , typename DataSource = void> . template<typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType, typename EXL = RDFDetail::RInferredType, typename EXH = RDFDetail::RInferredType, typename EYL = RDFDetail::RInferredType, typename EYH = RDFDetail::RInferredType> . RResultPtr<::TGraphAsymmErrors > ROOT::RDF::RInterface< Proxied, DataSource >::GraphAsymmErrors ; (; std::string_view ; x = """", . std::string_view ; y = """", . std::string_view ; exl = """", . std::string_view ; exh = """", . std::string_view ; eyl = """", . std::string_view ; eyh = """" . ). inline . Fill and return a TGraphAsymmErrors object (lazy action). ; Parameters. [in]xThe name of the column that will fill the x axis. ; [in]yThe name of the column that will fill the y axis. ; [in]exlThe name of the column of X low errors ; [in]exhThe name of the column of X high errors ; [in]eylThe name of the column of Y low errors ; [in]eyhThe name of the column of Y high errors . Returnsthe TGraphAsymmErrors wrapped in a RResultPtr.; Columns can be of a container type (e.g. std::vector<double>), in which case the graph is filled with each one of the elements of the container. If Multithreading is enabled, the order in which points are inserted is undefined.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myGAE1 = myDf.GraphAsymmErrors(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; // Explicit column types; using f = float; auto myGAE2 = myDf.GraphAsymmErrors<f, f, f, f, f, f>(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; f#define f(i)Definition RSha256.hxx:104; NoteDifferently from other ROOT interfaces, the returned TGraphAsymmErrors is not associated to gDirectory and the caller is responsible fo",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:81772,Availability,error,errors,81772,"gram, ROOT might display a blank canvas). ; Definition at line 2225 of file RInterface.hxx. ◆ GraphAsymmErrors(). template<typename Proxied , typename DataSource = void> . template<typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType, typename EXL = RDFDetail::RInferredType, typename EXH = RDFDetail::RInferredType, typename EYL = RDFDetail::RInferredType, typename EYH = RDFDetail::RInferredType> . RResultPtr<::TGraphAsymmErrors > ROOT::RDF::RInterface< Proxied, DataSource >::GraphAsymmErrors ; (; std::string_view ; x = """", . std::string_view ; y = """", . std::string_view ; exl = """", . std::string_view ; exh = """", . std::string_view ; eyl = """", . std::string_view ; eyh = """" . ). inline . Fill and return a TGraphAsymmErrors object (lazy action). ; Parameters. [in]xThe name of the column that will fill the x axis. ; [in]yThe name of the column that will fill the y axis. ; [in]exlThe name of the column of X low errors ; [in]exhThe name of the column of X high errors ; [in]eylThe name of the column of Y low errors ; [in]eyhThe name of the column of Y high errors . Returnsthe TGraphAsymmErrors wrapped in a RResultPtr.; Columns can be of a container type (e.g. std::vector<double>), in which case the graph is filled with each one of the elements of the container. If Multithreading is enabled, the order in which points are inserted is undefined.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myGAE1 = myDf.GraphAsymmErrors(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; // Explicit column types; using f = float; auto myGAE2 = myDf.GraphAsymmErrors<f, f, f, f, f, f>(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; f#define f(i)Definition RSha256.hxx:104; NoteDifferently from other ROOT interfaces, the returned TGraphAsymmErrors is not associated to gDirectory and the caller is responsible fo",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:113969,Availability,avail,available,113969,"he end of the program, ROOT might display a blank canvas). ; Definition at line 2426 of file RInterface.hxx. ◆ Range() [1/2]. template<typename Proxied , typename DataSource = void> . RInterface< RDFDetail::RRange< Proxied >, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Range ; (; unsigned int ; begin, . unsigned int ; end, . unsigned int ; stride = 1 . ). inline . Creates a node that filters entries based on range: [begin, end). ; Parameters. [in]beginInitial entry number considered for this range. ; [in]endFinal entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset. ; [in]strideProcess one entry of the [begin, end) range every stride entries. Must be strictly greater than 0. . Returnsthe first node of the computation graph for which the event loop is limited to a certain range of entries.; Note that in case of previous Ranges and Filters the selected range refers to the transformed dataset. Ranges are only available if EnableImplicitMT has not been called. Multi-thread ranges are not supported. Example usage:; auto d_0_30 = d.Range(0, 30); // Pick the first 30 entries; auto d_15_end = d.Range(15, 0); // Pick all entries from 15 onwards; auto d_15_end_3 = d.Range(15, 0, 3); // Stride: from event 15, pick an event every 3. Definition at line 1570 of file RInterface.hxx. ◆ Range() [2/2]. template<typename Proxied , typename DataSource = void> . RInterface< RDFDetail::RRange< Proxied >, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Range ; (; unsigned int ; end). inline . Creates a node that filters entries based on range. ; Parameters. [in]endFinal entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset. . Returnsa node of the computation graph for which the range is defined.; See the other Range overload for a detailed description. ; Definition at line 1591 of file RInterface.hxx. ◆ Redefine() [1/2]. template<typename Proxied , typename DataSource ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:125771,Availability,error,error,125771,"so write out friend branches with the same names of branches in the main TTree/TChain with names of the form <friendname>_<branchname> in order to differentiate them from the branches in the main tree/chain. Writing to a sub-directory; Snapshot supports writing the TTree in a sub-directory inside the TFile. It is sufficient to specify the path to the TTree as part of the TTree name, e.g. df.Snapshot(""subdir/t"", ""f.root"") write TTree t in the sub-directory subdir of file f.root (creating file and sub-directory as needed).; AttentionIn multi-thread runs (i.e. when EnableImplicitMT() has been called) threads will loop over clusters of entries in an undefined order, so Snapshot will produce outputs in which (clusters of) entries will be shuffled with respect to the input TTree. Using such ""shuffled"" TTrees as friends of the original trees would result in wrong associations between entries in the main TTree and entries in the ""shuffled"" friend. Since v6.22, ROOT will error out if such a ""shuffled"" TTree is used in a friendship.; NoteIn case no events are written out (e.g. because no event passes all filters) the behavior of Snapshot in single-thread and multi-thread runs is different: in single-thread runs, Snapshot will write out a TTree with the specified name and zero entries; in multi-thread runs, no TTree object will be written out to disk. Snapshot will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Snapshot(..., {""nbar""}). Example invocations:; // without specifying template parameters (column types automatically deduced); df.Snapshot(""outputTree"", ""outputFile.root"", {""x"", ""y""});; ; // specifying template parameters (""x"" is `int`, ""y"" is `float`); df.Snapshot<int, float>(""outputTr",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:126264,Availability,avail,available,126264,"ile f.root (creating file and sub-directory as needed).; AttentionIn multi-thread runs (i.e. when EnableImplicitMT() has been called) threads will loop over clusters of entries in an undefined order, so Snapshot will produce outputs in which (clusters of) entries will be shuffled with respect to the input TTree. Using such ""shuffled"" TTrees as friends of the original trees would result in wrong associations between entries in the main TTree and entries in the ""shuffled"" friend. Since v6.22, ROOT will error out if such a ""shuffled"" TTree is used in a friendship.; NoteIn case no events are written out (e.g. because no event passes all filters) the behavior of Snapshot in single-thread and multi-thread runs is different: in single-thread runs, Snapshot will write out a TTree with the specified name and zero entries; in multi-thread runs, no TTree object will be written out to disk. Snapshot will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Snapshot(..., {""nbar""}). Example invocations:; // without specifying template parameters (column types automatically deduced); df.Snapshot(""outputTree"", ""outputFile.root"", {""x"", ""y""});; ; // specifying template parameters (""x"" is `int`, ""y"" is `float`); df.Snapshot<int, float>(""outputTree"", ""outputFile.root"", {""x"", ""y""});; To book a Snapshot without triggering the event loop, one needs to set the appropriate flag in RSnapshotOptions: RSnapshotOptions opts;; opts.fLazy = true;; df.Snapshot(""outputTree"", ""outputFile.root"", {""x""}, opts);; ROOT::RDF::RSnapshotOptionsA collection of options to steer the creation of the dataset on file.Definition RSnapshotOptions.hxx:22; ROOT::RDF::RSnapshotOptions::fLazybool fLazyDo not start the event loop when Snapsh",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:137396,Availability,down,down,137396,"11]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; const std::vector< std::string > & ; colNames, . F && ; expression, . const ColumnNames_t & ; inputColumns, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using custom variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona callable that evaluates the varied values for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as the tags. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". This overload of Vary takes a list of column names as first argument and requires that the expression returns an RVec of RVecs of values: one inner RVec for the variations of each affected column. The variationTags are defined as {""down"", ""up""}.; Example usage: // produce variations ""ptAndEta:down"" and ""ptAndEta:up""; auto nominal_hx =; df.Vary({""pt"", ""eta""}, // the columns that will vary simultaneously; [](double pt, double eta) { return RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}; },; {""pt"", ""eta""}, // inputs to the Vary expression, independent of what columns are varied; {""down"", ""up""}, // variation tags; ""ptAndEta"") // variation name; .Histo1D(""pt"", ""eta"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""ptAndEta:down""].Draw(""SAME"");; hx[""ptAndEta:up""].Draw(""SAME"");; ROOT::RDF::RInterface::Histo1DRResultPtr<::TH1D > Histo1D(const TH1DModel ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:137720,Availability,down,down,137720," ; variationTags, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using custom variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona callable that evaluates the varied values for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as the tags. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". This overload of Vary takes a list of column names as first argument and requires that the expression returns an RVec of RVecs of values: one inner RVec for the variations of each affected column. The variationTags are defined as {""down"", ""up""}.; Example usage: // produce variations ""ptAndEta:down"" and ""ptAndEta:up""; auto nominal_hx =; df.Vary({""pt"", ""eta""}, // the columns that will vary simultaneously; [](double pt, double eta) { return RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}; },; {""pt"", ""eta""}, // inputs to the Vary expression, independent of what columns are varied; {""down"", ""up""}, // variation tags; ""ptAndEta"") // variation name; .Histo1D(""pt"", ""eta"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""ptAndEta:down""].Draw(""SAME"");; hx[""ptAndEta:up""].Draw(""SAME"");; ROOT::RDF::RInterface::Histo1DRResultPtr<::TH1D > Histo1D(const TH1DModel &model={"""", """", 128u, 0., 0.}, std::string_view vName="""")Fill and return a one-dimensional histogram with the values of a column (lazy action).Definition RInterface.hxx:1804; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:137782,Availability,down,down,137782,"er systematic variations for multiple existing columns using custom variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona callable that evaluates the varied values for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as the tags. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". This overload of Vary takes a list of column names as first argument and requires that the expression returns an RVec of RVecs of values: one inner RVec for the variations of each affected column. The variationTags are defined as {""down"", ""up""}.; Example usage: // produce variations ""ptAndEta:down"" and ""ptAndEta:up""; auto nominal_hx =; df.Vary({""pt"", ""eta""}, // the columns that will vary simultaneously; [](double pt, double eta) { return RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}; },; {""pt"", ""eta""}, // inputs to the Vary expression, independent of what columns are varied; {""down"", ""up""}, // variation tags; ""ptAndEta"") // variation name; .Histo1D(""pt"", ""eta"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""ptAndEta:down""].Draw(""SAME"");; hx[""ptAndEta:up""].Draw(""SAME"");; ROOT::RDF::RInterface::Histo1DRResultPtr<::TH1D > Histo1D(const TH1DModel &model={"""", """", 128u, 0., 0.}, std::string_view vName="""")Fill and return a one-dimensional histogram with the values of a column (lazy action).Definition RInterface.hxx:1804; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definit",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:138076,Availability,down,down,138076,"an take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as the tags. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". This overload of Vary takes a list of column names as first argument and requires that the expression returns an RVec of RVecs of values: one inner RVec for the variations of each affected column. The variationTags are defined as {""down"", ""up""}.; Example usage: // produce variations ""ptAndEta:down"" and ""ptAndEta:up""; auto nominal_hx =; df.Vary({""pt"", ""eta""}, // the columns that will vary simultaneously; [](double pt, double eta) { return RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}; },; {""pt"", ""eta""}, // inputs to the Vary expression, independent of what columns are varied; {""down"", ""up""}, // variation tags; ""ptAndEta"") // variation name; .Histo1D(""pt"", ""eta"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""ptAndEta:down""].Draw(""SAME"");; hx[""ptAndEta:up""].Draw(""SAME"");; ROOT::RDF::RInterface::Histo1DRResultPtr<::TH1D > Histo1D(const TH1DModel &model={"""", """", 128u, 0., 0.}, std::string_view vName="""")Fill and return a one-dimensional histogram with the values of a column (lazy action).Definition RInterface.hxx:1804; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; See alsoThis Vary() overload for more information. ; Definition at line 950 of file RInterface.hxx. ◆ Vary() [2/11]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Prox",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:138265,Availability,down,down,138265,"]inputColumnsthe names of the columns to be passed to the callable. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". This overload of Vary takes a list of column names as first argument and requires that the expression returns an RVec of RVecs of values: one inner RVec for the variations of each affected column. The variationTags are defined as {""down"", ""up""}.; Example usage: // produce variations ""ptAndEta:down"" and ""ptAndEta:up""; auto nominal_hx =; df.Vary({""pt"", ""eta""}, // the columns that will vary simultaneously; [](double pt, double eta) { return RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}; },; {""pt"", ""eta""}, // inputs to the Vary expression, independent of what columns are varied; {""down"", ""up""}, // variation tags; ""ptAndEta"") // variation name; .Histo1D(""pt"", ""eta"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""ptAndEta:down""].Draw(""SAME"");; hx[""ptAndEta:up""].Draw(""SAME"");; ROOT::RDF::RInterface::Histo1DRResultPtr<::TH1D > Histo1D(const TH1DModel &model={"""", """", 128u, 0., 0.}, std::string_view vName="""")Fill and return a one-dimensional histogram with the values of a column (lazy action).Definition RInterface.hxx:1804; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; See alsoThis Vary() overload for more information. ; Definition at line 950 of file RInterface.hxx. ◆ Vary() [2/11]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; const std::vector< std::string > & ; colNames, . F && ; expression, . const ColumnNames_t & ; inputColumns, . std::size_t ; nVariations, . std::string_view ; variationNam",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:141641,Availability,down,down,141641,"t"", ""eta"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""ptAndEta:0""].Draw(""SAME"");; hx[""ptAndEta:1""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 1012 of file RInterface.hxx. ◆ Vary() [3/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; const std::vector< std::string > & ; colNames, . std::string_view ; expression, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using custom variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec or RVecs containing the varied values for the specified columns. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time compiled. The example below shows how Vary() is used while dealing with multiple columns. The tags are defined as {""down"", ""up""}. auto nominal_hx =; df.Vary({""x"", ""y""}, ""ROOT::RVec<ROOT::RVecD>{{x*0.9, x*1.1}, {y*0.9, y*1.1}}"", {""down"", ""up""}, ""xy""); .Histo1D(""x"", ""y"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""xy:down""].Draw(""SAME"");; hx[""xy:up""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 1196 of file RInterface.hxx. ◆ Vary() [4/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; const std::vector< std::string > & ; colNames, . std::string_view ; expression, . std::size_t ; nVariations, . std::string",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:141957,Availability,down,down,141957,"ypename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; const std::vector< std::string > & ; colNames, . std::string_view ; expression, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using custom variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec or RVecs containing the varied values for the specified columns. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time compiled. The example below shows how Vary() is used while dealing with multiple columns. The tags are defined as {""down"", ""up""}. auto nominal_hx =; df.Vary({""x"", ""y""}, ""ROOT::RVec<ROOT::RVecD>{{x*0.9, x*1.1}, {y*0.9, y*1.1}}"", {""down"", ""up""}, ""xy""); .Histo1D(""x"", ""y"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""xy:down""].Draw(""SAME"");; hx[""xy:up""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 1196 of file RInterface.hxx. ◆ Vary() [4/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; const std::vector< std::string > & ; colNames, . std::string_view ; expression, . std::size_t ; nVariations, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using auto-generated variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec or RVecs",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:142071,Availability,down,down,142071,"or< std::string > & ; colNames, . std::string_view ; expression, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using custom variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec or RVecs containing the varied values for the specified columns. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time compiled. The example below shows how Vary() is used while dealing with multiple columns. The tags are defined as {""down"", ""up""}. auto nominal_hx =; df.Vary({""x"", ""y""}, ""ROOT::RVec<ROOT::RVecD>{{x*0.9, x*1.1}, {y*0.9, y*1.1}}"", {""down"", ""up""}, ""xy""); .Histo1D(""x"", ""y"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""xy:down""].Draw(""SAME"");; hx[""xy:up""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 1196 of file RInterface.hxx. ◆ Vary() [4/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; const std::vector< std::string > & ; colNames, . std::string_view ; expression, . std::size_t ; nVariations, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using auto-generated variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec or RVecs containing the varied values for the specified columns. ; [in]nVariationsnumber of variations returned by the expression. The c",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:142208,Availability,down,down,142208,":string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using custom variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec or RVecs containing the varied values for the specified columns. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time compiled. The example below shows how Vary() is used while dealing with multiple columns. The tags are defined as {""down"", ""up""}. auto nominal_hx =; df.Vary({""x"", ""y""}, ""ROOT::RVec<ROOT::RVecD>{{x*0.9, x*1.1}, {y*0.9, y*1.1}}"", {""down"", ""up""}, ""xy""); .Histo1D(""x"", ""y"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""xy:down""].Draw(""SAME"");; hx[""xy:up""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 1196 of file RInterface.hxx. ◆ Vary() [4/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; const std::vector< std::string > & ; colNames, . std::string_view ; expression, . std::size_t ; nVariations, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using auto-generated variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec or RVecs containing the varied values for the specified columns. ; [in]nVariationsnumber of variations returned by the expression. The corresponding tags will be ""0"", ""1"", etc. ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:145046,Availability,down,down,145046,"]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::initializer_list< std::string > ; colNames, . F && ; expression, . const ColumnNames_t & ; inputColumns, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using custom variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona callable that evaluates the varied values for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as the tags. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". colName is used if none is provided. NoteThis overload ensures that the ambiguity between C++20 string, vector<string> construction from init list is avoided.; See alsoThis Vary() overload for more information. ; Definition at line 972 of file RInterface.hxx. ◆ Vary() [6/11]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::initializer_list< std::string > ; colNames, . F && ; expression, . const ColumnNames_t & ; inputColumns, . std::size_t ; nVariations, . std::string_view ; variationName . ). inline . Register systematic variations for for multiple existing columns using custom variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona callable that evaluates the varied values for the specified columns. Th",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:148943,Availability,down,down,148943,"terface.hxx. ◆ Vary() [8/11]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::string_view ; colName, . F && ; expression, . const ColumnNames_t & ; inputColumns, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName = """" . ). inline . Register systematic variations for a single existing column using custom variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona callable that evaluates the varied values for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as the tags. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". Vary provides a natural and flexible syntax to define systematic variations that automatically propagate to Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for results that depend on any varied quantity, a map/dictionary of varied results can be produced with ROOT::RDF::Experimental::VariationsFor (see the example below).; The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and values for each of the systematic variations that affected the result (via upstream Filters or via direct or indirect dependencies of the column values on some registered variations). The keys will be a composition of variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt. We aut",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:149791,Availability,down,down,149791,"s. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". Vary provides a natural and flexible syntax to define systematic variations that automatically propagate to Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for results that depend on any varied quantity, a map/dictionary of varied results can be produced with ROOT::RDF::Experimental::VariationsFor (see the example below).; The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and values for each of the systematic variations that affected the result (via upstream Filters or via direct or indirect dependencies of the column values on some registered variations). The keys will be a composition of variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt. We automatically obtain three histograms in output (""nominal"", ""pt:up"" and ""pt:down""): auto nominal_hx =; df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; RDataFrame computes all variations as part of a single loop over the data. In particular, this means that I/O and computation of values shared among variations only happen once for all variations. Thus, the event loop run-time typically scales much better than linearly with the number of variations.; RDataFrame lazily computes the varied values required to produce the outputs of VariationsFor(). If VariationsFor() was not called for a result, the computations ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:149856,Availability,down,down,149856,"n]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". Vary provides a natural and flexible syntax to define systematic variations that automatically propagate to Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for results that depend on any varied quantity, a map/dictionary of varied results can be produced with ROOT::RDF::Experimental::VariationsFor (see the example below).; The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and values for each of the systematic variations that affected the result (via upstream Filters or via direct or indirect dependencies of the column values on some registered variations). The keys will be a composition of variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt. We automatically obtain three histograms in output (""nominal"", ""pt:up"" and ""pt:down""): auto nominal_hx =; df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; RDataFrame computes all variations as part of a single loop over the data. In particular, this means that I/O and computation of values shared among variations only happen once for all variations. Thus, the event loop run-time typically scales much better than linearly with the number of variations.; RDataFrame lazily computes the varied values required to produce the outputs of VariationsFor(). If VariationsFor() was not called for a result, the computations are only run for the nominal case.; See other overloads for examples when variat",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:150014,Availability,down,down,150014,"his set of varied values, e.g. ""ptvariation"". Vary provides a natural and flexible syntax to define systematic variations that automatically propagate to Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for results that depend on any varied quantity, a map/dictionary of varied results can be produced with ROOT::RDF::Experimental::VariationsFor (see the example below).; The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and values for each of the systematic variations that affected the result (via upstream Filters or via direct or indirect dependencies of the column values on some registered variations). The keys will be a composition of variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt. We automatically obtain three histograms in output (""nominal"", ""pt:up"" and ""pt:down""): auto nominal_hx =; df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; RDataFrame computes all variations as part of a single loop over the data. In particular, this means that I/O and computation of values shared among variations only happen once for all variations. Thus, the event loop run-time typically scales much better than linearly with the number of variations.; RDataFrame lazily computes the varied values required to produce the outputs of VariationsFor(). If VariationsFor() was not called for a result, the computations are only run for the nominal case.; See other overloads for examples when variations are added for multiple existing columns, or when the tags are auto-generated instead of being directly defi",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:150107,Availability,down,down,150107," that automatically propagate to Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for results that depend on any varied quantity, a map/dictionary of varied results can be produced with ROOT::RDF::Experimental::VariationsFor (see the example below).; The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and values for each of the systematic variations that affected the result (via upstream Filters or via direct or indirect dependencies of the column values on some registered variations). The keys will be a composition of variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt. We automatically obtain three histograms in output (""nominal"", ""pt:up"" and ""pt:down""): auto nominal_hx =; df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; RDataFrame computes all variations as part of a single loop over the data. In particular, this means that I/O and computation of values shared among variations only happen once for all variations. Thus, the event loop run-time typically scales much better than linearly with the number of variations.; RDataFrame lazily computes the varied values required to produce the outputs of VariationsFor(). If VariationsFor() was not called for a result, the computations are only run for the nominal case.; See other overloads for examples when variations are added for multiple existing columns, or when the tags are auto-generated instead of being directly defined. ; Definition at line 862 of file RInterface.hxx. ◆ Vary() [9/11]. template<typename Proxied , typename DataSource = v",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:150284,Availability,down,down,150284,"aried quantity, a map/dictionary of varied results can be produced with ROOT::RDF::Experimental::VariationsFor (see the example below).; The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and values for each of the systematic variations that affected the result (via upstream Filters or via direct or indirect dependencies of the column values on some registered variations). The keys will be a composition of variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt. We automatically obtain three histograms in output (""nominal"", ""pt:up"" and ""pt:down""): auto nominal_hx =; df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; RDataFrame computes all variations as part of a single loop over the data. In particular, this means that I/O and computation of values shared among variations only happen once for all variations. Thus, the event loop run-time typically scales much better than linearly with the number of variations.; RDataFrame lazily computes the varied values required to produce the outputs of VariationsFor(). If VariationsFor() was not called for a result, the computations are only run for the nominal case.; See other overloads for examples when variations are added for multiple existing columns, or when the tags are auto-generated instead of being directly defined. ; Definition at line 862 of file RInterface.hxx. ◆ Vary() [9/11]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::string_view ; colName, . F && ; expression, . con",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:153514,Availability,down,down,153514,"le pt) { return RVecD{pt*0.9, pt*1.1}; }, 2); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""x:0""].Draw(""SAME"");; hx[""x:1""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 901 of file RInterface.hxx. ◆ Vary() [10/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::string_view ; colName, . std::string_view ; expression, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName = """" . ). inline . Register systematic variations for a single existing column using custom variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec containing the varied values for the specified column. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". colName is used if none is provided. This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time compiled. The example below shows how Vary() is used while dealing with a single column. The variation tags are defined as {""down"", ""up""}. auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9, pt*1.1}"", {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 1074 of file RInterface.hxx. ◆ Vary() [11/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::string_view ; colName, . std::string_view ; expression, . std::s",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:153876,Availability,down,down,153876,"e DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::string_view ; colName, . std::string_view ; expression, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName = """" . ). inline . Register systematic variations for a single existing column using custom variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec containing the varied values for the specified column. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". colName is used if none is provided. This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time compiled. The example below shows how Vary() is used while dealing with a single column. The variation tags are defined as {""down"", ""up""}. auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9, pt*1.1}"", {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 1074 of file RInterface.hxx. ◆ Vary() [11/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::string_view ; colName, . std::string_view ; expression, . std::size_t ; nVariations, . std::string_view ; variationName = """" . ). inline . Register systematic variations for a single existing column using auto-generated variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec containing the varied",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:153956,Availability,down,down,153956,":Vary ; (; std::string_view ; colName, . std::string_view ; expression, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName = """" . ). inline . Register systematic variations for a single existing column using custom variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec containing the varied values for the specified column. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". colName is used if none is provided. This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time compiled. The example below shows how Vary() is used while dealing with a single column. The variation tags are defined as {""down"", ""up""}. auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9, pt*1.1}"", {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 1074 of file RInterface.hxx. ◆ Vary() [11/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::string_view ; colName, . std::string_view ; expression, . std::size_t ; nVariations, . std::string_view ; variationName = """" . ). inline . Register systematic variations for a single existing column using auto-generated variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec containing the varied values for the specified column. ; [in]nVariationsnumber of variations returned by the expressio",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:154133,Availability,down,down,154133,"). inline . Register systematic variations for a single existing column using custom variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec containing the varied values for the specified column. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". colName is used if none is provided. This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time compiled. The example below shows how Vary() is used while dealing with a single column. The variation tags are defined as {""down"", ""up""}. auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9, pt*1.1}"", {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 1074 of file RInterface.hxx. ◆ Vary() [11/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::string_view ; colName, . std::string_view ; expression, . std::size_t ; nVariations, . std::string_view ; variationName = """" . ). inline . Register systematic variations for a single existing column using auto-generated variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec containing the varied values for the specified column. ; [in]nVariationsnumber of variations returned by the expression. The corresponding tags will be ""0"", ""1"", etc. ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". colName is used if none is provide",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:4453,Deployability,update,updated,4453,"erface< RLoopManager > Cache (std::initializer_list< std::string > columnList);  Save selected columns in memory. ;  ; RInterface< RLoopManager > Cache (std::string_view columnNameRegexp="""");  Save selected columns in memory. ;  ; RResultPtr< ULong64_t > Count ();  Return the number of entries processed (lazy action). ;  ; template<typename T > ; RInterface< Proxied, DS_t > DefaultValueFor (std::string_view column, const T &defaultValue);  In case the value in the given column is missing, provide a default value. ;  ; template<typename F , typename std::enable_if_t<!std::is_convertible< F, std::string >::value, int > = 0> ; RInterface< Proxied, DS_t > Define (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column. ;  ; RInterface< Proxied, DS_t > Define (std::string_view name, std::string_view expression);  Define a new column. ;  ; template<typename F , typename RetType_t = typename TTraits::CallableTraits<F>::ret_type> ; RInterface< Proxied, DS_t > DefinePerSample (std::string_view name, F expression);  Define a new column that is updated when the input sample changes. ;  ; RInterface< Proxied, DS_t > DefinePerSample (std::string_view name, std::string_view expression);  Define a new column that is updated when the input sample changes. ;  ; template<typename F > ; RInterface< Proxied, DS_t > DefineSlot (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot. ;  ; template<typename F > ; RInterface< Proxied, DS_t > DefineSlotEntry (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot and the current entry. ;  ; template<typename... ColumnTypes> ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (const Col",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:4624,Deployability,update,updated,4624,"lumns in memory. ;  ; RResultPtr< ULong64_t > Count ();  Return the number of entries processed (lazy action). ;  ; template<typename T > ; RInterface< Proxied, DS_t > DefaultValueFor (std::string_view column, const T &defaultValue);  In case the value in the given column is missing, provide a default value. ;  ; template<typename F , typename std::enable_if_t<!std::is_convertible< F, std::string >::value, int > = 0> ; RInterface< Proxied, DS_t > Define (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column. ;  ; RInterface< Proxied, DS_t > Define (std::string_view name, std::string_view expression);  Define a new column. ;  ; template<typename F , typename RetType_t = typename TTraits::CallableTraits<F>::ret_type> ; RInterface< Proxied, DS_t > DefinePerSample (std::string_view name, F expression);  Define a new column that is updated when the input sample changes. ;  ; RInterface< Proxied, DS_t > DefinePerSample (std::string_view name, std::string_view expression);  Define a new column that is updated when the input sample changes. ;  ; template<typename F > ; RInterface< Proxied, DS_t > DefineSlot (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot. ;  ; template<typename F > ; RInterface< Proxied, DS_t > DefineSlotEntry (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot and the current entry. ;  ; template<typename... ColumnTypes> ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (std::initializer_list< std::string > col",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:53786,Deployability,update,updated,53786,"erface.hxx. ◆ DefineImpl() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename DefineType , typename RetType = typename TTraits::CallableTraits<F>::ret_type, bool IsFStringConv = std::is_convertible<F, std::string>::value, bool IsRetTypeDefConstr = std::is_default_constructible<RetType>::value> . std::enable_if_t<!IsFStringConv &&!IsRetTypeDefConstr, RInterface< Proxied, DS_t > > ROOT::RDF::RInterface< Proxied, DataSource >::DefineImpl ; (; std::string_view ; , . F ; , . const ColumnNames_t & ; , . const std::string & ;  . ). inlineprivate . Definition at line 3151 of file RInterface.hxx. ◆ DefinePerSample() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename RetType_t = typename TTraits::CallableTraits<F>::ret_type> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefinePerSample ; (; std::string_view ; name, . F ; expression . ). inline . Define a new column that is updated when the input sample changes. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionA C++ callable that computes the new value of the defined column. . Returnsthe first node of the computation graph for which the new quantity is defined.; The signature of the callable passed as second argument should be T(unsigned int slot, const ROOT::RDF::RSampleInfo &id) where:; T is the type of the defined column; slot is a number in the range [0, nThreads) that is different for each processing thread. This can simplify the definition of thread-safe callables if you are interested in using parallel capabilities of RDataFrame.; id is an instance of a ROOT::RDF::RSampleInfo object which contains information about the sample which is being processed (see the class docs for more information). DefinePerSample() is useful to e.g. define a quantity that depends on which TTree in which TFile is being processed or to inject a callback into the event loop that is only called when the proc",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:55330,Deployability,update,updated,55330,"ferent for each processing thread. This can simplify the definition of thread-safe callables if you are interested in using parallel capabilities of RDataFrame.; id is an instance of a ROOT::RDF::RSampleInfo object which contains information about the sample which is being processed (see the class docs for more information). DefinePerSample() is useful to e.g. define a quantity that depends on which TTree in which TFile is being processed or to inject a callback into the event loop that is only called when the processing of a new sample starts rather than at every entry.; The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often. Example usage:; ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; df.DefinePerSample(""weightbysample"",; [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; ROOT::RDF::RInterface::DefinePerSampleRInterface< Proxied, DS_t > DefinePerSample(std::string_view name, F expression)Define a new column that is updated when the input sample changes.Definition RInterface.hxx:735; ROOT::RDF::RSampleInfoThis type represents a sample identifier, to be used in conjunction with RDataFrame features such as ...Definition RSampleInfo.hxx:35. Definition at line 735 of file RInterface.hxx. ◆ DefinePerSample() [2/2]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefinePerSample ; (; std::string_view ; name, . std::string_view ; expression . ). inline . Define a new column that is updated when the input sample changes. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionA valid C++ expression as a string, which will be used to compute the defined value. . Returnsthe first node of the computation graph for which the new quantity is defined.; The expression is just-in-time compiled and used to produce the column entries. It must be valid C++ syntax",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:55882,Deployability,update,updated,55882,"r input TTree or once per multi-thread task, whichever is more often. Example usage:; ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; df.DefinePerSample(""weightbysample"",; [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; ROOT::RDF::RInterface::DefinePerSampleRInterface< Proxied, DS_t > DefinePerSample(std::string_view name, F expression)Define a new column that is updated when the input sample changes.Definition RInterface.hxx:735; ROOT::RDF::RSampleInfoThis type represents a sample identifier, to be used in conjunction with RDataFrame features such as ...Definition RSampleInfo.hxx:35. Definition at line 735 of file RInterface.hxx. ◆ DefinePerSample() [2/2]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefinePerSample ; (; std::string_view ; name, . std::string_view ; expression . ). inline . Define a new column that is updated when the input sample changes. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionA valid C++ expression as a string, which will be used to compute the defined value. . Returnsthe first node of the computation graph for which the new quantity is defined.; The expression is just-in-time compiled and used to produce the column entries. It must be valid C++ syntax and the usage of the special variable names rdfslot_ and rdfsampleinfo_ is permitted, where these variables will take the same values as the slot and id parameters described at the DefinePerSample(std::string_view name, F expression) overload. See the documentation of that overload for more information. Example usage:; df = ROOT.RDataFrame('mytree', ['sample1.root','sample2.root']); df.DefinePerSample('weightbysample', 'rdfsampleinfo_.Contains(""sample1"") ? 1.0f : 2.0f'); NoteIf you have declared some C++ function to the interpreter, the correct syntax to call that function with this overload of DefinePerSam",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:15536,Energy Efficiency,reduce,reduce,15536," end);  Creates a node that filters entries based on range. ;  ; template<typename F , std::enable_if_t<!std::is_convertible< F, std::string >::value, int > = 0> ; RInterface< Proxied, DS_t > Redefine (std::string_view name, F expression, const ColumnNames_t &columns={});  Overwrite the value and/or type of an existing column. ;  ; RInterface< Proxied, DS_t > Redefine (std::string_view name, std::string_view expression);  Overwrite the value and/or type of an existing column. ;  ; template<typename F > ; RInterface< Proxied, DS_t > RedefineSlot (std::string_view name, F expression, const ColumnNames_t &columns={});  Overwrite the value and/or type of an existing column. ;  ; template<typename F > ; RInterface< Proxied, DS_t > RedefineSlotEntry (std::string_view name, F expression, const ColumnNames_t &columns={});  Overwrite the value and/or type of an existing column. ;  ; template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> ; RResultPtr< T > Reduce (F f, std::string_view columnName, const T &redIdentity);  Execute a user-defined reduce operation on the values of a column. ;  ; template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> ; RResultPtr< T > Reduce (F f, std::string_view columnName="""");  Execute a user-defined reduce operation on the values of a column. ;  ; RResultPtr< RCutFlowReport > Report ();  Gather filtering statistics. ;  ; template<typename... ColumnTypes> ; RResultPtr< RInterface< RLoopManager > > Snapshot (std::string_view treename, std::string_view filename, const ColumnNames_t &columnList, const RSnapshotOptions &options=RSnapshotOptions());  Save selected columns to disk, in a new TTree treename in file filename. ;  ; RResultPtr< RInterface< RLoopManager > > Snapshot (std::string_view treename, std::string_view filename, const ColumnNames_t &columnList, const RSnapshotOptions &options=RSnapshotOptions());  Save selected columns to disk, in a new TTree treename in file filename. ;  ; RResu",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:15755,Energy Efficiency,reduce,reduce,15755,"xpression, const ColumnNames_t &columns={});  Overwrite the value and/or type of an existing column. ;  ; RInterface< Proxied, DS_t > Redefine (std::string_view name, std::string_view expression);  Overwrite the value and/or type of an existing column. ;  ; template<typename F > ; RInterface< Proxied, DS_t > RedefineSlot (std::string_view name, F expression, const ColumnNames_t &columns={});  Overwrite the value and/or type of an existing column. ;  ; template<typename F > ; RInterface< Proxied, DS_t > RedefineSlotEntry (std::string_view name, F expression, const ColumnNames_t &columns={});  Overwrite the value and/or type of an existing column. ;  ; template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> ; RResultPtr< T > Reduce (F f, std::string_view columnName, const T &redIdentity);  Execute a user-defined reduce operation on the values of a column. ;  ; template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> ; RResultPtr< T > Reduce (F f, std::string_view columnName="""");  Execute a user-defined reduce operation on the values of a column. ;  ; RResultPtr< RCutFlowReport > Report ();  Gather filtering statistics. ;  ; template<typename... ColumnTypes> ; RResultPtr< RInterface< RLoopManager > > Snapshot (std::string_view treename, std::string_view filename, const ColumnNames_t &columnList, const RSnapshotOptions &options=RSnapshotOptions());  Save selected columns to disk, in a new TTree treename in file filename. ;  ; RResultPtr< RInterface< RLoopManager > > Snapshot (std::string_view treename, std::string_view filename, const ColumnNames_t &columnList, const RSnapshotOptions &options=RSnapshotOptions());  Save selected columns to disk, in a new TTree treename in file filename. ;  ; RResultPtr< RInterface< RLoopManager > > Snapshot (std::string_view treename, std::string_view filename, std::initializer_list< std::string > columnList, const RSnapshotOptions &options=RSnapshotOptions());  Save selected columns to d",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:37659,Energy Efficiency,schedul,scheduled,37659,"e computation graph for which the alias is available.; Aliasing an alias is supported. Example usage:; auto df_with_alias = df.Alias(""simple_name"", ""very_long&complex_name!!!"");. Definition at line 1214 of file RInterface.hxx. ◆ Book(). template<typename Proxied , typename DataSource = void> . template<typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename Helper > . RResultPtr< typename std::decay_t< Helper >::Result_t > ROOT::RDF::RInterface< Proxied, DataSource >::Book ; (; Helper && ; helper, . const ColumnNames_t & ; columns = {} . ). inline . Book execution of a custom action using a user-defined helper object. ; Template Parameters. FirstColumnThe type of the first column used by this action. Inferred together with OtherColumns if not present. ; OtherColumnsA list of the types of the other columns used by this action ; HelperThe type of the user-defined helper. See below for the required interface it should expose. . Parameters. [in]helperThe Action Helper to be scheduled. ; [in]columnsThe names of the columns on which the helper acts. . Returnsthe result of the helper wrapped in a RResultPtr.; This method books a custom action for execution. The behavior of the action is completely dependent on the Helper object provided by the caller. The required interface for the helper is described below (more methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):. Mandatory interface. Helper must publicly inherit from ROOT::Detail::RDF::RActionImpl<Helper>; Helper::Result_t: public alias for the type of the result of this action helper. Result_t must be default-constructible.; Helper(Helper &&): a move-constructor is required. Copy-constructors are discouraged.; std::shared_ptr<Result_t> GetResultPtr() const: return a shared_ptr to the result of this action (of type Result_t). The RResultPtr returned by Book will point to this object. Note that this method can be called be",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:50054,Energy Efficiency,efficient,efficient,50054,"e, int > = 0> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Define ; (; std::string_view ; name, . F ; expression, . const ColumnNames_t & ; columns = {} . ). inline . Define a new column. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionFunction, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer function. . Returnsthe first node of the computation graph for which the new quantity is defined.; Define a column that will be visible from all subsequent nodes of the functional chain. The expression is only evaluated for entries that pass all the preceding filters. A new variable is created called name, accessible as if it was contained in the dataset from subsequent transformations/actions.; Use cases include:; caching the results of complex calculations for easy and efficient multiple access; extraction of quantities of interest from complex objects. An exception is thrown if the name of the new column is already in use in this branch of the computation graph. Example usage:; // assuming a function with signature:; double myComplexCalculation(const RVec<float> &muon_pts);; // we can pass it directly to Define; auto df_with_define = df.Define(""newColumn"", myComplexCalculation, {""muon_pts""});; // alternatively, we can pass the body of the function as a string, as in Filter:; auto df_with_define = df.Define(""newColumn"", ""x*x + y*y"");; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; NoteIf the body of the string expression contains an explicit return statement (even if it is in a nested scope), RDataFrame will not add another one in front of the expression. So this will not work: df.Define(""x2"", ""Map(v, [](float e) { return e*e; })""); but instead this will: df.Define(""x2"",",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:76469,Energy Efficiency,schedul,scheduled,76469,""" and the other has column ""y""; ROOT.RDataFrame df{dataset};; auto df_valid_col_x = df.FilterMissing(""y"");; auto df_valid_col_y = df.FilterMissing(""x"");; auto display_x = df_valid_col_x.Display<int>({""x""});; auto display_y = df_valid_col_y.Display<int>({""y""});; NoteSee FilterAvailable() if you want to discard the entries in case there is a missing value instead. ; Definition at line 388 of file RInterface.hxx. ◆ Foreach(). template<typename Proxied , typename DataSource = void> . template<typename F > . void ROOT::RDF::RInterface< Proxied, DataSource >::Foreach ; (; F ; f, . const ColumnNames_t & ; columns = {} . ). inline . Execute a user-defined function on each entry (instant action). ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object performing user defined calculations. ; [in]columnsNames of the columns/branches in input to the user function. The callable f is invoked once per entry. This is an instant action: upon invocation, an event loop as well as execution of all scheduled actions is triggered. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled (i.e. ROOT::EnableImplicitMT). Example usage:; myDf.Foreach([](int i){ std::cout << i << std::endl;}, {""myIntColumn""});. Definition at line 1611 of file RInterface.hxx. ◆ ForeachSlot(). template<typename Proxied , typename DataSource = void> . template<typename F > . void ROOT::RDF::RInterface< Proxied, DataSource >::ForeachSlot ; (; F ; f, . const ColumnNames_t & ; columns = {} . ). inline . Execute a user-defined function requiring a processing slot index on each entry (instant action). ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object performing user defined calculations. ; [in]columnsNames of the columns/branches in input to the user function. Same as Foreach, but the user-defined function takes an extra unsigned int as its first parameter, the processing slot index. Thi",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:119325,Energy Efficiency,reduce,reduce,119325,"he name of the column to redefine. ; [in]expressionFunction, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer function (excluding slot and entry). . Returnsthe first node of the computation graph for which the new quantity is defined.; The old value of the column can be used as an input for the expression. An exception is thrown in case the column to re-define does not already exist.; See DefineSlotEntry() for more information. ; Definition at line 598 of file RInterface.hxx. ◆ Reduce() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName, . const T & ; redIdentity . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. ; [in]redIdentityThe reduced object of each thread is initialized to this value. . Returnsthe reduced quantity wrapped in a RResultPtr. Example usage:; auto sumOfIntColWithOffset = d.Reduce([](int x, int y) { return x + y; }, ""intCol"", 42);; See the description of the first Reduce overload for more information. ; Definition at line 1711 of file RInterface.hxx. ◆ Reduce() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:119409,Energy Efficiency,reduce,reduce,119409,"sion, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer function (excluding slot and entry). . Returnsthe first node of the computation graph for which the new quantity is defined.; The old value of the column can be used as an input for the expression. An exception is thrown in case the column to re-define does not already exist.; See DefineSlotEntry() for more information. ; Definition at line 598 of file RInterface.hxx. ◆ Reduce() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName, . const T & ; redIdentity . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. ; [in]redIdentityThe reduced object of each thread is initialized to this value. . Returnsthe reduced quantity wrapped in a RResultPtr. Example usage:; auto sumOfIntColWithOffset = d.Reduce([](int x, int y) { return x + y; }, ""intCol"", 42);; See the description of the first Reduce overload for more information. ; Definition at line 1711 of file RInterface.hxx. ◆ Reduce() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Pa",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:119610,Energy Efficiency,reduce,reduced,119610,"umns/branches in input to the producer function (excluding slot and entry). . Returnsthe first node of the computation graph for which the new quantity is defined.; The old value of the column can be used as an input for the expression. An exception is thrown in case the column to re-define does not already exist.; See DefineSlotEntry() for more information. ; Definition at line 598 of file RInterface.hxx. ◆ Reduce() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName, . const T & ; redIdentity . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. ; [in]redIdentityThe reduced object of each thread is initialized to this value. . Returnsthe reduced quantity wrapped in a RResultPtr. Example usage:; auto sumOfIntColWithOffset = d.Reduce([](int x, int y) { return x + y; }, ""intCol"", 42);; See the description of the first Reduce overload for more information. ; Definition at line 1711 of file RInterface.hxx. ◆ Reduce() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callab",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:119694,Energy Efficiency,reduce,reduced,119694," the new quantity is defined.; The old value of the column can be used as an input for the expression. An exception is thrown in case the column to re-define does not already exist.; See DefineSlotEntry() for more information. ; Definition at line 598 of file RInterface.hxx. ◆ Reduce() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName, . const T & ; redIdentity . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. ; [in]redIdentityThe reduced object of each thread is initialized to this value. . Returnsthe reduced quantity wrapped in a RResultPtr. Example usage:; auto sumOfIntColWithOffset = d.Reduce([](int x, int y) { return x + y; }, ""intCol"", 42);; See the description of the first Reduce overload for more information. ; Definition at line 1711 of file RInterface.hxx. ◆ Reduce() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. . Returnsthe r",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:119767,Energy Efficiency,reduce,reduced,119767,"d as an input for the expression. An exception is thrown in case the column to re-define does not already exist.; See DefineSlotEntry() for more information. ; Definition at line 598 of file RInterface.hxx. ◆ Reduce() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName, . const T & ; redIdentity . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. ; [in]redIdentityThe reduced object of each thread is initialized to this value. . Returnsthe reduced quantity wrapped in a RResultPtr. Example usage:; auto sumOfIntColWithOffset = d.Reduce([](int x, int y) { return x + y; }, ""intCol"", 42);; See the description of the first Reduce overload for more information. ; Definition at line 1711 of file RInterface.hxx. ◆ Reduce() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. . Returnsthe reduced quantity wrapped in a ROOT::RDF:RResultPtr.; A reduction takes",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:120351,Energy Efficiency,reduce,reduce,120351," column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. ; [in]redIdentityThe reduced object of each thread is initialized to this value. . Returnsthe reduced quantity wrapped in a RResultPtr. Example usage:; auto sumOfIntColWithOffset = d.Reduce([](int x, int y) { return x + y; }, ""intCol"", 42);; See the description of the first Reduce overload for more information. ; Definition at line 1711 of file RInterface.hxx. ◆ Reduce() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. . Returnsthe reduced quantity wrapped in a ROOT::RDF:RResultPtr.; A reduction takes two values of a column and merges them into one (e.g. by summing them, taking the maximum, etc). This action performs the specified reduction operation on all processed column values, returning a single value of the same type. The callable f must satisfy the general requirements of a processing function besides having signature T(T,T) where T is the type of column columnName.; The returned reduced value of each thread (e.g. the initial value of a sum) is initialized to a default-constructed T object. This is commonly expected to be the neutral/identity element for the spe",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:120435,Energy Efficiency,reduce,reduce,120435,"cally deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. ; [in]redIdentityThe reduced object of each thread is initialized to this value. . Returnsthe reduced quantity wrapped in a RResultPtr. Example usage:; auto sumOfIntColWithOffset = d.Reduce([](int x, int y) { return x + y; }, ""intCol"", 42);; See the description of the first Reduce overload for more information. ; Definition at line 1711 of file RInterface.hxx. ◆ Reduce() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. . Returnsthe reduced quantity wrapped in a ROOT::RDF:RResultPtr.; A reduction takes two values of a column and merges them into one (e.g. by summing them, taking the maximum, etc). This action performs the specified reduction operation on all processed column values, returning a single value of the same type. The callable f must satisfy the general requirements of a processing function besides having signature T(T,T) where T is the type of column columnName.; The returned reduced value of each thread (e.g. the initial value of a sum) is initialized to a default-constructed T object. This is commonly expected to be the neutral/identity element for the specific reduction operation f (e.g. 0 for a sum, 1 for a product). If a def",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:120636,Energy Efficiency,reduce,reduced,120636,"to be reduced. If omitted, the first default column is used instead. ; [in]redIdentityThe reduced object of each thread is initialized to this value. . Returnsthe reduced quantity wrapped in a RResultPtr. Example usage:; auto sumOfIntColWithOffset = d.Reduce([](int x, int y) { return x + y; }, ""intCol"", 42);; See the description of the first Reduce overload for more information. ; Definition at line 1711 of file RInterface.hxx. ◆ Reduce() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. . Returnsthe reduced quantity wrapped in a ROOT::RDF:RResultPtr.; A reduction takes two values of a column and merges them into one (e.g. by summing them, taking the maximum, etc). This action performs the specified reduction operation on all processed column values, returning a single value of the same type. The callable f must satisfy the general requirements of a processing function besides having signature T(T,T) where T is the type of column columnName.; The returned reduced value of each thread (e.g. the initial value of a sum) is initialized to a default-constructed T object. This is commonly expected to be the neutral/identity element for the specific reduction operation f (e.g. 0 for a sum, 1 for a product). If a default-constructed T does not satisfy this requirement, users should explicitly specify an initialization value for T by calling the appropriate Reduce overload. Example us",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:120712,Energy Efficiency,reduce,reduced,120712,"ialized to this value. . Returnsthe reduced quantity wrapped in a RResultPtr. Example usage:; auto sumOfIntColWithOffset = d.Reduce([](int x, int y) { return x + y; }, ""intCol"", 42);; See the description of the first Reduce overload for more information. ; Definition at line 1711 of file RInterface.hxx. ◆ Reduce() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. . Returnsthe reduced quantity wrapped in a ROOT::RDF:RResultPtr.; A reduction takes two values of a column and merges them into one (e.g. by summing them, taking the maximum, etc). This action performs the specified reduction operation on all processed column values, returning a single value of the same type. The callable f must satisfy the general requirements of a processing function besides having signature T(T,T) where T is the type of column columnName.; The returned reduced value of each thread (e.g. the initial value of a sum) is initialized to a default-constructed T object. This is commonly expected to be the neutral/identity element for the specific reduction operation f (e.g. 0 for a sum, 1 for a product). If a default-constructed T does not satisfy this requirement, users should explicitly specify an initialization value for T by calling the appropriate Reduce overload. Example usage:; auto sumOfIntCol = d.Reduce([](int x, int y) { return x + y; }, ""intCol"");; This action is lazy: upon invocation of this m",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:121176,Energy Efficiency,reduce,reduced,121176,"ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. . Returnsthe reduced quantity wrapped in a ROOT::RDF:RResultPtr.; A reduction takes two values of a column and merges them into one (e.g. by summing them, taking the maximum, etc). This action performs the specified reduction operation on all processed column values, returning a single value of the same type. The callable f must satisfy the general requirements of a processing function besides having signature T(T,T) where T is the type of column columnName.; The returned reduced value of each thread (e.g. the initial value of a sum) is initialized to a default-constructed T object. This is commonly expected to be the neutral/identity element for the specific reduction operation f (e.g. 0 for a sum, 1 for a product). If a default-constructed T does not satisfy this requirement, users should explicitly specify an initialization value for T by calling the appropriate Reduce overload. Example usage:; auto sumOfIntCol = d.Reduce([](int x, int y) { return x + y; }, ""intCol"");; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. ; Definition at line 1688 of file RInterface.hxx. ◆ Report(). template<typename Proxied , typename DataSource = void> . RResultPtr< RCutFlowReport > ROOT::RDF::RInterface< Proxied, DataSource >::Report ; (; ). inline . Gather filtering statistics. ; Returnsthe resulting RCutFlowReport instance wrapped in a RResultPtr.; Calling Report on the main RDataFrame object gathers stats fo",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:539,Integrability,interface,interface,539,". ROOT: ROOT::RDF::RInterface< Proxied, DataSource > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::RInterface< Proxied, DataSource > Class Template ReferenceDataframe. ; template<typename Proxied, typename DataSource = void>; class ROOT::RDF::RInterface< Proxied, DataSource >The public interface to the RDataFrame federation of classes. ; Template Parameters. ProxiedOne of the ""node"" base types (e.g. RLoopManager, RFilterBase). The user never specifies this type manually. ; DataSourceThe type of the RDataSource which is providing the data to the data frame. There is no source by default. The documentation of each method features a one liner illustrating how to use the method, for example showing how the majority of the template parameters are automatically deduced requiring no or very little effort by the user. ; Definition at line 113 of file RInterface.hxx. Public Member Functions;  RInterface (const RInterface &)=default;  Copy-ctor for RInterface. ;  ; template<typename T = Proxied, typename = std::enable_if_t<std::is_same<T, RLoopManager>::value, int>> ;  RInterface (const std::shared_ptr< RLoopManager > &proxied);  Build a RInterface from a RLoopManager. ;  ;  RInterface (RInterface &&)=default;  Move-ctor for RInterface. ;  ; template<typename AccFun , typename MergeFun , typename R = typename TTraits::CallableTraits<AccFun>::ret_type, typename ArgTypes = typename TTraits::CallableTraits<AccFun>::arg_types, typename ArgTypesNoDecay = typename TTraits::CallableTraits<AccFun>::arg_types_nodecay, typename U = TTraits::TakeFirstParameter_t<ArgTypes>, typename T = TTraits::TakeFirstParameter_t<TTraits::RemoveFirstParameter_t<ArgTypes>>> ; RResultPtr< U > Aggregate (AccFun aggregator, MergeFun merger, std::string_view c",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:4837,Integrability,depend,dependent,4837,"string_view column, const T &defaultValue);  In case the value in the given column is missing, provide a default value. ;  ; template<typename F , typename std::enable_if_t<!std::is_convertible< F, std::string >::value, int > = 0> ; RInterface< Proxied, DS_t > Define (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column. ;  ; RInterface< Proxied, DS_t > Define (std::string_view name, std::string_view expression);  Define a new column. ;  ; template<typename F , typename RetType_t = typename TTraits::CallableTraits<F>::ret_type> ; RInterface< Proxied, DS_t > DefinePerSample (std::string_view name, F expression);  Define a new column that is updated when the input sample changes. ;  ; RInterface< Proxied, DS_t > DefinePerSample (std::string_view name, std::string_view expression);  Define a new column that is updated when the input sample changes. ;  ; template<typename F > ; RInterface< Proxied, DS_t > DefineSlot (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot. ;  ; template<typename F > ; RInterface< Proxied, DS_t > DefineSlotEntry (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot and the current entry. ;  ; template<typename... ColumnTypes> ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (std::initializer_list< std::string > columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (std::string_view columnNameRegexp=",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:5050,Integrability,depend,dependent,5050,"nt > = 0> ; RInterface< Proxied, DS_t > Define (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column. ;  ; RInterface< Proxied, DS_t > Define (std::string_view name, std::string_view expression);  Define a new column. ;  ; template<typename F , typename RetType_t = typename TTraits::CallableTraits<F>::ret_type> ; RInterface< Proxied, DS_t > DefinePerSample (std::string_view name, F expression);  Define a new column that is updated when the input sample changes. ;  ; RInterface< Proxied, DS_t > DefinePerSample (std::string_view name, std::string_view expression);  Define a new column that is updated when the input sample changes. ;  ; template<typename F > ; RInterface< Proxied, DS_t > DefineSlot (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot. ;  ; template<typename F > ; RInterface< Proxied, DS_t > DefineSlotEntry (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot and the current entry. ;  ; template<typename... ColumnTypes> ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (std::initializer_list< std::string > columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (std::string_view columnNameRegexp="""", size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; template<typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename T > ; RResu",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:32106,Integrability,wrap,wrapped,32106,"mnName, . const U & ; aggIdentity . ). inline . Execute a user-defined accumulation operation on the processed column values in each processing slot. ; Template Parameters. FThe type of the aggregator callable. Automatically deduced. ; UThe type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]aggregatorA callable with signature U(U,T) or void(U&,T), where T is the type of the column, U is the type of the aggregator variable ; [in]mergerA callable with signature U(U,U) or void(std::vector<U>&) used to merge the results of the accumulations of each thread ; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. ; [in]aggIdentityThe aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted) . Returnsthe result of the aggregation wrapped in a RResultPtr.; An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is initialized to aggIdentity or default-constructed if aggIdentity is omitted. This action calls the aggregator callable for each processed entry, passing in the aggregator variable and the value of the column columnName. If the signature is U(U,T) the aggregator variable is then copy-assigned the result of the execution of the callable. Otherwise the signature of aggregator must be void(U&,T).; The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions. If its signature is U(U,U) the aggregator variables of each thread are merged two by two. If its signature is void(std::vector<U>& a) it is assumed that it merges all aggregators in a[0].; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; Example u",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:36119,Integrability,wrap,wrapped,36119,"ter_t<ArgTypes>>> . RResultPtr< U > ROOT::RDF::RInterface< Proxied, DataSource >::Aggregate ; (; AccFun ; aggregator, . MergeFun ; merger, . std::string_view ; columnName = """" . ). inline . Execute a user-defined accumulation operation on the processed column values in each processing slot. ; Template Parameters. FThe type of the aggregator callable. Automatically deduced. ; UThe type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]aggregatorA callable with signature U(U,T) or void(U,T), where T is the type of the column, U is the type of the aggregator variable ; [in]mergerA callable with signature U(U,U) or void(std::vector<U>&) used to merge the results of the accumulations of each thread ; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. . Returnsthe result of the aggregation wrapped in a RResultPtr.; See previous Aggregate overload for more information. ; Definition at line 2913 of file RInterface.hxx. ◆ Alias(). template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Alias ; (; std::string_view ; alias, . std::string_view ; columnName . ). inline . Allow to refer to a column with a different name. ; Parameters. [in]aliasname of the column alias ; [in]columnNameof the column to be aliased . Returnsthe first node of the computation graph for which the alias is available.; Aliasing an alias is supported. Example usage:; auto df_with_alias = df.Alias(""simple_name"", ""very_long&complex_name!!!"");. Definition at line 1214 of file RInterface.hxx. ◆ Book(). template<typename Proxied , typename DataSource = void> . template<typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename Helper > . RResultPtr< typename std::decay_t< Helper >::Result_t > ROOT::RDF::",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:37583,Integrability,interface,interface,37583,"umnNameof the column to be aliased . Returnsthe first node of the computation graph for which the alias is available.; Aliasing an alias is supported. Example usage:; auto df_with_alias = df.Alias(""simple_name"", ""very_long&complex_name!!!"");. Definition at line 1214 of file RInterface.hxx. ◆ Book(). template<typename Proxied , typename DataSource = void> . template<typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename Helper > . RResultPtr< typename std::decay_t< Helper >::Result_t > ROOT::RDF::RInterface< Proxied, DataSource >::Book ; (; Helper && ; helper, . const ColumnNames_t & ; columns = {} . ). inline . Book execution of a custom action using a user-defined helper object. ; Template Parameters. FirstColumnThe type of the first column used by this action. Inferred together with OtherColumns if not present. ; OtherColumnsA list of the types of the other columns used by this action ; HelperThe type of the user-defined helper. See below for the required interface it should expose. . Parameters. [in]helperThe Action Helper to be scheduled. ; [in]columnsThe names of the columns on which the helper acts. . Returnsthe result of the helper wrapped in a RResultPtr.; This method books a custom action for execution. The behavior of the action is completely dependent on the Helper object provided by the caller. The required interface for the helper is described below (more methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):. Mandatory interface. Helper must publicly inherit from ROOT::Detail::RDF::RActionImpl<Helper>; Helper::Result_t: public alias for the type of the result of this action helper. Result_t must be default-constructible.; Helper(Helper &&): a move-constructor is required. Copy-constructors are discouraged.; std::shared_ptr<Result_t> GetResultPtr() const: return a shared_ptr to the result of this action (of type Result_t). The RResultPtr returned by Book w",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:37768,Integrability,wrap,wrapped,37768,"lias = df.Alias(""simple_name"", ""very_long&complex_name!!!"");. Definition at line 1214 of file RInterface.hxx. ◆ Book(). template<typename Proxied , typename DataSource = void> . template<typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename Helper > . RResultPtr< typename std::decay_t< Helper >::Result_t > ROOT::RDF::RInterface< Proxied, DataSource >::Book ; (; Helper && ; helper, . const ColumnNames_t & ; columns = {} . ). inline . Book execution of a custom action using a user-defined helper object. ; Template Parameters. FirstColumnThe type of the first column used by this action. Inferred together with OtherColumns if not present. ; OtherColumnsA list of the types of the other columns used by this action ; HelperThe type of the user-defined helper. See below for the required interface it should expose. . Parameters. [in]helperThe Action Helper to be scheduled. ; [in]columnsThe names of the columns on which the helper acts. . Returnsthe result of the helper wrapped in a RResultPtr.; This method books a custom action for execution. The behavior of the action is completely dependent on the Helper object provided by the caller. The required interface for the helper is described below (more methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):. Mandatory interface. Helper must publicly inherit from ROOT::Detail::RDF::RActionImpl<Helper>; Helper::Result_t: public alias for the type of the result of this action helper. Result_t must be default-constructible.; Helper(Helper &&): a move-constructor is required. Copy-constructors are discouraged.; std::shared_ptr<Result_t> GetResultPtr() const: return a shared_ptr to the result of this action (of type Result_t). The RResultPtr returned by Book will point to this object. Note that this method can be called before Initialize(), because the RResultPtr is constructed before the event loop is started.; void Initialize(): this m",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:37884,Integrability,depend,dependent,37884,"e<typename Proxied , typename DataSource = void> . template<typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename Helper > . RResultPtr< typename std::decay_t< Helper >::Result_t > ROOT::RDF::RInterface< Proxied, DataSource >::Book ; (; Helper && ; helper, . const ColumnNames_t & ; columns = {} . ). inline . Book execution of a custom action using a user-defined helper object. ; Template Parameters. FirstColumnThe type of the first column used by this action. Inferred together with OtherColumns if not present. ; OtherColumnsA list of the types of the other columns used by this action ; HelperThe type of the user-defined helper. See below for the required interface it should expose. . Parameters. [in]helperThe Action Helper to be scheduled. ; [in]columnsThe names of the columns on which the helper acts. . Returnsthe result of the helper wrapped in a RResultPtr.; This method books a custom action for execution. The behavior of the action is completely dependent on the Helper object provided by the caller. The required interface for the helper is described below (more methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):. Mandatory interface. Helper must publicly inherit from ROOT::Detail::RDF::RActionImpl<Helper>; Helper::Result_t: public alias for the type of the result of this action helper. Result_t must be default-constructible.; Helper(Helper &&): a move-constructor is required. Copy-constructors are discouraged.; std::shared_ptr<Result_t> GetResultPtr() const: return a shared_ptr to the result of this action (of type Result_t). The RResultPtr returned by Book will point to this object. Note that this method can be called before Initialize(), because the RResultPtr is constructed before the event loop is started.; void Initialize(): this method is called once before starting the event-loop. Useful for setup operations. It must reset the state of the helper to the",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:37952,Integrability,interface,interface,37952,"ype, typename... OtherColumns, typename Helper > . RResultPtr< typename std::decay_t< Helper >::Result_t > ROOT::RDF::RInterface< Proxied, DataSource >::Book ; (; Helper && ; helper, . const ColumnNames_t & ; columns = {} . ). inline . Book execution of a custom action using a user-defined helper object. ; Template Parameters. FirstColumnThe type of the first column used by this action. Inferred together with OtherColumns if not present. ; OtherColumnsA list of the types of the other columns used by this action ; HelperThe type of the user-defined helper. See below for the required interface it should expose. . Parameters. [in]helperThe Action Helper to be scheduled. ; [in]columnsThe names of the columns on which the helper acts. . Returnsthe result of the helper wrapped in a RResultPtr.; This method books a custom action for execution. The behavior of the action is completely dependent on the Helper object provided by the caller. The required interface for the helper is described below (more methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):. Mandatory interface. Helper must publicly inherit from ROOT::Detail::RDF::RActionImpl<Helper>; Helper::Result_t: public alias for the type of the result of this action helper. Result_t must be default-constructible.; Helper(Helper &&): a move-constructor is required. Copy-constructors are discouraged.; std::shared_ptr<Result_t> GetResultPtr() const: return a shared_ptr to the result of this action (of type Result_t). The RResultPtr returned by Book will point to this object. Note that this method can be called before Initialize(), because the RResultPtr is constructed before the event loop is started.; void Initialize(): this method is called once before starting the event-loop. Useful for setup operations. It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper, or copies of it, might be used for m",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:38139,Integrability,interface,interface,38139,"ource >::Book ; (; Helper && ; helper, . const ColumnNames_t & ; columns = {} . ). inline . Book execution of a custom action using a user-defined helper object. ; Template Parameters. FirstColumnThe type of the first column used by this action. Inferred together with OtherColumns if not present. ; OtherColumnsA list of the types of the other columns used by this action ; HelperThe type of the user-defined helper. See below for the required interface it should expose. . Parameters. [in]helperThe Action Helper to be scheduled. ; [in]columnsThe names of the columns on which the helper acts. . Returnsthe result of the helper wrapped in a RResultPtr.; This method books a custom action for execution. The behavior of the action is completely dependent on the Helper object provided by the caller. The required interface for the helper is described below (more methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):. Mandatory interface. Helper must publicly inherit from ROOT::Detail::RDF::RActionImpl<Helper>; Helper::Result_t: public alias for the type of the result of this action helper. Result_t must be default-constructible.; Helper(Helper &&): a move-constructor is required. Copy-constructors are discouraged.; std::shared_ptr<Result_t> GetResultPtr() const: return a shared_ptr to the result of this action (of type Result_t). The RResultPtr returned by Book will point to this object. Note that this method can be called before Initialize(), because the RResultPtr is constructed before the event loop is started.; void Initialize(): this method is called once before starting the event-loop. Useful for setup operations. It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper, or copies of it, might be used for multiple event loops (e.g. in the presence of systematic variations).; void InitTask(TTreeReader *, unsigned int slot): each working thread shall",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:42143,Integrability,wrap,wraps,42143," In case Book is called without specifying column types as template arguments, corresponding typed code will be just-in-time compiled by RDataFrame. In that case the Helper class needs to be known to the ROOT interpreter.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Examples; See this tutorial for an example implementation of an action helper.; It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx. ; Definition at line 2984 of file RInterface.hxx. ◆ Cache() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; This action returns a new RDataFrame object, completely detached from the originating RDataFrame. The new dataframe only contains the cached columns and stores their content in memory for fast, zero-copy subsequent access.; Use Cache if you know you will only need a subset of the (Filtered) data that fits in memory and that will be accessed many times.; NoteCache will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_co",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:43693,Integrability,wrap,wraps,43693,"sent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; Types inferred and columns selected with a regexp (this invocation relies on jitting): auto cache_all_cols_df = df.Cache(myRegexp);. Definition at line 1459 of file RInterface.hxx. ◆ Cache() [2/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1471 of file RInterface.hxx. ◆ Cache() [3/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::initializer_list< std::string > ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1546 of file RInterface.hxx. ◆ Cache() [4/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::string_view ; columnNameRegexp = """"). inline . Save selected columns in memory. ; Parameters. [in]columnNameRegexpThe regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is impli",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:44159,Integrability,wrap,wraps,44159,"e({""col0"", ""col1"", ""col2""});; Types inferred and columns selected with a regexp (this invocation relies on jitting): auto cache_all_cols_df = df.Cache(myRegexp);. Definition at line 1459 of file RInterface.hxx. ◆ Cache() [2/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1471 of file RInterface.hxx. ◆ Cache() [3/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::initializer_list< std::string > ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1546 of file RInterface.hxx. ◆ Cache() [4/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::string_view ; columnNameRegexp = """"). inline . Save selected columns in memory. ; Parameters. [in]columnNameRegexpThe regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if they are not specified. The dialect supported is PCRE via the TPRegexp class. An empty string signals the selection of all columns. . Returnsa RDataFrame that wraps the cached dataset.; The existing columns are matched against the regular expression. If the string provided is empty, all columns are selected. See the previous overloads for more information. ; Definition at line 1520 of file RInterface.hxx. ◆ CacheImpl(). template<typename Proxied",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:44869,Integrability,wrap,wraps,44869,"name DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::initializer_list< std::string > ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1546 of file RInterface.hxx. ◆ Cache() [4/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::string_view ; columnNameRegexp = """"). inline . Save selected columns in memory. ; Parameters. [in]columnNameRegexpThe regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if they are not specified. The dialect supported is PCRE via the TPRegexp class. An empty string signals the selection of all columns. . Returnsa RDataFrame that wraps the cached dataset.; The existing columns are matched against the regular expression. If the string provided is empty, all columns are selected. See the previous overloads for more information. ; Definition at line 1520 of file RInterface.hxx. ◆ CacheImpl(). template<typename Proxied , typename DataSource = void> . template<typename... ColTypes, std::size_t... S> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::CacheImpl ; (; const ColumnNames_t & ; columnList, . std::index_sequence< S... > ;  . ). inlineprivate . Implementation of cache. ; Definition at line 3200 of file RInterface.hxx. ◆ CallCreateActionWithoutColsIfPossible() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename Helper , typename ActionResultType , typename... Others> . RResultPtr< ActionResultType > ROOT::RDF::RInterface< Proxied, DataSource >::CallCreateActionWithoutColsIfPossible ; (; const std::shared_ptr< ActionResultType > & ; , . const std::shared_p",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:46758,Integrability,wrap,wrapped,46758,">::CallCreateActionWithoutColsIfPossible ; (; const std::shared_ptr< ActionResultType > & ; , . const std::shared_ptr< Helper > & ; , . Others... ;  . ). inlineprivate . Definition at line 3301 of file RInterface.hxx. ◆ CallCreateActionWithoutColsIfPossible() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename Helper , typename ActionResultType > . auto ROOT::RDF::RInterface< Proxied, DataSource >::CallCreateActionWithoutColsIfPossible ; (; const std::shared_ptr< ActionResultType > & ; resPtr, . const std::shared_ptr< Helper > & ; hPtr, . TTraits::TypeList< RDFDetail::RInferredType > ;  . ); -> decltype(hPtr->Exec(0u), RResultPtr<ActionResultType>{}); . inlineprivate . Definition at line 3291 of file RInterface.hxx. ◆ Count(). template<typename Proxied , typename DataSource = void> . RResultPtr< ULong64_t > ROOT::RDF::RInterface< Proxied, DataSource >::Count ; (; ). inline . Return the number of entries processed (lazy action). ; Returnsthe number of entries wrapped in a RResultPtr.; Useful e.g. for counting the number of entries passing a certain filter (see also Report). This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; auto nEntriesAfterCuts = myFilteredDf.Count();. Definition at line 1729 of file RInterface.hxx. ◆ DefaultValueFor(). template<typename Proxied , typename DataSource = void> . template<typename T > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefaultValueFor ; (; std::string_view ; column, . const T & ; defaultValue . ). inline . In case the value in the given column is missing, provide a default value. ; Template Parameters. TThe type of the column . Parameters. [in]columnColumn name where missing values should be replaced by the given default value ; [in]defaultValueValue to provide instead of a missing value . ReturnsThe node of the graph that will provide a default value; This operation is useful in cas",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:48594,Integrability,interface,interface,48594,"n default value ; [in]defaultValueValue to provide instead of a missing value . ReturnsThe node of the graph that will provide a default value; This operation is useful in case an entry of the dataset is incomplete, i.e. if one or more of the columns do not have valid values. It does not modify the values of the column, but in case any entry is missing, it will provide the default value to downstream nodes instead.; Use cases include:; When processing multiple files, one or more of them is missing a column; In horizontal joining with entry matching, a certain dataset has no match for the current entry. Example usage:; // Assume a dataset with columns [idx, x] matching another dataset with; // columns [idx, y]. For idx == 42, the right-hand dataset has no match; ROOT::RDataFrame df{dataset};; auto df_default = df.DefaultValueFor(""y"", 33); .Define(""z"", [](int x, int y) { return x + y; }, {""x"", ""y""});; auto colz = df_default.Take<int>(""z"");; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; yDouble_t y[n]Definition legend1.C:17; df = ROOT.RDataFrame(dataset); df_default = df.DefaultValueFor(""y"", 33).Define(""z"", ""x + y""); colz = df_default.Take[int](""z""). Definition at line 672 of file RInterface.hxx. ◆ Define() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename std::enable_if_t<!std::is_convertible< F, std::string >::value, int > = 0> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Define ; (; std::string_view ; name, . F ; expression, . const ColumnNames_t & ; columns = {} . ). inline . Define a new column. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionFunction, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer f",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:54657,Integrability,depend,depends,54657,"ion . ). inline . Define a new column that is updated when the input sample changes. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionA C++ callable that computes the new value of the defined column. . Returnsthe first node of the computation graph for which the new quantity is defined.; The signature of the callable passed as second argument should be T(unsigned int slot, const ROOT::RDF::RSampleInfo &id) where:; T is the type of the defined column; slot is a number in the range [0, nThreads) that is different for each processing thread. This can simplify the definition of thread-safe callables if you are interested in using parallel capabilities of RDataFrame.; id is an instance of a ROOT::RDF::RSampleInfo object which contains information about the sample which is being processed (see the class docs for more information). DefinePerSample() is useful to e.g. define a quantity that depends on which TTree in which TFile is being processed or to inject a callback into the event loop that is only called when the processing of a new sample starts rather than at every entry.; The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often. Example usage:; ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; df.DefinePerSample(""weightbysample"",; [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; ROOT::RDF::RInterface::DefinePerSampleRInterface< Proxied, DS_t > DefinePerSample(std::string_view name, F expression)Define a new column that is updated when the input sample changes.Definition RInterface.hxx:735; ROOT::RDF::RSampleInfoThis type represents a sample identifier, to be used in conjunction with RDataFrame features such as ...Definition RSampleInfo.hxx:35. Definition at line 735 of file RInterface.hxx. ◆ DefinePerSample() [2/2]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Pr",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:54720,Integrability,inject,inject,54720,"ion . ). inline . Define a new column that is updated when the input sample changes. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionA C++ callable that computes the new value of the defined column. . Returnsthe first node of the computation graph for which the new quantity is defined.; The signature of the callable passed as second argument should be T(unsigned int slot, const ROOT::RDF::RSampleInfo &id) where:; T is the type of the defined column; slot is a number in the range [0, nThreads) that is different for each processing thread. This can simplify the definition of thread-safe callables if you are interested in using parallel capabilities of RDataFrame.; id is an instance of a ROOT::RDF::RSampleInfo object which contains information about the sample which is being processed (see the class docs for more information). DefinePerSample() is useful to e.g. define a quantity that depends on which TTree in which TFile is being processed or to inject a callback into the event loop that is only called when the processing of a new sample starts rather than at every entry.; The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often. Example usage:; ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; df.DefinePerSample(""weightbysample"",; [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; ROOT::RDF::RInterface::DefinePerSampleRInterface< Proxied, DS_t > DefinePerSample(std::string_view name, F expression)Define a new column that is updated when the input sample changes.Definition RInterface.hxx:735; ROOT::RDF::RSampleInfoThis type represents a sample identifier, to be used in conjunction with RDataFrame features such as ...Definition RSampleInfo.hxx:35. Definition at line 735 of file RInterface.hxx. ◆ DefinePerSample() [2/2]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Pr",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:58009,Integrability,depend,dependent,58009,"le the correct way to call this overload when working in PyROOT: ROOT.gInterpreter.Declare(; """"""; float weights(unsigned int slot, const ROOT::RDF::RSampleInfo &id){; return id.Contains(""sample1"") ? 1.0f : 2.0f;; }; """"""); df = ROOT.RDataFrame(""mytree"", [""sample1.root"",""sample2.root""]); df.DefinePerSample(""weightsbysample"", ""weights(rdfslot_, rdfsampleinfo_)""). Differently from what happens in Define(), the string expression passed to DefinePerSample cannot contain column names other than those mentioned above: the expression is evaluated once before the processing of the sample even starts, so column values are not accessible. ; Definition at line 796 of file RInterface.hxx. ◆ DefineSlot(). template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefineSlot ; (; std::string_view ; name, . F ; expression, . const ColumnNames_t & ; columns = {} . ). inline . Define a new column with a value dependent on the processing slot. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionFunction, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer function (excluding the slot number). . Returnsthe first node of the computation graph for which the new quantity is defined.; This alternative implementation of Define is meant as a helper to evaluate new column values in a thread-safe manner. The expression must be a callable of signature R(unsigned int, T1, T2, ...) where T1, T2... are the types of the columns that the expression takes as input. The first parameter is reserved for an unsigned integer representing a ""slot number"". RDataFrame guarantees that different threads will invoke the expression with different slot numbers - slot numbers will range from zero to ROOT::GetThreadPoolSize()-1.; The fol",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:59663,Integrability,depend,dependent,59663,"1, T2... are the types of the columns that the expression takes as input. The first parameter is reserved for an unsigned integer representing a ""slot number"". RDataFrame guarantees that different threads will invoke the expression with different slot numbers - slot numbers will range from zero to ROOT::GetThreadPoolSize()-1.; The following two calls are equivalent, although DefineSlot is slightly more performant: int function(unsigned int, double, double);; df.Define(""x"", function, {""rdfslot_"", ""column1"", ""column2""}); df.DefineSlot(""x"", function, {""column1"", ""column2""}); See Define() for more information. ; Definition at line 470 of file RInterface.hxx. ◆ DefineSlotEntry(). template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefineSlotEntry ; (; std::string_view ; name, . F ; expression, . const ColumnNames_t & ; columns = {} . ). inline . Define a new column with a value dependent on the processing slot and the current entry. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionFunction, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer function (excluding slot and entry). . Returnsthe first node of the computation graph for which the new quantity is defined.; This alternative implementation of Define is meant as a helper in writing entry-specific, thread-safe custom columns. The expression must be a callable of signature R(unsigned int, ULong64_t, T1, T2, ...) where T1, T2... are the types of the columns that the expression takes as input. The first parameter is reserved for an unsigned integer representing a ""slot number"". RDataFrame guarantees that different threads will invoke the expression with different slot numbers - slot numbers will range from zero to ROOT::GetThreadP",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:61520,Integrability,depend,dependent,61520,"r is reserved for an unsigned integer representing a ""slot number"". RDataFrame guarantees that different threads will invoke the expression with different slot numbers - slot numbers will range from zero to ROOT::GetThreadPoolSize()-1. The second parameter is reserved for a ULong64_t representing the current entry being processed by the current thread.; The following two Defines are equivalent, although DefineSlotEntry is slightly more performant: int function(unsigned int, ULong64_t, double, double);; Define(""x"", function, {""rdfslot_"", ""rdfentry_"", ""column1"", ""column2""}); DefineSlotEntry(""x"", function, {""column1"", ""column2""}); ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; ROOT::RDF::RInterface::DefineRInterface< Proxied, DS_t > Define(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column.Definition RInterface.hxx:441; ROOT::RDF::RInterface::DefineSlotEntryRInterface< Proxied, DS_t > DefineSlotEntry(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column with a value dependent on the processing slot and the current entry.Definition RInterface.hxx:500; See Define() for more information. ; Definition at line 500 of file RInterface.hxx. ◆ Display() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RResultPtr< RDisplay > ROOT::RDF::RInterface< Proxied, DataSource >::Display ; (; const ColumnNames_t & ; columnList, . size_t ; nRows = 5, . size_t ; nMaxCollectionElements = 10 . ). inline . Provides a representation of the columns in the dataset. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListNames of the columns to be displayed. ; [in]nRowsNumber of events for each column to be displayed. ; [in]nMaxCollectionElementsMaximum number of collection elements to display per row. . Returnsthe RDisplay instance wrapped in a RResultPtr.; This function returns a RResultPtr<RDisplay> containing ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:62369,Integrability,wrap,wrapped,62369,"lotEntryRInterface< Proxied, DS_t > DefineSlotEntry(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column with a value dependent on the processing slot and the current entry.Definition RInterface.hxx:500; See Define() for more information. ; Definition at line 500 of file RInterface.hxx. ◆ Display() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RResultPtr< RDisplay > ROOT::RDF::RInterface< Proxied, DataSource >::Display ; (; const ColumnNames_t & ; columnList, . size_t ; nRows = 5, . size_t ; nMaxCollectionElements = 10 . ). inline . Provides a representation of the columns in the dataset. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListNames of the columns to be displayed. ; [in]nRowsNumber of events for each column to be displayed. ; [in]nMaxCollectionElementsMaximum number of collection elements to display per row. . Returnsthe RDisplay instance wrapped in a RResultPtr.; This function returns a RResultPtr<RDisplay> containing all the entries to be displayed, organized in a tabular form. RDisplay will either print on the standard output a summarized version through RDisplay::Print() or will return a complete version through RDisplay::AsString().; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; Example usage: // Preparing the RResultPtr<RDisplay> object with all columns and default number of entries; auto d1 = rdf.Display("""");; // Preparing the RResultPtr<RDisplay> object with two columns and 128 entries; auto d2 = d.Display({""x"", ""y""}, 128);; // Printing the short representations, the event loop will run; d1->Print();; d2->Print();. Definition at line 3029 of file RInterface.hxx. ◆ Display() [2/4]. template<typename Proxied , typename DataSource = void> . RResultPtr< RDisplay > ROOT::RDF::RInterface< Proxied, DataSource >::Display ; (; const ColumnNames_t ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:63758,Integrability,wrap,wrapped,63758,"t not executed. Also see RResultPtr.; Example usage: // Preparing the RResultPtr<RDisplay> object with all columns and default number of entries; auto d1 = rdf.Display("""");; // Preparing the RResultPtr<RDisplay> object with two columns and 128 entries; auto d2 = d.Display({""x"", ""y""}, 128);; // Printing the short representations, the event loop will run; d1->Print();; d2->Print();. Definition at line 3029 of file RInterface.hxx. ◆ Display() [2/4]. template<typename Proxied , typename DataSource = void> . RResultPtr< RDisplay > ROOT::RDF::RInterface< Proxied, DataSource >::Display ; (; const ColumnNames_t & ; columnList, . size_t ; nRows = 5, . size_t ; nMaxCollectionElements = 10 . ). inline . Provides a representation of the columns in the dataset. ; Parameters. [in]columnListNames of the columns to be displayed. ; [in]nRowsNumber of events for each column to be displayed. ; [in]nMaxCollectionElementsMaximum number of collection elements to display per row. . Returnsthe RDisplay instance wrapped in a RResultPtr.; This overload automatically infers the column types. See the previous overloads for further details.; Invoked when no types are specified to Display ; Definition at line 3052 of file RInterface.hxx. ◆ Display() [3/4]. template<typename Proxied , typename DataSource = void> . RResultPtr< RDisplay > ROOT::RDF::RInterface< Proxied, DataSource >::Display ; (; std::initializer_list< std::string > ; columnList, . size_t ; nRows = 5, . size_t ; nMaxCollectionElements = 10 . ). inline . Provides a representation of the columns in the dataset. ; Parameters. [in]columnListNames of the columns to be displayed. ; [in]nRowsNumber of events for each column to be displayed. ; [in]nMaxCollectionElementsNumber of maximum elements in collection. . Returnsthe RDisplay instance wrapped in a RResultPtr.; See the previous overloads for further details. ; Definition at line 3091 of file RInterface.hxx. ◆ Display() [4/4]. template<typename Proxied , typename DataSource = void> . R",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:64553,Integrability,wrap,wrapped,64553," the columns to be displayed. ; [in]nRowsNumber of events for each column to be displayed. ; [in]nMaxCollectionElementsMaximum number of collection elements to display per row. . Returnsthe RDisplay instance wrapped in a RResultPtr.; This overload automatically infers the column types. See the previous overloads for further details.; Invoked when no types are specified to Display ; Definition at line 3052 of file RInterface.hxx. ◆ Display() [3/4]. template<typename Proxied , typename DataSource = void> . RResultPtr< RDisplay > ROOT::RDF::RInterface< Proxied, DataSource >::Display ; (; std::initializer_list< std::string > ; columnList, . size_t ; nRows = 5, . size_t ; nMaxCollectionElements = 10 . ). inline . Provides a representation of the columns in the dataset. ; Parameters. [in]columnListNames of the columns to be displayed. ; [in]nRowsNumber of events for each column to be displayed. ; [in]nMaxCollectionElementsNumber of maximum elements in collection. . Returnsthe RDisplay instance wrapped in a RResultPtr.; See the previous overloads for further details. ; Definition at line 3091 of file RInterface.hxx. ◆ Display() [4/4]. template<typename Proxied , typename DataSource = void> . RResultPtr< RDisplay > ROOT::RDF::RInterface< Proxied, DataSource >::Display ; (; std::string_view ; columnNameRegexp = """", . size_t ; nRows = 5, . size_t ; nMaxCollectionElements = 10 . ). inline . Provides a representation of the columns in the dataset. ; Parameters. [in]columnNameRegexpA regular expression to select the columns. ; [in]nRowsNumber of events for each column to be displayed. ; [in]nMaxCollectionElementsMaximum number of collection elements to display per row. . Returnsthe RDisplay instance wrapped in a RResultPtr.; The existing columns are matched against the regular expression. If the string provided is empty, all columns are selected. See the previous overloads for further details. ; Definition at line 3075 of file RInterface.hxx. ◆ Fill(). template<typename Proxied ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:65266,Integrability,wrap,wrapped,65266,"ne . Provides a representation of the columns in the dataset. ; Parameters. [in]columnListNames of the columns to be displayed. ; [in]nRowsNumber of events for each column to be displayed. ; [in]nMaxCollectionElementsNumber of maximum elements in collection. . Returnsthe RDisplay instance wrapped in a RResultPtr.; See the previous overloads for further details. ; Definition at line 3091 of file RInterface.hxx. ◆ Display() [4/4]. template<typename Proxied , typename DataSource = void> . RResultPtr< RDisplay > ROOT::RDF::RInterface< Proxied, DataSource >::Display ; (; std::string_view ; columnNameRegexp = """", . size_t ; nRows = 5, . size_t ; nMaxCollectionElements = 10 . ). inline . Provides a representation of the columns in the dataset. ; Parameters. [in]columnNameRegexpA regular expression to select the columns. ; [in]nRowsNumber of events for each column to be displayed. ; [in]nMaxCollectionElementsMaximum number of collection elements to display per row. . Returnsthe RDisplay instance wrapped in a RResultPtr.; The existing columns are matched against the regular expression. If the string provided is empty, all columns are selected. See the previous overloads for further details. ; Definition at line 3075 of file RInterface.hxx. ◆ Fill(). template<typename Proxied , typename DataSource = void> . template<typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename T > . RResultPtr< std::decay_t< T > > ROOT::RDF::RInterface< Proxied, DataSource >::Fill ; (; T && ; model, . const ColumnNames_t & ; columnList . ). inline . Return an object of type T on which T::Fill will be called once per event (lazy action). ; Type T must provide at least:; a copy-constructor; a Fill method that accepts as many arguments and with same types as the column names passed as columnList (these types can also be passed as template parameters to this method); a Merge method with signature Merge(TCollection *) or Merge(const std::vector<T *>&) that merges the objects ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:67020,Integrability,wrap,wrapped,67020,"s and with same types as the column names passed as columnList (these types can also be passed as template parameters to this method); a Merge method with signature Merge(TCollection *) or Merge(const std::vector<T *>&) that merges the objects passed as argument into the object on which Merge was called (an analogous of TH1::Merge). Note that if the signature that takes a TCollection* is used, then T must inherit from TObject (to allow insertion in the TCollection*). Template Parameters. FirstColumnThe first type of the column the values of which are used to fill the object. Inferred together with OtherColumns if not present. ; OtherColumnsA list of the other types of the columns the values of which are used to fill the object. ; TThe type of the object to fill. Automatically deduced. . Parameters. [in]modelThe model to be considered to build the new return value. ; [in]columnListA list containing the names of the columns that will be passed when calling Fill . Returnsthe filled object wrapped in a RResultPtr.; The user gives up ownership of the model object. The list of column names to be used for filling must always be specified. This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; MyClass obj;; // Deduce column types (this invocation needs jitting internally, and in this case; // MyClass needs to be known to the interpreter); auto myFilledObj = myDf.Fill(obj, {""col0"", ""col1""});; // explicit column types; auto myFilledObj = myDf.Fill<float, float>(obj, {""col0"", ""col1""});. Definition at line 2536 of file RInterface.hxx. ◆ Filter() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename F , std::enable_if_t<!std::is_convertible< F, std::string >::value, int > = 0> . RInterface< RDFDetail::RFilter< F, Proxied >, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Filter ; (; F ; f, . const ColumnNames_t & ; columns = {}, . std::string_view ; name = """" . ). inli",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:68942,Integrability,depend,depend,68942,"olumnNames_t & ; columns = {}, . std::string_view ; name = """" . ). inline . Append a filter to the call graph. ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object. It must return a bool signalling whether the event has passed the selection (true) or not (false). ; [in]columnsNames of the columns/branches in input to the filter function. ; [in]nameOptional name of this filter. See Report. . Returnsthe filter node of the computation graph.; Append a filter node at the point of the call graph corresponding to the object this method is called on. The callable f should not have side-effects (e.g. modification of an external or static variable) to ensure correct results when implicit multi-threading is active.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded. Even if multiple actions or transformations depend on the same filter, it is executed once per entry. If its result is requested more than once, the cached result is served. Example usage:; // C++ callable (function, functor class, lambda...) that takes two parameters of the types of ""x"" and ""y""; auto filtered = df.Filter(myCut, {""x"", ""y""});; ; // String: it must contain valid C++ except that column names can be used instead of variable names; auto filtered = df.Filter(""x*y > 0"");; NoteIf the body of the string expression contains an explicit return statement (even if it is in a nested scope), RDataFrame will not add another one in front of the expression. So this will not work: df.Filter(""Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); but instead this will: df.Filter(""return Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); ; Definition at line 219 of file RInterface.hxx. ◆ Filter() [2/4]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< RDFDetail::RFilter< F, Proxied >, DS_t > ROOT",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:79652,Integrability,wrap,wrapped,79652,");; for (auto &&filtName : filtNames) std::cout << filtName << std::endl;. Definition at line 2827 of file RInterface.hxx. ◆ GetProxiedPtr(). template<typename Proxied , typename DataSource = void> . const std::shared_ptr< Proxied > & ROOT::RDF::RInterface< Proxied, DataSource >::GetProxiedPtr ; (; ); const. inlineprotected . Definition at line 3318 of file RInterface.hxx. ◆ Graph(). template<typename Proxied , typename DataSource = void> . template<typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType> . RResultPtr<::TGraph > ROOT::RDF::RInterface< Proxied, DataSource >::Graph ; (; std::string_view ; x = """", . std::string_view ; y = """" . ). inline . Fill and return a TGraph object (lazy action). ; Template Parameters. XThe type of the column used to fill the x axis. ; YThe type of the column used to fill the y axis. . Parameters. [in]xThe name of the column that will fill the x axis. ; [in]yThe name of the column that will fill the y axis. . Returnsthe TGraph wrapped in a RResultPtr.; Columns can be of a container type (e.g. std::vector<double>), in which case the TGraph is filled with each one of the elements of the container. If Multithreading is enabled, the order in which points are inserted is undefined. If the Graph has to be drawn, it is suggested to the user to sort it on the x before printing. A name and a title to the TGraph is given based on the input column names.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myGraph1 = myDf.Graph(""xValues"", ""yValues"");; // Explicit column types; auto myGraph2 = myDf.Graph<int, float>(""xValues"", ""yValues"");; int; NoteDifferently from other ROOT interfaces, the returned TGraph is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typical source of confusion is that if result histograms go out of scop",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:80455,Integrability,interface,interfaces,80455,"hat will fill the x axis. ; [in]yThe name of the column that will fill the y axis. . Returnsthe TGraph wrapped in a RResultPtr.; Columns can be of a container type (e.g. std::vector<double>), in which case the TGraph is filled with each one of the elements of the container. If Multithreading is enabled, the order in which points are inserted is undefined. If the Graph has to be drawn, it is suggested to the user to sort it on the x before printing. A name and a title to the TGraph is given based on the input column names.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myGraph1 = myDf.Graph(""xValues"", ""yValues"");; // Explicit column types; auto myGraph2 = myDf.Graph<int, float>(""xValues"", ""yValues"");; int; NoteDifferently from other ROOT interfaces, the returned TGraph is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typical source of confusion is that if result histograms go out of scope before the end of the program, ROOT might display a blank canvas). ; Definition at line 2225 of file RInterface.hxx. ◆ GraphAsymmErrors(). template<typename Proxied , typename DataSource = void> . template<typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType, typename EXL = RDFDetail::RInferredType, typename EXH = RDFDetail::RInferredType, typename EYL = RDFDetail::RInferredType, typename EYH = RDFDetail::RInferredType> . RResultPtr<::TGraphAsymmErrors > ROOT::RDF::RInterface< Proxied, DataSource >::GraphAsymmErrors ; (; std::string_view ; x = """", . std::string_view ; y = """", . std::string_view ; exl = """", . std::string_view ; exh = """", . std::string_view ; eyl = """", . std::string_view ; eyh = """" . ). inline . Fill and return a TGraphAsymmErrors object (lazy action). ; Parameters. [in]xThe name of the column that will fill the x axis. ; [in]yThe name of the",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:81810,Integrability,wrap,wrapped,81810,"pename Proxied , typename DataSource = void> . template<typename X = RDFDetail::RInferredType, typename Y = RDFDetail::RInferredType, typename EXL = RDFDetail::RInferredType, typename EXH = RDFDetail::RInferredType, typename EYL = RDFDetail::RInferredType, typename EYH = RDFDetail::RInferredType> . RResultPtr<::TGraphAsymmErrors > ROOT::RDF::RInterface< Proxied, DataSource >::GraphAsymmErrors ; (; std::string_view ; x = """", . std::string_view ; y = """", . std::string_view ; exl = """", . std::string_view ; exh = """", . std::string_view ; eyl = """", . std::string_view ; eyh = """" . ). inline . Fill and return a TGraphAsymmErrors object (lazy action). ; Parameters. [in]xThe name of the column that will fill the x axis. ; [in]yThe name of the column that will fill the y axis. ; [in]exlThe name of the column of X low errors ; [in]exhThe name of the column of X high errors ; [in]eylThe name of the column of Y low errors ; [in]eyhThe name of the column of Y high errors . Returnsthe TGraphAsymmErrors wrapped in a RResultPtr.; Columns can be of a container type (e.g. std::vector<double>), in which case the graph is filled with each one of the elements of the container. If Multithreading is enabled, the order in which points are inserted is undefined.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myGAE1 = myDf.GraphAsymmErrors(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; // Explicit column types; using f = float; auto myGAE2 = myDf.GraphAsymmErrors<f, f, f, f, f, f>(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; f#define f(i)Definition RSha256.hxx:104; NoteDifferently from other ROOT interfaces, the returned TGraphAsymmErrors is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typical source of confusion is that if result histograms go out of scope before the end of t",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:82575,Integrability,interface,interfaces,82575," name of the column of Y low errors ; [in]eyhThe name of the column of Y high errors . Returnsthe TGraphAsymmErrors wrapped in a RResultPtr.; Columns can be of a container type (e.g. std::vector<double>), in which case the graph is filled with each one of the elements of the container. If Multithreading is enabled, the order in which points are inserted is undefined.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myGAE1 = myDf.GraphAsymmErrors(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; // Explicit column types; using f = float; auto myGAE2 = myDf.GraphAsymmErrors<f, f, f, f, f, f>(""xValues"", ""yValues"", ""exl"", ""exh"", ""eyl"", ""eyh"");; f#define f(i)Definition RSha256.hxx:104; NoteDifferently from other ROOT interfaces, the returned TGraphAsymmErrors is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typical source of confusion is that if result histograms go out of scope before the end of the program, ROOT might display a blank canvas). ; Definition at line 2278 of file RInterface.hxx. ◆ Histo1D() [1/5]. template<typename Proxied , typename DataSource = void> . template<typename V = RDFDetail::RInferredType, typename W = RDFDetail::RInferredType> . RResultPtr<::TH1D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo1D ; (; const TH1DModel & ; model, . std::string_view ; vName, . std::string_view ; wName . ). inline . Fill and return a one-dimensional histogram with the weighted values of a column (lazy action). ; Template Parameters. VThe type of the column used to fill the histogram. ; WThe type of the column used as weights. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. ; [in]vNameThe name of the column that will fill the histogram. ; [in]wNameThe name of the column that will provide the weights. . Returnsthe mon",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:83717,Integrability,wrap,wrapped,83717,"r, a typical source of confusion is that if result histograms go out of scope before the end of the program, ROOT might display a blank canvas). ; Definition at line 2278 of file RInterface.hxx. ◆ Histo1D() [1/5]. template<typename Proxied , typename DataSource = void> . template<typename V = RDFDetail::RInferredType, typename W = RDFDetail::RInferredType> . RResultPtr<::TH1D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo1D ; (; const TH1DModel & ; model, . std::string_view ; vName, . std::string_view ; wName . ). inline . Fill and return a one-dimensional histogram with the weighted values of a column (lazy action). ; Template Parameters. VThe type of the column used to fill the histogram. ; WThe type of the column used as weights. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. ; [in]vNameThe name of the column that will fill the histogram. ; [in]wNameThe name of the column that will provide the weights. . Returnsthe monodimensional histogram wrapped in a RResultPtr.; See the description of the first Histo1D() overload for more details. Example usage:; // Deduce column type (this invocation needs jitting internally); auto myHist1 = myDf.Histo1D({""histName"", ""histTitle"", 64u, 0., 128.}, ""myValue"", ""myweight"");; // Explicit column type; auto myHist2 = myDf.Histo1D<float, int>({""histName"", ""histTitle"", 64u, 0., 128.}, ""myValue"", ""myweight"");. Definition at line 1866 of file RInterface.hxx. ◆ Histo1D() [2/5]. template<typename Proxied , typename DataSource = void> . template<typename V , typename W > . RResultPtr<::TH1D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo1D ; (; const TH1DModel & ; model = {"""", """", 128u, 0., 0.}). inline . Fill and return a one-dimensional histogram with the weighted values of a column (lazy action). ; Template Parameters. VThe type of the column used to fill the histogram. ; WThe type of the column used as weights. . Parameters. [in]modelThe returned histogram will be constructed using",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:84767,Integrability,wrap,wrapped,84767,"on of the first Histo1D() overload for more details. Example usage:; // Deduce column type (this invocation needs jitting internally); auto myHist1 = myDf.Histo1D({""histName"", ""histTitle"", 64u, 0., 128.}, ""myValue"", ""myweight"");; // Explicit column type; auto myHist2 = myDf.Histo1D<float, int>({""histName"", ""histTitle"", 64u, 0., 128.}, ""myValue"", ""myweight"");. Definition at line 1866 of file RInterface.hxx. ◆ Histo1D() [2/5]. template<typename Proxied , typename DataSource = void> . template<typename V , typename W > . RResultPtr<::TH1D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo1D ; (; const TH1DModel & ; model = {"""", """", 128u, 0., 0.}). inline . Fill and return a one-dimensional histogram with the weighted values of a column (lazy action). ; Template Parameters. VThe type of the column used to fill the histogram. ; WThe type of the column used as weights. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. . Returnsthe monodimensional histogram wrapped in a RResultPtr.; This overload will use the first two default columns as column names. See the description of the first Histo1D() overload for more details. ; Definition at line 1920 of file RInterface.hxx. ◆ Histo1D() [3/5]. template<typename Proxied , typename DataSource = void> . template<typename V = RDFDetail::RInferredType> . RResultPtr<::TH1D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo1D ; (; const TH1DModel & ; model = {"""", """", 128u, 0., 0.}, . std::string_view ; vName = """" . ). inline . Fill and return a one-dimensional histogram with the values of a column (lazy action). ; Template Parameters. VThe type of the column used to fill the histogram. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. ; [in]vNameThe name of the column that will fill the histogram. . Returnsthe monodimensional histogram wrapped in a RResultPtr.; Columns can be of a container type (e.g. std::vector<double>), in which case the histogram is",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:85641,Integrability,wrap,wrapped,85641,"hts. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. . Returnsthe monodimensional histogram wrapped in a RResultPtr.; This overload will use the first two default columns as column names. See the description of the first Histo1D() overload for more details. ; Definition at line 1920 of file RInterface.hxx. ◆ Histo1D() [3/5]. template<typename Proxied , typename DataSource = void> . template<typename V = RDFDetail::RInferredType> . RResultPtr<::TH1D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo1D ; (; const TH1DModel & ; model = {"""", """", 128u, 0., 0.}, . std::string_view ; vName = """" . ). inline . Fill and return a one-dimensional histogram with the values of a column (lazy action). ; Template Parameters. VThe type of the column used to fill the histogram. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. ; [in]vNameThe name of the column that will fill the histogram. . Returnsthe monodimensional histogram wrapped in a RResultPtr.; Columns can be of a container type (e.g. std::vector<double>), in which case the histogram is filled with each one of the elements of the container. In case multiple columns of container type are provided (e.g. values and weights) they must have the same length for each one of the events (but possibly different lengths between events). This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column type (this invocation needs jitting internally); auto myHist1 = myDf.Histo1D({""histName"", ""histTitle"", 64u, 0., 128.}, ""myColumn"");; // Explicit column type; auto myHist2 = myDf.Histo1D<float>({""histName"", ""histTitle"", 64u, 0., 128.}, ""myColumn"");; NoteDifferently from other ROOT interfaces, the returned histogram is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typical source of confusion is that if result histograms go out of",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:86436,Integrability,interface,interfaces,86436,"meThe name of the column that will fill the histogram. . Returnsthe monodimensional histogram wrapped in a RResultPtr.; Columns can be of a container type (e.g. std::vector<double>), in which case the histogram is filled with each one of the elements of the container. In case multiple columns of container type are provided (e.g. values and weights) they must have the same length for each one of the events (but possibly different lengths between events). This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column type (this invocation needs jitting internally); auto myHist1 = myDf.Histo1D({""histName"", ""histTitle"", 64u, 0., 128.}, ""myColumn"");; // Explicit column type; auto myHist2 = myDf.Histo1D<float>({""histName"", ""histTitle"", 64u, 0., 128.}, ""myColumn"");; NoteDifferently from other ROOT interfaces, the returned histogram is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typical source of confusion is that if result histograms go out of scope before the end of the program, ROOT might display a blank canvas). ; Definition at line 1804 of file RInterface.hxx. ◆ Histo1D() [4/5]. template<typename Proxied , typename DataSource = void> . template<typename V = RDFDetail::RInferredType> . RResultPtr<::TH1D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo1D ; (; std::string_view ; vName). inline . Fill and return a one-dimensional histogram with the values of a column (lazy action). ; Template Parameters. VThe type of the column used to fill the histogram. . Parameters. [in]vNameThe name of the column that will fill the histogram. . Returnsthe monodimensional histogram wrapped in a RResultPtr.; This overload uses a default model histogram TH1D(name, title, 128u, 0., 0.). The ""name"" and ""title"" strings are built starting from the input column name. See the description of the first Histo1D() overload for more details. Example usage:; //",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:87277,Integrability,wrap,wrapped,87277,".}, ""myColumn"");; // Explicit column type; auto myHist2 = myDf.Histo1D<float>({""histName"", ""histTitle"", 64u, 0., 128.}, ""myColumn"");; NoteDifferently from other ROOT interfaces, the returned histogram is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typical source of confusion is that if result histograms go out of scope before the end of the program, ROOT might display a blank canvas). ; Definition at line 1804 of file RInterface.hxx. ◆ Histo1D() [4/5]. template<typename Proxied , typename DataSource = void> . template<typename V = RDFDetail::RInferredType> . RResultPtr<::TH1D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo1D ; (; std::string_view ; vName). inline . Fill and return a one-dimensional histogram with the values of a column (lazy action). ; Template Parameters. VThe type of the column used to fill the histogram. . Parameters. [in]vNameThe name of the column that will fill the histogram. . Returnsthe monodimensional histogram wrapped in a RResultPtr.; This overload uses a default model histogram TH1D(name, title, 128u, 0., 0.). The ""name"" and ""title"" strings are built starting from the input column name. See the description of the first Histo1D() overload for more details. Example usage:; // Deduce column type (this invocation needs jitting internally); auto myHist1 = myDf.Histo1D(""myColumn"");; // Explicit column type; auto myHist2 = myDf.Histo1D<float>(""myColumn"");. Definition at line 1840 of file RInterface.hxx. ◆ Histo1D() [5/5]. template<typename Proxied , typename DataSource = void> . template<typename V = RDFDetail::RInferredType, typename W = RDFDetail::RInferredType> . RResultPtr<::TH1D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo1D ; (; std::string_view ; vName, . std::string_view ; wName . ). inline . Fill and return a one-dimensional histogram with the weighted values of a column (lazy action). ; Template Parameters. VThe type of the column used to fill the histogram. ; WThe type ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:88481,Integrability,wrap,wrapped,88481,"tion of the first Histo1D() overload for more details. Example usage:; // Deduce column type (this invocation needs jitting internally); auto myHist1 = myDf.Histo1D(""myColumn"");; // Explicit column type; auto myHist2 = myDf.Histo1D<float>(""myColumn"");. Definition at line 1840 of file RInterface.hxx. ◆ Histo1D() [5/5]. template<typename Proxied , typename DataSource = void> . template<typename V = RDFDetail::RInferredType, typename W = RDFDetail::RInferredType> . RResultPtr<::TH1D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo1D ; (; std::string_view ; vName, . std::string_view ; wName . ). inline . Fill and return a one-dimensional histogram with the weighted values of a column (lazy action). ; Template Parameters. VThe type of the column used to fill the histogram. ; WThe type of the column used as weights. . Parameters. [in]vNameThe name of the column that will fill the histogram. ; [in]wNameThe name of the column that will provide the weights. . Returnsthe monodimensional histogram wrapped in a RResultPtr.; This overload uses a default model histogram TH1D(name, title, 128u, 0., 0.). The ""name"" and ""title"" strings are built starting from the input column names. See the description of the first Histo1D() overload for more details. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myHist1 = myDf.Histo1D(""myValue"", ""myweight"");; // Explicit column types; auto myHist2 = myDf.Histo1D<float, int>(""myValue"", ""myweight"");. Definition at line 1900 of file RInterface.hxx. ◆ Histo2D() [1/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 , typename V2 , typename W > . RResultPtr<::TH2D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo2D ; (; const TH2DModel & ; model). inline . Definition at line 2015 of file RInterface.hxx. ◆ Histo2D() [2/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType, typena",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:90321,Integrability,wrap,wrapped,90321,"2/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType, typename W = RDFDetail::RInferredType> . RResultPtr<::TH2D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo2D ; (; const TH2DModel & ; model, . std::string_view ; v1Name, . std::string_view ; v2Name, . std::string_view ; wName . ). inline . Fill and return a weighted two-dimensional histogram (lazy action). ; Template Parameters. V1The type of the column used to fill the x axis of the histogram. ; V2The type of the column used to fill the y axis of the histogram. ; WThe type of the column used for the weights of the histogram. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. ; [in]v1NameThe name of the column that will fill the x axis. ; [in]v2NameThe name of the column that will fill the y axis. ; [in]wNameThe name of the column that will provide the weights. . Returnsthe bidimensional histogram wrapped in a RResultPtr.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myHist1 = myDf.Histo2D({""histName"", ""histTitle"", 64u, 0., 128., 32u, -4., 4.}, ""myValueX"", ""myValueY"", ""myWeight"");; // Explicit column types; auto myHist2 = myDf.Histo2D<float, float, double>({""histName"", ""histTitle"", 64u, 0., 128., 32u, -4., 4.}, ""myValueX"", ""myValueY"", ""myWeight"");; See the documentation of the first Histo2D() overload for more details. ; Definition at line 1997 of file RInterface.hxx. ◆ Histo2D() [3/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType> . RResultPtr<::TH2D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo2D ; (; const TH2DModel & ; model, . std::string_view ; v1Name = """", . std::string_view ; v2Name = """" . ). inline .",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:91784,Integrability,wrap,wrapped,91784,", 128., 32u, -4., 4.}, ""myValueX"", ""myValueY"", ""myWeight"");; See the documentation of the first Histo2D() overload for more details. ; Definition at line 1997 of file RInterface.hxx. ◆ Histo2D() [3/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType> . RResultPtr<::TH2D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo2D ; (; const TH2DModel & ; model, . std::string_view ; v1Name = """", . std::string_view ; v2Name = """" . ). inline . Fill and return a two-dimensional histogram (lazy action). ; Template Parameters. V1The type of the column used to fill the x axis of the histogram. ; V2The type of the column used to fill the y axis of the histogram. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. ; [in]v1NameThe name of the column that will fill the x axis. ; [in]v2NameThe name of the column that will fill the y axis. . Returnsthe bidimensional histogram wrapped in a RResultPtr.; Columns can be of a container type (e.g. std::vector<double>), in which case the histogram is filled with each one of the elements of the container. In case multiple columns of container type are provided (e.g. values and weights) they must have the same length for each one of the events (but possibly different lengths between events). This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myHist1 = myDf.Histo2D({""histName"", ""histTitle"", 64u, 0., 128., 32u, -4., 4.}, ""myValueX"", ""myValueY"");; // Explicit column types; auto myHist2 = myDf.Histo2D<float, float>({""histName"", ""histTitle"", 64u, 0., 128., 32u, -4., 4.}, ""myValueX"", ""myValueY"");; NoteDifferently from other ROOT interfaces, the returned histogram is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typica",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:92640,Integrability,interface,interfaces,92640,". . Returnsthe bidimensional histogram wrapped in a RResultPtr.; Columns can be of a container type (e.g. std::vector<double>), in which case the histogram is filled with each one of the elements of the container. In case multiple columns of container type are provided (e.g. values and weights) they must have the same length for each one of the events (but possibly different lengths between events). This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myHist1 = myDf.Histo2D({""histName"", ""histTitle"", 64u, 0., 128., 32u, -4., 4.}, ""myValueX"", ""myValueY"");; // Explicit column types; auto myHist2 = myDf.Histo2D<float, float>({""histName"", ""histTitle"", 64u, 0., 128., 32u, -4., 4.}, ""myValueX"", ""myValueY"");; NoteDifferently from other ROOT interfaces, the returned histogram is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typical source of confusion is that if result histograms go out of scope before the end of the program, ROOT might display a blank canvas). ; Definition at line 1954 of file RInterface.hxx. ◆ Histo3D() [1/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 , typename V2 , typename V3 , typename W > . RResultPtr<::TH3D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo3D ; (; const TH3DModel & ; model). inline . Definition at line 2117 of file RInterface.hxx. ◆ Histo3D() [2/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType, typename V3 = RDFDetail::RInferredType, typename W = RDFDetail::RInferredType> . RResultPtr<::TH3D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo3D ; (; const TH3DModel & ; model, . std::string_view ; v1Name, . std::string_view ; v2Name, . std::string_view ; v3Name, . std::string_view ; wName . ). inli",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:94582,Integrability,wrap,wrapped,94582,"rce >::Histo3D ; (; const TH3DModel & ; model, . std::string_view ; v1Name, . std::string_view ; v2Name, . std::string_view ; v3Name, . std::string_view ; wName . ). inline . Fill and return a three-dimensional histogram (lazy action). ; Template Parameters. V1The type of the column used to fill the x axis of the histogram. Inferred if not present. ; V2The type of the column used to fill the y axis of the histogram. Inferred if not present. ; V3The type of the column used to fill the z axis of the histogram. Inferred if not present. ; WThe type of the column used for the weights of the histogram. Inferred if not present. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. ; [in]v1NameThe name of the column that will fill the x axis. ; [in]v2NameThe name of the column that will fill the y axis. ; [in]v3NameThe name of the column that will fill the z axis. ; [in]wNameThe name of the column that will provide the weights. . Returnsthe tridimensional histogram wrapped in a RResultPtr.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myHist1 = myDf.Histo3D({""name"", ""title"", 64u, 0., 128., 32u, -4., 4., 8u, -2., 2.},; ""myValueX"", ""myValueY"", ""myValueZ"", ""myWeight"");; // Explicit column types; using d_t = double;; auto myHist2 = myDf.Histo3D<d_t, d_t, float, d_t>({""name"", ""title"", 64u, 0., 128., 32u, -4., 4., 8u, -2., 2.},; ""myValueX"", ""myValueY"", ""myValueZ"", ""myWeight"");; See the documentation of the first Histo2D() overload for more details. ; Definition at line 2098 of file RInterface.hxx. ◆ Histo3D() [3/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType, typename V3 = RDFDetail::RInferredType> . RResultPtr<::TH3D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo3D ; (; const TH3D",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:96385,Integrability,wrap,wrapped,96385," RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType, typename V3 = RDFDetail::RInferredType> . RResultPtr<::TH3D > ROOT::RDF::RInterface< Proxied, DataSource >::Histo3D ; (; const TH3DModel & ; model, . std::string_view ; v1Name = """", . std::string_view ; v2Name = """", . std::string_view ; v3Name = """" . ). inline . Fill and return a three-dimensional histogram (lazy action). ; Template Parameters. V1The type of the column used to fill the x axis of the histogram. Inferred if not present. ; V2The type of the column used to fill the y axis of the histogram. Inferred if not present. ; V3The type of the column used to fill the z axis of the histogram. Inferred if not present. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. ; [in]v1NameThe name of the column that will fill the x axis. ; [in]v2NameThe name of the column that will fill the y axis. ; [in]v3NameThe name of the column that will fill the z axis. . Returnsthe tridimensional histogram wrapped in a RResultPtr.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myHist1 = myDf.Histo3D({""name"", ""title"", 64u, 0., 128., 32u, -4., 4., 8u, -2., 2.},; ""myValueX"", ""myValueY"", ""myValueZ"");; // Explicit column types; auto myHist2 = myDf.Histo3D<double, double, float>({""name"", ""title"", 64u, 0., 128., 32u, -4., 4., 8u, -2., 2.},; ""myValueX"", ""myValueY"", ""myValueZ"");; NoteDifferently from other ROOT interfaces, the returned histogram is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typical source of confusion is that if result histograms go out of scope before the end of the program, ROOT might display a blank canvas). ; Definition at line 2049 of file RInterface.hxx. ◆ HistoND() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename FirstColumn , ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:96948,Integrability,interface,interfaces,96948," Inferred if not present. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. ; [in]v1NameThe name of the column that will fill the x axis. ; [in]v2NameThe name of the column that will fill the y axis. ; [in]v3NameThe name of the column that will fill the z axis. . Returnsthe tridimensional histogram wrapped in a RResultPtr.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myHist1 = myDf.Histo3D({""name"", ""title"", 64u, 0., 128., 32u, -4., 4., 8u, -2., 2.},; ""myValueX"", ""myValueY"", ""myValueZ"");; // Explicit column types; auto myHist2 = myDf.Histo3D<double, double, float>({""name"", ""title"", 64u, 0., 128., 32u, -4., 4., 8u, -2., 2.},; ""myValueX"", ""myValueY"", ""myValueZ"");; NoteDifferently from other ROOT interfaces, the returned histogram is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typical source of confusion is that if result histograms go out of scope before the end of the program, ROOT might display a blank canvas). ; Definition at line 2049 of file RInterface.hxx. ◆ HistoND() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename FirstColumn , typename... OtherColumns> . RResultPtr<::THnD > ROOT::RDF::RInterface< Proxied, DataSource >::HistoND ; (; const THnDModel & ; model, . const ColumnNames_t & ; columnList . ). inline . Fill and return an N-dimensional histogram (lazy action). ; Template Parameters. FirstColumnThe first type of the column the values of which are used to fill the object. Inferred if not present. ; OtherColumnsA list of the other types of the columns the values of which are used to fill the object. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. ; [in]columnListA list containing the names of the columns that will be passed when calling Fil",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:98159,Integrability,wrap,wrapped,98159,"before the end of the program, ROOT might display a blank canvas). ; Definition at line 2049 of file RInterface.hxx. ◆ HistoND() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename FirstColumn , typename... OtherColumns> . RResultPtr<::THnD > ROOT::RDF::RInterface< Proxied, DataSource >::HistoND ; (; const THnDModel & ; model, . const ColumnNames_t & ; columnList . ). inline . Fill and return an N-dimensional histogram (lazy action). ; Template Parameters. FirstColumnThe first type of the column the values of which are used to fill the object. Inferred if not present. ; OtherColumnsA list of the other types of the columns the values of which are used to fill the object. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. ; [in]columnListA list containing the names of the columns that will be passed when calling Fill. (N columns for unweighted filling, or N+1 columns for weighted filling) . Returnsthe N-dimensional histogram wrapped in a RResultPtr.; This action is lazy: upon invocation of this method the calculation is booked but not executed. See RResultPtr documentation. Example usage:; auto myFilledObj = myDf.HistoND<float, float, float, float>({""name"",""title"", 4,; {40,40,40,40}, {20.,20.,20.,20.}, {60.,60.,60.,60.}},; {""col0"", ""col1"", ""col2"", ""col3""});. Definition at line 2145 of file RInterface.hxx. ◆ HistoND() [2/2]. template<typename Proxied , typename DataSource = void> . RResultPtr<::THnD > ROOT::RDF::RInterface< Proxied, DataSource >::HistoND ; (; const THnDModel & ; model, . const ColumnNames_t & ; columnList . ). inline . Fill and return an N-dimensional histogram (lazy action). ; Parameters. [in]modelThe returned histogram will be constructed using this as a model. ; [in]columnListA list containing the names of the columns that will be passed when calling Fill (N columns for unweighted filling, or N+1 columns for weighted filling) . Returnsthe N-dimensional histogram wrapped in a RResul",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:99134,Integrability,wrap,wrapped,99134,"rnsthe N-dimensional histogram wrapped in a RResultPtr.; This action is lazy: upon invocation of this method the calculation is booked but not executed. See RResultPtr documentation. Example usage:; auto myFilledObj = myDf.HistoND<float, float, float, float>({""name"",""title"", 4,; {40,40,40,40}, {20.,20.,20.,20.}, {60.,60.,60.,60.}},; {""col0"", ""col1"", ""col2"", ""col3""});. Definition at line 2145 of file RInterface.hxx. ◆ HistoND() [2/2]. template<typename Proxied , typename DataSource = void> . RResultPtr<::THnD > ROOT::RDF::RInterface< Proxied, DataSource >::HistoND ; (; const THnDModel & ; model, . const ColumnNames_t & ; columnList . ). inline . Fill and return an N-dimensional histogram (lazy action). ; Parameters. [in]modelThe returned histogram will be constructed using this as a model. ; [in]columnListA list containing the names of the columns that will be passed when calling Fill (N columns for unweighted filling, or N+1 columns for weighted filling) . Returnsthe N-dimensional histogram wrapped in a RResultPtr.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; auto myFilledObj = myDf.HistoND({""name"",""title"", 4,; {40,40,40,40}, {20.,20.,20.,20.}, {60.,60.,60.,60.}},; {""col0"", ""col1"", ""col2"", ""col3""});. Definition at line 2179 of file RInterface.hxx. ◆ JittedVaryImpl(). template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::JittedVaryImpl ; (; const std::vector< std::string > & ; colNames, . std::string_view ; expression, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName, . bool ; isSingleColumn . ). inlineprivate . Definition at line 3255 of file RInterface.hxx. ◆ Max(). template<typename Proxied , typename DataSource = void> . template<typename T = RDFDetail::RInferredType> . RResultPtr< RDFDetail::MaxReturnType_t< T > > ROOT::RDF::RInterface< Proxied, DataSource >:",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:100423,Integrability,wrap,wrapped,100423,"""col1"", ""col2"", ""col3""});. Definition at line 2179 of file RInterface.hxx. ◆ JittedVaryImpl(). template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::JittedVaryImpl ; (; const std::vector< std::string > & ; colNames, . std::string_view ; expression, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName, . bool ; isSingleColumn . ). inlineprivate . Definition at line 3255 of file RInterface.hxx. ◆ Max(). template<typename Proxied , typename DataSource = void> . template<typename T = RDFDetail::RInferredType> . RResultPtr< RDFDetail::MaxReturnType_t< T > > ROOT::RDF::RInterface< Proxied, DataSource >::Max ; (; std::string_view ; columnName = """"). inline . Return the maximum of processed column values (lazy action). ; Template Parameters. TThe type of the branch/column. . Parameters. [in]columnNameThe name of the branch/column to be treated. . Returnsthe maximum value of the selected column wrapped in a RResultPtr.; If T is not specified, RDataFrame will infer it from the data and just-in-time compile the correct template specialization of this method. If the type of the column is inferred, the return type is double, the type of the column otherwise.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column type (this invocation needs jitting internally); auto maxVal0 = myDf.Max(""values"");; // Explicit column type; auto maxVal1 = myDf.Max<double>(""values"");. Definition at line 2670 of file RInterface.hxx. ◆ Mean(). template<typename Proxied , typename DataSource = void> . template<typename T = RDFDetail::RInferredType> . RResultPtr< double > ROOT::RDF::RInterface< Proxied, DataSource >::Mean ; (; std::string_view ; columnName = """"). inline . Return the mean of processed column values (lazy action). ; Template Parameters. TThe type of the branch/column. . Parameters. [i",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:101515,Integrability,wrap,wrapped,101515,"e data and just-in-time compile the correct template specialization of this method. If the type of the column is inferred, the return type is double, the type of the column otherwise.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column type (this invocation needs jitting internally); auto maxVal0 = myDf.Max(""values"");; // Explicit column type; auto maxVal1 = myDf.Max<double>(""values"");. Definition at line 2670 of file RInterface.hxx. ◆ Mean(). template<typename Proxied , typename DataSource = void> . template<typename T = RDFDetail::RInferredType> . RResultPtr< double > ROOT::RDF::RInterface< Proxied, DataSource >::Mean ; (; std::string_view ; columnName = """"). inline . Return the mean of processed column values (lazy action). ; Template Parameters. TThe type of the branch/column. . Parameters. [in]columnNameThe name of the branch/column to be treated. . Returnsthe mean value of the selected column wrapped in a RResultPtr.; If T is not specified, RDataFrame will infer it from the data and just-in-time compile the correct template specialization of this method.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column type (this invocation needs jitting internally); auto meanVal0 = myDf.Mean(""values"");; // Explicit column type; auto meanVal1 = myDf.Mean<double>(""values"");. Definition at line 2699 of file RInterface.hxx. ◆ Min(). template<typename Proxied , typename DataSource = void> . template<typename T = RDFDetail::RInferredType> . RResultPtr< RDFDetail::MinReturnType_t< T > > ROOT::RDF::RInterface< Proxied, DataSource >::Min ; (; std::string_view ; columnName = """"). inline . Return the minimum of processed column values (lazy action). ; Template Parameters. TThe type of the branch/column. . Parameters. [in]columnNameThe name of the branch/column to be treated. . Returnsthe m",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:102540,Integrability,wrap,wrapped,102540," RResultPtr.; If T is not specified, RDataFrame will infer it from the data and just-in-time compile the correct template specialization of this method.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column type (this invocation needs jitting internally); auto meanVal0 = myDf.Mean(""values"");; // Explicit column type; auto meanVal1 = myDf.Mean<double>(""values"");. Definition at line 2699 of file RInterface.hxx. ◆ Min(). template<typename Proxied , typename DataSource = void> . template<typename T = RDFDetail::RInferredType> . RResultPtr< RDFDetail::MinReturnType_t< T > > ROOT::RDF::RInterface< Proxied, DataSource >::Min ; (; std::string_view ; columnName = """"). inline . Return the minimum of processed column values (lazy action). ; Template Parameters. TThe type of the branch/column. . Parameters. [in]columnNameThe name of the branch/column to be treated. . Returnsthe minimum value of the selected column wrapped in a RResultPtr.; If T is not specified, RDataFrame will infer it from the data and just-in-time compile the correct template specialization of this method. If the type of the column is inferred, the return type is double, the type of the column otherwise.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column type (this invocation needs jitting internally); auto minVal0 = myDf.Min(""values"");; // Explicit column type; auto minVal1 = myDf.Min<double>(""values"");. Definition at line 2640 of file RInterface.hxx. ◆ operator RNode(). template<typename Proxied , typename DataSource = void> . ROOT::RDF::RInterface< Proxied, DataSource >::operator RNode ; (; ); const. inline . Cast any RDataFrame node to a common type ROOT::RDF::RNode. ; Different RDataFrame methods return different C++ types. All nodes, however, can be cast to this common type at the cost of a small performance p",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:103964,Integrability,interface,interface,103964,". Example usage:; // Deduce column type (this invocation needs jitting internally); auto minVal0 = myDf.Min(""values"");; // Explicit column type; auto minVal1 = myDf.Min<double>(""values"");. Definition at line 2640 of file RInterface.hxx. ◆ operator RNode(). template<typename Proxied , typename DataSource = void> . ROOT::RDF::RInterface< Proxied, DataSource >::operator RNode ; (; ); const. inline . Cast any RDataFrame node to a common type ROOT::RDF::RNode. ; Different RDataFrame methods return different C++ types. All nodes, however, can be cast to this common type at the cost of a small performance penalty. This allows, for example, storing RDataFrame nodes in a vector, or passing them around via (non-template, C++11) helper functions. Example usage: // a function that conditionally adds a Range to a RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRanged = MaybeAddRange(df, true);; ROOT::RDF::RInterfaceThe public interface to the RDataFrame federation of classes.Definition RInterface.hxx:113; ROOT::RDF::RInterface::RangeRInterface< RDFDetail::RRange< Proxied >, DS_t > Range(unsigned int begin, unsigned int end, unsigned int stride=1)Creates a node that filters entries based on range: [begin, end).Definition RInterface.hxx:1570; Note that it is not a problem to pass RNode's by value. ; Definition at line 173 of file RInterface.hxx. ◆ operator=() [1/2]. template<typename Proxied , typename DataSource = void> . RInterface & ROOT::RDF::RInterface< Proxied, DataSource >::operator= ; (; const RInterface< Proxied, DataSource > & ; ). default . Copy-assignment operator for RInterface. . ◆ operator=() [2/2]. template<typename Proxied , typename DataSource = void> . RInterface & ROOT::RDF::RInterface< Proxied, DataSource >::operator= ; (; RInterface< Proxied, DataSource > && ; ). default . Move-assignment operator for RInterface. . ◆ Profile1D() [1/3]. template<t",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:106429,Integrability,wrap,wrapped,106429,"::RInferredType, typename V2 = RDFDetail::RInferredType, typename W = RDFDetail::RInferredType> . RResultPtr<::TProfile > ROOT::RDF::RInterface< Proxied, DataSource >::Profile1D ; (; const TProfile1DModel & ; model, . std::string_view ; v1Name, . std::string_view ; v2Name, . std::string_view ; wName . ). inline . Fill and return a one-dimensional profile (lazy action). ; Template Parameters. V1The type of the column the values of which are used to fill the profile. Inferred if not present. ; V2The type of the column the values of which are used to fill the profile. Inferred if not present. ; WThe type of the column the weights of which are used to fill the profile. Inferred if not present. . Parameters. [in]modelThe model to be considered to build the new return value. ; [in]v1NameThe name of the column that will fill the x axis. ; [in]v2NameThe name of the column that will fill the y axis. ; [in]wNameThe name of the column that will provide the weights. . Returnsthe monodimensional profile wrapped in a RResultPtr.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myProf1 = myDf.Profile1D({""profName"", ""profTitle"", 64u, -4., 4.}, ""xValues"", ""yValues"", ""weight"");; // Explicit column types; auto myProf2 = myDf.Profile1D<int, float, double>({""profName"", ""profTitle"", 64u, -4., 4.},; ""xValues"", ""yValues"", ""weight"");; See the first Profile1D() overload for more details. ; Definition at line 2370 of file RInterface.hxx. ◆ Profile1D() [3/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType> . RResultPtr<::TProfile > ROOT::RDF::RInterface< Proxied, DataSource >::Profile1D ; (; const TProfile1DModel & ; model, . std::string_view ; v1Name = """", . std::string_view ; v2Name = """" . ). inline . Fill and return a one-dimensional profi",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:107908,Integrability,wrap,wrapped,107908,"eight"");; See the first Profile1D() overload for more details. ; Definition at line 2370 of file RInterface.hxx. ◆ Profile1D() [3/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType> . RResultPtr<::TProfile > ROOT::RDF::RInterface< Proxied, DataSource >::Profile1D ; (; const TProfile1DModel & ; model, . std::string_view ; v1Name = """", . std::string_view ; v2Name = """" . ). inline . Fill and return a one-dimensional profile (lazy action). ; Template Parameters. V1The type of the column the values of which are used to fill the profile. Inferred if not present. ; V2The type of the column the values of which are used to fill the profile. Inferred if not present. . Parameters. [in]modelThe model to be considered to build the new return value. ; [in]v1NameThe name of the column that will fill the x axis. ; [in]v2NameThe name of the column that will fill the y axis. . Returnsthe monodimensional profile wrapped in a RResultPtr.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myProf1 = myDf.Profile1D({""profName"", ""profTitle"", 64u, -4., 4.}, ""xValues"", ""yValues"");; // Explicit column types; auto myProf2 = myDf.Graph<int, float>({""profName"", ""profTitle"", 64u, -4., 4.}, ""xValues"", ""yValues"");; NoteDifferently from other ROOT interfaces, the returned profile is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typical source of confusion is that if result histograms go out of scope before the end of the program, ROOT might display a blank canvas). ; Definition at line 2325 of file RInterface.hxx. ◆ Profile2D() [1/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 , typename V2 , typename V3 , typename W > . RResultPtr<::TProfile2D > ROOT::RDF::RInterface",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:108390,Integrability,interface,interfaces,108390,"lues of which are used to fill the profile. Inferred if not present. ; V2The type of the column the values of which are used to fill the profile. Inferred if not present. . Parameters. [in]modelThe model to be considered to build the new return value. ; [in]v1NameThe name of the column that will fill the x axis. ; [in]v2NameThe name of the column that will fill the y axis. . Returnsthe monodimensional profile wrapped in a RResultPtr.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myProf1 = myDf.Profile1D({""profName"", ""profTitle"", 64u, -4., 4.}, ""xValues"", ""yValues"");; // Explicit column types; auto myProf2 = myDf.Graph<int, float>({""profName"", ""profTitle"", 64u, -4., 4.}, ""xValues"", ""yValues"");; NoteDifferently from other ROOT interfaces, the returned profile is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typical source of confusion is that if result histograms go out of scope before the end of the program, ROOT might display a blank canvas). ; Definition at line 2325 of file RInterface.hxx. ◆ Profile2D() [1/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 , typename V2 , typename V3 , typename W > . RResultPtr<::TProfile2D > ROOT::RDF::RInterface< Proxied, DataSource >::Profile2D ; (; const TProfile2DModel & ; model). inline . Fill and return a two-dimensional profile (lazy action). ; See the first Profile2D() overload for more details. ; Definition at line 2496 of file RInterface.hxx. ◆ Profile2D() [2/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType, typename V3 = RDFDetail::RInferredType, typename W = RDFDetail::RInferredType> . RResultPtr<::TProfile2D > ROOT::RDF::RInterface< Proxied, DataSource >::Profile2D ; (; const TProfi",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:110469,Integrability,wrap,wrapped,110469," >::Profile2D ; (; const TProfile2DModel & ; model, . std::string_view ; v1Name, . std::string_view ; v2Name, . std::string_view ; v3Name, . std::string_view ; wName . ). inline . Fill and return a two-dimensional profile (lazy action). ; Template Parameters. V1The type of the column used to fill the x axis of the histogram. Inferred if not present. ; V2The type of the column used to fill the y axis of the histogram. Inferred if not present. ; V3The type of the column used to fill the z axis of the histogram. Inferred if not present. ; WThe type of the column used for the weights of the histogram. Inferred if not present. . Parameters. [in]modelThe returned histogram will be constructed using this as a model. ; [in]v1NameThe name of the column that will fill the x axis. ; [in]v2NameThe name of the column that will fill the y axis. ; [in]v3NameThe name of the column that will fill the z axis. ; [in]wNameThe name of the column that will provide the weights. . Returnsthe bidimensional profile wrapped in a RResultPtr.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myProf1 = myDf.Profile2D({""profName"", ""profTitle"", 40, -4, 4, 40, -4, 4, 0, 20},; ""xValues"", ""yValues"", ""zValues"", ""weight"");; // Explicit column types; auto myProf2 = myDf.Profile2D<int, float, double, int>({""profName"", ""profTitle"", 40, -4, 4, 40, -4, 4, 0, 20},; ""xValues"", ""yValues"", ""zValues"", ""weight"");; See the first Profile2D() overload for more details. ; Definition at line 2474 of file RInterface.hxx. ◆ Profile2D() [3/3]. template<typename Proxied , typename DataSource = void> . template<typename V1 = RDFDetail::RInferredType, typename V2 = RDFDetail::RInferredType, typename V3 = RDFDetail::RInferredType> . RResultPtr<::TProfile2D > ROOT::RDF::RInterface< Proxied, DataSource >::Profile2D ; (; const TProfile2DModel & ; model, . std::string_view ; ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:112226,Integrability,wrap,wrapped,112226,"ail::RInferredType, typename V2 = RDFDetail::RInferredType, typename V3 = RDFDetail::RInferredType> . RResultPtr<::TProfile2D > ROOT::RDF::RInterface< Proxied, DataSource >::Profile2D ; (; const TProfile2DModel & ; model, . std::string_view ; v1Name = """", . std::string_view ; v2Name = """", . std::string_view ; v3Name = """" . ). inline . Fill and return a two-dimensional profile (lazy action). ; Template Parameters. V1The type of the column used to fill the x axis of the histogram. Inferred if not present. ; V2The type of the column used to fill the y axis of the histogram. Inferred if not present. ; V3The type of the column used to fill the z axis of the histogram. Inferred if not present. . Parameters. [in]modelThe returned profile will be constructed using this as a model. ; [in]v1NameThe name of the column that will fill the x axis. ; [in]v2NameThe name of the column that will fill the y axis. ; [in]v3NameThe name of the column that will fill the z axis. . Returnsthe bidimensional profile wrapped in a RResultPtr.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myProf1 = myDf.Profile2D({""profName"", ""profTitle"", 40, -4, 4, 40, -4, 4, 0, 20},; ""xValues"", ""yValues"", ""zValues"");; // Explicit column types; auto myProf2 = myDf.Profile2D<int, float, double>({""profName"", ""profTitle"", 40, -4, 4, 40, -4, 4, 0, 20},; ""xValues"", ""yValues"", ""zValues"");; NoteDifferently from other ROOT interfaces, the returned profile is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typical source of confusion is that if result histograms go out of scope before the end of the program, ROOT might display a blank canvas). ; Definition at line 2426 of file RInterface.hxx. ◆ Range() [1/2]. template<typename Proxied , typename DataSource = void> . RInterface< RDFDetail::RRange< Proxied >, DS_t > ROO",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:112774,Integrability,interface,interfaces,112774," type of the column used to fill the z axis of the histogram. Inferred if not present. . Parameters. [in]modelThe returned profile will be constructed using this as a model. ; [in]v1NameThe name of the column that will fill the x axis. ; [in]v2NameThe name of the column that will fill the y axis. ; [in]v3NameThe name of the column that will fill the z axis. . Returnsthe bidimensional profile wrapped in a RResultPtr.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto myProf1 = myDf.Profile2D({""profName"", ""profTitle"", 40, -4, 4, 40, -4, 4, 0, 20},; ""xValues"", ""yValues"", ""zValues"");; // Explicit column types; auto myProf2 = myDf.Profile2D<int, float, double>({""profName"", ""profTitle"", 40, -4, 4, 40, -4, 4, 0, 20},; ""xValues"", ""yValues"", ""zValues"");; NoteDifferently from other ROOT interfaces, the returned profile is not associated to gDirectory and the caller is responsible for its lifetime (in particular, a typical source of confusion is that if result histograms go out of scope before the end of the program, ROOT might display a blank canvas). ; Definition at line 2426 of file RInterface.hxx. ◆ Range() [1/2]. template<typename Proxied , typename DataSource = void> . RInterface< RDFDetail::RRange< Proxied >, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Range ; (; unsigned int ; begin, . unsigned int ; end, . unsigned int ; stride = 1 . ). inline . Creates a node that filters entries based on range: [begin, end). ; Parameters. [in]beginInitial entry number considered for this range. ; [in]endFinal entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset. ; [in]strideProcess one entry of the [begin, end) range every stride entries. Must be strictly greater than 0. . Returnsthe first node of the computation graph for which the event loop is limited to a certain r",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:119784,Integrability,wrap,wrapped,119784,"d as an input for the expression. An exception is thrown in case the column to re-define does not already exist.; See DefineSlotEntry() for more information. ; Definition at line 598 of file RInterface.hxx. ◆ Reduce() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName, . const T & ; redIdentity . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. ; [in]redIdentityThe reduced object of each thread is initialized to this value. . Returnsthe reduced quantity wrapped in a RResultPtr. Example usage:; auto sumOfIntColWithOffset = d.Reduce([](int x, int y) { return x + y; }, ""intCol"", 42);; See the description of the first Reduce overload for more information. ; Definition at line 1711 of file RInterface.hxx. ◆ Reduce() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. . Returnsthe reduced quantity wrapped in a ROOT::RDF:RResultPtr.; A reduction takes",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:120729,Integrability,wrap,wrapped,120729,"ialized to this value. . Returnsthe reduced quantity wrapped in a RResultPtr. Example usage:; auto sumOfIntColWithOffset = d.Reduce([](int x, int y) { return x + y; }, ""intCol"", 42);; See the description of the first Reduce overload for more information. ; Definition at line 1711 of file RInterface.hxx. ◆ Reduce() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. . Returnsthe reduced quantity wrapped in a ROOT::RDF:RResultPtr.; A reduction takes two values of a column and merges them into one (e.g. by summing them, taking the maximum, etc). This action performs the specified reduction operation on all processed column values, returning a single value of the same type. The callable f must satisfy the general requirements of a processing function besides having signature T(T,T) where T is the type of column columnName.; The returned reduced value of each thread (e.g. the initial value of a sum) is initialized to a default-constructed T object. This is commonly expected to be the neutral/identity element for the specific reduction operation f (e.g. 0 for a sum, 1 for a product). If a default-constructed T does not satisfy this requirement, users should explicitly specify an initialization value for T by calling the appropriate Reduce overload. Example usage:; auto sumOfIntCol = d.Reduce([](int x, int y) { return x + y; }, ""intCol"");; This action is lazy: upon invocation of this m",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:122098,Integrability,wrap,wrapped,122098,"n besides having signature T(T,T) where T is the type of column columnName.; The returned reduced value of each thread (e.g. the initial value of a sum) is initialized to a default-constructed T object. This is commonly expected to be the neutral/identity element for the specific reduction operation f (e.g. 0 for a sum, 1 for a product). If a default-constructed T does not satisfy this requirement, users should explicitly specify an initialization value for T by calling the appropriate Reduce overload. Example usage:; auto sumOfIntCol = d.Reduce([](int x, int y) { return x + y; }, ""intCol"");; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. ; Definition at line 1688 of file RInterface.hxx. ◆ Report(). template<typename Proxied , typename DataSource = void> . RResultPtr< RCutFlowReport > ROOT::RDF::RInterface< Proxied, DataSource >::Report ; (; ). inline . Gather filtering statistics. ; Returnsthe resulting RCutFlowReport instance wrapped in a RResultPtr.; Calling Report on the main RDataFrame object gathers stats for all named filters in the call graph. Calling this method on a stored chain state (i.e. a graph node different from the first) gathers the stats for all named filters in the chain section between the original RDataFrame and that node (included). Stats are gathered in the same order as the named filters have been added to the graph. A RResultPtr<RCutFlowReport> is returned to allow inspection of the effects cuts had.; This action is lazy: upon invocation of this method the calculation is booked but not executed. See RResultPtr documentation. Example usage:; auto filtered = d.Filter(cut1, {""b1""}, ""Cut1"").Filter(cut2, {""b2""}, ""Cut2"");; auto cutReport = filtered3.Report();; cutReport->Print();; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RIn",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:123965,Integrability,wrap,wraps,123965," Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:219. Definition at line 2792 of file RInterface.hxx. ◆ Snapshot() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RResultPtr< RInterface< RLoopManager > > ROOT::RDF::RInterface< Proxied, DataSource >::Snapshot ; (; std::string_view ; treename, . std::string_view ; filename, . const ColumnNames_t & ; columnList, . const RSnapshotOptions & ; options = RSnapshotOptions() . ). inline . Save selected columns to disk, in a new TTree treename in file filename. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]treenameThe name of the output TTree. ; [in]filenameThe name of the output TFile. ; [in]columnListThe list of names of the columns/branches to be written. ; [in]optionsRSnapshotOptions struct with extra options to pass to TFile and TTree. . Returnsa RDataFrame that wraps the snapshotted dataset.; Support for writing of nested branches is limited (although RDataFrame is able to read them) and dot ('.') characters in input column names will be replaced by underscores ('_') in the branches produced by Snapshot. When writing a variable size array through Snapshot, it is required that the column indicating its size is also written out and it appears before the array in the columnList.; By default, in case of TTree or TChain inputs, Snapshot will try to write out all top-level branches. For other types of inputs, all columns returned by GetColumnNames() will be written out. If friend trees or chains are present, by default all friend top-level branches that have names that do not collide with names of branches in the main TTree/TChain will be written out. Since v6.24, Snapshot will also write out friend branches with the same names of branches in the main TTree/TChain with names of the form <friendname>_<branchname> in order to differentiate them from th",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:128068,Integrability,wrap,wraps,128068,"OptionsA collection of options to steer the creation of the dataset on file.Definition RSnapshotOptions.hxx:22; ROOT::RDF::RSnapshotOptions::fLazybool fLazyDo not start the event loop when Snapshot is called.Definition RSnapshotOptions.hxx:45. Definition at line 1299 of file RInterface.hxx. ◆ Snapshot() [2/4]. template<typename Proxied , typename DataSource = void> . RResultPtr< RInterface< RLoopManager > > ROOT::RDF::RInterface< Proxied, DataSource >::Snapshot ; (; std::string_view ; treename, . std::string_view ; filename, . const ColumnNames_t & ; columnList, . const RSnapshotOptions & ; options = RSnapshotOptions() . ). inline . Save selected columns to disk, in a new TTree treename in file filename. ; Parameters. [in]treenameThe name of the output TTree. ; [in]filenameThe name of the output TFile. ; [in]columnListThe list of names of the columns/branches to be written. ; [in]optionsRSnapshotOptions struct with extra options to pass to TFile and TTree. . Returnsa RDataFrame that wraps the snapshotted dataset.; This function returns a RDataFrame built with the output tree as a source. The types of the columns are automatically inferred and do not need to be specified.; See above for a more complete description and example usages. ; Definition at line 1317 of file RInterface.hxx. ◆ Snapshot() [3/4]. template<typename Proxied , typename DataSource = void> . RResultPtr< RInterface< RLoopManager > > ROOT::RDF::RInterface< Proxied, DataSource >::Snapshot ; (; std::string_view ; treename, . std::string_view ; filename, . std::initializer_list< std::string > ; columnList, . const RSnapshotOptions & ; options = RSnapshotOptions() . ). inline . Save selected columns to disk, in a new TTree treename in file filename. ; Parameters. [in]treenameThe name of the output TTree. ; [in]filenameThe name of the output TFile. ; [in]columnListThe list of names of the columns/branches to be written. ; [in]optionsRSnapshotOptions struct with extra options to pass to TFile and TTree. . R",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:129094,Integrability,wrap,wraps,129094,"t.; This function returns a RDataFrame built with the output tree as a source. The types of the columns are automatically inferred and do not need to be specified.; See above for a more complete description and example usages. ; Definition at line 1317 of file RInterface.hxx. ◆ Snapshot() [3/4]. template<typename Proxied , typename DataSource = void> . RResultPtr< RInterface< RLoopManager > > ROOT::RDF::RInterface< Proxied, DataSource >::Snapshot ; (; std::string_view ; treename, . std::string_view ; filename, . std::initializer_list< std::string > ; columnList, . const RSnapshotOptions & ; options = RSnapshotOptions() . ). inline . Save selected columns to disk, in a new TTree treename in file filename. ; Parameters. [in]treenameThe name of the output TTree. ; [in]filenameThe name of the output TFile. ; [in]columnListThe list of names of the columns/branches to be written. ; [in]optionsRSnapshotOptions struct with extra options to pass to TFile and TTree. . Returnsa RDataFrame that wraps the snapshotted dataset.; This function returns a RDataFrame built with the output tree as a source. The types of the columns are automatically inferred and do not need to be specified.; See above for a more complete description and example usages. ; Definition at line 1415 of file RInterface.hxx. ◆ Snapshot() [4/4]. template<typename Proxied , typename DataSource = void> . RResultPtr< RInterface< RLoopManager > > ROOT::RDF::RInterface< Proxied, DataSource >::Snapshot ; (; std::string_view ; treename, . std::string_view ; filename, . std::string_view ; columnNameRegexp = """", . const RSnapshotOptions & ; options = RSnapshotOptions() . ). inline . Save selected columns to disk, in a new TTree treename in file filename. ; Parameters. [in]treenameThe name of the output TTree. ; [in]filenameThe name of the output TFile. ; [in]columnNameRegexpThe regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:130338,Integrability,wrap,wraps,130338," usages. ; Definition at line 1415 of file RInterface.hxx. ◆ Snapshot() [4/4]. template<typename Proxied , typename DataSource = void> . RResultPtr< RInterface< RLoopManager > > ROOT::RDF::RInterface< Proxied, DataSource >::Snapshot ; (; std::string_view ; treename, . std::string_view ; filename, . std::string_view ; columnNameRegexp = """", . const RSnapshotOptions & ; options = RSnapshotOptions() . ). inline . Save selected columns to disk, in a new TTree treename in file filename. ; Parameters. [in]treenameThe name of the output TTree. ; [in]filenameThe name of the output TFile. ; [in]columnNameRegexpThe regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if they are not specified. The dialect supported is PCRE via the TPRegexp class. An empty string signals the selection of all columns. ; [in]optionsRSnapshotOptions struct with extra options to pass to TFile and TTree . Returnsa RDataFrame that wraps the snapshotted dataset.; This function returns a RDataFrame built with the output tree as a source. The types of the columns are automatically inferred and do not need to be specified.; See above for a more complete description and example usages. ; Definition at line 1375 of file RInterface.hxx. ◆ SnapshotImpl(). template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RResultPtr< RInterface< RLoopManager > > ROOT::RDF::RInterface< Proxied, DataSource >::SnapshotImpl ; (; std::string_view ; fullTreeName, . std::string_view ; filename, . const ColumnNames_t & ; columnList, . const RSnapshotOptions & ; options . ). inlineprivate . Definition at line 3159 of file RInterface.hxx. ◆ Stats() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename V = RDFDetail::RInferredType, typename W = RDFDetail::RInferredType> . RResultPtr< TStatistic > ROOT::RDF::RInterface< Proxied, DataSource >::Stats ; (; std::string_view ; value, ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:131743,Integrability,wrap,wrapped,131743,"... ColumnTypes> . RResultPtr< RInterface< RLoopManager > > ROOT::RDF::RInterface< Proxied, DataSource >::SnapshotImpl ; (; std::string_view ; fullTreeName, . std::string_view ; filename, . const ColumnNames_t & ; columnList, . const RSnapshotOptions & ; options . ). inlineprivate . Definition at line 3159 of file RInterface.hxx. ◆ Stats() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename V = RDFDetail::RInferredType, typename W = RDFDetail::RInferredType> . RResultPtr< TStatistic > ROOT::RDF::RInterface< Proxied, DataSource >::Stats ; (; std::string_view ; value, . std::string_view ; weight . ). inline . Return a TStatistic object, filled once per event (lazy action). ; Template Parameters. VThe type of the value column ; WThe type of the weight column . Parameters. [in]valueThe name of the column with the values to fill the statistics with. ; [in]weightThe name of the column with the weights to fill the statistics with. . Returnsthe filled TStatistic object wrapped in a RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto stats0 = myDf.Stats(""values"", ""weights"");; // Explicit column types; auto stats1 = myDf.Stats<int, float>(""values"", ""weights"");. Definition at line 2594 of file RInterface.hxx. ◆ Stats() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename V = RDFDetail::RInferredType> . RResultPtr< TStatistic > ROOT::RDF::RInterface< Proxied, DataSource >::Stats ; (; std::string_view ; value = """"). inline . Return a TStatistic object, filled once per event (lazy action). ; Template Parameters. VThe type of the value column . Parameters. [in]valueThe name of the column with the values to fill the statistics with. . Returnsthe filled TStatistic object wrapped in a RResultPtr. Example usage:; // Deduce column type (this invocation needs jitting internally); auto stats0 = myDf.Stats(""values"");; // Explicit column type; auto stats1 = myDf.Stats<float>(""values""",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:132528,Integrability,wrap,wrapped,132528,"ight column . Parameters. [in]valueThe name of the column with the values to fill the statistics with. ; [in]weightThe name of the column with the weights to fill the statistics with. . Returnsthe filled TStatistic object wrapped in a RResultPtr. Example usage:; // Deduce column types (this invocation needs jitting internally); auto stats0 = myDf.Stats(""values"", ""weights"");; // Explicit column types; auto stats1 = myDf.Stats<int, float>(""values"", ""weights"");. Definition at line 2594 of file RInterface.hxx. ◆ Stats() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename V = RDFDetail::RInferredType> . RResultPtr< TStatistic > ROOT::RDF::RInterface< Proxied, DataSource >::Stats ; (; std::string_view ; value = """"). inline . Return a TStatistic object, filled once per event (lazy action). ; Template Parameters. VThe type of the value column . Parameters. [in]valueThe name of the column with the values to fill the statistics with. . Returnsthe filled TStatistic object wrapped in a RResultPtr. Example usage:; // Deduce column type (this invocation needs jitting internally); auto stats0 = myDf.Stats(""values"");; // Explicit column type; auto stats1 = myDf.Stats<float>(""values"");. Definition at line 2562 of file RInterface.hxx. ◆ StdDev(). template<typename Proxied , typename DataSource = void> . template<typename T = RDFDetail::RInferredType> . RResultPtr< double > ROOT::RDF::RInterface< Proxied, DataSource >::StdDev ; (; std::string_view ; columnName = """"). inline . Return the unbiased standard deviation of processed column values (lazy action). ; Template Parameters. TThe type of the branch/column. . Parameters. [in]columnNameThe name of the branch/column to be treated. . Returnsthe standard deviation value of the selected column wrapped in a RResultPtr.; If T is not specified, RDataFrame will infer it from the data and just-in-time compile the correct template specialization of this method.; This action is lazy: upon invocation of this method ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:133304,Integrability,wrap,wrapped,133304,"n a TStatistic object, filled once per event (lazy action). ; Template Parameters. VThe type of the value column . Parameters. [in]valueThe name of the column with the values to fill the statistics with. . Returnsthe filled TStatistic object wrapped in a RResultPtr. Example usage:; // Deduce column type (this invocation needs jitting internally); auto stats0 = myDf.Stats(""values"");; // Explicit column type; auto stats1 = myDf.Stats<float>(""values"");. Definition at line 2562 of file RInterface.hxx. ◆ StdDev(). template<typename Proxied , typename DataSource = void> . template<typename T = RDFDetail::RInferredType> . RResultPtr< double > ROOT::RDF::RInterface< Proxied, DataSource >::StdDev ; (; std::string_view ; columnName = """"). inline . Return the unbiased standard deviation of processed column values (lazy action). ; Template Parameters. TThe type of the branch/column. . Parameters. [in]columnNameThe name of the branch/column to be treated. . Returnsthe standard deviation value of the selected column wrapped in a RResultPtr.; If T is not specified, RDataFrame will infer it from the data and just-in-time compile the correct template specialization of this method.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column type (this invocation needs jitting internally); auto stdDev0 = myDf.StdDev(""values"");; // Explicit column type; auto stdDev1 = myDf.StdDev<double>(""values"");. Definition at line 2727 of file RInterface.hxx. ◆ Sum(). template<typename Proxied , typename DataSource = void> . template<typename T = RDFDetail::RInferredType> . RResultPtr< RDFDetail::SumReturnType_t< T > > ROOT::RDF::RInterface< Proxied, DataSource >::Sum ; (; std::string_view ; columnName = """", . const RDFDetail::SumReturnType_t< T > & ; initValue = RDFDetail::SumReturnType_t<T>{} . ). inline . Return the sum of processed column values (lazy action). ; Template Parameters. TThe type of the branc",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:134511,Integrability,wrap,wrapped,134511,"ion of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column type (this invocation needs jitting internally); auto stdDev0 = myDf.StdDev(""values"");; // Explicit column type; auto stdDev1 = myDf.StdDev<double>(""values"");. Definition at line 2727 of file RInterface.hxx. ◆ Sum(). template<typename Proxied , typename DataSource = void> . template<typename T = RDFDetail::RInferredType> . RResultPtr< RDFDetail::SumReturnType_t< T > > ROOT::RDF::RInterface< Proxied, DataSource >::Sum ; (; std::string_view ; columnName = """", . const RDFDetail::SumReturnType_t< T > & ; initValue = RDFDetail::SumReturnType_t<T>{} . ). inline . Return the sum of processed column values (lazy action). ; Template Parameters. TThe type of the branch/column. . Parameters. [in]columnNameThe name of the branch/column. ; [in]initValueOptional initial value for the sum. If not present, the column values must be default-constructible. . Returnsthe sum of the selected column wrapped in a RResultPtr.; If T is not specified, RDataFrame will infer it from the data and just-in-time compile the correct template specialization of this method. If the type of the column is inferred, the return type is double, the type of the column otherwise.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column type (this invocation needs jitting internally); auto sum0 = myDf.Sum(""values"");; // Explicit column type; auto sum1 = myDf.Sum<double>(""values"");. Definition at line 2759 of file RInterface.hxx. ◆ Take(). template<typename Proxied , typename DataSource = void> . template<typename T , typename COLL = std::vector<T>> . RResultPtr< COLL > ROOT::RDF::RInterface< Proxied, DataSource >::Take ; (; std::string_view ; column = """"). inline . Return a collection of values of a column (lazy action, returns a std::vector by default). ; Template Parameters. TThe type of the column. ;",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:135675,Integrability,wrap,wrapped,135675,"is method. If the type of the column is inferred, the return type is double, the type of the column otherwise.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column type (this invocation needs jitting internally); auto sum0 = myDf.Sum(""values"");; // Explicit column type; auto sum1 = myDf.Sum<double>(""values"");. Definition at line 2759 of file RInterface.hxx. ◆ Take(). template<typename Proxied , typename DataSource = void> . template<typename T , typename COLL = std::vector<T>> . RResultPtr< COLL > ROOT::RDF::RInterface< Proxied, DataSource >::Take ; (; std::string_view ; column = """"). inline . Return a collection of values of a column (lazy action, returns a std::vector by default). ; Template Parameters. TThe type of the column. ; COLLThe type of collection used to store the values. . Parameters. [in]columnThe name of the column to collect the values of. . Returnsthe content of the selected column wrapped in a RResultPtr.; The collection type to be specified for C-style array columns is RVec<T>: in this case the returned collection is a std::vector<RVec<T>>. . Example usage:; // In this case intCol is a std::vector<int>; auto intCol = rdf.Take<int>(""integerColumn"");; // Same content as above but in this case taken as a RVec<int>; auto intColAsRVec = rdf.Take<int, RVec<int>>(""integerColumn"");; // In this case intCol is a std::vector<RVec<int>>, a collection of collections; auto cArrayIntCol = rdf.Take<RVec<int>>(""cArrayInt"");; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. ; Definition at line 1761 of file RInterface.hxx. ◆ Vary() [1/11]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; const std::vector< std::string > & ; colNames, . F && ; expression, . const ColumnNames_t & ; inputCol",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:149264,Integrability,depend,depend,149264,"view ; variationName = """" . ). inline . Register systematic variations for a single existing column using custom variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona callable that evaluates the varied values for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as the tags. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". Vary provides a natural and flexible syntax to define systematic variations that automatically propagate to Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for results that depend on any varied quantity, a map/dictionary of varied results can be produced with ROOT::RDF::Experimental::VariationsFor (see the example below).; The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and values for each of the systematic variations that affected the result (via upstream Filters or via direct or indirect dependencies of the column values on some registered variations). The keys will be a composition of variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt. We automatically obtain three histograms in output (""nominal"", ""pt:up"" and ""pt:down""): auto nominal_hx =; df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Dr",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:149644,Integrability,depend,dependencies,149644,"es for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as the tags. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". Vary provides a natural and flexible syntax to define systematic variations that automatically propagate to Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for results that depend on any varied quantity, a map/dictionary of varied results can be produced with ROOT::RDF::Experimental::VariationsFor (see the example below).; The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and values for each of the systematic variations that affected the result (via upstream Filters or via direct or indirect dependencies of the column values on some registered variations). The keys will be a composition of variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt. We automatically obtain three histograms in output (""nominal"", ""pt:up"" and ""pt:down""): auto nominal_hx =; df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; RDataFrame computes all variations as part of a single loop over the data. In particular, this means that I/O and computation of values shared among variations only happen once for all variations. Thus, the event loop run-time ty",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:149920,Integrability,depend,depends,149920,"n]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". Vary provides a natural and flexible syntax to define systematic variations that automatically propagate to Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for results that depend on any varied quantity, a map/dictionary of varied results can be produced with ROOT::RDF::Experimental::VariationsFor (see the example below).; The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and values for each of the systematic variations that affected the result (via upstream Filters or via direct or indirect dependencies of the column values on some registered variations). The keys will be a composition of variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt. We automatically obtain three histograms in output (""nominal"", ""pt:up"" and ""pt:down""): auto nominal_hx =; df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; RDataFrame computes all variations as part of a single loop over the data. In particular, this means that I/O and computation of values shared among variations only happen once for all variations. Thus, the event loop run-time typically scales much better than linearly with the number of variations.; RDataFrame lazily computes the varied values required to produce the outputs of VariationsFor(). If VariationsFor() was not called for a result, the computations are only run for the nominal case.; See other overloads for examples when variat",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:21397,Modifiability,inherit,inherited,21397,"ng custom variation tags. ;  ; template<typename F > ; RInterface< Proxied, DS_t > Vary (std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, std::size_t nVariations, std::string_view variationName="""");  Register systematic variations for a single existing column using auto-generated variation tags. ;  ; RInterface< Proxied, DS_t > Vary (std::string_view colName, std::string_view expression, const std::vector< std::string > &variationTags, std::string_view variationName="""");  Register systematic variations for a single existing column using custom variation tags. ;  ; RInterface< Proxied, DS_t > Vary (std::string_view colName, std::string_view expression, std::size_t nVariations, std::string_view variationName="""");  Register systematic variations for a single existing column using auto-generated variation tags. ;  ;  Public Member Functions inherited from ROOT::RDF::RInterfaceBase;  RInterfaceBase (RDFDetail::RLoopManager &lm, const RDFInternal::RColumnRegister &colRegister);  ;  RInterfaceBase (std::shared_ptr< RDFDetail::RLoopManager > lm);  ; RDFDescription Describe ();  Return information about the dataframe. ;  ; ColumnNames_t GetColumnNames ();  Returns the names of the available columns. ;  ; std::string GetColumnType (std::string_view column);  Return the type of a given column as a string. ;  ; ColumnNames_t GetDefinedColumnNames ();  Returns the names of the defined columns. ;  ; unsigned int GetNFiles ();  ; unsigned int GetNRuns () const;  Gets the number of event loops run. ;  ; unsigned int GetNSlots () const;  Gets the number of data processing slots. ;  ; RVariationsDescription GetVariations () const;  Return a descriptor for the systematic variations registered in this branch of the computation graph. ;  ; bool HasColumn (std::string_view columnName);  Checks if a column is present in the dataset. ;  . Protected Member Functions;  RInterface (const std::shared_ptr< Proxied > &proxied, RLoopManager &lm, const RDFInternal::RCol",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:22640,Modifiability,inherit,inherited,22640,"ared_ptr< RDFDetail::RLoopManager > lm);  ; RDFDescription Describe ();  Return information about the dataframe. ;  ; ColumnNames_t GetColumnNames ();  Returns the names of the available columns. ;  ; std::string GetColumnType (std::string_view column);  Return the type of a given column as a string. ;  ; ColumnNames_t GetDefinedColumnNames ();  Returns the names of the defined columns. ;  ; unsigned int GetNFiles ();  ; unsigned int GetNRuns () const;  Gets the number of event loops run. ;  ; unsigned int GetNSlots () const;  Gets the number of data processing slots. ;  ; RVariationsDescription GetVariations () const;  Return a descriptor for the systematic variations registered in this branch of the computation graph. ;  ; bool HasColumn (std::string_view columnName);  Checks if a column is present in the dataset. ;  . Protected Member Functions;  RInterface (const std::shared_ptr< Proxied > &proxied, RLoopManager &lm, const RDFInternal::RColumnRegister &colRegister);  ; const std::shared_ptr< Proxied > & GetProxiedPtr () const;  ;  Protected Member Functions inherited from ROOT::RDF::RInterfaceBase; void AddDefaultColumns ();  ; template<typename... ColumnTypes> ; void CheckAndFillDSColumns (ColumnNames_t validCols, TTraits::TypeList< ColumnTypes... > typeList);  ; void CheckIMTDisabled (std::string_view callerName);  ; template<typename ActionTag , typename... ColTypes, typename ActionResultType , typename RDFNode , typename HelperArgType = ActionResultType, std::enable_if_t< RDFInternal::RNeedJitting< ColTypes... >::value, int > = 0> ; RResultPtr< ActionResultType > CreateAction (const ColumnNames_t &columns, const std::shared_ptr< ActionResultType > &r, const std::shared_ptr< HelperArgType > &helperArg, const std::shared_ptr< RDFNode > &proxiedPtr, const int nColumns=-1, const bool vector2RVec=true);  Create RAction object, return RResultPtr for the action Overload for the case in which one or more column types were not specified (RTTI + jitting). ;  ; templat",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:27623,Modifiability,inherit,inherited,27623,"umnNames_t &columnList, const RSnapshotOptions &options);  ; template<bool IsSingleColumn, typename F > ; RInterface< Proxied, DS_t > VaryImpl (const std::vector< std::string > &colNames, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName);  . Private Attributes; std::shared_ptr< Proxied > fProxiedPtr;  Smart pointer to the graph node encapsulated by this RInterface. ;  . Friends; template<typename T , typename W > ; class RInterface;  ; void RDFInternal::ChangeEmptyEntryRange (const RNode &node, std::pair< ULong64_t, ULong64_t > &&newRange);  ; void RDFInternal::ChangeSpec (const RNode &node, ROOT::RDF::Experimental::RDatasetSpec &&spec);  ; class RDFInternal::GraphDrawing::GraphCreatorHelper;  ; void RDFInternal::TriggerRun (RNode node);  ; std::string ROOT::Internal::RDF::GetDataSourceLabel (const RNode &node);  . Additional Inherited Members;  Protected Attributes inherited from ROOT::RDF::RInterfaceBase; RDFInternal::RColumnRegister fColRegister;  Contains the columns defined up to this node. ;  ; RDataSource * fDataSource = nullptr;  Non-owning pointer to a data-source object. Null if no data-source. RLoopManager has ownership of the object. ;  ; std::shared_ptr< ROOT::Detail::RDF::RLoopManager > fLoopManager;  < The RLoopManager at the root of this computation graph. Never null. ;  . #include <ROOT/RDF/RInterface.hxx>. Inheritance diagram for ROOT::RDF::RInterface< Proxied, DataSource >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ DS_t. template<typename Proxied , typename DataSource = void> . using ROOT::RDF::RInterface< Proxied, DataSource >::DS_t = DataSource. private . Definition at line 114 of file RInterface.hxx. ◆ RFilterBase. template<typename Proxied , typename DataSource = void> . using ROOT::RDF::RInterface< Proxied, DataSource >::RFilterBase = RDFDetail::RFilterBase. private . Definiti",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:31363,Modifiability,variab,variable,31363,"ister . ). inlineprotected . Definition at line 3312 of file RInterface.hxx. Member Function Documentation. ◆ Aggregate() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename AccFun , typename MergeFun , typename R = typename TTraits::CallableTraits<AccFun>::ret_type, typename ArgTypes = typename TTraits::CallableTraits<AccFun>::arg_types, typename ArgTypesNoDecay = typename TTraits::CallableTraits<AccFun>::arg_types_nodecay, typename U = TTraits::TakeFirstParameter_t<ArgTypes>, typename T = TTraits::TakeFirstParameter_t<TTraits::RemoveFirstParameter_t<ArgTypes>>> . RResultPtr< U > ROOT::RDF::RInterface< Proxied, DataSource >::Aggregate ; (; AccFun ; aggregator, . MergeFun ; merger, . std::string_view ; columnName, . const U & ; aggIdentity . ). inline . Execute a user-defined accumulation operation on the processed column values in each processing slot. ; Template Parameters. FThe type of the aggregator callable. Automatically deduced. ; UThe type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]aggregatorA callable with signature U(U,T) or void(U&,T), where T is the type of the column, U is the type of the aggregator variable ; [in]mergerA callable with signature U(U,U) or void(std::vector<U>&) used to merge the results of the accumulations of each thread ; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. ; [in]aggIdentityThe aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted) . Returnsthe result of the aggregation wrapped in a RResultPtr.; An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is initialized to aggIdentity or default-constructed if aggIdentity is omitted. This action calls the aggregator",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:31686,Modifiability,variab,variable,31686,"arg_types, typename ArgTypesNoDecay = typename TTraits::CallableTraits<AccFun>::arg_types_nodecay, typename U = TTraits::TakeFirstParameter_t<ArgTypes>, typename T = TTraits::TakeFirstParameter_t<TTraits::RemoveFirstParameter_t<ArgTypes>>> . RResultPtr< U > ROOT::RDF::RInterface< Proxied, DataSource >::Aggregate ; (; AccFun ; aggregator, . MergeFun ; merger, . std::string_view ; columnName, . const U & ; aggIdentity . ). inline . Execute a user-defined accumulation operation on the processed column values in each processing slot. ; Template Parameters. FThe type of the aggregator callable. Automatically deduced. ; UThe type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]aggregatorA callable with signature U(U,T) or void(U&,T), where T is the type of the column, U is the type of the aggregator variable ; [in]mergerA callable with signature U(U,U) or void(std::vector<U>&) used to merge the results of the accumulations of each thread ; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. ; [in]aggIdentityThe aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted) . Returnsthe result of the aggregation wrapped in a RResultPtr.; An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is initialized to aggIdentity or default-constructed if aggIdentity is omitted. This action calls the aggregator callable for each processed entry, passing in the aggregator variable and the value of the column columnName. If the signature is U(U,T) the aggregator variable is then copy-assigned the result of the execution of the callable. Otherwise the signature of aggregator must be void(U&,T).; The merger callable is used to merge the partial accumulation results of e",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:31958,Modifiability,variab,variable,31958,"oxied, DataSource >::Aggregate ; (; AccFun ; aggregator, . MergeFun ; merger, . std::string_view ; columnName, . const U & ; aggIdentity . ). inline . Execute a user-defined accumulation operation on the processed column values in each processing slot. ; Template Parameters. FThe type of the aggregator callable. Automatically deduced. ; UThe type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]aggregatorA callable with signature U(U,T) or void(U&,T), where T is the type of the column, U is the type of the aggregator variable ; [in]mergerA callable with signature U(U,U) or void(std::vector<U>&) used to merge the results of the accumulations of each thread ; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. ; [in]aggIdentityThe aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted) . Returnsthe result of the aggregation wrapped in a RResultPtr.; An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is initialized to aggIdentity or default-constructed if aggIdentity is omitted. This action calls the aggregator callable for each processed entry, passing in the aggregator variable and the value of the column columnName. If the signature is U(U,T) the aggregator variable is then copy-assigned the result of the execution of the callable. Otherwise the signature of aggregator must be void(U&,T).; The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions. If its signature is U(U,U) the aggregator variables of each thread are merged two by two. If its signature is void(std::vector<U>& a) it is assumed that it merges all aggregators in a[0].; This action is lazy: upon",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:32187,Modifiability,variab,variable,32187,"cumulation operation on the processed column values in each processing slot. ; Template Parameters. FThe type of the aggregator callable. Automatically deduced. ; UThe type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]aggregatorA callable with signature U(U,T) or void(U&,T), where T is the type of the column, U is the type of the aggregator variable ; [in]mergerA callable with signature U(U,U) or void(std::vector<U>&) used to merge the results of the accumulations of each thread ; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. ; [in]aggIdentityThe aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted) . Returnsthe result of the aggregation wrapped in a RResultPtr.; An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is initialized to aggIdentity or default-constructed if aggIdentity is omitted. This action calls the aggregator callable for each processed entry, passing in the aggregator variable and the value of the column columnName. If the signature is U(U,T) the aggregator variable is then copy-assigned the result of the execution of the callable. Otherwise the signature of aggregator must be void(U&,T).; The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions. If its signature is U(U,U) the aggregator variables of each thread are merged two by two. If its signature is void(std::vector<U>& a) it is assumed that it merges all aggregators in a[0].; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; Example usage: auto aggregator = [](double acc, double x) { return acc * x; };; ROO",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:32231,Modifiability,variab,variable,32231,"ers. FThe type of the aggregator callable. Automatically deduced. ; UThe type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]aggregatorA callable with signature U(U,T) or void(U&,T), where T is the type of the column, U is the type of the aggregator variable ; [in]mergerA callable with signature U(U,U) or void(std::vector<U>&) used to merge the results of the accumulations of each thread ; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. ; [in]aggIdentityThe aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted) . Returnsthe result of the aggregation wrapped in a RResultPtr.; An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is initialized to aggIdentity or default-constructed if aggIdentity is omitted. This action calls the aggregator callable for each processed entry, passing in the aggregator variable and the value of the column columnName. If the signature is U(U,T) the aggregator variable is then copy-assigned the result of the execution of the callable. Otherwise the signature of aggregator must be void(U&,T).; The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions. If its signature is U(U,U) the aggregator variables of each thread are merged two by two. If its signature is void(std::vector<U>& a) it is assumed that it merges all aggregators in a[0].; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; Example usage: auto aggregator = [](double acc, double x) { return acc * x; };; ROOT::EnableImplicitMT();; // If multithread is enabled, the aggregator function will be called b",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:32414,Modifiability,variab,variable,32414,"onstructible, copy-constructible and copy-assignable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]aggregatorA callable with signature U(U,T) or void(U&,T), where T is the type of the column, U is the type of the aggregator variable ; [in]mergerA callable with signature U(U,U) or void(std::vector<U>&) used to merge the results of the accumulations of each thread ; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. ; [in]aggIdentityThe aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted) . Returnsthe result of the aggregation wrapped in a RResultPtr.; An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is initialized to aggIdentity or default-constructed if aggIdentity is omitted. This action calls the aggregator callable for each processed entry, passing in the aggregator variable and the value of the column columnName. If the signature is U(U,T) the aggregator variable is then copy-assigned the result of the execution of the callable. Otherwise the signature of aggregator must be void(U&,T).; The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions. If its signature is U(U,U) the aggregator variables of each thread are merged two by two. If its signature is void(std::vector<U>& a) it is assumed that it merges all aggregators in a[0].; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; Example usage: auto aggregator = [](double acc, double x) { return acc * x; };; ROOT::EnableImplicitMT();; // If multithread is enabled, the aggregator function will be called by more threads; // and will produce a vector of partial accumulators.; // The merger function performs the final aggregation",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:32505,Modifiability,variab,variable,32505,"utomatically deduced. . Parameters. [in]aggregatorA callable with signature U(U,T) or void(U&,T), where T is the type of the column, U is the type of the aggregator variable ; [in]mergerA callable with signature U(U,U) or void(std::vector<U>&) used to merge the results of the accumulations of each thread ; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. ; [in]aggIdentityThe aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted) . Returnsthe result of the aggregation wrapped in a RResultPtr.; An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is initialized to aggIdentity or default-constructed if aggIdentity is omitted. This action calls the aggregator callable for each processed entry, passing in the aggregator variable and the value of the column columnName. If the signature is U(U,T) the aggregator variable is then copy-assigned the result of the execution of the callable. Otherwise the signature of aggregator must be void(U&,T).; The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions. If its signature is U(U,U) the aggregator variables of each thread are merged two by two. If its signature is void(std::vector<U>& a) it is assumed that it merges all aggregators in a[0].; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; Example usage: auto aggregator = [](double acc, double x) { return acc * x; };; ROOT::EnableImplicitMT();; // If multithread is enabled, the aggregator function will be called by more threads; // and will produce a vector of partial accumulators.; // The merger function performs the final aggregation of these partial results.; auto merger = [](std::vector<double> &accumulators) {; for (auto i : ROOT::TSeqU(1u, accumulators.size",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:32825,Modifiability,variab,variables,32825,"; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. ; [in]aggIdentityThe aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted) . Returnsthe result of the aggregation wrapped in a RResultPtr.; An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is initialized to aggIdentity or default-constructed if aggIdentity is omitted. This action calls the aggregator callable for each processed entry, passing in the aggregator variable and the value of the column columnName. If the signature is U(U,T) the aggregator variable is then copy-assigned the result of the execution of the callable. Otherwise the signature of aggregator must be void(U&,T).; The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions. If its signature is U(U,U) the aggregator variables of each thread are merged two by two. If its signature is void(std::vector<U>& a) it is assumed that it merges all aggregators in a[0].; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; Example usage: auto aggregator = [](double acc, double x) { return acc * x; };; ROOT::EnableImplicitMT();; // If multithread is enabled, the aggregator function will be called by more threads; // and will produce a vector of partial accumulators.; // The merger function performs the final aggregation of these partial results.; auto merger = [](std::vector<double> &accumulators) {; for (auto i : ROOT::TSeqU(1u, accumulators.size())) {; accumulators[0] *= accumulators[i];; }; };; ; // The accumulator is initialized at this value by every thread.; double initValue = 1.;; ; // Multiplies all elements of the column ""x""; auto result = d.Aggregate(aggregator, merger, ""x"", initValue);; d#define d(i)Definition RSha256.hxx:102; sizesize_",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:35518,Modifiability,variab,variable,35518,"id EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539. Definition at line 2879 of file RInterface.hxx. ◆ Aggregate() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename AccFun , typename MergeFun , typename R = typename TTraits::CallableTraits<AccFun>::ret_type, typename ArgTypes = typename TTraits::CallableTraits<AccFun>::arg_types, typename U = TTraits::TakeFirstParameter_t<ArgTypes>, typename T = TTraits::TakeFirstParameter_t<TTraits::RemoveFirstParameter_t<ArgTypes>>> . RResultPtr< U > ROOT::RDF::RInterface< Proxied, DataSource >::Aggregate ; (; AccFun ; aggregator, . MergeFun ; merger, . std::string_view ; columnName = """" . ). inline . Execute a user-defined accumulation operation on the processed column values in each processing slot. ; Template Parameters. FThe type of the aggregator callable. Automatically deduced. ; UThe type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]aggregatorA callable with signature U(U,T) or void(U,T), where T is the type of the column, U is the type of the aggregator variable ; [in]mergerA callable with signature U(U,U) or void(std::vector<U>&) used to merge the results of the accumulations of each thread ; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. . Returnsthe result of the aggregation wrapped in a RResultPtr.; See previous Aggregate overload for more information. ; Definition at line 2913 of file RInterface.hxx. ◆ Alias(). template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Alias ; (; std::string_view ; alias, . std::string_view ; columnName . ). inline . Allow to refer to a column with ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:35840,Modifiability,variab,variable,35840,"name TTraits::CallableTraits<AccFun>::ret_type, typename ArgTypes = typename TTraits::CallableTraits<AccFun>::arg_types, typename U = TTraits::TakeFirstParameter_t<ArgTypes>, typename T = TTraits::TakeFirstParameter_t<TTraits::RemoveFirstParameter_t<ArgTypes>>> . RResultPtr< U > ROOT::RDF::RInterface< Proxied, DataSource >::Aggregate ; (; AccFun ; aggregator, . MergeFun ; merger, . std::string_view ; columnName = """" . ). inline . Execute a user-defined accumulation operation on the processed column values in each processing slot. ; Template Parameters. FThe type of the aggregator callable. Automatically deduced. ; UThe type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]aggregatorA callable with signature U(U,T) or void(U,T), where T is the type of the column, U is the type of the aggregator variable ; [in]mergerA callable with signature U(U,U) or void(std::vector<U>&) used to merge the results of the accumulations of each thread ; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. . Returnsthe result of the aggregation wrapped in a RResultPtr.; See previous Aggregate overload for more information. ; Definition at line 2913 of file RInterface.hxx. ◆ Alias(). template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Alias ; (; std::string_view ; alias, . std::string_view ; columnName . ). inline . Allow to refer to a column with a different name. ; Parameters. [in]aliasname of the column alias ; [in]columnNameof the column to be aliased . Returnsthe first node of the computation graph for which the alias is available.; Aliasing an alias is supported. Example usage:; auto df_with_alias = df.Alias(""simple_name"", ""very_long&complex_name!!!"");. Definition at line 1214 of file RInterface.",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:38171,Modifiability,inherit,inherit,38171,"e . Book execution of a custom action using a user-defined helper object. ; Template Parameters. FirstColumnThe type of the first column used by this action. Inferred together with OtherColumns if not present. ; OtherColumnsA list of the types of the other columns used by this action ; HelperThe type of the user-defined helper. See below for the required interface it should expose. . Parameters. [in]helperThe Action Helper to be scheduled. ; [in]columnsThe names of the columns on which the helper acts. . Returnsthe result of the helper wrapped in a RResultPtr.; This method books a custom action for execution. The behavior of the action is completely dependent on the Helper object provided by the caller. The required interface for the helper is described below (more methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):. Mandatory interface. Helper must publicly inherit from ROOT::Detail::RDF::RActionImpl<Helper>; Helper::Result_t: public alias for the type of the result of this action helper. Result_t must be default-constructible.; Helper(Helper &&): a move-constructor is required. Copy-constructors are discouraged.; std::shared_ptr<Result_t> GetResultPtr() const: return a shared_ptr to the result of this action (of type Result_t). The RResultPtr returned by Book will point to this object. Note that this method can be called before Initialize(), because the RResultPtr is constructed before the event loop is started.; void Initialize(): this method is called once before starting the event-loop. Useful for setup operations. It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper, or copies of it, might be used for multiple event loops (e.g. in the presence of systematic variations).; void InitTask(TTreeReader *, unsigned int slot): each working thread shall call this method during the event loop, before processing a batch of entries. The point",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:42805,Modifiability,variab,variable,42805,"Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; This action returns a new RDataFrame object, completely detached from the originating RDataFrame. The new dataframe only contains the cached columns and stores their content in memory for fast, zero-copy subsequent access.; Use Cache if you know you will only need a subset of the (Filtered) data that fits in memory and that will be accessed many times.; NoteCache will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; Types inferred and columns selected with a regexp (this invocation relies on jitting): auto cache_all_cols_df = df.Cache(myRegexp);. Definition at line 1459 of file RInterface.hxx. ◆ Cache() [2/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory . Returnsa RDataFrame that wraps the cached dataset.; See the previous overload",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:49853,Modifiability,variab,variable,49853,"plate<typename Proxied , typename DataSource = void> . template<typename F , typename std::enable_if_t<!std::is_convertible< F, std::string >::value, int > = 0> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Define ; (; std::string_view ; name, . F ; expression, . const ColumnNames_t & ; columns = {} . ). inline . Define a new column. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionFunction, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer function. . Returnsthe first node of the computation graph for which the new quantity is defined.; Define a column that will be visible from all subsequent nodes of the functional chain. The expression is only evaluated for entries that pass all the preceding filters. A new variable is created called name, accessible as if it was contained in the dataset from subsequent transformations/actions.; Use cases include:; caching the results of complex calculations for easy and efficient multiple access; extraction of quantities of interest from complex objects. An exception is thrown if the name of the new column is already in use in this branch of the computation graph. Example usage:; // assuming a function with signature:; double myComplexCalculation(const RVec<float> &muon_pts);; // we can pass it directly to Define; auto df_with_define = df.Define(""newColumn"", myComplexCalculation, {""muon_pts""});; // alternatively, we can pass the body of the function as a string, as in Filter:; auto df_with_define = df.Define(""newColumn"", ""x*x + y*y"");; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; NoteIf the body of the string expression contains an explicit return statement (even if it is in a nested scope), RDataFrame will not add another one",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:51740,Modifiability,variab,variable,51740,"x:1529; NoteIf the body of the string expression contains an explicit return statement (even if it is in a nested scope), RDataFrame will not add another one in front of the expression. So this will not work: df.Define(""x2"", ""Map(v, [](float e) { return e*e; })""); but instead this will: df.Define(""x2"", ""return Map(v, [](float e) { return e*e; })""); ; Definition at line 441 of file RInterface.hxx. ◆ Define() [2/2]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Define ; (; std::string_view ; name, . std::string_view ; expression . ). inline . Define a new column. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionAn expression in C++ which represents the defined value . Returnsthe first node of the computation graph for which the new quantity is defined.; The expression is just-in-time compiled and used to produce the column entries. It must be valid C++ syntax in which variable names are substituted with the names of branches/columns.; NoteIf the body of the string expression contains an explicit return statement (even if it is in a nested scope), RDataFrame will not add another one in front of the expression. So this will not work: df.Define(""x2"", ""Map(v, [](float e) { return e*e; })""); but instead this will: df.Define(""x2"", ""return Map(v, [](float e) { return e*e; })""). Refer to the first overload of this method for the full documentation. ; Definition at line 528 of file RInterface.hxx. ◆ DefineImpl() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename DefineType , typename RetType = typename TTraits::CallableTraits<F>::ret_type> . std::enable_if_t< std::is_default_constructible< RetType >::value, RInterface< Proxied, DS_t > > ROOT::RDF::RInterface< Proxied, DataSource >::DefineImpl ; (; std::string_view ; name, . F && ; expression, . const ColumnNames_t & ; columns, . const std::string & ; where . ). inlineprivate . ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:56302,Modifiability,variab,variable,56302,"Interface.hxx:735; ROOT::RDF::RSampleInfoThis type represents a sample identifier, to be used in conjunction with RDataFrame features such as ...Definition RSampleInfo.hxx:35. Definition at line 735 of file RInterface.hxx. ◆ DefinePerSample() [2/2]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefinePerSample ; (; std::string_view ; name, . std::string_view ; expression . ). inline . Define a new column that is updated when the input sample changes. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionA valid C++ expression as a string, which will be used to compute the defined value. . Returnsthe first node of the computation graph for which the new quantity is defined.; The expression is just-in-time compiled and used to produce the column entries. It must be valid C++ syntax and the usage of the special variable names rdfslot_ and rdfsampleinfo_ is permitted, where these variables will take the same values as the slot and id parameters described at the DefinePerSample(std::string_view name, F expression) overload. See the documentation of that overload for more information. Example usage:; df = ROOT.RDataFrame('mytree', ['sample1.root','sample2.root']); df.DefinePerSample('weightbysample', 'rdfsampleinfo_.Contains(""sample1"") ? 1.0f : 2.0f'); NoteIf you have declared some C++ function to the interpreter, the correct syntax to call that function with this overload of DefinePerSample is by calling it explicitly with the special names rdfslot_ and rdfsampleinfo_ as input parameters. This is for example the correct way to call this overload when working in PyROOT: ROOT.gInterpreter.Declare(; """"""; float weights(unsigned int slot, const ROOT::RDF::RSampleInfo &id){; return id.Contains(""sample1"") ? 1.0f : 2.0f;; }; """"""); df = ROOT.RDataFrame(""mytree"", [""sample1.root"",""sample2.root""]); df.DefinePerSample(""weightsbysample"", ""weights(rdfslot_, rdfsampleinfo_)""). Different",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:56371,Modifiability,variab,variables,56371,"Interface.hxx:735; ROOT::RDF::RSampleInfoThis type represents a sample identifier, to be used in conjunction with RDataFrame features such as ...Definition RSampleInfo.hxx:35. Definition at line 735 of file RInterface.hxx. ◆ DefinePerSample() [2/2]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefinePerSample ; (; std::string_view ; name, . std::string_view ; expression . ). inline . Define a new column that is updated when the input sample changes. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionA valid C++ expression as a string, which will be used to compute the defined value. . Returnsthe first node of the computation graph for which the new quantity is defined.; The expression is just-in-time compiled and used to produce the column entries. It must be valid C++ syntax and the usage of the special variable names rdfslot_ and rdfsampleinfo_ is permitted, where these variables will take the same values as the slot and id parameters described at the DefinePerSample(std::string_view name, F expression) overload. See the documentation of that overload for more information. Example usage:; df = ROOT.RDataFrame('mytree', ['sample1.root','sample2.root']); df.DefinePerSample('weightbysample', 'rdfsampleinfo_.Contains(""sample1"") ? 1.0f : 2.0f'); NoteIf you have declared some C++ function to the interpreter, the correct syntax to call that function with this overload of DefinePerSample is by calling it explicitly with the special names rdfslot_ and rdfsampleinfo_ as input parameters. This is for example the correct way to call this overload when working in PyROOT: ROOT.gInterpreter.Declare(; """"""; float weights(unsigned int slot, const ROOT::RDF::RSampleInfo &id){; return id.Contains(""sample1"") ? 1.0f : 2.0f;; }; """"""); df = ROOT.RDataFrame(""mytree"", [""sample1.root"",""sample2.root""]); df.DefinePerSample(""weightsbysample"", ""weights(rdfslot_, rdfsampleinfo_)""). Different",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:66428,Modifiability,inherit,inherit,66428,"he previous overloads for further details. ; Definition at line 3075 of file RInterface.hxx. ◆ Fill(). template<typename Proxied , typename DataSource = void> . template<typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename T > . RResultPtr< std::decay_t< T > > ROOT::RDF::RInterface< Proxied, DataSource >::Fill ; (; T && ; model, . const ColumnNames_t & ; columnList . ). inline . Return an object of type T on which T::Fill will be called once per event (lazy action). ; Type T must provide at least:; a copy-constructor; a Fill method that accepts as many arguments and with same types as the column names passed as columnList (these types can also be passed as template parameters to this method); a Merge method with signature Merge(TCollection *) or Merge(const std::vector<T *>&) that merges the objects passed as argument into the object on which Merge was called (an analogous of TH1::Merge). Note that if the signature that takes a TCollection* is used, then T must inherit from TObject (to allow insertion in the TCollection*). Template Parameters. FirstColumnThe first type of the column the values of which are used to fill the object. Inferred together with OtherColumns if not present. ; OtherColumnsA list of the other types of the columns the values of which are used to fill the object. ; TThe type of the object to fill. Automatically deduced. . Parameters. [in]modelThe model to be considered to build the new return value. ; [in]columnListA list containing the names of the columns that will be passed when calling Fill . Returnsthe filled object wrapped in a RResultPtr.; The user gives up ownership of the model object. The list of column names to be used for filling must always be specified. This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; MyClass obj;; // Deduce column types (this invocation needs jitting internally, and in this case; // MyClass needs to be",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:68624,Modifiability,variab,variable,68624,"xx. ◆ Filter() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename F , std::enable_if_t<!std::is_convertible< F, std::string >::value, int > = 0> . RInterface< RDFDetail::RFilter< F, Proxied >, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Filter ; (; F ; f, . const ColumnNames_t & ; columns = {}, . std::string_view ; name = """" . ). inline . Append a filter to the call graph. ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object. It must return a bool signalling whether the event has passed the selection (true) or not (false). ; [in]columnsNames of the columns/branches in input to the filter function. ; [in]nameOptional name of this filter. See Report. . Returnsthe filter node of the computation graph.; Append a filter node at the point of the call graph corresponding to the object this method is called on. The callable f should not have side-effects (e.g. modification of an external or static variable) to ensure correct results when implicit multi-threading is active.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded. Even if multiple actions or transformations depend on the same filter, it is executed once per entry. If its result is requested more than once, the cached result is served. Example usage:; // C++ callable (function, functor class, lambda...) that takes two parameters of the types of ""x"" and ""y""; auto filtered = df.Filter(myCut, {""x"", ""y""});; ; // String: it must contain valid C++ except that column names can be used instead of variable names; auto filtered = df.Filter(""x*y > 0"");; NoteIf the body of the string expression contains an explicit return statement (even if it is in a nested scope), RDataFrame will not add another one in front of the expression. So this will not work: df.Filter(""Sum(Map(vec, [](float e) { return e*e > 0.5; }",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:69330,Modifiability,variab,variable,69330,"es in input to the filter function. ; [in]nameOptional name of this filter. See Report. . Returnsthe filter node of the computation graph.; Append a filter node at the point of the call graph corresponding to the object this method is called on. The callable f should not have side-effects (e.g. modification of an external or static variable) to ensure correct results when implicit multi-threading is active.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded. Even if multiple actions or transformations depend on the same filter, it is executed once per entry. If its result is requested more than once, the cached result is served. Example usage:; // C++ callable (function, functor class, lambda...) that takes two parameters of the types of ""x"" and ""y""; auto filtered = df.Filter(myCut, {""x"", ""y""});; ; // String: it must contain valid C++ except that column names can be used instead of variable names; auto filtered = df.Filter(""x*y > 0"");; NoteIf the body of the string expression contains an explicit return statement (even if it is in a nested scope), RDataFrame will not add another one in front of the expression. So this will not work: df.Filter(""Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); but instead this will: df.Filter(""return Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); ; Definition at line 219 of file RInterface.hxx. ◆ Filter() [2/4]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< RDFDetail::RFilter< F, Proxied >, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Filter ; (; F ; f, . const std::initializer_list< std::string > & ; columns . ). inline . Append a filter to the call graph. ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object. It must return a bool signalling whether the event has passed the selection (true) ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:71893,Modifiability,variab,variable,71893,"he call graph. ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object. It must return a bool signalling whether the event has passed the selection (true) or not (false). ; [in]nameOptional name of this filter. See Report. . Returnsthe filter node of the computation graph.; Refer to the first overload of this method for the full documentation. ; Definition at line 242 of file RInterface.hxx. ◆ Filter() [4/4]. template<typename Proxied , typename DataSource = void> . RInterface< RDFDetail::RJittedFilter, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Filter ; (; std::string_view ; expression, . std::string_view ; name = """" . ). inline . Append a filter to the call graph. ; Parameters. [in]expressionThe filter expression in C++ ; [in]nameOptional name of this filter. See Report. . Returnsthe filter node of the computation graph.; The expression is just-in-time compiled and used to filter entries. It must be valid C++ syntax in which variable names are substituted with the names of branches/columns. Example usage:; auto filtered_df = df.Filter(""myCollection.size() > 3"");; auto filtered_name_df = df.Filter(""myCollection.size() > 3"", ""Minumum collection size"");; NoteIf the body of the string expression contains an explicit return statement (even if it is in a nested scope), RDataFrame will not add another one in front of the expression. So this will not work: df.Filter(""Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); but instead this will: df.Filter(""return Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); ; Definition at line 288 of file RInterface.hxx. ◆ FilterAvailable(). template<typename Proxied , typename DataSource = void> . RInterface< RDFDetail::RFilterWithMissingValues< Proxied >, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::FilterAvailable ; (; std::string_view ; column). inline . Discard entries with missing values. ; Parameters. [in]columnColumn name whose entries with missing values should be discarded ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:116593,Modifiability,variab,variable,116593,"ranches in input to the expression. . Returnsthe first node of the computation graph for which the quantity is redefined.; The old value of the column can be used as an input for the expression.; An exception is thrown in case the column to redefine does not already exist. See Define() for more information. ; Definition at line 560 of file RInterface.hxx. ◆ Redefine() [2/2]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Redefine ; (; std::string_view ; name, . std::string_view ; expression . ). inline . Overwrite the value and/or type of an existing column. ; Parameters. [in]nameThe name of the column to redefine. ; [in]expressionAn expression in C++ which represents the defined value . Returnsthe first node of the computation graph for which the new quantity is defined.; The expression is just-in-time compiled and used to produce the column entries. It must be valid C++ syntax in which variable names are substituted with the names of branches/columns.; The old value of the column can be used as an input for the expression. An exception is thrown in case the column to re-define does not already exist.; Aliases cannot be overridden. See the corresponding Define() overload for more information. ; Definition at line 618 of file RInterface.hxx. ◆ RedefineSlot(). template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::RedefineSlot ; (; std::string_view ; name, . F ; expression, . const ColumnNames_t & ; columns = {} . ). inline . Overwrite the value and/or type of an existing column. ; Parameters. [in]nameThe name of the column to redefine. ; [in]expressionFunction, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer func",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:124228,Modifiability,variab,variable,124228,"er > > ROOT::RDF::RInterface< Proxied, DataSource >::Snapshot ; (; std::string_view ; treename, . std::string_view ; filename, . const ColumnNames_t & ; columnList, . const RSnapshotOptions & ; options = RSnapshotOptions() . ). inline . Save selected columns to disk, in a new TTree treename in file filename. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]treenameThe name of the output TTree. ; [in]filenameThe name of the output TFile. ; [in]columnListThe list of names of the columns/branches to be written. ; [in]optionsRSnapshotOptions struct with extra options to pass to TFile and TTree. . Returnsa RDataFrame that wraps the snapshotted dataset.; Support for writing of nested branches is limited (although RDataFrame is able to read them) and dot ('.') characters in input column names will be replaced by underscores ('_') in the branches produced by Snapshot. When writing a variable size array through Snapshot, it is required that the column indicating its size is also written out and it appears before the array in the columnList.; By default, in case of TTree or TChain inputs, Snapshot will try to write out all top-level branches. For other types of inputs, all columns returned by GetColumnNames() will be written out. If friend trees or chains are present, by default all friend top-level branches that have names that do not collide with names of branches in the main TTree/TChain will be written out. Since v6.24, Snapshot will also write out friend branches with the same names of branches in the main TTree/TChain with names of the form <friendname>_<branchname> in order to differentiate them from the branches in the main tree/chain. Writing to a sub-directory; Snapshot supports writing the TTree in a sub-directory inside the TFile. It is sufficient to specify the path to the TTree as part of the TTree name, e.g. df.Snapshot(""subdir/t"", ""f.root"") write TTree t in the sub-directory subdir of file f.root (creating file and sub-d",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:126435,Modifiability,variab,variable,126435,"itMT() has been called) threads will loop over clusters of entries in an undefined order, so Snapshot will produce outputs in which (clusters of) entries will be shuffled with respect to the input TTree. Using such ""shuffled"" TTrees as friends of the original trees would result in wrong associations between entries in the main TTree and entries in the ""shuffled"" friend. Since v6.22, ROOT will error out if such a ""shuffled"" TTree is used in a friendship.; NoteIn case no events are written out (e.g. because no event passes all filters) the behavior of Snapshot in single-thread and multi-thread runs is different: in single-thread runs, Snapshot will write out a TTree with the specified name and zero entries; in multi-thread runs, no TTree object will be written out to disk. Snapshot will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Snapshot(..., {""nbar""}). Example invocations:; // without specifying template parameters (column types automatically deduced); df.Snapshot(""outputTree"", ""outputFile.root"", {""x"", ""y""});; ; // specifying template parameters (""x"" is `int`, ""y"" is `float`); df.Snapshot<int, float>(""outputTree"", ""outputFile.root"", {""x"", ""y""});; To book a Snapshot without triggering the event loop, one needs to set the appropriate flag in RSnapshotOptions: RSnapshotOptions opts;; opts.fLazy = true;; df.Snapshot(""outputTree"", ""outputFile.root"", {""x""}, opts);; ROOT::RDF::RSnapshotOptionsA collection of options to steer the creation of the dataset on file.Definition RSnapshotOptions.hxx:22; ROOT::RDF::RSnapshotOptions::fLazybool fLazyDo not start the event loop when Snapshot is called.Definition RSnapshotOptions.hxx:45. Definition at line 1299 of file RInterface.hxx. ◆ Snapshot() ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:149063,Modifiability,flexible,flexible,149063,"Proxied, DataSource >::Vary ; (; std::string_view ; colName, . F && ; expression, . const ColumnNames_t & ; inputColumns, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName = """" . ). inline . Register systematic variations for a single existing column using custom variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona callable that evaluates the varied values for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as the tags. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". Vary provides a natural and flexible syntax to define systematic variations that automatically propagate to Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for results that depend on any varied quantity, a map/dictionary of varied results can be produced with ROOT::RDF::Experimental::VariationsFor (see the example below).; The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and values for each of the systematic variations that affected the result (via upstream Filters or via direct or indirect dependencies of the column values on some registered variations). The keys will be a composition of variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt. We automatically obtain three histograms in output (""nominal"", ""pt:up"" and ""pt:down""): auto nominal_hx =; df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:24987,Performance,cache,cache,24987,"e > &proxiedPtr, const int=-1);  Create RAction object, return RResultPtr for the action Overload for the case in which all column types were specified (no jitting). ;  ; std::string DescribeDataset () const;  ; ColumnNames_t GetColumnTypeNamesList (const ColumnNames_t &columnList);  ; RDFDetail::RLoopManager * GetLoopManager () const;  ; ColumnNames_t GetValidatedColumnNames (const unsigned int nColumns, const ColumnNames_t &columns);  ; template<typename RetType > ; void SanityChecksForVary (const std::vector< std::string > &colNames, const std::vector< std::string > &variationTags, std::string_view variationName);  . Private Types; using DS_t = DataSource;  ; using RFilterBase = RDFDetail::RFilterBase;  ; using RLoopManager = RDFDetail::RLoopManager;  ; using RRangeBase = RDFDetail::RRangeBase;  . Private Member Functions; template<typename... ColTypes, std::size_t... S> ; RInterface< RLoopManager > CacheImpl (const ColumnNames_t &columnList, std::index_sequence< S... >);  Implementation of cache. ;  ; template<typename Helper , typename ActionResultType , typename... Others> ; RResultPtr< ActionResultType > CallCreateActionWithoutColsIfPossible (const std::shared_ptr< ActionResultType > &, const std::shared_ptr< Helper > &, Others...);  ; template<typename Helper , typename ActionResultType > ; auto CallCreateActionWithoutColsIfPossible (const std::shared_ptr< ActionResultType > &resPtr, const std::shared_ptr< Helper > &hPtr, TTraits::TypeList< RDFDetail::RInferredType >) -> decltype(hPtr->Exec(0u), RResultPtr< ActionResultType >{});  ; template<typename F , typename DefineType , typename RetType = typename TTraits::CallableTraits<F>::ret_type> ; std::enable_if_t< std::is_default_constructible< RetType >::value, RInterface< Proxied, DS_t > > DefineImpl (std::string_view name, F &&expression, const ColumnNames_t &columns, const std::string &where);  ; template<typename F , typename DefineType , typename RetType = typename TTraits::CallableTraits<F>::ret_type, boo",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:32758,Performance,multi-thread,multi-thread,32758,"<U>&) used to merge the results of the accumulations of each thread ; [in]columnNameThe column to be aggregated. If omitted, the first default column is used instead. ; [in]aggIdentityThe aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted) . Returnsthe result of the aggregation wrapped in a RResultPtr.; An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is initialized to aggIdentity or default-constructed if aggIdentity is omitted. This action calls the aggregator callable for each processed entry, passing in the aggregator variable and the value of the column columnName. If the signature is U(U,T) the aggregator variable is then copy-assigned the result of the execution of the callable. Otherwise the signature of aggregator must be void(U&,T).; The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions. If its signature is U(U,U) the aggregator variables of each thread are merged two by two. If its signature is void(std::vector<U>& a) it is assumed that it merges all aggregators in a[0].; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; Example usage: auto aggregator = [](double acc, double x) { return acc * x; };; ROOT::EnableImplicitMT();; // If multithread is enabled, the aggregator function will be called by more threads; // and will produce a vector of partial accumulators.; // The merger function performs the final aggregation of these partial results.; auto merger = [](std::vector<double> &accumulators) {; for (auto i : ROOT::TSeqU(1u, accumulators.size())) {; accumulators[0] *= accumulators[i];; }; };; ; // The accumulator is initialized at this value by every thread.; double initValue = 1.;; ; // Multiplies all elements of the column ""x""; auto result = d.Aggregate(aggregator, merger, ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:33361,Performance,perform,performs,33361,"ssed entry, passing in the aggregator variable and the value of the column columnName. If the signature is U(U,T) the aggregator variable is then copy-assigned the result of the execution of the callable. Otherwise the signature of aggregator must be void(U&,T).; The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions. If its signature is U(U,U) the aggregator variables of each thread are merged two by two. If its signature is void(std::vector<U>& a) it is assumed that it merges all aggregators in a[0].; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr.; Example usage: auto aggregator = [](double acc, double x) { return acc * x; };; ROOT::EnableImplicitMT();; // If multithread is enabled, the aggregator function will be called by more threads; // and will produce a vector of partial accumulators.; // The merger function performs the final aggregation of these partial results.; auto merger = [](std::vector<double> &accumulators) {; for (auto i : ROOT::TSeqU(1u, accumulators.size())) {; accumulators[0] *= accumulators[i];; }; };; ; // The accumulator is initialized at this value by every thread.; double initValue = 1.;; ; // Multiplies all elements of the column ""x""; auto result = d.Aggregate(aggregator, merger, ""x"", initValue);; d#define d(i)Definition RSha256.hxx:102; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; ROOT::TSeqA pseudo container class which is a generator of indices.Definition TSeq.hxx:67; xDouble_t x[n]Definition legend1.C:17; ROOTtbb::task_arena is an alias of tb",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:34570,Performance,multi-thread,multi-threading,34570,"];; }; };; ; // The accumulator is initialized at this value by every thread.; double initValue = 1.;; ; // Multiplies all elements of the column ""x""; auto result = d.Aggregate(aggregator, merger, ""x"", initValue);; d#define d(i)Definition RSha256.hxx:102; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; ROOT::TSeqA pseudo container class which is a generator of indices.Definition TSeq.hxx:67; xDouble_t x[n]Definition legend1.C:17; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539. Definition at line 2879 of file RInterface.hxx. ◆ Aggregate() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename AccFun , typename MergeFun , typename R = typename TTraits::CallableTraits<AccFun>::ret_type, typename ArgTypes = typename TTraits::CallableTraits<AccFun>::arg_types, typename U = TTraits::TakeFirstParameter_t<ArgTypes>, typename T = TTraits::TakeFirstParameter_t<TTraits::RemoveFirstParameter_t<ArgTypes>>> . RResultPtr< U > ROOT::RDF::RInterface< Proxied, DataSource >::Aggregate ; (; AccFun ; aggregator, . MergeFun ; merger, . std::string_view ; columnName = """" . ). inline . Execute a user-defined accumulation operation on the processed column values in each processing slot. ; Template Parameters. FThe type of the aggregator callable. Automatically deduced. ; UThe type of the aggregator variable. Must be default-constructible, copy",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:39410,Performance,optimiz,optimizations,39410,"e discouraged.; std::shared_ptr<Result_t> GetResultPtr() const: return a shared_ptr to the result of this action (of type Result_t). The RResultPtr returned by Book will point to this object. Note that this method can be called before Initialize(), because the RResultPtr is constructed before the event loop is started.; void Initialize(): this method is called once before starting the event-loop. Useful for setup operations. It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper, or copies of it, might be used for multiple event loops (e.g. in the presence of systematic variations).; void InitTask(TTreeReader *, unsigned int slot): each working thread shall call this method during the event loop, before processing a batch of entries. The pointer passed as argument, if not null, will point to the TTreeReader that RDataFrame has set up to read the task's batch of entries. It is passed to the helper to allow certain advanced optimizations it should not usually serve any purpose for the Helper. This method is often no-op for simple helpers.; void Exec(unsigned int slot, ColumnTypes...columnValues): each working thread shall call this method during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value: this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of the requested columns for the particular entry being processed.; void Finalize(): this method is called at the end of the event loop. Commonly used to finalize the contents of the result.; std::string GetActionName(): it returns a string identifier for this type of action that RDataFrame will use in diagnostics, SaveGraph(), etc. Optional methods; If these methods are implemented they enable extra functionality as per the description below. Result_t &PartialUpdate(unsigned int slot): if present, it must return the value of the partial result of this action for the ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:39661,Performance,concurren,concurrently,39661,"s method can be called before Initialize(), because the RResultPtr is constructed before the event loop is started.; void Initialize(): this method is called once before starting the event-loop. Useful for setup operations. It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper, or copies of it, might be used for multiple event loops (e.g. in the presence of systematic variations).; void InitTask(TTreeReader *, unsigned int slot): each working thread shall call this method during the event loop, before processing a batch of entries. The pointer passed as argument, if not null, will point to the TTreeReader that RDataFrame has set up to read the task's batch of entries. It is passed to the helper to allow certain advanced optimizations it should not usually serve any purpose for the Helper. This method is often no-op for simple helpers.; void Exec(unsigned int slot, ColumnTypes...columnValues): each working thread shall call this method during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value: this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of the requested columns for the particular entry being processed.; void Finalize(): this method is called at the end of the event loop. Commonly used to finalize the contents of the result.; std::string GetActionName(): it returns a string identifier for this type of action that RDataFrame will use in diagnostics, SaveGraph(), etc. Optional methods; If these methods are implemented they enable extra functionality as per the description below. Result_t &PartialUpdate(unsigned int slot): if present, it must return the value of the partial result of this action for the given 'slot'. Different threads might call this method concurrently, but will do so with different 'slot' numbers. RDataFrame leverages this method to implement RResultPtr::OnPartialResult().; ROOT::RDF::S",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:40473,Performance,concurren,concurrently,40473,"his method is often no-op for simple helpers.; void Exec(unsigned int slot, ColumnTypes...columnValues): each working thread shall call this method during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value: this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of the requested columns for the particular entry being processed.; void Finalize(): this method is called at the end of the event loop. Commonly used to finalize the contents of the result.; std::string GetActionName(): it returns a string identifier for this type of action that RDataFrame will use in diagnostics, SaveGraph(), etc. Optional methods; If these methods are implemented they enable extra functionality as per the description below. Result_t &PartialUpdate(unsigned int slot): if present, it must return the value of the partial result of this action for the given 'slot'. Different threads might call this method concurrently, but will do so with different 'slot' numbers. RDataFrame leverages this method to implement RResultPtr::OnPartialResult().; ROOT::RDF::SampleCallback_t GetSampleCallback(): if present, it must return a callable with the appropriate signature (see ROOT::RDF::SampleCallback_t) that will be invoked at the beginning of the processing of every sample, as in DefinePerSample().; Helper MakeNew(void *newResult): if implemented, it enables varying the action's result with VariationsFor(). It takes a type-erased new result that can be safely cast to a std::shared_ptr<Result_t> * (a pointer to shared pointer) and should be used as the action's output result. In case Book is called without specifying column types as template arguments, corresponding typed code will be just-in-time compiled by RDataFrame. In that case the Helper class needs to be known to the ROOT interpreter.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:42098,Performance,cache,cached,42098," and should be used as the action's output result. In case Book is called without specifying column types as template arguments, corresponding typed code will be just-in-time compiled by RDataFrame. In that case the Helper class needs to be known to the ROOT interpreter.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Examples; See this tutorial for an example implementation of an action helper.; It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx. ; Definition at line 2984 of file RInterface.hxx. ◆ Cache() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; This action returns a new RDataFrame object, completely detached from the originating RDataFrame. The new dataframe only contains the cached columns and stores their content in memory for fast, zero-copy subsequent access.; Use Cache if you know you will only need a subset of the (Filtered) data that fits in memory and that will be accessed many times.; NoteCache will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (thi",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:42153,Performance,cache,cached,42153," In case Book is called without specifying column types as template arguments, corresponding typed code will be just-in-time compiled by RDataFrame. In that case the Helper class needs to be known to the ROOT interpreter.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Examples; See this tutorial for an example implementation of an action helper.; It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx. ; Definition at line 2984 of file RInterface.hxx. ◆ Cache() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; This action returns a new RDataFrame object, completely detached from the originating RDataFrame. The new dataframe only contains the cached columns and stores their content in memory for fast, zero-copy subsequent access.; Use Cache if you know you will only need a subset of the (Filtered) data that fits in memory and that will be accessed many times.; NoteCache will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_co",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:42304,Performance,cache,cached,42304," be known to the ROOT interpreter.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Examples; See this tutorial for an example implementation of an action helper.; It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx. ; Definition at line 2984 of file RInterface.hxx. ◆ Cache() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; This action returns a new RDataFrame object, completely detached from the originating RDataFrame. The new dataframe only contains the cached columns and stores their content in memory for fast, zero-copy subsequent access.; Use Cache if you know you will only need a subset of the (Filtered) data that fits in memory and that will be accessed many times.; NoteCache will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; Types inferred and columns selected with a regexp (this invocation relies on jitting): auto cache_all_cols_df = df.Cache(myRegexp);. Definitio",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:43649,Performance,cache,cached,43649," by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; Types inferred and columns selected with a regexp (this invocation relies on jitting): auto cache_all_cols_df = df.Cache(myRegexp);. Definition at line 1459 of file RInterface.hxx. ◆ Cache() [2/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1471 of file RInterface.hxx. ◆ Cache() [3/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::initializer_list< std::string > ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1546 of file RInterface.hxx. ◆ Cache() [4/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::string_view ; columnNameRegexp = """"). inline . Save selected columns in memory. ; Parameters. [in]columnNameRegexpThe regular expression to match the column names to be selected. The presence of ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:43703,Performance,cache,cached,43703,"sent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; Types inferred and columns selected with a regexp (this invocation relies on jitting): auto cache_all_cols_df = df.Cache(myRegexp);. Definition at line 1459 of file RInterface.hxx. ◆ Cache() [2/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1471 of file RInterface.hxx. ◆ Cache() [3/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::initializer_list< std::string > ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1546 of file RInterface.hxx. ◆ Cache() [4/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::string_view ; columnNameRegexp = """"). inline . Save selected columns in memory. ; Parameters. [in]columnNameRegexpThe regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is impli",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:44114,Performance,cache,cached,44114,"ies on jitting): auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; Types inferred and columns selected with a regexp (this invocation relies on jitting): auto cache_all_cols_df = df.Cache(myRegexp);. Definition at line 1459 of file RInterface.hxx. ◆ Cache() [2/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1471 of file RInterface.hxx. ◆ Cache() [3/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::initializer_list< std::string > ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1546 of file RInterface.hxx. ◆ Cache() [4/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::string_view ; columnNameRegexp = """"). inline . Save selected columns in memory. ; Parameters. [in]columnNameRegexpThe regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if they are not specified. The dialect supported is PCRE via the TPRegexp class. An empty string signals the selection of all columns. . Returnsa RDataFrame that wraps the cached dataset.; The existing columns are matched against the regular expression. If the string provided is empty, all columns are selected. See the previous overloads for more information. ; Definition at line 1520 of file RInte",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:44169,Performance,cache,cached,44169,"e({""col0"", ""col1"", ""col2""});; Types inferred and columns selected with a regexp (this invocation relies on jitting): auto cache_all_cols_df = df.Cache(myRegexp);. Definition at line 1459 of file RInterface.hxx. ◆ Cache() [2/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1471 of file RInterface.hxx. ◆ Cache() [3/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::initializer_list< std::string > ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1546 of file RInterface.hxx. ◆ Cache() [4/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::string_view ; columnNameRegexp = """"). inline . Save selected columns in memory. ; Parameters. [in]columnNameRegexpThe regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if they are not specified. The dialect supported is PCRE via the TPRegexp class. An empty string signals the selection of all columns. . Returnsa RDataFrame that wraps the cached dataset.; The existing columns are matched against the regular expression. If the string provided is empty, all columns are selected. See the previous overloads for more information. ; Definition at line 1520 of file RInterface.hxx. ◆ CacheImpl(). template<typename Proxied",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:44879,Performance,cache,cached,44879,"name DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::initializer_list< std::string > ; columnList). inline . Save selected columns in memory. ; Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; See the previous overloads for more information. ; Definition at line 1546 of file RInterface.hxx. ◆ Cache() [4/4]. template<typename Proxied , typename DataSource = void> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; std::string_view ; columnNameRegexp = """"). inline . Save selected columns in memory. ; Parameters. [in]columnNameRegexpThe regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if they are not specified. The dialect supported is PCRE via the TPRegexp class. An empty string signals the selection of all columns. . Returnsa RDataFrame that wraps the cached dataset.; The existing columns are matched against the regular expression. If the string provided is empty, all columns are selected. See the previous overloads for more information. ; Definition at line 1520 of file RInterface.hxx. ◆ CacheImpl(). template<typename Proxied , typename DataSource = void> . template<typename... ColTypes, std::size_t... S> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::CacheImpl ; (; const ColumnNames_t & ; columnList, . std::index_sequence< S... > ;  . ). inlineprivate . Implementation of cache. ; Definition at line 3200 of file RInterface.hxx. ◆ CallCreateActionWithoutColsIfPossible() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename Helper , typename ActionResultType , typename... Others> . RResultPtr< ActionResultType > ROOT::RDF::RInterface< Proxied, DataSource >::CallCreateActionWithoutColsIfPossible ; (; const std::shared_ptr< ActionResultType > & ; , . const std::shared_p",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:45439,Performance,cache,cache,45439,":Cache ; (; std::string_view ; columnNameRegexp = """"). inline . Save selected columns in memory. ; Parameters. [in]columnNameRegexpThe regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if they are not specified. The dialect supported is PCRE via the TPRegexp class. An empty string signals the selection of all columns. . Returnsa RDataFrame that wraps the cached dataset.; The existing columns are matched against the regular expression. If the string provided is empty, all columns are selected. See the previous overloads for more information. ; Definition at line 1520 of file RInterface.hxx. ◆ CacheImpl(). template<typename Proxied , typename DataSource = void> . template<typename... ColTypes, std::size_t... S> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::CacheImpl ; (; const ColumnNames_t & ; columnList, . std::index_sequence< S... > ;  . ). inlineprivate . Implementation of cache. ; Definition at line 3200 of file RInterface.hxx. ◆ CallCreateActionWithoutColsIfPossible() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename Helper , typename ActionResultType , typename... Others> . RResultPtr< ActionResultType > ROOT::RDF::RInterface< Proxied, DataSource >::CallCreateActionWithoutColsIfPossible ; (; const std::shared_ptr< ActionResultType > & ; , . const std::shared_ptr< Helper > & ; , . Others... ;  . ). inlineprivate . Definition at line 3301 of file RInterface.hxx. ◆ CallCreateActionWithoutColsIfPossible() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename Helper , typename ActionResultType > . auto ROOT::RDF::RInterface< Proxied, DataSource >::CallCreateActionWithoutColsIfPossible ; (; const std::shared_ptr< ActionResultType > & ; resPtr, . const std::shared_ptr< Helper > & ; hPtr, . TTraits::TypeList< RDFDetail::RInferredType > ;  . ); -> decltype(hPtr->Exec(0u), RResultPtr<ActionResu",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:54912,Performance,multi-thread,multi-thread,54912,"callable that computes the new value of the defined column. . Returnsthe first node of the computation graph for which the new quantity is defined.; The signature of the callable passed as second argument should be T(unsigned int slot, const ROOT::RDF::RSampleInfo &id) where:; T is the type of the defined column; slot is a number in the range [0, nThreads) that is different for each processing thread. This can simplify the definition of thread-safe callables if you are interested in using parallel capabilities of RDataFrame.; id is an instance of a ROOT::RDF::RSampleInfo object which contains information about the sample which is being processed (see the class docs for more information). DefinePerSample() is useful to e.g. define a quantity that depends on which TTree in which TFile is being processed or to inject a callback into the event loop that is only called when the processing of a new sample starts rather than at every entry.; The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often. Example usage:; ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; df.DefinePerSample(""weightbysample"",; [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; ROOT::RDF::RInterface::DefinePerSampleRInterface< Proxied, DS_t > DefinePerSample(std::string_view name, F expression)Define a new column that is updated when the input sample changes.Definition RInterface.hxx:735; ROOT::RDF::RSampleInfoThis type represents a sample identifier, to be used in conjunction with RDataFrame features such as ...Definition RSampleInfo.hxx:35. Definition at line 735 of file RInterface.hxx. ◆ DefinePerSample() [2/2]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefinePerSample ; (; std::string_view ; name, . std::string_view ; expression . ). inline . Define a new column that is updated when the inp",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:59079,Performance,perform,performant,59079,"name of the defined column. ; [in]expressionFunction, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer function (excluding the slot number). . Returnsthe first node of the computation graph for which the new quantity is defined.; This alternative implementation of Define is meant as a helper to evaluate new column values in a thread-safe manner. The expression must be a callable of signature R(unsigned int, T1, T2, ...) where T1, T2... are the types of the columns that the expression takes as input. The first parameter is reserved for an unsigned integer representing a ""slot number"". RDataFrame guarantees that different threads will invoke the expression with different slot numbers - slot numbers will range from zero to ROOT::GetThreadPoolSize()-1.; The following two calls are equivalent, although DefineSlot is slightly more performant: int function(unsigned int, double, double);; df.Define(""x"", function, {""rdfslot_"", ""column1"", ""column2""}); df.DefineSlot(""x"", function, {""column1"", ""column2""}); See Define() for more information. ; Definition at line 470 of file RInterface.hxx. ◆ DefineSlotEntry(). template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefineSlotEntry ; (; std::string_view ; name, . F ; expression, . const ColumnNames_t & ; columns = {} . ). inline . Define a new column with a value dependent on the processing slot and the current entry. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionFunction, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer function (excluding slot and entry). . Returnsthe",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:60891,Performance,perform,performant,60891,"the columns/branches in input to the producer function (excluding slot and entry). . Returnsthe first node of the computation graph for which the new quantity is defined.; This alternative implementation of Define is meant as a helper in writing entry-specific, thread-safe custom columns. The expression must be a callable of signature R(unsigned int, ULong64_t, T1, T2, ...) where T1, T2... are the types of the columns that the expression takes as input. The first parameter is reserved for an unsigned integer representing a ""slot number"". RDataFrame guarantees that different threads will invoke the expression with different slot numbers - slot numbers will range from zero to ROOT::GetThreadPoolSize()-1. The second parameter is reserved for a ULong64_t representing the current entry being processed by the current thread.; The following two Defines are equivalent, although DefineSlotEntry is slightly more performant: int function(unsigned int, ULong64_t, double, double);; Define(""x"", function, {""rdfslot_"", ""rdfentry_"", ""column1"", ""column2""}); DefineSlotEntry(""x"", function, {""column1"", ""column2""}); ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; ROOT::RDF::RInterface::DefineRInterface< Proxied, DS_t > Define(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column.Definition RInterface.hxx:441; ROOT::RDF::RInterface::DefineSlotEntryRInterface< Proxied, DS_t > DefineSlotEntry(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column with a value dependent on the processing slot and the current entry.Definition RInterface.hxx:500; See Define() for more information. ; Definition at line 500 of file RInterface.hxx. ◆ Display() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RResultPtr< RDisplay > ROOT::RDF::RInterface< Proxied, DataSource >::Display ; (; const ColumnNames_t & ; columnList, . size_t ; nRows = 5, . size_t ; nMaxCollectionElements",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:68674,Performance,multi-thread,multi-threading,68674,"xx. ◆ Filter() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename F , std::enable_if_t<!std::is_convertible< F, std::string >::value, int > = 0> . RInterface< RDFDetail::RFilter< F, Proxied >, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Filter ; (; F ; f, . const ColumnNames_t & ; columns = {}, . std::string_view ; name = """" . ). inline . Append a filter to the call graph. ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object. It must return a bool signalling whether the event has passed the selection (true) or not (false). ; [in]columnsNames of the columns/branches in input to the filter function. ; [in]nameOptional name of this filter. See Report. . Returnsthe filter node of the computation graph.; Append a filter node at the point of the call graph corresponding to the object this method is called on. The callable f should not have side-effects (e.g. modification of an external or static variable) to ensure correct results when implicit multi-threading is active.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded. Even if multiple actions or transformations depend on the same filter, it is executed once per entry. If its result is requested more than once, the cached result is served. Example usage:; // C++ callable (function, functor class, lambda...) that takes two parameters of the types of ""x"" and ""y""; auto filtered = df.Filter(myCut, {""x"", ""y""});; ; // String: it must contain valid C++ except that column names can be used instead of variable names; auto filtered = df.Filter(""x*y > 0"");; NoteIf the body of the string expression contains an explicit return statement (even if it is in a nested scope), RDataFrame will not add another one in front of the expression. So this will not work: df.Filter(""Sum(Map(vec, [](float e) { return e*e > 0.5; }",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:69047,Performance,cache,cached,69047,"lter to the call graph. ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object. It must return a bool signalling whether the event has passed the selection (true) or not (false). ; [in]columnsNames of the columns/branches in input to the filter function. ; [in]nameOptional name of this filter. See Report. . Returnsthe filter node of the computation graph.; Append a filter node at the point of the call graph corresponding to the object this method is called on. The callable f should not have side-effects (e.g. modification of an external or static variable) to ensure correct results when implicit multi-threading is active.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded. Even if multiple actions or transformations depend on the same filter, it is executed once per entry. If its result is requested more than once, the cached result is served. Example usage:; // C++ callable (function, functor class, lambda...) that takes two parameters of the types of ""x"" and ""y""; auto filtered = df.Filter(myCut, {""x"", ""y""});; ; // String: it must contain valid C++ except that column names can be used instead of variable names; auto filtered = df.Filter(""x*y > 0"");; NoteIf the body of the string expression contains an explicit return statement (even if it is in a nested scope), RDataFrame will not add another one in front of the expression. So this will not work: df.Filter(""Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); but instead this will: df.Filter(""return Sum(Map(vec, [](float e) { return e*e > 0.5; }))""); ; Definition at line 219 of file RInterface.hxx. ◆ Filter() [2/4]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< RDFDetail::RFilter< F, Proxied >, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Filter ; (; F ; f, . const std::initializer_l",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:76229,Performance,perform,performing,76229,"terMissing(""y""); df_valid_col_y = df.FilterMissing(""x""); display_x = df_valid_col_x.Display((""x"",)); display_y = df_valid_col_y.Display((""y"",)); // Assume a dataset made of two files vertically chained together, one has; // column ""x"" and the other has column ""y""; ROOT.RDataFrame df{dataset};; auto df_valid_col_x = df.FilterMissing(""y"");; auto df_valid_col_y = df.FilterMissing(""x"");; auto display_x = df_valid_col_x.Display<int>({""x""});; auto display_y = df_valid_col_y.Display<int>({""y""});; NoteSee FilterAvailable() if you want to discard the entries in case there is a missing value instead. ; Definition at line 388 of file RInterface.hxx. ◆ Foreach(). template<typename Proxied , typename DataSource = void> . template<typename F > . void ROOT::RDF::RInterface< Proxied, DataSource >::Foreach ; (; F ; f, . const ColumnNames_t & ; columns = {} . ). inline . Execute a user-defined function on each entry (instant action). ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object performing user defined calculations. ; [in]columnsNames of the columns/branches in input to the user function. The callable f is invoked once per entry. This is an instant action: upon invocation, an event loop as well as execution of all scheduled actions is triggered. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled (i.e. ROOT::EnableImplicitMT). Example usage:; myDf.Foreach([](int i){ std::cout << i << std::endl;}, {""myIntColumn""});. Definition at line 1611 of file RInterface.hxx. ◆ ForeachSlot(). template<typename Proxied , typename DataSource = void> . template<typename F > . void ROOT::RDF::RInterface< Proxied, DataSource >::ForeachSlot ; (; F ; f, . const ColumnNames_t & ; columns = {} . ). inline . Execute a user-defined function requiring a processing slot index on each entry (instant action). ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object performin",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:76591,Performance,multi-thread,multi-threading,76591,"lid_col_y = df.FilterMissing(""x"");; auto display_x = df_valid_col_x.Display<int>({""x""});; auto display_y = df_valid_col_y.Display<int>({""y""});; NoteSee FilterAvailable() if you want to discard the entries in case there is a missing value instead. ; Definition at line 388 of file RInterface.hxx. ◆ Foreach(). template<typename Proxied , typename DataSource = void> . template<typename F > . void ROOT::RDF::RInterface< Proxied, DataSource >::Foreach ; (; F ; f, . const ColumnNames_t & ; columns = {} . ). inline . Execute a user-defined function on each entry (instant action). ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object performing user defined calculations. ; [in]columnsNames of the columns/branches in input to the user function. The callable f is invoked once per entry. This is an instant action: upon invocation, an event loop as well as execution of all scheduled actions is triggered. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled (i.e. ROOT::EnableImplicitMT). Example usage:; myDf.Foreach([](int i){ std::cout << i << std::endl;}, {""myIntColumn""});. Definition at line 1611 of file RInterface.hxx. ◆ ForeachSlot(). template<typename Proxied , typename DataSource = void> . template<typename F > . void ROOT::RDF::RInterface< Proxied, DataSource >::ForeachSlot ; (; F ; f, . const ColumnNames_t & ; columns = {} . ). inline . Execute a user-defined function requiring a processing slot index on each entry (instant action). ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object performing user defined calculations. ; [in]columnsNames of the columns/branches in input to the user function. Same as Foreach, but the user-defined function takes an extra unsigned int as its first parameter, the processing slot index. This slot index will be assigned a different value, 0 to poolSize - 1, for each thread of execution. This is meant as a h",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:77200,Performance,perform,performing,77200,"ssion, functor class or any other callable object performing user defined calculations. ; [in]columnsNames of the columns/branches in input to the user function. The callable f is invoked once per entry. This is an instant action: upon invocation, an event loop as well as execution of all scheduled actions is triggered. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled (i.e. ROOT::EnableImplicitMT). Example usage:; myDf.Foreach([](int i){ std::cout << i << std::endl;}, {""myIntColumn""});. Definition at line 1611 of file RInterface.hxx. ◆ ForeachSlot(). template<typename Proxied , typename DataSource = void> . template<typename F > . void ROOT::RDF::RInterface< Proxied, DataSource >::ForeachSlot ; (; F ; f, . const ColumnNames_t & ; columns = {} . ). inline . Execute a user-defined function requiring a processing slot index on each entry (instant action). ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object performing user defined calculations. ; [in]columnsNames of the columns/branches in input to the user function. Same as Foreach, but the user-defined function takes an extra unsigned int as its first parameter, the processing slot index. This slot index will be assigned a different value, 0 to poolSize - 1, for each thread of execution. This is meant as a helper in writing thread-safe Foreach actions when using RDataFrame after ROOT::EnableImplicitMT(). The user-defined processing callable is able to follow different streams of processing indexed by the first parameter. ForeachSlot works just as well with single-thread execution: in that case slot will always be 0. Example usage:; myDf.ForeachSlot([](unsigned int s, int i){ std::cout << ""Slot "" << s << "": ""<< i << std::endl;}, {""myIntColumn""});. Definition at line 1641 of file RInterface.hxx. ◆ GetFilterNames(). template<typename Proxied , typename DataSource = void> . std::vector< std::string > ROOT::RDF::RInterfac",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:103515,Performance,perform,performance,103515,"d. . Returnsthe minimum value of the selected column wrapped in a RResultPtr.; If T is not specified, RDataFrame will infer it from the data and just-in-time compile the correct template specialization of this method. If the type of the column is inferred, the return type is double, the type of the column otherwise.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Example usage:; // Deduce column type (this invocation needs jitting internally); auto minVal0 = myDf.Min(""values"");; // Explicit column type; auto minVal1 = myDf.Min<double>(""values"");. Definition at line 2640 of file RInterface.hxx. ◆ operator RNode(). template<typename Proxied , typename DataSource = void> . ROOT::RDF::RInterface< Proxied, DataSource >::operator RNode ; (; ); const. inline . Cast any RDataFrame node to a common type ROOT::RDF::RNode. ; Different RDataFrame methods return different C++ types. All nodes, however, can be cast to this common type at the cost of a small performance penalty. This allows, for example, storing RDataFrame nodes in a vector, or passing them around via (non-template, C++11) helper functions. Example usage: // a function that conditionally adds a Range to a RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRanged = MaybeAddRange(df, true);; ROOT::RDF::RInterfaceThe public interface to the RDataFrame federation of classes.Definition RInterface.hxx:113; ROOT::RDF::RInterface::RangeRInterface< RDFDetail::RRange< Proxied >, DS_t > Range(unsigned int begin, unsigned int end, unsigned int stride=1)Creates a node that filters entries based on range: [begin, end).Definition RInterface.hxx:1570; Note that it is not a problem to pass RNode's by value. ; Definition at line 173 of file RInterface.hxx. ◆ operator=() [1/2]. template<typename Proxied , typename DataSource = void> . RInterface & ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:120892,Performance,perform,performs,120892,"rst Reduce overload for more information. ; Definition at line 1711 of file RInterface.hxx. ◆ Reduce() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. . Returnsthe reduced quantity wrapped in a ROOT::RDF:RResultPtr.; A reduction takes two values of a column and merges them into one (e.g. by summing them, taking the maximum, etc). This action performs the specified reduction operation on all processed column values, returning a single value of the same type. The callable f must satisfy the general requirements of a processing function besides having signature T(T,T) where T is the type of column columnName.; The returned reduced value of each thread (e.g. the initial value of a sum) is initialized to a default-constructed T object. This is commonly expected to be the neutral/identity element for the specific reduction operation f (e.g. 0 for a sum, 1 for a product). If a default-constructed T does not satisfy this requirement, users should explicitly specify an initialization value for T by calling the appropriate Reduce overload. Example usage:; auto sumOfIntCol = d.Reduce([](int x, int y) { return x + y; }, ""intCol"");; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. ; Definition at line 1688 of file RInterface.hxx. ◆ Report(). template<typename Proxied , typename DataSource = void> . RResultPtr< RCutFlowR",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:125334,Performance,multi-thread,multi-thread,125334,"and it appears before the array in the columnList.; By default, in case of TTree or TChain inputs, Snapshot will try to write out all top-level branches. For other types of inputs, all columns returned by GetColumnNames() will be written out. If friend trees or chains are present, by default all friend top-level branches that have names that do not collide with names of branches in the main TTree/TChain will be written out. Since v6.24, Snapshot will also write out friend branches with the same names of branches in the main TTree/TChain with names of the form <friendname>_<branchname> in order to differentiate them from the branches in the main tree/chain. Writing to a sub-directory; Snapshot supports writing the TTree in a sub-directory inside the TFile. It is sufficient to specify the path to the TTree as part of the TTree name, e.g. df.Snapshot(""subdir/t"", ""f.root"") write TTree t in the sub-directory subdir of file f.root (creating file and sub-directory as needed).; AttentionIn multi-thread runs (i.e. when EnableImplicitMT() has been called) threads will loop over clusters of entries in an undefined order, so Snapshot will produce outputs in which (clusters of) entries will be shuffled with respect to the input TTree. Using such ""shuffled"" TTrees as friends of the original trees would result in wrong associations between entries in the main TTree and entries in the ""shuffled"" friend. Since v6.22, ROOT will error out if such a ""shuffled"" TTree is used in a friendship.; NoteIn case no events are written out (e.g. because no event passes all filters) the behavior of Snapshot in single-thread and multi-thread runs is different: in single-thread runs, Snapshot will write out a TTree with the specified name and zero entries; in multi-thread runs, no TTree object will be written out to disk. Snapshot will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:125961,Performance,multi-thread,multi-thread,125961,"ub-directory; Snapshot supports writing the TTree in a sub-directory inside the TFile. It is sufficient to specify the path to the TTree as part of the TTree name, e.g. df.Snapshot(""subdir/t"", ""f.root"") write TTree t in the sub-directory subdir of file f.root (creating file and sub-directory as needed).; AttentionIn multi-thread runs (i.e. when EnableImplicitMT() has been called) threads will loop over clusters of entries in an undefined order, so Snapshot will produce outputs in which (clusters of) entries will be shuffled with respect to the input TTree. Using such ""shuffled"" TTrees as friends of the original trees would result in wrong associations between entries in the main TTree and entries in the ""shuffled"" friend. Since v6.22, ROOT will error out if such a ""shuffled"" TTree is used in a friendship.; NoteIn case no events are written out (e.g. because no event passes all filters) the behavior of Snapshot in single-thread and multi-thread runs is different: in single-thread runs, Snapshot will write out a TTree with the specified name and zero entries; in multi-thread runs, no TTree object will be written out to disk. Snapshot will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Snapshot(..., {""nbar""}). Example invocations:; // without specifying template parameters (column types automatically deduced); df.Snapshot(""outputTree"", ""outputFile.root"", {""x"", ""y""});; ; // specifying template parameters (""x"" is `int`, ""y"" is `float`); df.Snapshot<int, float>(""outputTree"", ""outputFile.root"", {""x"", ""y""});; To book a Snapshot without triggering the event loop, one needs to set the appropriate flag in RSnapshotOptions: RSnapshotOptions opts;; opts.fLazy = true;; df.Snapshot(""outputTree"", """,MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:126093,Performance,multi-thread,multi-thread,126093,"ub-directory; Snapshot supports writing the TTree in a sub-directory inside the TFile. It is sufficient to specify the path to the TTree as part of the TTree name, e.g. df.Snapshot(""subdir/t"", ""f.root"") write TTree t in the sub-directory subdir of file f.root (creating file and sub-directory as needed).; AttentionIn multi-thread runs (i.e. when EnableImplicitMT() has been called) threads will loop over clusters of entries in an undefined order, so Snapshot will produce outputs in which (clusters of) entries will be shuffled with respect to the input TTree. Using such ""shuffled"" TTrees as friends of the original trees would result in wrong associations between entries in the main TTree and entries in the ""shuffled"" friend. Since v6.22, ROOT will error out if such a ""shuffled"" TTree is used in a friendship.; NoteIn case no events are written out (e.g. because no event passes all filters) the behavior of Snapshot in single-thread and multi-thread runs is different: in single-thread runs, Snapshot will write out a TTree with the specified name and zero entries; in multi-thread runs, no TTree object will be written out to disk. Snapshot will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Snapshot(..., {""nbar""}). Example invocations:; // without specifying template parameters (column types automatically deduced); df.Snapshot(""outputTree"", ""outputFile.root"", {""x"", ""y""});; ; // specifying template parameters (""x"" is `int`, ""y"" is `float`); df.Snapshot<int, float>(""outputTree"", ""outputFile.root"", {""x"", ""y""});; To book a Snapshot without triggering the event loop, one needs to set the appropriate flag in RSnapshotOptions: RSnapshotOptions opts;; opts.fLazy = true;; df.Snapshot(""outputTree"", """,MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:39791,Safety,safe,safe,39791,"void Initialize(): this method is called once before starting the event-loop. Useful for setup operations. It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper, or copies of it, might be used for multiple event loops (e.g. in the presence of systematic variations).; void InitTask(TTreeReader *, unsigned int slot): each working thread shall call this method during the event loop, before processing a batch of entries. The pointer passed as argument, if not null, will point to the TTreeReader that RDataFrame has set up to read the task's batch of entries. It is passed to the helper to allow certain advanced optimizations it should not usually serve any purpose for the Helper. This method is often no-op for simple helpers.; void Exec(unsigned int slot, ColumnTypes...columnValues): each working thread shall call this method during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value: this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of the requested columns for the particular entry being processed.; void Finalize(): this method is called at the end of the event loop. Commonly used to finalize the contents of the result.; std::string GetActionName(): it returns a string identifier for this type of action that RDataFrame will use in diagnostics, SaveGraph(), etc. Optional methods; If these methods are implemented they enable extra functionality as per the description below. Result_t &PartialUpdate(unsigned int slot): if present, it must return the value of the partial result of this action for the given 'slot'. Different threads might call this method concurrently, but will do so with different 'slot' numbers. RDataFrame leverages this method to implement RResultPtr::OnPartialResult().; ROOT::RDF::SampleCallback_t GetSampleCallback(): if present, it must return a callable with the appropriate signature (see ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:41018,Safety,safe,safely,41018,"nName(): it returns a string identifier for this type of action that RDataFrame will use in diagnostics, SaveGraph(), etc. Optional methods; If these methods are implemented they enable extra functionality as per the description below. Result_t &PartialUpdate(unsigned int slot): if present, it must return the value of the partial result of this action for the given 'slot'. Different threads might call this method concurrently, but will do so with different 'slot' numbers. RDataFrame leverages this method to implement RResultPtr::OnPartialResult().; ROOT::RDF::SampleCallback_t GetSampleCallback(): if present, it must return a callable with the appropriate signature (see ROOT::RDF::SampleCallback_t) that will be invoked at the beginning of the processing of every sample, as in DefinePerSample().; Helper MakeNew(void *newResult): if implemented, it enables varying the action's result with VariationsFor(). It takes a type-erased new result that can be safely cast to a std::shared_ptr<Result_t> * (a pointer to shared pointer) and should be used as the action's output result. In case Book is called without specifying column types as template arguments, corresponding typed code will be just-in-time compiled by RDataFrame. In that case the Helper class needs to be known to the ROOT interpreter.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Examples; See this tutorial for an example implementation of an action helper.; It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx. ; Definition at line 2984 of file RInterface.hxx. ◆ Cache() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Template Parameters. ColumnTypesvariadic list of branch/column types. .",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:54349,Safety,safe,safe,54349,"lineprivate . Definition at line 3151 of file RInterface.hxx. ◆ DefinePerSample() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename RetType_t = typename TTraits::CallableTraits<F>::ret_type> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefinePerSample ; (; std::string_view ; name, . F ; expression . ). inline . Define a new column that is updated when the input sample changes. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionA C++ callable that computes the new value of the defined column. . Returnsthe first node of the computation graph for which the new quantity is defined.; The signature of the callable passed as second argument should be T(unsigned int slot, const ROOT::RDF::RSampleInfo &id) where:; T is the type of the defined column; slot is a number in the range [0, nThreads) that is different for each processing thread. This can simplify the definition of thread-safe callables if you are interested in using parallel capabilities of RDataFrame.; id is an instance of a ROOT::RDF::RSampleInfo object which contains information about the sample which is being processed (see the class docs for more information). DefinePerSample() is useful to e.g. define a quantity that depends on which TTree in which TFile is being processed or to inject a callback into the event loop that is only called when the processing of a new sample starts rather than at every entry.; The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often. Example usage:; ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; df.DefinePerSample(""weightbysample"",; [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; ROOT::RDF::RInterface::DefinePerSampleRInterface< Proxied, DS_t > DefinePerSample(std::string_view name, F expression)Define a new column that is updated when the input sample changes.",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:58577,Safety,safe,safe,58577,"xpression is evaluated once before the processing of the sample even starts, so column values are not accessible. ; Definition at line 796 of file RInterface.hxx. ◆ DefineSlot(). template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefineSlot ; (; std::string_view ; name, . F ; expression, . const ColumnNames_t & ; columns = {} . ). inline . Define a new column with a value dependent on the processing slot. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionFunction, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer function (excluding the slot number). . Returnsthe first node of the computation graph for which the new quantity is defined.; This alternative implementation of Define is meant as a helper to evaluate new column values in a thread-safe manner. The expression must be a callable of signature R(unsigned int, T1, T2, ...) where T1, T2... are the types of the columns that the expression takes as input. The first parameter is reserved for an unsigned integer representing a ""slot number"". RDataFrame guarantees that different threads will invoke the expression with different slot numbers - slot numbers will range from zero to ROOT::GetThreadPoolSize()-1.; The following two calls are equivalent, although DefineSlot is slightly more performant: int function(unsigned int, double, double);; df.Define(""x"", function, {""rdfslot_"", ""column1"", ""column2""}); df.DefineSlot(""x"", function, {""column1"", ""column2""}); See Define() for more information. ; Definition at line 470 of file RInterface.hxx. ◆ DefineSlotEntry(). template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefineSlotEntry ;",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:60244,Safety,safe,safe,60244,"ineSlot(""x"", function, {""column1"", ""column2""}); See Define() for more information. ; Definition at line 470 of file RInterface.hxx. ◆ DefineSlotEntry(). template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefineSlotEntry ; (; std::string_view ; name, . F ; expression, . const ColumnNames_t & ; columns = {} . ). inline . Define a new column with a value dependent on the processing slot and the current entry. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionFunction, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer function (excluding slot and entry). . Returnsthe first node of the computation graph for which the new quantity is defined.; This alternative implementation of Define is meant as a helper in writing entry-specific, thread-safe custom columns. The expression must be a callable of signature R(unsigned int, ULong64_t, T1, T2, ...) where T1, T2... are the types of the columns that the expression takes as input. The first parameter is reserved for an unsigned integer representing a ""slot number"". RDataFrame guarantees that different threads will invoke the expression with different slot numbers - slot numbers will range from zero to ROOT::GetThreadPoolSize()-1. The second parameter is reserved for a ULong64_t representing the current entry being processed by the current thread.; The following two Defines are equivalent, although DefineSlotEntry is slightly more performant: int function(unsigned int, ULong64_t, double, double);; Define(""x"", function, {""rdfslot_"", ""rdfentry_"", ""column1"", ""column2""}); DefineSlotEntry(""x"", function, {""column1"", ""column2""}); ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; ROOT::RDF::RInterface::DefineRInterface< Proxied, DS_",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:76538,Safety,safe,safety,76538,"lid_col_y = df.FilterMissing(""x"");; auto display_x = df_valid_col_x.Display<int>({""x""});; auto display_y = df_valid_col_y.Display<int>({""y""});; NoteSee FilterAvailable() if you want to discard the entries in case there is a missing value instead. ; Definition at line 388 of file RInterface.hxx. ◆ Foreach(). template<typename Proxied , typename DataSource = void> . template<typename F > . void ROOT::RDF::RInterface< Proxied, DataSource >::Foreach ; (; F ; f, . const ColumnNames_t & ; columns = {} . ). inline . Execute a user-defined function on each entry (instant action). ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object performing user defined calculations. ; [in]columnsNames of the columns/branches in input to the user function. The callable f is invoked once per entry. This is an instant action: upon invocation, an event loop as well as execution of all scheduled actions is triggered. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled (i.e. ROOT::EnableImplicitMT). Example usage:; myDf.Foreach([](int i){ std::cout << i << std::endl;}, {""myIntColumn""});. Definition at line 1611 of file RInterface.hxx. ◆ ForeachSlot(). template<typename Proxied , typename DataSource = void> . template<typename F > . void ROOT::RDF::RInterface< Proxied, DataSource >::ForeachSlot ; (; F ; f, . const ColumnNames_t & ; columns = {} . ). inline . Execute a user-defined function requiring a processing slot index on each entry (instant action). ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object performing user defined calculations. ; [in]columnsNames of the columns/branches in input to the user function. Same as Foreach, but the user-defined function takes an extra unsigned int as its first parameter, the processing slot index. This slot index will be assigned a different value, 0 to poolSize - 1, for each thread of execution. This is meant as a h",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:77583,Safety,safe,safe,77583,"threading enabled (i.e. ROOT::EnableImplicitMT). Example usage:; myDf.Foreach([](int i){ std::cout << i << std::endl;}, {""myIntColumn""});. Definition at line 1611 of file RInterface.hxx. ◆ ForeachSlot(). template<typename Proxied , typename DataSource = void> . template<typename F > . void ROOT::RDF::RInterface< Proxied, DataSource >::ForeachSlot ; (; F ; f, . const ColumnNames_t & ; columns = {} . ). inline . Execute a user-defined function requiring a processing slot index on each entry (instant action). ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object performing user defined calculations. ; [in]columnsNames of the columns/branches in input to the user function. Same as Foreach, but the user-defined function takes an extra unsigned int as its first parameter, the processing slot index. This slot index will be assigned a different value, 0 to poolSize - 1, for each thread of execution. This is meant as a helper in writing thread-safe Foreach actions when using RDataFrame after ROOT::EnableImplicitMT(). The user-defined processing callable is able to follow different streams of processing indexed by the first parameter. ForeachSlot works just as well with single-thread execution: in that case slot will always be 0. Example usage:; myDf.ForeachSlot([](unsigned int s, int i){ std::cout << ""Slot "" << s << "": ""<< i << std::endl;}, {""myIntColumn""});. Definition at line 1641 of file RInterface.hxx. ◆ GetFilterNames(). template<typename Proxied , typename DataSource = void> . std::vector< std::string > ROOT::RDF::RInterface< Proxied, DataSource >::GetFilterNames ; (; ). inline . Returns the names of the filters created. ; Returnsthe container of filters names.; If called on a root node, all the filters in the computation graph will be printed. For any other node, only the filters upstream of that node. Filters without a name are printed as ""Unnamed Filter"" This is not an action nor a transformation, just a query to the RDataFrame ob",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:145288,Safety,avoid,avoided,145288,"std::string > ; colNames, . F && ; expression, . const ColumnNames_t & ; inputColumns, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using custom variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona callable that evaluates the varied values for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as the tags. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". colName is used if none is provided. NoteThis overload ensures that the ambiguity between C++20 string, vector<string> construction from init list is avoided.; See alsoThis Vary() overload for more information. ; Definition at line 972 of file RInterface.hxx. ◆ Vary() [6/11]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::initializer_list< std::string > ; colNames, . F && ; expression, . const ColumnNames_t & ; inputColumns, . std::size_t ; nVariations, . std::string_view ; variationName . ). inline . Register systematic variations for for multiple existing columns using custom variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona callable that evaluates the varied values for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same orde",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:146743,Safety,avoid,avoided,146743," . std::size_t ; nVariations, . std::string_view ; variationName . ). inline . Register systematic variations for for multiple existing columns using custom variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona callable that evaluates the varied values for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as the tags. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]nVariationsnumber of variations returned by the expression. The corresponding tags will be ""0"", ""1"", etc. ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". colName is used if none is provided. NoteThis overload ensures that the ambiguity between C++20 string, vector<string> construction from init list is avoided.; See alsoThis Vary() overload for more information. ; Definition at line 1043 of file RInterface.hxx. ◆ Vary() [7/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::initializer_list< std::string > ; colNames, . std::string_view ; expression, . std::size_t ; nVariations, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using auto-generated variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec containing the varied values for the specified column. ; [in]nVariationsnumber of variations returned by the expression. The corresponding tags will be ""0"", ""1"", etc. ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation""",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:147842,Safety,avoid,avoided,147842,"e information. ; Definition at line 1043 of file RInterface.hxx. ◆ Vary() [7/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::initializer_list< std::string > ; colNames, . std::string_view ; expression, . std::size_t ; nVariations, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using auto-generated variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec containing the varied values for the specified column. ; [in]nVariationsnumber of variations returned by the expression. The corresponding tags will be ""0"", ""1"", etc. ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". colName is used if none is provided. NoteThis overload ensures that the ambiguity between C++20 string, vector<string> construction from init list is avoided.; See alsoThis Vary() overload for more information. ; Definition at line 1168 of file RInterface.hxx. ◆ Vary() [8/11]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::string_view ; colName, . F && ; expression, . const ColumnNames_t & ; inputColumns, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName = """" . ). inline . Register systematic variations for a single existing column using custom variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona callable that evaluates the varied values for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:37603,Security,expose,expose,37603,"umnNameof the column to be aliased . Returnsthe first node of the computation graph for which the alias is available.; Aliasing an alias is supported. Example usage:; auto df_with_alias = df.Alias(""simple_name"", ""very_long&complex_name!!!"");. Definition at line 1214 of file RInterface.hxx. ◆ Book(). template<typename Proxied , typename DataSource = void> . template<typename FirstColumn = RDFDetail::RInferredType, typename... OtherColumns, typename Helper > . RResultPtr< typename std::decay_t< Helper >::Result_t > ROOT::RDF::RInterface< Proxied, DataSource >::Book ; (; Helper && ; helper, . const ColumnNames_t & ; columns = {} . ). inline . Book execution of a custom action using a user-defined helper object. ; Template Parameters. FirstColumnThe type of the first column used by this action. Inferred together with OtherColumns if not present. ; OtherColumnsA list of the types of the other columns used by this action ; HelperThe type of the user-defined helper. See below for the required interface it should expose. . Parameters. [in]helperThe Action Helper to be scheduled. ; [in]columnsThe names of the columns on which the helper acts. . Returnsthe result of the helper wrapped in a RResultPtr.; This method books a custom action for execution. The behavior of the action is completely dependent on the Helper object provided by the caller. The required interface for the helper is described below (more methods that the ones required can be present, e.g. a constructor that takes the number of worker threads is usually useful):. Mandatory interface. Helper must publicly inherit from ROOT::Detail::RDF::RActionImpl<Helper>; Helper::Result_t: public alias for the type of the result of this action helper. Result_t must be default-constructible.; Helper(Helper &&): a move-constructor is required. Copy-constructors are discouraged.; std::shared_ptr<Result_t> GetResultPtr() const: return a shared_ptr to the result of this action (of type Result_t). The RResultPtr returned by Book w",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:42385,Security,access,access,42385," be known to the ROOT interpreter.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Examples; See this tutorial for an example implementation of an action helper.; It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx. ; Definition at line 2984 of file RInterface.hxx. ◆ Cache() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; This action returns a new RDataFrame object, completely detached from the originating RDataFrame. The new dataframe only contains the cached columns and stores their content in memory for fast, zero-copy subsequent access.; Use Cache if you know you will only need a subset of the (Filtered) data that fits in memory and that will be accessed many times.; NoteCache will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; Types inferred and columns selected with a regexp (this invocation relies on jitting): auto cache_all_cols_df = df.Cache(myRegexp);. Definitio",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:42504,Security,access,accessed,42504,"d. Also see RResultPtr. Examples; See this tutorial for an example implementation of an action helper.; It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx. ; Definition at line 2984 of file RInterface.hxx. ◆ Cache() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; This action returns a new RDataFrame object, completely detached from the originating RDataFrame. The new dataframe only contains the cached columns and stores their content in memory for fast, zero-copy subsequent access.; Use Cache if you know you will only need a subset of the (Filtered) data that fits in memory and that will be accessed many times.; NoteCache will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; Types inferred and columns selected with a regexp (this invocation relies on jitting): auto cache_all_cols_df = df.Cache(myRegexp);. Definition at line 1459 of file RInterface.hxx. ◆ Cache() [2/4]. template<typename Proxied , typename DataSource = void> . RInterface< RL",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:49886,Security,access,accessible,49886,"plate<typename Proxied , typename DataSource = void> . template<typename F , typename std::enable_if_t<!std::is_convertible< F, std::string >::value, int > = 0> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Define ; (; std::string_view ; name, . F ; expression, . const ColumnNames_t & ; columns = {} . ). inline . Define a new column. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionFunction, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer function. . Returnsthe first node of the computation graph for which the new quantity is defined.; Define a column that will be visible from all subsequent nodes of the functional chain. The expression is only evaluated for entries that pass all the preceding filters. A new variable is created called name, accessible as if it was contained in the dataset from subsequent transformations/actions.; Use cases include:; caching the results of complex calculations for easy and efficient multiple access; extraction of quantities of interest from complex objects. An exception is thrown if the name of the new column is already in use in this branch of the computation graph. Example usage:; // assuming a function with signature:; double myComplexCalculation(const RVec<float> &muon_pts);; // we can pass it directly to Define; auto df_with_define = df.Define(""newColumn"", myComplexCalculation, {""muon_pts""});; // alternatively, we can pass the body of the function as a string, as in Filter:; auto df_with_define = df.Define(""newColumn"", ""x*x + y*y"");; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; NoteIf the body of the string expression contains an explicit return statement (even if it is in a nested scope), RDataFrame will not add another one",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:50073,Security,access,access,50073,"e, int > = 0> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Define ; (; std::string_view ; name, . F ; expression, . const ColumnNames_t & ; columns = {} . ). inline . Define a new column. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionFunction, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer function. . Returnsthe first node of the computation graph for which the new quantity is defined.; Define a column that will be visible from all subsequent nodes of the functional chain. The expression is only evaluated for entries that pass all the preceding filters. A new variable is created called name, accessible as if it was contained in the dataset from subsequent transformations/actions.; Use cases include:; caching the results of complex calculations for easy and efficient multiple access; extraction of quantities of interest from complex objects. An exception is thrown if the name of the new column is already in use in this branch of the computation graph. Example usage:; // assuming a function with signature:; double myComplexCalculation(const RVec<float> &muon_pts);; // we can pass it directly to Define; auto df_with_define = df.Define(""newColumn"", myComplexCalculation, {""muon_pts""});; // alternatively, we can pass the body of the function as a string, as in Filter:; auto df_with_define = df.Define(""newColumn"", ""x*x + y*y"");; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; NoteIf the body of the string expression contains an explicit return statement (even if it is in a nested scope), RDataFrame will not add another one in front of the expression. So this will not work: df.Define(""x2"", ""Map(v, [](float e) { return e*e; })""); but instead this will: df.Define(""x2"",",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:54720,Security,inject,inject,54720,"ion . ). inline . Define a new column that is updated when the input sample changes. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionA C++ callable that computes the new value of the defined column. . Returnsthe first node of the computation graph for which the new quantity is defined.; The signature of the callable passed as second argument should be T(unsigned int slot, const ROOT::RDF::RSampleInfo &id) where:; T is the type of the defined column; slot is a number in the range [0, nThreads) that is different for each processing thread. This can simplify the definition of thread-safe callables if you are interested in using parallel capabilities of RDataFrame.; id is an instance of a ROOT::RDF::RSampleInfo object which contains information about the sample which is being processed (see the class docs for more information). DefinePerSample() is useful to e.g. define a quantity that depends on which TTree in which TFile is being processed or to inject a callback into the event loop that is only called when the processing of a new sample starts rather than at every entry.; The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often. Example usage:; ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; df.DefinePerSample(""weightbysample"",; [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; ROOT::RDF::RInterface::DefinePerSampleRInterface< Proxied, DS_t > DefinePerSample(std::string_view name, F expression)Define a new column that is updated when the input sample changes.Definition RInterface.hxx:735; ROOT::RDF::RSampleInfoThis type represents a sample identifier, to be used in conjunction with RDataFrame features such as ...Definition RSampleInfo.hxx:35. Definition at line 735 of file RInterface.hxx. ◆ DefinePerSample() [2/2]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Pr",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:57631,Security,access,accessible,57631," overload. See the documentation of that overload for more information. Example usage:; df = ROOT.RDataFrame('mytree', ['sample1.root','sample2.root']); df.DefinePerSample('weightbysample', 'rdfsampleinfo_.Contains(""sample1"") ? 1.0f : 2.0f'); NoteIf you have declared some C++ function to the interpreter, the correct syntax to call that function with this overload of DefinePerSample is by calling it explicitly with the special names rdfslot_ and rdfsampleinfo_ as input parameters. This is for example the correct way to call this overload when working in PyROOT: ROOT.gInterpreter.Declare(; """"""; float weights(unsigned int slot, const ROOT::RDF::RSampleInfo &id){; return id.Contains(""sample1"") ? 1.0f : 2.0f;; }; """"""); df = ROOT.RDataFrame(""mytree"", [""sample1.root"",""sample2.root""]); df.DefinePerSample(""weightsbysample"", ""weights(rdfslot_, rdfsampleinfo_)""). Differently from what happens in Define(), the string expression passed to DefinePerSample cannot contain column names other than those mentioned above: the expression is evaluated once before the processing of the sample even starts, so column values are not accessible. ; Definition at line 796 of file RInterface.hxx. ◆ DefineSlot(). template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefineSlot ; (; std::string_view ; name, . F ; expression, . const ColumnNames_t & ; columns = {} . ). inline . Define a new column with a value dependent on the processing slot. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionFunction, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer function (excluding the slot number). . Returnsthe first node of the computation graph for which the new quantity is defined.; This alternative implementation of",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:143415,Security,access,accessible,143415,"< Proxied, DataSource >::Vary ; (; const std::vector< std::string > & ; colNames, . std::string_view ; expression, . std::size_t ; nVariations, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using auto-generated variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec or RVecs containing the varied values for the specified columns. ; [in]nVariationsnumber of variations returned by the expression. The corresponding tags will be ""0"", ""1"", etc. ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time compiled. It takes an nVariations parameter instead of a list of tag names. The varied results will be accessible via the keys of the dictionary with the form variationName:N where N is the corresponding sequential tag starting at 0 and going up to nVariations - 1. The example below shows how Vary() is used while dealing with multiple columns.; auto nominal_hx =; df.Vary({""x"", ""y""}, ""ROOT::RVec<ROOT::RVecD>{{x*0.9, x*1.1}, {y*0.9, y*1.1}}"", 2, ""xy""); .Histo1D(""x"", ""y"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""xy:0""].Draw(""SAME"");; hx[""xy:1""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 1144 of file RInterface.hxx. ◆ Vary() [5/11]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::initializer_list< std::string > ; colNames, . F && ; expression, . const ColumnNames_t & ; inputColumns, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing colu",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:149463,Security,access,accessed,149463,"es for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as the tags. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". Vary provides a natural and flexible syntax to define systematic variations that automatically propagate to Filters, Defines and results. RDataFrame usage of columns with attached variations does not change, but for results that depend on any varied quantity, a map/dictionary of varied results can be produced with ROOT::RDF::Experimental::VariationsFor (see the example below).; The dictionary will contain a ""nominal"" value (accessed with the ""nominal"" key) for the unchanged result, and values for each of the systematic variations that affected the result (via upstream Filters or via direct or indirect dependencies of the column values on some registered variations). The keys will be a composition of variation names and tags, e.g. ""pt:up"" and ""pt:down"" for the example below.; In the following example we add up/down variations of pt and fill a histogram with a quantity that depends on pt. We automatically obtain three histograms in output (""nominal"", ""pt:up"" and ""pt:down""): auto nominal_hx =; df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; RDataFrame computes all variations as part of a single loop over the data. In particular, this means that I/O and computation of values shared among variations only happen once for all variations. Thus, the event loop run-time ty",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:152291,Security,access,accessible,152291,"view ; variationName = """" . ). inline . Register systematic variations for a single existing column using auto-generated variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona callable that evaluates the varied values for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as the tags. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]nVariationsnumber of variations returned by the expression. The corresponding tags will be ""0"", ""1"", etc. ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". colName is used if none is provided. This overload of Vary takes an nVariations parameter instead of a list of tag names. The varied results will be accessible via the keys of the dictionary with the form variationName:N where N is the corresponding sequential tag starting at 0 and going up to nVariations - 1.; Example usage: auto nominal_hx =; df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, 2); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""x:0""].Draw(""SAME"");; hx[""x:1""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 901 of file RInterface.hxx. ◆ Vary() [10/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::string_view ; colName, . std::string_view ; expression, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName = """" . ). inline . Register systematic variations for a single existing column using custom variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona string containing valid C++ c",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:39511,Usability,simpl,simple,39511,"o the result of this action (of type Result_t). The RResultPtr returned by Book will point to this object. Note that this method can be called before Initialize(), because the RResultPtr is constructed before the event loop is started.; void Initialize(): this method is called once before starting the event-loop. Useful for setup operations. It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper, or copies of it, might be used for multiple event loops (e.g. in the presence of systematic variations).; void InitTask(TTreeReader *, unsigned int slot): each working thread shall call this method during the event loop, before processing a batch of entries. The pointer passed as argument, if not null, will point to the TTreeReader that RDataFrame has set up to read the task's batch of entries. It is passed to the helper to allow certain advanced optimizations it should not usually serve any purpose for the Helper. This method is often no-op for simple helpers.; void Exec(unsigned int slot, ColumnTypes...columnValues): each working thread shall call this method during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value: this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of the requested columns for the particular entry being processed.; void Finalize(): this method is called at the end of the event loop. Commonly used to finalize the contents of the result.; std::string GetActionName(): it returns a string identifier for this type of action that RDataFrame will use in diagnostics, SaveGraph(), etc. Optional methods; If these methods are implemented they enable extra functionality as per the description below. Result_t &PartialUpdate(unsigned int slot): if present, it must return the value of the partial result of this action for the given 'slot'. Different threads might call this method concurrently, but will do so w",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:54315,Usability,simpl,simplify,54315,"lineprivate . Definition at line 3151 of file RInterface.hxx. ◆ DefinePerSample() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename RetType_t = typename TTraits::CallableTraits<F>::ret_type> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::DefinePerSample ; (; std::string_view ; name, . F ; expression . ). inline . Define a new column that is updated when the input sample changes. ; Parameters. [in]nameThe name of the defined column. ; [in]expressionA C++ callable that computes the new value of the defined column. . Returnsthe first node of the computation graph for which the new quantity is defined.; The signature of the callable passed as second argument should be T(unsigned int slot, const ROOT::RDF::RSampleInfo &id) where:; T is the type of the defined column; slot is a number in the range [0, nThreads) that is different for each processing thread. This can simplify the definition of thread-safe callables if you are interested in using parallel capabilities of RDataFrame.; id is an instance of a ROOT::RDF::RSampleInfo object which contains information about the sample which is being processed (see the class docs for more information). DefinePerSample() is useful to e.g. define a quantity that depends on which TTree in which TFile is being processed or to inject a callback into the event loop that is only called when the processing of a new sample starts rather than at every entry.; The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often. Example usage:; ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; df.DefinePerSample(""weightbysample"",; [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; ROOT::RDF::RInterface::DefinePerSampleRInterface< Proxied, DS_t > DefinePerSample(std::string_view name, F expression)Define a new column that is updated when the input sample changes.",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html:678,Availability,avail,available,678,". ROOT: ROOT::RDF::RInterfaceBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::RDF::RInterfaceBase Class Reference. . Definition at line 52 of file RInterfaceBase.hxx. Public Member Functions;  RInterfaceBase (RDFDetail::RLoopManager &lm, const RDFInternal::RColumnRegister &colRegister);  ;  RInterfaceBase (std::shared_ptr< RDFDetail::RLoopManager > lm);  ; RDFDescription Describe ();  Return information about the dataframe. ;  ; ColumnNames_t GetColumnNames ();  Returns the names of the available columns. ;  ; std::string GetColumnType (std::string_view column);  Return the type of a given column as a string. ;  ; ColumnNames_t GetDefinedColumnNames ();  Returns the names of the defined columns. ;  ; unsigned int GetNFiles ();  ; unsigned int GetNRuns () const;  Gets the number of event loops run. ;  ; unsigned int GetNSlots () const;  Gets the number of data processing slots. ;  ; RVariationsDescription GetVariations () const;  Return a descriptor for the systematic variations registered in this branch of the computation graph. ;  ; bool HasColumn (std::string_view columnName);  Checks if a column is present in the dataset. ;  . Protected Member Functions; void AddDefaultColumns ();  ; template<typename... ColumnTypes> ; void CheckAndFillDSColumns (ColumnNames_t validCols, TTraits::TypeList< ColumnTypes... > typeList);  ; void CheckIMTDisabled (std::string_view callerName);  ; template<typename ActionTag , typename... ColTypes, typename ActionResultType , typename RDFNode , typename HelperArgType = ActionResultType, std::enable_if_t< RDFInternal::RNeedJitting< ColTypes... >::value, int > = 0> ; RResultPtr< ActionResultType > CreateAction (const ColumnNames_t &columns, const std::shared_ptr< ActionResultType > &r, const std::shared_ptr< HelperArgType > &helperArg, const std::shared_pt",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html:8671,Availability,avail,available,8671," of defined columns returned by GetDefinedColumnNames().; Please note that this is a convenience feature and the layout of the output can be subject to change and should be parsed via RDFDescription methods. Example usage:; RDataFrame df(10);; auto df2 = df.Define(""x"", ""1.f"").Define(""s"", ""\""myStr\"""");; // Describe the dataframe; df2.Describe().Print(); df2.Describe().Print(/*shortFormat=*&zwj;/true); std::cout << df2.Describe().AsString() << std::endl;; std::cout << df2.Describe().AsString(/*shortFormat=*&zwj;/true) << std::endl;; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41. Definition at line 237 of file RInterfaceBase.cxx. ◆ DescribeDataset(). std::string ROOT::RDF::RInterfaceBase::DescribeDataset ; (; ); const. protected . Definition at line 44 of file RInterfaceBase.cxx. ◆ GetColumnNames(). ROOT::RDF::ColumnNames_t ROOT::RDF::RInterfaceBase::GetColumnNames ; (; ). Returns the names of the available columns. ; Returnsthe container of column names.; This is not an action nor a transformation, just a query to the RDataFrame object. Example usage:; auto colNames = d.GetColumnNames();; // Print columns' names; for (auto &&colName : colNames) std::cout << colName << std::endl;; d#define d(i)Definition RSha256.hxx:102. Definition at line 152 of file RInterfaceBase.cxx. ◆ GetColumnType(). std::string ROOT::RDF::RInterfaceBase::GetColumnType ; (; std::string_view ; column). Return the type of a given column as a string. ; Returnsthe type of the required column.; This is not an action nor a transformation, just a query to the RDataFrame object. Example usage:; auto colType = d.GetColumnType(""columnName"");; // Print column type; std::cout << ""Column "" << colType << "" has type "" << colType << std::endl;. Definition at line 197 of file RInterfaceBase.cxx. ◆ GetColumnTypeNamesList(). ROOT::RDF::ColumnNames_t ROOT::RDF::RInterfaceBase::GetColumnTypeNamesList ; (; const ColumnNames",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html:13325,Availability,avail,available,13325,"). ColumnNames_t ROOT::RDF::RInterfaceBase::GetValidatedColumnNames ; (; const unsigned int ; nColumns, . const ColumnNames_t & ; columns . ). inlineprotected . Definition at line 130 of file RInterfaceBase.hxx. ◆ GetVariations(). ROOT::RDF::RVariationsDescription ROOT::RDF::RInterfaceBase::GetVariations ; (; ); const. Return a descriptor for the systematic variations registered in this branch of the computation graph. ; This is not an action nor a transformation, just a simple utility to inspect the systematic variations that have been registered with Vary() up to this node. When called on the root node, it returns an empty descriptor. Example usage:; auto variations = d.GetVariations();; variations.Print();. Definition at line 334 of file RInterfaceBase.cxx. ◆ HasColumn(). bool ROOT::RDF::RInterfaceBase::HasColumn ; (; std::string_view ; columnName). Checks if a column is present in the dataset. ; Returnstrue if the column is available, false otherwise; This method checks if a column is part of the input ROOT dataset, has been defined or can be provided by the data source.; Example usage: ROOT::RDataFrame base(1);; auto rdf = base.Define(""definedColumn"", [](){return 0;});; rdf.HasColumn(""definedColumn""); // true: we defined it; rdf.HasColumn(""rdfentry_""); // true: it's always there; rdf.HasColumn(""foo""); // false: it is not there. Definition at line 353 of file RInterfaceBase.cxx. ◆ SanityChecksForVary(). template<typename RetType > . void ROOT::RDF::RInterfaceBase::SanityChecksForVary ; (; const std::vector< std::string > & ; colNames, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName . ). inlineprotected . Definition at line 71 of file RInterfaceBase.hxx. Member Data Documentation. ◆ fColRegister. RDFInternal::RColumnRegister ROOT::RDF::RInterfaceBase::fColRegister. protected . Contains the columns defined up to this node. ; Definition at line 60 of file RInterfaceBase.hxx. ◆ fDataSource. RDataSource* ROOT::RDF::RInterfaceBa",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html:7598,Integrability,depend,dependent,7598,"actions, r and helperArg will refer to the same object, because the only argument to forward to the action helper is the result value itself. We need the distinction for actions such as Snapshot or Cache, for which the constructor arguments of the action helper are different from the returned value. ; Definition at line 150 of file RInterfaceBase.hxx. ◆ Describe(). ROOT::RDF::RDFDescription ROOT::RDF::RInterfaceBase::Describe ; (; ). Return information about the dataframe. ; Returnsinformation about the dataframe as RDFDescription object; This convenience function describes the dataframe and combines the following information:; Number of event loops run, see GetNRuns(); Number of total and defined columns, see GetColumnNames() and GetDefinedColumnNames(); Column names, see GetColumnNames(); Column types, see GetColumnType(); Number of processing slots, see GetNSlots(). This is not an action nor a transformation, just a query to the RDataFrame object. The result is dependent on the node from which this method is called, e.g. the list of defined columns returned by GetDefinedColumnNames().; Please note that this is a convenience feature and the layout of the output can be subject to change and should be parsed via RDFDescription methods. Example usage:; RDataFrame df(10);; auto df2 = df.Define(""x"", ""1.f"").Define(""s"", ""\""myStr\"""");; // Describe the dataframe; df2.Describe().Print(); df2.Describe().Print(/*shortFormat=*&zwj;/true); std::cout << df2.Describe().AsString() << std::endl;; std::cout << df2.Describe().AsString(/*shortFormat=*&zwj;/true) << std::endl;; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41. Definition at line 237 of file RInterfaceBase.cxx. ◆ DescribeDataset(). std::string ROOT::RDF::RInterfaceBase::DescribeDataset ; (; ); const. protected . Definition at line 44 of file RInterfaceBase.cxx. ◆ GetColumnNames(). ROOT::RDF::ColumnNames_t ROOT::RDF::RInterfaceBas",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html:8266,Integrability,interface,interface,8266,"lowing information:; Number of event loops run, see GetNRuns(); Number of total and defined columns, see GetColumnNames() and GetDefinedColumnNames(); Column names, see GetColumnNames(); Column types, see GetColumnType(); Number of processing slots, see GetNSlots(). This is not an action nor a transformation, just a query to the RDataFrame object. The result is dependent on the node from which this method is called, e.g. the list of defined columns returned by GetDefinedColumnNames().; Please note that this is a convenience feature and the layout of the output can be subject to change and should be parsed via RDFDescription methods. Example usage:; RDataFrame df(10);; auto df2 = df.Define(""x"", ""1.f"").Define(""s"", ""\""myStr\"""");; // Describe the dataframe; df2.Describe().Print(); df2.Describe().Print(/*shortFormat=*&zwj;/true); std::cout << df2.Describe().AsString() << std::endl;; std::cout << df2.Describe().AsString(/*shortFormat=*&zwj;/true) << std::endl;; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41. Definition at line 237 of file RInterfaceBase.cxx. ◆ DescribeDataset(). std::string ROOT::RDF::RInterfaceBase::DescribeDataset ; (; ); const. protected . Definition at line 44 of file RInterfaceBase.cxx. ◆ GetColumnNames(). ROOT::RDF::ColumnNames_t ROOT::RDF::RInterfaceBase::GetColumnNames ; (; ). Returns the names of the available columns. ; Returnsthe container of column names.; This is not an action nor a transformation, just a query to the RDataFrame object. Example usage:; auto colNames = d.GetColumnNames();; // Print columns' names; for (auto &&colName : colNames) std::cout << colName << std::endl;; d#define d(i)Definition RSha256.hxx:102. Definition at line 152 of file RInterfaceBase.cxx. ◆ GetColumnType(). std::string ROOT::RDF::RInterfaceBase::GetColumnType ; (; std::string_view ; column). Return the type of a given column as a string. ; Returnsthe type of the requi",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html:12199,Performance,multi-thread,multi-threading,12199,"Value(); // trigger another event loop; std::cout << df.GetNRuns() << std::endl; // prints ""2"". Definition at line 402 of file RInterfaceBase.cxx. ◆ GetNSlots(). unsigned int ROOT::RDF::RInterfaceBase::GetNSlots ; (; ); const. Gets the number of data processing slots. ; ReturnsThe number of data processing slots used by this RDataFrame instance; This method returns the number of data processing slots used by this RDataFrame instance. This number is influenced by the global switch ROOT::EnableImplicitMT().; Example usage: ROOT::EnableImplicitMT(6); ROOT::RDataFrame df(1);; std::cout << df.GetNSlots() << std::endl; // prints ""6""; ROOT::RDF::RInterfaceBase::GetNSlotsunsigned int GetNSlots() constGets the number of data processing slots.Definition RInterfaceBase.cxx:383; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539. Definition at line 383 of file RInterfaceBase.cxx. ◆ GetValidatedColumnNames(). ColumnNames_t ROOT::RDF::RInterfaceBase::GetValidatedColumnNames ; (; const unsigned int ; nColumns, . const ColumnNames_t & ; columns . ). inlineprotected . Definition at line 130 of file RInterfaceBase.hxx. ◆ GetVariations(). ROOT::RDF::RVariationsDescription ROOT::RDF::RInterfaceBase::GetVariations ; (; ); const. Return a descriptor for the systematic variations registered in this branch of the computation graph. ; This is not an action nor a transformation, just a simple utility to inspect the systematic variations that have been registered with Vary() up to this node. When called on the root node, it returns an empty descriptor. Example usage:; auto variations = d.GetVariations();; variations.Print();. Definition at line 334 of file RInterfaceBase.cxx. ◆ HasColumn(). bool ROOT::RDF::RInterf",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html:10005,Usability,simpl,simple,10005,"ne 152 of file RInterfaceBase.cxx. ◆ GetColumnType(). std::string ROOT::RDF::RInterfaceBase::GetColumnType ; (; std::string_view ; column). Return the type of a given column as a string. ; Returnsthe type of the required column.; This is not an action nor a transformation, just a query to the RDataFrame object. Example usage:; auto colType = d.GetColumnType(""columnName"");; // Print column type; std::cout << ""Column "" << colType << "" has type "" << colType << std::endl;. Definition at line 197 of file RInterfaceBase.cxx. ◆ GetColumnTypeNamesList(). ROOT::RDF::ColumnNames_t ROOT::RDF::RInterfaceBase::GetColumnTypeNamesList ; (; const ColumnNames_t & ; columnList). protected . Definition at line 407 of file RInterfaceBase.cxx. ◆ GetDefinedColumnNames(). ROOT::RDF::ColumnNames_t ROOT::RDF::RInterfaceBase::GetDefinedColumnNames ; (; ). Returns the names of the defined columns. ; Returnsthe container of the defined column names.; This is not an action nor a transformation, just a simple utility to get the columns names that have been defined up to the node. If no column has been defined, e.g. on a root node, it returns an empty collection. Example usage:; auto defColNames = d.GetDefinedColumnNames();; // Print defined columns' names; for (auto &&defColName : defColNames) std::cout << defColName << std::endl;. Definition at line 309 of file RInterfaceBase.cxx. ◆ GetLoopManager(). RDFDetail::RLoopManager * ROOT::RDF::RInterfaceBase::GetLoopManager ; (; ); const. inlineprotected . Definition at line 128 of file RInterfaceBase.hxx. ◆ GetNFiles(). unsigned int ROOT::RDF::RInterfaceBase::GetNFiles ; (; ). Definition at line 27 of file RInterfaceBase.cxx. ◆ GetNRuns(). unsigned int ROOT::RDF::RInterfaceBase::GetNRuns ; (; ); const. Gets the number of event loops run. ; ReturnsThe number of event loops run by this RDataFrame instance; This method returns the number of events loops run so far by this RDataFrame instance.; Example usage: ROOT::RDataFrame df(1);; std::cout << df.GetNR",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html:12859,Usability,simpl,simple,12859,"() constGets the number of data processing slots.Definition RInterfaceBase.cxx:383; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539. Definition at line 383 of file RInterfaceBase.cxx. ◆ GetValidatedColumnNames(). ColumnNames_t ROOT::RDF::RInterfaceBase::GetValidatedColumnNames ; (; const unsigned int ; nColumns, . const ColumnNames_t & ; columns . ). inlineprotected . Definition at line 130 of file RInterfaceBase.hxx. ◆ GetVariations(). ROOT::RDF::RVariationsDescription ROOT::RDF::RInterfaceBase::GetVariations ; (; ); const. Return a descriptor for the systematic variations registered in this branch of the computation graph. ; This is not an action nor a transformation, just a simple utility to inspect the systematic variations that have been registered with Vary() up to this node. When called on the root node, it returns an empty descriptor. Example usage:; auto variations = d.GetVariations();; variations.Print();. Definition at line 334 of file RInterfaceBase.cxx. ◆ HasColumn(). bool ROOT::RDF::RInterfaceBase::HasColumn ; (; std::string_view ; columnName). Checks if a column is present in the dataset. ; Returnstrue if the column is available, false otherwise; This method checks if a column is part of the input ROOT dataset, has been defined or can be provided by the data source.; Example usage: ROOT::RDataFrame base(1);; auto rdf = base.Define(""definedColumn"", [](){return 0;});; rdf.HasColumn(""definedColumn""); // true: we defined it; rdf.HasColumn(""rdfentry_""); // true: it's always there; rdf.HasColumn(""foo""); // false: it is not there. Definition at line 353 of file RInterfaceBase.cxx. ◆ SanityChecksForVary(). template<typename RetType > . void ROOT::RDF::RInterfaceBase::SanityChe",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterfaceBase.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:1157,Availability,error,error,1157,"ng...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::RResultPtr< T > Class Template ReferenceDataframe. ; template<typename T>; class ROOT::RDF::RResultPtr< T >Smart pointer for the return type of actions. ; A wrapper around the result of RDataFrame actions able to trigger calculations lazily. Template Parameters. TType of the action result. A smart pointer which allows to access the result of a RDataFrame action. The methods of the encapsulated object can be accessed via the arrow operator. Upon invocation of the arrow operator or dereferencing (operator*), the loop on the events and calculations of all scheduled actions are executed if needed. It is possible to iterate on the result proxy if the proxied object is a collection. for (auto& myItem : myResultProxy) { ... };; If iteration is not supported by the type of the proxied object, a compilation error is thrown. ; Definition at line 119 of file RResultPtr.hxx. Public Types; using Value_t = T;  Convenience alias to simplify access to proxied type. ;  . Public Member Functions;  RResultPtr ()=default;  ;  RResultPtr (const RResultPtr &)=default;  ; template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> ;  RResultPtr (const RResultPtr< T2 > &r);  Convert a RResultPtr<T2> to a RResultPtr<T>. ;  ;  RResultPtr (RResultPtr &&)=default;  ; RIterationHelper< T >::Iterator_t begin ();  Return an iterator to the beginning of the contained object if this makes sense, throw a compilation error otherwise. ;  ; RIterationHelper< T >::Iterator_t end ();  Return an iterator to the end of the contained object if this makes sense, throw a compilation error otherwise. ;  ; T * GetPtr ();  Get the pointer to the encapsulated object. ;  ; const T & GetValue ();  Get a const reference to the e",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:1822,Availability,error,error,1822,"apsulated object can be accessed via the arrow operator. Upon invocation of the arrow operator or dereferencing (operator*), the loop on the events and calculations of all scheduled actions are executed if needed. It is possible to iterate on the result proxy if the proxied object is a collection. for (auto& myItem : myResultProxy) { ... };; If iteration is not supported by the type of the proxied object, a compilation error is thrown. ; Definition at line 119 of file RResultPtr.hxx. Public Types; using Value_t = T;  Convenience alias to simplify access to proxied type. ;  . Public Member Functions;  RResultPtr ()=default;  ;  RResultPtr (const RResultPtr &)=default;  ; template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> ;  RResultPtr (const RResultPtr< T2 > &r);  Convert a RResultPtr<T2> to a RResultPtr<T>. ;  ;  RResultPtr (RResultPtr &&)=default;  ; RIterationHelper< T >::Iterator_t begin ();  Return an iterator to the beginning of the contained object if this makes sense, throw a compilation error otherwise. ;  ; RIterationHelper< T >::Iterator_t end ();  Return an iterator to the end of the contained object if this makes sense, throw a compilation error otherwise. ;  ; T * GetPtr ();  Get the pointer to the encapsulated object. ;  ; const T & GetValue ();  Get a const reference to the encapsulated object. ;  ; bool IsReady () const;  Check whether the result has already been computed. ;  ; RResultPtr< T > & OnPartialResult (ULong64_t everyNEvents, std::function< void(T &)> callback);  Register a callback that RDataFrame will execute ""everyNEvents"" on a partial result. ;  ; RResultPtr< T > & OnPartialResultSlot (ULong64_t everyNEvents, std::function< void(unsigned int, T &)> callback);  Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ;  ;  operator bool () const;  ; T & operator* ();  Get a pointer to the encapsulated ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:1982,Availability,error,error,1982,"tions are executed if needed. It is possible to iterate on the result proxy if the proxied object is a collection. for (auto& myItem : myResultProxy) { ... };; If iteration is not supported by the type of the proxied object, a compilation error is thrown. ; Definition at line 119 of file RResultPtr.hxx. Public Types; using Value_t = T;  Convenience alias to simplify access to proxied type. ;  . Public Member Functions;  RResultPtr ()=default;  ;  RResultPtr (const RResultPtr &)=default;  ; template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> ;  RResultPtr (const RResultPtr< T2 > &r);  Convert a RResultPtr<T2> to a RResultPtr<T>. ;  ;  RResultPtr (RResultPtr &&)=default;  ; RIterationHelper< T >::Iterator_t begin ();  Return an iterator to the beginning of the contained object if this makes sense, throw a compilation error otherwise. ;  ; RIterationHelper< T >::Iterator_t end ();  Return an iterator to the end of the contained object if this makes sense, throw a compilation error otherwise. ;  ; T * GetPtr ();  Get the pointer to the encapsulated object. ;  ; const T & GetValue ();  Get a const reference to the encapsulated object. ;  ; bool IsReady () const;  Check whether the result has already been computed. ;  ; RResultPtr< T > & OnPartialResult (ULong64_t everyNEvents, std::function< void(T &)> callback);  Register a callback that RDataFrame will execute ""everyNEvents"" on a partial result. ;  ; RResultPtr< T > & OnPartialResultSlot (ULong64_t everyNEvents, std::function< void(unsigned int, T &)> callback);  Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ;  ;  operator bool () const;  ; T & operator* ();  Get a pointer to the encapsulated object. ;  ; T * operator-> ();  Get a pointer to the encapsulated object. ;  ; RResultPtr & operator= (const RResultPtr &)=default;  ; RResultPtr & operator= (RResultPtr &&)=default; ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:7101,Availability,error,error,7101,"me T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; const RResultPtr< T > & ; ). default . ◆ RResultPtr() [4/5]. template<typename T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; RResultPtr< T > && ; ). default . ◆ RResultPtr() [5/5]. template<typename T > . template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; const RResultPtr< T2 > & ; r). inline . Convert a RResultPtr<T2> to a RResultPtr<T>. ; Useful e.g. to store a number of RResultPtr<TH1D> and RResultPtr<TH2D> in a std::vector<RResultPtr<TH1>>. The requirements on T2 and T are the same as for conversion between std::shared_ptr<T2> and std::shared_ptr<T>. ; Definition at line 222 of file RResultPtr.hxx. Member Function Documentation. ◆ begin(). template<typename T > . RIterationHelper< T >::Iterator_t ROOT::RDF::RResultPtr< T >::begin ; (; ). inline . Return an iterator to the beginning of the contained object if this makes sense, throw a compilation error otherwise. ; Definition at line 257 of file RResultPtr.hxx. ◆ end(). template<typename T > . RIterationHelper< T >::Iterator_t ROOT::RDF::RResultPtr< T >::end ; (; ). inline . Return an iterator to the end of the contained object if this makes sense, throw a compilation error otherwise. ; Definition at line 267 of file RResultPtr.hxx. ◆ Get(). template<typename T > . T * ROOT::RDF::RResultPtr< T >::Get ; (; ). inlineprivate . Get the pointer to the encapsulated result. ; Ownership is not transferred to the caller. Triggers event loop and execution of all actions booked in the associated RLoopManager. ; Definition at line 186 of file RResultPtr.hxx. ◆ GetPtr(). template<typename T > . T * ROOT::RDF::RResultPtr< T >::GetPtr ; (; ). inline . Get the pointer to the encapsulated object. ; Triggers event loop and execution of all actions booked in the associated RLoopManager. ; Definition at line 236 of file RResultPtr.hxx. ◆ GetValue(). templ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:7378,Availability,error,error,7378,"T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; const RResultPtr< T2 > & ; r). inline . Convert a RResultPtr<T2> to a RResultPtr<T>. ; Useful e.g. to store a number of RResultPtr<TH1D> and RResultPtr<TH2D> in a std::vector<RResultPtr<TH1>>. The requirements on T2 and T are the same as for conversion between std::shared_ptr<T2> and std::shared_ptr<T>. ; Definition at line 222 of file RResultPtr.hxx. Member Function Documentation. ◆ begin(). template<typename T > . RIterationHelper< T >::Iterator_t ROOT::RDF::RResultPtr< T >::begin ; (; ). inline . Return an iterator to the beginning of the contained object if this makes sense, throw a compilation error otherwise. ; Definition at line 257 of file RResultPtr.hxx. ◆ end(). template<typename T > . RIterationHelper< T >::Iterator_t ROOT::RDF::RResultPtr< T >::end ; (; ). inline . Return an iterator to the end of the contained object if this makes sense, throw a compilation error otherwise. ; Definition at line 267 of file RResultPtr.hxx. ◆ Get(). template<typename T > . T * ROOT::RDF::RResultPtr< T >::Get ; (; ). inlineprivate . Get the pointer to the encapsulated result. ; Ownership is not transferred to the caller. Triggers event loop and execution of all actions booked in the associated RLoopManager. ; Definition at line 186 of file RResultPtr.hxx. ◆ GetPtr(). template<typename T > . T * ROOT::RDF::RResultPtr< T >::GetPtr ; (; ). inline . Get the pointer to the encapsulated object. ; Triggers event loop and execution of all actions booked in the associated RLoopManager. ; Definition at line 236 of file RResultPtr.hxx. ◆ GetValue(). template<typename T > . const T & ROOT::RDF::RResultPtr< T >::GetValue ; (; ). inline . Get a const reference to the encapsulated object. ; Triggers event loop and execution of all actions booked in the associated RLoopManager. ; Definition at line 228 of file RResultPtr.hxx. ◆ IsRead",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:10911,Availability,avail,available,10911,"f.Histo1D(""x"");; TCanvas c(""c"",""x hist"");; h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); h_.Draw(); c.Update(); });; h->Draw(); // event loop runs here, this `Draw` is executed after the event loop is finished; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; A value of 0 for everyNEvents indicates the callback must be executed only once, before running the event loop. A conveniece definition kOnce is provided to make this fact more expressive in user code (see snippet below). Multiple callbacks can be registered with the same RResultPtr (i.e. results of RDataFrame actions) and will be executed sequentially. Callbacks are executed in the order they were registered. The type of the value contained in a RResultPtr is also available as RResultPtr<T>::Value_t, e.g. auto h = tdf.Histo1D(""x"");; // h.kOnce is 0; // decltype(h)::Value_t is TH1D; When implicit multi-threading is enabled, the callback:; will never be executed by multiple threads concurrently: it needs not be thread-safe. For example the snippet above that draws the partial histogram on a canvas works seamlessly in multi-thread event loops.; will always be executed ""everyNEvents"": partial results will ""contain"" that number of events more from one call to the next; might be executed by a different worker thread at different times: the value of std::this_thread::get_id() might change between calls. To register a callback that is called by each worker thread (concurrently) every N events one can use OnPartialResultSlot(). ; Definition at line 318 of file RResultPtr.hxx. ◆ OnPartialResultSlot(). template<typename T > . RResultPtr< T > & ROOT::RDF::RResultPtr< T >::OnPartialResultSlot ; (; ULong64_t ; everyNEvents, . std::function< void(unsi",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:906,Energy Efficiency,schedul,scheduled,906,". ROOT: ROOT::RDF::RResultPtr< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::RResultPtr< T > Class Template ReferenceDataframe. ; template<typename T>; class ROOT::RDF::RResultPtr< T >Smart pointer for the return type of actions. ; A wrapper around the result of RDataFrame actions able to trigger calculations lazily. Template Parameters. TType of the action result. A smart pointer which allows to access the result of a RDataFrame action. The methods of the encapsulated object can be accessed via the arrow operator. Upon invocation of the arrow operator or dereferencing (operator*), the loop on the events and calculations of all scheduled actions are executed if needed. It is possible to iterate on the result proxy if the proxied object is a collection. for (auto& myItem : myResultProxy) { ... };; If iteration is not supported by the type of the proxied object, a compilation error is thrown. ; Definition at line 119 of file RResultPtr.hxx. Public Types; using Value_t = T;  Convenience alias to simplify access to proxied type. ;  . Public Member Functions;  RResultPtr ()=default;  ;  RResultPtr (const RResultPtr &)=default;  ; template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> ;  RResultPtr (const RResultPtr< T2 > &r);  Convert a RResultPtr<T2> to a RResultPtr<T>. ;  ;  RResultPtr (RResultPtr &&)=default;  ; RIterationHelper< T >::Iterator_t begin ();  Return an iterator to the beginning of the contained object if this makes sense, throw a compilation error otherwise. ;  ; RIterationHelper< T >::Iterator_t end ();  Return an iterator to the end of the contained object if this makes sense, throw a compilation error otherwise. ; ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:504,Integrability,wrap,wrapper,504,". ROOT: ROOT::RDF::RResultPtr< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::RResultPtr< T > Class Template ReferenceDataframe. ; template<typename T>; class ROOT::RDF::RResultPtr< T >Smart pointer for the return type of actions. ; A wrapper around the result of RDataFrame actions able to trigger calculations lazily. Template Parameters. TType of the action result. A smart pointer which allows to access the result of a RDataFrame action. The methods of the encapsulated object can be accessed via the arrow operator. Upon invocation of the arrow operator or dereferencing (operator*), the loop on the events and calculations of all scheduled actions are executed if needed. It is possible to iterate on the result proxy if the proxied object is a collection. for (auto& myItem : myResultProxy) { ... };; If iteration is not supported by the type of the proxied object, a compilation error is thrown. ; Definition at line 119 of file RResultPtr.hxx. Public Types; using Value_t = T;  Convenience alias to simplify access to proxied type. ;  . Public Member Functions;  RResultPtr ()=default;  ;  RResultPtr (const RResultPtr &)=default;  ; template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> ;  RResultPtr (const RResultPtr< T2 > &r);  Convert a RResultPtr<T2> to a RResultPtr<T>. ;  ;  RResultPtr (RResultPtr &&)=default;  ; RIterationHelper< T >::Iterator_t begin ();  Return an iterator to the beginning of the contained object if this makes sense, throw a compilation error otherwise. ;  ; RIterationHelper< T >::Iterator_t end ();  Return an iterator to the end of the contained object if this makes sense, throw a compilation error otherwise. ; ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:3754,Integrability,wrap,wrapped,3754,"object. ;  ; T * operator-> ();  Get a pointer to the encapsulated object. ;  ; RResultPtr & operator= (const RResultPtr &)=default;  ; RResultPtr & operator= (RResultPtr &&)=default;  . Static Public Attributes; static constexpr ULong64_t kOnce = 0ull;  Convenience definition to express a callback must be executed once. ;  . Private Types; using SPT_t = std::shared_ptr< T >;  . Private Member Functions;  RResultPtr (std::shared_ptr< T > objPtr, RDFDetail::RLoopManager *lm, std::shared_ptr< RDFInternal::RActionBase > actionPtr);  ; T * Get ();  Get the pointer to the encapsulated result. ;  ; void ThrowIfNull ();  ; void TriggerRun ();  Triggers the event loop in the RLoopManager. ;  . Private Attributes; std::shared_ptr< RDFInternal::RActionBase > fActionPtr;  Owning pointer to the action that will produce this result. ;  ; RDFDetail::RLoopManager * fLoopManager = nullptr;  Non-owning pointer to the RLoopManager at the root of this computation graph. ;  ; SPT_t fObjPtr;  Shared pointer encapsulating the wrapped result. ;  . Friends; template<typename T1 > ; class RResultPtr;  ; template<class T1 , class T2 > ; bool operator!= (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator!= (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator!= (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; template<class T1 , class T2 > ; bool operator== (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator== (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator== (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; std::unique_ptr< RDFDetail::RMergeableValue< T > > RDFDetail::GetMergeableValue (RResultPtr< T > &rptr);  ; template<typename T1 > ; RResultPtr< T1 > RDFDetail::MakeResultPtr (const std::shared_ptr< T1 > &, ::ROOT::Detail::RDF::RLoopManager &, std::shared_ptr< RDFInternal::RActionBase >);  ; ROOT::Internal::RDF",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:18918,Integrability,wrap,wrapped,18918,F::CloneResultAndAction [2/2]. template<typename T > . RResultPtr< T > ROOT::Internal::RDF::CloneResultAndAction ; (; const RResultPtr< T > & ; inptr). friend . ◆ ROOT::Internal::RDF::GraphDrawing::GraphCreatorHelper. template<typename T > . friend class ROOT::Internal::RDF::GraphDrawing::GraphCreatorHelper. friend . Definition at line 148 of file RResultPtr.hxx. ◆ ROOT::RDF::Experimental::VariationsFor. template<typename T > . template<typename T1 > . ROOT::RDF::Experimental::RResultMap< T1 > ROOT::RDF::Experimental::VariationsFor ; (; RResultPtr< T1 > ; resPtr). friend . ◆ RResultHandle. template<typename T > . friend class RResultHandle. friend . Definition at line 150 of file RResultPtr.hxx. Member Data Documentation. ◆ fActionPtr. template<typename T > . std::shared_ptr<RDFInternal::RActionBase> ROOT::RDF::RResultPtr< T >::fActionPtr. private . Owning pointer to the action that will produce this result. ; Ownership is shared with other copies of this ResultPtr. ; Definition at line 178 of file RResultPtr.hxx. ◆ fLoopManager. template<typename T > . RDFDetail::RLoopManager* ROOT::RDF::RResultPtr< T >::fLoopManager = nullptr. private . Non-owning pointer to the RLoopManager at the root of this computation graph. ; The RLoopManager is guaranteed to be always in scope if fLoopManager is not a nullptr. ; Definition at line 174 of file RResultPtr.hxx. ◆ fObjPtr. template<typename T > . SPT_t ROOT::RDF::RResultPtr< T >::fObjPtr. private . Shared pointer encapsulating the wrapped result. ; Definition at line 175 of file RResultPtr.hxx. ◆ kOnce. template<typename T > . constexpr ULong64_t ROOT::RDF::RResultPtr< T >::kOnce = 0ull. staticconstexpr . Convenience definition to express a callback must be executed once. ; Definition at line 207 of file RResultPtr.hxx. tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx; tree/dataframe/inc/ROOT/RResultPtr.hxx. ROOTRDFRResultPtr. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:2602,Performance,concurren,concurrently,2602,"e, int > = 0> ;  RResultPtr (const RResultPtr< T2 > &r);  Convert a RResultPtr<T2> to a RResultPtr<T>. ;  ;  RResultPtr (RResultPtr &&)=default;  ; RIterationHelper< T >::Iterator_t begin ();  Return an iterator to the beginning of the contained object if this makes sense, throw a compilation error otherwise. ;  ; RIterationHelper< T >::Iterator_t end ();  Return an iterator to the end of the contained object if this makes sense, throw a compilation error otherwise. ;  ; T * GetPtr ();  Get the pointer to the encapsulated object. ;  ; const T & GetValue ();  Get a const reference to the encapsulated object. ;  ; bool IsReady () const;  Check whether the result has already been computed. ;  ; RResultPtr< T > & OnPartialResult (ULong64_t everyNEvents, std::function< void(T &)> callback);  Register a callback that RDataFrame will execute ""everyNEvents"" on a partial result. ;  ; RResultPtr< T > & OnPartialResultSlot (ULong64_t everyNEvents, std::function< void(unsigned int, T &)> callback);  Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ;  ;  operator bool () const;  ; T & operator* ();  Get a pointer to the encapsulated object. ;  ; T * operator-> ();  Get a pointer to the encapsulated object. ;  ; RResultPtr & operator= (const RResultPtr &)=default;  ; RResultPtr & operator= (RResultPtr &&)=default;  . Static Public Attributes; static constexpr ULong64_t kOnce = 0ull;  Convenience definition to express a callback must be executed once. ;  . Private Types; using SPT_t = std::shared_ptr< T >;  . Private Member Functions;  RResultPtr (std::shared_ptr< T > objPtr, RDFDetail::RLoopManager *lm, std::shared_ptr< RDFInternal::RActionBase > actionPtr);  ; T * Get ();  Get the pointer to the encapsulated result. ;  ; void ThrowIfNull ();  ; void TriggerRun ();  Triggers the event loop in the RLoopManager. ;  . Private Attributes; std::shared_ptr< RDFInternal::RActionBase > fActionPtr;  Owning pointer to the a",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:11045,Performance,multi-thread,multi-threading,11045,"d after the event loop is finished; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; A value of 0 for everyNEvents indicates the callback must be executed only once, before running the event loop. A conveniece definition kOnce is provided to make this fact more expressive in user code (see snippet below). Multiple callbacks can be registered with the same RResultPtr (i.e. results of RDataFrame actions) and will be executed sequentially. Callbacks are executed in the order they were registered. The type of the value contained in a RResultPtr is also available as RResultPtr<T>::Value_t, e.g. auto h = tdf.Histo1D(""x"");; // h.kOnce is 0; // decltype(h)::Value_t is TH1D; When implicit multi-threading is enabled, the callback:; will never be executed by multiple threads concurrently: it needs not be thread-safe. For example the snippet above that draws the partial histogram on a canvas works seamlessly in multi-thread event loops.; will always be executed ""everyNEvents"": partial results will ""contain"" that number of events more from one call to the next; might be executed by a different worker thread at different times: the value of std::this_thread::get_id() might change between calls. To register a callback that is called by each worker thread (concurrently) every N events one can use OnPartialResultSlot(). ; Definition at line 318 of file RResultPtr.hxx. ◆ OnPartialResultSlot(). template<typename T > . RResultPtr< T > & ROOT::RDF::RResultPtr< T >::OnPartialResultSlot ; (; ULong64_t ; everyNEvents, . std::function< void(unsigned int, T &)> ; callback . ). inline . Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ; Parameters. [in]ev",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:11131,Performance,concurren,concurrently,11131,"d after the event loop is finished; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; A value of 0 for everyNEvents indicates the callback must be executed only once, before running the event loop. A conveniece definition kOnce is provided to make this fact more expressive in user code (see snippet below). Multiple callbacks can be registered with the same RResultPtr (i.e. results of RDataFrame actions) and will be executed sequentially. Callbacks are executed in the order they were registered. The type of the value contained in a RResultPtr is also available as RResultPtr<T>::Value_t, e.g. auto h = tdf.Histo1D(""x"");; // h.kOnce is 0; // decltype(h)::Value_t is TH1D; When implicit multi-threading is enabled, the callback:; will never be executed by multiple threads concurrently: it needs not be thread-safe. For example the snippet above that draws the partial histogram on a canvas works seamlessly in multi-thread event loops.; will always be executed ""everyNEvents"": partial results will ""contain"" that number of events more from one call to the next; might be executed by a different worker thread at different times: the value of std::this_thread::get_id() might change between calls. To register a callback that is called by each worker thread (concurrently) every N events one can use OnPartialResultSlot(). ; Definition at line 318 of file RResultPtr.hxx. ◆ OnPartialResultSlot(). template<typename T > . RResultPtr< T > & ROOT::RDF::RResultPtr< T >::OnPartialResultSlot ; (; ULong64_t ; everyNEvents, . std::function< void(unsigned int, T &)> ; callback . ). inline . Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ; Parameters. [in]ev",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:11269,Performance,multi-thread,multi-thread,11269,"Canvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; A value of 0 for everyNEvents indicates the callback must be executed only once, before running the event loop. A conveniece definition kOnce is provided to make this fact more expressive in user code (see snippet below). Multiple callbacks can be registered with the same RResultPtr (i.e. results of RDataFrame actions) and will be executed sequentially. Callbacks are executed in the order they were registered. The type of the value contained in a RResultPtr is also available as RResultPtr<T>::Value_t, e.g. auto h = tdf.Histo1D(""x"");; // h.kOnce is 0; // decltype(h)::Value_t is TH1D; When implicit multi-threading is enabled, the callback:; will never be executed by multiple threads concurrently: it needs not be thread-safe. For example the snippet above that draws the partial histogram on a canvas works seamlessly in multi-thread event loops.; will always be executed ""everyNEvents"": partial results will ""contain"" that number of events more from one call to the next; might be executed by a different worker thread at different times: the value of std::this_thread::get_id() might change between calls. To register a callback that is called by each worker thread (concurrently) every N events one can use OnPartialResultSlot(). ; Definition at line 318 of file RResultPtr.hxx. ◆ OnPartialResultSlot(). template<typename T > . RResultPtr< T > & ROOT::RDF::RResultPtr< T >::OnPartialResultSlot ; (; ULong64_t ; everyNEvents, . std::function< void(unsigned int, T &)> ; callback . ). inline . Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ; Parameters. [in]everyNEventsFrequency at which the callback will be called by each thread, as a number of events processed ; [in]callbackA callable with signature void(unsi",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:11617,Performance,concurren,concurrently,11617," expressive in user code (see snippet below). Multiple callbacks can be registered with the same RResultPtr (i.e. results of RDataFrame actions) and will be executed sequentially. Callbacks are executed in the order they were registered. The type of the value contained in a RResultPtr is also available as RResultPtr<T>::Value_t, e.g. auto h = tdf.Histo1D(""x"");; // h.kOnce is 0; // decltype(h)::Value_t is TH1D; When implicit multi-threading is enabled, the callback:; will never be executed by multiple threads concurrently: it needs not be thread-safe. For example the snippet above that draws the partial histogram on a canvas works seamlessly in multi-thread event loops.; will always be executed ""everyNEvents"": partial results will ""contain"" that number of events more from one call to the next; might be executed by a different worker thread at different times: the value of std::this_thread::get_id() might change between calls. To register a callback that is called by each worker thread (concurrently) every N events one can use OnPartialResultSlot(). ; Definition at line 318 of file RResultPtr.hxx. ◆ OnPartialResultSlot(). template<typename T > . RResultPtr< T > & ROOT::RDF::RResultPtr< T >::OnPartialResultSlot ; (; ULong64_t ; everyNEvents, . std::function< void(unsigned int, T &)> ; callback . ). inline . Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ; Parameters. [in]everyNEventsFrequency at which the callback will be called by each thread, as a number of events processed ; [in]callbackA callable with signature void(unsigned int, Value_t&) where Value_t is the type of the value contained in this RResultPtr . Returnsthis RResultPtr, to allow chaining of OnPartialResultSlot with other calls; See OnPartialResult for a generic explanation of the callback mechanism. Compared to OnPartialResult, this method has two major differences:; all worker threads invoke the callback once every specified number of",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:12014,Performance,concurren,concurrently,12014," decltype(h)::Value_t is TH1D; When implicit multi-threading is enabled, the callback:; will never be executed by multiple threads concurrently: it needs not be thread-safe. For example the snippet above that draws the partial histogram on a canvas works seamlessly in multi-thread event loops.; will always be executed ""everyNEvents"": partial results will ""contain"" that number of events more from one call to the next; might be executed by a different worker thread at different times: the value of std::this_thread::get_id() might change between calls. To register a callback that is called by each worker thread (concurrently) every N events one can use OnPartialResultSlot(). ; Definition at line 318 of file RResultPtr.hxx. ◆ OnPartialResultSlot(). template<typename T > . RResultPtr< T > & ROOT::RDF::RResultPtr< T >::OnPartialResultSlot ; (; ULong64_t ; everyNEvents, . std::function< void(unsigned int, T &)> ; callback . ). inline . Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ; Parameters. [in]everyNEventsFrequency at which the callback will be called by each thread, as a number of events processed ; [in]callbackA callable with signature void(unsigned int, Value_t&) where Value_t is the type of the value contained in this RResultPtr . Returnsthis RResultPtr, to allow chaining of OnPartialResultSlot with other calls; See OnPartialResult for a generic explanation of the callback mechanism. Compared to OnPartialResult, this method has two major differences:; all worker threads invoke the callback once every specified number of events. The event count is per-thread, and callback invocation might happen concurrently (i.e. the callback must be thread-safe); the callable must take an extra unsigned int parameter corresponding to a multi-thread ""processing slot"": this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the callback concurrently but always wit",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:12695,Performance,concurren,concurrently,12695,"esultSlot(). ; Definition at line 318 of file RResultPtr.hxx. ◆ OnPartialResultSlot(). template<typename T > . RResultPtr< T > & ROOT::RDF::RResultPtr< T >::OnPartialResultSlot ; (; ULong64_t ; everyNEvents, . std::function< void(unsigned int, T &)> ; callback . ). inline . Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ; Parameters. [in]everyNEventsFrequency at which the callback will be called by each thread, as a number of events processed ; [in]callbackA callable with signature void(unsigned int, Value_t&) where Value_t is the type of the value contained in this RResultPtr . Returnsthis RResultPtr, to allow chaining of OnPartialResultSlot with other calls; See OnPartialResult for a generic explanation of the callback mechanism. Compared to OnPartialResult, this method has two major differences:; all worker threads invoke the callback once every specified number of events. The event count is per-thread, and callback invocation might happen concurrently (i.e. the callback must be thread-safe); the callable must take an extra unsigned int parameter corresponding to a multi-thread ""processing slot"": this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the callback concurrently but always with different slot numbers.; a value of 0 for everyNEvents indicates the callback must be executed once per slot. For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; std::string progress;; std::mutex bar_mutex;; c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; std::lock_guard<std::mutex> lg(bar_mutex);; progress.push_back('#');; std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; });; std::cout << ""Analysis running..."" << std::endl;; *c; // trigger ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:12823,Performance,multi-thread,multi-thread,12823,"vents, . std::function< void(unsigned int, T &)> ; callback . ). inline . Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ; Parameters. [in]everyNEventsFrequency at which the callback will be called by each thread, as a number of events processed ; [in]callbackA callable with signature void(unsigned int, Value_t&) where Value_t is the type of the value contained in this RResultPtr . Returnsthis RResultPtr, to allow chaining of OnPartialResultSlot with other calls; See OnPartialResult for a generic explanation of the callback mechanism. Compared to OnPartialResult, this method has two major differences:; all worker threads invoke the callback once every specified number of events. The event count is per-thread, and callback invocation might happen concurrently (i.e. the callback must be thread-safe); the callable must take an extra unsigned int parameter corresponding to a multi-thread ""processing slot"": this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the callback concurrently but always with different slot numbers.; a value of 0 for everyNEvents indicates the callback must be executed once per slot. For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; std::string progress;; std::mutex bar_mutex;; c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; std::lock_guard<std::mutex> lg(bar_mutex);; progress.push_back('#');; std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; });; std::cout << ""Analysis running..."" << std::endl;; *c; // trigger the event loop by accessing an action's result; std::cout << ""\nDone!"" << std::endl;; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70. Definition at line 364 of file RResultPtr.hxx. ◆ o",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:12974,Performance,concurren,concurrently,12974,"vents, . std::function< void(unsigned int, T &)> ; callback . ). inline . Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ; Parameters. [in]everyNEventsFrequency at which the callback will be called by each thread, as a number of events processed ; [in]callbackA callable with signature void(unsigned int, Value_t&) where Value_t is the type of the value contained in this RResultPtr . Returnsthis RResultPtr, to allow chaining of OnPartialResultSlot with other calls; See OnPartialResult for a generic explanation of the callback mechanism. Compared to OnPartialResult, this method has two major differences:; all worker threads invoke the callback once every specified number of events. The event count is per-thread, and callback invocation might happen concurrently (i.e. the callback must be thread-safe); the callable must take an extra unsigned int parameter corresponding to a multi-thread ""processing slot"": this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the callback concurrently but always with different slot numbers.; a value of 0 for everyNEvents indicates the callback must be executed once per slot. For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; std::string progress;; std::mutex bar_mutex;; c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; std::lock_guard<std::mutex> lg(bar_mutex);; progress.push_back('#');; std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; });; std::cout << ""Analysis running..."" << std::endl;; *c; // trigger the event loop by accessing an action's result; std::cout << ""\nDone!"" << std::endl;; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70. Definition at line 364 of file RResultPtr.hxx. ◆ o",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:11168,Safety,safe,safe,11168,"d after the event loop is finished; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; A value of 0 for everyNEvents indicates the callback must be executed only once, before running the event loop. A conveniece definition kOnce is provided to make this fact more expressive in user code (see snippet below). Multiple callbacks can be registered with the same RResultPtr (i.e. results of RDataFrame actions) and will be executed sequentially. Callbacks are executed in the order they were registered. The type of the value contained in a RResultPtr is also available as RResultPtr<T>::Value_t, e.g. auto h = tdf.Histo1D(""x"");; // h.kOnce is 0; // decltype(h)::Value_t is TH1D; When implicit multi-threading is enabled, the callback:; will never be executed by multiple threads concurrently: it needs not be thread-safe. For example the snippet above that draws the partial histogram on a canvas works seamlessly in multi-thread event loops.; will always be executed ""everyNEvents"": partial results will ""contain"" that number of events more from one call to the next; might be executed by a different worker thread at different times: the value of std::this_thread::get_id() might change between calls. To register a callback that is called by each worker thread (concurrently) every N events one can use OnPartialResultSlot(). ; Definition at line 318 of file RResultPtr.hxx. ◆ OnPartialResultSlot(). template<typename T > . RResultPtr< T > & ROOT::RDF::RResultPtr< T >::OnPartialResultSlot ; (; ULong64_t ; everyNEvents, . std::function< void(unsigned int, T &)> ; callback . ). inline . Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ; Parameters. [in]ev",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:12742,Safety,safe,safe,12742,"vents, . std::function< void(unsigned int, T &)> ; callback . ). inline . Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ; Parameters. [in]everyNEventsFrequency at which the callback will be called by each thread, as a number of events processed ; [in]callbackA callable with signature void(unsigned int, Value_t&) where Value_t is the type of the value contained in this RResultPtr . Returnsthis RResultPtr, to allow chaining of OnPartialResultSlot with other calls; See OnPartialResult for a generic explanation of the callback mechanism. Compared to OnPartialResult, this method has two major differences:; all worker threads invoke the callback once every specified number of events. The event count is per-thread, and callback invocation might happen concurrently (i.e. the callback must be thread-safe); the callable must take an extra unsigned int parameter corresponding to a multi-thread ""processing slot"": this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the callback concurrently but always with different slot numbers.; a value of 0 for everyNEvents indicates the callback must be executed once per slot. For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; std::string progress;; std::mutex bar_mutex;; c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; std::lock_guard<std::mutex> lg(bar_mutex);; progress.push_back('#');; std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; });; std::cout << ""Analysis running..."" << std::endl;; *c; // trigger the event loop by accessing an action's result; std::cout << ""\nDone!"" << std::endl;; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70. Definition at line 364 of file RResultPtr.hxx. ◆ o",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:12907,Safety,safe,safe,12907,"vents, . std::function< void(unsigned int, T &)> ; callback . ). inline . Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ; Parameters. [in]everyNEventsFrequency at which the callback will be called by each thread, as a number of events processed ; [in]callbackA callable with signature void(unsigned int, Value_t&) where Value_t is the type of the value contained in this RResultPtr . Returnsthis RResultPtr, to allow chaining of OnPartialResultSlot with other calls; See OnPartialResult for a generic explanation of the callback mechanism. Compared to OnPartialResult, this method has two major differences:; all worker threads invoke the callback once every specified number of events. The event count is per-thread, and callback invocation might happen concurrently (i.e. the callback must be thread-safe); the callable must take an extra unsigned int parameter corresponding to a multi-thread ""processing slot"": this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the callback concurrently but always with different slot numbers.; a value of 0 for everyNEvents indicates the callback must be executed once per slot. For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; std::string progress;; std::mutex bar_mutex;; c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; std::lock_guard<std::mutex> lg(bar_mutex);; progress.push_back('#');; std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; });; std::cout << ""Analysis running..."" << std::endl;; *c; // trigger the event loop by accessing an action's result; std::cout << ""\nDone!"" << std::endl;; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70. Definition at line 364 of file RResultPtr.hxx. ◆ o",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:13168,Safety,safe,safe,13168," processed ; [in]callbackA callable with signature void(unsigned int, Value_t&) where Value_t is the type of the value contained in this RResultPtr . Returnsthis RResultPtr, to allow chaining of OnPartialResultSlot with other calls; See OnPartialResult for a generic explanation of the callback mechanism. Compared to OnPartialResult, this method has two major differences:; all worker threads invoke the callback once every specified number of events. The event count is per-thread, and callback invocation might happen concurrently (i.e. the callback must be thread-safe); the callable must take an extra unsigned int parameter corresponding to a multi-thread ""processing slot"": this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the callback concurrently but always with different slot numbers.; a value of 0 for everyNEvents indicates the callback must be executed once per slot. For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; std::string progress;; std::mutex bar_mutex;; c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; std::lock_guard<std::mutex> lg(bar_mutex);; progress.push_back('#');; std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; });; std::cout << ""Analysis running..."" << std::endl;; *c; // trigger the event loop by accessing an action's result; std::cout << ""\nDone!"" << std::endl;; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70. Definition at line 364 of file RResultPtr.hxx. ◆ operator bool(). template<typename T > . ROOT::RDF::RResultPtr< T >::operator bool ; (; ); const. inlineexplicit . Definition at line 214 of file RResultPtr.hxx. ◆ operator*(). template<typename T > . T & ROOT::RDF::RResultPtr< T >::operator* ; (; ). inline . Get a pointer to the encapsulated object. ; Tr",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:670,Security,access,access,670,". ROOT: ROOT::RDF::RResultPtr< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::RResultPtr< T > Class Template ReferenceDataframe. ; template<typename T>; class ROOT::RDF::RResultPtr< T >Smart pointer for the return type of actions. ; A wrapper around the result of RDataFrame actions able to trigger calculations lazily. Template Parameters. TType of the action result. A smart pointer which allows to access the result of a RDataFrame action. The methods of the encapsulated object can be accessed via the arrow operator. Upon invocation of the arrow operator or dereferencing (operator*), the loop on the events and calculations of all scheduled actions are executed if needed. It is possible to iterate on the result proxy if the proxied object is a collection. for (auto& myItem : myResultProxy) { ... };; If iteration is not supported by the type of the proxied object, a compilation error is thrown. ; Definition at line 119 of file RResultPtr.hxx. Public Types; using Value_t = T;  Convenience alias to simplify access to proxied type. ;  . Public Member Functions;  RResultPtr ()=default;  ;  RResultPtr (const RResultPtr &)=default;  ; template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> ;  RResultPtr (const RResultPtr< T2 > &r);  Convert a RResultPtr<T2> to a RResultPtr<T>. ;  ;  RResultPtr (RResultPtr &&)=default;  ; RIterationHelper< T >::Iterator_t begin ();  Return an iterator to the beginning of the contained object if this makes sense, throw a compilation error otherwise. ;  ; RIterationHelper< T >::Iterator_t end ();  Return an iterator to the end of the contained object if this makes sense, throw a compilation error otherwise. ; ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:758,Security,access,accessed,758,". ROOT: ROOT::RDF::RResultPtr< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::RResultPtr< T > Class Template ReferenceDataframe. ; template<typename T>; class ROOT::RDF::RResultPtr< T >Smart pointer for the return type of actions. ; A wrapper around the result of RDataFrame actions able to trigger calculations lazily. Template Parameters. TType of the action result. A smart pointer which allows to access the result of a RDataFrame action. The methods of the encapsulated object can be accessed via the arrow operator. Upon invocation of the arrow operator or dereferencing (operator*), the loop on the events and calculations of all scheduled actions are executed if needed. It is possible to iterate on the result proxy if the proxied object is a collection. for (auto& myItem : myResultProxy) { ... };; If iteration is not supported by the type of the proxied object, a compilation error is thrown. ; Definition at line 119 of file RResultPtr.hxx. Public Types; using Value_t = T;  Convenience alias to simplify access to proxied type. ;  . Public Member Functions;  RResultPtr ()=default;  ;  RResultPtr (const RResultPtr &)=default;  ; template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> ;  RResultPtr (const RResultPtr< T2 > &r);  Convert a RResultPtr<T2> to a RResultPtr<T>. ;  ;  RResultPtr (RResultPtr &&)=default;  ; RIterationHelper< T >::Iterator_t begin ();  Return an iterator to the beginning of the contained object if this makes sense, throw a compilation error otherwise. ;  ; RIterationHelper< T >::Iterator_t end ();  Return an iterator to the end of the contained object if this makes sense, throw a compilation error otherwise. ; ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:1287,Security,access,access,1287,"r Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::RResultPtr< T > Class Template ReferenceDataframe. ; template<typename T>; class ROOT::RDF::RResultPtr< T >Smart pointer for the return type of actions. ; A wrapper around the result of RDataFrame actions able to trigger calculations lazily. Template Parameters. TType of the action result. A smart pointer which allows to access the result of a RDataFrame action. The methods of the encapsulated object can be accessed via the arrow operator. Upon invocation of the arrow operator or dereferencing (operator*), the loop on the events and calculations of all scheduled actions are executed if needed. It is possible to iterate on the result proxy if the proxied object is a collection. for (auto& myItem : myResultProxy) { ... };; If iteration is not supported by the type of the proxied object, a compilation error is thrown. ; Definition at line 119 of file RResultPtr.hxx. Public Types; using Value_t = T;  Convenience alias to simplify access to proxied type. ;  . Public Member Functions;  RResultPtr ()=default;  ;  RResultPtr (const RResultPtr &)=default;  ; template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> ;  RResultPtr (const RResultPtr< T2 > &r);  Convert a RResultPtr<T2> to a RResultPtr<T>. ;  ;  RResultPtr (RResultPtr &&)=default;  ; RIterationHelper< T >::Iterator_t begin ();  Return an iterator to the beginning of the contained object if this makes sense, throw a compilation error otherwise. ;  ; RIterationHelper< T >::Iterator_t end ();  Return an iterator to the end of the contained object if this makes sense, throw a compilation error otherwise. ;  ; T * GetPtr ();  Get the pointer to the encapsulated object. ;  ; const T & GetValue ();  Get a const reference to the encapsulated object. ;  ; bool IsReady () const;  Check whether the result has already been computed. ;  ; RResultPtr< T > & OnPartialResult (UL",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:5524,Security,access,access,5524,"rptr);  ; template<typename T1 > ; RResultPtr< T1 > RDFDetail::MakeResultPtr (const std::shared_ptr< T1 > &, ::ROOT::Detail::RDF::RLoopManager &, std::shared_ptr< RDFInternal::RActionBase >);  ; ROOT::Internal::RDF::SnapshotPtr_t ROOT::Internal::RDF::CloneResultAndAction (const ROOT::Internal::RDF::SnapshotPtr_t &inptr, const std::string &outputFileName);  ; RResultPtr< T > ROOT::Internal::RDF::CloneResultAndAction (const RResultPtr< T > &inptr);  ; class ROOT::Internal::RDF::GraphDrawing::GraphCreatorHelper;  ; template<typename T1 > ; ROOT::RDF::Experimental::RResultMap< T1 > ROOT::RDF::Experimental::VariationsFor (RResultPtr< T1 > resPtr);  ; class RResultHandle;  . #include <ROOT/RResultPtr.hxx>; Member Typedef Documentation. ◆ SPT_t. template<typename T > . using ROOT::RDF::RResultPtr< T >::SPT_t = std::shared_ptr<T>. private . Definition at line 121 of file RResultPtr.hxx. ◆ Value_t. template<typename T > . using ROOT::RDF::RResultPtr< T >::Value_t = T. Convenience alias to simplify access to proxied type. ; Definition at line 206 of file RResultPtr.hxx. Constructor & Destructor Documentation. ◆ RResultPtr() [1/5]. template<typename T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; std::shared_ptr< T > ; objPtr, . RDFDetail::RLoopManager * ; lm, . std::shared_ptr< RDFInternal::RActionBase > ; actionPtr . ). inlineprivate . Definition at line 199 of file RResultPtr.hxx. ◆ RResultPtr() [2/5]. template<typename T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; ). default . ◆ RResultPtr() [3/5]. template<typename T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; const RResultPtr< T > & ; ). default . ◆ RResultPtr() [4/5]. template<typename T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; RResultPtr< T > && ; ). default . ◆ RResultPtr() [5/5]. template<typename T > . template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; const RResultPtr< T2 > & ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:8535,Security,access,access,8535,"ed result. ; Ownership is not transferred to the caller. Triggers event loop and execution of all actions booked in the associated RLoopManager. ; Definition at line 186 of file RResultPtr.hxx. ◆ GetPtr(). template<typename T > . T * ROOT::RDF::RResultPtr< T >::GetPtr ; (; ). inline . Get the pointer to the encapsulated object. ; Triggers event loop and execution of all actions booked in the associated RLoopManager. ; Definition at line 236 of file RResultPtr.hxx. ◆ GetValue(). template<typename T > . const T & ROOT::RDF::RResultPtr< T >::GetValue ; (; ). inline . Get a const reference to the encapsulated object. ; Triggers event loop and execution of all actions booked in the associated RLoopManager. ; Definition at line 228 of file RResultPtr.hxx. ◆ IsReady(). template<typename T > . bool ROOT::RDF::RResultPtr< T >::IsReady ; (; ); const. inline . Check whether the result has already been computed. ; auto res = df.Count();; res.IsReady(); // false, access will trigger event loop; std::cout << *res << std::endl; // triggers event loop; res.IsReady(); // true. Definition at line 386 of file RResultPtr.hxx. ◆ OnPartialResult(). template<typename T > . RResultPtr< T > & ROOT::RDF::RResultPtr< T >::OnPartialResult ; (; ULong64_t ; everyNEvents, . std::function< void(T &)> ; callback . ). inline . Register a callback that RDataFrame will execute ""everyNEvents"" on a partial result. ; Parameters. [in]everyNEventsFrequency at which the callback will be called, as a number of events processed ; [in]callbacka callable with signature void(Value_t&) where Value_t is the type of the value contained in this RResultPtr . Returnsthis RResultPtr, to allow chaining of OnPartialResultSlot with other calls; The callback must be a callable (lambda, function, functor class...) that takes a reference to the result type as argument and returns nothing. RDataFrame will invoke registered callbacks passing partial action results as arguments to them (e.g. a histogram filled with a part of the",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:13687,Security,access,accessing,13687,"k must be thread-safe); the callable must take an extra unsigned int parameter corresponding to a multi-thread ""processing slot"": this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the callback concurrently but always with different slot numbers.; a value of 0 for everyNEvents indicates the callback must be executed once per slot. For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; std::string progress;; std::mutex bar_mutex;; c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; std::lock_guard<std::mutex> lg(bar_mutex);; progress.push_back('#');; std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; });; std::cout << ""Analysis running..."" << std::endl;; *c; // trigger the event loop by accessing an action's result; std::cout << ""\nDone!"" << std::endl;; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70. Definition at line 364 of file RResultPtr.hxx. ◆ operator bool(). template<typename T > . ROOT::RDF::RResultPtr< T >::operator bool ; (; ); const. inlineexplicit . Definition at line 214 of file RResultPtr.hxx. ◆ operator*(). template<typename T > . T & ROOT::RDF::RResultPtr< T >::operator* ; (; ). inline . Get a pointer to the encapsulated object. ; Triggers event loop and execution of all actions booked in the associated RLoopManager. ; Definition at line 240 of file RResultPtr.hxx. ◆ operator->(). template<typename T > . T * ROOT::RDF::RResultPtr< T >::operator-> ; (; ). inline . Get a pointer to the encapsulated object. ; Ownership is not transferred to the caller. Triggers event loop and execution of all actions booked in the associated RLoopManager. ; Definition at line 249 of file RResultPtr.hxx. ◆ operator=() [1/2]. template<typename T > . RResultPtr & ROOT::RDF::RResultPtr< T >::opera",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:1278,Usability,simpl,simplify,1278,"r Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::RResultPtr< T > Class Template ReferenceDataframe. ; template<typename T>; class ROOT::RDF::RResultPtr< T >Smart pointer for the return type of actions. ; A wrapper around the result of RDataFrame actions able to trigger calculations lazily. Template Parameters. TType of the action result. A smart pointer which allows to access the result of a RDataFrame action. The methods of the encapsulated object can be accessed via the arrow operator. Upon invocation of the arrow operator or dereferencing (operator*), the loop on the events and calculations of all scheduled actions are executed if needed. It is possible to iterate on the result proxy if the proxied object is a collection. for (auto& myItem : myResultProxy) { ... };; If iteration is not supported by the type of the proxied object, a compilation error is thrown. ; Definition at line 119 of file RResultPtr.hxx. Public Types; using Value_t = T;  Convenience alias to simplify access to proxied type. ;  . Public Member Functions;  RResultPtr ()=default;  ;  RResultPtr (const RResultPtr &)=default;  ; template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> ;  RResultPtr (const RResultPtr< T2 > &r);  Convert a RResultPtr<T2> to a RResultPtr<T>. ;  ;  RResultPtr (RResultPtr &&)=default;  ; RIterationHelper< T >::Iterator_t begin ();  Return an iterator to the beginning of the contained object if this makes sense, throw a compilation error otherwise. ;  ; RIterationHelper< T >::Iterator_t end ();  Return an iterator to the end of the contained object if this makes sense, throw a compilation error otherwise. ;  ; T * GetPtr ();  Get the pointer to the encapsulated object. ;  ; const T & GetValue ();  Get a const reference to the encapsulated object. ;  ; bool IsReady () const;  Check whether the result has already been computed. ;  ; RResultPtr< T > & OnPartialResult (UL",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:5515,Usability,simpl,simplify,5515,"rptr);  ; template<typename T1 > ; RResultPtr< T1 > RDFDetail::MakeResultPtr (const std::shared_ptr< T1 > &, ::ROOT::Detail::RDF::RLoopManager &, std::shared_ptr< RDFInternal::RActionBase >);  ; ROOT::Internal::RDF::SnapshotPtr_t ROOT::Internal::RDF::CloneResultAndAction (const ROOT::Internal::RDF::SnapshotPtr_t &inptr, const std::string &outputFileName);  ; RResultPtr< T > ROOT::Internal::RDF::CloneResultAndAction (const RResultPtr< T > &inptr);  ; class ROOT::Internal::RDF::GraphDrawing::GraphCreatorHelper;  ; template<typename T1 > ; ROOT::RDF::Experimental::RResultMap< T1 > ROOT::RDF::Experimental::VariationsFor (RResultPtr< T1 > resPtr);  ; class RResultHandle;  . #include <ROOT/RResultPtr.hxx>; Member Typedef Documentation. ◆ SPT_t. template<typename T > . using ROOT::RDF::RResultPtr< T >::SPT_t = std::shared_ptr<T>. private . Definition at line 121 of file RResultPtr.hxx. ◆ Value_t. template<typename T > . using ROOT::RDF::RResultPtr< T >::Value_t = T. Convenience alias to simplify access to proxied type. ; Definition at line 206 of file RResultPtr.hxx. Constructor & Destructor Documentation. ◆ RResultPtr() [1/5]. template<typename T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; std::shared_ptr< T > ; objPtr, . RDFDetail::RLoopManager * ; lm, . std::shared_ptr< RDFInternal::RActionBase > ; actionPtr . ). inlineprivate . Definition at line 199 of file RResultPtr.hxx. ◆ RResultPtr() [2/5]. template<typename T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; ). default . ◆ RResultPtr() [3/5]. template<typename T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; const RResultPtr< T > & ; ). default . ◆ RResultPtr() [4/5]. template<typename T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; RResultPtr< T > && ; ). default . ◆ RResultPtr() [5/5]. template<typename T > . template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; const RResultPtr< T2 > & ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:12883,Usability,simpl,simplify,12883,"vents, . std::function< void(unsigned int, T &)> ; callback . ). inline . Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result. ; Parameters. [in]everyNEventsFrequency at which the callback will be called by each thread, as a number of events processed ; [in]callbackA callable with signature void(unsigned int, Value_t&) where Value_t is the type of the value contained in this RResultPtr . Returnsthis RResultPtr, to allow chaining of OnPartialResultSlot with other calls; See OnPartialResult for a generic explanation of the callback mechanism. Compared to OnPartialResult, this method has two major differences:; all worker threads invoke the callback once every specified number of events. The event count is per-thread, and callback invocation might happen concurrently (i.e. the callback must be thread-safe); the callable must take an extra unsigned int parameter corresponding to a multi-thread ""processing slot"": this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the callback concurrently but always with different slot numbers.; a value of 0 for everyNEvents indicates the callback must be executed once per slot. For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; std::string progress;; std::mutex bar_mutex;; c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; std::lock_guard<std::mutex> lg(bar_mutex);; progress.push_back('#');; std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; });; std::cout << ""Analysis running..."" << std::endl;; *c; // trigger the event loop by accessing an action's result; std::cout << ""\nDone!"" << std::endl;; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70. Definition at line 364 of file RResultPtr.hxx. ◆ o",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:13173,Usability,progress bar,progress bar,13173," processed ; [in]callbackA callable with signature void(unsigned int, Value_t&) where Value_t is the type of the value contained in this RResultPtr . Returnsthis RResultPtr, to allow chaining of OnPartialResultSlot with other calls; See OnPartialResult for a generic explanation of the callback mechanism. Compared to OnPartialResult, this method has two major differences:; all worker threads invoke the callback once every specified number of events. The event count is per-thread, and callback invocation might happen concurrently (i.e. the callback must be thread-safe); the callable must take an extra unsigned int parameter corresponding to a multi-thread ""processing slot"": this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the callback concurrently but always with different slot numbers.; a value of 0 for everyNEvents indicates the callback must be executed once per slot. For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; std::string progress;; std::mutex bar_mutex;; c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; std::lock_guard<std::mutex> lg(bar_mutex);; progress.push_back('#');; std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; });; std::cout << ""Analysis running..."" << std::endl;; *c; // trigger the event loop by accessing an action's result; std::cout << ""\nDone!"" << std::endl;; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70. Definition at line 364 of file RResultPtr.hxx. ◆ operator bool(). template<typename T > . ROOT::RDF::RResultPtr< T >::operator bool ; (; ); const. inlineexplicit . Definition at line 214 of file RResultPtr.hxx. ◆ operator*(). template<typename T > . T & ROOT::RDF::RResultPtr< T >::operator* ; (; ). inline . Get a pointer to the encapsulated object. ; Tr",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RSampleInfo.html:644,Performance,multi-thread,multi-thread,644,". ROOT: ROOT::RDF::RSampleInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::RDF::RSampleInfo Class Reference. ; This type represents a sample identifier, to be used in conjunction with RDataFrame features such as DefinePerSample() and per-sample callbacks. ; When the input data comes from a TTree, the string representation of RSampleInfo (which is returned by AsString() and that can be queried e.g. with Contains()) is of the form ""<filename>/<treename>"".; In multi-thread runs, different tasks might process different entry ranges of the same sample, so RSampleInfo also provides methods to inspect which part of a sample is being taken into consideration. ; Definition at line 35 of file RSampleInfo.hxx. Public Member Functions;  RSampleInfo ()=default;  ;  RSampleInfo (const RSampleInfo &)=default;  ;  RSampleInfo (RSampleInfo &&)=default;  ;  RSampleInfo (std::string_view id, std::pair< ULong64_t, ULong64_t > entryRange, const ROOT::RDF::Experimental::RSample *sample=nullptr);  ;  ~RSampleInfo ()=default;  ; const std::string & AsString () const;  Return a string representation of the sample name. ;  ; bool Contains (std::string_view substr) const;  Check whether the sample name contains the given substring. ;  ; bool Empty () const;  Check whether the sample name is empty. ;  ; std::pair< ULong64_t, ULong64_t > EntryRange () const;  Return the entry range in the sample that is being taken into consideration. ;  ; double GetD (const std::string &key) const;  Return the metadata value of type double given the key. ;  ; int GetI (const std::string &key) const;  Return the metadata value of type int given the key. ;  ; std::string GetS (const std::string &key) const;  Return the metadata value of type string given the key. ;  ; unsigned int GetSampleId () const;  Get the sample id as an int. ; ",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RSampleInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RSampleInfo.html
https://root.cern/doc/master/classROOT_1_1RDF_1_1RSampleInfo.html:4328,Performance,multi-thread,multi-threading,4328,"ing(). const std::string & ROOT::RDF::RSampleInfo::AsString ; (; ); const. inline . Return a string representation of the sample name. ; The representation is of the form ""<filename>/<treename>"" if the input data comes from a TTree or a TChain. ; Definition at line 114 of file RSampleInfo.hxx. ◆ Contains(). bool ROOT::RDF::RSampleInfo::Contains ; (; std::string_view ; substr); const. inline . Check whether the sample name contains the given substring. ; Definition at line 98 of file RSampleInfo.hxx. ◆ Empty(). bool ROOT::RDF::RSampleInfo::Empty ; (; ); const. inline . Check whether the sample name is empty. ; This is the case e.g. when using a RDataFrame with no input data, constructed as RDataFrame(nEntries). ; Definition at line 107 of file RSampleInfo.hxx. ◆ EntryRange(). std::pair< ULong64_t, ULong64_t > ROOT::RDF::RSampleInfo::EntryRange ; (; ); const. inline . Return the entry range in the sample that is being taken into consideration. ; Multiple multi-threading tasks might process different entry ranges of the same sample. ; Definition at line 122 of file RSampleInfo.hxx. ◆ GetD(). double ROOT::RDF::RSampleInfo::GetD ; (; const std::string & ; key); const. inline . Return the metadata value of type double given the key. ; Definition at line 84 of file RSampleInfo.hxx. ◆ GetI(). int ROOT::RDF::RSampleInfo::GetI ; (; const std::string & ; key); const. inline . Return the metadata value of type int given the key. ; Definition at line 77 of file RSampleInfo.hxx. ◆ GetS(). std::string ROOT::RDF::RSampleInfo::GetS ; (; const std::string & ; key); const. inline . Return the metadata value of type string given the key. ; Definition at line 91 of file RSampleInfo.hxx. ◆ GetSampleId(). unsigned int ROOT::RDF::RSampleInfo::GetSampleId ; (; ); const. inline . Get the sample id as an int. ; Definition at line 70 of file RSampleInfo.hxx. ◆ GetSampleName(). const std::string & ROOT::RDF::RSampleInfo::GetSampleName ; (; ); const. inline . Get the name of the sample as a stri",MatchSource.WIKI,doc/master/classROOT_1_1RDF_1_1RSampleInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RSampleInfo.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:2161,Deployability,update,update,2161,"xisting entry in NameFilters. ;  ; const EDialogTypes & GetType () const;  ; std::string GetWorkingPath () const;  Returns current working path. ;  ; void Hide ();  Hide ROOT Browser. ;  ; bool IsCompleted () const;  ; void SetCallback (RFileDialogCallback_t callback);  Assign callback. ;  ; void SetCanChangePath (bool on=true);  Configure if working path in dialog can be changed via gui elements. ;  ; void SetNameFilters (const std::vector< std::string > &arr);  Set array of name filters like ""Text files (*.txt)"", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ;  ; void SetSelectedFilter (const std::string &name);  Configure selected filter Has to be one of the string from NameFilters entry. ;  ; void SetWorkingPath (const std::string &);  Change current working path of file dialog If dialog already shown, change will be immediately applied. ;  ; void Show (const RWebDisplayArgs &args="""");  Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ;  . Static Public Member Functions; static std::shared_ptr< RFileDialog > Embed (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ;  ; static bool IsMessageToStartDialog (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ;  ; static std::string NewFile (const std::string &title="""", const std::string &fname="""");  Start NewFile dialog. ;",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:11703,Deployability,update,update,11703," array of name filters like ""Text files (*.txt)"", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ; Definition at line 92 of file RFileDialog.hxx. ◆ SetSelectedFilter(). void RFileDialog::SetSelectedFilter ; (; const std::string & ; name). Configure selected filter Has to be one of the string from NameFilters entry. ; Definition at line 152 of file RFileDialog.cxx. ◆ SetStartFunc(). void RFileDialog::SetStartFunc ; (; bool ; on). staticprotected . Set start dialog function for RWebWindow. ; Definition at line 491 of file RFileDialog.cxx. ◆ SetWorkingPath(). void RFileDialog::SetWorkingPath ; (; const std::string & ; path). Change current working path of file dialog If dialog already shown, change will be immediately applied. ; Definition at line 338 of file RFileDialog.cxx. ◆ Show(). void RFileDialog::Show ; (; const RWebDisplayArgs & ; args = """"). Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ; Definition at line 114 of file RFileDialog.cxx. ◆ TypeAsString(). std::string RFileDialog::TypeAsString ; (; EDialogTypes ; kind). staticprotected . Returns dialog type as string String value used for configuring JS-side. ; Definition at line 137 of file RFileDialog.cxx. Friends And Related Symbol Documentation. ◆ Details::RWebWindowPlugin. friend class Details::RWebWindowPlugin. friend . Definition at line 42 of file RFileDialog.hxx. Member Data Documentation. ◆ fBrowsable. RBrowserData ROOT::RFileDialog::fBrowsable. protected . ! central browsing element ; Definition at line 55 of file RFileDialog.hxx. ◆ fCallback. RFileDialogCallback_t ROOT::RFileDialog::fCallback. protected . ! function receiving result, called once ; Definition at line 64 of file RFileDialog.hxx. ◆ fCanChangePath. bool ROOT::RFileDialog::fCanChangePath {true}. protected . ! if working path can be changed via gui elements ; Definition at line 56 of file RFile",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:461,Integrability,message,message,461,". ROOT: ROOT::RFileDialog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::RFileDialog Class ReferenceWeb Widgets » Browsable object | Web Widgets. ; Web-based FileDialog. ; Initial message send to client to configure layout. ; Definition at line 41 of file RFileDialog.hxx. Public Types; enum  EDialogTypes { kOpenFile; , kSaveAs; , kNewFile; };  . Public Member Functions;  RFileDialog (EDialogTypes kind=kOpenFile, const std::string &title="""", const std::string &fname="""");  constructor When title not specified, default will be used ;  ; virtual ~RFileDialog ();  destructor ;  ; bool GetCanChangePath () const;  Returns true if working path can be change with gui elements. ;  ; const std::string & GetFileName () const;  ; const auto & GetNameFilters () const;  Returns array of name filters. ;  ; std::string GetSelectedFilter () const;  Returns selected filter Can differ from specified value - if it does not match to existing entry in NameFilters. ;  ; const EDialogTypes & GetType () const;  ; std::string GetWorkingPath () const;  Returns current working path. ;  ; void Hide ();  Hide ROOT Browser. ;  ; bool IsCompleted () const;  ; void SetCallback (RFileDialogCallback_t callback);  Assign callback. ;  ; void SetCanChangePath (bool on=true);  Configure if working path in dialog can be changed via gui elements. ;  ; void SetNameFilters (const std::vector< std::string > &arr);  Set array of name filters like ""Text files (*.txt)"", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ;  ; void SetSelectedFilter (const std::string &name);  Configure selected filter Has to be one of the string from NameFilters entry. ;  ; void SetWorkingPath (const std::string &);  Ch",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:2670,Integrability,message,message,2670,""", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ;  ; void SetSelectedFilter (const std::string &name);  Configure selected filter Has to be one of the string from NameFilters entry. ;  ; void SetWorkingPath (const std::string &);  Change current working path of file dialog If dialog already shown, change will be immediately applied. ;  ; void Show (const RWebDisplayArgs &args="""");  Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ;  . Static Public Member Functions; static std::shared_ptr< RFileDialog > Embed (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ;  ; static bool IsMessageToStartDialog (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ;  ; static std::string NewFile (const std::string &title="""", const std::string &fname="""");  Start NewFile dialog. ;  ; static std::string OpenFile (const std::string &title="""", const std::string &fname="""");  Start OpenFile dialog. ;  ; static std::string SaveAs (const std::string &title="""", const std::string &fname="""");  Start SaveAs dialog. ;  . Protected Member Functions; std::string GetRegexp (const std::string &name) const;  Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ;  ; void InvokeCallBack ();  Invoke specified callback. ;  ; void ProcessMsg (unsigned connid, const std::s",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:2749,Integrability,message,message,2749,""", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ;  ; void SetSelectedFilter (const std::string &name);  Configure selected filter Has to be one of the string from NameFilters entry. ;  ; void SetWorkingPath (const std::string &);  Change current working path of file dialog If dialog already shown, change will be immediately applied. ;  ; void Show (const RWebDisplayArgs &args="""");  Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ;  . Static Public Member Functions; static std::shared_ptr< RFileDialog > Embed (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ;  ; static bool IsMessageToStartDialog (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ;  ; static std::string NewFile (const std::string &title="""", const std::string &fname="""");  Start NewFile dialog. ;  ; static std::string OpenFile (const std::string &title="""", const std::string &fname="""");  Start OpenFile dialog. ;  ; static std::string SaveAs (const std::string &title="""", const std::string &fname="""");  Start SaveAs dialog. ;  . Protected Member Functions; std::string GetRegexp (const std::string &name) const;  Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ;  ; void InvokeCallBack ();  Invoke specified callback. ;  ; void ProcessMsg (unsigned connid, const std::s",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:2927,Integrability,message,message,2927,"etWorkingPath (const std::string &);  Change current working path of file dialog If dialog already shown, change will be immediately applied. ;  ; void Show (const RWebDisplayArgs &args="""");  Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ;  . Static Public Member Functions; static std::shared_ptr< RFileDialog > Embed (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ;  ; static bool IsMessageToStartDialog (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ;  ; static std::string NewFile (const std::string &title="""", const std::string &fname="""");  Start NewFile dialog. ;  ; static std::string OpenFile (const std::string &title="""", const std::string &fname="""");  Start OpenFile dialog. ;  ; static std::string SaveAs (const std::string &title="""", const std::string &fname="""");  Start SaveAs dialog. ;  . Protected Member Functions; std::string GetRegexp (const std::string &name) const;  Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ;  ; void InvokeCallBack ();  Invoke specified callback. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process received data from client. ;  ; void SendChPathMsg (unsigned connid);  Sends new data after change current directory. ;  ; void SendInitMsg (unsigned connid);  Sends initial message to the client. ;  . Static Prote",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:3921,Integrability,message,message,3921,"ck if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ;  ; static std::string NewFile (const std::string &title="""", const std::string &fname="""");  Start NewFile dialog. ;  ; static std::string OpenFile (const std::string &title="""", const std::string &fname="""");  Start OpenFile dialog. ;  ; static std::string SaveAs (const std::string &title="""", const std::string &fname="""");  Start SaveAs dialog. ;  . Protected Member Functions; std::string GetRegexp (const std::string &name) const;  Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ;  ; void InvokeCallBack ();  Invoke specified callback. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process received data from client. ;  ; void SendChPathMsg (unsigned connid);  Sends new data after change current directory. ;  ; void SendInitMsg (unsigned connid);  Sends initial message to the client. ;  . Static Protected Member Functions; static std::string Dialog (EDialogTypes kind, const std::string &title, const std::string &fname);  Start specified dialog type. ;  ; static void SetStartFunc (bool on);  Set start dialog function for RWebWindow. ;  ; static std::string TypeAsString (EDialogTypes kind);  Returns dialog type as string String value used for configuring JS-side. ;  . Protected Attributes; RBrowserData fBrowsable;  ! central browsing element ;  ; RFileDialogCallback_t fCallback;  ! function receiving result, called once ;  ; bool fCanChangePath {true};  ! if working path can be changed via gui elements ;  ; bool fDidSelect {false};  ! true when dialog is selected or closed ;  ; EDialogTypes fKind {kOpenFile};  ! dialog kind OpenFile, SaveAs, NewFile ;  ; std::vector< std::string > fNameFilters;  ! name filters ;  ; std::string fSelect;  ! result of file selection ;  ; std::string fSelectedFilter;  ! name of selected filter ;  ;",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:6372,Integrability,message,message,6372,"File, . const std::string & ; title = """", . const std::string & ; fname = """" . ). constructor When title not specified, default will be used ; Definition at line 44 of file RFileDialog.cxx. ◆ ~RFileDialog(). RFileDialog::~RFileDialog ; (; ). virtual . destructor ; Definition at line 91 of file RFileDialog.cxx. Member Function Documentation. ◆ Dialog(). std::string RFileDialog::Dialog ; (; EDialogTypes ; kind, . const std::string & ; title, . const std::string & ; fname . ). staticprotected . Start specified dialog type. ; Definition at line 375 of file RFileDialog.cxx. ◆ Embed(). std::shared_ptr< RFileDialog > RFileDialog::Embed ; (; const std::shared_ptr< RWebWindow > & ; window, . unsigned ; connid, . const std::string & ; args . ). static . Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ; Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected ; Definition at line 438 of file RFileDialog.cxx. ◆ GetCanChangePath(). bool ROOT::RFileDialog::GetCanChangePath ; (; ); const. inline . Returns true if working path can be change with gui elements. ; Definition at line 100 of file RFileDialog.hxx. ◆ GetFileName(). const std::string & ROOT::RFileDialog::GetFileName ; (; ); const. inline . Definition at line 112 of file RFileDialog.hxx. ◆ GetNameFilters(). const auto & ROOT::RFileDialog::GetNameFilters ; (; ); const. inline . Returns array of name filters. ; Definition at line 94 of file RFileDialog.hxx. ◆ GetRegexp(). std::string RFileDialog::GetRegexp ; (; const std::string & ; name); const. protected . Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ; Definition at line 192 of file RFil",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:6451,Integrability,message,message,6451,"File, . const std::string & ; title = """", . const std::string & ; fname = """" . ). constructor When title not specified, default will be used ; Definition at line 44 of file RFileDialog.cxx. ◆ ~RFileDialog(). RFileDialog::~RFileDialog ; (; ). virtual . destructor ; Definition at line 91 of file RFileDialog.cxx. Member Function Documentation. ◆ Dialog(). std::string RFileDialog::Dialog ; (; EDialogTypes ; kind, . const std::string & ; title, . const std::string & ; fname . ). staticprotected . Start specified dialog type. ; Definition at line 375 of file RFileDialog.cxx. ◆ Embed(). std::shared_ptr< RFileDialog > RFileDialog::Embed ; (; const std::shared_ptr< RWebWindow > & ; window, . unsigned ; connid, . const std::string & ; args . ). static . Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ; Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected ; Definition at line 438 of file RFileDialog.cxx. ◆ GetCanChangePath(). bool ROOT::RFileDialog::GetCanChangePath ; (; ); const. inline . Returns true if working path can be change with gui elements. ; Definition at line 100 of file RFileDialog.hxx. ◆ GetFileName(). const std::string & ROOT::RFileDialog::GetFileName ; (; ); const. inline . Definition at line 112 of file RFileDialog.hxx. ◆ GetNameFilters(). const auto & ROOT::RFileDialog::GetNameFilters ; (; ); const. inline . Returns array of name filters. ; Definition at line 94 of file RFileDialog.hxx. ◆ GetRegexp(). std::string RFileDialog::GetRegexp ; (; const std::string & ; name); const. protected . Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ; Definition at line 192 of file RFil",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:8494,Integrability,message,message,8494,"specified value - if it does not match to existing entry in NameFilters. ; Definition at line 161 of file RFileDialog.cxx. ◆ GetType(). const EDialogTypes & ROOT::RFileDialog::GetType ; (; ); const. inline . Definition at line 86 of file RFileDialog.hxx. ◆ GetWorkingPath(). std::string RFileDialog::GetWorkingPath ; (; ); const. Returns current working path. ; Definition at line 352 of file RFileDialog.cxx. ◆ Hide(). void RFileDialog::Hide ; (; ). Hide ROOT Browser. ; Definition at line 128 of file RFileDialog.cxx. ◆ InvokeCallBack(). void RFileDialog::InvokeCallBack ; (; ). protected . Invoke specified callback. ; Definition at line 361 of file RFileDialog.cxx. ◆ IsCompleted(). bool ROOT::RFileDialog::IsCompleted ; (; ); const. inline . Definition at line 111 of file RFileDialog.hxx. ◆ IsMessageToStartDialog(). bool RFileDialog::IsMessageToStartDialog ; (; const std::string & ; msg). static . Check if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ; Definition at line 425 of file RFileDialog.cxx. ◆ NewFile(). std::string RFileDialog::NewFile ; (; const std::string & ; title = """", . const std::string & ; fname = """" . ). static . Start NewFile dialog. ; Blocks until file name is selected or Cancel button is pressed Returns selected file name (or empty string) ; Definition at line 415 of file RFileDialog.cxx. ◆ OpenFile(). std::string RFileDialog::OpenFile ; (; const std::string & ; title = """", . const std::string & ; fname = """" . ). static . Start OpenFile dialog. ; Blocks until file name is selected or Cancel button is pressed Returns selected file name (or empty string) ; Definition at line 395 of file RFileDialog.cxx. ◆ ProcessMsg(). void RFileDialog::ProcessMsg ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process received data from client. ; Definition at line 271 of file RFileDialog.cxx. ◆ SaveAs(). std::str",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:10138,Integrability,message,message,10138,"= """" . ). static . Start OpenFile dialog. ; Blocks until file name is selected or Cancel button is pressed Returns selected file name (or empty string) ; Definition at line 395 of file RFileDialog.cxx. ◆ ProcessMsg(). void RFileDialog::ProcessMsg ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process received data from client. ; Definition at line 271 of file RFileDialog.cxx. ◆ SaveAs(). std::string RFileDialog::SaveAs ; (; const std::string & ; title = """", . const std::string & ; fname = """" . ). static . Start SaveAs dialog. ; Blocks until file name is selected or Cancel button is pressed Returns selected file name (or empty string) ; Definition at line 405 of file RFileDialog.cxx. ◆ SendChPathMsg(). void RFileDialog::SendChPathMsg ; (; unsigned ; connid). protected . Sends new data after change current directory. ; Definition at line 256 of file RFileDialog.cxx. ◆ SendInitMsg(). void RFileDialog::SendInitMsg ; (; unsigned ; connid). protected . Sends initial message to the client. ; Definition at line 230 of file RFileDialog.cxx. ◆ SetCallback(). void RFileDialog::SetCallback ; (; RFileDialogCallback_t ; callback). Assign callback. ; Argument of callback is selected file name. If file was already selected, immediately call it ; Definition at line 102 of file RFileDialog.cxx. ◆ SetCanChangePath(). void ROOT::RFileDialog::SetCanChangePath ; (; bool ; on = true). inline . Configure if working path in dialog can be changed via gui elements. ; Definition at line 97 of file RFileDialog.hxx. ◆ SetNameFilters(). void ROOT::RFileDialog::SetNameFilters ; (; const std::vector< std::string > & ; arr). inline . Set array of name filters like ""Text files (*.txt)"", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ; Definition at line 92 of file RFileDialog.hxx. ◆ SetSelectedFilter(). void RFileDialog::SetSelectedFilter ; (; const std::string & ; name). Configure selected filter Has to be one of the string from NameFilte",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:487,Modifiability,config,configure,487,". ROOT: ROOT::RFileDialog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::RFileDialog Class ReferenceWeb Widgets » Browsable object | Web Widgets. ; Web-based FileDialog. ; Initial message send to client to configure layout. ; Definition at line 41 of file RFileDialog.hxx. Public Types; enum  EDialogTypes { kOpenFile; , kSaveAs; , kNewFile; };  . Public Member Functions;  RFileDialog (EDialogTypes kind=kOpenFile, const std::string &title="""", const std::string &fname="""");  constructor When title not specified, default will be used ;  ; virtual ~RFileDialog ();  destructor ;  ; bool GetCanChangePath () const;  Returns true if working path can be change with gui elements. ;  ; const std::string & GetFileName () const;  ; const auto & GetNameFilters () const;  Returns array of name filters. ;  ; std::string GetSelectedFilter () const;  Returns selected filter Can differ from specified value - if it does not match to existing entry in NameFilters. ;  ; const EDialogTypes & GetType () const;  ; std::string GetWorkingPath () const;  Returns current working path. ;  ; void Hide ();  Hide ROOT Browser. ;  ; bool IsCompleted () const;  ; void SetCallback (RFileDialogCallback_t callback);  Assign callback. ;  ; void SetCanChangePath (bool on=true);  Configure if working path in dialog can be changed via gui elements. ;  ; void SetNameFilters (const std::vector< std::string > &arr);  Set array of name filters like ""Text files (*.txt)"", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ;  ; void SetSelectedFilter (const std::string &name);  Configure selected filter Has to be one of the string from NameFilters entry. ;  ; void SetWorkingPath (const std::string &);  Ch",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:4308,Modifiability,config,configuring,4308,"le="""", const std::string &fname="""");  Start OpenFile dialog. ;  ; static std::string SaveAs (const std::string &title="""", const std::string &fname="""");  Start SaveAs dialog. ;  . Protected Member Functions; std::string GetRegexp (const std::string &name) const;  Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ;  ; void InvokeCallBack ();  Invoke specified callback. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process received data from client. ;  ; void SendChPathMsg (unsigned connid);  Sends new data after change current directory. ;  ; void SendInitMsg (unsigned connid);  Sends initial message to the client. ;  . Static Protected Member Functions; static std::string Dialog (EDialogTypes kind, const std::string &title, const std::string &fname);  Start specified dialog type. ;  ; static void SetStartFunc (bool on);  Set start dialog function for RWebWindow. ;  ; static std::string TypeAsString (EDialogTypes kind);  Returns dialog type as string String value used for configuring JS-side. ;  . Protected Attributes; RBrowserData fBrowsable;  ! central browsing element ;  ; RFileDialogCallback_t fCallback;  ! function receiving result, called once ;  ; bool fCanChangePath {true};  ! if working path can be changed via gui elements ;  ; bool fDidSelect {false};  ! true when dialog is selected or closed ;  ; EDialogTypes fKind {kOpenFile};  ! dialog kind OpenFile, SaveAs, NewFile ;  ; std::vector< std::string > fNameFilters;  ! name filters ;  ; std::string fSelect;  ! result of file selection ;  ; std::string fSelectedFilter;  ! name of selected filter ;  ; std::string fTitle;  ! title, when not specified default will be used ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window for file dialog ;  . Friends; class Details::RWebWindowPlugin;  . #include <ROOT/RFileDialog.hxx>; Member Enumeration Documentation. ◆ EDialogTypes. enum ROOT::RFileDialog::EDialogTypes. EnumeratorkOpenFile ; kSaveAs ; kNewFil",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:12053,Modifiability,config,configuring,12053,"ter ; (; const std::string & ; name). Configure selected filter Has to be one of the string from NameFilters entry. ; Definition at line 152 of file RFileDialog.cxx. ◆ SetStartFunc(). void RFileDialog::SetStartFunc ; (; bool ; on). staticprotected . Set start dialog function for RWebWindow. ; Definition at line 491 of file RFileDialog.cxx. ◆ SetWorkingPath(). void RFileDialog::SetWorkingPath ; (; const std::string & ; path). Change current working path of file dialog If dialog already shown, change will be immediately applied. ; Definition at line 338 of file RFileDialog.cxx. ◆ Show(). void RFileDialog::Show ; (; const RWebDisplayArgs & ; args = """"). Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ; Definition at line 114 of file RFileDialog.cxx. ◆ TypeAsString(). std::string RFileDialog::TypeAsString ; (; EDialogTypes ; kind). staticprotected . Returns dialog type as string String value used for configuring JS-side. ; Definition at line 137 of file RFileDialog.cxx. Friends And Related Symbol Documentation. ◆ Details::RWebWindowPlugin. friend class Details::RWebWindowPlugin. friend . Definition at line 42 of file RFileDialog.hxx. Member Data Documentation. ◆ fBrowsable. RBrowserData ROOT::RFileDialog::fBrowsable. protected . ! central browsing element ; Definition at line 55 of file RFileDialog.hxx. ◆ fCallback. RFileDialogCallback_t ROOT::RFileDialog::fCallback. protected . ! function receiving result, called once ; Definition at line 64 of file RFileDialog.hxx. ◆ fCanChangePath. bool ROOT::RFileDialog::fCanChangePath {true}. protected . ! if working path can be changed via gui elements ; Definition at line 56 of file RFileDialog.hxx. ◆ fDidSelect. bool ROOT::RFileDialog::fDidSelect {false}. protected . ! true when dialog is selected or closed ; Definition at line 60 of file RFileDialog.hxx. ◆ fKind. EDialogTypes ROOT::RFileDialog::fKind {kOpenFile}. protected ",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:2737,Safety,detect,detect,2737,""", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ;  ; void SetSelectedFilter (const std::string &name);  Configure selected filter Has to be one of the string from NameFilters entry. ;  ; void SetWorkingPath (const std::string &);  Change current working path of file dialog If dialog already shown, change will be immediately applied. ;  ; void Show (const RWebDisplayArgs &args="""");  Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ;  . Static Public Member Functions; static std::shared_ptr< RFileDialog > Embed (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ;  ; static bool IsMessageToStartDialog (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ;  ; static std::string NewFile (const std::string &title="""", const std::string &fname="""");  Start NewFile dialog. ;  ; static std::string OpenFile (const std::string &title="""", const std::string &fname="""");  Start OpenFile dialog. ;  ; static std::string SaveAs (const std::string &title="""", const std::string &fname="""");  Start SaveAs dialog. ;  . Protected Member Functions; std::string GetRegexp (const std::string &name) const;  Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ;  ; void InvokeCallBack ();  Invoke specified callback. ;  ; void ProcessMsg (unsigned connid, const std::s",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RFileDialog.html:6439,Safety,detect,detect,6439,"File, . const std::string & ; title = """", . const std::string & ; fname = """" . ). constructor When title not specified, default will be used ; Definition at line 44 of file RFileDialog.cxx. ◆ ~RFileDialog(). RFileDialog::~RFileDialog ; (; ). virtual . destructor ; Definition at line 91 of file RFileDialog.cxx. Member Function Documentation. ◆ Dialog(). std::string RFileDialog::Dialog ; (; EDialogTypes ; kind, . const std::string & ; title, . const std::string & ; fname . ). staticprotected . Start specified dialog type. ; Definition at line 375 of file RFileDialog.cxx. ◆ Embed(). std::shared_ptr< RFileDialog > RFileDialog::Embed ; (; const std::shared_ptr< RWebWindow > & ; window, . unsigned ; connid, . const std::string & ; args . ). static . Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ; Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected ; Definition at line 438 of file RFileDialog.cxx. ◆ GetCanChangePath(). bool ROOT::RFileDialog::GetCanChangePath ; (; ); const. inline . Returns true if working path can be change with gui elements. ; Definition at line 100 of file RFileDialog.hxx. ◆ GetFileName(). const std::string & ROOT::RFileDialog::GetFileName ; (; ); const. inline . Definition at line 112 of file RFileDialog.hxx. ◆ GetNameFilters(). const auto & ROOT::RFileDialog::GetNameFilters ; (; ); const. inline . Returns array of name filters. ; Definition at line 94 of file RFileDialog.hxx. ◆ GetRegexp(). std::string RFileDialog::GetRegexp ; (; const std::string & ; name); const. protected . Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ; Definition at line 192 of file RFil",MatchSource.WIKI,doc/master/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RFileDialog.html
https://root.cern/doc/master/classROOT_1_1RGeoItem.html:701,Modifiability,inherit,inherited,701,". ROOT: ROOT::RGeoItem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; ROOT::RGeoItem Class ReferenceWeb Widgets » Browsable object. ; Representation of single item in the geometry browser. ; Definition at line 91 of file RGeomData.hxx. Public Member Functions;  RGeoItem ()=default;  Default constructor. ;  ;  RGeoItem (const std::string &_name, int _nchilds, int _nodeid, const std::string &_color, const std::string &_material="""", int _vis=0, int _pvis=0);  ;  ~RGeoItem () override=default;  ; void SetTop (bool on=true);  ;  Public Member Functions inherited from ROOT::Browsable::RItem;  RItem ()=default;  ;  RItem (const std::string &_name, int _nchilds=0, const std::string &_icon="""");  ; virtual ~RItem ()=default;  ; virtual bool Compare (const RItem *b, const std::string &) const;  ; const std::string & GetIcon () const;  ; const std::string & GetMTime () const;  ; const std::string & GetName () const;  ; const std::string & GetSize () const;  ; const std::string & GetTitle () const;  ; virtual bool IsFolder () const;  ; virtual bool IsHidden () const;  ; void SetChecked (bool on=true);  ; void SetExpanded (bool on=true);  ; void SetIcon (const std::string &_icon);  ; void SetMTime (const std::string &_mtime);  ; void SetName (const std::string &_name);  ; void SetSize (const std::string &_size);  ; void SetSize (Long64_t _size);  ; void SetTitle (const std::string &_title);  . Protected Attributes; std::string color;  color ;  ; int id {0};  node id ;  ; std::string material;  material ;  ; int pvis {0};  visibility of physical node ;  ; bool top {false};  indicates if node selected as top ;  ; int vis {0};  visibility of logical node ;  ;  Protected Attributes inherited from ROOT::Browsable::RItem; bool checked {false};  is checked, not yet used ;  ; bool expanded {false};  is expanded ;  ; std::string fsize;  item si",MatchSource.WIKI,doc/master/classROOT_1_1RGeoItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoItem.html
https://root.cern/doc/master/classROOT_1_1RGeoItem.html:1840,Modifiability,inherit,inherited,1840,"ual bool Compare (const RItem *b, const std::string &) const;  ; const std::string & GetIcon () const;  ; const std::string & GetMTime () const;  ; const std::string & GetName () const;  ; const std::string & GetSize () const;  ; const std::string & GetTitle () const;  ; virtual bool IsFolder () const;  ; virtual bool IsHidden () const;  ; void SetChecked (bool on=true);  ; void SetExpanded (bool on=true);  ; void SetIcon (const std::string &_icon);  ; void SetMTime (const std::string &_mtime);  ; void SetName (const std::string &_name);  ; void SetSize (const std::string &_size);  ; void SetSize (Long64_t _size);  ; void SetTitle (const std::string &_title);  . Protected Attributes; std::string color;  color ;  ; int id {0};  node id ;  ; std::string material;  material ;  ; int pvis {0};  visibility of physical node ;  ; bool top {false};  indicates if node selected as top ;  ; int vis {0};  visibility of logical node ;  ;  Protected Attributes inherited from ROOT::Browsable::RItem; bool checked {false};  is checked, not yet used ;  ; bool expanded {false};  is expanded ;  ; std::string fsize;  item size ;  ; std::string icon;  icon associated with item ;  ; std::string mtime;  modification time ;  ; std::string name;  item name ;  ; int nchilds {0};  number of childs ;  ; std::string title;  item title ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeoItem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeoItem() [1/2]. ROOT::RGeoItem::RGeoItem ; (; ). default . Default constructor. . ◆ RGeoItem() [2/2]. ROOT::RGeoItem::RGeoItem ; (; const std::string & ; _name, . int ; _nchilds, . int ; _nodeid, . const std::string & ; _color, . const std::string & ; _material = """", . int ; _vis = 0, . int ; _pvis = 0 . ). inline . Definition at line 107 of file RGeomData.hxx. ◆ ~RGeoItem(). ROOT::RGeoItem::~RGeoItem ; (; ). overridedefault . Member Function Documentat",MatchSource.WIKI,doc/master/classROOT_1_1RGeoItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoItem.html
https://root.cern/doc/master/classROOT_1_1RGeoItem.html:1800,Testability,log,logical,1800,"ual bool Compare (const RItem *b, const std::string &) const;  ; const std::string & GetIcon () const;  ; const std::string & GetMTime () const;  ; const std::string & GetName () const;  ; const std::string & GetSize () const;  ; const std::string & GetTitle () const;  ; virtual bool IsFolder () const;  ; virtual bool IsHidden () const;  ; void SetChecked (bool on=true);  ; void SetExpanded (bool on=true);  ; void SetIcon (const std::string &_icon);  ; void SetMTime (const std::string &_mtime);  ; void SetName (const std::string &_name);  ; void SetSize (const std::string &_size);  ; void SetSize (Long64_t _size);  ; void SetTitle (const std::string &_title);  . Protected Attributes; std::string color;  color ;  ; int id {0};  node id ;  ; std::string material;  material ;  ; int pvis {0};  visibility of physical node ;  ; bool top {false};  indicates if node selected as top ;  ; int vis {0};  visibility of logical node ;  ;  Protected Attributes inherited from ROOT::Browsable::RItem; bool checked {false};  is checked, not yet used ;  ; bool expanded {false};  is expanded ;  ; std::string fsize;  item size ;  ; std::string icon;  icon associated with item ;  ; std::string mtime;  modification time ;  ; std::string name;  item name ;  ; int nchilds {0};  number of childs ;  ; std::string title;  item title ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeoItem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeoItem() [1/2]. ROOT::RGeoItem::RGeoItem ; (; ). default . Default constructor. . ◆ RGeoItem() [2/2]. ROOT::RGeoItem::RGeoItem ; (; const std::string & ; _name, . int ; _nchilds, . int ; _nodeid, . const std::string & ; _color, . const std::string & ; _material = """", . int ; _vis = 0, . int ; _pvis = 0 . ). inline . Definition at line 107 of file RGeomData.hxx. ◆ ~RGeoItem(). ROOT::RGeoItem::~RGeoItem ; (; ). overridedefault . Member Function Documentat",MatchSource.WIKI,doc/master/classROOT_1_1RGeoItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoItem.html
https://root.cern/doc/master/classROOT_1_1RGeoItem.html:3681,Testability,log,logical,3681,":string icon;  icon associated with item ;  ; std::string mtime;  modification time ;  ; std::string name;  item name ;  ; int nchilds {0};  number of childs ;  ; std::string title;  item title ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeoItem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeoItem() [1/2]. ROOT::RGeoItem::RGeoItem ; (; ). default . Default constructor. . ◆ RGeoItem() [2/2]. ROOT::RGeoItem::RGeoItem ; (; const std::string & ; _name, . int ; _nchilds, . int ; _nodeid, . const std::string & ; _color, . const std::string & ; _material = """", . int ; _vis = 0, . int ; _pvis = 0 . ). inline . Definition at line 107 of file RGeomData.hxx. ◆ ~RGeoItem(). ROOT::RGeoItem::~RGeoItem ; (; ). overridedefault . Member Function Documentation. ◆ SetTop(). void ROOT::RGeoItem::SetTop ; (; bool ; on = true). inline . Definition at line 115 of file RGeomData.hxx. Member Data Documentation. ◆ color. std::string ROOT::RGeoItem::color. protected . color ; Definition at line 96 of file RGeomData.hxx. ◆ id. int ROOT::RGeoItem::id {0}. protected . node id ; Definition at line 95 of file RGeomData.hxx. ◆ material. std::string ROOT::RGeoItem::material. protected . material ; Definition at line 97 of file RGeomData.hxx. ◆ pvis. int ROOT::RGeoItem::pvis {0}. protected . visibility of physical node ; Definition at line 99 of file RGeomData.hxx. ◆ top. bool ROOT::RGeoItem::top {false}. protected . indicates if node selected as top ; Definition at line 100 of file RGeomData.hxx. ◆ vis. int ROOT::RGeoItem::vis {0}. protected . visibility of logical node ; Definition at line 98 of file RGeomData.hxx. Libraries for ROOT::RGeoItem:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeoItem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1RGeoItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoItem.html
https://root.cern/doc/master/classROOT_1_1RGeomConfig.html:265,Modifiability,config,configured,265,". ROOT: ROOT::RGeomConfig Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomConfig Class Reference. ; Configuration parameters which can be configured on the client Send as is to-from client. ; Definition at line 162 of file RGeomData.hxx. Public Attributes; int build_shapes {1};  when shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical, 3 - all ;  ; std::string drawopt;  draw options for TGeoPainter ;  ; int maxnumfaces {0};  maximal number of faces ;  ; int maxnumnodes {0};  maximal number of nodes ;  ; int nsegm {0};  number of segments for cylindrical shapes ;  ; bool showtop {false};  show geometry top volume, off by default ;  ; int vislevel {0};  visible level ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ build_shapes. int ROOT::RGeomConfig::build_shapes {1}. when shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical, 3 - all ; Definition at line 168 of file RGeomData.hxx. ◆ drawopt. std::string ROOT::RGeomConfig::drawopt. draw options for TGeoPainter ; Definition at line 170 of file RGeomData.hxx. ◆ maxnumfaces. int ROOT::RGeomConfig::maxnumfaces {0}. maximal number of faces ; Definition at line 166 of file RGeomData.hxx. ◆ maxnumnodes. int ROOT::RGeomConfig::maxnumnodes {0}. maximal number of nodes ; Definition at line 165 of file RGeomData.hxx. ◆ nsegm. int ROOT::RGeomConfig::nsegm {0}. number of segments for cylindrical shapes ; Definition at line 169 of file RGeomData.hxx. ◆ showtop. bool ROOT::RGeomConfig::showtop {false}. show geometry top volume, off by default ; Definition at line 167 of file RGeomData.hxx. ◆ vislevel. int ROOT::RGeomConfig::vislevel {0}. visible level ; Definition at line 164 of file RGeomData.hxx. Libraries for ROOT::RGeomConfig:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomD",MatchSource.WIKI,doc/master/classROOT_1_1RGeomConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomConfig.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:1665,Availability,failure,failure,1665,"llect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression level for data transfer. ;  ; int GetMaxVisFaces () const;  Returns maximal visible number of faces, ignored when non-positive. ;  ; int GetMaxVisNodes () const;  Returns maximal visible number of nodes, ignored when non-positive. ;  ; TVirtualMutex * GetMutex () const;  Return currently used mutex. ;  ; int GetNSegments () const;  Return of segments for cylindrical shapes, if 0 - default value will be used. ;  ; int GetNumNodes () const;  Number of unique nodes in the geometry. ;  ; std::string GetSearch () const;  ; std::string GetSearchJson () const;  ; const std::vector< int > & GetSelectedStack () co",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:2846,Availability,avail,available,2846,"wOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression level for data transfer. ;  ; int GetMaxVisFaces () const;  Returns maximal visible number of faces, ignored when non-positive. ;  ; int GetMaxVisNodes () const;  Returns maximal visible number of nodes, ignored when non-positive. ;  ; TVirtualMutex * GetMutex () const;  Return currently used mutex. ;  ; int GetNSegments () const;  Return of segments for cylindrical shapes, if 0 - default value will be used. ;  ; int GetNumNodes () const;  Number of unique nodes in the geometry. ;  ; std::string GetSearch () const;  ; std::string GetSearchJson () const;  ; const std::vector< int > & GetSelectedStack () const;  Get top node path. ;  ; bool GetTopVisible () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; int GetVisLevel () const;  Returns maximal visible level. ;  ; bool HasDrawData () const;  Check if there is draw data available. ;  ; bool IsBuild () const;  ; int IsBuildShapes () const;  Returns true if binary 3D model build already by C++ server (default) ;  ; bool IsPreferredOffline () const;  Is offline operations preferred. ;  ; bool IsPrincipalEndNode (int nodeid);  return true when node used in main geometry drawing and does not have childs for such nodes one could provide optimize toggling of visibility flags ;  ; void IssueSignal (const void *handler, const std::string &kind);  Issue signal, which distributed on all handlers - excluding source handler. ;  ; std::vector< int > MakeIdsByStack (const std::vector< int > &stack);  Produce list of node ids for given stack If found nodes preselected - use their ids. ;  ; std::unique_ptr< RGeomNodeInfo > MakeNodeInfo (const std::vector< int > &stack);  Change visibility for specified element Returns true if changes was performed. ;  ; std::vector< std::string > MakePathByStack (const std::vector< int > &stack);  Returns pat",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:14271,Availability,failure,failure,14271,"inition at line 1370 of file RGeomData.cxx. ◆ ClearPhysNodeVisibility(). bool RGeomDescription::ClearPhysNodeVisibility ; (; const std::vector< std::string > & ; path). Reset custom visibility of physical node by path. ; Definition at line 2065 of file RGeomData.cxx. ◆ CollectNodes(). void RGeomDescription::CollectNodes ; (; RGeomDrawing & ; drawing, . bool ; all_nodes = false . ). private . Collect nodes which are used in visibles. ; Definition at line 721 of file RGeomData.cxx. ◆ CopyMaterialProperties(). void RGeomDescription::CopyMaterialProperties ; (; TGeoVolume * ; vol, . RGeomNode & ; node . ). private . Copy material properties. ; Definition at line 1159 of file RGeomData.cxx. ◆ CountShapeFaces(). int RGeomDescription::CountShapeFaces ; (; TGeoShape * ; shape). private . Count number of faces for the shape. ; Definition at line 937 of file RGeomData.cxx. ◆ FindNodeId(). int RGeomDescription::FindNodeId ; (; const std::vector< int > & ; stack). Returns nodeid for given stack array, returns -1 in case of failure. ; Definition at line 1602 of file RGeomData.cxx. ◆ FindShapeDescr(). RGeomDescription::ShapeDescr & RGeomDescription::FindShapeDescr ; (; TGeoShape * ; shape). private . Find description object for requested shape If not exists - will be created. ; Definition at line 857 of file RGeomData.cxx. ◆ GetActiveItem(). std::string ROOT::RGeomDescription::GetActiveItem ; (; ); const. inline . Definition at line 443 of file RGeomData.hxx. ◆ GetClickedItem(). std::vector< int > ROOT::RGeomDescription::GetClickedItem ; (; ); const. inline . Definition at line 429 of file RGeomData.hxx. ◆ GetDrawJson(). std::string ROOT::RGeomDescription::GetDrawJson ; (; ); const. inline . Definition at line 384 of file RGeomData.hxx. ◆ GetDrawOptions(). std::string ROOT::RGeomDescription::GetDrawOptions ; (; ); const. inline . Returns draw options, used for JSROOT TGeoPainter. ; Definition at line 349 of file RGeomData.hxx. ◆ GetHighlightedItem(). std::vector< int > ROOT::RGeom",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:17794,Availability,avail,available,17794," int > & ROOT::RGeomDescription::GetSelectedStack ; (; ); const. inline . Get top node path. ; Definition at line 364 of file RGeomData.hxx. ◆ GetTopVisible(). bool ROOT::RGeomDescription::GetTopVisible ; (; ); const. inline . Returns draw options, used for JSROOT TGeoPainter. ; Definition at line 334 of file RGeomData.hxx. ◆ GetUsedNSegments(). int RGeomDescription::GetUsedNSegments ; (; int ; min = 20). private . Returns really used number of cylindrical segments. ; Definition at line 922 of file RGeomData.cxx. ◆ GetVisLevel(). int ROOT::RGeomDescription::GetVisLevel ; (; ); const. inline . Returns maximal visible level. ; Definition at line 329 of file RGeomData.hxx. ◆ GetVolume(). TGeoVolume * RGeomDescription::GetVolume ; (; int ; nodeid). private . Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0. ; Definition at line 583 of file RGeomData.cxx. ◆ HasDrawData(). bool RGeomDescription::HasDrawData ; (; ); const. Check if there is draw data available. ; Definition at line 1331 of file RGeomData.cxx. ◆ IsBuild(). bool ROOT::RGeomDescription::IsBuild ; (; ); const. inline . Definition at line 373 of file RGeomData.hxx. ◆ IsBuildShapes(). int ROOT::RGeomDescription::IsBuildShapes ; (; ); const. inline . Returns true if binary 3D model build already by C++ server (default) ; Definition at line 339 of file RGeomData.hxx. ◆ IsPhysNodeVisible(). int RGeomDescription::IsPhysNodeVisible ; (; const std::vector< int > & ; stack). private . Check if there special settings for specified physical node returns -1 if nothing is found. ; Definition at line 2043 of file RGeomData.cxx. ◆ IsPreferredOffline(). bool ROOT::RGeomDescription::IsPreferredOffline ; (; ); const. inline . Is offline operations preferred. ; After get full description, client can do most operations without extra requests ; Definition at line 361 of file RGeomData.hxx. ◆ IsPrincipalEndNode(). bool RGeomDescription::IsPrincipalEndNode ; (; int ; nodeid). return",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:921,Deployability,configurat,configuration,921,". ROOT: ROOT::RGeomDescription Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RGeomDescription Class Reference. . Definition at line 210 of file RGeomData.hxx. Classes; class  ShapeDescr;  . Public Member Functions;  RGeomDescription ()=default;  ; void AddSignalHandler (const void *handler, RGeomSignalFunc_t func);  Add signal handler. ;  ; void Build (TGeoManager *mgr, const std::string &volname="""");  Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression le",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:5267,Deployability,configurat,configuration,5267,"d description object for requested shape If not exists - will be created. ;  ; void ProduceDrawData ();  Collect all information required to draw geometry on the client This includes list of each visible nodes, meshes and matrixes. ;  ; bool ProduceDrawingFor (int nodeid, std::string &json, bool check_volume=false);  Produce shape rendering data for given stack All nodes, which are referencing same shape will be transferred Returns true if new render information provided. ;  ; std::string ProduceJson (bool all_nodes=false);  Produce JSON string which can be directly used with build function from JSROOT to create three.js model of configured geometry. ;  ; std::string ProduceModifyReply (int nodeid);  Return string with only part of nodes description which were modified Checks also volume. ;  ; void ProduceSearchData ();  Produces search data if necessary. ;  ; void RemoveSignalHandler (const void *handler);  Remove signal handler. ;  ; void SavePrimitive (std::ostream &fs, const std::string &name);  Save geometry configuration as C++ macro. ;  ; int SearchVisibles (const std::string &find, std::string &hjson, std::string &json);  Search visible nodes for provided name If number of found elements less than 100, create description and shapes for them Returns number of match elements. ;  ; bool SelectTop (const std::vector< std::string > &path);  Select top node by path Used by the client to change active node Returns true if selected node was changed. ;  ; bool SetActiveItem (const std::string &itemname);  ; void SetBuildShapes (int lvl=1);  Instruct to build binary 3D model already on the server (true) or send TGeoShape as is to client, which can build model itself. ;  ; bool SetClickedItem (const std::vector< int > &stack);  ; void SetDrawOptions (const std::string &opt="""");  Set draw options as string for JSROOT TGeoPainter. ;  ; bool SetHighlightedItem (const std::vector< int > &stack);  ; void SetJsonComp (int comp=0);  Set JSON compression level for data transfe",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:9660,Deployability,configurat,configuration,9660,"der each node. ;  ; void ResetRndrInfos ();  Reset shape info, which used to pack binary data. ;  ; int ScanNodes (bool only_visible, int maxlvl, RGeomScanFunc_t func);  Iterate over all nodes and call function for visible. ;  . Private Attributes; std::string fActiveItemName;  ! name of item which should be activated in hierarchy ;  ; int fActualLevel {0};  ! level can be reduced when selecting nodes ;  ; RGeomConfig fCfg;  ! configuration parameter editable from GUI ;  ; std::vector< int > fClickedStack;  ! clicked element by stack ;  ; std::vector< RGeomNode > fDesc;  ! converted description, send to client ;  ; int fDrawIdCut {0};  ! sortid used for selection of most-significant nodes ;  ; std::string fDrawJson;  ! JSON with main nodes drawn by client ;  ; TGeoVolume * fDrawVolume {nullptr};  ! select volume independent from TGeoManager ;  ; std::vector< int > fHighlightedStack;  ! highlighted element by stack ;  ; int fJsonComp {0};  ! default JSON compression ;  ; TVirtualMutex * fMutex {nullptr};  ! external mutex used to protect all data ;  ; std::vector< TGeoNode * > fNodes;  ! flat list of all nodes ;  ; bool fPreferredOffline {false};  ! indicates that full description should be provided to client ;  ; std::string fSearch;  ! search string in hierarchy ;  ; std::string fSearchJson;  ! drawing json for search ;  ; std::vector< int > fSelectedStack;  ! selected branch of geometry by stack ;  ; std::vector< ShapeDescr > fShapes;  ! shapes with created descriptions ;  ; std::vector< std::pair< const void *, RGeomSignalFunc_t > > fSignals;  ! registered signals ;  ; std::vector< int > fSortMap;  ! nodes in order large -> smaller volume ;  ; std::vector< RGeomNodeVisibility > fVisibility;  ! custom visibility flags for physical nodes ;  . Friends; class RGeomBrowserIter;  . #include <ROOT/RGeomData.hxx>; Constructor & Destructor Documentation. ◆ RGeomDescription(). ROOT::RGeomDescription::RGeomDescription ; (; ). default . Member Function Documentation. ◆ AddSig",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:12223,Deployability,configurat,configuration,12223,"escription::AddSignalHandler ; (; const void * ; handler, . RGeomSignalFunc_t ; func . ). Add signal handler. ; Definition at line 312 of file RGeomData.cxx. ◆ Build() [1/2]. void RGeomDescription::Build ; (; TGeoManager * ; mgr, . const std::string & ; volname = """" . ). Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ; Definition at line 425 of file RGeomData.cxx. ◆ Build() [2/2]. void RGeomDescription::Build ; (; TGeoVolume * ; vol). Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ; Definition at line 460 of file RGeomData.cxx. ◆ BuildDescription(). void RGeomDescription::BuildDescription ; (; TGeoNode * ; topnode, . TGeoVolume * ; topvolume . ). private . Build geometry description. ; Definition at line 494 of file RGeomData.cxx. ◆ ChangeConfiguration(). bool RGeomDescription::ChangeConfiguration ; (; const std::string & ; json). Change configuration by client Returns true if any parameter was really changed. ; Definition at line 2105 of file RGeomData.cxx. ◆ ChangeNodeVisibility(). bool RGeomDescription::ChangeNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on . ). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1850 of file RGeomData.cxx. ◆ ClearAllPhysVisibility(). bool RGeomDescription::ClearAllPhysVisibility ; (; ). Reset all custom visibility settings. ; Definition at line 2089 of file RGeomData.cxx. ◆ ClearCache(). void RGeomDescription::ClearCache ; (; ). Clear cached data, need to be clear when connection broken. ; Definition at line 1381 of file RGeomData.cxx. ◆ ClearDescription(). void RGeomDescription::ClearDescription ; (; ). private . Clear geometry description. ; Definition at line 478 of file RGeomData.cxx. ◆ ClearDrawData(). void RGeomDescription::ClearDrawData ; (; ). Clear raw data. Will be rebuild when next connection will be established. ; Definition at l",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:24343,Deployability,configurat,configuration,24343,"ction to produce three.js model. Also see example in tutorials/webgui/geom/ folder ; Definition at line 1230 of file RGeomData.cxx. ◆ ProduceModifyReply(). std::string RGeomDescription::ProduceModifyReply ; (; int ; nodeid). Return string with only part of nodes description which were modified Checks also volume. ; Definition at line 1734 of file RGeomData.cxx. ◆ ProduceSearchData(). void RGeomDescription::ProduceSearchData ; (; ). Produces search data if necessary. ; Definition at line 1340 of file RGeomData.cxx. ◆ RemoveSignalHandler(). void RGeomDescription::RemoveSignalHandler ; (; const void * ; handler). Remove signal handler. ; Definition at line 321 of file RGeomData.cxx. ◆ ResetRndrInfos(). void RGeomDescription::ResetRndrInfos ; (; ). private . Reset shape info, which used to pack binary data. ; Definition at line 1201 of file RGeomData.cxx. ◆ SavePrimitive(). void RGeomDescription::SavePrimitive ; (; std::ostream & ; fs, . const std::string & ; name . ). Save geometry configuration as C++ macro. ; Definition at line 2143 of file RGeomData.cxx. ◆ ScanNodes(). int RGeomDescription::ScanNodes ; (; bool ; only_visible, . int ; maxlvl, . RGeomScanFunc_t ; func . ). private . Iterate over all nodes and call function for visible. ; Definition at line 653 of file RGeomData.cxx. ◆ SearchVisibles(). int RGeomDescription::SearchVisibles ; (; const std::string & ; find, . std::string & ; hjson, . std::string & ; json . ). Search visible nodes for provided name If number of found elements less than 100, create description and shapes for them Returns number of match elements. ; Definition at line 1411 of file RGeomData.cxx. ◆ SelectTop(). bool RGeomDescription::SelectTop ; (; const std::vector< std::string > & ; path). Select top node by path Used by the client to change active node Returns true if selected node was changed. ; Definition at line 1946 of file RGeomData.cxx. ◆ SetActiveItem(). bool ROOT::RGeomDescription::SetActiveItem ; (; const std::string & ; itemname",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:29273,Deployability,configurat,configuration,29273,"e RGeomData.cxx. ◆ SetTopVisible(). void ROOT::RGeomDescription::SetTopVisible ; (; bool ; on = true). inline . Set draw options as string for JSROOT TGeoPainter. ; Definition at line 332 of file RGeomData.hxx. ◆ SetVisLevel(). void ROOT::RGeomDescription::SetVisLevel ; (; int ; lvl = 3). inline . Set maximal visible level. ; Definition at line 327 of file RGeomData.hxx. Friends And Related Symbol Documentation. ◆ RGeomBrowserIter. friend class RGeomBrowserIter. friend . Definition at line 212 of file RGeomData.hxx. Member Data Documentation. ◆ fActiveItemName. std::string ROOT::RGeomDescription::fActiveItemName. private . ! name of item which should be activated in hierarchy ; Definition at line 262 of file RGeomData.hxx. ◆ fActualLevel. int ROOT::RGeomDescription::fActualLevel {0}. private . ! level can be reduced when selecting nodes ; Definition at line 259 of file RGeomData.hxx. ◆ fCfg. RGeomConfig ROOT::RGeomDescription::fCfg. private . ! configuration parameter editable from GUI ; Definition at line 264 of file RGeomData.hxx. ◆ fClickedStack. std::vector<int> ROOT::RGeomDescription::fClickedStack. private . ! clicked element by stack ; Definition at line 250 of file RGeomData.hxx. ◆ fDesc. std::vector<RGeomNode> ROOT::RGeomDescription::fDesc. private . ! converted description, send to client ; Definition at line 243 of file RGeomData.hxx. ◆ fDrawIdCut. int ROOT::RGeomDescription::fDrawIdCut {0}. private . ! sortid used for selection of most-significant nodes ; Definition at line 258 of file RGeomData.hxx. ◆ fDrawJson. std::string ROOT::RGeomDescription::fDrawJson. private . ! JSON with main nodes drawn by client ; Definition at line 257 of file RGeomData.hxx. ◆ fDrawVolume. TGeoVolume* ROOT::RGeomDescription::fDrawVolume {nullptr}. private . ! select volume independent from TGeoManager ; Definition at line 246 of file RGeomData.hxx. ◆ fHighlightedStack. std::vector<int> ROOT::RGeomDescription::fHighlightedStack. private . ! highlighted element by stack ; Defi",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:9605,Energy Efficiency,reduce,reduced,9605,"der each node. ;  ; void ResetRndrInfos ();  Reset shape info, which used to pack binary data. ;  ; int ScanNodes (bool only_visible, int maxlvl, RGeomScanFunc_t func);  Iterate over all nodes and call function for visible. ;  . Private Attributes; std::string fActiveItemName;  ! name of item which should be activated in hierarchy ;  ; int fActualLevel {0};  ! level can be reduced when selecting nodes ;  ; RGeomConfig fCfg;  ! configuration parameter editable from GUI ;  ; std::vector< int > fClickedStack;  ! clicked element by stack ;  ; std::vector< RGeomNode > fDesc;  ! converted description, send to client ;  ; int fDrawIdCut {0};  ! sortid used for selection of most-significant nodes ;  ; std::string fDrawJson;  ! JSON with main nodes drawn by client ;  ; TGeoVolume * fDrawVolume {nullptr};  ! select volume independent from TGeoManager ;  ; std::vector< int > fHighlightedStack;  ! highlighted element by stack ;  ; int fJsonComp {0};  ! default JSON compression ;  ; TVirtualMutex * fMutex {nullptr};  ! external mutex used to protect all data ;  ; std::vector< TGeoNode * > fNodes;  ! flat list of all nodes ;  ; bool fPreferredOffline {false};  ! indicates that full description should be provided to client ;  ; std::string fSearch;  ! search string in hierarchy ;  ; std::string fSearchJson;  ! drawing json for search ;  ; std::vector< int > fSelectedStack;  ! selected branch of geometry by stack ;  ; std::vector< ShapeDescr > fShapes;  ! shapes with created descriptions ;  ; std::vector< std::pair< const void *, RGeomSignalFunc_t > > fSignals;  ! registered signals ;  ; std::vector< int > fSortMap;  ! nodes in order large -> smaller volume ;  ; std::vector< RGeomNodeVisibility > fVisibility;  ! custom visibility flags for physical nodes ;  . Friends; class RGeomBrowserIter;  . #include <ROOT/RGeomData.hxx>; Constructor & Destructor Documentation. ◆ RGeomDescription(). ROOT::RGeomDescription::RGeomDescription ; (; ). default . Member Function Documentation. ◆ AddSig",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:29134,Energy Efficiency,reduce,reduced,29134,"tring & ; json . ). Change search query and belongs to it json string Returns true if any parameter was really changed. ; Definition at line 2130 of file RGeomData.cxx. ◆ SetTopVisible(). void ROOT::RGeomDescription::SetTopVisible ; (; bool ; on = true). inline . Set draw options as string for JSROOT TGeoPainter. ; Definition at line 332 of file RGeomData.hxx. ◆ SetVisLevel(). void ROOT::RGeomDescription::SetVisLevel ; (; int ; lvl = 3). inline . Set maximal visible level. ; Definition at line 327 of file RGeomData.hxx. Friends And Related Symbol Documentation. ◆ RGeomBrowserIter. friend class RGeomBrowserIter. friend . Definition at line 212 of file RGeomData.hxx. Member Data Documentation. ◆ fActiveItemName. std::string ROOT::RGeomDescription::fActiveItemName. private . ! name of item which should be activated in hierarchy ; Definition at line 262 of file RGeomData.hxx. ◆ fActualLevel. int ROOT::RGeomDescription::fActualLevel {0}. private . ! level can be reduced when selecting nodes ; Definition at line 259 of file RGeomData.hxx. ◆ fCfg. RGeomConfig ROOT::RGeomDescription::fCfg. private . ! configuration parameter editable from GUI ; Definition at line 264 of file RGeomData.hxx. ◆ fClickedStack. std::vector<int> ROOT::RGeomDescription::fClickedStack. private . ! clicked element by stack ; Definition at line 250 of file RGeomData.hxx. ◆ fDesc. std::vector<RGeomNode> ROOT::RGeomDescription::fDesc. private . ! converted description, send to client ; Definition at line 243 of file RGeomData.hxx. ◆ fDrawIdCut. int ROOT::RGeomDescription::fDrawIdCut {0}. private . ! sortid used for selection of most-significant nodes ; Definition at line 258 of file RGeomData.hxx. ◆ fDrawJson. std::string ROOT::RGeomDescription::fDrawJson. private . ! JSON with main nodes drawn by client ; Definition at line 257 of file RGeomData.hxx. ◆ fDrawVolume. TGeoVolume* ROOT::RGeomDescription::fDrawVolume {nullptr}. private . ! select volume independent from TGeoManager ; Definition at line 246",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:921,Modifiability,config,configuration,921,". ROOT: ROOT::RGeomDescription Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RGeomDescription Class Reference. . Definition at line 210 of file RGeomData.hxx. Classes; class  ShapeDescr;  . Public Member Functions;  RGeomDescription ()=default;  ; void AddSignalHandler (const void *handler, RGeomSignalFunc_t func);  Add signal handler. ;  ; void Build (TGeoManager *mgr, const std::string &volname="""");  Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression le",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:4876,Modifiability,config,configured,4876,"ckByIds (const std::vector< int > &ids);  Creates stack for given array of ids, first element always should be 0. ;  ; std::vector< int > MakeStackByPath (const std::vector< std::string > &path);  Produce stack based on string path Used to highlight geo volumes by browser hover event. ;  ; std::string ProcessBrowserRequest (const std::string &req="""");  Find description object for requested shape If not exists - will be created. ;  ; void ProduceDrawData ();  Collect all information required to draw geometry on the client This includes list of each visible nodes, meshes and matrixes. ;  ; bool ProduceDrawingFor (int nodeid, std::string &json, bool check_volume=false);  Produce shape rendering data for given stack All nodes, which are referencing same shape will be transferred Returns true if new render information provided. ;  ; std::string ProduceJson (bool all_nodes=false);  Produce JSON string which can be directly used with build function from JSROOT to create three.js model of configured geometry. ;  ; std::string ProduceModifyReply (int nodeid);  Return string with only part of nodes description which were modified Checks also volume. ;  ; void ProduceSearchData ();  Produces search data if necessary. ;  ; void RemoveSignalHandler (const void *handler);  Remove signal handler. ;  ; void SavePrimitive (std::ostream &fs, const std::string &name);  Save geometry configuration as C++ macro. ;  ; int SearchVisibles (const std::string &find, std::string &hjson, std::string &json);  Search visible nodes for provided name If number of found elements less than 100, create description and shapes for them Returns number of match elements. ;  ; bool SelectTop (const std::vector< std::string > &path);  Select top node by path Used by the client to change active node Returns true if selected node was changed. ;  ; bool SetActiveItem (const std::string &itemname);  ; void SetBuildShapes (int lvl=1);  Instruct to build binary 3D model already on the server (true) or send TGeoS",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:5267,Modifiability,config,configuration,5267,"d description object for requested shape If not exists - will be created. ;  ; void ProduceDrawData ();  Collect all information required to draw geometry on the client This includes list of each visible nodes, meshes and matrixes. ;  ; bool ProduceDrawingFor (int nodeid, std::string &json, bool check_volume=false);  Produce shape rendering data for given stack All nodes, which are referencing same shape will be transferred Returns true if new render information provided. ;  ; std::string ProduceJson (bool all_nodes=false);  Produce JSON string which can be directly used with build function from JSROOT to create three.js model of configured geometry. ;  ; std::string ProduceModifyReply (int nodeid);  Return string with only part of nodes description which were modified Checks also volume. ;  ; void ProduceSearchData ();  Produces search data if necessary. ;  ; void RemoveSignalHandler (const void *handler);  Remove signal handler. ;  ; void SavePrimitive (std::ostream &fs, const std::string &name);  Save geometry configuration as C++ macro. ;  ; int SearchVisibles (const std::string &find, std::string &hjson, std::string &json);  Search visible nodes for provided name If number of found elements less than 100, create description and shapes for them Returns number of match elements. ;  ; bool SelectTop (const std::vector< std::string > &path);  Select top node by path Used by the client to change active node Returns true if selected node was changed. ;  ; bool SetActiveItem (const std::string &itemname);  ; void SetBuildShapes (int lvl=1);  Instruct to build binary 3D model already on the server (true) or send TGeoShape as is to client, which can build model itself. ;  ; bool SetClickedItem (const std::vector< int > &stack);  ; void SetDrawOptions (const std::string &opt="""");  Set draw options as string for JSROOT TGeoPainter. ;  ; bool SetHighlightedItem (const std::vector< int > &stack);  ; void SetJsonComp (int comp=0);  Set JSON compression level for data transfe",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:8232,Modifiability,config,configured,8232,"ngs to it json string Returns true if any parameter was really changed. ;  ; void SetTopVisible (bool on=true);  Set draw options as string for JSROOT TGeoPainter. ;  ; void SetVisLevel (int lvl=3);  Set maximal visible level. ;  . Private Member Functions; void BuildDescription (TGeoNode *topnode, TGeoVolume *topvolume);  Build geometry description. ;  ; void ClearDescription ();  Clear geometry description. ;  ; void CollectNodes (RGeomDrawing &drawing, bool all_nodes=false);  Collect nodes which are used in visibles. ;  ; void CopyMaterialProperties (TGeoVolume *vol, RGeomNode &node);  Copy material properties. ;  ; int CountShapeFaces (TGeoShape *shape);  Count number of faces for the shape. ;  ; ShapeDescr & FindShapeDescr (TGeoShape *shape);  Find description object for requested shape If not exists - will be created. ;  ; int GetUsedNSegments (int min=20);  Returns really used number of cylindrical segments. ;  ; TGeoVolume * GetVolume (int nodeid);  Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0. ;  ; int IsPhysNodeVisible (const std::vector< int > &stack);  Check if there special settings for specified physical node returns -1 if nothing is found. ;  ; std::string MakeDrawingJson (RGeomDrawing &drawing, bool has_shapes=false);  Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in this case one can exclude several classes which are not interesting, but appears very often. ;  ; ShapeDescr & MakeShapeDescr (TGeoShape *shape);  Find description object and create render information. ;  ; int MarkVisible (bool on_screen=false);  Set visibility flag for each nodes. ;  ; void PackMatrix (std::vector< float > &arr, TGeoMatrix *matr);  Pack matrix into vector, which can be send to client Following sizes can be used for vector: 0 - Identity matrix 3 - Translation 4 - Scale (last element always 1) 9 - Rotation 16 - Full size. ;  ; void ProduceIdShifts ();  Count total numb",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:9660,Modifiability,config,configuration,9660,"der each node. ;  ; void ResetRndrInfos ();  Reset shape info, which used to pack binary data. ;  ; int ScanNodes (bool only_visible, int maxlvl, RGeomScanFunc_t func);  Iterate over all nodes and call function for visible. ;  . Private Attributes; std::string fActiveItemName;  ! name of item which should be activated in hierarchy ;  ; int fActualLevel {0};  ! level can be reduced when selecting nodes ;  ; RGeomConfig fCfg;  ! configuration parameter editable from GUI ;  ; std::vector< int > fClickedStack;  ! clicked element by stack ;  ; std::vector< RGeomNode > fDesc;  ! converted description, send to client ;  ; int fDrawIdCut {0};  ! sortid used for selection of most-significant nodes ;  ; std::string fDrawJson;  ! JSON with main nodes drawn by client ;  ; TGeoVolume * fDrawVolume {nullptr};  ! select volume independent from TGeoManager ;  ; std::vector< int > fHighlightedStack;  ! highlighted element by stack ;  ; int fJsonComp {0};  ! default JSON compression ;  ; TVirtualMutex * fMutex {nullptr};  ! external mutex used to protect all data ;  ; std::vector< TGeoNode * > fNodes;  ! flat list of all nodes ;  ; bool fPreferredOffline {false};  ! indicates that full description should be provided to client ;  ; std::string fSearch;  ! search string in hierarchy ;  ; std::string fSearchJson;  ! drawing json for search ;  ; std::vector< int > fSelectedStack;  ! selected branch of geometry by stack ;  ; std::vector< ShapeDescr > fShapes;  ! shapes with created descriptions ;  ; std::vector< std::pair< const void *, RGeomSignalFunc_t > > fSignals;  ! registered signals ;  ; std::vector< int > fSortMap;  ! nodes in order large -> smaller volume ;  ; std::vector< RGeomNodeVisibility > fVisibility;  ! custom visibility flags for physical nodes ;  . Friends; class RGeomBrowserIter;  . #include <ROOT/RGeomData.hxx>; Constructor & Destructor Documentation. ◆ RGeomDescription(). ROOT::RGeomDescription::RGeomDescription ; (; ). default . Member Function Documentation. ◆ AddSig",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:12223,Modifiability,config,configuration,12223,"escription::AddSignalHandler ; (; const void * ; handler, . RGeomSignalFunc_t ; func . ). Add signal handler. ; Definition at line 312 of file RGeomData.cxx. ◆ Build() [1/2]. void RGeomDescription::Build ; (; TGeoManager * ; mgr, . const std::string & ; volname = """" . ). Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ; Definition at line 425 of file RGeomData.cxx. ◆ Build() [2/2]. void RGeomDescription::Build ; (; TGeoVolume * ; vol). Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ; Definition at line 460 of file RGeomData.cxx. ◆ BuildDescription(). void RGeomDescription::BuildDescription ; (; TGeoNode * ; topnode, . TGeoVolume * ; topvolume . ). private . Build geometry description. ; Definition at line 494 of file RGeomData.cxx. ◆ ChangeConfiguration(). bool RGeomDescription::ChangeConfiguration ; (; const std::string & ; json). Change configuration by client Returns true if any parameter was really changed. ; Definition at line 2105 of file RGeomData.cxx. ◆ ChangeNodeVisibility(). bool RGeomDescription::ChangeNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on . ). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1850 of file RGeomData.cxx. ◆ ClearAllPhysVisibility(). bool RGeomDescription::ClearAllPhysVisibility ; (; ). Reset all custom visibility settings. ; Definition at line 2089 of file RGeomData.cxx. ◆ ClearCache(). void RGeomDescription::ClearCache ; (; ). Clear cached data, need to be clear when connection broken. ; Definition at line 1381 of file RGeomData.cxx. ◆ ClearDescription(). void RGeomDescription::ClearDescription ; (; ). private . Clear geometry description. ; Definition at line 478 of file RGeomData.cxx. ◆ ClearDrawData(). void RGeomDescription::ClearDrawData ; (; ). Clear raw data. Will be rebuild when next connection will be established. ; Definition at l",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:17604,Modifiability,config,configured,17604,".hxx. ◆ GetSearchJson(). std::string ROOT::RGeomDescription::GetSearchJson ; (; ); const. inline . Definition at line 386 of file RGeomData.hxx. ◆ GetSelectedStack(). const std::vector< int > & ROOT::RGeomDescription::GetSelectedStack ; (; ); const. inline . Get top node path. ; Definition at line 364 of file RGeomData.hxx. ◆ GetTopVisible(). bool ROOT::RGeomDescription::GetTopVisible ; (; ); const. inline . Returns draw options, used for JSROOT TGeoPainter. ; Definition at line 334 of file RGeomData.hxx. ◆ GetUsedNSegments(). int RGeomDescription::GetUsedNSegments ; (; int ; min = 20). private . Returns really used number of cylindrical segments. ; Definition at line 922 of file RGeomData.cxx. ◆ GetVisLevel(). int ROOT::RGeomDescription::GetVisLevel ; (; ); const. inline . Returns maximal visible level. ; Definition at line 329 of file RGeomData.hxx. ◆ GetVolume(). TGeoVolume * RGeomDescription::GetVolume ; (; int ; nodeid). private . Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0. ; Definition at line 583 of file RGeomData.cxx. ◆ HasDrawData(). bool RGeomDescription::HasDrawData ; (; ); const. Check if there is draw data available. ; Definition at line 1331 of file RGeomData.cxx. ◆ IsBuild(). bool ROOT::RGeomDescription::IsBuild ; (; ); const. inline . Definition at line 373 of file RGeomData.hxx. ◆ IsBuildShapes(). int ROOT::RGeomDescription::IsBuildShapes ; (; ); const. inline . Returns true if binary 3D model build already by C++ server (default) ; Definition at line 339 of file RGeomData.hxx. ◆ IsPhysNodeVisible(). int RGeomDescription::IsPhysNodeVisible ; (; const std::vector< int > & ; stack). private . Check if there special settings for specified physical node returns -1 if nothing is found. ; Definition at line 2043 of file RGeomData.cxx. ◆ IsPreferredOffline(). bool ROOT::RGeomDescription::IsPreferredOffline ; (; ); const. inline . Is offline operations preferred. ; After get full description, client ",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:22780,Modifiability,config,configured,22780,"7 of file RGeomData.cxx. ◆ ProduceDrawData(). void RGeomDescription::ProduceDrawData ; (; ). Collect all information required to draw geometry on the client This includes list of each visible nodes, meshes and matrixes. ; Definition at line 1358 of file RGeomData.cxx. ◆ ProduceDrawingFor(). bool RGeomDescription::ProduceDrawingFor ; (; int ; nodeid, . std::string & ; json, . bool ; check_volume = false . ). Produce shape rendering data for given stack All nodes, which are referencing same shape will be transferred Returns true if new render information provided. ; Definition at line 1757 of file RGeomData.cxx. ◆ ProduceIdShifts(). void RGeomDescription::ProduceIdShifts ; (; ). private . Count total number of visible childs under each node. ; Definition at line 629 of file RGeomData.cxx. ◆ ProduceJson(). std::string RGeomDescription::ProduceJson ; (; bool ; all_nodes = false). Produce JSON string which can be directly used with build function from JSROOT to create three.js model of configured geometry. ; Collect all information required to draw geometry on the client This includes list of each visible nodes, meshes and matrixes IfParameters. all_nodesis true, all existing nodes will be provided, which allows to create complete nodes hierarchy on client side. Example of usage:; void geom() { auto f = TFile::Open(""file_name.root""); auto vol = f->Get<TGeoVolume>(""object_name""); ROOT::RGeomDescription desc; desc.Build(vol); std::ofstream fout(""geom.json""); fout << desc.ProduceJson(); }; In JSROOT one loads data from JSON file and call build function to produce three.js model. Also see example in tutorials/webgui/geom/ folder ; Definition at line 1230 of file RGeomData.cxx. ◆ ProduceModifyReply(). std::string RGeomDescription::ProduceModifyReply ; (; int ; nodeid). Return string with only part of nodes description which were modified Checks also volume. ; Definition at line 1734 of file RGeomData.cxx. ◆ ProduceSearchData(). void RGeomDescription::ProduceSearchData ; (; ).",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:24343,Modifiability,config,configuration,24343,"ction to produce three.js model. Also see example in tutorials/webgui/geom/ folder ; Definition at line 1230 of file RGeomData.cxx. ◆ ProduceModifyReply(). std::string RGeomDescription::ProduceModifyReply ; (; int ; nodeid). Return string with only part of nodes description which were modified Checks also volume. ; Definition at line 1734 of file RGeomData.cxx. ◆ ProduceSearchData(). void RGeomDescription::ProduceSearchData ; (; ). Produces search data if necessary. ; Definition at line 1340 of file RGeomData.cxx. ◆ RemoveSignalHandler(). void RGeomDescription::RemoveSignalHandler ; (; const void * ; handler). Remove signal handler. ; Definition at line 321 of file RGeomData.cxx. ◆ ResetRndrInfos(). void RGeomDescription::ResetRndrInfos ; (; ). private . Reset shape info, which used to pack binary data. ; Definition at line 1201 of file RGeomData.cxx. ◆ SavePrimitive(). void RGeomDescription::SavePrimitive ; (; std::ostream & ; fs, . const std::string & ; name . ). Save geometry configuration as C++ macro. ; Definition at line 2143 of file RGeomData.cxx. ◆ ScanNodes(). int RGeomDescription::ScanNodes ; (; bool ; only_visible, . int ; maxlvl, . RGeomScanFunc_t ; func . ). private . Iterate over all nodes and call function for visible. ; Definition at line 653 of file RGeomData.cxx. ◆ SearchVisibles(). int RGeomDescription::SearchVisibles ; (; const std::string & ; find, . std::string & ; hjson, . std::string & ; json . ). Search visible nodes for provided name If number of found elements less than 100, create description and shapes for them Returns number of match elements. ; Definition at line 1411 of file RGeomData.cxx. ◆ SelectTop(). bool RGeomDescription::SelectTop ; (; const std::vector< std::string > & ; path). Select top node by path Used by the client to change active node Returns true if selected node was changed. ; Definition at line 1946 of file RGeomData.cxx. ◆ SetActiveItem(). bool ROOT::RGeomDescription::SetActiveItem ; (; const std::string & ; itemname",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:29273,Modifiability,config,configuration,29273,"e RGeomData.cxx. ◆ SetTopVisible(). void ROOT::RGeomDescription::SetTopVisible ; (; bool ; on = true). inline . Set draw options as string for JSROOT TGeoPainter. ; Definition at line 332 of file RGeomData.hxx. ◆ SetVisLevel(). void ROOT::RGeomDescription::SetVisLevel ; (; int ; lvl = 3). inline . Set maximal visible level. ; Definition at line 327 of file RGeomData.hxx. Friends And Related Symbol Documentation. ◆ RGeomBrowserIter. friend class RGeomBrowserIter. friend . Definition at line 212 of file RGeomData.hxx. Member Data Documentation. ◆ fActiveItemName. std::string ROOT::RGeomDescription::fActiveItemName. private . ! name of item which should be activated in hierarchy ; Definition at line 262 of file RGeomData.hxx. ◆ fActualLevel. int ROOT::RGeomDescription::fActualLevel {0}. private . ! level can be reduced when selecting nodes ; Definition at line 259 of file RGeomData.hxx. ◆ fCfg. RGeomConfig ROOT::RGeomDescription::fCfg. private . ! configuration parameter editable from GUI ; Definition at line 264 of file RGeomData.hxx. ◆ fClickedStack. std::vector<int> ROOT::RGeomDescription::fClickedStack. private . ! clicked element by stack ; Definition at line 250 of file RGeomData.hxx. ◆ fDesc. std::vector<RGeomNode> ROOT::RGeomDescription::fDesc. private . ! converted description, send to client ; Definition at line 243 of file RGeomData.hxx. ◆ fDrawIdCut. int ROOT::RGeomDescription::fDrawIdCut {0}. private . ! sortid used for selection of most-significant nodes ; Definition at line 258 of file RGeomData.hxx. ◆ fDrawJson. std::string ROOT::RGeomDescription::fDrawJson. private . ! JSON with main nodes drawn by client ; Definition at line 257 of file RGeomData.hxx. ◆ fDrawVolume. TGeoVolume* ROOT::RGeomDescription::fDrawVolume {nullptr}. private . ! select volume independent from TGeoManager ; Definition at line 246 of file RGeomData.hxx. ◆ fHighlightedStack. std::vector<int> ROOT::RGeomDescription::fHighlightedStack. private . ! highlighted element by stack ; Defi",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:1146,Performance,perform,performed,1146,"ce Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RGeomDescription Class Reference. . Definition at line 210 of file RGeomData.hxx. Classes; class  ShapeDescr;  . Public Member Functions;  RGeomDescription ()=default;  ; void AddSignalHandler (const void *handler, RGeomSignalFunc_t func);  Add signal handler. ;  ; void Build (TGeoManager *mgr, const std::string &volname="""");  Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression level for data transfer. ;  ; int GetMaxVisFaces () const;  Returns maximal ",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:1265,Performance,cache,cached,1265,"OT::RGeomDescription Class Reference. . Definition at line 210 of file RGeomData.hxx. Classes; class  ShapeDescr;  . Public Member Functions;  RGeomDescription ()=default;  ; void AddSignalHandler (const void *handler, RGeomSignalFunc_t func);  Add signal handler. ;  ; void Build (TGeoManager *mgr, const std::string &volname="""");  Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression level for data transfer. ;  ; int GetMaxVisFaces () const;  Returns maximal visible number of faces, ignored when non-positive. ;  ; int GetMaxVisNodes () const;  Returns maximal visible number of nodes, ignored when non-positive. ;  ; TVirtualMutex * GetMutex () const;  Retu",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:3214,Performance,optimiz,optimize,3214,". ;  ; TVirtualMutex * GetMutex () const;  Return currently used mutex. ;  ; int GetNSegments () const;  Return of segments for cylindrical shapes, if 0 - default value will be used. ;  ; int GetNumNodes () const;  Number of unique nodes in the geometry. ;  ; std::string GetSearch () const;  ; std::string GetSearchJson () const;  ; const std::vector< int > & GetSelectedStack () const;  Get top node path. ;  ; bool GetTopVisible () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; int GetVisLevel () const;  Returns maximal visible level. ;  ; bool HasDrawData () const;  Check if there is draw data available. ;  ; bool IsBuild () const;  ; int IsBuildShapes () const;  Returns true if binary 3D model build already by C++ server (default) ;  ; bool IsPreferredOffline () const;  Is offline operations preferred. ;  ; bool IsPrincipalEndNode (int nodeid);  return true when node used in main geometry drawing and does not have childs for such nodes one could provide optimize toggling of visibility flags ;  ; void IssueSignal (const void *handler, const std::string &kind);  Issue signal, which distributed on all handlers - excluding source handler. ;  ; std::vector< int > MakeIdsByStack (const std::vector< int > &stack);  Produce list of node ids for given stack If found nodes preselected - use their ids. ;  ; std::unique_ptr< RGeomNodeInfo > MakeNodeInfo (const std::vector< int > &stack);  Change visibility for specified element Returns true if changes was performed. ;  ; std::vector< std::string > MakePathByStack (const std::vector< int > &stack);  Returns path string for provided stack. ;  ; std::vector< int > MakeStackByIds (const std::vector< int > &ids);  Creates stack for given array of ids, first element always should be 0. ;  ; std::vector< int > MakeStackByPath (const std::vector< std::string > &path);  Produce stack based on string path Used to highlight geo volumes by browser hover event. ;  ; std::string ProcessBrowserRequest (const std::string &req=",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:3714,Performance,perform,performed,3714,"bool GetTopVisible () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; int GetVisLevel () const;  Returns maximal visible level. ;  ; bool HasDrawData () const;  Check if there is draw data available. ;  ; bool IsBuild () const;  ; int IsBuildShapes () const;  Returns true if binary 3D model build already by C++ server (default) ;  ; bool IsPreferredOffline () const;  Is offline operations preferred. ;  ; bool IsPrincipalEndNode (int nodeid);  return true when node used in main geometry drawing and does not have childs for such nodes one could provide optimize toggling of visibility flags ;  ; void IssueSignal (const void *handler, const std::string &kind);  Issue signal, which distributed on all handlers - excluding source handler. ;  ; std::vector< int > MakeIdsByStack (const std::vector< int > &stack);  Produce list of node ids for given stack If found nodes preselected - use their ids. ;  ; std::unique_ptr< RGeomNodeInfo > MakeNodeInfo (const std::vector< int > &stack);  Change visibility for specified element Returns true if changes was performed. ;  ; std::vector< std::string > MakePathByStack (const std::vector< int > &stack);  Returns path string for provided stack. ;  ; std::vector< int > MakeStackByIds (const std::vector< int > &ids);  Creates stack for given array of ids, first element always should be 0. ;  ; std::vector< int > MakeStackByPath (const std::vector< std::string > &path);  Produce stack based on string path Used to highlight geo volumes by browser hover event. ;  ; std::string ProcessBrowserRequest (const std::string &req="""");  Find description object for requested shape If not exists - will be created. ;  ; void ProduceDrawData ();  Collect all information required to draw geometry on the client This includes list of each visible nodes, meshes and matrixes. ;  ; bool ProduceDrawingFor (int nodeid, std::string &json, bool check_volume=false);  Produce shape rendering data for given stack All nodes, which are referencing same s",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:12549,Performance,perform,performed,12549,""""" . ). Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ; Definition at line 425 of file RGeomData.cxx. ◆ Build() [2/2]. void RGeomDescription::Build ; (; TGeoVolume * ; vol). Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ; Definition at line 460 of file RGeomData.cxx. ◆ BuildDescription(). void RGeomDescription::BuildDescription ; (; TGeoNode * ; topnode, . TGeoVolume * ; topvolume . ). private . Build geometry description. ; Definition at line 494 of file RGeomData.cxx. ◆ ChangeConfiguration(). bool RGeomDescription::ChangeConfiguration ; (; const std::string & ; json). Change configuration by client Returns true if any parameter was really changed. ; Definition at line 2105 of file RGeomData.cxx. ◆ ChangeNodeVisibility(). bool RGeomDescription::ChangeNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on . ). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1850 of file RGeomData.cxx. ◆ ClearAllPhysVisibility(). bool RGeomDescription::ClearAllPhysVisibility ; (; ). Reset all custom visibility settings. ; Definition at line 2089 of file RGeomData.cxx. ◆ ClearCache(). void RGeomDescription::ClearCache ; (; ). Clear cached data, need to be clear when connection broken. ; Definition at line 1381 of file RGeomData.cxx. ◆ ClearDescription(). void RGeomDescription::ClearDescription ; (; ). private . Clear geometry description. ; Definition at line 478 of file RGeomData.cxx. ◆ ClearDrawData(). void RGeomDescription::ClearDrawData ; (; ). Clear raw data. Will be rebuild when next connection will be established. ; Definition at line 1370 of file RGeomData.cxx. ◆ ClearPhysNodeVisibility(). bool RGeomDescription::ClearPhysNodeVisibility ; (; const std::vector< std::string > & ; path). Reset custom visibility of physical node by path. ; Definition at line 2065 of file RGeomData.cxx. ◆ Collec",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:12842,Performance,cache,cached,12842,"nition at line 460 of file RGeomData.cxx. ◆ BuildDescription(). void RGeomDescription::BuildDescription ; (; TGeoNode * ; topnode, . TGeoVolume * ; topvolume . ). private . Build geometry description. ; Definition at line 494 of file RGeomData.cxx. ◆ ChangeConfiguration(). bool RGeomDescription::ChangeConfiguration ; (; const std::string & ; json). Change configuration by client Returns true if any parameter was really changed. ; Definition at line 2105 of file RGeomData.cxx. ◆ ChangeNodeVisibility(). bool RGeomDescription::ChangeNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on . ). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1850 of file RGeomData.cxx. ◆ ClearAllPhysVisibility(). bool RGeomDescription::ClearAllPhysVisibility ; (; ). Reset all custom visibility settings. ; Definition at line 2089 of file RGeomData.cxx. ◆ ClearCache(). void RGeomDescription::ClearCache ; (; ). Clear cached data, need to be clear when connection broken. ; Definition at line 1381 of file RGeomData.cxx. ◆ ClearDescription(). void RGeomDescription::ClearDescription ; (; ). private . Clear geometry description. ; Definition at line 478 of file RGeomData.cxx. ◆ ClearDrawData(). void RGeomDescription::ClearDrawData ; (; ). Clear raw data. Will be rebuild when next connection will be established. ; Definition at line 1370 of file RGeomData.cxx. ◆ ClearPhysNodeVisibility(). bool RGeomDescription::ClearPhysNodeVisibility ; (; const std::vector< std::string > & ; path). Reset custom visibility of physical node by path. ; Definition at line 2065 of file RGeomData.cxx. ◆ CollectNodes(). void RGeomDescription::CollectNodes ; (; RGeomDrawing & ; drawing, . bool ; all_nodes = false . ). private . Collect nodes which are used in visibles. ; Definition at line 721 of file RGeomData.cxx. ◆ CopyMaterialProperties(). void RGeomDescription::CopyMaterialProperties ; (; TGeoVolume * ; vol, . RGeomNode & ; node . ). private . C",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:18889,Performance,optimiz,optimize,18889,"OT::RGeomDescription::IsBuild ; (; ); const. inline . Definition at line 373 of file RGeomData.hxx. ◆ IsBuildShapes(). int ROOT::RGeomDescription::IsBuildShapes ; (; ); const. inline . Returns true if binary 3D model build already by C++ server (default) ; Definition at line 339 of file RGeomData.hxx. ◆ IsPhysNodeVisible(). int RGeomDescription::IsPhysNodeVisible ; (; const std::vector< int > & ; stack). private . Check if there special settings for specified physical node returns -1 if nothing is found. ; Definition at line 2043 of file RGeomData.cxx. ◆ IsPreferredOffline(). bool ROOT::RGeomDescription::IsPreferredOffline ; (; ); const. inline . Is offline operations preferred. ; After get full description, client can do most operations without extra requests ; Definition at line 361 of file RGeomData.hxx. ◆ IsPrincipalEndNode(). bool RGeomDescription::IsPrincipalEndNode ; (; int ; nodeid). return true when node used in main geometry drawing and does not have childs for such nodes one could provide optimize toggling of visibility flags ; Definition at line 1394 of file RGeomData.cxx. ◆ IssueSignal(). void RGeomDescription::IssueSignal ; (; const void * ; handler, . const std::string & ; kind . ). Issue signal, which distributed on all handlers - excluding source handler. ; Definition at line 293 of file RGeomData.cxx. ◆ MakeDrawingJson(). std::string RGeomDescription::MakeDrawingJson ; (; RGeomDrawing & ; drawing, . bool ; has_shapes = false . ). private . Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in this case one can exclude several classes which are not interesting, but appears very often. ; Definition at line 1826 of file RGeomData.cxx. ◆ MakeIdsByStack(). std::vector< int > RGeomDescription::MakeIdsByStack ; (; const std::vector< int > & ; stack). Produce list of node ids for given stack If found nodes preselected - use their ids. ; Definition at line 1683 of file RGeomData.cxx. ◆ MakeNodeInfo(). std::unique_p",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:20036,Performance,perform,performed,20036,"cription::IssueSignal ; (; const void * ; handler, . const std::string & ; kind . ). Issue signal, which distributed on all handlers - excluding source handler. ; Definition at line 293 of file RGeomData.cxx. ◆ MakeDrawingJson(). std::string RGeomDescription::MakeDrawingJson ; (; RGeomDrawing & ; drawing, . bool ; has_shapes = false . ). private . Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in this case one can exclude several classes which are not interesting, but appears very often. ; Definition at line 1826 of file RGeomData.cxx. ◆ MakeIdsByStack(). std::vector< int > RGeomDescription::MakeIdsByStack ; (; const std::vector< int > & ; stack). Produce list of node ids for given stack If found nodes preselected - use their ids. ; Definition at line 1683 of file RGeomData.cxx. ◆ MakeNodeInfo(). std::unique_ptr< RGeomNodeInfo > RGeomDescription::MakeNodeInfo ; (; const std::vector< int > & ; stack). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1899 of file RGeomData.cxx. ◆ MakePathByStack(). std::vector< std::string > RGeomDescription::MakePathByStack ; (; const std::vector< int > & ; stack). Returns path string for provided stack. ; Definition at line 1716 of file RGeomData.cxx. ◆ MakeShapeDescr(). RGeomDescription::ShapeDescr & RGeomDescription::MakeShapeDescr ; (; TGeoShape * ; shape). private . Find description object and create render information. ; Definition at line 1070 of file RGeomData.cxx. ◆ MakeStackByIds(). std::vector< int > RGeomDescription::MakeStackByIds ; (; const std::vector< int > & ; ids). Creates stack for given array of ids, first element always should be 0. ; Definition at line 1621 of file RGeomData.cxx. ◆ MakeStackByPath(). std::vector< int > RGeomDescription::MakeStackByPath ; (; const std::vector< std::string > & ; path). Produce stack based on string path Used to highlight geo volumes by browser hover event. ; Definition at line 1665 of",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:23305,Performance,load,loads,23305,"w render information provided. ; Definition at line 1757 of file RGeomData.cxx. ◆ ProduceIdShifts(). void RGeomDescription::ProduceIdShifts ; (; ). private . Count total number of visible childs under each node. ; Definition at line 629 of file RGeomData.cxx. ◆ ProduceJson(). std::string RGeomDescription::ProduceJson ; (; bool ; all_nodes = false). Produce JSON string which can be directly used with build function from JSROOT to create three.js model of configured geometry. ; Collect all information required to draw geometry on the client This includes list of each visible nodes, meshes and matrixes IfParameters. all_nodesis true, all existing nodes will be provided, which allows to create complete nodes hierarchy on client side. Example of usage:; void geom() { auto f = TFile::Open(""file_name.root""); auto vol = f->Get<TGeoVolume>(""object_name""); ROOT::RGeomDescription desc; desc.Build(vol); std::ofstream fout(""geom.json""); fout << desc.ProduceJson(); }; In JSROOT one loads data from JSON file and call build function to produce three.js model. Also see example in tutorials/webgui/geom/ folder ; Definition at line 1230 of file RGeomData.cxx. ◆ ProduceModifyReply(). std::string RGeomDescription::ProduceModifyReply ; (; int ; nodeid). Return string with only part of nodes description which were modified Checks also volume. ; Definition at line 1734 of file RGeomData.cxx. ◆ ProduceSearchData(). void RGeomDescription::ProduceSearchData ; (; ). Produces search data if necessary. ; Definition at line 1340 of file RGeomData.cxx. ◆ RemoveSignalHandler(). void RGeomDescription::RemoveSignalHandler ; (; const void * ; handler). Remove signal handler. ; Definition at line 321 of file RGeomData.cxx. ◆ ResetRndrInfos(). void RGeomDescription::ResetRndrInfos ; (; ). private . Reset shape info, which used to pack binary data. ; Definition at line 1201 of file RGeomData.cxx. ◆ SavePrimitive(). void RGeomDescription::SavePrimitive ; (; std::ostream & ; fs, . const std::string & ; name",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:27998,Safety,avoid,avoid,27998,"(). void ROOT::RGeomDescription::SetNSegments ; (; int ; n = 0). inline . Set number of segments for cylindrical shapes, if 0 - default value will be used. ; Definition at line 342 of file RGeomData.hxx. ◆ SetPhysNodeVisibility() [1/2]. bool RGeomDescription::SetPhysNodeVisibility ; (; const std::string & ; path, . bool ; on = true . ). Set visibility of physical node by itemname itemname in string with path like ""/TOP_1/SUB_2/NODE_3"". ; Definition at line 2016 of file RGeomData.cxx. ◆ SetPhysNodeVisibility() [2/2]. bool RGeomDescription::SetPhysNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on = true . ). Set visibility of physical node by path It overrules TGeo visibility flags - but only for specific physical node. ; Definition at line 1970 of file RGeomData.cxx. ◆ SetPreferredOffline(). void ROOT::RGeomDescription::SetPreferredOffline ; (; bool ; on). inline . Set preference of offline operations. ; Server provides more info to client from the begin on to avoid communication ; Definition at line 358 of file RGeomData.hxx. ◆ SetSearch(). bool RGeomDescription::SetSearch ; (; const std::string & ; query, . const std::string & ; json . ). Change search query and belongs to it json string Returns true if any parameter was really changed. ; Definition at line 2130 of file RGeomData.cxx. ◆ SetTopVisible(). void ROOT::RGeomDescription::SetTopVisible ; (; bool ; on = true). inline . Set draw options as string for JSROOT TGeoPainter. ; Definition at line 332 of file RGeomData.hxx. ◆ SetVisLevel(). void ROOT::RGeomDescription::SetVisLevel ; (; int ; lvl = 3). inline . Set maximal visible level. ; Definition at line 327 of file RGeomData.hxx. Friends And Related Symbol Documentation. ◆ RGeomBrowserIter. friend class RGeomBrowserIter. friend . Definition at line 212 of file RGeomData.hxx. Member Data Documentation. ◆ fActiveItemName. std::string ROOT::RGeomDescription::fActiveItemName. private . ! name of item which should be activated in hierarchy ;",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:1289,Usability,clear,clear,1289,"OT::RGeomDescription Class Reference. . Definition at line 210 of file RGeomData.hxx. Classes; class  ShapeDescr;  . Public Member Functions;  RGeomDescription ()=default;  ; void AddSignalHandler (const void *handler, RGeomSignalFunc_t func);  Add signal handler. ;  ; void Build (TGeoManager *mgr, const std::string &volname="""");  Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression level for data transfer. ;  ; int GetMaxVisFaces () const;  Returns maximal visible number of faces, ignored when non-positive. ;  ; int GetMaxVisNodes () const;  Returns maximal visible number of nodes, ignored when non-positive. ;  ; TVirtualMutex * GetMutex () const;  Retu",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:12866,Usability,clear,clear,12866,"nition at line 460 of file RGeomData.cxx. ◆ BuildDescription(). void RGeomDescription::BuildDescription ; (; TGeoNode * ; topnode, . TGeoVolume * ; topvolume . ). private . Build geometry description. ; Definition at line 494 of file RGeomData.cxx. ◆ ChangeConfiguration(). bool RGeomDescription::ChangeConfiguration ; (; const std::string & ; json). Change configuration by client Returns true if any parameter was really changed. ; Definition at line 2105 of file RGeomData.cxx. ◆ ChangeNodeVisibility(). bool RGeomDescription::ChangeNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on . ). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1850 of file RGeomData.cxx. ◆ ClearAllPhysVisibility(). bool RGeomDescription::ClearAllPhysVisibility ; (; ). Reset all custom visibility settings. ; Definition at line 2089 of file RGeomData.cxx. ◆ ClearCache(). void RGeomDescription::ClearCache ; (; ). Clear cached data, need to be clear when connection broken. ; Definition at line 1381 of file RGeomData.cxx. ◆ ClearDescription(). void RGeomDescription::ClearDescription ; (; ). private . Clear geometry description. ; Definition at line 478 of file RGeomData.cxx. ◆ ClearDrawData(). void RGeomDescription::ClearDrawData ; (; ). Clear raw data. Will be rebuild when next connection will be established. ; Definition at line 1370 of file RGeomData.cxx. ◆ ClearPhysNodeVisibility(). bool RGeomDescription::ClearPhysNodeVisibility ; (; const std::vector< std::string > & ; path). Reset custom visibility of physical node by path. ; Definition at line 2065 of file RGeomData.cxx. ◆ CollectNodes(). void RGeomDescription::CollectNodes ; (; RGeomDrawing & ; drawing, . bool ; all_nodes = false . ). private . Collect nodes which are used in visibles. ; Definition at line 721 of file RGeomData.cxx. ◆ CopyMaterialProperties(). void RGeomDescription::CopyMaterialProperties ; (; TGeoVolume * ; vol, . RGeomNode & ; node . ). private . C",MatchSource.WIKI,doc/master/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html
https://root.cern/doc/master/classROOT_1_1RGeomDrawing.html:460,Deployability,configurat,configurations,460,. ROOT: ROOT::RGeomDrawing Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomDrawing Class Reference. ; Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. ; Definition at line 177 of file RGeomData.hxx. Public Attributes; RGeomConfig * cfg {nullptr};  current configurations ;  ; std::vector< RGeomNode * > nodes;  all used nodes to display visible items and not known for client ;  ; int numnodes {0};  total number of nodes in description ;  ; std::vector< RGeomVisible > visibles;  all visible items ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ cfg. RGeomConfig* ROOT::RGeomDrawing::cfg {nullptr}. current configurations ; Definition at line 179 of file RGeomData.hxx. ◆ nodes. std::vector<RGeomNode*> ROOT::RGeomDrawing::nodes. all used nodes to display visible items and not known for client ; Definition at line 181 of file RGeomData.hxx. ◆ numnodes. int ROOT::RGeomDrawing::numnodes {0}. total number of nodes in description ; Definition at line 180 of file RGeomData.hxx. ◆ visibles. std::vector<RGeomVisible> ROOT::RGeomDrawing::visibles. all visible items ; Definition at line 182 of file RGeomData.hxx. Libraries for ROOT::RGeomDrawing:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomDrawing. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1RGeomDrawing.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDrawing.html
https://root.cern/doc/master/classROOT_1_1RGeomDrawing.html:829,Deployability,configurat,configurations,829,. ROOT: ROOT::RGeomDrawing Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomDrawing Class Reference. ; Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. ; Definition at line 177 of file RGeomData.hxx. Public Attributes; RGeomConfig * cfg {nullptr};  current configurations ;  ; std::vector< RGeomNode * > nodes;  all used nodes to display visible items and not known for client ;  ; int numnodes {0};  total number of nodes in description ;  ; std::vector< RGeomVisible > visibles;  all visible items ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ cfg. RGeomConfig* ROOT::RGeomDrawing::cfg {nullptr}. current configurations ; Definition at line 179 of file RGeomData.hxx. ◆ nodes. std::vector<RGeomNode*> ROOT::RGeomDrawing::nodes. all used nodes to display visible items and not known for client ; Definition at line 181 of file RGeomData.hxx. ◆ numnodes. int ROOT::RGeomDrawing::numnodes {0}. total number of nodes in description ; Definition at line 180 of file RGeomData.hxx. ◆ visibles. std::vector<RGeomVisible> ROOT::RGeomDrawing::visibles. all visible items ; Definition at line 182 of file RGeomData.hxx. Libraries for ROOT::RGeomDrawing:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomDrawing. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1RGeomDrawing.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDrawing.html
https://root.cern/doc/master/classROOT_1_1RGeomDrawing.html:460,Modifiability,config,configurations,460,. ROOT: ROOT::RGeomDrawing Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomDrawing Class Reference. ; Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. ; Definition at line 177 of file RGeomData.hxx. Public Attributes; RGeomConfig * cfg {nullptr};  current configurations ;  ; std::vector< RGeomNode * > nodes;  all used nodes to display visible items and not known for client ;  ; int numnodes {0};  total number of nodes in description ;  ; std::vector< RGeomVisible > visibles;  all visible items ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ cfg. RGeomConfig* ROOT::RGeomDrawing::cfg {nullptr}. current configurations ; Definition at line 179 of file RGeomData.hxx. ◆ nodes. std::vector<RGeomNode*> ROOT::RGeomDrawing::nodes. all used nodes to display visible items and not known for client ; Definition at line 181 of file RGeomData.hxx. ◆ numnodes. int ROOT::RGeomDrawing::numnodes {0}. total number of nodes in description ; Definition at line 180 of file RGeomData.hxx. ◆ visibles. std::vector<RGeomVisible> ROOT::RGeomDrawing::visibles. all visible items ; Definition at line 182 of file RGeomData.hxx. Libraries for ROOT::RGeomDrawing:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomDrawing. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1RGeomDrawing.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDrawing.html
https://root.cern/doc/master/classROOT_1_1RGeomDrawing.html:829,Modifiability,config,configurations,829,. ROOT: ROOT::RGeomDrawing Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomDrawing Class Reference. ; Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. ; Definition at line 177 of file RGeomData.hxx. Public Attributes; RGeomConfig * cfg {nullptr};  current configurations ;  ; std::vector< RGeomNode * > nodes;  all used nodes to display visible items and not known for client ;  ; int numnodes {0};  total number of nodes in description ;  ; std::vector< RGeomVisible > visibles;  all visible items ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ cfg. RGeomConfig* ROOT::RGeomDrawing::cfg {nullptr}. current configurations ; Definition at line 179 of file RGeomData.hxx. ◆ nodes. std::vector<RGeomNode*> ROOT::RGeomDrawing::nodes. all used nodes to display visible items and not known for client ; Definition at line 181 of file RGeomData.hxx. ◆ numnodes. int ROOT::RGeomDrawing::numnodes {0}. total number of nodes in description ; Definition at line 180 of file RGeomData.hxx. ◆ visibles. std::vector<RGeomVisible> ROOT::RGeomDrawing::visibles. all visible items ; Definition at line 182 of file RGeomData.hxx. Libraries for ROOT::RGeomDrawing:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomDrawing. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1RGeomDrawing.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDrawing.html
https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html:729,Usability,clear,cleared,729,". ROOT: ROOT::RGeomHierarchy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::RGeomHierarchy Class ReferenceWeb Widgets. ; Web-based ROOT geometry hierarchy viewer. ; Definition at line 26 of file RGeomHierarchy.hxx. Public Member Functions;  RGeomHierarchy (RGeomDescription &desc, bool use_server_threads=false);  constructor ;  ; virtual ~RGeomHierarchy ();  destructor ;  ; void BrowseTo (const std::string &itemname);  Let browse to specified location. ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed Must be called after window is shown. ;  ; RGeomDescription & Description ();  ; void Show (const RWebDisplayArgs &args="""");  Show hierarchy in web window. ;  ; void Update ();  Update client - reload hierarchy. ;  . Protected Member Functions; void ProcessSignal (const std::string &kind);  Process signals from geometry description object. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  . Protected Attributes; RGeomDescription & fDesc;  ! geometry description, shared with external ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomHierarchy.hxx>; Constructor & Destructor Documentation. ◆ RGeomHierarchy(). RGeomHierarchy::RGeomHierarchy ; (; RGeomDescription & ; desc, . bool ; use_server_threads = false . ). constructor ; Definition at line 32 of file RGeomHierarchy.cxx. ◆ ~RGeomHierarchy(). RGeomHierarchy::~RGeomHierarchy ; (; ). virtual . destructor ; Definition at line 48 of file RGeomHierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 156 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). ",MatchSource.WIKI,doc/master/classROOT_1_1RGeomHierarchy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html
https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html:2108,Usability,clear,cleared,2108,"ck (unsigned connid, const std::string &arg);  Process data from client. ;  . Protected Attributes; RGeomDescription & fDesc;  ! geometry description, shared with external ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomHierarchy.hxx>; Constructor & Destructor Documentation. ◆ RGeomHierarchy(). RGeomHierarchy::RGeomHierarchy ; (; RGeomDescription & ; desc, . bool ; use_server_threads = false . ). constructor ; Definition at line 32 of file RGeomHierarchy.cxx. ◆ ~RGeomHierarchy(). RGeomHierarchy::~RGeomHierarchy ; (; ). virtual . destructor ; Definition at line 48 of file RGeomHierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 156 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). void RGeomHierarchy::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 187 of file RGeomHierarchy.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomHierarchy::Description ; (; ). inline . Definition at line 48 of file RGeomHierarchy.hxx. ◆ ProcessSignal(). void RGeomHierarchy::ProcessSignal ; (; const std::string & ; kind). protected . Process signals from geometry description object. ; Definition at line 165 of file RGeomHierarchy.cxx. ◆ Show(). void RGeomHierarchy::Show ; (; const RWebDisplayArgs & ; args = """"). Show hierarchy in web window. ; Definition at line 135 of file RGeomHierarchy.cxx. ◆ Update(). void RGeomHierarchy::Update ; (; ). Update client - reload hierarchy. ; Definition at line 147 of file RGeomHierarchy.cxx. ◆ WebWindowCallback(). void RGeomHierarchy::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 56 of file RGeomHierarchy.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription",MatchSource.WIKI,doc/master/classROOT_1_1RGeomHierarchy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html
https://root.cern/doc/master/classROOT_1_1RGeomNode.html:831,Energy Efficiency,reduce,reduced,831,". ROOT: ROOT::RGeomNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomNode Class Reference. ; Full node description including matrices and other attributes. ; Definition at line 71 of file RGeomData.hxx. Public Member Functions;  RGeomNode (int _id=0);  ; bool CanDisplay () const;  True when there is shape and it can be displayed. ;  ;  Public Member Functions inherited from ROOT::RGeomNodeBase;  RGeomNodeBase (int _id=0);  ; const char * GetArg (int kind);  Returns argument for regexp. ;  ; bool IsVisible () const;  . Public Attributes; int idshift {-1};  ! used to jump over then scan all geom hierarchy ;  ; std::vector< float > matr;  matrix for the node, can have reduced number of elements ;  ; int nfaces {0};  ! number of shape faces ;  ; float opacity {1.};  ! opacity of the color ;  ; bool useflag {false};  ! extra flag, used for selection ;  ; double vol {0};  ! volume estimation ;  ;  Public Attributes inherited from ROOT::RGeomNodeBase; std::vector< int > chlds;  list of childs id ;  ; std::string color;  rgb code in hex format ;  ; int id {0};  node id, index in array ;  ; std::string material;  name of the material ;  ; std::string name;  node name ;  ; bool nochlds {false};  how far in hierarchy depth should be scanned ;  ; int sortid {0};  ! place in sorted array, to check cuts, or id of original node when used search structures ;  ; int vis {0};  visibility flag, 0 - off, 1 - only when level==0, 99 - always ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNode(). ROOT::RGeomNode::RGeomNode ; (; int ; _id = 0). inline . Definition at line 80 of file RGeomData.hxx. Member Function Documentation. ◆ CanDisplay(). bool ROOT::RGeomNode::",MatchSource.WIKI,doc/master/classROOT_1_1RGeomNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomNode.html
https://root.cern/doc/master/classROOT_1_1RGeomNode.html:2382,Energy Efficiency,reduce,reduced,2382,"hex format ;  ; int id {0};  node id, index in array ;  ; std::string material;  name of the material ;  ; std::string name;  node name ;  ; bool nochlds {false};  how far in hierarchy depth should be scanned ;  ; int sortid {0};  ! place in sorted array, to check cuts, or id of original node when used search structures ;  ; int vis {0};  visibility flag, 0 - off, 1 - only when level==0, 99 - always ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNode(). ROOT::RGeomNode::RGeomNode ; (; int ; _id = 0). inline . Definition at line 80 of file RGeomData.hxx. Member Function Documentation. ◆ CanDisplay(). bool ROOT::RGeomNode::CanDisplay ; (; ); const. inline . True when there is shape and it can be displayed. ; Definition at line 83 of file RGeomData.hxx. Member Data Documentation. ◆ idshift. int ROOT::RGeomNode::idshift {-1}. ! used to jump over then scan all geom hierarchy ; Definition at line 76 of file RGeomData.hxx. ◆ matr. std::vector<float> ROOT::RGeomNode::matr. matrix for the node, can have reduced number of elements ; Definition at line 73 of file RGeomData.hxx. ◆ nfaces. int ROOT::RGeomNode::nfaces {0}. ! number of shape faces ; Definition at line 75 of file RGeomData.hxx. ◆ opacity. float ROOT::RGeomNode::opacity {1.}. ! opacity of the color ; Definition at line 78 of file RGeomData.hxx. ◆ useflag. bool ROOT::RGeomNode::useflag {false}. ! extra flag, used for selection ; Definition at line 77 of file RGeomData.hxx. ◆ vol. double ROOT::RGeomNode::vol {0}. ! volume estimation ; Definition at line 74 of file RGeomData.hxx. Libraries for ROOT::RGeomNode:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomNode. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1RGeomNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomNode.html
https://root.cern/doc/master/classROOT_1_1RGeomNode.html:519,Modifiability,inherit,inherited,519,". ROOT: ROOT::RGeomNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomNode Class Reference. ; Full node description including matrices and other attributes. ; Definition at line 71 of file RGeomData.hxx. Public Member Functions;  RGeomNode (int _id=0);  ; bool CanDisplay () const;  True when there is shape and it can be displayed. ;  ;  Public Member Functions inherited from ROOT::RGeomNodeBase;  RGeomNodeBase (int _id=0);  ; const char * GetArg (int kind);  Returns argument for regexp. ;  ; bool IsVisible () const;  . Public Attributes; int idshift {-1};  ! used to jump over then scan all geom hierarchy ;  ; std::vector< float > matr;  matrix for the node, can have reduced number of elements ;  ; int nfaces {0};  ! number of shape faces ;  ; float opacity {1.};  ! opacity of the color ;  ; bool useflag {false};  ! extra flag, used for selection ;  ; double vol {0};  ! volume estimation ;  ;  Public Attributes inherited from ROOT::RGeomNodeBase; std::vector< int > chlds;  list of childs id ;  ; std::string color;  rgb code in hex format ;  ; int id {0};  node id, index in array ;  ; std::string material;  name of the material ;  ; std::string name;  node name ;  ; bool nochlds {false};  how far in hierarchy depth should be scanned ;  ; int sortid {0};  ! place in sorted array, to check cuts, or id of original node when used search structures ;  ; int vis {0};  visibility flag, 0 - off, 1 - only when level==0, 99 - always ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNode(). ROOT::RGeomNode::RGeomNode ; (; int ; _id = 0). inline . Definition at line 80 of file RGeomData.hxx. Member Function Documentation. ◆ CanDisplay(). bool ROOT::RGeomNode::",MatchSource.WIKI,doc/master/classROOT_1_1RGeomNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomNode.html
https://root.cern/doc/master/classROOT_1_1RGeomNode.html:1080,Modifiability,inherit,inherited,1080,"iption including matrices and other attributes. ; Definition at line 71 of file RGeomData.hxx. Public Member Functions;  RGeomNode (int _id=0);  ; bool CanDisplay () const;  True when there is shape and it can be displayed. ;  ;  Public Member Functions inherited from ROOT::RGeomNodeBase;  RGeomNodeBase (int _id=0);  ; const char * GetArg (int kind);  Returns argument for regexp. ;  ; bool IsVisible () const;  . Public Attributes; int idshift {-1};  ! used to jump over then scan all geom hierarchy ;  ; std::vector< float > matr;  matrix for the node, can have reduced number of elements ;  ; int nfaces {0};  ! number of shape faces ;  ; float opacity {1.};  ! opacity of the color ;  ; bool useflag {false};  ! extra flag, used for selection ;  ; double vol {0};  ! volume estimation ;  ;  Public Attributes inherited from ROOT::RGeomNodeBase; std::vector< int > chlds;  list of childs id ;  ; std::string color;  rgb code in hex format ;  ; int id {0};  node id, index in array ;  ; std::string material;  name of the material ;  ; std::string name;  node name ;  ; bool nochlds {false};  how far in hierarchy depth should be scanned ;  ; int sortid {0};  ! place in sorted array, to check cuts, or id of original node when used search structures ;  ; int vis {0};  visibility flag, 0 - off, 1 - only when level==0, 99 - always ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNode(). ROOT::RGeomNode::RGeomNode ; (; int ; _id = 0). inline . Definition at line 80 of file RGeomData.hxx. Member Function Documentation. ◆ CanDisplay(). bool ROOT::RGeomNode::CanDisplay ; (; ); const. inline . True when there is shape and it can be displayed. ; Definition at line 83 of file RGeomData.hxx. Member Data Documentation. ◆ idshift. int ROOT::RGeomNode::idshift {-1}. ! used to jump over then scan all geom hierarchy ; Definitio",MatchSource.WIKI,doc/master/classROOT_1_1RGeomNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomNode.html
https://root.cern/doc/master/classROOT_1_1RGeomRawRenderInfo.html:438,Modifiability,inherit,inherited,438,". ROOT: ROOT::RGeomRawRenderInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomRawRenderInfo Class Reference. ; Render info with raw data. ; Definition at line 127 of file RGeomData.hxx. Public Member Functions;  ~RGeomRawRenderInfo () override=default;  ;  Public Member Functions inherited from ROOT::RGeomRenderInfo; virtual ~RGeomRenderInfo ()=default;  virtual destructor required for the I/O ;  . Public Attributes; std::vector< int > idx;  vertex indexes, always triangles ;  ; std::vector< unsigned char > raw;  float vertices as raw data, JSON_base64 ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomRawRenderInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RGeomRawRenderInfo(). ROOT::RGeomRawRenderInfo::~RGeomRawRenderInfo ; (; ). overridedefault . Member Data Documentation. ◆ idx. std::vector<int> ROOT::RGeomRawRenderInfo::idx. vertex indexes, always triangles ; Definition at line 130 of file RGeomData.hxx. ◆ raw. std::vector<unsigned char> ROOT::RGeomRawRenderInfo::raw. float vertices as raw data, JSON_base64 ; Definition at line 129 of file RGeomData.hxx. Libraries for ROOT::RGeomRawRenderInfo:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomRawRenderInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1RGeomRawRenderInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomRawRenderInfo.html
https://root.cern/doc/master/classROOT_1_1RGeomShapeRenderInfo.html:482,Modifiability,inherit,inherited,482,". ROOT: ROOT::RGeomShapeRenderInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomShapeRenderInfo Class Reference. ; Render info with shape itself - client can produce shape better. ; Definition at line 135 of file RGeomData.hxx. Public Member Functions;  ~RGeomShapeRenderInfo () override=default;  ;  Public Member Functions inherited from ROOT::RGeomRenderInfo; virtual ~RGeomRenderInfo ()=default;  virtual destructor required for the I/O ;  . Public Attributes; TGeoShape * shape {nullptr};  original shape - can be much less than binary data ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomShapeRenderInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RGeomShapeRenderInfo(). ROOT::RGeomShapeRenderInfo::~RGeomShapeRenderInfo ; (; ). overridedefault . Member Data Documentation. ◆ shape. TGeoShape* ROOT::RGeomShapeRenderInfo::shape {nullptr}. original shape - can be much less than binary data ; Definition at line 137 of file RGeomData.hxx. Libraries for ROOT::RGeomShapeRenderInfo:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomShapeRenderInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1RGeomShapeRenderInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomShapeRenderInfo.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:1207,Deployability,configurat,configuration,1207,"mber Functions |; Protected Attributes |; List of all members ; ROOT::RGeomViewer Class ReferenceWeb Widgets. ; Web-based ROOT geometry viewer. ; Definition at line 27 of file RGeomViewer.hxx. Public Member Functions;  RGeomViewer (TGeoManager *mgr=nullptr, const std::string &volname="""");  constructor ;  ; virtual ~RGeomViewer ();  destructor ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed Must be called after window is shown. ;  ; RGeomDescription & Description ();  ; bool GetShowColumns () const;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return web window address (name) used for geometry viewer. ;  ; std::string GetWindowUrl (bool remote);  Return web window URL which can be used for connection See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SaveAsMacro (const std::string &fname);  Save viewer configuration as macro. ;  ; void SaveImage (const std::string &fname=""geometry.png"", int width=0, int height=0);  Produce PNG image of the geometry If web-browser is shown and drawing completed, image is requested from the browser. ;  ; void SelectVolume (const std::string &volname);  Select visible top volume, all other volumes will be disabled. ;  ; void SetDrawOptions (const std::string &opt);  Configures draw option for geometry Normally has effect before first drawing of the geometry When geometry displayed, only ""axis"" and ""rotate"" options are updated. ;  ; void SetGeometry (TGeoManager *mgr, const std::string &volname="""");  assign new geometry to the viewer ;  ; void SetLimits (int nnodes=5000, int nfaces=100000);  Configures maximal number of visible nodes and faces. ;  ; void SetOnlyVolume (TGeoVolume *vol);  Draw only specified volume, special case when volume stored without valid geomanager. ;  ; void SetShowColumns (bool on=true);  ; void SetShowHierarc",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:1764,Deployability,update,updated,1764,"alled after window is shown. ;  ; RGeomDescription & Description ();  ; bool GetShowColumns () const;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return web window address (name) used for geometry viewer. ;  ; std::string GetWindowUrl (bool remote);  Return web window URL which can be used for connection See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SaveAsMacro (const std::string &fname);  Save viewer configuration as macro. ;  ; void SaveImage (const std::string &fname=""geometry.png"", int width=0, int height=0);  Produce PNG image of the geometry If web-browser is shown and drawing completed, image is requested from the browser. ;  ; void SelectVolume (const std::string &volname);  Select visible top volume, all other volumes will be disabled. ;  ; void SetDrawOptions (const std::string &opt);  Configures draw option for geometry Normally has effect before first drawing of the geometry When geometry displayed, only ""axis"" and ""rotate"" options are updated. ;  ; void SetGeometry (TGeoManager *mgr, const std::string &volname="""");  assign new geometry to the viewer ;  ; void SetLimits (int nnodes=5000, int nfaces=100000);  Configures maximal number of visible nodes and faces. ;  ; void SetOnlyVolume (TGeoVolume *vol);  Draw only specified volume, special case when volume stored without valid geomanager. ;  ; void SetShowColumns (bool on=true);  ; void SetShowHierarchy (bool on=true);  Configures default hierarchy browser visibility, only has effect before showing web window. ;  ; void SetTitle (const std::string &title);  ; void SetTopVisible (bool on=true);  ; void SetVisLevel (int lvl=3);  Configures maximal visible level. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no w",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:2547,Deployability,update,update,2547,"SetDrawOptions (const std::string &opt);  Configures draw option for geometry Normally has effect before first drawing of the geometry When geometry displayed, only ""axis"" and ""rotate"" options are updated. ;  ; void SetGeometry (TGeoManager *mgr, const std::string &volname="""");  assign new geometry to the viewer ;  ; void SetLimits (int nnodes=5000, int nfaces=100000);  Configures maximal number of visible nodes and faces. ;  ; void SetOnlyVolume (TGeoVolume *vol);  Draw only specified volume, special case when volume stored without valid geomanager. ;  ; void SetShowColumns (bool on=true);  ; void SetShowHierarchy (bool on=true);  Configures default hierarchy browser visibility, only has effect before showing web window. ;  ; void SetTitle (const std::string &title);  ; void SetTopVisible (bool on=true);  ; void SetVisLevel (int lvl=3);  Configures maximal visible level. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; void Update ();  Update geometry drawings in all web displays. ;  . Protected Member Functions; std::vector< int > GetStackFromJson (const std::string &json, bool node_ids=false);  convert JSON into stack array ;  ; void ProcessSignal (const std::string &);  Process signal from geom description when it changed by any means. ;  ; void SendGeometry (unsigned connid=0, bool first_time=false);  Send data for principal geometry draw Should be used when essential settings were changed in geometry description. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  ; void WebWindowDisconnect (unsigned connid);  Process disconnect event Clear cache data and dependent connections. ;  . Protected Attributes; RGeomDescription fDesc;  ! geometry description, send to the client as first message ;  ; TGeoManager * fGeoManager {nullptr}",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:6276,Deployability,configurat,configuration,6276,"ring & ; json, . bool ; node_ids = false . ). protected . convert JSON into stack array ; Definition at line 172 of file RGeomViewer.cxx. ◆ GetTitle(). const std::string & ROOT::RGeomViewer::GetTitle ; (; ); const. inline . Definition at line 59 of file RGeomViewer.hxx. ◆ GetWindowAddr(). std::string RGeomViewer::GetWindowAddr ; (; ); const. Return web window address (name) used for geometry viewer. ; Definition at line 141 of file RGeomViewer.cxx. ◆ GetWindowUrl(). std::string RGeomViewer::GetWindowUrl ; (; bool ; remote). Return web window URL which can be used for connection See ROOT::RWebWindow::GetUrl docu for more details. ; Definition at line 150 of file RGeomViewer.cxx. ◆ ProcessSignal(). void RGeomViewer::ProcessSignal ; (; const std::string & ; kind). protected . Process signal from geom description when it changed by any means. ; Definition at line 373 of file RGeomViewer.cxx. ◆ SaveAsMacro(). void RGeomViewer::SaveAsMacro ; (; const std::string & ; fname). Save viewer configuration as macro. ; Definition at line 405 of file RGeomViewer.cxx. ◆ SaveImage(). void RGeomViewer::SaveImage ; (; const std::string & ; fname = ""geometry.png"", . int ; width = 0, . int ; height = 0 . ). Produce PNG image of the geometry If web-browser is shown and drawing completed, image is requested from the browser. ; In this case method executed asynchronously - it returns immediately and image will stored shortly afterwards when received from the client Height and width parameters are ignored in that case and derived from actual drawing size in the browser. Another possibility is to invoke headless browser, providing positive width and height parameter explicitely ; Definition at line 239 of file RGeomViewer.cxx. ◆ SelectVolume(). void RGeomViewer::SelectVolume ; (; const std::string & ; volname). Select visible top volume, all other volumes will be disabled. ; Definition at line 92 of file RGeomViewer.cxx. ◆ SendGeometry(). void RGeomViewer::SendGeometry ; (; unsigned ; connid",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:7738,Deployability,update,updated,7738,"immediately and image will stored shortly afterwards when received from the client Height and width parameters are ignored in that case and derived from actual drawing size in the browser. Another possibility is to invoke headless browser, providing positive width and height parameter explicitely ; Definition at line 239 of file RGeomViewer.cxx. ◆ SelectVolume(). void RGeomViewer::SelectVolume ; (; const std::string & ; volname). Select visible top volume, all other volumes will be disabled. ; Definition at line 92 of file RGeomViewer.cxx. ◆ SendGeometry(). void RGeomViewer::SendGeometry ; (; unsigned ; connid = 0, . bool ; first_time = false . ). protected . Send data for principal geometry draw Should be used when essential settings were changed in geometry description. ; Definition at line 193 of file RGeomViewer.cxx. ◆ SetDrawOptions(). void RGeomViewer::SetDrawOptions ; (; const std::string & ; opt). Configures draw option for geometry Normally has effect before first drawing of the geometry When geometry displayed, only ""axis"" and ""rotate"" options are updated. ; Definition at line 221 of file RGeomViewer.cxx. ◆ SetGeometry(). void RGeomViewer::SetGeometry ; (; TGeoManager * ; mgr, . const std::string & ; volname = """" . ). assign new geometry to the viewer ; Definition at line 79 of file RGeomViewer.cxx. ◆ SetLimits(). void ROOT::RGeomViewer::SetLimits ; (; int ; nnodes = 5000, . int ; nfaces = 100000 . ). inline . Configures maximal number of visible nodes and faces. ; Definition at line 72 of file RGeomViewer.hxx. ◆ SetOnlyVolume(). void RGeomViewer::SetOnlyVolume ; (; TGeoVolume * ; vol). Draw only specified volume, special case when volume stored without valid geomanager. ; Definition at line 101 of file RGeomViewer.cxx. ◆ SetShowColumns(). void ROOT::RGeomViewer::SetShowColumns ; (; bool ; on = true). inline . Definition at line 95 of file RGeomViewer.hxx. ◆ SetShowHierarchy(). void ROOT::RGeomViewer::SetShowHierarchy ; (; bool ; on = true). inline . Confi",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:9371,Deployability,update,update,9371,"lumns(). void ROOT::RGeomViewer::SetShowColumns ; (; bool ; on = true). inline . Definition at line 95 of file RGeomViewer.hxx. ◆ SetShowHierarchy(). void ROOT::RGeomViewer::SetShowHierarchy ; (; bool ; on = true). inline . Configures default hierarchy browser visibility, only has effect before showing web window. ; Definition at line 90 of file RGeomViewer.hxx. ◆ SetTitle(). void ROOT::RGeomViewer::SetTitle ; (; const std::string & ; title). inline . Definition at line 58 of file RGeomViewer.hxx. ◆ SetTopVisible(). void ROOT::RGeomViewer::SetTopVisible ; (; bool ; on = true). inline . Definition at line 84 of file RGeomViewer.hxx. ◆ SetVisLevel(). void ROOT::RGeomViewer::SetVisLevel ; (; int ; lvl = 3). inline . Configures maximal visible level. ; Definition at line 79 of file RGeomViewer.hxx. ◆ Show(). void RGeomViewer::Show ; (; const RWebDisplayArgs & ; args = """", . bool ; always_start_new_browser = false . ). Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ; Parameters. always_start_new_browserconfigured, starts new window ; argsarguments to display . Definition at line 117 of file RGeomViewer.cxx. ◆ Update(). void RGeomViewer::Update ; (; ). Update geometry drawings in all web displays. ; Definition at line 158 of file RGeomViewer.cxx. ◆ WebWindowCallback(). void RGeomViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 268 of file RGeomViewer.cxx. ◆ WebWindowDisconnect(). void RGeomViewer::WebWindowDisconnect ; (; unsigned ; connid). protected . Process disconnect event Clear cache data and dependent connections. ; Definition at line 361 of file RGeomViewer.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription ROOT::RGeomViewer::fDesc. protected . ! geometry description, send to the client as first message ; Definition at line 33 of file RGeomViewer.hxx. ◆ fGeoManager. TG",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:3393,Integrability,depend,dependent,3393,"etTopVisible (bool on=true);  ; void SetVisLevel (int lvl=3);  Configures maximal visible level. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; void Update ();  Update geometry drawings in all web displays. ;  . Protected Member Functions; std::vector< int > GetStackFromJson (const std::string &json, bool node_ids=false);  convert JSON into stack array ;  ; void ProcessSignal (const std::string &);  Process signal from geom description when it changed by any means. ;  ; void SendGeometry (unsigned connid=0, bool first_time=false);  Send data for principal geometry draw Should be used when essential settings were changed in geometry description. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  ; void WebWindowDisconnect (unsigned connid);  Process disconnect event Clear cache data and dependent connections. ;  . Protected Attributes; RGeomDescription fDesc;  ! geometry description, send to the client as first message ;  ; TGeoManager * fGeoManager {nullptr};  ! geometry to show ;  ; bool fInfoActive {false};  ! true when info page active and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 43 of file RGeomViewer.cxx. ◆ ~RG",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:3520,Integrability,message,message,3520,"Protected Member Functions; std::vector< int > GetStackFromJson (const std::string &json, bool node_ids=false);  convert JSON into stack array ;  ; void ProcessSignal (const std::string &);  Process signal from geom description when it changed by any means. ;  ; void SendGeometry (unsigned connid=0, bool first_time=false);  Send data for principal geometry draw Should be used when essential settings were changed in geometry description. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  ; void WebWindowDisconnect (unsigned connid);  Process disconnect event Clear cache data and dependent connections. ;  . Protected Attributes; RGeomDescription fDesc;  ! geometry description, send to the client as first message ;  ; TGeoManager * fGeoManager {nullptr};  ! geometry to show ;  ; bool fInfoActive {false};  ! true when info page active and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 43 of file RGeomViewer.cxx. ◆ ~RGeomViewer(). RGeomViewer::~RGeomViewer ; (; ). virtual . destructor ; Definition at line 71 of file RGeomViewer.cxx. Member Function Documentation. ◆ ClearOnClose(). void RGeomViewer::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 452 of file RGeomViewer.cxx. ◆ Descript",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:10145,Integrability,depend,dependent,10145," int ; lvl = 3). inline . Configures maximal visible level. ; Definition at line 79 of file RGeomViewer.hxx. ◆ Show(). void RGeomViewer::Show ; (; const RWebDisplayArgs & ; args = """", . bool ; always_start_new_browser = false . ). Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ; Parameters. always_start_new_browserconfigured, starts new window ; argsarguments to display . Definition at line 117 of file RGeomViewer.cxx. ◆ Update(). void RGeomViewer::Update ; (; ). Update geometry drawings in all web displays. ; Definition at line 158 of file RGeomViewer.cxx. ◆ WebWindowCallback(). void RGeomViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 268 of file RGeomViewer.cxx. ◆ WebWindowDisconnect(). void RGeomViewer::WebWindowDisconnect ; (; unsigned ; connid). protected . Process disconnect event Clear cache data and dependent connections. ; Definition at line 361 of file RGeomViewer.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription ROOT::RGeomViewer::fDesc. protected . ! geometry description, send to the client as first message ; Definition at line 33 of file RGeomViewer.hxx. ◆ fGeoManager. TGeoManager* ROOT::RGeomViewer::fGeoManager {nullptr}. protected . ! geometry to show ; Definition at line 31 of file RGeomViewer.hxx. ◆ fInfoActive. bool ROOT::RGeomViewer::fInfoActive {false}. protected . ! true when info page active and node info need to be provided ; Definition at line 37 of file RGeomViewer.hxx. ◆ fSelectedVolume. std::string ROOT::RGeomViewer::fSelectedVolume. protected . ! name of selected volume ; Definition at line 32 of file RGeomViewer.hxx. ◆ fShowColumns. bool ROOT::RGeomViewer::fShowColumns {true}. protected . ! show columns in hierarchy ; Definition at line 35 of file RGeomViewer.hxx. ◆ fShowHierarchy. bool ROOT::RGeomViewer::fShowHierarchy {true}. protected . ",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:10361,Integrability,message,message,10361,"). Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ; Parameters. always_start_new_browserconfigured, starts new window ; argsarguments to display . Definition at line 117 of file RGeomViewer.cxx. ◆ Update(). void RGeomViewer::Update ; (; ). Update geometry drawings in all web displays. ; Definition at line 158 of file RGeomViewer.cxx. ◆ WebWindowCallback(). void RGeomViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 268 of file RGeomViewer.cxx. ◆ WebWindowDisconnect(). void RGeomViewer::WebWindowDisconnect ; (; unsigned ; connid). protected . Process disconnect event Clear cache data and dependent connections. ; Definition at line 361 of file RGeomViewer.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription ROOT::RGeomViewer::fDesc. protected . ! geometry description, send to the client as first message ; Definition at line 33 of file RGeomViewer.hxx. ◆ fGeoManager. TGeoManager* ROOT::RGeomViewer::fGeoManager {nullptr}. protected . ! geometry to show ; Definition at line 31 of file RGeomViewer.hxx. ◆ fInfoActive. bool ROOT::RGeomViewer::fInfoActive {false}. protected . ! true when info page active and node info need to be provided ; Definition at line 37 of file RGeomViewer.hxx. ◆ fSelectedVolume. std::string ROOT::RGeomViewer::fSelectedVolume. protected . ! name of selected volume ; Definition at line 32 of file RGeomViewer.hxx. ◆ fShowColumns. bool ROOT::RGeomViewer::fShowColumns {true}. protected . ! show columns in hierarchy ; Definition at line 35 of file RGeomViewer.hxx. ◆ fShowHierarchy. bool ROOT::RGeomViewer::fShowHierarchy {true}. protected . ! if hierarchy visible by default ; Definition at line 34 of file RGeomViewer.hxx. ◆ fTitle. std::string ROOT::RGeomViewer::fTitle. protected . ! title of geometry viewer ; Definition at line 36 of file RGeomViewer.hxx. ◆ fWebHi",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:1207,Modifiability,config,configuration,1207,"mber Functions |; Protected Attributes |; List of all members ; ROOT::RGeomViewer Class ReferenceWeb Widgets. ; Web-based ROOT geometry viewer. ; Definition at line 27 of file RGeomViewer.hxx. Public Member Functions;  RGeomViewer (TGeoManager *mgr=nullptr, const std::string &volname="""");  constructor ;  ; virtual ~RGeomViewer ();  destructor ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed Must be called after window is shown. ;  ; RGeomDescription & Description ();  ; bool GetShowColumns () const;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return web window address (name) used for geometry viewer. ;  ; std::string GetWindowUrl (bool remote);  Return web window URL which can be used for connection See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SaveAsMacro (const std::string &fname);  Save viewer configuration as macro. ;  ; void SaveImage (const std::string &fname=""geometry.png"", int width=0, int height=0);  Produce PNG image of the geometry If web-browser is shown and drawing completed, image is requested from the browser. ;  ; void SelectVolume (const std::string &volname);  Select visible top volume, all other volumes will be disabled. ;  ; void SetDrawOptions (const std::string &opt);  Configures draw option for geometry Normally has effect before first drawing of the geometry When geometry displayed, only ""axis"" and ""rotate"" options are updated. ;  ; void SetGeometry (TGeoManager *mgr, const std::string &volname="""");  assign new geometry to the viewer ;  ; void SetLimits (int nnodes=5000, int nfaces=100000);  Configures maximal number of visible nodes and faces. ;  ; void SetOnlyVolume (TGeoVolume *vol);  Draw only specified volume, special case when volume stored without valid geomanager. ;  ; void SetShowColumns (bool on=true);  ; void SetShowHierarc",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:6276,Modifiability,config,configuration,6276,"ring & ; json, . bool ; node_ids = false . ). protected . convert JSON into stack array ; Definition at line 172 of file RGeomViewer.cxx. ◆ GetTitle(). const std::string & ROOT::RGeomViewer::GetTitle ; (; ); const. inline . Definition at line 59 of file RGeomViewer.hxx. ◆ GetWindowAddr(). std::string RGeomViewer::GetWindowAddr ; (; ); const. Return web window address (name) used for geometry viewer. ; Definition at line 141 of file RGeomViewer.cxx. ◆ GetWindowUrl(). std::string RGeomViewer::GetWindowUrl ; (; bool ; remote). Return web window URL which can be used for connection See ROOT::RWebWindow::GetUrl docu for more details. ; Definition at line 150 of file RGeomViewer.cxx. ◆ ProcessSignal(). void RGeomViewer::ProcessSignal ; (; const std::string & ; kind). protected . Process signal from geom description when it changed by any means. ; Definition at line 373 of file RGeomViewer.cxx. ◆ SaveAsMacro(). void RGeomViewer::SaveAsMacro ; (; const std::string & ; fname). Save viewer configuration as macro. ; Definition at line 405 of file RGeomViewer.cxx. ◆ SaveImage(). void RGeomViewer::SaveImage ; (; const std::string & ; fname = ""geometry.png"", . int ; width = 0, . int ; height = 0 . ). Produce PNG image of the geometry If web-browser is shown and drawing completed, image is requested from the browser. ; In this case method executed asynchronously - it returns immediately and image will stored shortly afterwards when received from the client Height and width parameters are ignored in that case and derived from actual drawing size in the browser. Another possibility is to invoke headless browser, providing positive width and height parameter explicitely ; Definition at line 239 of file RGeomViewer.cxx. ◆ SelectVolume(). void RGeomViewer::SelectVolume ; (; const std::string & ; volname). Select visible top volume, all other volumes will be disabled. ; Definition at line 92 of file RGeomViewer.cxx. ◆ SendGeometry(). void RGeomViewer::SendGeometry ; (; unsigned ; connid",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:3378,Performance,cache,cache,3378,"etTopVisible (bool on=true);  ; void SetVisLevel (int lvl=3);  Configures maximal visible level. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; void Update ();  Update geometry drawings in all web displays. ;  . Protected Member Functions; std::vector< int > GetStackFromJson (const std::string &json, bool node_ids=false);  convert JSON into stack array ;  ; void ProcessSignal (const std::string &);  Process signal from geom description when it changed by any means. ;  ; void SendGeometry (unsigned connid=0, bool first_time=false);  Send data for principal geometry draw Should be used when essential settings were changed in geometry description. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  ; void WebWindowDisconnect (unsigned connid);  Process disconnect event Clear cache data and dependent connections. ;  . Protected Attributes; RGeomDescription fDesc;  ! geometry description, send to the client as first message ;  ; TGeoManager * fGeoManager {nullptr};  ! geometry to show ;  ; bool fInfoActive {false};  ! true when info page active and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 43 of file RGeomViewer.cxx. ◆ ~RG",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:10130,Performance,cache,cache,10130," int ; lvl = 3). inline . Configures maximal visible level. ; Definition at line 79 of file RGeomViewer.hxx. ◆ Show(). void RGeomViewer::Show ; (; const RWebDisplayArgs & ; args = """", . bool ; always_start_new_browser = false . ). Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ; Parameters. always_start_new_browserconfigured, starts new window ; argsarguments to display . Definition at line 117 of file RGeomViewer.cxx. ◆ Update(). void RGeomViewer::Update ; (; ). Update geometry drawings in all web displays. ; Definition at line 158 of file RGeomViewer.cxx. ◆ WebWindowCallback(). void RGeomViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 268 of file RGeomViewer.cxx. ◆ WebWindowDisconnect(). void RGeomViewer::WebWindowDisconnect ; (; unsigned ; connid). protected . Process disconnect event Clear cache data and dependent connections. ; Definition at line 361 of file RGeomViewer.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription ROOT::RGeomViewer::fDesc. protected . ! geometry description, send to the client as first message ; Definition at line 33 of file RGeomViewer.hxx. ◆ fGeoManager. TGeoManager* ROOT::RGeomViewer::fGeoManager {nullptr}. protected . ! geometry to show ; Definition at line 31 of file RGeomViewer.hxx. ◆ fInfoActive. bool ROOT::RGeomViewer::fInfoActive {false}. protected . ! true when info page active and node info need to be provided ; Definition at line 37 of file RGeomViewer.hxx. ◆ fSelectedVolume. std::string ROOT::RGeomViewer::fSelectedVolume. protected . ! name of selected volume ; Definition at line 32 of file RGeomViewer.hxx. ◆ fShowColumns. bool ROOT::RGeomViewer::fShowColumns {true}. protected . ! show columns in hierarchy ; Definition at line 35 of file RGeomViewer.hxx. ◆ fShowHierarchy. bool ROOT::RGeomViewer::fShowHierarchy {true}. protected . ",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:621,Usability,clear,cleared,621,". ROOT: ROOT::RGeomViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::RGeomViewer Class ReferenceWeb Widgets. ; Web-based ROOT geometry viewer. ; Definition at line 27 of file RGeomViewer.hxx. Public Member Functions;  RGeomViewer (TGeoManager *mgr=nullptr, const std::string &volname="""");  constructor ;  ; virtual ~RGeomViewer ();  destructor ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed Must be called after window is shown. ;  ; RGeomDescription & Description ();  ; bool GetShowColumns () const;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return web window address (name) used for geometry viewer. ;  ; std::string GetWindowUrl (bool remote);  Return web window URL which can be used for connection See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SaveAsMacro (const std::string &fname);  Save viewer configuration as macro. ;  ; void SaveImage (const std::string &fname=""geometry.png"", int width=0, int height=0);  Produce PNG image of the geometry If web-browser is shown and drawing completed, image is requested from the browser. ;  ; void SelectVolume (const std::string &volname);  Select visible top volume, all other volumes will be disabled. ;  ; void SetDrawOptions (const std::string &opt);  Configures draw option for geometry Normally has effect before first drawing of the geometry When geometry displayed, only ""axis"" and ""rotate"" options are updated. ;  ; void SetGeometry (TGeoManager *mgr, const std::string &volname="""");  assign new geometry to the viewer ;  ; void SetLimits (int nnodes=5000, int nfaces=100000);  Configures maximal number of visible nodes and faces. ;  ; vo",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:4626,Usability,clear,cleared,4626,"ve and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 43 of file RGeomViewer.cxx. ◆ ~RGeomViewer(). RGeomViewer::~RGeomViewer ; (; ). virtual . destructor ; Definition at line 71 of file RGeomViewer.cxx. Member Function Documentation. ◆ ClearOnClose(). void RGeomViewer::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 452 of file RGeomViewer.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomViewer::Description ; (; ). inline . Definition at line 107 of file RGeomViewer.hxx. ◆ GetShowColumns(). bool ROOT::RGeomViewer::GetShowColumns ; (; ); const. inline . Definition at line 97 of file RGeomViewer.hxx. ◆ GetShowHierarchy(). bool ROOT::RGeomViewer::GetShowHierarchy ; (; ); const. inline . Returns default hierarchy browser visibility. ; Definition at line 93 of file RGeomViewer.hxx. ◆ GetStackFromJson(). std::vector< int > RGeomViewer::GetStackFromJson ; (; const std::string & ; json, . bool ; node_ids = false . ). protected . convert JSON into stack array ; Definition at line 172 of file RGeomViewer.cxx. ◆ GetTitle(). const std::string & ROOT::RGeomViewer::GetTitle ; (; ); const. inline . Definition at line 59 of file RGeomViewer.hxx. ◆ GetWindowAddr(). std::string RGeomViewer::GetWindowAddr ; (; ); const. Return web window addres",MatchSource.WIKI,doc/master/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:7254,Availability,error,error,7254,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:7343,Availability,error,error,7343,"longs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:7498,Availability,error,error,7498,"y. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:7795,Availability,error,error,7795,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:12246,Availability,error,error,12246," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TGeoManager * fGeoManager {nullptr};  ; Int_t fTopVisible {-1};  ! is s ;  ; std::shared_ptr< RGeomViewer > fViewer;  . Additional Inherited Members;  Public Types inherited from TVirtualGeoPainter; enum  EGeoBombOption { kGeoNoBomb = 0; , kGeoBombXYZ = 1; , kGeoBombCyl = 2; , kGeoBombSph = 3; };  ; enum  EGeoVisL",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:7260,Integrability,message,message,7260,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:7801,Integrability,message,message,7801,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:9003,Integrability,message,message,9003,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:12252,Integrability,message,message,12252," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TGeoManager * fGeoManager {nullptr};  ; Int_t fTopVisible {-1};  ! is s ;  ; std::shared_ptr< RGeomViewer > fViewer;  . Additional Inherited Members;  Public Types inherited from TVirtualGeoPainter; enum  EGeoBombOption { kGeoNoBomb = 0; , kGeoBombXYZ = 1; , kGeoBombCyl = 2; , kGeoBombSph = 3; };  ; enum  EGeoVisL",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:12625,Integrability,message,message,12625," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TGeoManager * fGeoManager {nullptr};  ; Int_t fTopVisible {-1};  ! is s ;  ; std::shared_ptr< RGeomViewer > fViewer;  . Additional Inherited Members;  Public Types inherited from TVirtualGeoPainter; enum  EGeoBombOption { kGeoNoBomb = 0; , kGeoBombXYZ = 1; , kGeoBombCyl = 2; , kGeoBombSph = 3; };  ; enum  EGeoVisLevel { kGeoVisLevel = 0; };  ; enum  EGeoVisOption { ;   kGeoVisDefault = 0; , kGeoVisLeaves = 1; , kGeoVisOnly = 2; , kGeoVisBranch = 3; , ;   kGeoVisChanged = 4. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingl",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:5175,Modifiability,inherit,inherited,5175,"me (TGeoVolume *, Option_t *="""", TGeoMatrix *=nullptr) override;  ; void PrintOverlaps () const override;  ; void RandomPoints (const TGeoVolume *, Int_t, Option_t *="""") override;  ; void RandomRays (Int_t, Double_t, Double_t, Double_t, const char *, Bool_t) override;  ; void Raytrace (Option_t *="""") override;  ; TGeoNode * SamplePoints (Int_t, Double_t &, Double_t, const char *) override;  ; void SetBombFactors (Double_t=1.3, Double_t=1.3, Double_t=1.3, Double_t=1.3) override;  ; void SetCheckedNode (TGeoNode *) override;  ; void SetClippingShape (TGeoShape *) override;  ; void SetExplodedView (Int_t=0) override;  ; void SetGeoManager (TGeoManager *) override;  ; void SetIteratorPlugin (TGeoIteratorPlugin *) override;  ; void SetNmeshPoints (Int_t) override;  ; void SetNsegments (Int_t=20) override;  ; void SetRaytracing (Bool_t=kTRUE) override;  ; void SetTopVisible (Bool_t on=kTRUE) override;  ; void SetTopVolume (TGeoVolume *) override;  ; void SetVisLevel (Int_t=3) override;  ; void SetVisOption (Int_t=0) override;  ; Int_t ShapeDistancetoPrimitive (const TGeoShape *, Int_t, Int_t, Int_t) const override;  ; void Test (Int_t, Option_t *) override;  ; void TestOverlaps (const char *) override;  ; Bool_t TestVoxels (TGeoVolume *) override;  ; void UnbombTranslation (const Double_t *, Double_t *) override;  ; Double_t Weight (Double_t, Option_t *=""v"") override;  ;  Public Member Functions inherited from TVirtualGeoPainter;  TVirtualGeoPainter (TGeoManager *manager);  Geometry painter default constructor. ;  ;  ~TVirtualGeoPainter () override;  Geometry painter default destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMe",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:5577,Modifiability,inherit,inherited,5577,"t=20) override;  ; void SetRaytracing (Bool_t=kTRUE) override;  ; void SetTopVisible (Bool_t on=kTRUE) override;  ; void SetTopVolume (TGeoVolume *) override;  ; void SetVisLevel (Int_t=3) override;  ; void SetVisOption (Int_t=0) override;  ; Int_t ShapeDistancetoPrimitive (const TGeoShape *, Int_t, Int_t, Int_t) const override;  ; void Test (Int_t, Option_t *) override;  ; void TestOverlaps (const char *) override;  ; Bool_t TestVoxels (TGeoVolume *) override;  ; void UnbombTranslation (const Double_t *, Double_t *) override;  ; Double_t Weight (Double_t, Option_t *=""v"") override;  ;  Public Member Functions inherited from TVirtualGeoPainter;  TVirtualGeoPainter (TGeoManager *manager);  Geometry painter default constructor. ;  ;  ~TVirtualGeoPainter () override;  Geometry painter default destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:6890,Modifiability,inherit,inheritance,6890," ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:9101,Modifiability,inherit,inherits,9101,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:9218,Modifiability,inherit,inherits,9218,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:13091,Modifiability,inherit,inherited,13091,"const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TGeoManager * fGeoManager {nullptr};  ; Int_t fTopVisible {-1};  ! is s ;  ; std::shared_ptr< RGeomViewer > fViewer;  . Additional Inherited Members;  Public Types inherited from TVirtualGeoPainter; enum  EGeoBombOption { kGeoNoBomb = 0; , kGeoBombXYZ = 1; , kGeoBombCyl = 2; , kGeoBombSph = 3; };  ; enum  EGeoVisLevel { kGeoVisLevel = 0; };  ; enum  EGeoVisOption { ;   kGeoVisDefault = 0; , kGeoVisLeaves = 1; , kGeoVisOnly = 2; , kGeoVisBranch = 3; , ;   kGeoVisChanged = 4. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualGeoPainter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:13426,Modifiability,inherit,inherited,13426,"::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TGeoManager * fGeoManager {nullptr};  ; Int_t fTopVisible {-1};  ! is s ;  ; std::shared_ptr< RGeomViewer > fViewer;  . Additional Inherited Members;  Public Types inherited from TVirtualGeoPainter; enum  EGeoBombOption { kGeoNoBomb = 0; , kGeoBombXYZ = 1; , kGeoBombCyl = 2; , kGeoBombSph = 3; };  ; enum  EGeoVisLevel { kGeoVisLevel = 0; };  ; enum  EGeoVisOption { ;   kGeoVisDefault = 0; , kGeoVisLeaves = 1; , kGeoVisOnly = 2; , kGeoVisBranch = 3; , ;   kGeoVisChanged = 4. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualGeoPainter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualGeoPainter * GeoPainter ();  Static function returning a pointer to the geometry painter. ;  ; static void SetPainter (const TVirtualGeoPainter *painter);  Static function to set an alternative histogram painter. ;",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:14082,Modifiability,inherit,inherited,14082,"BombSph = 3; };  ; enum  EGeoVisLevel { kGeoVisLevel = 0; };  ; enum  EGeoVisOption { ;   kGeoVisDefault = 0; , kGeoVisLeaves = 1; , kGeoVisOnly = 2; , kGeoVisBranch = 3; , ;   kGeoVisChanged = 4. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualGeoPainter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualGeoPainter * GeoPainter ();  Static function returning a pointer to the geometry painter. ;  ; static void SetPainter (const TVirtualGeoPainter *painter);  Static function to set an alternative histogram painter. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *lo",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:14537,Modifiability,inherit,inherited,14537,"); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualGeoPainter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualGeoPainter * GeoPainter ();  Static function returning a pointer to the geometry painter. ;  ; static void SetPainter (const TVirtualGeoPainter *painter);  Static function to set an alternative histogram painter. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Attributes inherited from TVirtualGeoPainter; static TVirtualGeoPainter * fgGeoPainter = nullptr;  . #include <ROOT/RGeoPainter.hxx>. Inheritance diagram for ROOT::RGeoPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor ",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:15040,Modifiability,inherit,inherited,15040,"nst char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualGeoPainter * GeoPainter ();  Static function returning a pointer to the geometry painter. ;  ; static void SetPainter (const TVirtualGeoPainter *painter);  Static function to set an alternative histogram painter. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Attributes inherited from TVirtualGeoPainter; static TVirtualGeoPainter * fgGeoPainter = nullptr;  . #include <ROOT/RGeoPainter.hxx>. Inheritance diagram for ROOT::RGeoPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeoPainter(). RGeoPainter::RGeoPainter ; (; TGeoManager * ; manager). Definition at line 20 of file RGeoPainter.cxx. ◆ ~RGeoPainter(). RGeoPainter::~RGeoPainter ; (; ). override . Definition at line 26 of file RGeoPainter.cxx. Member Function Documentation. ◆ AddSize3D(). void ROOT::RGeoPainter::AddSize3D ; (; Int_t ; , . Int_t ; , . Int_t ;  . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 31 of file RGeoPainter.hxx. ◆ AddTrack(). TVirtualGeoTrack * RGeoPainter:",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:15139,Modifiability,inherit,inherited,15139,"nst char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualGeoPainter * GeoPainter ();  Static function returning a pointer to the geometry painter. ;  ; static void SetPainter (const TVirtualGeoPainter *painter);  Static function to set an alternative histogram painter. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Attributes inherited from TVirtualGeoPainter; static TVirtualGeoPainter * fgGeoPainter = nullptr;  . #include <ROOT/RGeoPainter.hxx>. Inheritance diagram for ROOT::RGeoPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeoPainter(). RGeoPainter::RGeoPainter ; (; TGeoManager * ; manager). Definition at line 20 of file RGeoPainter.cxx. ◆ ~RGeoPainter(). RGeoPainter::~RGeoPainter ; (; ). override . Definition at line 26 of file RGeoPainter.cxx. Member Function Documentation. ◆ AddSize3D(). void ROOT::RGeoPainter::AddSize3D ; (; Int_t ; , . Int_t ; , . Int_t ;  . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 31 of file RGeoPainter.hxx. ◆ AddTrack(). TVirtualGeoTrack * RGeoPainter:",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:15351,Modifiability,inherit,inherited,15351,"y painter. ;  ; static void SetPainter (const TVirtualGeoPainter *painter);  Static function to set an alternative histogram painter. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Attributes inherited from TVirtualGeoPainter; static TVirtualGeoPainter * fgGeoPainter = nullptr;  . #include <ROOT/RGeoPainter.hxx>. Inheritance diagram for ROOT::RGeoPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeoPainter(). RGeoPainter::RGeoPainter ; (; TGeoManager * ; manager). Definition at line 20 of file RGeoPainter.cxx. ◆ ~RGeoPainter(). RGeoPainter::~RGeoPainter ; (; ). override . Definition at line 26 of file RGeoPainter.cxx. Member Function Documentation. ◆ AddSize3D(). void ROOT::RGeoPainter::AddSize3D ; (; Int_t ; , . Int_t ; , . Int_t ;  . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 31 of file RGeoPainter.hxx. ◆ AddTrack(). TVirtualGeoTrack * RGeoPainter::AddTrack ; (; Int_t ; id, . Int_t ; pdgcode, . TObject * ; particle . ). overridevirtual . Implements TVirtualGeoPainter.; Definition at line 28 of file RGeoPainter.cxx. ◆ AddTrackPoint(). void RGeoPainter::AddT",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:8732,Security,hash,hash,8732," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html
https://root.cern/doc/master/classROOT_1_1RNTuple.html:2727,Deployability,update,update,2727," TFile.cxx:4089. Definition at line 69 of file RNTuple.hxx. Public Member Functions;  RNTuple ()=default;  ;  ~RNTuple ()=default;  ; std::uint64_t GetLenFooter () const;  ; std::uint64_t GetLenHeader () const;  ; std::uint64_t GetMaxKeySize () const;  ; std::uint64_t GetNBytesFooter () const;  ; std::uint64_t GetNBytesHeader () const;  ; std::uint64_t GetSeekFooter () const;  ; std::uint64_t GetSeekHeader () const;  ; std::uint16_t GetVersionEpoch () const;  ; std::uint16_t GetVersionMajor () const;  ; std::uint16_t GetVersionMinor () const;  ; std::uint16_t GetVersionPatch () const;  ; TClass * IsA () const;  ; Long64_t Merge (TCollection *input, TFileMergeInfo *mergeInfo);  RNTuple implements the hadd MergeFile interface Merge this NTuple with the input list entries. ;  ; void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  NOTE: if you change this version you also need to update RTFNTuple::fClassVersion in RMiniFile.cxx. ;  ; static const char * DeclFileName ();  . Static Public Attributes; static constexpr std::uint16_t kVersionEpoch = 0;  ; static constexpr std::uint16_t kVersionMajor = 3;  ; static constexpr std::uint16_t kVersionMinor = 0;  ; static constexpr std::uint16_t kVersionPatch = 0;  . Private Attributes; TFile * fFile = nullptr;  ! The file from which the ntuple was streamed, registered in the custom streamer ;  ; std::uint64_t fLenFooter = 0;  The size of the uncompressed ntuple footer. ;  ; std::uint64_t fLenHeader = 0;  The size of the uncompressed ntuple header. ;  ; std::uint64_t fMaxKeySize = 0;  The maximum size for a TKey payload. Payloads bigger than this size will be written as multiple blobs. ;  ; std::uint64_t fNBytesFooter = 0;  The size of the compressed ntuple footer. ;  ; std::uint64_t fNBytesHeader = 0;  The size of the compressed ntuple header. ;  ",MatchSource.WIKI,doc/master/classROOT_1_1RNTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RNTuple.html
https://root.cern/doc/master/classROOT_1_1RNTuple.html:4376,Deployability,patch,patch,4376,"The maximum size for a TKey payload. Payloads bigger than this size will be written as multiple blobs. ;  ; std::uint64_t fNBytesFooter = 0;  The size of the compressed ntuple footer. ;  ; std::uint64_t fNBytesHeader = 0;  The size of the compressed ntuple header. ;  ; std::uint64_t fSeekFooter = 0;  The file offset of the footer excluding the TKey part. ;  ; std::uint64_t fSeekHeader = 0;  The file offset of the header excluding the TKey part. ;  ; std::uint16_t fVersionEpoch = kVersionEpoch;  Version of the RNTuple binary format that the writer supports (see specification). ;  ; std::uint16_t fVersionMajor = kVersionMajor;  Changing the major version indicates forward incompatible changes; such changes should correspond to a new bit in the feature flag of the RNTuple header. ;  ; std::uint16_t fVersionMinor = kVersionMinor;  Changing the minor version indicates new optional fields added to the RNTuple meta-data. ;  ; std::uint16_t fVersionPatch = kVersionPatch;  Changing the patch version indicates new backported features from newer binary format versions. ;  . Friends; class Experimental::Internal::RNTupleFileWriter;  ; class Experimental::Internal::RPageSourceFile;  ; ROOT::RNTuple ROOT::Experimental::Internal::CreateAnchor (std::uint16_t versionEpoch, std::uint16_t versionMajor, std::uint16_t versionMinor, std::uint16_t versionPatch, std::uint64_t seekHeader, std::uint64_t nbytesHeader, std::uint64_t lenHeader, std::uint64_t seekFooter, std::uint64_t nbytesFooter, std::uint64_t lenFooter, std::uint64_t maxKeySize);  . #include <ROOT/RNTuple.hxx>; Constructor & Destructor Documentation. ◆ RNTuple(). ROOT::RNTuple::RNTuple ; (; ). default . ◆ ~RNTuple(). ROOT::RNTuple::~RNTuple ; (; ). default . Member Function Documentation. ◆ Class(). static TClass * ROOT::RNTuple::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::RNTuple::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static conste",MatchSource.WIKI,doc/master/classROOT_1_1RNTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RNTuple.html
https://root.cern/doc/master/classROOT_1_1RNTuple.html:5510,Deployability,update,update,5510,"pleFileWriter;  ; class Experimental::Internal::RPageSourceFile;  ; ROOT::RNTuple ROOT::Experimental::Internal::CreateAnchor (std::uint16_t versionEpoch, std::uint16_t versionMajor, std::uint16_t versionMinor, std::uint16_t versionPatch, std::uint64_t seekHeader, std::uint64_t nbytesHeader, std::uint64_t lenHeader, std::uint64_t seekFooter, std::uint64_t nbytesFooter, std::uint64_t lenFooter, std::uint64_t maxKeySize);  . #include <ROOT/RNTuple.hxx>; Constructor & Destructor Documentation. ◆ RNTuple(). ROOT::RNTuple::RNTuple ; (; ). default . ◆ ~RNTuple(). ROOT::RNTuple::~RNTuple ; (; ). default . Member Function Documentation. ◆ Class(). static TClass * ROOT::RNTuple::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::RNTuple::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::RNTuple::Class_Version ; (; ). inlinestaticconstexpr . NOTE: if you change this version you also need to update RTFNTuple::fClassVersion in RMiniFile.cxx. ; ReturnsVersion of this class ; Definition at line 136 of file RNTuple.hxx. ◆ DeclFileName(). static const char * ROOT::RNTuple::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 136 of file RNTuple.hxx. ◆ GetLenFooter(). std::uint64_t ROOT::RNTuple::GetLenFooter ; (; ); const. inline . Definition at line 128 of file RNTuple.hxx. ◆ GetLenHeader(). std::uint64_t ROOT::RNTuple::GetLenHeader ; (; ); const. inline . Definition at line 124 of file RNTuple.hxx. ◆ GetMaxKeySize(). std::uint64_t ROOT::RNTuple::GetMaxKeySize ; (; ); const. inline . Definition at line 129 of file RNTuple.hxx. ◆ GetNBytesFooter(). std::uint64_t ROOT::RNTuple::GetNBytesFooter ; (; ); const. inline . Definition at line 127 of file RNTuple.hxx. ◆ GetNBytesHeader(). std::uint64_t ROOT::RNTuple::GetNBytesHeader ; (; ); const. inline . Definition at line 123 of file RNTuple.hxx. ◆ GetSeekFooter(). std::",MatchSource.WIKI,doc/master/classROOT_1_1RNTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RNTuple.html
https://root.cern/doc/master/classROOT_1_1RNTuple.html:10697,Deployability,release,release,10697,"he size of the compressed ntuple header. ; Definition at line 99 of file RNTuple.hxx. ◆ fSeekFooter. std::uint64_t ROOT::RNTuple::fSeekFooter = 0. private . The file offset of the footer excluding the TKey part. ; Definition at line 103 of file RNTuple.hxx. ◆ fSeekHeader. std::uint64_t ROOT::RNTuple::fSeekHeader = 0. private . The file offset of the header excluding the TKey part. ; Definition at line 97 of file RNTuple.hxx. ◆ fVersionEpoch. std::uint16_t ROOT::RNTuple::fVersionEpoch = kVersionEpoch. private . Version of the RNTuple binary format that the writer supports (see specification). ; Changing the epoch indicates backward-incompatible changes ; Definition at line 87 of file RNTuple.hxx. ◆ fVersionMajor. std::uint16_t ROOT::RNTuple::fVersionMajor = kVersionMajor. private . Changing the major version indicates forward incompatible changes; such changes should correspond to a new bit in the feature flag of the RNTuple header. ; For the pre-release epoch 0, indicates the release candidate number ; Definition at line 91 of file RNTuple.hxx. ◆ fVersionMinor. std::uint16_t ROOT::RNTuple::fVersionMinor = kVersionMinor. private . Changing the minor version indicates new optional fields added to the RNTuple meta-data. ; Definition at line 93 of file RNTuple.hxx. ◆ fVersionPatch. std::uint16_t ROOT::RNTuple::fVersionPatch = kVersionPatch. private . Changing the patch version indicates new backported features from newer binary format versions. ; Definition at line 95 of file RNTuple.hxx. ◆ kVersionEpoch. constexpr std::uint16_t ROOT::RNTuple::kVersionEpoch = 0. staticconstexpr . Definition at line 79 of file RNTuple.hxx. ◆ kVersionMajor. constexpr std::uint16_t ROOT::RNTuple::kVersionMajor = 3. staticconstexpr . Definition at line 80 of file RNTuple.hxx. ◆ kVersionMinor. constexpr std::uint16_t ROOT::RNTuple::kVersionMinor = 0. staticconstexpr . Definition at line 81 of file RNTuple.hxx. ◆ kVersionPatch. constexpr std::uint16_t ROOT::RNTuple::kVersionPatch = 0. staticco",MatchSource.WIKI,doc/master/classROOT_1_1RNTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RNTuple.html
https://root.cern/doc/master/classROOT_1_1RNTuple.html:10728,Deployability,release,release,10728,"he size of the compressed ntuple header. ; Definition at line 99 of file RNTuple.hxx. ◆ fSeekFooter. std::uint64_t ROOT::RNTuple::fSeekFooter = 0. private . The file offset of the footer excluding the TKey part. ; Definition at line 103 of file RNTuple.hxx. ◆ fSeekHeader. std::uint64_t ROOT::RNTuple::fSeekHeader = 0. private . The file offset of the header excluding the TKey part. ; Definition at line 97 of file RNTuple.hxx. ◆ fVersionEpoch. std::uint16_t ROOT::RNTuple::fVersionEpoch = kVersionEpoch. private . Version of the RNTuple binary format that the writer supports (see specification). ; Changing the epoch indicates backward-incompatible changes ; Definition at line 87 of file RNTuple.hxx. ◆ fVersionMajor. std::uint16_t ROOT::RNTuple::fVersionMajor = kVersionMajor. private . Changing the major version indicates forward incompatible changes; such changes should correspond to a new bit in the feature flag of the RNTuple header. ; For the pre-release epoch 0, indicates the release candidate number ; Definition at line 91 of file RNTuple.hxx. ◆ fVersionMinor. std::uint16_t ROOT::RNTuple::fVersionMinor = kVersionMinor. private . Changing the minor version indicates new optional fields added to the RNTuple meta-data. ; Definition at line 93 of file RNTuple.hxx. ◆ fVersionPatch. std::uint16_t ROOT::RNTuple::fVersionPatch = kVersionPatch. private . Changing the patch version indicates new backported features from newer binary format versions. ; Definition at line 95 of file RNTuple.hxx. ◆ kVersionEpoch. constexpr std::uint16_t ROOT::RNTuple::kVersionEpoch = 0. staticconstexpr . Definition at line 79 of file RNTuple.hxx. ◆ kVersionMajor. constexpr std::uint16_t ROOT::RNTuple::kVersionMajor = 3. staticconstexpr . Definition at line 80 of file RNTuple.hxx. ◆ kVersionMinor. constexpr std::uint16_t ROOT::RNTuple::kVersionMinor = 0. staticconstexpr . Definition at line 81 of file RNTuple.hxx. ◆ kVersionPatch. constexpr std::uint16_t ROOT::RNTuple::kVersionPatch = 0. staticco",MatchSource.WIKI,doc/master/classROOT_1_1RNTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RNTuple.html
https://root.cern/doc/master/classROOT_1_1RNTuple.html:11119,Deployability,patch,patch,11119,"tion at line 97 of file RNTuple.hxx. ◆ fVersionEpoch. std::uint16_t ROOT::RNTuple::fVersionEpoch = kVersionEpoch. private . Version of the RNTuple binary format that the writer supports (see specification). ; Changing the epoch indicates backward-incompatible changes ; Definition at line 87 of file RNTuple.hxx. ◆ fVersionMajor. std::uint16_t ROOT::RNTuple::fVersionMajor = kVersionMajor. private . Changing the major version indicates forward incompatible changes; such changes should correspond to a new bit in the feature flag of the RNTuple header. ; For the pre-release epoch 0, indicates the release candidate number ; Definition at line 91 of file RNTuple.hxx. ◆ fVersionMinor. std::uint16_t ROOT::RNTuple::fVersionMinor = kVersionMinor. private . Changing the minor version indicates new optional fields added to the RNTuple meta-data. ; Definition at line 93 of file RNTuple.hxx. ◆ fVersionPatch. std::uint16_t ROOT::RNTuple::fVersionPatch = kVersionPatch. private . Changing the patch version indicates new backported features from newer binary format versions. ; Definition at line 95 of file RNTuple.hxx. ◆ kVersionEpoch. constexpr std::uint16_t ROOT::RNTuple::kVersionEpoch = 0. staticconstexpr . Definition at line 79 of file RNTuple.hxx. ◆ kVersionMajor. constexpr std::uint16_t ROOT::RNTuple::kVersionMajor = 3. staticconstexpr . Definition at line 80 of file RNTuple.hxx. ◆ kVersionMinor. constexpr std::uint16_t ROOT::RNTuple::kVersionMinor = 0. staticconstexpr . Definition at line 81 of file RNTuple.hxx. ◆ kVersionPatch. constexpr std::uint16_t ROOT::RNTuple::kVersionPatch = 0. staticconstexpr . Definition at line 82 of file RNTuple.hxx. Libraries for ROOT::RNTuple:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/v7/inc/ROOT/RNTuple.hxx; tree/ntuple/v7/src/RNTuple.cxx; tree/ntuple/v7/src/RNTupleMerger.cxx. ROOTRNTuple. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1RNTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RNTuple.html
https://root.cern/doc/master/classROOT_1_1RNTuple.html:2375,Integrability,interface,interface,2375,"e with an RDF or an RNTupleReader.; For instance, for an RNTuple called ""Events"" in a ROOT file, usage can be auto f = TFile::Open(""data.root"");; auto ntpl = f->Get<ROOT::RNTuple>(""Events"");; auto reader = RNTupleReader::Open(ntpl);; f#define f(i)Definition RSha256.hxx:104; ROOT::RNTupleRepresentation of an RNTuple data set in a ROOT file.Definition RNTuple.hxx:69; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089. Definition at line 69 of file RNTuple.hxx. Public Member Functions;  RNTuple ()=default;  ;  ~RNTuple ()=default;  ; std::uint64_t GetLenFooter () const;  ; std::uint64_t GetLenHeader () const;  ; std::uint64_t GetMaxKeySize () const;  ; std::uint64_t GetNBytesFooter () const;  ; std::uint64_t GetNBytesHeader () const;  ; std::uint64_t GetSeekFooter () const;  ; std::uint64_t GetSeekHeader () const;  ; std::uint16_t GetVersionEpoch () const;  ; std::uint16_t GetVersionMajor () const;  ; std::uint16_t GetVersionMinor () const;  ; std::uint16_t GetVersionPatch () const;  ; TClass * IsA () const;  ; Long64_t Merge (TCollection *input, TFileMergeInfo *mergeInfo);  RNTuple implements the hadd MergeFile interface Merge this NTuple with the input list entries. ;  ; void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  NOTE: if you change this version you also need to update RTFNTuple::fClassVersion in RMiniFile.cxx. ;  ; static const char * DeclFileName ();  . Static Public Attributes; static constexpr std::uint16_t kVersionEpoch = 0;  ; static constexpr std::uint16_t kVersionMajor = 3;  ; static constexpr std::uint16_t kVersionMinor = 0;  ; static constexpr std::uint16_t kVersionPatch = 0;  . Private Att",MatchSource.WIKI,doc/master/classROOT_1_1RNTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RNTuple.html
https://root.cern/doc/master/classROOT_1_1RNTuple.html:7569,Integrability,interface,interface,7569,"on at line 126 of file RNTuple.hxx. ◆ GetSeekHeader(). std::uint64_t ROOT::RNTuple::GetSeekHeader ; (; ); const. inline . Definition at line 122 of file RNTuple.hxx. ◆ GetVersionEpoch(). std::uint16_t ROOT::RNTuple::GetVersionEpoch ; (; ); const. inline . Definition at line 117 of file RNTuple.hxx. ◆ GetVersionMajor(). std::uint16_t ROOT::RNTuple::GetVersionMajor ; (; ); const. inline . Definition at line 118 of file RNTuple.hxx. ◆ GetVersionMinor(). std::uint16_t ROOT::RNTuple::GetVersionMinor ; (; ); const. inline . Definition at line 119 of file RNTuple.hxx. ◆ GetVersionPatch(). std::uint16_t ROOT::RNTuple::GetVersionPatch ; (; ); const. inline . Definition at line 120 of file RNTuple.hxx. ◆ IsA(). TClass * ROOT::RNTuple::IsA ; (; ); const. inline . ReturnsTClass describing current object ; Definition at line 136 of file RNTuple.hxx. ◆ Merge(). Long64_t ROOT::RNTuple::Merge ; (; TCollection * ; input, . TFileMergeInfo * ; mergeInfo . ). RNTuple implements the hadd MergeFile interface Merge this NTuple with the input list entries. ; Definition at line 45 of file RNTupleMerger.cxx. ◆ Streamer(). void ROOT::RNTuple::Streamer ; (; TBuffer & ; buf). Definition at line 27 of file RNTuple.cxx. ◆ StreamerNVirtual(). void ROOT::RNTuple::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 136 of file RNTuple.hxx. Friends And Related Symbol Documentation. ◆ Experimental::Internal::RNTupleFileWriter. friend class Experimental::Internal::RNTupleFileWriter. friend . Definition at line 70 of file RNTuple.hxx. ◆ Experimental::Internal::RPageSourceFile. friend class Experimental::Internal::RPageSourceFile. friend . Definition at line 71 of file RNTuple.hxx. ◆ ROOT::Experimental::Internal::CreateAnchor. ROOT::RNTuple ROOT::Experimental::Internal::CreateAnchor ; (; std::uint16_t ; versionEpoch, . std::uint16_t ; versionMajor, . std::uint16_t ; versionMinor, . std::uint16_t ; versionPatch, . std::uint64_t ; seekHeader, . std::uint64_t ; nbytesH",MatchSource.WIKI,doc/master/classROOT_1_1RNTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RNTuple.html
https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html:3285,Deployability,release,release,3285,"- Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::vector< std::string > &fnames, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static std::vector< std::string > ProduceImagesNames (const std::string &fname, unsigned nfiles=1);  Produce vector of file names for specified file pattern Depending from supported file forma. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt5WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::RQt5WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 252 of file rootqt5.cpp. ◆ ~RQt5WebDisplayHandle(). ROOT::RQt5WebDispl",MatchSource.WIKI,doc/master/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html:4888,Deployability,release,release,4888,"e names for specified file pattern Depending from supported file forma. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt5WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::RQt5WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 252 of file rootqt5.cpp. ◆ ~RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::~RQt5WebDisplayHandle ; (; ). inlineoverride . Definition at line 254 of file rootqt5.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt5WebDisplayHandle::AddCreator ; (; ). inlinestatic . Definition at line 275 of file rootqt5.cpp. ◆ Resize(). bool ROOT::RQt5WebDisplayHandle::Resize ; (; int ; , . int ;  . ). inlineoverridevirtual . resize web window - if possible ; Reimplemented from ROOT::RWebDisplayHandle.; Definition at line 267 of file rootqt5.cpp. Member Data Documentation. ◆ fView. RootWebView* ROOT::RQt5WebDisplayHandle::fView {nullptr}. protected . pointer on widget, need to release when handle is destroyed ; Definition at line 95 of file rootqt5.cpp. gui/qt5webdisplay/rootqt5.cpp. ROOTRQt5WebDisplayHandle. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html:647,Modifiability,inherit,inherited,647,". ROOT: ROOT::RQt5WebDisplayHandle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; ROOT::RQt5WebDisplayHandle Class ReferenceWeb Display » QT5 Web Display. . Definition at line 92 of file rootqt5.cpp. Classes; class  Qt5Creator;  . Public Member Functions;  RQt5WebDisplayHandle (const std::string &url);  ;  ~RQt5WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required f",MatchSource.WIKI,doc/master/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html:1144,Modifiability,inherit,inherited,1144,"cted Attributes |; List of all members ; ROOT::RQt5WebDisplayHandle Class ReferenceWeb Display » QT5 Web Display. . Definition at line 92 of file rootqt5.cpp. Classes; class  Qt5Creator;  . Public Member Functions;  RQt5WebDisplayHandle (const std::string &url);  ;  ~RQt5WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing funct",MatchSource.WIKI,doc/master/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html:1361,Modifiability,config,configured,1361,"cted Attributes |; List of all members ; ROOT::RQt5WebDisplayHandle Class ReferenceWeb Display » QT5 Web Display. . Definition at line 92 of file rootqt5.cpp. Classes; class  Qt5Creator;  . Public Member Functions;  RQt5WebDisplayHandle (const std::string &url);  ;  ~RQt5WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing funct",MatchSource.WIKI,doc/master/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html:1606,Modifiability,config,configured,1606,"rride;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functio",MatchSource.WIKI,doc/master/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html:3388,Modifiability,inherit,inherited,3388,"std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::vector< std::string > &fnames, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static std::vector< std::string > ProduceImagesNames (const std::string &fname, unsigned nfiles=1);  Produce vector of file names for specified file pattern Depending from supported file forma. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt5WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::RQt5WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 252 of file rootqt5.cpp. ◆ ~RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::~RQt5WebDisplayHandle ; (; ). inlineoverride . Definition at line 254 of file rootqt5.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt5WebD",MatchSource.WIKI,doc/master/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html:3500,Modifiability,config,configured,3500,"std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::vector< std::string > &fnames, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static std::vector< std::string > ProduceImagesNames (const std::string &fname, unsigned nfiles=1);  Produce vector of file names for specified file pattern Depending from supported file forma. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt5WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::RQt5WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 252 of file rootqt5.cpp. ◆ ~RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::~RQt5WebDisplayHandle ; (; ). inlineoverride . Definition at line 254 of file rootqt5.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt5WebD",MatchSource.WIKI,doc/master/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html:1390,Testability,test,test,1390,"cted Attributes |; List of all members ; ROOT::RQt5WebDisplayHandle Class ReferenceWeb Display » QT5 Web Display. . Definition at line 92 of file rootqt5.cpp. Classes; class  Qt5Creator;  . Public Member Functions;  RQt5WebDisplayHandle (const std::string &url);  ;  ~RQt5WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing funct",MatchSource.WIKI,doc/master/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html:3285,Deployability,release,release,3285,"- Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::vector< std::string > &fnames, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static std::vector< std::string > ProduceImagesNames (const std::string &fname, unsigned nfiles=1);  Produce vector of file names for specified file pattern Depending from supported file forma. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt6WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::RQt6WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 215 of file rootqt6.cpp. ◆ ~RQt6WebDisplayHandle(). ROOT::RQt6WebDispl",MatchSource.WIKI,doc/master/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html:4888,Deployability,release,release,4888,"e names for specified file pattern Depending from supported file forma. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt6WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::RQt6WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 215 of file rootqt6.cpp. ◆ ~RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::~RQt6WebDisplayHandle ; (; ). inlineoverride . Definition at line 217 of file rootqt6.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt6WebDisplayHandle::AddCreator ; (; ). inlinestatic . Definition at line 234 of file rootqt6.cpp. ◆ Resize(). bool ROOT::RQt6WebDisplayHandle::Resize ; (; int ; , . int ;  . ). inlineoverridevirtual . resize web window - if possible ; Reimplemented from ROOT::RWebDisplayHandle.; Definition at line 226 of file rootqt6.cpp. Member Data Documentation. ◆ fView. RootWebView* ROOT::RQt6WebDisplayHandle::fView {nullptr}. protected . pointer on widget, need to release when handle is destroyed ; Definition at line 71 of file rootqt6.cpp. gui/qt6webdisplay/rootqt6.cpp. ROOTRQt6WebDisplayHandle. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html:647,Modifiability,inherit,inherited,647,". ROOT: ROOT::RQt6WebDisplayHandle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; ROOT::RQt6WebDisplayHandle Class ReferenceWeb Display » QT6 Web Display. . Definition at line 68 of file rootqt6.cpp. Classes; class  Qt6Creator;  . Public Member Functions;  RQt6WebDisplayHandle (const std::string &url);  ;  ~RQt6WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required f",MatchSource.WIKI,doc/master/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html:1144,Modifiability,inherit,inherited,1144,"cted Attributes |; List of all members ; ROOT::RQt6WebDisplayHandle Class ReferenceWeb Display » QT6 Web Display. . Definition at line 68 of file rootqt6.cpp. Classes; class  Qt6Creator;  . Public Member Functions;  RQt6WebDisplayHandle (const std::string &url);  ;  ~RQt6WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing funct",MatchSource.WIKI,doc/master/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html:1361,Modifiability,config,configured,1361,"cted Attributes |; List of all members ; ROOT::RQt6WebDisplayHandle Class ReferenceWeb Display » QT6 Web Display. . Definition at line 68 of file rootqt6.cpp. Classes; class  Qt6Creator;  . Public Member Functions;  RQt6WebDisplayHandle (const std::string &url);  ;  ~RQt6WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing funct",MatchSource.WIKI,doc/master/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html:1606,Modifiability,config,configured,1606,"rride;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functio",MatchSource.WIKI,doc/master/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html:3388,Modifiability,inherit,inherited,3388,"std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::vector< std::string > &fnames, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static std::vector< std::string > ProduceImagesNames (const std::string &fname, unsigned nfiles=1);  Produce vector of file names for specified file pattern Depending from supported file forma. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt6WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::RQt6WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 215 of file rootqt6.cpp. ◆ ~RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::~RQt6WebDisplayHandle ; (; ). inlineoverride . Definition at line 217 of file rootqt6.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt6WebD",MatchSource.WIKI,doc/master/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html:3500,Modifiability,config,configured,3500,"std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::vector< std::string > &fnames, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static std::vector< std::string > ProduceImagesNames (const std::string &fname, unsigned nfiles=1);  Produce vector of file names for specified file pattern Depending from supported file forma. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt6WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::RQt6WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 215 of file rootqt6.cpp. ◆ ~RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::~RQt6WebDisplayHandle ; (; ). inlineoverride . Definition at line 217 of file rootqt6.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt6WebD",MatchSource.WIKI,doc/master/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html:1390,Testability,test,test,1390,"cted Attributes |; List of all members ; ROOT::RQt6WebDisplayHandle Class ReferenceWeb Display » QT6 Web Display. . Definition at line 68 of file rootqt6.cpp. Classes; class  Qt6Creator;  . Public Member Functions;  RQt6WebDisplayHandle (const std::string &url);  ;  ~RQt6WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing funct",MatchSource.WIKI,doc/master/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RRangeCast.html:769,Safety,avoid,avoid,769,". ROOT: ROOT::RRangeCast< T, isDynamic, Range_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::RRangeCast< T, isDynamic, Range_t > Class Template Reference. ; template<typename T, bool isDynamic, typename Range_t>; class ROOT::RRangeCast< T, isDynamic, Range_t >Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. ; Range_tThe type of the input range, which should be usually a reference type to avoid copying. . Definition at line 135 of file RRangeCast.hxx. Public Types; using const_iterator = Internal::TypedIter< T, decltype(std::cbegin(std::declval< Range_t >())), isDynamic >;  ; using iterator = Internal::TypedIter< T, decltype(std::begin(std::declval< Range_t >())), isDynamic >;  . Public Member Functions;  RRangeCast (Range_t &&inputRange);  ; iterator begin ();  ; const_iterator begin () const;  ; iterator end ();  ; const_iterator end () const;  . Private Attributes; Range_t fInputRange;  . #include <ROOT/RRangeCast.hxx>. Inheritance diagram for ROOT::RRangeCast< T, isDynamic, Range_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ const_iterator. template<typename T , bool isDynamic, typename Range_t > . using ROOT::RRangeCast< T, isDynamic, Range_t >::const_iterator = Internal::TypedIter<T, decltype(std::cbegin(std::declval<Range_t>())), isDynamic>. Definition at line 144 of file RRangeCast.hxx. ◆ iterator. template<typename T , bool isDynamic, typename Range_t > . using ROOT::RRangeCast< T, isDynamic, Range_t >::iterator = Internal::TypedIter<T, decltype(std::begin(std::declval<Range_t>())), isDynamic>. Definit",MatchSource.WIKI,doc/master/classROOT_1_1RRangeCast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RRangeCast.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:4737,Availability,error,error,4737,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:4826,Availability,error,error,4826,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:4981,Availability,error,error,4981,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:5278,Availability,error,error,5278,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:9713,Availability,error,error,9713," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class s",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:4743,Integrability,message,message,4743,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:5284,Integrability,message,message,5284,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:6486,Integrability,message,message,6486,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:9719,Integrability,message,message,9719," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class s",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:10092,Integrability,message,message,10092," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, voi",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:563,Modifiability,inherit,inherited,563,". ROOT: ROOT::RTreeDrawInvokeTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RTreeDrawInvokeTimer Class Reference. . Definition at line 86 of file RTreeViewer.cxx. Public Member Functions;  RTreeDrawInvokeTimer (Long_t milliSec, bool mode, RTreeViewer &viewer);  constructor ;  ; void Timeout () override;  timeout handler used to process postponed requests in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void Se",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:2508,Modifiability,inherit,inherited,2508,"verride;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consi",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:2976,Modifiability,inherit,inherited,2976,"kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:4373,Modifiability,inherit,inheritance,4373,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:6584,Modifiability,inherit,inherits,6584,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:6701,Modifiability,inherit,inherits,6701,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:10399,Modifiability,inherit,inherited,10399," SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal);  Activate signal without args. ;  ; template<typename T > ; void Emit (const char *signal, const T &arg);  Activate signal with single paramet",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:12431,Modifiability,inherit,inherited,12431," const T &... params);  Emit a signal with a varying number of arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; RTreeViewer & fViewer;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtH",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:13087,Modifiability,inherit,inherited,13087,"ber of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; RTreeViewer & fViewer;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bo",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:13471,Modifiability,inherit,inherited,13471,"WriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Thi",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:13689,Modifiability,inherit,inherited,13689,"WriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Thi",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:14207,Modifiability,inherit,inherited,14207,"ar * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullpt",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:15367,Modifiability,inherit,inherited,15367,"ass_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sende",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:15466,Modifiability,inherit,inherited,15466,"ass_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sende",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:15677,Modifiability,inherit,inherited,15677,", const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:15790,Modifiability,inherit,inherited,15790,", const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:16639,Modifiability,inherit,inherited,16639,"nst char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for ROOT::RTreeDrawInvokeTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawInvokeTimer(). ROOT::RTreeDrawInvokeTimer::RTreeDrawInvokeTimer ; (; Long_t ; milliSec, . bool ; mode, . RTreeViewer & ; viewer . ). inline . constructor ; Definition at line 91 of file RTreeViewer.cxx. Member Function Documentation. ◆ Timeout(). void ROOT::RTreeDrawInvokeTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process postponed requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 95 of file RTreeViewer.cxx. Member Data Documentation. ◆ fViewer. RTreeViewer& ROO",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:16842,Modifiability,inherit,inherited,16842,"nst char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for ROOT::RTreeDrawInvokeTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawInvokeTimer(). ROOT::RTreeDrawInvokeTimer::RTreeDrawInvokeTimer ; (; Long_t ; milliSec, . bool ; mode, . RTreeViewer & ; viewer . ). inline . constructor ; Definition at line 91 of file RTreeViewer.cxx. Member Function Documentation. ◆ Timeout(). void ROOT::RTreeDrawInvokeTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process postponed requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 95 of file RTreeViewer.cxx. Member Data Documentation. ◆ fViewer. RTreeViewer& ROO",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:17055,Modifiability,inherit,inherited,17055,"nst char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for ROOT::RTreeDrawInvokeTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawInvokeTimer(). ROOT::RTreeDrawInvokeTimer::RTreeDrawInvokeTimer ; (; Long_t ; milliSec, . bool ; mode, . RTreeViewer & ; viewer . ). inline . constructor ; Definition at line 91 of file RTreeViewer.cxx. Member Function Documentation. ◆ Timeout(). void ROOT::RTreeDrawInvokeTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process postponed requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 95 of file RTreeViewer.cxx. Member Data Documentation. ◆ fViewer. RTreeViewer& ROO",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:462,Safety,timeout,timeout,462,". ROOT: ROOT::RTreeDrawInvokeTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RTreeDrawInvokeTimer Class Reference. . Definition at line 86 of file RTreeViewer.cxx. Public Member Functions;  RTreeDrawInvokeTimer (Long_t milliSec, bool mode, RTreeViewer &viewer);  constructor ;  ; void Timeout () override;  timeout handler used to process postponed requests in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void Se",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:2164,Safety,timeout,timeout,2164,"r * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObje",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:17687,Safety,timeout,timeout,17687,"hod name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for ROOT::RTreeDrawInvokeTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawInvokeTimer(). ROOT::RTreeDrawInvokeTimer::RTreeDrawInvokeTimer ; (; Long_t ; milliSec, . bool ; mode, . RTreeViewer & ; viewer . ). inline . constructor ; Definition at line 91 of file RTreeViewer.cxx. Member Function Documentation. ◆ Timeout(). void ROOT::RTreeDrawInvokeTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process postponed requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 95 of file RTreeViewer.cxx. Member Data Documentation. ◆ fViewer. RTreeViewer& ROOT::RTreeDrawInvokeTimer::fViewer. Definition at line 88 of file RTreeViewer.cxx. tree/webviewer/src/RTreeViewer.cxx. ROOTRTreeDrawInvokeTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:6215,Security,hash,hash,6215," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:4657,Availability,error,error,4657,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:4746,Availability,error,error,4746,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:4901,Availability,error,error,4901,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:5198,Availability,error,error,5198,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:9282,Availability,error,error,9282,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Member Functions;  RTreeDrawMonitoring (const RTreeDrawMonitoring &)=delete;  ; RTreeDrawMonitoring & operator= (const RTreeDrawMonitoring &)=delete;  . Private Attributes; long long fLastProgressSendTm {0};  ; Int_t fPeriod {100};  ; RTreeViewer & fViewer;  . Additional Inherited Members;  Public Types inherited from TObject",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:4663,Integrability,message,message,4663,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:5204,Integrability,message,message,5204,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:6194,Integrability,message,message,6194,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:9288,Integrability,message,message,9288,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Member Functions;  RTreeDrawMonitoring (const RTreeDrawMonitoring &)=delete;  ; RTreeDrawMonitoring & operator= (const RTreeDrawMonitoring &)=delete;  . Private Attributes; long long fLastProgressSendTm {0};  ; Int_t fPeriod {100};  ; RTreeViewer & fViewer;  . Additional Inherited Members;  Public Types inherited from TObject",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:9661,Integrability,message,message,9661," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Member Functions;  RTreeDrawMonitoring (const RTreeDrawMonitoring &)=delete;  ; RTreeDrawMonitoring & operator= (const RTreeDrawMonitoring &)=delete;  . Private Attributes; long long fLastProgressSendTm {0};  ; Int_t fPeriod {100};  ; RTreeViewer & fViewer;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:1176,Modifiability,inherit,inherited,1176,". ROOT: ROOT::RTreeDrawMonitoring Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::RTreeDrawMonitoring Class Reference. . Definition at line 31 of file RTreeViewer.cxx. Public Member Functions;  RTreeDrawMonitoring (Int_t period, RTreeViewer &viewer);  ; bool SendFileCloseEvent (TFile *) override;  ; bool SendFileOpenProgress (TFile *, TList *, const char *, bool=false) override;  ; bool SendFileReadProgress (TFile *) override;  ; bool SendFileWriteProgress (TFile *) override;  ; bool SendInfoDescription (const char *) override;  ; bool SendInfoStatus (const char *) override;  ; bool SendInfoTime () override;  ; bool SendInfoUser (const char *=nullptr) override;  ; bool SendParameters (TList *, const char *=nullptr) override;  ; bool SendProcessingProgress (Double_t nevent, Double_t, bool=false) override;  ; bool SendProcessingStatus (const char *, bool=false) override;  ; void SetLogLevel (const char *=""WARNING"") override;  ; void Verbose (bool) override;  ;  Public Member Functions inherited from TVirtualMonitoringWriter;  TVirtualMonitoringWriter ();  ;  TVirtualMonitoringWriter (const char *name, Double_t value);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:1572,Modifiability,inherit,inherited,1572,"ile *) override;  ; bool SendFileWriteProgress (TFile *) override;  ; bool SendInfoDescription (const char *) override;  ; bool SendInfoStatus (const char *) override;  ; bool SendInfoTime () override;  ; bool SendInfoUser (const char *=nullptr) override;  ; bool SendParameters (TList *, const char *=nullptr) override;  ; bool SendProcessingProgress (Double_t nevent, Double_t, bool=false) override;  ; bool SendProcessingStatus (const char *, bool=false) override;  ; void SetLogLevel (const char *=""WARNING"") override;  ; void Verbose (bool) override;  ;  Public Member Functions inherited from TVirtualMonitoringWriter;  TVirtualMonitoringWriter ();  ;  TVirtualMonitoringWriter (const char *name, Double_t value);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:3200,Modifiability,inherit,inherited,3200,"ual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:4293,Modifiability,inherit,inheritance,4293,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:6292,Modifiability,inherit,inherits,6292,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:6409,Modifiability,inherit,inherits,6409,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:10256,Modifiability,inherit,inherited,10256," Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Member Functions;  RTreeDrawMonitoring (const RTreeDrawMonitoring &)=delete;  ; RTreeDrawMonitoring & operator= (const RTreeDrawMonitoring &)=delete;  . Private Attributes; long long fLastProgressSendTm {0};  ; Int_t fPeriod {100};  ; RTreeViewer & fViewer;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualMonitoringWriter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:10912,Modifiability,inherit,inherited,10912," Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualMonitoringWriter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protec",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:11140,Modifiability,inherit,inherited,11140," Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualMonitoringWriter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protec",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:11350,Modifiability,inherit,inherited,11350," Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualMonitoringWriter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protec",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:11853,Modifiability,inherit,inherited,11853," Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for ROOT::RTreeDrawMonitoring:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawMonitoring() [1/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; const RTreeDrawMonitoring & ; ). privatedelete . ◆ RTreeDrawMonitoring() [2/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; Int_t ; period, . RTreeViewer & ; viewer . ). inline . Definition at line 43 of file RTreeViewer.cxx. Member Function Documentation. ◆ operator=(). RTreeDrawMonitoring & ROOT::RTreeDrawMonitoring::operator= ; (; const RTreeDrawMonitoring & ; ). privatedelete",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:11952,Modifiability,inherit,inherited,11952," Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for ROOT::RTreeDrawMonitoring:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawMonitoring() [1/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; const RTreeDrawMonitoring & ; ). privatedelete . ◆ RTreeDrawMonitoring() [2/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; Int_t ; period, . RTreeViewer & ; viewer . ). inline . Definition at line 43 of file RTreeViewer.cxx. Member Function Documentation. ◆ operator=(). RTreeDrawMonitoring & ROOT::RTreeDrawMonitoring::operator= ; (; const RTreeDrawMonitoring & ; ). privatedelete",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:12157,Modifiability,inherit,inherited,12157,"har * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for ROOT::RTreeDrawMonitoring:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawMonitoring() [1/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; const RTreeDrawMonitoring & ; ). privatedelete . ◆ RTreeDrawMonitoring() [2/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; Int_t ; period, . RTreeViewer & ; viewer . ). inline . Definition at line 43 of file RTreeViewer.cxx. Member Function Documentation. ◆ operator=(). RTreeDrawMonitoring & ROOT::RTreeDrawMonitoring::operator= ; (; const RTreeDrawMonitoring & ; ). privatedelete . ◆ SendFileCloseEvent(). bool ROOT::RTreeDrawMonitoring::SendFileCloseEvent ; (; TFile * ; ). inlineoverridevirtual . Reimplemented from TVirtualMonitoringWriter.; Definition at line 49 of file RTreeViewer.cxx. ◆ SendFileOpenProgress().",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:12247,Modifiability,inherit,inherited,12247,"har * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for ROOT::RTreeDrawMonitoring:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawMonitoring() [1/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; const RTreeDrawMonitoring & ; ). privatedelete . ◆ RTreeDrawMonitoring() [2/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; Int_t ; period, . RTreeViewer & ; viewer . ). inline . Definition at line 43 of file RTreeViewer.cxx. Member Function Documentation. ◆ operator=(). RTreeDrawMonitoring & ROOT::RTreeDrawMonitoring::operator= ; (; const RTreeDrawMonitoring & ; ). privatedelete . ◆ SendFileCloseEvent(). bool ROOT::RTreeDrawMonitoring::SendFileCloseEvent ; (; TFile * ; ). inlineoverridevirtual . Reimplemented from TVirtualMonitoringWriter.; Definition at line 49 of file RTreeViewer.cxx. ◆ SendFileOpenProgress().",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:2440,Security,hash,hash,2440," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:1457,Deployability,update,update,1457," file RTreeViewer.hxx. Classes; struct  RBranchInfo;  ; struct  RConfig;  . Public Types; using PerformDrawCallback_t = std::function< void(const std::string &)>;  . Public Member Functions;  RTreeViewer (TTree *tree=nullptr);  constructor ;  ; virtual ~RTreeViewer ();  destructor ;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return address of web window used for tree viewer. ;  ; std::string GetWindowUrl (bool remote);  Return URL of web window used for tree viewer See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SetCallback (PerformDrawCallback_t func);  ; void SetShowHierarchy (bool on=true);  Configures default hierarchy browser visibility, only has effect before showing web window. ;  ; void SetTitle (const std::string &title);  ; void SetTree (TTree *tree);  assign new TTree to the viewer ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update viewer in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; bool SuggestBranch (const TBranch *branch);  Suggest to use branch in the gui Normally just assign as last edited expression. ;  ; bool SuggestExpression (const std::string &expr);  Suggest to use expression in the gui Normally just assign as last edited expression. ;  ; bool SuggestLeaf (const TLeaf *leaf);  Suggest to use leaf in the gui Normally just assign as last edited expression. ;  ; void Update ();  Update tree viewer in all web displays. ;  . Static Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;",MatchSource.WIKI,doc/master/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html
https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:2909,Deployability,configurat,configuration,2909," Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;  ; void SendCfg (unsigned connid);  Send data for initialize viewer. ;  ; void SendProgress (Double_t nevent=0.);  Send progress to the client. ;  ; void UpdateConfig ();  Update RConfig data. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  receive data from client ;  ; void WebWindowConnect (unsigned connid);  react on new connection ;  . Private Attributes; PerformDrawCallback_t fCallback;  ! callback invoked when tree draw performed ;  ; RConfig fCfg;  ! configuration, exchanged between client and server ;  ; std::string fLastSendProgress;  ! last send progress to client ;  ; bool fShowHierarchy {false};  ! show TTree hierarchy ;  ; std::unique_ptr< RTreeDrawInvokeTimer > fTimer;  ! timer to invoke tree draw ;  ; std::string fTitle;  ! title of tree viewer ;  ; TTree * fTree {nullptr};  ! TTree to show ;  ; std::shared_ptr< ROOT::RWebWindow > fWebWindow;  ! web window ;  . Friends; class RTreeDrawInvokeTimer;  ; class RTreeDrawMonitoring;  . #include <ROOT/RTreeViewer.hxx>; Member Typedef Documentation. ◆ PerformDrawCallback_t. using ROOT::RTreeViewer::PerformDrawCallback_t = std::function<void(const std::string &)>. Definition at line 41 of file RTreeViewer.hxx. Constructor & Destructor Documentation. ◆ RTreeViewer(). RTreeViewer::RTreeViewer ; (; TTree * ; tree = nullptr). constructor ; Definition at line 115 of file RTreeViewer.cxx. ◆ ~RTreeViewer(). RTreeViewer::~RTreeViewer ; (; ). virtual . destructor ; Definition at line 135 of file RTreeViewer.cxx. Member Function Documentation. ◆ AddBranches(). void RTreeViewer::AddBranches ; (; TObjArray * ; branches). private . Add branches ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html
https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:6464,Deployability,update,update,6464,"RTreeViewer::SendProgress ; (; Double_t ; nevent = 0.). private . Send progress to the client. ; Definition at line 470 of file RTreeViewer.cxx. ◆ SetCallback(). void ROOT::RTreeViewer::SetCallback ; (; PerformDrawCallback_t ; func). inline . Definition at line 73 of file RTreeViewer.hxx. ◆ SetShowHierarchy(). void ROOT::RTreeViewer::SetShowHierarchy ; (; bool ; on = true). inline . Configures default hierarchy browser visibility, only has effect before showing web window. ; Definition at line 76 of file RTreeViewer.hxx. ◆ SetTitle(). void ROOT::RTreeViewer::SetTitle ; (; const std::string & ; title). inline . Definition at line 58 of file RTreeViewer.hxx. ◆ SetTree(). void RTreeViewer::SetTree ; (; TTree * ; tree). assign new TTree to the viewer ; Definition at line 143 of file RTreeViewer.cxx. ◆ Show(). void RTreeViewer::Show ; (; const RWebDisplayArgs & ; args = """", . bool ; always_start_new_browser = false . ). Show or update viewer in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ; Parameters. always_start_new_browserconfigured, starts new window ; argsarguments to display . Definition at line 221 of file RTreeViewer.cxx. ◆ SuggestBranch(). bool RTreeViewer::SuggestBranch ; (; const TBranch * ; branch). Suggest to use branch in the gui Normally just assign as last edited expression. ; Definition at line 188 of file RTreeViewer.cxx. ◆ SuggestExpression(). bool RTreeViewer::SuggestExpression ; (; const std::string & ; expr). Suggest to use expression in the gui Normally just assign as last edited expression. ; Definition at line 204 of file RTreeViewer.cxx. ◆ SuggestLeaf(). bool RTreeViewer::SuggestLeaf ; (; const TLeaf * ; leaf). Suggest to use leaf in the gui Normally just assign as last edited expression. ; Definition at line 164 of file RTreeViewer.cxx. ◆ Update(). void RTreeViewer::Update ; (; ). Update tree viewer in all web displays. ; Definition at line 256 of file RTreeViewer.cxx. ◆",MatchSource.WIKI,doc/master/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html
https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:8549,Deployability,configurat,configuration,8549,"date RConfig data. ; Definition at line 379 of file RTreeViewer.cxx. ◆ WebWindowCallback(). void RTreeViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). private . receive data from client ; Definition at line 283 of file RTreeViewer.cxx. ◆ WebWindowConnect(). void RTreeViewer::WebWindowConnect ; (; unsigned ; connid). private . react on new connection ; Definition at line 275 of file RTreeViewer.cxx. Friends And Related Symbol Documentation. ◆ RTreeDrawInvokeTimer. friend class RTreeDrawInvokeTimer. friend . Definition at line 37 of file RTreeViewer.hxx. ◆ RTreeDrawMonitoring. friend class RTreeDrawMonitoring. friend . Definition at line 36 of file RTreeViewer.hxx. Member Data Documentation. ◆ fCallback. PerformDrawCallback_t ROOT::RTreeViewer::fCallback. private . ! callback invoked when tree draw performed ; Definition at line 94 of file RTreeViewer.hxx. ◆ fCfg. RConfig ROOT::RTreeViewer::fCfg. private . ! configuration, exchanged between client and server ; Definition at line 93 of file RTreeViewer.hxx. ◆ fLastSendProgress. std::string ROOT::RTreeViewer::fLastSendProgress. private . ! last send progress to client ; Definition at line 95 of file RTreeViewer.hxx. ◆ fShowHierarchy. bool ROOT::RTreeViewer::fShowHierarchy {false}. private . ! show TTree hierarchy ; Definition at line 92 of file RTreeViewer.hxx. ◆ fTimer. std::unique_ptr<RTreeDrawInvokeTimer> ROOT::RTreeViewer::fTimer. private . ! timer to invoke tree draw ; Definition at line 96 of file RTreeViewer.hxx. ◆ fTitle. std::string ROOT::RTreeViewer::fTitle. private . ! title of tree viewer ; Definition at line 90 of file RTreeViewer.hxx. ◆ fTree. TTree* ROOT::RTreeViewer::fTree {nullptr}. private . ! TTree to show ; Definition at line 89 of file RTreeViewer.hxx. ◆ fWebWindow. std::shared_ptr<ROOT::RWebWindow> ROOT::RTreeViewer::fWebWindow. private . ! web window ; Definition at line 91 of file RTreeViewer.hxx. Libraries for ROOT::RTreeViewer:. [legend]; The documentation for ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html
https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:2164,Modifiability,plugin,plugin,2164,"unc);  ; void SetShowHierarchy (bool on=true);  Configures default hierarchy browser visibility, only has effect before showing web window. ;  ; void SetTitle (const std::string &title);  ; void SetTree (TTree *tree);  assign new TTree to the viewer ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update viewer in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; bool SuggestBranch (const TBranch *branch);  Suggest to use branch in the gui Normally just assign as last edited expression. ;  ; bool SuggestExpression (const std::string &expr);  Suggest to use expression in the gui Normally just assign as last edited expression. ;  ; bool SuggestLeaf (const TLeaf *leaf);  Suggest to use leaf in the gui Normally just assign as last edited expression. ;  ; void Update ();  Update tree viewer in all web displays. ;  . Static Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;  ; void SendCfg (unsigned connid);  Send data for initialize viewer. ;  ; void SendProgress (Double_t nevent=0.);  Send progress to the client. ;  ; void UpdateConfig ();  Update RConfig data. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  receive data from client ;  ; void WebWindowConnect (unsigned connid);  react on new connection ;  . Private Attributes; PerformDrawCallback_t fCallback;  ! callback invoked when tree draw performed ;  ; RConfig fCfg;  ! configuration, exchanged between client and server ;  ; std::string fLastSendProgress;  ! last send progress to client ;  ; bool fShowHierarchy {false};  ! show TTree hierarchy ;  ; std::unique_ptr< RTree",MatchSource.WIKI,doc/master/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html
https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:2260,Modifiability,config,config,2260,"ect before showing web window. ;  ; void SetTitle (const std::string &title);  ; void SetTree (TTree *tree);  assign new TTree to the viewer ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update viewer in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; bool SuggestBranch (const TBranch *branch);  Suggest to use branch in the gui Normally just assign as last edited expression. ;  ; bool SuggestExpression (const std::string &expr);  Suggest to use expression in the gui Normally just assign as last edited expression. ;  ; bool SuggestLeaf (const TLeaf *leaf);  Suggest to use leaf in the gui Normally just assign as last edited expression. ;  ; void Update ();  Update tree viewer in all web displays. ;  . Static Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;  ; void SendCfg (unsigned connid);  Send data for initialize viewer. ;  ; void SendProgress (Double_t nevent=0.);  Send progress to the client. ;  ; void UpdateConfig ();  Update RConfig data. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  receive data from client ;  ; void WebWindowConnect (unsigned connid);  react on new connection ;  . Private Attributes; PerformDrawCallback_t fCallback;  ! callback invoked when tree draw performed ;  ; RConfig fCfg;  ! configuration, exchanged between client and server ;  ; std::string fLastSendProgress;  ! last send progress to client ;  ; bool fShowHierarchy {false};  ! show TTree hierarchy ;  ; std::unique_ptr< RTreeDrawInvokeTimer > fTimer;  ! timer to invoke tree draw ;  ; std::string fTitle;  ! title of tree viewer ;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html
https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:2909,Modifiability,config,configuration,2909," Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;  ; void SendCfg (unsigned connid);  Send data for initialize viewer. ;  ; void SendProgress (Double_t nevent=0.);  Send progress to the client. ;  ; void UpdateConfig ();  Update RConfig data. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  receive data from client ;  ; void WebWindowConnect (unsigned connid);  react on new connection ;  . Private Attributes; PerformDrawCallback_t fCallback;  ! callback invoked when tree draw performed ;  ; RConfig fCfg;  ! configuration, exchanged between client and server ;  ; std::string fLastSendProgress;  ! last send progress to client ;  ; bool fShowHierarchy {false};  ! show TTree hierarchy ;  ; std::unique_ptr< RTreeDrawInvokeTimer > fTimer;  ! timer to invoke tree draw ;  ; std::string fTitle;  ! title of tree viewer ;  ; TTree * fTree {nullptr};  ! TTree to show ;  ; std::shared_ptr< ROOT::RWebWindow > fWebWindow;  ! web window ;  . Friends; class RTreeDrawInvokeTimer;  ; class RTreeDrawMonitoring;  . #include <ROOT/RTreeViewer.hxx>; Member Typedef Documentation. ◆ PerformDrawCallback_t. using ROOT::RTreeViewer::PerformDrawCallback_t = std::function<void(const std::string &)>. Definition at line 41 of file RTreeViewer.hxx. Constructor & Destructor Documentation. ◆ RTreeViewer(). RTreeViewer::RTreeViewer ; (; TTree * ; tree = nullptr). constructor ; Definition at line 115 of file RTreeViewer.cxx. ◆ ~RTreeViewer(). RTreeViewer::~RTreeViewer ; (; ). virtual . destructor ; Definition at line 135 of file RTreeViewer.cxx. Member Function Documentation. ◆ AddBranches(). void RTreeViewer::AddBranches ; (; TObjArray * ; branches). private . Add branches ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html
https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:4065,Modifiability,config,config,4065,;  ! show TTree hierarchy ;  ; std::unique_ptr< RTreeDrawInvokeTimer > fTimer;  ! timer to invoke tree draw ;  ; std::string fTitle;  ! title of tree viewer ;  ; TTree * fTree {nullptr};  ! TTree to show ;  ; std::shared_ptr< ROOT::RWebWindow > fWebWindow;  ! web window ;  . Friends; class RTreeDrawInvokeTimer;  ; class RTreeDrawMonitoring;  . #include <ROOT/RTreeViewer.hxx>; Member Typedef Documentation. ◆ PerformDrawCallback_t. using ROOT::RTreeViewer::PerformDrawCallback_t = std::function<void(const std::string &)>. Definition at line 41 of file RTreeViewer.hxx. Constructor & Destructor Documentation. ◆ RTreeViewer(). RTreeViewer::RTreeViewer ; (; TTree * ; tree = nullptr). constructor ; Definition at line 115 of file RTreeViewer.cxx. ◆ ~RTreeViewer(). RTreeViewer::~RTreeViewer ; (; ). virtual . destructor ; Definition at line 135 of file RTreeViewer.cxx. Member Function Documentation. ◆ AddBranches(). void RTreeViewer::AddBranches ; (; TObjArray * ; branches). private . Add branches to config. ; Definition at line 328 of file RTreeViewer.cxx. ◆ FormatItemName(). std::string RTreeViewer::FormatItemName ; (; const std::string & ; name). private . Format item name used in draw expression. ; Definition at line 309 of file RTreeViewer.cxx. ◆ GetShowHierarchy(). bool ROOT::RTreeViewer::GetShowHierarchy ; (; ); const. inline . Returns default hierarchy browser visibility. ; Definition at line 79 of file RTreeViewer.hxx. ◆ GetTitle(). const std::string & ROOT::RTreeViewer::GetTitle ; (; ); const. inline . Definition at line 59 of file RTreeViewer.hxx. ◆ GetWindowAddr(). std::string RTreeViewer::GetWindowAddr ; (; ); const. Return address of web window used for tree viewer. ; Definition at line 239 of file RTreeViewer.cxx. ◆ GetWindowUrl(). std::string RTreeViewer::GetWindowUrl ; (; bool ; remote). Return URL of web window used for tree viewer See ROOT::RWebWindow::GetUrl docu for more details. ; Definition at line 248 of file RTreeViewer.cxx. ◆ InvokeTreeDraw(). void RT,MatchSource.WIKI,doc/master/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html
https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:5289,Modifiability,plugin,plugin,5289,"nition at line 309 of file RTreeViewer.cxx. ◆ GetShowHierarchy(). bool ROOT::RTreeViewer::GetShowHierarchy ; (; ); const. inline . Returns default hierarchy browser visibility. ; Definition at line 79 of file RTreeViewer.hxx. ◆ GetTitle(). const std::string & ROOT::RTreeViewer::GetTitle ; (; ); const. inline . Definition at line 59 of file RTreeViewer.hxx. ◆ GetWindowAddr(). std::string RTreeViewer::GetWindowAddr ; (; ); const. Return address of web window used for tree viewer. ; Definition at line 239 of file RTreeViewer.cxx. ◆ GetWindowUrl(). std::string RTreeViewer::GetWindowUrl ; (; bool ; remote). Return URL of web window used for tree viewer See ROOT::RWebWindow::GetUrl docu for more details. ; Definition at line 248 of file RTreeViewer.cxx. ◆ InvokeTreeDraw(). void RTreeViewer::InvokeTreeDraw ; (; ). private . Invoke tree drawing. ; Definition at line 400 of file RTreeViewer.cxx. ◆ NewViewer(). RTreeViewer * RTreeViewer::NewViewer ; (; TTree * ; t). static . Create new viewer Method used for plugin. ; Definition at line 502 of file RTreeViewer.cxx. ◆ SendCfg(). void RTreeViewer::SendCfg ; (; unsigned ; connid). private . Send data for initialize viewer. ; Definition at line 264 of file RTreeViewer.cxx. ◆ SendProgress(). void RTreeViewer::SendProgress ; (; Double_t ; nevent = 0.). private . Send progress to the client. ; Definition at line 470 of file RTreeViewer.cxx. ◆ SetCallback(). void ROOT::RTreeViewer::SetCallback ; (; PerformDrawCallback_t ; func). inline . Definition at line 73 of file RTreeViewer.hxx. ◆ SetShowHierarchy(). void ROOT::RTreeViewer::SetShowHierarchy ; (; bool ; on = true). inline . Configures default hierarchy browser visibility, only has effect before showing web window. ; Definition at line 76 of file RTreeViewer.hxx. ◆ SetTitle(). void ROOT::RTreeViewer::SetTitle ; (; const std::string & ; title). inline . Definition at line 58 of file RTreeViewer.hxx. ◆ SetTree(). void RTreeViewer::SetTree ; (; TTree * ; tree). assign new TTree to th",MatchSource.WIKI,doc/master/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html
https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:8549,Modifiability,config,configuration,8549,"date RConfig data. ; Definition at line 379 of file RTreeViewer.cxx. ◆ WebWindowCallback(). void RTreeViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). private . receive data from client ; Definition at line 283 of file RTreeViewer.cxx. ◆ WebWindowConnect(). void RTreeViewer::WebWindowConnect ; (; unsigned ; connid). private . react on new connection ; Definition at line 275 of file RTreeViewer.cxx. Friends And Related Symbol Documentation. ◆ RTreeDrawInvokeTimer. friend class RTreeDrawInvokeTimer. friend . Definition at line 37 of file RTreeViewer.hxx. ◆ RTreeDrawMonitoring. friend class RTreeDrawMonitoring. friend . Definition at line 36 of file RTreeViewer.hxx. Member Data Documentation. ◆ fCallback. PerformDrawCallback_t ROOT::RTreeViewer::fCallback. private . ! callback invoked when tree draw performed ; Definition at line 94 of file RTreeViewer.hxx. ◆ fCfg. RConfig ROOT::RTreeViewer::fCfg. private . ! configuration, exchanged between client and server ; Definition at line 93 of file RTreeViewer.hxx. ◆ fLastSendProgress. std::string ROOT::RTreeViewer::fLastSendProgress. private . ! last send progress to client ; Definition at line 95 of file RTreeViewer.hxx. ◆ fShowHierarchy. bool ROOT::RTreeViewer::fShowHierarchy {false}. private . ! show TTree hierarchy ; Definition at line 92 of file RTreeViewer.hxx. ◆ fTimer. std::unique_ptr<RTreeDrawInvokeTimer> ROOT::RTreeViewer::fTimer. private . ! timer to invoke tree draw ; Definition at line 96 of file RTreeViewer.hxx. ◆ fTitle. std::string ROOT::RTreeViewer::fTitle. private . ! title of tree viewer ; Definition at line 90 of file RTreeViewer.hxx. ◆ fTree. TTree* ROOT::RTreeViewer::fTree {nullptr}. private . ! TTree to show ; Definition at line 89 of file RTreeViewer.hxx. ◆ fWebWindow. std::shared_ptr<ROOT::RWebWindow> ROOT::RTreeViewer::fWebWindow. private . ! web window ; Definition at line 91 of file RTreeViewer.hxx. Libraries for ROOT::RTreeViewer:. [legend]; The documentation for ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html
https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:2877,Performance,perform,performed,2877," Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;  ; void SendCfg (unsigned connid);  Send data for initialize viewer. ;  ; void SendProgress (Double_t nevent=0.);  Send progress to the client. ;  ; void UpdateConfig ();  Update RConfig data. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  receive data from client ;  ; void WebWindowConnect (unsigned connid);  react on new connection ;  . Private Attributes; PerformDrawCallback_t fCallback;  ! callback invoked when tree draw performed ;  ; RConfig fCfg;  ! configuration, exchanged between client and server ;  ; std::string fLastSendProgress;  ! last send progress to client ;  ; bool fShowHierarchy {false};  ! show TTree hierarchy ;  ; std::unique_ptr< RTreeDrawInvokeTimer > fTimer;  ! timer to invoke tree draw ;  ; std::string fTitle;  ! title of tree viewer ;  ; TTree * fTree {nullptr};  ! TTree to show ;  ; std::shared_ptr< ROOT::RWebWindow > fWebWindow;  ! web window ;  . Friends; class RTreeDrawInvokeTimer;  ; class RTreeDrawMonitoring;  . #include <ROOT/RTreeViewer.hxx>; Member Typedef Documentation. ◆ PerformDrawCallback_t. using ROOT::RTreeViewer::PerformDrawCallback_t = std::function<void(const std::string &)>. Definition at line 41 of file RTreeViewer.hxx. Constructor & Destructor Documentation. ◆ RTreeViewer(). RTreeViewer::RTreeViewer ; (; TTree * ; tree = nullptr). constructor ; Definition at line 115 of file RTreeViewer.cxx. ◆ ~RTreeViewer(). RTreeViewer::~RTreeViewer ; (; ). virtual . destructor ; Definition at line 135 of file RTreeViewer.cxx. Member Function Documentation. ◆ AddBranches(). void RTreeViewer::AddBranches ; (; TObjArray * ; branches). private . Add branches ",MatchSource.WIKI,doc/master/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html
https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:8437,Performance,perform,performed,8437,"e viewer in all web displays. ; Definition at line 256 of file RTreeViewer.cxx. ◆ UpdateConfig(). void RTreeViewer::UpdateConfig ; (; ). private . Update RConfig data. ; Definition at line 379 of file RTreeViewer.cxx. ◆ WebWindowCallback(). void RTreeViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). private . receive data from client ; Definition at line 283 of file RTreeViewer.cxx. ◆ WebWindowConnect(). void RTreeViewer::WebWindowConnect ; (; unsigned ; connid). private . react on new connection ; Definition at line 275 of file RTreeViewer.cxx. Friends And Related Symbol Documentation. ◆ RTreeDrawInvokeTimer. friend class RTreeDrawInvokeTimer. friend . Definition at line 37 of file RTreeViewer.hxx. ◆ RTreeDrawMonitoring. friend class RTreeDrawMonitoring. friend . Definition at line 36 of file RTreeViewer.hxx. Member Data Documentation. ◆ fCallback. PerformDrawCallback_t ROOT::RTreeViewer::fCallback. private . ! callback invoked when tree draw performed ; Definition at line 94 of file RTreeViewer.hxx. ◆ fCfg. RConfig ROOT::RTreeViewer::fCfg. private . ! configuration, exchanged between client and server ; Definition at line 93 of file RTreeViewer.hxx. ◆ fLastSendProgress. std::string ROOT::RTreeViewer::fLastSendProgress. private . ! last send progress to client ; Definition at line 95 of file RTreeViewer.hxx. ◆ fShowHierarchy. bool ROOT::RTreeViewer::fShowHierarchy {false}. private . ! show TTree hierarchy ; Definition at line 92 of file RTreeViewer.hxx. ◆ fTimer. std::unique_ptr<RTreeDrawInvokeTimer> ROOT::RTreeViewer::fTimer. private . ! timer to invoke tree draw ; Definition at line 96 of file RTreeViewer.hxx. ◆ fTitle. std::string ROOT::RTreeViewer::fTitle. private . ! title of tree viewer ; Definition at line 90 of file RTreeViewer.hxx. ◆ fTree. TTree* ROOT::RTreeViewer::fTree {nullptr}. private . ! TTree to show ; Definition at line 89 of file RTreeViewer.hxx. ◆ fWebWindow. std::shared_ptr<ROOT::RWebWindow> ROOT::RTreeViewer::fW",MatchSource.WIKI,doc/master/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html
https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html:817,Modifiability,inherit,inherited,817,". ROOT: ROOT::RWebBrowserHandle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::RWebBrowserHandle Class Reference. ; Specialized handle to hold information about running browser process Used to correctly cleanup all processes and temporary directories. ; Definition at line 105 of file RWebDisplayHandle.cxx. Public Member Functions;  RWebBrowserHandle (const std::string &url, const std::string &tmpdir, const std::string &tmpfile, browser_process_id pid);  ;  RWebBrowserHandle (const std::string &url, const std::string &tmpdir, const std::string &tmpfile, const std::string &dump);  ;  ~RWebBrowserHandle () override;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Private Types; typedef pid_t browser_process_id;  . Private Attributes; bool fHasPid {false};  ; browser_process_id fPid;  ; std::string fTmpDir;  temporary directory to delete at the end ;  ; std::string fTmpFile;  temporary file to remove ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool Dis",MatchSource.WIKI,doc/master/classROOT_1_1RWebBrowserHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html
https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html:1598,Modifiability,inherit,inherited,1598,"t std::string &tmpfile, const std::string &dump);  ;  ~RWebBrowserHandle () override;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Private Types; typedef pid_t browser_process_id;  . Private Attributes; bool fHasPid {false};  ; browser_process_id fPid;  ; std::string fTmpDir;  temporary directory to delete at the end ;  ; std::string fTmpFile;  temporary file to remove ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in head",MatchSource.WIKI,doc/master/classROOT_1_1RWebBrowserHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html
https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html:1815,Modifiability,config,configured,1815,"t std::string &tmpfile, const std::string &dump);  ;  ~RWebBrowserHandle () override;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Private Types; typedef pid_t browser_process_id;  . Private Attributes; bool fHasPid {false};  ; browser_process_id fPid;  ; std::string fTmpDir;  temporary directory to delete at the end ;  ; std::string fTmpFile;  temporary file to remove ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in head",MatchSource.WIKI,doc/master/classROOT_1_1RWebBrowserHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html
https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html:2060,Modifiability,config,configured,2060,"td::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Private Types; typedef pid_t browser_process_id;  . Private Attributes; bool fHasPid {false};  ; browser_process_id fPid;  ; std::string fTmpDir;  temporary directory to delete at the end ;  ; std::string fTmpFile;  temporary file to remove ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functio",MatchSource.WIKI,doc/master/classROOT_1_1RWebBrowserHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html
https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html:3693,Modifiability,inherit,inherited,3693," ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::vector< std::string > &fnames, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static std::vector< std::string > ProduceImagesNames (const std::string &fname, unsigned nfiles=1);  Produce vector of file names for specified file pattern Depending from supported file forma. ;  ;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RWebBrowserHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ browser_process_id. typedef pid_t ROOT::RWebBrowserHandle::browser_process_id. private . Definition at line 110 of file RWebDisplayHandle.cxx. Constructor & Destructor Documentation. ◆ RWebBrowserHandle() [1/2]. ROOT::RWebBrowserHandle::RWebBrowserHandle ; (; const std::string & ; url, . const std::string & ; tmpdir, . const std::string & ; tmpfile, . const std::string & ; dump . ). inline . Definitio",MatchSource.WIKI,doc/master/classROOT_1_1RWebBrowserHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html
https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html:3805,Modifiability,config,configured,3805," ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::vector< std::string > &fnames, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static std::vector< std::string > ProduceImagesNames (const std::string &fname, unsigned nfiles=1);  Produce vector of file names for specified file pattern Depending from supported file forma. ;  ;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RWebBrowserHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ browser_process_id. typedef pid_t ROOT::RWebBrowserHandle::browser_process_id. private . Definition at line 110 of file RWebDisplayHandle.cxx. Constructor & Destructor Documentation. ◆ RWebBrowserHandle() [1/2]. ROOT::RWebBrowserHandle::RWebBrowserHandle ; (; const std::string & ; url, . const std::string & ; tmpdir, . const std::string & ; tmpfile, . const std::string & ; dump . ). inline . Definitio",MatchSource.WIKI,doc/master/classROOT_1_1RWebBrowserHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html
https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html:1844,Testability,test,test,1844,"t std::string &tmpfile, const std::string &dump);  ;  ~RWebBrowserHandle () override;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Private Types; typedef pid_t browser_process_id;  . Private Attributes; bool fHasPid {false};  ; browser_process_id fPid;  ; std::string fTmpDir;  temporary directory to delete at the end ;  ; std::string fTmpFile;  temporary file to remove ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in head",MatchSource.WIKI,doc/master/classROOT_1_1RWebBrowserHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html
https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html:1132,Modifiability,inherit,inherited,1132,"Private Member Functions |; Private Attributes |; List of all members ; ROOT::RWebBrowserImp Class Reference. . Definition at line 22 of file RWebBrowserImp.hxx. Public Member Functions;  RWebBrowserImp (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with x,y, width and height parameters. ;  ;  RWebBrowserImp (TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with width and height parameters. ;  ;  RWebBrowserImp (TBrowser *b=nullptr);  Default constructor. ;  ; virtual ~RWebBrowserImp ();  Constructor with width and height parameters. ;  ; void BrowseObj (TObject *) final;  Browse specified object. ;  ; void Iconify () final;  Iconify browser. ;  ; Bool_t IsWeb () const final;  ; void Refresh (Bool_t=kFALSE) final;  Refresh browser. ;  ; void Show () final;  Show browser. ;  ;  Public Member Functions inherited from TBrowserImp;  TBrowserImp (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser x, y, width and height. ;  ;  TBrowserImp (TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser width and height. ;  ;  TBrowserImp (TBrowser *b=nullptr);  Default constructor. ;  ; virtual ~TBrowserImp ()=default;  ; virtual void Add (TObject *, const char *, Int_t);  ; virtual void AddCheckBox (TObject *, Bool_t=kFALSE);  ; TBrowser * Browser () const;  ; virtual void CheckObjectItem (TObject *, Bool_t=kFALSE);  ; virtual void CloseTabs ();  ; virtual Longptr_t ExecPlugin (const char *, const char *, const char *, Int_t, Int_t);  ; virtual void ExecuteDefaultAction (TObject *);  ; virtual TBrowser * GetBrowser () const;  ; virtual Option_t * GetDrawOption () const;  ; virtual TGMainFrame * GetMainFrame () const;  ; virtual TClass * IsA () const;  ; virtual void RecursiveRemove (TObject *);  ; virtual void RemoveCheckBox (TObject *);  ; virtual vo",MatchSource.WIKI,doc/master/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html:2747,Modifiability,plugin,plugin,2747,"x (TObject *, Bool_t=kFALSE);  ; TBrowser * Browser () const;  ; virtual void CheckObjectItem (TObject *, Bool_t=kFALSE);  ; virtual void CloseTabs ();  ; virtual Longptr_t ExecPlugin (const char *, const char *, const char *, Int_t, Int_t);  ; virtual void ExecuteDefaultAction (TObject *);  ; virtual TBrowser * GetBrowser () const;  ; virtual Option_t * GetDrawOption () const;  ; virtual TGMainFrame * GetMainFrame () const;  ; virtual TClass * IsA () const;  ; virtual void RecursiveRemove (TObject *);  ; virtual void RemoveCheckBox (TObject *);  ; virtual void SetBrowser (TBrowser *b);  ; virtual void SetDrawOption (Option_t *="""");  ; virtual void SetStatusText (const char *, Int_t);  ; virtual void StartEmbedding (Int_t, Int_t);  ; virtual void StopEmbedding (const char *);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TBrowserImp * NewBrowser (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ; static TBrowserImp * NewBrowser (TBrowser *b=nullptr, const char *title=""ROOT Browser"", UInt_t width=800, UInt_t height=500, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ;  Static Public Member Functions inherited from TBrowserImp; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void ShowWarning ();  Show warning that RBrowser will be shown. ;  . Private Attributes; Int_t fHeight {0};  window coordinates ;  ; std::shared_ptr< RBrowser > fWebBrowser;  actual browser used ;  ; Int_t fWidth {0};  ; Int_t fX {-1};  ; Int_t fY {-1};  . Additional Inherited Members;  Protected Member Functions inherited from TBrowserImp;  TBrowserImp (const TBrowserImp &)=delete;  ; TBrowserImp & operator= (const TBrowserImp &br)=delete",MatchSource.WIKI,doc/master/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html:2949,Modifiability,plugin,plugin,2949," *, const char *, Int_t, Int_t);  ; virtual void ExecuteDefaultAction (TObject *);  ; virtual TBrowser * GetBrowser () const;  ; virtual Option_t * GetDrawOption () const;  ; virtual TGMainFrame * GetMainFrame () const;  ; virtual TClass * IsA () const;  ; virtual void RecursiveRemove (TObject *);  ; virtual void RemoveCheckBox (TObject *);  ; virtual void SetBrowser (TBrowser *b);  ; virtual void SetDrawOption (Option_t *="""");  ; virtual void SetStatusText (const char *, Int_t);  ; virtual void StartEmbedding (Int_t, Int_t);  ; virtual void StopEmbedding (const char *);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TBrowserImp * NewBrowser (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ; static TBrowserImp * NewBrowser (TBrowser *b=nullptr, const char *title=""ROOT Browser"", UInt_t width=800, UInt_t height=500, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ;  Static Public Member Functions inherited from TBrowserImp; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void ShowWarning ();  Show warning that RBrowser will be shown. ;  . Private Attributes; Int_t fHeight {0};  window coordinates ;  ; std::shared_ptr< RBrowser > fWebBrowser;  actual browser used ;  ; Int_t fWidth {0};  ; Int_t fX {-1};  ; Int_t fY {-1};  . Additional Inherited Members;  Protected Member Functions inherited from TBrowserImp;  TBrowserImp (const TBrowserImp &)=delete;  ; TBrowserImp & operator= (const TBrowserImp &br)=delete;  ;  Protected Attributes inherited from TBrowserImp; TBrowser * fBrowser {nullptr};  TBrowser associated with this implementation. ;  ; Bool_t fShowCycles {kFALSE};  Show object cycle numbers in browser. ;  ",MatchSource.WIKI,doc/master/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html:2994,Modifiability,inherit,inherited,2994,") const;  ; virtual TClass * IsA () const;  ; virtual void RecursiveRemove (TObject *);  ; virtual void RemoveCheckBox (TObject *);  ; virtual void SetBrowser (TBrowser *b);  ; virtual void SetDrawOption (Option_t *="""");  ; virtual void SetStatusText (const char *, Int_t);  ; virtual void StartEmbedding (Int_t, Int_t);  ; virtual void StopEmbedding (const char *);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TBrowserImp * NewBrowser (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ; static TBrowserImp * NewBrowser (TBrowser *b=nullptr, const char *title=""ROOT Browser"", UInt_t width=800, UInt_t height=500, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ;  Static Public Member Functions inherited from TBrowserImp; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void ShowWarning ();  Show warning that RBrowser will be shown. ;  . Private Attributes; Int_t fHeight {0};  window coordinates ;  ; std::shared_ptr< RBrowser > fWebBrowser;  actual browser used ;  ; Int_t fWidth {0};  ; Int_t fX {-1};  ; Int_t fY {-1};  . Additional Inherited Members;  Protected Member Functions inherited from TBrowserImp;  TBrowserImp (const TBrowserImp &)=delete;  ; TBrowserImp & operator= (const TBrowserImp &br)=delete;  ;  Protected Attributes inherited from TBrowserImp; TBrowser * fBrowser {nullptr};  TBrowser associated with this implementation. ;  ; Bool_t fShowCycles {kFALSE};  Show object cycle numbers in browser. ;  . #include <ROOT/RWebBrowserImp.hxx>. Inheritance diagram for ROOT::RWebBrowserImp:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Docum",MatchSource.WIKI,doc/master/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html:3518,Modifiability,inherit,inherited,3518,"onst char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ; static TBrowserImp * NewBrowser (TBrowser *b=nullptr, const char *title=""ROOT Browser"", UInt_t width=800, UInt_t height=500, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ;  Static Public Member Functions inherited from TBrowserImp; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void ShowWarning ();  Show warning that RBrowser will be shown. ;  . Private Attributes; Int_t fHeight {0};  window coordinates ;  ; std::shared_ptr< RBrowser > fWebBrowser;  actual browser used ;  ; Int_t fWidth {0};  ; Int_t fX {-1};  ; Int_t fY {-1};  . Additional Inherited Members;  Protected Member Functions inherited from TBrowserImp;  TBrowserImp (const TBrowserImp &)=delete;  ; TBrowserImp & operator= (const TBrowserImp &br)=delete;  ;  Protected Attributes inherited from TBrowserImp; TBrowser * fBrowser {nullptr};  TBrowser associated with this implementation. ;  ; Bool_t fShowCycles {kFALSE};  Show object cycle numbers in browser. ;  . #include <ROOT/RWebBrowserImp.hxx>. Inheritance diagram for ROOT::RWebBrowserImp:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebBrowserImp() [1/3]. RWebBrowserImp::RWebBrowserImp ; (; TBrowser * ; b = nullptr). Default constructor. ; Definition at line 25 of file RWebBrowserImp.cxx. ◆ RWebBrowserImp() [2/3]. RWebBrowserImp::RWebBrowserImp ; (; TBrowser * ; b, . const char * ; title, . UInt_t ; width, . UInt_t ; height, . Option_t * ; opt = """" . ). Constructor with width and height parameters. ; Definition at line 36 of file RWebBrowserImp.cxx. ◆ RWebBrowserImp() [3/3]. RWebBrowserImp::RWebBrowserImp ; (; TBrowser * ; b, . const char * ; title, . Int_t ; x, ",MatchSource.WIKI,doc/master/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html:3673,Modifiability,inherit,inherited,3673,"onst char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ; static TBrowserImp * NewBrowser (TBrowser *b=nullptr, const char *title=""ROOT Browser"", UInt_t width=800, UInt_t height=500, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ;  Static Public Member Functions inherited from TBrowserImp; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void ShowWarning ();  Show warning that RBrowser will be shown. ;  . Private Attributes; Int_t fHeight {0};  window coordinates ;  ; std::shared_ptr< RBrowser > fWebBrowser;  actual browser used ;  ; Int_t fWidth {0};  ; Int_t fX {-1};  ; Int_t fY {-1};  . Additional Inherited Members;  Protected Member Functions inherited from TBrowserImp;  TBrowserImp (const TBrowserImp &)=delete;  ; TBrowserImp & operator= (const TBrowserImp &br)=delete;  ;  Protected Attributes inherited from TBrowserImp; TBrowser * fBrowser {nullptr};  TBrowser associated with this implementation. ;  ; Bool_t fShowCycles {kFALSE};  Show object cycle numbers in browser. ;  . #include <ROOT/RWebBrowserImp.hxx>. Inheritance diagram for ROOT::RWebBrowserImp:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebBrowserImp() [1/3]. RWebBrowserImp::RWebBrowserImp ; (; TBrowser * ; b = nullptr). Default constructor. ; Definition at line 25 of file RWebBrowserImp.cxx. ◆ RWebBrowserImp() [2/3]. RWebBrowserImp::RWebBrowserImp ; (; TBrowser * ; b, . const char * ; title, . UInt_t ; width, . UInt_t ; height, . Option_t * ; opt = """" . ). Constructor with width and height parameters. ; Definition at line 36 of file RWebBrowserImp.cxx. ◆ RWebBrowserImp() [3/3]. RWebBrowserImp::RWebBrowserImp ; (; TBrowser * ; b, . const char * ; title, . Int_t ; x, ",MatchSource.WIKI,doc/master/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html:5781,Modifiability,plugin,plugin,5781,"at line 49 of file RWebBrowserImp.cxx. ◆ ~RWebBrowserImp(). RWebBrowserImp::~RWebBrowserImp ; (; ). virtual . Constructor with width and height parameters. ; Definition at line 64 of file RWebBrowserImp.cxx. Member Function Documentation. ◆ BrowseObj(). void RWebBrowserImp::BrowseObj ; (; TObject * ; obj). finalvirtual . Browse specified object. ; Reimplemented from TBrowserImp.; Definition at line 110 of file RWebBrowserImp.cxx. ◆ Iconify(). void RWebBrowserImp::Iconify ; (; ). finalvirtual . Iconify browser. ; Reimplemented from TBrowserImp.; Definition at line 87 of file RWebBrowserImp.cxx. ◆ IsWeb(). Bool_t ROOT::RWebBrowserImp::IsWeb ; (; ); const. inlinefinalvirtual . Reimplemented from TBrowserImp.; Definition at line 39 of file RWebBrowserImp.hxx. ◆ NewBrowser() [1/2]. TBrowserImp * RWebBrowserImp::NewBrowser ; (; TBrowser * ; b, . const char * ; title, . Int_t ; x, . Int_t ; y, . UInt_t ; width, . UInt_t ; height, . Option_t * ; opt = """" . ). static . Factory method to create RWebBrowserImp via plugin. ; Definition at line 129 of file RWebBrowserImp.cxx. ◆ NewBrowser() [2/2]. TBrowserImp * RWebBrowserImp::NewBrowser ; (; TBrowser * ; b = nullptr, . const char * ; title = ""ROOT Browser"", . UInt_t ; width = 800, . UInt_t ; height = 500, . Option_t * ; opt = """" . ). static . Factory method to create RWebBrowserImp via plugin. ; Definition at line 121 of file RWebBrowserImp.cxx. ◆ Refresh(). void RWebBrowserImp::Refresh ; (; Bool_t ; = kFALSE). finalvirtual . Refresh browser. ; Reimplemented from TBrowserImp.; Definition at line 94 of file RWebBrowserImp.cxx. ◆ Show(). void RWebBrowserImp::Show ; (; ). finalvirtual . Show browser. ; Reimplemented from TBrowserImp.; Definition at line 101 of file RWebBrowserImp.cxx. ◆ ShowWarning(). void RWebBrowserImp::ShowWarning ; (; ). private . Show warning that RBrowser will be shown. ; Definition at line 71 of file RWebBrowserImp.cxx. Member Data Documentation. ◆ fHeight. Int_t ROOT::RWebBrowserImp::fHeight {0}. private .",MatchSource.WIKI,doc/master/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html:6108,Modifiability,plugin,plugin,6108,"se specified object. ; Reimplemented from TBrowserImp.; Definition at line 110 of file RWebBrowserImp.cxx. ◆ Iconify(). void RWebBrowserImp::Iconify ; (; ). finalvirtual . Iconify browser. ; Reimplemented from TBrowserImp.; Definition at line 87 of file RWebBrowserImp.cxx. ◆ IsWeb(). Bool_t ROOT::RWebBrowserImp::IsWeb ; (; ); const. inlinefinalvirtual . Reimplemented from TBrowserImp.; Definition at line 39 of file RWebBrowserImp.hxx. ◆ NewBrowser() [1/2]. TBrowserImp * RWebBrowserImp::NewBrowser ; (; TBrowser * ; b, . const char * ; title, . Int_t ; x, . Int_t ; y, . UInt_t ; width, . UInt_t ; height, . Option_t * ; opt = """" . ). static . Factory method to create RWebBrowserImp via plugin. ; Definition at line 129 of file RWebBrowserImp.cxx. ◆ NewBrowser() [2/2]. TBrowserImp * RWebBrowserImp::NewBrowser ; (; TBrowser * ; b = nullptr, . const char * ; title = ""ROOT Browser"", . UInt_t ; width = 800, . UInt_t ; height = 500, . Option_t * ; opt = """" . ). static . Factory method to create RWebBrowserImp via plugin. ; Definition at line 121 of file RWebBrowserImp.cxx. ◆ Refresh(). void RWebBrowserImp::Refresh ; (; Bool_t ; = kFALSE). finalvirtual . Refresh browser. ; Reimplemented from TBrowserImp.; Definition at line 94 of file RWebBrowserImp.cxx. ◆ Show(). void RWebBrowserImp::Show ; (; ). finalvirtual . Show browser. ; Reimplemented from TBrowserImp.; Definition at line 101 of file RWebBrowserImp.cxx. ◆ ShowWarning(). void RWebBrowserImp::ShowWarning ; (; ). private . Show warning that RBrowser will be shown. ; Definition at line 71 of file RWebBrowserImp.cxx. Member Data Documentation. ◆ fHeight. Int_t ROOT::RWebBrowserImp::fHeight {0}. private . window coordinates ; Definition at line 25 of file RWebBrowserImp.hxx. ◆ fWebBrowser. std::shared_ptr<RBrowser> ROOT::RWebBrowserImp::fWebBrowser. private . actual browser used ; Definition at line 24 of file RWebBrowserImp.hxx. ◆ fWidth. Int_t ROOT::RWebBrowserImp::fWidth {0}. private . Definition at line 25 of file RWebBro",MatchSource.WIKI,doc/master/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html:1339,Modifiability,config,configured,1339,"splayArgs Class ReferenceWeb Display. ; Holds different arguments for starting browser with RWebDisplayHandle::Display() method. ; Definition at line 33 of file RWebDisplayArgs.hxx. Public Types; enum  EBrowserKind { ;   kChrome; , kEdge; , kSafari; , kFirefox; , ;   kNative; , kCEF; , kQt5; , kQt6; , ;   kLocal; , kDefault; , kServer; , kEmbedded; , ;   kOff; , kOn; , kCustom. };  . Public Member Functions;  RWebDisplayArgs ();  Default constructor. ;  ;  RWebDisplayArgs (const char *browser);  Constructor. ;  ;  RWebDisplayArgs (const std::string &browser);  Constructor. ;  ;  RWebDisplayArgs (int width, int height, int x=-1, int y=-1, const std::string &browser="""");  Constructor. ;  ;  RWebDisplayArgs (std::shared_ptr< RWebWindow > master, unsigned conndid=0, int channel=-1);  Constructor. ;  ; virtual ~RWebDisplayArgs ();  Destructor. ;  ; void AppendUrlOpt (const std::string &opt);  append extra url options, add ""&"" as separator if required ;  ; EBrowserKind GetBrowserKind () const;  returns configured browser kind, see EBrowserKind for supported values ;  ; std::string GetBrowserName () const;  Returns configured browser name. ;  ; std::string GetCustomExec () const;  returns custom executable to start web browser ;  ; void * GetDriverData () const;  [internal] returns web-driver data, used to start window ;  ; const std::string & GetExtraArgs () const;  get extra command line arguments for starting web browser command ;  ; std::string GetFullUrl () const;  returns window url with append options ;  ; int GetHeight () const;  returns preferable web window height ;  ; THttpServer * GetHttpServer () const;  returns http server instance, used for window display ;  ; const std::string & GetPageContent () const;  returns window url ;  ; const std::string & GetRedirectOutput () const;  get file name to which web browser output should be redirected ;  ; const std::string & GetUrl () const;  returns window url ;  ; const std::string & GetUrlOpt () const;  returns windo",MatchSource.WIKI,doc/master/classROOT_1_1RWebDisplayArgs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html
https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html:1453,Modifiability,config,configured,1453,"splayArgs Class ReferenceWeb Display. ; Holds different arguments for starting browser with RWebDisplayHandle::Display() method. ; Definition at line 33 of file RWebDisplayArgs.hxx. Public Types; enum  EBrowserKind { ;   kChrome; , kEdge; , kSafari; , kFirefox; , ;   kNative; , kCEF; , kQt5; , kQt6; , ;   kLocal; , kDefault; , kServer; , kEmbedded; , ;   kOff; , kOn; , kCustom. };  . Public Member Functions;  RWebDisplayArgs ();  Default constructor. ;  ;  RWebDisplayArgs (const char *browser);  Constructor. ;  ;  RWebDisplayArgs (const std::string &browser);  Constructor. ;  ;  RWebDisplayArgs (int width, int height, int x=-1, int y=-1, const std::string &browser="""");  Constructor. ;  ;  RWebDisplayArgs (std::shared_ptr< RWebWindow > master, unsigned conndid=0, int channel=-1);  Constructor. ;  ; virtual ~RWebDisplayArgs ();  Destructor. ;  ; void AppendUrlOpt (const std::string &opt);  append extra url options, add ""&"" as separator if required ;  ; EBrowserKind GetBrowserKind () const;  returns configured browser kind, see EBrowserKind for supported values ;  ; std::string GetBrowserName () const;  Returns configured browser name. ;  ; std::string GetCustomExec () const;  returns custom executable to start web browser ;  ; void * GetDriverData () const;  [internal] returns web-driver data, used to start window ;  ; const std::string & GetExtraArgs () const;  get extra command line arguments for starting web browser command ;  ; std::string GetFullUrl () const;  returns window url with append options ;  ; int GetHeight () const;  returns preferable web window height ;  ; THttpServer * GetHttpServer () const;  returns http server instance, used for window display ;  ; const std::string & GetPageContent () const;  returns window url ;  ; const std::string & GetRedirectOutput () const;  get file name to which web browser output should be redirected ;  ; const std::string & GetUrl () const;  returns window url ;  ; const std::string & GetUrlOpt () const;  returns windo",MatchSource.WIKI,doc/master/classROOT_1_1RWebDisplayArgs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html
https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html:8582,Modifiability,config,configured,8582,"ded Framework - local display with CEF libs. . kQt5 Qt5 QWebEngine libraries - Chromium code packed in qt5. . kQt6 Qt6 QWebEngine libraries - Chromium code packed in qt6. . kLocal either CEF or Qt5 - both runs on local display without real http server . kDefault default system web browser, can not be used in batch mode . kServer indicates that ROOT runs as server and just printouts window URL, browser should be started by the user . kEmbedded window will be embedded into other, no extra browser need to be started . kOff disable web display, do not start any browser . kOn web display enable, first try use embed displays like Qt or CEF, then native browsers and at the end default system browser . kCustom custom web browser, execution string should be provided . Definition at line 38 of file RWebDisplayArgs.hxx. Constructor & Destructor Documentation. ◆ RWebDisplayArgs() [1/5]. RWebDisplayArgs::RWebDisplayArgs ; (; ). Default constructor. ; Browser kind configured from gROOT->GetWebDisplay() ; Definition at line 42 of file RWebDisplayArgs.cxx. ◆ RWebDisplayArgs() [2/5]. RWebDisplayArgs::RWebDisplayArgs ; (; const std::string & ; browser). Constructor. ; Browser kind specified as std::string. See SetBrowserKind method for description of allowed parameters ; Definition at line 52 of file RWebDisplayArgs.cxx. ◆ RWebDisplayArgs() [3/5]. RWebDisplayArgs::RWebDisplayArgs ; (; const char * ; browser). Constructor. ; Browser kind specified as const char *. See SetBrowserKind method for description of allowed parameters ; Definition at line 62 of file RWebDisplayArgs.cxx. ◆ RWebDisplayArgs() [4/5]. RWebDisplayArgs::RWebDisplayArgs ; (; int ; width, . int ; height, . int ; x = -1, . int ; y = -1, . const std::string & ; browser = """" . ). Constructor. ; Let specify window width and height ; Definition at line 71 of file RWebDisplayArgs.cxx. ◆ RWebDisplayArgs() [5/5]. RWebDisplayArgs::RWebDisplayArgs ; (; std::shared_ptr< RWebWindow > ; master, . unsigned ; conndid = 0, . int ; cha",MatchSource.WIKI,doc/master/classROOT_1_1RWebDisplayArgs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html
https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html:10346,Modifiability,config,configured,10346,"y window width and height ; Definition at line 71 of file RWebDisplayArgs.cxx. ◆ RWebDisplayArgs() [5/5]. RWebDisplayArgs::RWebDisplayArgs ; (; std::shared_ptr< RWebWindow > ; master, . unsigned ; conndid = 0, . int ; channel = -1 . ). Constructor. ; Let specify master window and channel (if reserved already) ; Definition at line 82 of file RWebDisplayArgs.cxx. ◆ ~RWebDisplayArgs(). RWebDisplayArgs::~RWebDisplayArgs ; (; ). virtualdefault . Destructor. ; Must be defined in source code to correctly call RWebWindow destructor . Member Function Documentation. ◆ AppendUrlOpt(). void RWebDisplayArgs::AppendUrlOpt ; (; const std::string & ; opt). append extra url options, add ""&"" as separator if required ; Append string to url options.; Add ""&"" as separator if any options already exists ; Definition at line 292 of file RWebDisplayArgs.cxx. ◆ GetBrowserKind(). EBrowserKind ROOT::RWebDisplayArgs::GetBrowserKind ; (; ); const. inline . returns configured browser kind, see EBrowserKind for supported values ; Definition at line 99 of file RWebDisplayArgs.hxx. ◆ GetBrowserName(). std::string RWebDisplayArgs::GetBrowserName ; (; ); const. Returns configured browser name. ; Definition at line 252 of file RWebDisplayArgs.cxx. ◆ GetCustomExec(). std::string RWebDisplayArgs::GetCustomExec ; (; ); const. returns custom executable to start web browser ; Returns custom executable to start web browser. ; Definition at line 337 of file RWebDisplayArgs.cxx. ◆ GetDriverData(). void * ROOT::RWebDisplayArgs::GetDriverData ; (; ); const. inline . [internal] returns web-driver data, used to start window ; Definition at line 215 of file RWebDisplayArgs.hxx. ◆ GetExtraArgs(). const std::string & ROOT::RWebDisplayArgs::GetExtraArgs ; (; ); const. inline . get extra command line arguments for starting web browser command ; Definition at line 195 of file RWebDisplayArgs.hxx. ◆ GetFullUrl(). std::string RWebDisplayArgs::GetFullUrl ; (; ); const. returns window url with append options ; Returns full ",MatchSource.WIKI,doc/master/classROOT_1_1RWebDisplayArgs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html
https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html:10549,Modifiability,config,configured,10549,"< RWebWindow > ; master, . unsigned ; conndid = 0, . int ; channel = -1 . ). Constructor. ; Let specify master window and channel (if reserved already) ; Definition at line 82 of file RWebDisplayArgs.cxx. ◆ ~RWebDisplayArgs(). RWebDisplayArgs::~RWebDisplayArgs ; (; ). virtualdefault . Destructor. ; Must be defined in source code to correctly call RWebWindow destructor . Member Function Documentation. ◆ AppendUrlOpt(). void RWebDisplayArgs::AppendUrlOpt ; (; const std::string & ; opt). append extra url options, add ""&"" as separator if required ; Append string to url options.; Add ""&"" as separator if any options already exists ; Definition at line 292 of file RWebDisplayArgs.cxx. ◆ GetBrowserKind(). EBrowserKind ROOT::RWebDisplayArgs::GetBrowserKind ; (; ); const. inline . returns configured browser kind, see EBrowserKind for supported values ; Definition at line 99 of file RWebDisplayArgs.hxx. ◆ GetBrowserName(). std::string RWebDisplayArgs::GetBrowserName ; (; ); const. Returns configured browser name. ; Definition at line 252 of file RWebDisplayArgs.cxx. ◆ GetCustomExec(). std::string RWebDisplayArgs::GetCustomExec ; (; ); const. returns custom executable to start web browser ; Returns custom executable to start web browser. ; Definition at line 337 of file RWebDisplayArgs.cxx. ◆ GetDriverData(). void * ROOT::RWebDisplayArgs::GetDriverData ; (; ); const. inline . [internal] returns web-driver data, used to start window ; Definition at line 215 of file RWebDisplayArgs.hxx. ◆ GetExtraArgs(). const std::string & ROOT::RWebDisplayArgs::GetExtraArgs ; (; ); const. inline . get extra command line arguments for starting web browser command ; Definition at line 195 of file RWebDisplayArgs.hxx. ◆ GetFullUrl(). std::string RWebDisplayArgs::GetFullUrl ; (; ); const. returns window url with append options ; Returns full url, which is combined from URL and extra URL options.; Takes into account ""#"" symbol in url - options are inserted before that symbol ; Definition at line 306 ",MatchSource.WIKI,doc/master/classROOT_1_1RWebDisplayArgs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html
https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html:1427,Modifiability,config,configured,1427,"isplay. ; Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. ; Definition at line 25 of file RWebDisplayHandle.hxx. Classes; class  BrowserCreator;  ; class  ChromeCreator;  ; class  Creator;  !< page content More...;  ; class  FirefoxCreator;  ; class  SafariCreator;  . Public Member Functions;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Moz",MatchSource.WIKI,doc/master/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html:1672,Modifiability,config,configured,1672,"s  ChromeCreator;  ; class  Creator;  !< page content More...;  ; class  FirefoxCreator;  ; class  SafariCreator;  . Public Member Functions;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functio",MatchSource.WIKI,doc/master/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html:3377,Modifiability,config,configured,3377,"zilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::vector< std::string > &fnames, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static std::vector< std::string > ProduceImagesNames (const std::string &fname, unsigned nfiles=1);  Produce vector of file names for specified file pattern Depending from supported file forma. ;  . Static Protected Member Functions; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Private Attributes; std::string fContent;  !< URL used to launch display ;  ; std::string fUrl;  . #include <ROOT/RWebDisplayHandle.hxx>. Inheritance diagram for ROOT::RWebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebDisplayHandle(). ROOT::RWebDisplayHandle::RWebDisplayHandle ; (; const std::string & ; url). inline . constructor ; Definition at line 92 of file RWebDisplayHandle.hxx. ◆ ~RWebDisplayHandle(). virtual ROOT::RWebDisplayHandle::~RWebDisplayHandle ; (; ). virtualdefault . requ",MatchSource.WIKI,doc/master/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html:4665,Modifiability,config,configured,4665,"string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Private Attributes; std::string fContent;  !< URL used to launch display ;  ; std::string fUrl;  . #include <ROOT/RWebDisplayHandle.hxx>. Inheritance diagram for ROOT::RWebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebDisplayHandle(). ROOT::RWebDisplayHandle::RWebDisplayHandle ; (; const std::string & ; url). inline . constructor ; Definition at line 92 of file RWebDisplayHandle.hxx. ◆ ~RWebDisplayHandle(). virtual ROOT::RWebDisplayHandle::~RWebDisplayHandle ; (; ). virtualdefault . required virtual destructor for correct cleanup at the end . Member Function Documentation. ◆ CanProduceImages(). bool RWebDisplayHandle::CanProduceImages ; (; const std::string & ; browser = """"). static . Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ; Definition at line 925 of file RWebDisplayHandle.cxx. ◆ CheckIfCanProduceImages(). bool RWebDisplayHandle::CheckIfCanProduceImages ; (; RWebDisplayArgs & ; args). staticprotected . Checks if configured browser can be used for image production. ; Definition at line 877 of file RWebDisplayHandle.cxx. ◆ Display(). std::unique_ptr< RWebDisplayHandle > RWebDisplayHandle::Display ; (; const RWebDisplayArgs & ; args). static . Create web display. ; Parameters. args- defines where and how to display web window Returns RWebDisplayHandle, which holds information of running browser application Can be used fully independent from RWebWindow classes just to show any web page . Definition at line 757 of file RWebDisplayHandle.cxx. ◆ DisplayUrl(). bool RWebDisplayHandle::DisplayUrl ; (; const std::string & ; url). static . Display provided url in configured web browser. ; Parameters. url- specified URL address like",MatchSource.WIKI,doc/master/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html:4915,Modifiability,config,configured,4915,"is browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebDisplayHandle(). ROOT::RWebDisplayHandle::RWebDisplayHandle ; (; const std::string & ; url). inline . constructor ; Definition at line 92 of file RWebDisplayHandle.hxx. ◆ ~RWebDisplayHandle(). virtual ROOT::RWebDisplayHandle::~RWebDisplayHandle ; (; ). virtualdefault . required virtual destructor for correct cleanup at the end . Member Function Documentation. ◆ CanProduceImages(). bool RWebDisplayHandle::CanProduceImages ; (; const std::string & ; browser = """"). static . Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ; Definition at line 925 of file RWebDisplayHandle.cxx. ◆ CheckIfCanProduceImages(). bool RWebDisplayHandle::CheckIfCanProduceImages ; (; RWebDisplayArgs & ; args). staticprotected . Checks if configured browser can be used for image production. ; Definition at line 877 of file RWebDisplayHandle.cxx. ◆ Display(). std::unique_ptr< RWebDisplayHandle > RWebDisplayHandle::Display ; (; const RWebDisplayArgs & ; args). static . Create web display. ; Parameters. args- defines where and how to display web window Returns RWebDisplayHandle, which holds information of running browser application Can be used fully independent from RWebWindow classes just to show any web page . Definition at line 757 of file RWebDisplayHandle.cxx. ◆ DisplayUrl(). bool RWebDisplayHandle::DisplayUrl ; (; const std::string & ; url). static . Display provided url in configured web browser. ; Parameters. url- specified URL address like https://root.cern Browser can specified when starting root --web=firefox Returns true when browser started It is convenience method, equivalent to: RWebDisplayArgs args;; args.SetUrl(url);; args.SetStandalone(false);; auto handle = RWebDisplayHandle::Display(args);; ROOT::RWebDisplayArgsHolds diffe",MatchSource.WIKI,doc/master/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html:5567,Modifiability,config,configured,5567," image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ; Definition at line 925 of file RWebDisplayHandle.cxx. ◆ CheckIfCanProduceImages(). bool RWebDisplayHandle::CheckIfCanProduceImages ; (; RWebDisplayArgs & ; args). staticprotected . Checks if configured browser can be used for image production. ; Definition at line 877 of file RWebDisplayHandle.cxx. ◆ Display(). std::unique_ptr< RWebDisplayHandle > RWebDisplayHandle::Display ; (; const RWebDisplayArgs & ; args). static . Create web display. ; Parameters. args- defines where and how to display web window Returns RWebDisplayHandle, which holds information of running browser application Can be used fully independent from RWebWindow classes just to show any web page . Definition at line 757 of file RWebDisplayHandle.cxx. ◆ DisplayUrl(). bool RWebDisplayHandle::DisplayUrl ; (; const std::string & ; url). static . Display provided url in configured web browser. ; Parameters. url- specified URL address like https://root.cern Browser can specified when starting root --web=firefox Returns true when browser started It is convenience method, equivalent to: RWebDisplayArgs args;; args.SetUrl(url);; args.SetStandalone(false);; auto handle = RWebDisplayHandle::Display(args);; ROOT::RWebDisplayArgsHolds different arguments for starting browser with RWebDisplayHandle::Display() method.Definition RWebDisplayArgs.hxx:33; ROOT::RWebDisplayArgs::SetStandalonevoid SetStandalone(bool on=true)Set standalone mode for running browser, default on When disabled, normal browser window (or just tab...Definition RWebDisplayArgs.hxx:144; ROOT::RWebDisplayArgs::SetUrlRWebDisplayArgs & SetUrl(const std::string &url)set window urlDefinition RWebDisplayArgs.hxx:128; ROOT::RWebDisplayHandle::Displaystatic std::unique_ptr< RWebDisplayHandle > Display(const RWebDisplayArgs &args)Create web display.Definition RWebDisplayHandle.cxx:757; . Definition a",MatchSource.WIKI,doc/master/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html:1456,Testability,test,test,1456,"isplay. ; Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. ; Definition at line 25 of file RWebDisplayHandle.hxx. Classes; class  BrowserCreator;  ; class  ChromeCreator;  ; class  Creator;  !< page content More...;  ; class  FirefoxCreator;  ; class  SafariCreator;  . Public Member Functions;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Moz",MatchSource.WIKI,doc/master/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html:4694,Testability,test,test,4694,"string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Private Attributes; std::string fContent;  !< URL used to launch display ;  ; std::string fUrl;  . #include <ROOT/RWebDisplayHandle.hxx>. Inheritance diagram for ROOT::RWebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebDisplayHandle(). ROOT::RWebDisplayHandle::RWebDisplayHandle ; (; const std::string & ; url). inline . constructor ; Definition at line 92 of file RWebDisplayHandle.hxx. ◆ ~RWebDisplayHandle(). virtual ROOT::RWebDisplayHandle::~RWebDisplayHandle ; (; ). virtualdefault . required virtual destructor for correct cleanup at the end . Member Function Documentation. ◆ CanProduceImages(). bool RWebDisplayHandle::CanProduceImages ; (; const std::string & ; browser = """"). static . Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ; Definition at line 925 of file RWebDisplayHandle.cxx. ◆ CheckIfCanProduceImages(). bool RWebDisplayHandle::CheckIfCanProduceImages ; (; RWebDisplayArgs & ; args). staticprotected . Checks if configured browser can be used for image production. ; Definition at line 877 of file RWebDisplayHandle.cxx. ◆ Display(). std::unique_ptr< RWebDisplayHandle > RWebDisplayHandle::Display ; (; const RWebDisplayArgs & ; args). static . Create web display. ; Parameters. args- defines where and how to display web window Returns RWebDisplayHandle, which holds information of running browser application Can be used fully independent from RWebWindow classes just to show any web page . Definition at line 757 of file RWebDisplayHandle.cxx. ◆ DisplayUrl(). bool RWebDisplayHandle::DisplayUrl ; (; const std::string & ; url). static . Display provided url in configured web browser. ; Parameters. url- specified URL address like",MatchSource.WIKI,doc/master/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:5328,Integrability,protocol,protocol,5328,"gured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specified time. ;  ; void Send (unsigned connid, const std::string &data);  Sends data to specified connection. ;  ; void SendBinary (unsigned connid, const void *data, std::size_t len);  Send binary data to specified connection. ;  ; void SendBinary (unsigned connid, std::string &&data);  Send binary data to specified connection. ;  ; _R__DEPRECATED_LATER(""Use GetUrl() to get valid connection URL"") std _R__DEPRECATED_LATER(""Use GetAddr() to get valid connection URL"") std void SetCallBacks (WebWindowConnectCallback_t conn, WebWindowDataCallback_t data, WebWindowConnectCallback_t disconn=null",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:5423,Integrability,protocol,protocol,5423," actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specified time. ;  ; void Send (unsigned connid, const std::string &data);  Sends data to specified connection. ;  ; void SendBinary (unsigned connid, const void *data, std::size_t len);  Send binary data to specified connection. ;  ; void SendBinary (unsigned connid, std::string &&data);  Send binary data to specified connection. ;  ; _R__DEPRECATED_LATER(""Use GetUrl() to get valid connection URL"") std _R__DEPRECATED_LATER(""Use GetAddr() to get valid connection URL"") std void SetCallBacks (WebWindowConnectCallback_t conn, WebWindowDataCallback_t data, WebWindowConnectCallback_t disconn=nullptr);  Set call-backs function for connect, data and disconnect events. ;  ; void SetClearOnClose (const std::shared_ptr< void > &handle=nullptr);  Set hand",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:9225,Integrability,inject,injected,9225,"h can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ;  ; unsigned Show (const RWebDisplayArgs &args="""");  Show window in specified location. ;  ; void StartThread ();  Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ;  ; void StopThread ();  Stop special thread. ;  ; void Sync ();  Special method to process all internal activity when window runs in separate thread. ;  ; void TerminateROOT ();  Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ;  ; void UseServerThreads ();  Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides proper locking and does not block. ;  ; int WaitFor (WebWindowWaitFunc_t check);  Waits until provided check function or lambdas retur",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:11424,Integrability,message,message,11424,"n or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  ; int WaitForTimed (WebWindowWaitFunc_t check, double duration);  Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  . Static Public Member Functions; static std::shared_ptr< RWebWindow > Create ();  Create new RWebWindow Using default RWebWindowsManager. ;  ; static bool EmbedFileDialog (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embedded() providing received string as second argument. ;  ; static bool IsFileDialogMessage (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ;  ; static unsigned ShowWindow (std::shared_ptr< RWebWindow > window, const RWebDisplayArgs &args="""");  Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ;  . Private Types; using ConnectionsList_t = std::vector< std::shared_ptr< WebConn > >;  ; enum  EQueueEntryKind { kind_None; , kind_Connect; , kind_Data; , kind_Disconnect; };  ; using timestamp_t = std::chrono::time_point< std::chrono::system_clock >;  . Private Member Functions; bool _CanTrustIn (std::shared_ptr< WebConn > &conn, ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:11503,Integrability,message,message,11503,"n or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  ; int WaitForTimed (WebWindowWaitFunc_t check, double duration);  Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  . Static Public Member Functions; static std::shared_ptr< RWebWindow > Create ();  Create new RWebWindow Using default RWebWindowsManager. ;  ; static bool EmbedFileDialog (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embedded() providing received string as second argument. ;  ; static bool IsFileDialogMessage (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ;  ; static unsigned ShowWindow (std::shared_ptr< RWebWindow > window, const RWebDisplayArgs &args="""");  Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ;  . Private Types; using ConnectionsList_t = std::vector< std::shared_ptr< WebConn > >;  ; enum  EQueueEntryKind { kind_None; , kind_Connect; , kind_Data; , kind_Disconnect; };  ; using timestamp_t = std::chrono::time_point< std::chrono::system_clock >;  . Private Member Functions; bool _CanTrustIn (std::shared_ptr< WebConn > &conn, ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:11681,Integrability,message,message,11681,"vided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  . Static Public Member Functions; static std::shared_ptr< RWebWindow > Create ();  Create new RWebWindow Using default RWebWindowsManager. ;  ; static bool EmbedFileDialog (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embedded() providing received string as second argument. ;  ; static bool IsFileDialogMessage (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ;  ; static unsigned ShowWindow (std::shared_ptr< RWebWindow > window, const RWebDisplayArgs &args="""");  Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ;  . Private Types; using ConnectionsList_t = std::vector< std::shared_ptr< WebConn > >;  ; enum  EQueueEntryKind { kind_None; , kind_Connect; , kind_Data; , kind_Disconnect; };  ; using timestamp_t = std::chrono::time_point< std::chrono::system_clock >;  . Private Member Functions; bool _CanTrustIn (std::shared_ptr< WebConn > &conn, const std::string &key, const std::string &ntry, bool remote, bool test_first_time);  Check if provided hash, ntry parameters from the connection request could be accepted. ;  ; std::string _MakeSendHeader (std::shared_ptr< WebConn > &conn",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:17263,Integrability,message,message,17263,"allArg &arg);  Processing of websockets call-backs, invoked from RWebWindowWSHandler Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data. ;  ; void ProvideQueueEntry (unsigned connid, EQueueEntryKind kind, std::string &&arg);  Provide data to user callback User callback must be executed in the window thread. ;  ; std::shared_ptr< WebConn > RemoveConnection (unsigned wsid);  Remove connection with given websocket id. ;  ; void RemoveEmbedWindow (unsigned connid, int channel);  Remove RWebWindow associated with the channelfEmbed. ;  ; void RemoveKey (const std::string &key);  Removes all connections with the key. ;  ; void RemoveMasterConnection (unsigned connid=0);  Remove master connection - if any. ;  ; void SubmitData (unsigned connid, bool txt, std::string &&data, int chid=1);  Internal method to send data. ;  . Static Private Member Functions; static std::string HMAC (const std::string &key, const std::string &sessionKey, const char *msg, int msglen);  Calculate HMAC checksum for provided key and message Key combained from connection key and session key. ;  ; static void SetStartDialogFunc (std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)>);  Configure func which has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex f",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:19786,Integrability,protocol,protocol,19786,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:19838,Integrability,protocol,protocol,19838,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:19936,Integrability,protocol,protocol,19936,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:20015,Integrability,protocol,protocol,20015,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:28104,Integrability,message,message,28104,"d_ptr< RWebWindow > RWebWindow::Create ; (; ). static . Create new RWebWindow Using default RWebWindowsManager. ; Definition at line 1925 of file RWebWindow.cxx. ◆ CreateWSHandler(). std::shared_ptr< RWebWindowWSHandler > RWebWindow::CreateWSHandler ; (; std::shared_ptr< RWebWindowsManager > ; mgr, . unsigned ; id, . double ; tmout . ). private . Assigns manager reference, window id and creates websocket handler, used for communication with the clients. ; Definition at line 152 of file RWebWindow.cxx. ◆ EmbedFileDialog(). bool RWebWindow::EmbedFileDialog ; (; const std::shared_ptr< RWebWindow > & ; window, . unsigned ; connid, . const std::string & ; args . ). static . Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embedded() providing received string as second argument. ; Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected ; Definition at line 2019 of file RWebWindow.cxx. ◆ FindConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::FindConnection ; (; unsigned ; wsid). private . Find connection with specified websocket id. ; Find connection with given websocket id. ; Definition at line 264 of file RWebWindow.cxx. ◆ FindHeadlessConnection(). unsigned RWebWindow::FindHeadlessConnection ; (; ). private . Returns connection id of window running in headless mode This can be special connection which may run picture production jobs in background Connection to that job may not be initialized yet If connection does not exists, returns 0. ; Definition at line 221 of file RWebWindow.cxx. ◆ GenerateKey(). std::string RWebWindow::GenerateKey ; (; ); const. private . Generate new unique key for the wind",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:28183,Integrability,message,message,28183,"d_ptr< RWebWindow > RWebWindow::Create ; (; ). static . Create new RWebWindow Using default RWebWindowsManager. ; Definition at line 1925 of file RWebWindow.cxx. ◆ CreateWSHandler(). std::shared_ptr< RWebWindowWSHandler > RWebWindow::CreateWSHandler ; (; std::shared_ptr< RWebWindowsManager > ; mgr, . unsigned ; id, . double ; tmout . ). private . Assigns manager reference, window id and creates websocket handler, used for communication with the clients. ; Definition at line 152 of file RWebWindow.cxx. ◆ EmbedFileDialog(). bool RWebWindow::EmbedFileDialog ; (; const std::shared_ptr< RWebWindow > & ; window, . unsigned ; connid, . const std::string & ; args . ). static . Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embedded() providing received string as second argument. ; Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected ; Definition at line 2019 of file RWebWindow.cxx. ◆ FindConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::FindConnection ; (; unsigned ; wsid). private . Find connection with specified websocket id. ; Find connection with given websocket id. ; Definition at line 264 of file RWebWindow.cxx. ◆ FindHeadlessConnection(). unsigned RWebWindow::FindHeadlessConnection ; (; ). private . Returns connection id of window running in headless mode This can be special connection which may run picture production jobs in background Connection to that job may not be initialized yet If connection does not exists, returns 0. ; Definition at line 221 of file RWebWindow.cxx. ◆ GenerateKey(). std::string RWebWindow::GenerateKey ; (; ); const. private . Generate new unique key for the wind",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:35344,Integrability,message,message,35344,"1 - default) ; Definition at line 293 of file RWebWindow.hxx. ◆ HasConnection(). bool RWebWindow::HasConnection ; (; unsigned ; connid = 0, . bool ; only_active = true . ); const. returns true if specified connection id exists ; Parameters. connidconnection id (0 - any) ; only_activewhen true only active connection will be checked, otherwise also pending (not yet established) connections are checked . Definition at line 1455 of file RWebWindow.cxx. ◆ HasKey(). bool RWebWindow::HasKey ; (; const std::string & ; key, . bool ; also_newkey = false . ); const. private . Returns true if provided key value already exists (in processes map or in existing connections) In special cases one also can check if key value exists as newkey. ; Definition at line 559 of file RWebWindow.cxx. ◆ HMAC(). std::string RWebWindow::HMAC ; (; const std::string & ; key, . const std::string & ; sessionKey, . const char * ; msg, . int ; msglen . ). staticprivate . Calculate HMAC checksum for provided key and message Key combained from connection key and session key. ; Definition at line 2034 of file RWebWindow.cxx. ◆ InvokeCallbacks(). void RWebWindow::InvokeCallbacks ; (; bool ; force = false). private . Invoke callbacks with existing data Must be called from appropriate thread. ; Definition at line 439 of file RWebWindow.cxx. ◆ IsFileDialogMessage(). bool RWebWindow::IsFileDialogMessage ; (; const std::string & ; msg). static . Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ; Definition at line 2005 of file RWebWindow.cxx. ◆ IsNativeOnlyConn(). bool ROOT::RWebWindow::IsNativeOnlyConn ; (; ); const. inline . returns true if only native (own-created) connections are allowed ; Definition at line 315 of file RWebWindow.hxx. ◆ IsRequireAuthKey(). bool ROOT::RWebWindow::IsRequireAuthKey ; (; ); const. inline . returns true if authentication string is r",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:35801,Integrability,message,message,35801,". bool ; also_newkey = false . ); const. private . Returns true if provided key value already exists (in processes map or in existing connections) In special cases one also can check if key value exists as newkey. ; Definition at line 559 of file RWebWindow.cxx. ◆ HMAC(). std::string RWebWindow::HMAC ; (; const std::string & ; key, . const std::string & ; sessionKey, . const char * ; msg, . int ; msglen . ). staticprivate . Calculate HMAC checksum for provided key and message Key combained from connection key and session key. ; Definition at line 2034 of file RWebWindow.cxx. ◆ InvokeCallbacks(). void RWebWindow::InvokeCallbacks ; (; bool ; force = false). private . Invoke callbacks with existing data Must be called from appropriate thread. ; Definition at line 439 of file RWebWindow.cxx. ◆ IsFileDialogMessage(). bool RWebWindow::IsFileDialogMessage ; (; const std::string & ; msg). static . Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ; Definition at line 2005 of file RWebWindow.cxx. ◆ IsNativeOnlyConn(). bool ROOT::RWebWindow::IsNativeOnlyConn ; (; ); const. inline . returns true if only native (own-created) connections are allowed ; Definition at line 315 of file RWebWindow.hxx. ◆ IsRequireAuthKey(). bool ROOT::RWebWindow::IsRequireAuthKey ; (; ); const. inline . returns true if authentication string is required ; Definition at line 323 of file RWebWindow.hxx. ◆ IsShown(). bool ROOT::RWebWindow::IsShown ; (; ); const. inline . Returns true when window was shown at least once. ; Definition at line 372 of file RWebWindow.hxx. ◆ IsUseCurrentDir(). bool ROOT::RWebWindow::IsUseCurrentDir ; (; ); const. inline . returns true if window can access local files via currentdir/ path of http server ; Definition at line 331 of file RWebWindow.hxx. ◆ MakeHeadless(). unsigned RWebWindow::MakeHeadless ; (; bool ; create_new = false)",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:38481,Integrability,protocol,protocol,38481,"(). bool RWebWindow::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; arg). private . Process special http request, used to hold headless browser running Such requests should not be replied for the long time Be aware that function called directly from THttpServer thread, which is not same thread as window. ; Definition at line 375 of file RWebWindow.cxx. ◆ ProcessWS(). bool RWebWindow::ProcessWS ; (; THttpCallArg & ; arg). private . Processing of websockets call-backs, invoked from RWebWindowWSHandler Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data. ; Definition at line 737 of file RWebWindow.cxx. ◆ ProvideQueueEntry(). void RWebWindow::ProvideQueueEntry ; (; unsigned ; connid, . EQueueEntryKind ; kind, . std::string && ; arg . ). private . Provide data to user callback User callback must be executed in the window thread. ; Definition at line 422 of file RWebWindow.cxx. ◆ RecordData(). void RWebWindow::RecordData ; (; const std::string & ; fname = ""protocol.json"", . const std::string & ; fprefix = """" . ). Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ; JSON file will look like: [""send"", ""msg0.txt"", ""send"", ""msg1.txt"", ""msg2.txt""]; If empty file name is provided, data recording will be disabled Recorded data can be used in JSROOT directly to test client code without running C++ server ; Definition at line 1397 of file RWebWindow.cxx. ◆ RemoveConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::RemoveConnection ; (; unsigned ; wsid). private . Remove connection with given websocket id. ; Definition at line 279 of file RWebWindow.cxx. ◆ RemoveEmbedWindow(). void RWebWindow::RemoveEmbedWindow ; (; unsigned ; connid, . int ; channel . ). private . Remove RWebWindow associated with the channelfEmbed. ; Definition at line 1909 of f",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:38585,Integrability,protocol,protocol,38585," replied for the long time Be aware that function called directly from THttpServer thread, which is not same thread as window. ; Definition at line 375 of file RWebWindow.cxx. ◆ ProcessWS(). bool RWebWindow::ProcessWS ; (; THttpCallArg & ; arg). private . Processing of websockets call-backs, invoked from RWebWindowWSHandler Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data. ; Definition at line 737 of file RWebWindow.cxx. ◆ ProvideQueueEntry(). void RWebWindow::ProvideQueueEntry ; (; unsigned ; connid, . EQueueEntryKind ; kind, . std::string && ; arg . ). private . Provide data to user callback User callback must be executed in the window thread. ; Definition at line 422 of file RWebWindow.cxx. ◆ RecordData(). void RWebWindow::RecordData ; (; const std::string & ; fname = ""protocol.json"", . const std::string & ; fprefix = """" . ). Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ; JSON file will look like: [""send"", ""msg0.txt"", ""send"", ""msg1.txt"", ""msg2.txt""]; If empty file name is provided, data recording will be disabled Recorded data can be used in JSROOT directly to test client code without running C++ server ; Definition at line 1397 of file RWebWindow.cxx. ◆ RemoveConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::RemoveConnection ; (; unsigned ; wsid). private . Remove connection with given websocket id. ; Definition at line 279 of file RWebWindow.cxx. ◆ RemoveEmbedWindow(). void RWebWindow::RemoveEmbedWindow ; (; unsigned ; connid, . int ; channel . ). private . Remove RWebWindow associated with the channelfEmbed. ; Definition at line 1909 of file RWebWindow.cxx. ◆ RemoveKey(). void RWebWindow::RemoveKey ; (; const std::string & ; key). private . Removes all connections with the key. ; Definition at line 584 of file RWebWindow.cxx. ◆",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:47308,Integrability,inject,injected,47308," CEF or Chromium) ; Definition at line 272 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 319 of file RWebWindow.hxx. ◆ SetStartDialogFunc(). void RWebWindow::SetStartDialogFunc ; (; std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> ; func). staticprivate . Configure func which has to be used for starting dialog. ; Definition at line 1995 of file RWebWindow.cxx. ◆ SetUseCurrentDir(). void ROOT::RWebWindow::SetUseCurrentDir ; (; bool ; on = true). inline . Configure if window can access local files via currentdir/ path of http server. ; Definition at line 327 of file RWebWindow.hxx. ◆ SetUserArgs(). void RWebWindow::SetUserArgs ; (; const std::string & ; args). Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ; Parameters. args- arbitrary JSON data which can be provided to client side . Definition at line 1352 of file RWebWindow.cxx. ◆ Show(). unsigned RWebWindow::Show ; (; const RWebDisplayArgs & ; args = """"). Show window in specified location. ; See alsoROOT::RWebWindowsManager::Show for more info ; Returns(future) connection id (or 0 when fails) ; Definition at line 191 of file RWebWindow.cxx. ◆ ShowWindow(). unsigned RWebWindow::ShowWindow ; (; std::shared_ptr< RWebWindow > ; window, . const RWebDisplayArgs & ; args = """" . ). static . Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ; Definition at line 1957 of file RWebWindow.cxx. ◆ StartThread(). void RWebWindow::StartThread ; (; ). Start special thread which will be used by the window to handle all callbacks One ha",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:48895,Integrability,message,message,48895,"s & ; args = """" . ). static . Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ; Definition at line 1957 of file RWebWindow.cxx. ◆ StartThread(). void RWebWindow::StartThread ; (; ). Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ; Definition at line 1722 of file RWebWindow.cxx. ◆ StopThread(). void RWebWindow::StopThread ; (; ). Stop special thread. ; Definition at line 1744 of file RWebWindow.cxx. ◆ SubmitData(). void RWebWindow::SubmitData ; (; unsigned ; connid, . bool ; txt, . std::string && ; data, . int ; chid = 1 . ). private . Internal method to send data. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; txtis text message that should be sent ; datadata to be std-moved to SubmitData function ; chidchannel id, 1 - normal communication, 0 - internal with highest priority . Definition at line 1571 of file RWebWindow.cxx. ◆ Sync(). void RWebWindow::Sync ; (; ). Special method to process all internal activity when window runs in separate thread. ; Definition at line 1269 of file RWebWindow.cxx. ◆ TerminateROOT(). void RWebWindow::TerminateROOT ; (; ). Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ; Definition at line 1935 of file RWebWindow.cxx. ◆ UseServerThreads(). void RWebWindow::UseServerThreads ; (; ). Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides proper locking and does not block. ; Such mode provides minimal possible latency Must be called before callbacks are assigned ; Definition at line 1709 of file RWebWindow.cxx. ◆ WaitFor(). int RWebWindow::WaitFor ; (; WebWindowWaitFun",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:56761,Integrability,protocol,protocol,56761,"Window.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native connection are allowed, created by Show() method ; Definition at line 157 of file RWebWindow.hxx. ◆ fOperationTmout. float ROOT::RWebWindow::fOperationTmout {50.}. private . ! timeout in seconds to perform synchronous operation, default 50s ; Definition at line 171 of file RWebWindow.hxx. ◆ fPanelName. std::string ROOT::RWebWindow::fPanelName. private . ! panel name which should be shown in the window ; Definition at line 143 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 152 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event processing performed in dedicated thread ; Definition at line 147 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 177 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line 175 of file RWebWindow.hxx. ◆ fProtocolFileName. std::string ROOT::RWebWindow::fProtocolFileName. private . ! local file where communication protocol will be written ; Definition at line 173 of file RWebWindow.hxx. ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 176 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the widget ; Definition at line 149 of file RWebWindow.hxx. ◆ fSendMT. bool ROOT::RWebWindow::fSendMT {false}. private . ! true is special threads should b",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:56900,Integrability,protocol,protocol,56900,"Show() method ; Definition at line 157 of file RWebWindow.hxx. ◆ fOperationTmout. float ROOT::RWebWindow::fOperationTmout {50.}. private . ! timeout in seconds to perform synchronous operation, default 50s ; Definition at line 171 of file RWebWindow.hxx. ◆ fPanelName. std::string ROOT::RWebWindow::fPanelName. private . ! panel name which should be shown in the window ; Definition at line 143 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 152 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event processing performed in dedicated thread ; Definition at line 147 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 177 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line 175 of file RWebWindow.hxx. ◆ fProtocolFileName. std::string ROOT::RWebWindow::fProtocolFileName. private . ! local file where communication protocol will be written ; Definition at line 173 of file RWebWindow.hxx. ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 176 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the widget ; Definition at line 149 of file RWebWindow.hxx. ◆ fSendMT. bool ROOT::RWebWindow::fSendMT {false}. private . ! true is special threads should be used for sending data ; Definition at line 148 of file RWebWindow.hxx. ◆ fUseCurrentDir. bool ROOT::RWebWindow::fUseCurrentDir {false}. ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:57088,Integrability,protocol,protocol,57088,"rm synchronous operation, default 50s ; Definition at line 171 of file RWebWindow.hxx. ◆ fPanelName. std::string ROOT::RWebWindow::fPanelName. private . ! panel name which should be shown in the window ; Definition at line 143 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 152 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event processing performed in dedicated thread ; Definition at line 147 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 177 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line 175 of file RWebWindow.hxx. ◆ fProtocolFileName. std::string ROOT::RWebWindow::fProtocolFileName. private . ! local file where communication protocol will be written ; Definition at line 173 of file RWebWindow.hxx. ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 176 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the widget ; Definition at line 149 of file RWebWindow.hxx. ◆ fSendMT. bool ROOT::RWebWindow::fSendMT {false}. private . ! true is special threads should be used for sending data ; Definition at line 148 of file RWebWindow.hxx. ◆ fUseCurrentDir. bool ROOT::RWebWindow::fUseCurrentDir {false}. private . ! if window can access local files via currentdir/ path of http server ; Definition at line 158 of file RWebWindow.hxx. ◆ fUseProcessEvents. bool ROOT::RWebWin",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:57259,Integrability,protocol,protocol,57259,"own in the window ; Definition at line 143 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 152 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event processing performed in dedicated thread ; Definition at line 147 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 177 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line 175 of file RWebWindow.hxx. ◆ fProtocolFileName. std::string ROOT::RWebWindow::fProtocolFileName. private . ! local file where communication protocol will be written ; Definition at line 173 of file RWebWindow.hxx. ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 176 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the widget ; Definition at line 149 of file RWebWindow.hxx. ◆ fSendMT. bool ROOT::RWebWindow::fSendMT {false}. private . ! true is special threads should be used for sending data ; Definition at line 148 of file RWebWindow.hxx. ◆ fUseCurrentDir. bool ROOT::RWebWindow::fUseCurrentDir {false}. private . ! if window can access local files via currentdir/ path of http server ; Definition at line 158 of file RWebWindow.hxx. ◆ fUseProcessEvents. bool ROOT::RWebWindow::fUseProcessEvents {false}. private . ! all window functionality will run through process events ; Definition at line 146 of file RWebWindow.hxx. ◆ fUserArgs. std::string ROOT::RWe",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:538,Modifiability,config,configured,538,". ROOT: ROOT::RWebWindow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; ROOT::RWebWindow Class ReferenceWeb Display. ; Represents web window, which can be shown in web browser or any other supported environment. ; Window can be configured to run either in the normal or in the batch (headless) mode. In second case no any graphical elements will be created. For the normal window one can configure geometry (width and height), which are applied when window shown.; Each window can be shown several times (if allowed) in different places - either as the CEF (chromium embedded) window or in the standard web browser. When started, window will open and show HTML page, configured with RWebWindow::SetDefaultPage() method.; Typically (but not necessarily) clients open web socket connection to the window and one can exchange data, using RWebWindow::Send() method and call-back function assigned via RWebWindow::SetDataCallBack(). ; Definition at line 54 of file RWebWindow.hxx. Classes; struct  MasterConn;  ; struct  QueueEntry;  ; struct  QueueItem;  ; struct  WebConn;  . Public Member Functions;  RWebWindow ();  RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ;  ;  ~RWebWindow ();  RWebWindow destructor Closes all connections and remove window from manager. ;  ; void AssignThreadId ();  Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ;  ; bool CanSend (unsigned connid, bool direct=true) cons",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:698,Modifiability,config,configure,698,". ROOT: ROOT::RWebWindow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; ROOT::RWebWindow Class ReferenceWeb Display. ; Represents web window, which can be shown in web browser or any other supported environment. ; Window can be configured to run either in the normal or in the batch (headless) mode. In second case no any graphical elements will be created. For the normal window one can configure geometry (width and height), which are applied when window shown.; Each window can be shown several times (if allowed) in different places - either as the CEF (chromium embedded) window or in the standard web browser. When started, window will open and show HTML page, configured with RWebWindow::SetDefaultPage() method.; Typically (but not necessarily) clients open web socket connection to the window and one can exchange data, using RWebWindow::Send() method and call-back function assigned via RWebWindow::SetDataCallBack(). ; Definition at line 54 of file RWebWindow.hxx. Classes; struct  MasterConn;  ; struct  QueueEntry;  ; struct  QueueItem;  ; struct  WebConn;  . Public Member Functions;  RWebWindow ();  RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ;  ;  ~RWebWindow ();  RWebWindow destructor Closes all connections and remove window from manager. ;  ; void AssignThreadId ();  Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ;  ; bool CanSend (unsigned connid, bool direct=true) cons",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:977,Modifiability,config,configured,977,". ROOT: ROOT::RWebWindow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; ROOT::RWebWindow Class ReferenceWeb Display. ; Represents web window, which can be shown in web browser or any other supported environment. ; Window can be configured to run either in the normal or in the batch (headless) mode. In second case no any graphical elements will be created. For the normal window one can configure geometry (width and height), which are applied when window shown.; Each window can be shown several times (if allowed) in different places - either as the CEF (chromium embedded) window or in the standard web browser. When started, window will open and show HTML page, configured with RWebWindow::SetDefaultPage() method.; Typically (but not necessarily) clients open web socket connection to the window and one can exchange data, using RWebWindow::Send() method and call-back function assigned via RWebWindow::SetDataCallBack(). ; Definition at line 54 of file RWebWindow.hxx. Classes; struct  MasterConn;  ; struct  QueueEntry;  ; struct  QueueItem;  ; struct  WebConn;  . Public Member Functions;  RWebWindow ();  RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ;  ;  ~RWebWindow ();  RWebWindow destructor Closes all connections and remove window from manager. ;  ; void AssignThreadId ();  Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ;  ; bool CanSend (unsigned connid, bool direct=true) cons",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:3061,Modifiability,config,configured,3061," be performed. ;  ; void CloseConnection (unsigned connid);  Close specified connection. ;  ; void CloseConnections ();  Closes all connection to clients Normally leads to closing of all correspondent browser windows Some browsers (like firefox) do not allow by default to close window. ;  ; std::string GetAddr () const;  Returns window address which is used in URL. ;  ; std::string GetClientVersion () const;  Returns current client version. ;  ; unsigned GetConnectionId (int num=0) const;  Returns connection id for specified connection sequence number Only active connections are returned - where clients confirms connection Total number of connections can be retrieved with NumConnections() method. ;  ; std::vector< unsigned > GetConnections (unsigned excludeid=0) const;  returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ;  ; unsigned GetConnLimit () const;  returns configured connections limit (0 - default) ;  ; unsigned GetDisplayConnection () const;  Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true)",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:3397,Modifiability,config,configured,3397,"ing GetClientVersion () const;  Returns current client version. ;  ; unsigned GetConnectionId (int num=0) const;  Returns connection id for specified connection sequence number Only active connections are returned - where clients confirms connection Total number of connections can be retrieved with NumConnections() method. ;  ; std::vector< unsigned > GetConnections (unsigned excludeid=0) const;  returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ;  ; unsigned GetConnLimit () const;  returns configured connections limit (0 - default) ;  ; unsigned GetDisplayConnection () const;  Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured w",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:4303,Modifiability,config,configured,4303,"eturns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:4427,Modifiability,config,configured,4427,"ndow. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specif",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:4535,Modifiability,config,configured,4535,"ndow. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specif",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:4612,Modifiability,config,configured,4612,"ndow. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specif",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:8213,Modifiability,config,configures,8213,"ring &token="""");  Configures connection token (default none) When specified, in URL of webpage such token should be provided as &token=value parameter, otherwise web window will refuse connection. ;  ; void SetDataCallBack (WebWindowDataCallback_t func);  Set call-back function for data, received from the clients via websocket. ;  ; void SetDefaultPage (const std::string &page);  Set content of default window HTML page This page returns when URL address of the window will be requested Either HTML code or file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ;  ; void SetDisconnectCallBack (WebWindowConnectCallback_t func);  Set call-back function for disconnecting. ;  ; void SetGeometry (unsigned width, unsigned height);  Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetMaxQueueLength (unsigned len=10);  configures maximal queue length of data which can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:8326,Modifiability,config,configures,8326,"ring &token="""");  Configures connection token (default none) When specified, in URL of webpage such token should be provided as &token=value parameter, otherwise web window will refuse connection. ;  ; void SetDataCallBack (WebWindowDataCallback_t func);  Set call-back function for data, received from the clients via websocket. ;  ; void SetDefaultPage (const std::string &page);  Set content of default window HTML page This page returns when URL address of the window will be requested Either HTML code or file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ;  ; void SetDisconnectCallBack (WebWindowConnectCallback_t func);  Set call-back function for disconnecting. ;  ; void SetGeometry (unsigned width, unsigned height);  Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetMaxQueueLength (unsigned len=10);  configures maximal queue length of data which can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:14964,Modifiability,config,configured,14964," 30 sec is there. ;  ; void CheckPendingConnections ();  Check if started process(es) establish connection. ;  ; void CompleteWSSend (unsigned wsid);  Complete websocket send operation Clear ""doing send"" flag and check if next operation has to be started. ;  ; std::shared_ptr< RWebWindowWSHandler > CreateWSHandler (std::shared_ptr< RWebWindowsManager > mgr, unsigned id, double tmout);  Assigns manager reference, window id and creates websocket handler, used for communication with the clients. ;  ; std::shared_ptr< WebConn > FindConnection (unsigned wsid);  Find connection with specified websocket id. ;  ; unsigned FindHeadlessConnection ();  Returns connection id of window running in headless mode This can be special connection which may run picture production jobs in background Connection to that job may not be initialized yet If connection does not exists, returns 0. ;  ; std::string GenerateKey () const;  Generate new unique key for the window. ;  ; std::string GetConnToken () const;  Returns configured connection token. ;  ; std::vector< MasterConn > GetMasterConnections (unsigned connid=0) const;  Get list of master connections. ;  ; ConnectionsList_t GetWindowConnections (unsigned connid=0, bool only_active=false) const;  returns connection list (or all active connections) ;  ; bool HasKey (const std::string &key, bool also_newkey=false) const;  Returns true if provided key value already exists (in processes map or in existing connections) In special cases one also can check if key value exists as newkey. ;  ; void InvokeCallbacks (bool force=false);  Invoke callbacks with existing data Must be called from appropriate thread. ;  ; unsigned MakeHeadless (bool create_new=false);  Start headless browser for specified window Normally only single instance is used, but many can be created See ROOT::RWebWindowsManager::Show() docu for more info returns (future) connection id (or 0 when fails) ;  ; bool ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg);  Proce",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:17838,Modifiability,config,configured,17838,"hich has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex fConnMutex;  ! mutex used to protect connection list ;  ; std::string fConnToken;  ! value of ""token"" URL parameter which should be provided for connecting window ;  ; WebWindowDataCallback_t fDataCallback;  ! main callback when data over channel 1 is arrived ;  ; std::string fDefaultPage;  ! HTML page (or file name) returned when window URL is opened ;  ; WebWindowConnectCallback_t fDisconnCallback;  ! callback for disconnect event ;  ; bool fHasWindowThrd {false};  ! indicate if special window thread was started ;  ; unsigned fHeight {0};  ! initial window width and height when displayed, zeros are ignored ;  ; unsigned fId {0};  ! unique identifier ;  ; std::queue< QueueEntry > fInputQueue;  ! input queue for all callbacks ;  ; std::mutex fInputQueueMutex;  ! mutex to protect input queue ;  ; std::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchrono",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:30332,Modifiability,config,configured,30332,"GetClientVersion(). std::string RWebWindow::GetClientVersion ; (; ); const. Returns current client version. ; Definition at line 1340 of file RWebWindow.cxx. ◆ GetConnectionId(). unsigned RWebWindow::GetConnectionId ; (; int ; num = 0); const. Returns connection id for specified connection sequence number Only active connections are returned - where clients confirms connection Total number of connections can be retrieved with NumConnections() method. ; Parameters. numconnection sequence number . Definition at line 1412 of file RWebWindow.cxx. ◆ GetConnections(). std::vector< unsigned > RWebWindow::GetConnections ; (; unsigned ; excludeid = 0); const. returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ; Definition at line 1429 of file RWebWindow.cxx. ◆ GetConnLimit(). unsigned RWebWindow::GetConnLimit ; (; ); const. returns configured connections limit (0 - default) ; Definition at line 704 of file RWebWindow.cxx. ◆ GetConnToken(). std::string RWebWindow::GetConnToken ; (; ); const. private . Returns configured connection token. ; Definition at line 726 of file RWebWindow.cxx. ◆ GetDisplayConnection(). unsigned RWebWindow::GetDisplayConnection ; (; ); const. Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ; Definition at line 244 of file RWebWindow.cxx. ◆ GetHeight(). unsigned ROOT::RWebWindow::GetHeight ; (; ); const. inline . returns configured window height (0 - default) ; Definition at line 285 of file RWebWindow.hxx. ◆ GetId(). unsigned ROOT::RWebWindow::GetId ; (; ); const. inline . Returns ID for the window - unique inside window manager. ; Definition at line 251 of file RWebWindow.hxx. ◆ GetManager(). std::shared_ptr< RWebWindowsManager > ROOT::RWebWindow::GetManager ; (; ); const. ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:30512,Modifiability,config,configured,30512,"ow.cxx. ◆ GetConnectionId(). unsigned RWebWindow::GetConnectionId ; (; int ; num = 0); const. Returns connection id for specified connection sequence number Only active connections are returned - where clients confirms connection Total number of connections can be retrieved with NumConnections() method. ; Parameters. numconnection sequence number . Definition at line 1412 of file RWebWindow.cxx. ◆ GetConnections(). std::vector< unsigned > RWebWindow::GetConnections ; (; unsigned ; excludeid = 0); const. returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ; Definition at line 1429 of file RWebWindow.cxx. ◆ GetConnLimit(). unsigned RWebWindow::GetConnLimit ; (; ); const. returns configured connections limit (0 - default) ; Definition at line 704 of file RWebWindow.cxx. ◆ GetConnToken(). std::string RWebWindow::GetConnToken ; (; ); const. private . Returns configured connection token. ; Definition at line 726 of file RWebWindow.cxx. ◆ GetDisplayConnection(). unsigned RWebWindow::GetDisplayConnection ; (; ); const. Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ; Definition at line 244 of file RWebWindow.cxx. ◆ GetHeight(). unsigned ROOT::RWebWindow::GetHeight ; (; ); const. inline . returns configured window height (0 - default) ; Definition at line 285 of file RWebWindow.hxx. ◆ GetId(). unsigned ROOT::RWebWindow::GetId ; (; ); const. inline . Returns ID for the window - unique inside window manager. ; Definition at line 251 of file RWebWindow.hxx. ◆ GetManager(). std::shared_ptr< RWebWindowsManager > ROOT::RWebWindow::GetManager ; (; ); const. inline . Returns window manager. ; Definition at line 254 of file RWebWindow.hxx. ◆ GetMasterConnections(). std::vector< RWebWindow::MasterConn > RWebW",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:31010,Modifiability,config,configured,31010,"th all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ; Definition at line 1429 of file RWebWindow.cxx. ◆ GetConnLimit(). unsigned RWebWindow::GetConnLimit ; (; ); const. returns configured connections limit (0 - default) ; Definition at line 704 of file RWebWindow.cxx. ◆ GetConnToken(). std::string RWebWindow::GetConnToken ; (; ); const. private . Returns configured connection token. ; Definition at line 726 of file RWebWindow.cxx. ◆ GetDisplayConnection(). unsigned RWebWindow::GetDisplayConnection ; (; ); const. Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ; Definition at line 244 of file RWebWindow.cxx. ◆ GetHeight(). unsigned ROOT::RWebWindow::GetHeight ; (; ); const. inline . returns configured window height (0 - default) ; Definition at line 285 of file RWebWindow.hxx. ◆ GetId(). unsigned ROOT::RWebWindow::GetId ; (; ); const. inline . Returns ID for the window - unique inside window manager. ; Definition at line 251 of file RWebWindow.hxx. ◆ GetManager(). std::shared_ptr< RWebWindowsManager > ROOT::RWebWindow::GetManager ; (; ); const. inline . Returns window manager. ; Definition at line 254 of file RWebWindow.hxx. ◆ GetMasterConnections(). std::vector< RWebWindow::MasterConn > RWebWindow::GetMasterConnections ; (; unsigned ; connid = 0); const. private . Get list of master connections. ; Definition at line 326 of file RWebWindow.cxx. ◆ GetMaxQueueLength(). unsigned ROOT::RWebWindow::GetMaxQueueLength ; (; ); const. inline . Return maximal queue length of data which can be held by window. ; Definition at line 307 of file RWebWindow.hxx. ◆ GetOperationTmout(). float ROOT::RWebWindow::GetOperationTmout ; (; ); const. inline . Returns timeout for synchronous WebWindow operations. ; Definition at line ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:33315,Modifiability,config,configured,33315," Definition at line 1551 of file RWebWindow.cxx. ◆ GetServer(). THttpServer * RWebWindow::GetServer ; (; ). Return THttpServer instance serving requests to the window. ; Definition at line 181 of file RWebWindow.cxx. ◆ GetUrl(). std::string RWebWindow::GetUrl ; (; bool ; remote = true). Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ; Parameters. remoteis true, real HTTP server will be started automatically and widget can be connected from the web browser. If; remoteis false, HTTP server will not be started and window can be connected only from ROOT application itself. !!! WARNING - do not invoke this method without real need, each URL consumes resources in widget and in http server . Definition at line 173 of file RWebWindow.cxx. ◆ GetUserArgs(). std::string RWebWindow::GetUserArgs ; (; ); const. Returns configured user arguments for web window See SetUserArgs method for more details. ; Definition at line 1362 of file RWebWindow.cxx. ◆ GetWidth(). unsigned ROOT::RWebWindow::GetWidth ; (; ); const. inline . returns configured window width (0 - default) actual window width can be different ; Definition at line 281 of file RWebWindow.hxx. ◆ GetWindowConnections(). RWebWindow::ConnectionsList_t RWebWindow::GetWindowConnections ; (; unsigned ; connid = 0, . bool ; only_active = false . ); const. private . returns connection list (or all active connections) ; Parameters. connidconnection id, when 0 - all existing connections are returned ; only_activewhen true, only active (already established) connections are returned . Definition at line 1500 of file RWebWindow.cxx. ◆ GetX(). int ROOT::RWebWindow::GetX ; (; ); const. inline . returns configured window X position (-1 - default) ; Definition at line 289 of file RWebWindow.hxx. ◆ GetY(). int ROOT::RWebWindow::GetY ; (; ); const. inline . returns configured window Y position (-1",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:33529,Modifiability,config,configured,33529,":string RWebWindow::GetUrl ; (; bool ; remote = true). Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ; Parameters. remoteis true, real HTTP server will be started automatically and widget can be connected from the web browser. If; remoteis false, HTTP server will not be started and window can be connected only from ROOT application itself. !!! WARNING - do not invoke this method without real need, each URL consumes resources in widget and in http server . Definition at line 173 of file RWebWindow.cxx. ◆ GetUserArgs(). std::string RWebWindow::GetUserArgs ; (; ); const. Returns configured user arguments for web window See SetUserArgs method for more details. ; Definition at line 1362 of file RWebWindow.cxx. ◆ GetWidth(). unsigned ROOT::RWebWindow::GetWidth ; (; ); const. inline . returns configured window width (0 - default) actual window width can be different ; Definition at line 281 of file RWebWindow.hxx. ◆ GetWindowConnections(). RWebWindow::ConnectionsList_t RWebWindow::GetWindowConnections ; (; unsigned ; connid = 0, . bool ; only_active = false . ); const. private . returns connection list (or all active connections) ; Parameters. connidconnection id, when 0 - all existing connections are returned ; only_activewhen true, only active (already established) connections are returned . Definition at line 1500 of file RWebWindow.cxx. ◆ GetX(). int ROOT::RWebWindow::GetX ; (; ); const. inline . returns configured window X position (-1 - default) ; Definition at line 289 of file RWebWindow.hxx. ◆ GetY(). int ROOT::RWebWindow::GetY ; (; ); const. inline . returns configured window Y position (-1 - default) ; Definition at line 293 of file RWebWindow.hxx. ◆ HasConnection(). bool RWebWindow::HasConnection ; (; unsigned ; connid = 0, . bool ; only_active = true . ); const. returns true if specified connection id exists ; Param",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:34157,Modifiability,config,configured,34157,"nition at line 173 of file RWebWindow.cxx. ◆ GetUserArgs(). std::string RWebWindow::GetUserArgs ; (; ); const. Returns configured user arguments for web window See SetUserArgs method for more details. ; Definition at line 1362 of file RWebWindow.cxx. ◆ GetWidth(). unsigned ROOT::RWebWindow::GetWidth ; (; ); const. inline . returns configured window width (0 - default) actual window width can be different ; Definition at line 281 of file RWebWindow.hxx. ◆ GetWindowConnections(). RWebWindow::ConnectionsList_t RWebWindow::GetWindowConnections ; (; unsigned ; connid = 0, . bool ; only_active = false . ); const. private . returns connection list (or all active connections) ; Parameters. connidconnection id, when 0 - all existing connections are returned ; only_activewhen true, only active (already established) connections are returned . Definition at line 1500 of file RWebWindow.cxx. ◆ GetX(). int ROOT::RWebWindow::GetX ; (; ); const. inline . returns configured window X position (-1 - default) ; Definition at line 289 of file RWebWindow.hxx. ◆ GetY(). int ROOT::RWebWindow::GetY ; (; ); const. inline . returns configured window Y position (-1 - default) ; Definition at line 293 of file RWebWindow.hxx. ◆ HasConnection(). bool RWebWindow::HasConnection ; (; unsigned ; connid = 0, . bool ; only_active = true . ); const. returns true if specified connection id exists ; Parameters. connidconnection id (0 - any) ; only_activewhen true only active connection will be checked, otherwise also pending (not yet established) connections are checked . Definition at line 1455 of file RWebWindow.cxx. ◆ HasKey(). bool RWebWindow::HasKey ; (; const std::string & ; key, . bool ; also_newkey = false . ); const. private . Returns true if provided key value already exists (in processes map or in existing connections) In special cases one also can check if key value exists as newkey. ; Definition at line 559 of file RWebWindow.cxx. ◆ HMAC(). std::string RWebWindow::HMAC ; (; const std::string &",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:34319,Modifiability,config,configured,34319,"e SetUserArgs method for more details. ; Definition at line 1362 of file RWebWindow.cxx. ◆ GetWidth(). unsigned ROOT::RWebWindow::GetWidth ; (; ); const. inline . returns configured window width (0 - default) actual window width can be different ; Definition at line 281 of file RWebWindow.hxx. ◆ GetWindowConnections(). RWebWindow::ConnectionsList_t RWebWindow::GetWindowConnections ; (; unsigned ; connid = 0, . bool ; only_active = false . ); const. private . returns connection list (or all active connections) ; Parameters. connidconnection id, when 0 - all existing connections are returned ; only_activewhen true, only active (already established) connections are returned . Definition at line 1500 of file RWebWindow.cxx. ◆ GetX(). int ROOT::RWebWindow::GetX ; (; ); const. inline . returns configured window X position (-1 - default) ; Definition at line 289 of file RWebWindow.hxx. ◆ GetY(). int ROOT::RWebWindow::GetY ; (; ); const. inline . returns configured window Y position (-1 - default) ; Definition at line 293 of file RWebWindow.hxx. ◆ HasConnection(). bool RWebWindow::HasConnection ; (; unsigned ; connid = 0, . bool ; only_active = true . ); const. returns true if specified connection id exists ; Parameters. connidconnection id (0 - any) ; only_activewhen true only active connection will be checked, otherwise also pending (not yet established) connections are checked . Definition at line 1455 of file RWebWindow.cxx. ◆ HasKey(). bool RWebWindow::HasKey ; (; const std::string & ; key, . bool ; also_newkey = false . ); const. private . Returns true if provided key value already exists (in processes map or in existing connections) In special cases one also can check if key value exists as newkey. ; Definition at line 559 of file RWebWindow.cxx. ◆ HMAC(). std::string RWebWindow::HMAC ; (; const std::string & ; key, . const std::string & ; sessionKey, . const char * ; msg, . int ; msglen . ). staticprivate . Calculate HMAC checksum for provided key and message Key com",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:45348,Modifiability,config,configures,45348,"ge(). void ROOT::RWebWindow::SetDefaultPage ; (; const std::string & ; page). inline . Set content of default window HTML page This page returns when URL address of the window will be requested Either HTML code or file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ; Definition at line 260 of file RWebWindow.hxx. ◆ SetDisconnectCallBack(). void RWebWindow::SetDisconnectCallBack ; (; WebWindowConnectCallback_t ; func). Set call-back function for disconnecting. ; Definition at line 1795 of file RWebWindow.cxx. ◆ SetGeometry(). void ROOT::RWebWindow::SetGeometry ; (; unsigned ; width, . unsigned ; height . ). inline . Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 265 of file RWebWindow.hxx. ◆ SetMaxQueueLength(). void ROOT::RWebWindow::SetMaxQueueLength ; (; unsigned ; len = 10). inline . configures maximal queue length of data which can be held by window ; Definition at line 303 of file RWebWindow.hxx. ◆ SetNativeOnlyConn(). void ROOT::RWebWindow::SetNativeOnlyConn ; (; bool ; on = true). inline . configures that only native (own-created) connections are allowed ; Definition at line 311 of file RWebWindow.hxx. ◆ SetOperationTmout(). void ROOT::RWebWindow::SetOperationTmout ; (; float ; tm = 50.). inline . Set timeout for synchronous WebWindow operations. ; Definition at line 357 of file RWebWindow.hxx. ◆ SetPanelName(). void RWebWindow::SetPanelName ; (; const std::string & ; name). Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 272 of file RWebWindow.hx",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:45562,Modifiability,config,configures,45562," file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ; Definition at line 260 of file RWebWindow.hxx. ◆ SetDisconnectCallBack(). void RWebWindow::SetDisconnectCallBack ; (; WebWindowConnectCallback_t ; func). Set call-back function for disconnecting. ; Definition at line 1795 of file RWebWindow.cxx. ◆ SetGeometry(). void ROOT::RWebWindow::SetGeometry ; (; unsigned ; width, . unsigned ; height . ). inline . Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 265 of file RWebWindow.hxx. ◆ SetMaxQueueLength(). void ROOT::RWebWindow::SetMaxQueueLength ; (; unsigned ; len = 10). inline . configures maximal queue length of data which can be held by window ; Definition at line 303 of file RWebWindow.hxx. ◆ SetNativeOnlyConn(). void ROOT::RWebWindow::SetNativeOnlyConn ; (; bool ; on = true). inline . configures that only native (own-created) connections are allowed ; Definition at line 311 of file RWebWindow.hxx. ◆ SetOperationTmout(). void ROOT::RWebWindow::SetOperationTmout ; (; float ; tm = 50.). inline . Set timeout for synchronous WebWindow operations. ; Definition at line 357 of file RWebWindow.hxx. ◆ SetPanelName(). void RWebWindow::SetPanelName ; (; const std::string & ; name). Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 272 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 319 of file RWebWindow.hxx. ◆ Set",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:52757,Modifiability,config,configured,52757,"nd class RWebDisplayHandle. friend . Definition at line 58 of file RWebWindow.hxx. ◆ RWebWindowsManager. friend class RWebWindowsManager. friend . Definition at line 56 of file RWebWindow.hxx. ◆ RWebWindowWSHandler. friend class RWebWindowWSHandler. friend . Definition at line 57 of file RWebWindow.hxx. Member Data Documentation. ◆ fCallbacksThrdId. std::thread::id ROOT::RWebWindow::fCallbacksThrdId. private . ! thread id where callbacks should be invoked ; Definition at line 163 of file RWebWindow.hxx. ◆ fCallbacksThrdIdSet. bool ROOT::RWebWindow::fCallbacksThrdIdSet {false}. private . ! flag indicating that thread id is assigned ; Definition at line 164 of file RWebWindow.hxx. ◆ fClearOnClose. std::shared_ptr<void> ROOT::RWebWindow::fClearOnClose. private . ! entry which is cleared when last connection is closed ; Definition at line 179 of file RWebWindow.hxx. ◆ fClientVersion. std::string ROOT::RWebWindow::fClientVersion. private . ! configured client version, used as prefix in scripts URL ; Definition at line 172 of file RWebWindow.hxx. ◆ fConn. ConnectionsList_t ROOT::RWebWindow::fConn. private . ! list of all accepted connections ; Definition at line 153 of file RWebWindow.hxx. ◆ fConnCallback. WebWindowConnectCallback_t ROOT::RWebWindow::fConnCallback. private . ! callback for connect event ; Definition at line 160 of file RWebWindow.hxx. ◆ fConnCnt. unsigned ROOT::RWebWindow::fConnCnt {0}. private . ! counter of new connections to assign ids ; Definition at line 151 of file RWebWindow.hxx. ◆ fConnLimit. unsigned ROOT::RWebWindow::fConnLimit {1}. private . ! number of allowed active connections ; Definition at line 155 of file RWebWindow.hxx. ◆ fConnMutex. std::mutex ROOT::RWebWindow::fConnMutex. mutableprivate . ! mutex used to protect connection list ; Definition at line 154 of file RWebWindow.hxx. ◆ fConnToken. std::string ROOT::RWebWindow::fConnToken. private . ! value of ""token"" URL parameter which should be provided for connecting window ; Definition at",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:2061,Performance,perform,performed,2061,"etDefaultPage() method.; Typically (but not necessarily) clients open web socket connection to the window and one can exchange data, using RWebWindow::Send() method and call-back function assigned via RWebWindow::SetDataCallBack(). ; Definition at line 54 of file RWebWindow.hxx. Classes; struct  MasterConn;  ; struct  QueueEntry;  ; struct  QueueItem;  ; struct  WebConn;  . Public Member Functions;  RWebWindow ();  RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ;  ;  ~RWebWindow ();  RWebWindow destructor Closes all connections and remove window from manager. ;  ; void AssignThreadId ();  Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ;  ; bool CanSend (unsigned connid, bool direct=true) const;  Returns true if sending via specified connection can be performed. ;  ; void CloseConnection (unsigned connid);  Close specified connection. ;  ; void CloseConnections ();  Closes all connection to clients Normally leads to closing of all correspondent browser windows Some browsers (like firefox) do not allow by default to close window. ;  ; std::string GetAddr () const;  Returns window address which is used in URL. ;  ; std::string GetClientVersion () const;  Returns current client version. ;  ; unsigned GetConnectionId (int num=0) const;  Returns connection id for specified connection sequence number Only active connections are returned - where clients confirms connection Total number of connections can be retrieved with NumConnections() method. ;  ; std::vector< unsigned > GetConnections (unsigned excludeid=0) const;  returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this conn",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:3672,Performance,queue,queue,3672," confirms connection Total number of connections can be retrieved with NumConnections() method. ;  ; std::vector< unsigned > GetConnections (unsigned excludeid=0) const;  returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ;  ; unsigned GetConnLimit () const;  returns configured connections limit (0 - default) ;  ; unsigned GetDisplayConnection () const;  Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool H",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:3883,Performance,queue,queue,3883,"ng connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ;  ; unsigned GetConnLimit () const;  returns configured connections limit (0 - default) ;  ; unsigned GetDisplayConnection () const;  Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connection",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:5687,Performance,perform,performed,5687,"nection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specified time. ;  ; void Send (unsigned connid, const std::string &data);  Sends data to specified connection. ;  ; void SendBinary (unsigned connid, const void *data, std::size_t len);  Send binary data to specified connection. ;  ; void SendBinary (unsigned connid, std::string &&data);  Send binary data to specified connection. ;  ; _R__DEPRECATED_LATER(""Use GetUrl() to get valid connection URL"") std _R__DEPRECATED_LATER(""Use GetAddr() to get valid connection URL"") std void SetCallBacks (WebWindowConnectCallback_t conn, WebWindowDataCallback_t data, WebWindowConnectCallback_t disconn=nullptr);  Set call-backs function for connect, data and disconnect events. ;  ; void SetClearOnClose (const std::shared_ptr< void > &handle=nullptr);  Set handle which is cleared when last active connection is closed Typically can be used to destroy web-based widget at such moment. ;  ; void SetClientVersion (const std::string &vers);  Set client version, used as p",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:8232,Performance,queue,queue,8232,"ring &token="""");  Configures connection token (default none) When specified, in URL of webpage such token should be provided as &token=value parameter, otherwise web window will refuse connection. ;  ; void SetDataCallBack (WebWindowDataCallback_t func);  Set call-back function for data, received from the clients via websocket. ;  ; void SetDefaultPage (const std::string &page);  Set content of default window HTML page This page returns when URL address of the window will be requested Either HTML code or file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ;  ; void SetDisconnectCallBack (WebWindowConnectCallback_t func);  Set call-back function for disconnecting. ;  ; void SetGeometry (unsigned width, unsigned height);  Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetMaxQueueLength (unsigned len=10);  configures maximal queue length of data which can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:13775,Performance,perform,performed,13775,"tr< WebConn > &conn, bool txt, const std::string &data, int chid);  Internal method to prepare text part of send data Should be called under locked connection mutex. ;  ; unsigned AddDisplayHandle (bool headless_mode, const std::string &key, std::unique_ptr< RWebDisplayHandle > &handle);  Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ;  ; unsigned AddEmbedWindow (std::shared_ptr< RWebWindow > window, unsigned connid, int channel);  Add embed window. ;  ; void AddMasterConnection (std::shared_ptr< RWebWindow > window, unsigned connid, int channel);  Add new master connection If there are many connections - only same master is allowed. ;  ; void CheckDataToSend (bool only_once=false);  Checks if new data can be send (internal use only) If necessary, provide credits to the client. ;  ; bool CheckDataToSend (std::shared_ptr< WebConn > &conn);  Checks if one should send data for specified connection Returns true when send operation was performed. ;  ; void CheckInactiveConnections ();  Check if there are connection which are inactive for longer time For instance, batch browser will be stopped if no activity for 30 sec is there. ;  ; void CheckPendingConnections ();  Check if started process(es) establish connection. ;  ; void CompleteWSSend (unsigned wsid);  Complete websocket send operation Clear ""doing send"" flag and check if next operation has to be started. ;  ; std::shared_ptr< RWebWindowWSHandler > CreateWSHandler (std::shared_ptr< RWebWindowsManager > mgr, unsigned id, double tmout);  Assigns manager reference, window id and creates websocket handler, used for communication with the clients. ;  ; std::shared_ptr< WebConn > FindConnection (unsigned wsid);  Find connection with specified websocket id. ;  ; unsigned FindHeadlessConnection ();  Returns connection id of window running in headless mode This can be special connection which may r",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:18866,Performance,queue,queue,18866,"hich has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex fConnMutex;  ! mutex used to protect connection list ;  ; std::string fConnToken;  ! value of ""token"" URL parameter which should be provided for connecting window ;  ; WebWindowDataCallback_t fDataCallback;  ! main callback when data over channel 1 is arrived ;  ; std::string fDefaultPage;  ! HTML page (or file name) returned when window URL is opened ;  ; WebWindowConnectCallback_t fDisconnCallback;  ! callback for disconnect event ;  ; bool fHasWindowThrd {false};  ! indicate if special window thread was started ;  ; unsigned fHeight {0};  ! initial window width and height when displayed, zeros are ignored ;  ; unsigned fId {0};  ! unique identifier ;  ; std::queue< QueueEntry > fInputQueue;  ! input queue for all callbacks ;  ; std::mutex fInputQueueMutex;  ! mutex to protect input queue ;  ; std::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchrono",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:18908,Performance,queue,queue,18908,"hich has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex fConnMutex;  ! mutex used to protect connection list ;  ; std::string fConnToken;  ! value of ""token"" URL parameter which should be provided for connecting window ;  ; WebWindowDataCallback_t fDataCallback;  ! main callback when data over channel 1 is arrived ;  ; std::string fDefaultPage;  ! HTML page (or file name) returned when window URL is opened ;  ; WebWindowConnectCallback_t fDisconnCallback;  ! callback for disconnect event ;  ; bool fHasWindowThrd {false};  ! indicate if special window thread was started ;  ; unsigned fHeight {0};  ! initial window width and height when displayed, zeros are ignored ;  ; unsigned fId {0};  ! unique identifier ;  ; std::queue< QueueEntry > fInputQueue;  ! input queue for all callbacks ;  ; std::mutex fInputQueueMutex;  ! mutex to protect input queue ;  ; std::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchrono",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:18992,Performance,queue,queue,18992,"hich has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex fConnMutex;  ! mutex used to protect connection list ;  ; std::string fConnToken;  ! value of ""token"" URL parameter which should be provided for connecting window ;  ; WebWindowDataCallback_t fDataCallback;  ! main callback when data over channel 1 is arrived ;  ; std::string fDefaultPage;  ! HTML page (or file name) returned when window URL is opened ;  ; WebWindowConnectCallback_t fDisconnCallback;  ! callback for disconnect event ;  ; bool fHasWindowThrd {false};  ! indicate if special window thread was started ;  ; unsigned fHeight {0};  ! initial window width and height when displayed, zeros are ignored ;  ; unsigned fId {0};  ! unique identifier ;  ; std::queue< QueueEntry > fInputQueue;  ! input queue for all callbacks ;  ; std::mutex fInputQueueMutex;  ! mutex to protect input queue ;  ; std::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchrono",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:19213,Performance,queue,queue,19213,"hich has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex fConnMutex;  ! mutex used to protect connection list ;  ; std::string fConnToken;  ! value of ""token"" URL parameter which should be provided for connecting window ;  ; WebWindowDataCallback_t fDataCallback;  ! main callback when data over channel 1 is arrived ;  ; std::string fDefaultPage;  ! HTML page (or file name) returned when window URL is opened ;  ; WebWindowConnectCallback_t fDisconnCallback;  ! callback for disconnect event ;  ; bool fHasWindowThrd {false};  ! indicate if special window thread was started ;  ; unsigned fHeight {0};  ! initial window width and height when displayed, zeros are ignored ;  ; unsigned fId {0};  ! unique identifier ;  ; std::queue< QueueEntry > fInputQueue;  ! input queue for all callbacks ;  ; std::mutex fInputQueueMutex;  ! mutex to protect input queue ;  ; std::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchrono",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:19453,Performance,perform,perform,19453,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:19725,Performance,perform,performed,19725,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:24941,Performance,perform,performed,24941,"Window ; (; std::shared_ptr< RWebWindow > ; window, . unsigned ; connid, . int ; channel . ). private . Add embed window. ; Definition at line 1888 of file RWebWindow.cxx. ◆ AddMasterConnection(). void RWebWindow::AddMasterConnection ; (; std::shared_ptr< RWebWindow > ; window, . unsigned ; connid, . int ; channel . ). private . Add new master connection If there are many connections - only same master is allowed. ; Definition at line 311 of file RWebWindow.cxx. ◆ AssignThreadId(). void RWebWindow::AssignThreadId ; (; ). Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ; Definition at line 1687 of file RWebWindow.cxx. ◆ CanSend(). bool RWebWindow::CanSend ; (; unsigned ; connid, . bool ; direct = true . ); const. Returns true if sending via specified connection can be performed. ; Parameters. connidconnection id, when 0 - all existing connections are checked ; directwhen true, checks if direct sending (without queuing) is possible . Definition at line 1526 of file RWebWindow.cxx. ◆ CheckDataToSend() [1/2]. void RWebWindow::CheckDataToSend ; (; bool ; only_once = false). private . Checks if new data can be send (internal use only) If necessary, provide credits to the client. ; Parameters. only_onceif true, data sending performed once or until there is no data to send . Definition at line 1249 of file RWebWindow.cxx. ◆ CheckDataToSend() [2/2]. bool RWebWindow::CheckDataToSend ; (; std::shared_ptr< WebConn > & ; conn). private . Checks if one should send data for specified connection Returns true when send operation was performed. ; Definition at line 1191 of file RWebWindow.cxx. ◆ CheckInactiveConnections(). void RWebWindow::CheckInactiveConnections ; (; ). private . Check if there are connection which are inactive for longer ti",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:25400,Performance,perform,performed,25400,"RWebWindow::AssignThreadId ; (; ). Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ; Definition at line 1687 of file RWebWindow.cxx. ◆ CanSend(). bool RWebWindow::CanSend ; (; unsigned ; connid, . bool ; direct = true . ); const. Returns true if sending via specified connection can be performed. ; Parameters. connidconnection id, when 0 - all existing connections are checked ; directwhen true, checks if direct sending (without queuing) is possible . Definition at line 1526 of file RWebWindow.cxx. ◆ CheckDataToSend() [1/2]. void RWebWindow::CheckDataToSend ; (; bool ; only_once = false). private . Checks if new data can be send (internal use only) If necessary, provide credits to the client. ; Parameters. only_onceif true, data sending performed once or until there is no data to send . Definition at line 1249 of file RWebWindow.cxx. ◆ CheckDataToSend() [2/2]. bool RWebWindow::CheckDataToSend ; (; std::shared_ptr< WebConn > & ; conn). private . Checks if one should send data for specified connection Returns true when send operation was performed. ; Definition at line 1191 of file RWebWindow.cxx. ◆ CheckInactiveConnections(). void RWebWindow::CheckInactiveConnections ; (; ). private . Check if there are connection which are inactive for longer time For instance, batch browser will be stopped if no activity for 30 sec is there. ; Definition at line 659 of file RWebWindow.cxx. ◆ CheckPendingConnections(). void RWebWindow::CheckPendingConnections ; (; ). private . Check if started process(es) establish connection. ; After timeout such processed will be killed Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data ; Definition at line 625 of file RWebWindow.cxx. ◆ CloseConnection(). vo",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:25705,Performance,perform,performed,25705,"om other thread Normally should be invoked before Show() method is called. ; Definition at line 1687 of file RWebWindow.cxx. ◆ CanSend(). bool RWebWindow::CanSend ; (; unsigned ; connid, . bool ; direct = true . ); const. Returns true if sending via specified connection can be performed. ; Parameters. connidconnection id, when 0 - all existing connections are checked ; directwhen true, checks if direct sending (without queuing) is possible . Definition at line 1526 of file RWebWindow.cxx. ◆ CheckDataToSend() [1/2]. void RWebWindow::CheckDataToSend ; (; bool ; only_once = false). private . Checks if new data can be send (internal use only) If necessary, provide credits to the client. ; Parameters. only_onceif true, data sending performed once or until there is no data to send . Definition at line 1249 of file RWebWindow.cxx. ◆ CheckDataToSend() [2/2]. bool RWebWindow::CheckDataToSend ; (; std::shared_ptr< WebConn > & ; conn). private . Checks if one should send data for specified connection Returns true when send operation was performed. ; Definition at line 1191 of file RWebWindow.cxx. ◆ CheckInactiveConnections(). void RWebWindow::CheckInactiveConnections ; (; ). private . Check if there are connection which are inactive for longer time For instance, batch browser will be stopped if no activity for 30 sec is there. ; Definition at line 659 of file RWebWindow.cxx. ◆ CheckPendingConnections(). void RWebWindow::CheckPendingConnections ; (; ). private . Check if started process(es) establish connection. ; After timeout such processed will be killed Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data ; Definition at line 625 of file RWebWindow.cxx. ◆ CloseConnection(). void RWebWindow::CloseConnection ; (; unsigned ; connid). Close specified connection. ; Parameters. connidconnection id, when 0 - all connections will be closed . Definition at line 1489 of file RWebWindow.cxx. ◆ CloseConnections(). void RWebWindow::CloseC",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:31784,Performance,queue,queue,31784,"imed out Batch jobs will be ignored here Returns 0 if connection not exists. ; Definition at line 244 of file RWebWindow.cxx. ◆ GetHeight(). unsigned ROOT::RWebWindow::GetHeight ; (; ); const. inline . returns configured window height (0 - default) ; Definition at line 285 of file RWebWindow.hxx. ◆ GetId(). unsigned ROOT::RWebWindow::GetId ; (; ); const. inline . Returns ID for the window - unique inside window manager. ; Definition at line 251 of file RWebWindow.hxx. ◆ GetManager(). std::shared_ptr< RWebWindowsManager > ROOT::RWebWindow::GetManager ; (; ); const. inline . Returns window manager. ; Definition at line 254 of file RWebWindow.hxx. ◆ GetMasterConnections(). std::vector< RWebWindow::MasterConn > RWebWindow::GetMasterConnections ; (; unsigned ; connid = 0); const. private . Get list of master connections. ; Definition at line 326 of file RWebWindow.cxx. ◆ GetMaxQueueLength(). unsigned ROOT::RWebWindow::GetMaxQueueLength ; (; ); const. inline . Return maximal queue length of data which can be held by window. ; Definition at line 307 of file RWebWindow.hxx. ◆ GetOperationTmout(). float ROOT::RWebWindow::GetOperationTmout ; (; ); const. inline . Returns timeout for synchronous WebWindow operations. ; Definition at line 354 of file RWebWindow.hxx. ◆ GetSendQueueLength(). int RWebWindow::GetSendQueueLength ; (; unsigned ; connid); const. Returns send queue length for specified connection. ; Parameters. connidconnection id, 0 - maximal value for all connections is returned If wrong connection id specified, -1 is return . Definition at line 1551 of file RWebWindow.cxx. ◆ GetServer(). THttpServer * RWebWindow::GetServer ; (; ). Return THttpServer instance serving requests to the window. ; Definition at line 181 of file RWebWindow.cxx. ◆ GetUrl(). std::string RWebWindow::GetUrl ; (; bool ; remote = true). Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<conn",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:32179,Performance,queue,queue,32179," - unique inside window manager. ; Definition at line 251 of file RWebWindow.hxx. ◆ GetManager(). std::shared_ptr< RWebWindowsManager > ROOT::RWebWindow::GetManager ; (; ); const. inline . Returns window manager. ; Definition at line 254 of file RWebWindow.hxx. ◆ GetMasterConnections(). std::vector< RWebWindow::MasterConn > RWebWindow::GetMasterConnections ; (; unsigned ; connid = 0); const. private . Get list of master connections. ; Definition at line 326 of file RWebWindow.cxx. ◆ GetMaxQueueLength(). unsigned ROOT::RWebWindow::GetMaxQueueLength ; (; ); const. inline . Return maximal queue length of data which can be held by window. ; Definition at line 307 of file RWebWindow.hxx. ◆ GetOperationTmout(). float ROOT::RWebWindow::GetOperationTmout ; (; ); const. inline . Returns timeout for synchronous WebWindow operations. ; Definition at line 354 of file RWebWindow.hxx. ◆ GetSendQueueLength(). int RWebWindow::GetSendQueueLength ; (; unsigned ; connid); const. Returns send queue length for specified connection. ; Parameters. connidconnection id, 0 - maximal value for all connections is returned If wrong connection id specified, -1 is return . Definition at line 1551 of file RWebWindow.cxx. ◆ GetServer(). THttpServer * RWebWindow::GetServer ; (; ). Return THttpServer instance serving requests to the window. ; Definition at line 181 of file RWebWindow.cxx. ◆ GetUrl(). std::string RWebWindow::GetUrl ; (; bool ; remote = true). Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ; Parameters. remoteis true, real HTTP server will be started automatically and widget can be connected from the web browser. If; remoteis false, HTTP server will not be started and window can be connected only from ROOT application itself. !!! WARNING - do not invoke this method without real need, each URL consumes resources in widget and in http server .",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:39954,Performance,perform,performed,39954,"ctly to test client code without running C++ server ; Definition at line 1397 of file RWebWindow.cxx. ◆ RemoveConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::RemoveConnection ; (; unsigned ; wsid). private . Remove connection with given websocket id. ; Definition at line 279 of file RWebWindow.cxx. ◆ RemoveEmbedWindow(). void RWebWindow::RemoveEmbedWindow ; (; unsigned ; connid, . int ; channel . ). private . Remove RWebWindow associated with the channelfEmbed. ; Definition at line 1909 of file RWebWindow.cxx. ◆ RemoveKey(). void RWebWindow::RemoveKey ; (; const std::string & ; key). private . Removes all connections with the key. ; Definition at line 584 of file RWebWindow.cxx. ◆ RemoveMasterConnection(). void RWebWindow::RemoveMasterConnection ; (; unsigned ; connid = 0). private . Remove master connection - if any. ; Definition at line 344 of file RWebWindow.cxx. ◆ Run(). void RWebWindow::Run ; (; double ; tm = 0.). Run window functionality for specified time If no action can be performed - just sleep specified time. ; Definition at line 1869 of file RWebWindow.cxx. ◆ Send(). void RWebWindow::Send ; (; unsigned ; connid, . const std::string & ; data . ). Sends data to specified connection. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; datadata to be copied to SubmitData function . Definition at line 1651 of file RWebWindow.cxx. ◆ SendBinary() [1/2]. void RWebWindow::SendBinary ; (; unsigned ; connid, . const void * ; data, . std::size_t ; len . ). Send binary data to specified connection. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; datapointer to binary data ; lennumber of bytes in data . Definition at line 1672 of file RWebWindow.cxx. ◆ SendBinary() [2/2]. void RWebWindow::SendBinary ; (; unsigned ; connid, . std::string && ; data . ). Send binary data to specified connection. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; datadata to b",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:45367,Performance,queue,queue,45367,"ge(). void ROOT::RWebWindow::SetDefaultPage ; (; const std::string & ; page). inline . Set content of default window HTML page This page returns when URL address of the window will be requested Either HTML code or file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ; Definition at line 260 of file RWebWindow.hxx. ◆ SetDisconnectCallBack(). void RWebWindow::SetDisconnectCallBack ; (; WebWindowConnectCallback_t ; func). Set call-back function for disconnecting. ; Definition at line 1795 of file RWebWindow.cxx. ◆ SetGeometry(). void ROOT::RWebWindow::SetGeometry ; (; unsigned ; width, . unsigned ; height . ). inline . Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 265 of file RWebWindow.hxx. ◆ SetMaxQueueLength(). void ROOT::RWebWindow::SetMaxQueueLength ; (; unsigned ; len = 10). inline . configures maximal queue length of data which can be held by window ; Definition at line 303 of file RWebWindow.hxx. ◆ SetNativeOnlyConn(). void ROOT::RWebWindow::SetNativeOnlyConn ; (; bool ; on = true). inline . configures that only native (own-created) connections are allowed ; Definition at line 311 of file RWebWindow.hxx. ◆ SetOperationTmout(). void ROOT::RWebWindow::SetOperationTmout ; (; float ; tm = 50.). inline . Set timeout for synchronous WebWindow operations. ; Definition at line 357 of file RWebWindow.hxx. ◆ SetPanelName(). void RWebWindow::SetPanelName ; (; const std::string & ; name). Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 272 of file RWebWindow.hx",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:49773,Performance,latency,latency,49773," Parameters. connidconnection id, when 0 - data will be send to all connections ; txtis text message that should be sent ; datadata to be std-moved to SubmitData function ; chidchannel id, 1 - normal communication, 0 - internal with highest priority . Definition at line 1571 of file RWebWindow.cxx. ◆ Sync(). void RWebWindow::Sync ; (; ). Special method to process all internal activity when window runs in separate thread. ; Definition at line 1269 of file RWebWindow.cxx. ◆ TerminateROOT(). void RWebWindow::TerminateROOT ; (; ). Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ; Definition at line 1935 of file RWebWindow.cxx. ◆ UseServerThreads(). void RWebWindow::UseServerThreads ; (; ). Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides proper locking and does not block. ; Such mode provides minimal possible latency Must be called before callbacks are assigned ; Definition at line 1709 of file RWebWindow.cxx. ◆ WaitFor(). int RWebWindow::WaitFor ; (; WebWindowWaitFunc_t ; check). Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ; Parameter spent_tm is time in seconds, which already spent inside the function First non-zero value breaks loop and result is returned. Runs application mainloop and short sleeps in-between ; Definition at line 1831 of file RWebWindow.cxx. ◆ WaitForTimed() [1/2]. int RWebWindow::WaitForTimed ; (; WebWindowWaitFunc_t ; check). Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ; Parameter spent_tm in lambda is time in seconds, which already spent inside the function First non-zero value breaks waiting loop and result is r",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:54872,Performance,queue,queue,54872,"ndow::fDataCallback. private . ! main callback when data over channel 1 is arrived ; Definition at line 161 of file RWebWindow.hxx. ◆ fDefaultPage. std::string ROOT::RWebWindow::fDefaultPage. private . ! HTML page (or file name) returned when window URL is opened ; Definition at line 142 of file RWebWindow.hxx. ◆ fDisconnCallback. WebWindowConnectCallback_t ROOT::RWebWindow::fDisconnCallback. private . ! callback for disconnect event ; Definition at line 162 of file RWebWindow.hxx. ◆ fHasWindowThrd. bool ROOT::RWebWindow::fHasWindowThrd {false}. private . ! indicate if special window thread was started ; Definition at line 165 of file RWebWindow.hxx. ◆ fHeight. unsigned ROOT::RWebWindow::fHeight {0}. private . ! initial window width and height when displayed, zeros are ignored ; Definition at line 169 of file RWebWindow.hxx. ◆ fId. unsigned ROOT::RWebWindow::fId {0}. private . ! unique identifier ; Definition at line 144 of file RWebWindow.hxx. ◆ fInputQueue. std::queue<QueueEntry> ROOT::RWebWindow::fInputQueue. private . ! input queue for all callbacks ; Definition at line 167 of file RWebWindow.hxx. ◆ fInputQueueMutex. std::mutex ROOT::RWebWindow::fInputQueueMutex. private . ! mutex to protect input queue ; Definition at line 168 of file RWebWindow.hxx. ◆ fMaster. std::shared_ptr<RWebWindow> ROOT::RWebWindow::fMaster. private . ! master window where this window is embedded ; Definition at line 140 of file RWebWindow.hxx. ◆ fMasterConns. std::vector<MasterConn> ROOT::RWebWindow::fMasterConns. private . ! master connections ; Definition at line 141 of file RWebWindow.hxx. ◆ fMaxQueueLength. unsigned ROOT::RWebWindow::fMaxQueueLength {10}. private . ! maximal number of queue entries ; Definition at line 159 of file RWebWindow.hxx. ◆ fMgr. std::shared_ptr<RWebWindowsManager> ROOT::RWebWindow::fMgr. private . ! display manager ; Definition at line 139 of file RWebWindow.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native conn",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:54939,Performance,queue,queue,54939,"arrived ; Definition at line 161 of file RWebWindow.hxx. ◆ fDefaultPage. std::string ROOT::RWebWindow::fDefaultPage. private . ! HTML page (or file name) returned when window URL is opened ; Definition at line 142 of file RWebWindow.hxx. ◆ fDisconnCallback. WebWindowConnectCallback_t ROOT::RWebWindow::fDisconnCallback. private . ! callback for disconnect event ; Definition at line 162 of file RWebWindow.hxx. ◆ fHasWindowThrd. bool ROOT::RWebWindow::fHasWindowThrd {false}. private . ! indicate if special window thread was started ; Definition at line 165 of file RWebWindow.hxx. ◆ fHeight. unsigned ROOT::RWebWindow::fHeight {0}. private . ! initial window width and height when displayed, zeros are ignored ; Definition at line 169 of file RWebWindow.hxx. ◆ fId. unsigned ROOT::RWebWindow::fId {0}. private . ! unique identifier ; Definition at line 144 of file RWebWindow.hxx. ◆ fInputQueue. std::queue<QueueEntry> ROOT::RWebWindow::fInputQueue. private . ! input queue for all callbacks ; Definition at line 167 of file RWebWindow.hxx. ◆ fInputQueueMutex. std::mutex ROOT::RWebWindow::fInputQueueMutex. private . ! mutex to protect input queue ; Definition at line 168 of file RWebWindow.hxx. ◆ fMaster. std::shared_ptr<RWebWindow> ROOT::RWebWindow::fMaster. private . ! master window where this window is embedded ; Definition at line 140 of file RWebWindow.hxx. ◆ fMasterConns. std::vector<MasterConn> ROOT::RWebWindow::fMasterConns. private . ! master connections ; Definition at line 141 of file RWebWindow.hxx. ◆ fMaxQueueLength. unsigned ROOT::RWebWindow::fMaxQueueLength {10}. private . ! maximal number of queue entries ; Definition at line 159 of file RWebWindow.hxx. ◆ fMgr. std::shared_ptr<RWebWindowsManager> ROOT::RWebWindow::fMgr. private . ! display manager ; Definition at line 139 of file RWebWindow.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native connection are allowed, created by Show() method ; Definition at line 157 of fil",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:55114,Performance,queue,queue,55114,"rned when window URL is opened ; Definition at line 142 of file RWebWindow.hxx. ◆ fDisconnCallback. WebWindowConnectCallback_t ROOT::RWebWindow::fDisconnCallback. private . ! callback for disconnect event ; Definition at line 162 of file RWebWindow.hxx. ◆ fHasWindowThrd. bool ROOT::RWebWindow::fHasWindowThrd {false}. private . ! indicate if special window thread was started ; Definition at line 165 of file RWebWindow.hxx. ◆ fHeight. unsigned ROOT::RWebWindow::fHeight {0}. private . ! initial window width and height when displayed, zeros are ignored ; Definition at line 169 of file RWebWindow.hxx. ◆ fId. unsigned ROOT::RWebWindow::fId {0}. private . ! unique identifier ; Definition at line 144 of file RWebWindow.hxx. ◆ fInputQueue. std::queue<QueueEntry> ROOT::RWebWindow::fInputQueue. private . ! input queue for all callbacks ; Definition at line 167 of file RWebWindow.hxx. ◆ fInputQueueMutex. std::mutex ROOT::RWebWindow::fInputQueueMutex. private . ! mutex to protect input queue ; Definition at line 168 of file RWebWindow.hxx. ◆ fMaster. std::shared_ptr<RWebWindow> ROOT::RWebWindow::fMaster. private . ! master window where this window is embedded ; Definition at line 140 of file RWebWindow.hxx. ◆ fMasterConns. std::vector<MasterConn> ROOT::RWebWindow::fMasterConns. private . ! master connections ; Definition at line 141 of file RWebWindow.hxx. ◆ fMaxQueueLength. unsigned ROOT::RWebWindow::fMaxQueueLength {10}. private . ! maximal number of queue entries ; Definition at line 159 of file RWebWindow.hxx. ◆ fMgr. std::shared_ptr<RWebWindowsManager> ROOT::RWebWindow::fMgr. private . ! display manager ; Definition at line 139 of file RWebWindow.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native connection are allowed, created by Show() method ; Definition at line 157 of file RWebWindow.hxx. ◆ fOperationTmout. float ROOT::RWebWindow::fOperationTmout {50.}. private . ! timeout in seconds to perform synchronous operation, default ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:55590,Performance,queue,queue,55590,"te . ! initial window width and height when displayed, zeros are ignored ; Definition at line 169 of file RWebWindow.hxx. ◆ fId. unsigned ROOT::RWebWindow::fId {0}. private . ! unique identifier ; Definition at line 144 of file RWebWindow.hxx. ◆ fInputQueue. std::queue<QueueEntry> ROOT::RWebWindow::fInputQueue. private . ! input queue for all callbacks ; Definition at line 167 of file RWebWindow.hxx. ◆ fInputQueueMutex. std::mutex ROOT::RWebWindow::fInputQueueMutex. private . ! mutex to protect input queue ; Definition at line 168 of file RWebWindow.hxx. ◆ fMaster. std::shared_ptr<RWebWindow> ROOT::RWebWindow::fMaster. private . ! master window where this window is embedded ; Definition at line 140 of file RWebWindow.hxx. ◆ fMasterConns. std::vector<MasterConn> ROOT::RWebWindow::fMasterConns. private . ! master connections ; Definition at line 141 of file RWebWindow.hxx. ◆ fMaxQueueLength. unsigned ROOT::RWebWindow::fMaxQueueLength {10}. private . ! maximal number of queue entries ; Definition at line 159 of file RWebWindow.hxx. ◆ fMgr. std::shared_ptr<RWebWindowsManager> ROOT::RWebWindow::fMgr. private . ! display manager ; Definition at line 139 of file RWebWindow.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native connection are allowed, created by Show() method ; Definition at line 157 of file RWebWindow.hxx. ◆ fOperationTmout. float ROOT::RWebWindow::fOperationTmout {50.}. private . ! timeout in seconds to perform synchronous operation, default 50s ; Definition at line 171 of file RWebWindow.hxx. ◆ fPanelName. std::string ROOT::RWebWindow::fPanelName. private . ! panel name which should be shown in the window ; Definition at line 143 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 152 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event proc",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:56087,Performance,perform,perform,56087,"e ; Definition at line 168 of file RWebWindow.hxx. ◆ fMaster. std::shared_ptr<RWebWindow> ROOT::RWebWindow::fMaster. private . ! master window where this window is embedded ; Definition at line 140 of file RWebWindow.hxx. ◆ fMasterConns. std::vector<MasterConn> ROOT::RWebWindow::fMasterConns. private . ! master connections ; Definition at line 141 of file RWebWindow.hxx. ◆ fMaxQueueLength. unsigned ROOT::RWebWindow::fMaxQueueLength {10}. private . ! maximal number of queue entries ; Definition at line 159 of file RWebWindow.hxx. ◆ fMgr. std::shared_ptr<RWebWindowsManager> ROOT::RWebWindow::fMgr. private . ! display manager ; Definition at line 139 of file RWebWindow.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native connection are allowed, created by Show() method ; Definition at line 157 of file RWebWindow.hxx. ◆ fOperationTmout. float ROOT::RWebWindow::fOperationTmout {50.}. private . ! timeout in seconds to perform synchronous operation, default 50s ; Definition at line 171 of file RWebWindow.hxx. ◆ fPanelName. std::string ROOT::RWebWindow::fPanelName. private . ! panel name which should be shown in the window ; Definition at line 143 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 152 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event processing performed in dedicated thread ; Definition at line 147 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 177 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:56616,Performance,perform,performed,56616,"WebWindow.hxx. ◆ fMgr. std::shared_ptr<RWebWindowsManager> ROOT::RWebWindow::fMgr. private . ! display manager ; Definition at line 139 of file RWebWindow.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native connection are allowed, created by Show() method ; Definition at line 157 of file RWebWindow.hxx. ◆ fOperationTmout. float ROOT::RWebWindow::fOperationTmout {50.}. private . ! timeout in seconds to perform synchronous operation, default 50s ; Definition at line 171 of file RWebWindow.hxx. ◆ fPanelName. std::string ROOT::RWebWindow::fPanelName. private . ! panel name which should be shown in the window ; Definition at line 143 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 152 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event processing performed in dedicated thread ; Definition at line 147 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 177 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line 175 of file RWebWindow.hxx. ◆ fProtocolFileName. std::string ROOT::RWebWindow::fProtocolFileName. private . ! local file where communication protocol will be written ; Definition at line 173 of file RWebWindow.hxx. ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 176 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the wid",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:3770,Safety,timeout,timeout,3770,"std::vector< unsigned > GetConnections (unsigned excludeid=0) const;  returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ;  ; unsigned GetConnLimit () const;  returns configured connections limit (0 - default) ;  ; unsigned GetDisplayConnection () const;  Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:8441,Safety,timeout,timeout,8441,";  ; void SetDataCallBack (WebWindowDataCallback_t func);  Set call-back function for data, received from the clients via websocket. ;  ; void SetDefaultPage (const std::string &page);  Set content of default window HTML page This page returns when URL address of the window will be requested Either HTML code or file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ;  ; void SetDisconnectCallBack (WebWindowConnectCallback_t func);  Set call-back function for disconnecting. ;  ; void SetGeometry (unsigned width, unsigned height);  Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetMaxQueueLength (unsigned len=10);  configures maximal queue length of data which can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ;  ; unsigned Show (const RWebDisplayArgs &args="""");  Show window in specified location. ;  ; void StartThread ();  Star",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:11491,Safety,detect,detect,11491,"n or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  ; int WaitForTimed (WebWindowWaitFunc_t check, double duration);  Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  . Static Public Member Functions; static std::shared_ptr< RWebWindow > Create ();  Create new RWebWindow Using default RWebWindowsManager. ;  ; static bool EmbedFileDialog (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embedded() providing received string as second argument. ;  ; static bool IsFileDialogMessage (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ;  ; static unsigned ShowWindow (std::shared_ptr< RWebWindow > window, const RWebDisplayArgs &args="""");  Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ;  . Private Types; using ConnectionsList_t = std::vector< std::shared_ptr< WebConn > >;  ; enum  EQueueEntryKind { kind_None; , kind_Connect; , kind_Data; , kind_Disconnect; };  ; using timestamp_t = std::chrono::time_point< std::chrono::system_clock >;  . Private Member Functions; bool _CanTrustIn (std::shared_ptr< WebConn > &conn, ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:19431,Safety,timeout,timeout,19431,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:26197,Safety,timeout,timeout,26197," send (internal use only) If necessary, provide credits to the client. ; Parameters. only_onceif true, data sending performed once or until there is no data to send . Definition at line 1249 of file RWebWindow.cxx. ◆ CheckDataToSend() [2/2]. bool RWebWindow::CheckDataToSend ; (; std::shared_ptr< WebConn > & ; conn). private . Checks if one should send data for specified connection Returns true when send operation was performed. ; Definition at line 1191 of file RWebWindow.cxx. ◆ CheckInactiveConnections(). void RWebWindow::CheckInactiveConnections ; (; ). private . Check if there are connection which are inactive for longer time For instance, batch browser will be stopped if no activity for 30 sec is there. ; Definition at line 659 of file RWebWindow.cxx. ◆ CheckPendingConnections(). void RWebWindow::CheckPendingConnections ; (; ). private . Check if started process(es) establish connection. ; After timeout such processed will be killed Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data ; Definition at line 625 of file RWebWindow.cxx. ◆ CloseConnection(). void RWebWindow::CloseConnection ; (; unsigned ; connid). Close specified connection. ; Parameters. connidconnection id, when 0 - all connections will be closed . Definition at line 1489 of file RWebWindow.cxx. ◆ CloseConnections(). void RWebWindow::CloseConnections ; (; ). Closes all connection to clients Normally leads to closing of all correspondent browser windows Some browsers (like firefox) do not allow by default to close window. ; Definition at line 1480 of file RWebWindow.cxx. ◆ CompleteWSSend(). void RWebWindow::CompleteWSSend ; (; unsigned ; wsid). private . Complete websocket send operation Clear ""doing send"" flag and check if next operation has to be started. ; Definition at line 1121 of file RWebWindow.cxx. ◆ Create(). std::shared_ptr< RWebWindow > RWebWindow::Create ; (; ). static . Create new RWebWindow Using default RWebWindowsManager. ; Definition ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:28171,Safety,detect,detect,28171,"d_ptr< RWebWindow > RWebWindow::Create ; (; ). static . Create new RWebWindow Using default RWebWindowsManager. ; Definition at line 1925 of file RWebWindow.cxx. ◆ CreateWSHandler(). std::shared_ptr< RWebWindowWSHandler > RWebWindow::CreateWSHandler ; (; std::shared_ptr< RWebWindowsManager > ; mgr, . unsigned ; id, . double ; tmout . ). private . Assigns manager reference, window id and creates websocket handler, used for communication with the clients. ; Definition at line 152 of file RWebWindow.cxx. ◆ EmbedFileDialog(). bool RWebWindow::EmbedFileDialog ; (; const std::shared_ptr< RWebWindow > & ; window, . unsigned ; connid, . const std::string & ; args . ). static . Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embedded() providing received string as second argument. ; Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected ; Definition at line 2019 of file RWebWindow.cxx. ◆ FindConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::FindConnection ; (; unsigned ; wsid). private . Find connection with specified websocket id. ; Find connection with given websocket id. ; Definition at line 264 of file RWebWindow.cxx. ◆ FindHeadlessConnection(). unsigned RWebWindow::FindHeadlessConnection ; (; ). private . Returns connection id of window running in headless mode This can be special connection which may run picture production jobs in background Connection to that job may not be initialized yet If connection does not exists, returns 0. ; Definition at line 221 of file RWebWindow.cxx. ◆ GenerateKey(). std::string RWebWindow::GenerateKey ; (; ); const. private . Generate new unique key for the wind",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:31980,Safety,timeout,timeout,31980,"e . returns configured window height (0 - default) ; Definition at line 285 of file RWebWindow.hxx. ◆ GetId(). unsigned ROOT::RWebWindow::GetId ; (; ); const. inline . Returns ID for the window - unique inside window manager. ; Definition at line 251 of file RWebWindow.hxx. ◆ GetManager(). std::shared_ptr< RWebWindowsManager > ROOT::RWebWindow::GetManager ; (; ); const. inline . Returns window manager. ; Definition at line 254 of file RWebWindow.hxx. ◆ GetMasterConnections(). std::vector< RWebWindow::MasterConn > RWebWindow::GetMasterConnections ; (; unsigned ; connid = 0); const. private . Get list of master connections. ; Definition at line 326 of file RWebWindow.cxx. ◆ GetMaxQueueLength(). unsigned ROOT::RWebWindow::GetMaxQueueLength ; (; ); const. inline . Return maximal queue length of data which can be held by window. ; Definition at line 307 of file RWebWindow.hxx. ◆ GetOperationTmout(). float ROOT::RWebWindow::GetOperationTmout ; (; ); const. inline . Returns timeout for synchronous WebWindow operations. ; Definition at line 354 of file RWebWindow.hxx. ◆ GetSendQueueLength(). int RWebWindow::GetSendQueueLength ; (; unsigned ; connid); const. Returns send queue length for specified connection. ; Parameters. connidconnection id, 0 - maximal value for all connections is returned If wrong connection id specified, -1 is return . Definition at line 1551 of file RWebWindow.cxx. ◆ GetServer(). THttpServer * RWebWindow::GetServer ; (; ). Return THttpServer instance serving requests to the window. ; Definition at line 181 of file RWebWindow.cxx. ◆ GetUrl(). std::string RWebWindow::GetUrl ; (; bool ; remote = true). Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ; Parameters. remoteis true, real HTTP server will be started automatically and widget can be connected from the web browser. If; remoteis false, HTTP server will no",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:43239,Safety,detect,detected,43239,"lback_t ; func). Set call-back function for new connection. ; Definition at line 1785 of file RWebWindow.cxx. ◆ SetConnLimit(). void RWebWindow::SetConnLimit ; (; unsigned ; lmt = 0). Configure maximal number of allowed connections - 0 is unlimited Will not affect already existing connections Default is 1 - the only client is allowed. ; Definition at line 694 of file RWebWindow.cxx. ◆ SetConnToken(). void RWebWindow::SetConnToken ; (; const std::string & ; token = """"). Configures connection token (default none) When specified, in URL of webpage such token should be provided as &token=value parameter, otherwise web window will refuse connection. ; Definition at line 716 of file RWebWindow.cxx. ◆ SetDataCallBack(). void RWebWindow::SetDataCallBack ; (; WebWindowDataCallback_t ; func). Set call-back function for data, received from the clients via websocket. ; Function should have signature like void func(unsigned connid, const std::string &data) First argument identifies connection (unique for each window), second argument is received data; At the moment when callback is assigned, RWebWindow working thread is detected. If called not from main application thread, RWebWindow::Run() function must be regularly called from that thread.; Most simple way to assign call-back - use of c++11 lambdas like: auto win = RWebWindow::Create();; win->SetDefaultPage(""file:./page.htm"");; win->SetDataCallBack(; [](unsigned connid, const std::string &data) {; printf(""Conn:%u data:%s\n"", connid, data.c_str());; }; );; win->Show();; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; winOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectang",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:45778,Safety,timeout,timeout,45778,"◆ SetDisconnectCallBack(). void RWebWindow::SetDisconnectCallBack ; (; WebWindowConnectCallback_t ; func). Set call-back function for disconnecting. ; Definition at line 1795 of file RWebWindow.cxx. ◆ SetGeometry(). void ROOT::RWebWindow::SetGeometry ; (; unsigned ; width, . unsigned ; height . ). inline . Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 265 of file RWebWindow.hxx. ◆ SetMaxQueueLength(). void ROOT::RWebWindow::SetMaxQueueLength ; (; unsigned ; len = 10). inline . configures maximal queue length of data which can be held by window ; Definition at line 303 of file RWebWindow.hxx. ◆ SetNativeOnlyConn(). void ROOT::RWebWindow::SetNativeOnlyConn ; (; bool ; on = true). inline . configures that only native (own-created) connections are allowed ; Definition at line 311 of file RWebWindow.hxx. ◆ SetOperationTmout(). void ROOT::RWebWindow::SetOperationTmout ; (; float ; tm = 50.). inline . Set timeout for synchronous WebWindow operations. ; Definition at line 357 of file RWebWindow.hxx. ◆ SetPanelName(). void RWebWindow::SetPanelName ; (; const std::string & ; name). Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 272 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 319 of file RWebWindow.hxx. ◆ SetStartDialogFunc(). void RWebWindow::SetStartDialogFunc ; (; std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> ; func). staticprivate . Confi",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:56065,Safety,timeout,timeout,56065,"e ; Definition at line 168 of file RWebWindow.hxx. ◆ fMaster. std::shared_ptr<RWebWindow> ROOT::RWebWindow::fMaster. private . ! master window where this window is embedded ; Definition at line 140 of file RWebWindow.hxx. ◆ fMasterConns. std::vector<MasterConn> ROOT::RWebWindow::fMasterConns. private . ! master connections ; Definition at line 141 of file RWebWindow.hxx. ◆ fMaxQueueLength. unsigned ROOT::RWebWindow::fMaxQueueLength {10}. private . ! maximal number of queue entries ; Definition at line 159 of file RWebWindow.hxx. ◆ fMgr. std::shared_ptr<RWebWindowsManager> ROOT::RWebWindow::fMgr. private . ! display manager ; Definition at line 139 of file RWebWindow.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native connection are allowed, created by Show() method ; Definition at line 157 of file RWebWindow.hxx. ◆ fOperationTmout. float ROOT::RWebWindow::fOperationTmout {50.}. private . ! timeout in seconds to perform synchronous operation, default 50s ; Definition at line 171 of file RWebWindow.hxx. ◆ fPanelName. std::string ROOT::RWebWindow::fPanelName. private . ! panel name which should be shown in the window ; Definition at line 143 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 152 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event processing performed in dedicated thread ; Definition at line 147 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 177 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:4936,Security,authenticat,authentication,4936,"ndow. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specif",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:5113,Security,access,access,5113,"n with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specified time. ;  ; void Send (unsigned connid, const std::string &data);  Sends data to specified connection. ;  ; void SendBinary (unsigned connid, const void *data, std::size_t len);  Send binary data to specified connection. ;  ; void SendBinary (unsigned connid, std::string &&data);  Send binary data to specified connection. ;  ; _R__DEPRECATED_LATER(""Use GetUrl() to get valid connection URL"") std _R__DEPRECATED_LATER(""Use GetAddr() to get vali",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:8894,Security,authenticat,authentication,8894,"tions like ""file:rootui5sys/canv/canvas.html"". ;  ; void SetDisconnectCallBack (WebWindowConnectCallback_t func);  Set call-back function for disconnecting. ;  ; void SetGeometry (unsigned width, unsigned height);  Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetMaxQueueLength (unsigned len=10);  configures maximal queue length of data which can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ;  ; unsigned Show (const RWebDisplayArgs &args="""");  Show window in specified location. ;  ; void StartThread ();  Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ;  ; void StopThread ();  Stop special thread. ;  ; void Sync ();  Special method to process all internal activity when window runs in separate thread. ;  ; void TerminateROOT ();  Terminate ROOT se",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:9015,Security,access,access,9015,"ting. ;  ; void SetGeometry (unsigned width, unsigned height);  Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetMaxQueueLength (unsigned len=10);  configures maximal queue length of data which can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ;  ; unsigned Show (const RWebDisplayArgs &args="""");  Show window in specified location. ;  ; void StartThread ();  Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ;  ; void StopThread ();  Stop special thread. ;  ; void Sync ();  Special method to process all internal activity when window runs in separate thread. ;  ; void TerminateROOT ();  Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ;  ; void UseServerThreads ();  Let use TH",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:9155,Security,access,accessible,9155,"by used web display (like CEF or Chromium) ;  ; void SetMaxQueueLength (unsigned len=10);  configures maximal queue length of data which can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ;  ; unsigned Show (const RWebDisplayArgs &args="""");  Show window in specified location. ;  ; void StartThread ();  Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ;  ; void StopThread ();  Stop special thread. ;  ; void Sync ();  Special method to process all internal activity when window runs in separate thread. ;  ; void TerminateROOT ();  Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ;  ; void UseServerThreads ();  Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:9225,Security,inject,injected,9225,"h can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ;  ; unsigned Show (const RWebDisplayArgs &args="""");  Show window in specified location. ;  ; void StartThread ();  Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ;  ; void StopThread ();  Stop special thread. ;  ; void Sync ();  Special method to process all internal activity when window runs in separate thread. ;  ; void TerminateROOT ();  Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ;  ; void UseServerThreads ();  Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides proper locking and does not block. ;  ; int WaitFor (WebWindowWaitFunc_t check);  Waits until provided check function or lambdas retur",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:9559,Security,access,access,9559,"gure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ;  ; unsigned Show (const RWebDisplayArgs &args="""");  Show window in specified location. ;  ; void StartThread ();  Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ;  ; void StopThread ();  Stop special thread. ;  ; void Sync ();  Special method to process all internal activity when window runs in separate thread. ;  ; void TerminateROOT ();  Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ;  ; void UseServerThreads ();  Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides proper locking and does not block. ;  ; int WaitFor (WebWindowWaitFunc_t check);  Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  ; int WaitForTimed (WebWindowWaitFunc_t check);  Waits until provided check function or lambdas returns non-zero value Check function has followin",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:12585,Security,hash,hash,12585,"alog::Embedded() providing received string as second argument. ;  ; static bool IsFileDialogMessage (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ;  ; static unsigned ShowWindow (std::shared_ptr< RWebWindow > window, const RWebDisplayArgs &args="""");  Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ;  . Private Types; using ConnectionsList_t = std::vector< std::shared_ptr< WebConn > >;  ; enum  EQueueEntryKind { kind_None; , kind_Connect; , kind_Data; , kind_Disconnect; };  ; using timestamp_t = std::chrono::time_point< std::chrono::system_clock >;  . Private Member Functions; bool _CanTrustIn (std::shared_ptr< WebConn > &conn, const std::string &key, const std::string &ntry, bool remote, bool test_first_time);  Check if provided hash, ntry parameters from the connection request could be accepted. ;  ; std::string _MakeSendHeader (std::shared_ptr< WebConn > &conn, bool txt, const std::string &data, int chid);  Internal method to prepare text part of send data Should be called under locked connection mutex. ;  ; unsigned AddDisplayHandle (bool headless_mode, const std::string &key, std::unique_ptr< RWebDisplayHandle > &handle);  Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ;  ; unsigned AddEmbedWindow (std::shared_ptr< RWebWindow > window, unsigned connid, int channel);  Add embed window. ;  ; void AddMasterConnection (std::shared_ptr< RWebWindow > window, unsigned connid, int channel);  Add new master connection If there are many connections - only same master is allowed. ;  ; void CheckDataToSend (bool only_once=false);  Check",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:17233,Security,checksum,checksum,17233,"allArg &arg);  Processing of websockets call-backs, invoked from RWebWindowWSHandler Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data. ;  ; void ProvideQueueEntry (unsigned connid, EQueueEntryKind kind, std::string &&arg);  Provide data to user callback User callback must be executed in the window thread. ;  ; std::shared_ptr< WebConn > RemoveConnection (unsigned wsid);  Remove connection with given websocket id. ;  ; void RemoveEmbedWindow (unsigned connid, int channel);  Remove RWebWindow associated with the channelfEmbed. ;  ; void RemoveKey (const std::string &key);  Removes all connections with the key. ;  ; void RemoveMasterConnection (unsigned connid=0);  Remove master connection - if any. ;  ; void SubmitData (unsigned connid, bool txt, std::string &&data, int chid=1);  Internal method to send data. ;  . Static Private Member Functions; static std::string HMAC (const std::string &key, const std::string &sessionKey, const char *msg, int msglen);  Calculate HMAC checksum for provided key and message Key combained from connection key and session key. ;  ; static void SetStartDialogFunc (std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)>);  Configure func which has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex f",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:20156,Security,authenticat,authentication,20156,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:20355,Security,access,access,20355,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:20568,Security,access,accessible,20568,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:22418,Security,hash,hash,22418,"td::shared_ptr<WebConn> >. private . Definition at line 137 of file RWebWindow.hxx. ◆ timestamp_t. using ROOT::RWebWindow::timestamp_t = std::chrono::time_point<std::chrono::system_clock>. private . Definition at line 62 of file RWebWindow.hxx. Member Enumeration Documentation. ◆ EQueueEntryKind. enum ROOT::RWebWindow::EQueueEntryKind. private . Enumeratorkind_None ; kind_Connect ; kind_Data ; kind_Disconnect . Definition at line 127 of file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 514 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mute",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:22529,Security,hash,hash,22529,"hrono::time_point<std::chrono::system_clock>. private . Definition at line 62 of file RWebWindow.hxx. Member Enumeration Documentation. ◆ EQueueEntryKind. enum ROOT::RWebWindow::EQueueEntryKind. private . Enumeratorkind_None ; kind_Connect ; kind_Data ; kind_Disconnect . Definition at line 127 of file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 514 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1140 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . co",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:22612,Security,hash,hash,22612,"file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 514 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1140 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . const std::string & ; key, . std::unique_ptr< RWebDisplayHandle > & ; handle . ). private . Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ; Definition at line 483 of file ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:22627,Security,hash,hash,22627,"file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 514 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1140 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . const std::string & ; key, . std::unique_ptr< RWebDisplayHandle > & ; handle . ). private . Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ; Definition at line 483 of file ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:22667,Security,hash,hash,22667,"file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 514 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1140 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . const std::string & ; key, . std::unique_ptr< RWebDisplayHandle > & ; handle . ). private . Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ; Definition at line 483 of file ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:22985,Security,hash,hash,22985,"file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 514 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1140 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . const std::string & ; key, . std::unique_ptr< RWebDisplayHandle > & ; handle . ). private . Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ; Definition at line 483 of file ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:35314,Security,checksum,checksum,35314,"1 - default) ; Definition at line 293 of file RWebWindow.hxx. ◆ HasConnection(). bool RWebWindow::HasConnection ; (; unsigned ; connid = 0, . bool ; only_active = true . ); const. returns true if specified connection id exists ; Parameters. connidconnection id (0 - any) ; only_activewhen true only active connection will be checked, otherwise also pending (not yet established) connections are checked . Definition at line 1455 of file RWebWindow.cxx. ◆ HasKey(). bool RWebWindow::HasKey ; (; const std::string & ; key, . bool ; also_newkey = false . ); const. private . Returns true if provided key value already exists (in processes map or in existing connections) In special cases one also can check if key value exists as newkey. ; Definition at line 559 of file RWebWindow.cxx. ◆ HMAC(). std::string RWebWindow::HMAC ; (; const std::string & ; key, . const std::string & ; sessionKey, . const char * ; msg, . int ; msglen . ). staticprivate . Calculate HMAC checksum for provided key and message Key combained from connection key and session key. ; Definition at line 2034 of file RWebWindow.cxx. ◆ InvokeCallbacks(). void RWebWindow::InvokeCallbacks ; (; bool ; force = false). private . Invoke callbacks with existing data Must be called from appropriate thread. ; Definition at line 439 of file RWebWindow.cxx. ◆ IsFileDialogMessage(). bool RWebWindow::IsFileDialogMessage ; (; const std::string & ; msg). static . Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ; Definition at line 2005 of file RWebWindow.cxx. ◆ IsNativeOnlyConn(). bool ROOT::RWebWindow::IsNativeOnlyConn ; (; ); const. inline . returns true if only native (own-created) connections are allowed ; Definition at line 315 of file RWebWindow.hxx. ◆ IsRequireAuthKey(). bool ROOT::RWebWindow::IsRequireAuthKey ; (; ); const. inline . returns true if authentication string is r",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:36324,Security,authenticat,authentication,36324,"y combained from connection key and session key. ; Definition at line 2034 of file RWebWindow.cxx. ◆ InvokeCallbacks(). void RWebWindow::InvokeCallbacks ; (; bool ; force = false). private . Invoke callbacks with existing data Must be called from appropriate thread. ; Definition at line 439 of file RWebWindow.cxx. ◆ IsFileDialogMessage(). bool RWebWindow::IsFileDialogMessage ; (; const std::string & ; msg). static . Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ; Definition at line 2005 of file RWebWindow.cxx. ◆ IsNativeOnlyConn(). bool ROOT::RWebWindow::IsNativeOnlyConn ; (; ); const. inline . returns true if only native (own-created) connections are allowed ; Definition at line 315 of file RWebWindow.hxx. ◆ IsRequireAuthKey(). bool ROOT::RWebWindow::IsRequireAuthKey ; (; ); const. inline . returns true if authentication string is required ; Definition at line 323 of file RWebWindow.hxx. ◆ IsShown(). bool ROOT::RWebWindow::IsShown ; (; ); const. inline . Returns true when window was shown at least once. ; Definition at line 372 of file RWebWindow.hxx. ◆ IsUseCurrentDir(). bool ROOT::RWebWindow::IsUseCurrentDir ; (; ); const. inline . returns true if window can access local files via currentdir/ path of http server ; Definition at line 331 of file RWebWindow.hxx. ◆ MakeHeadless(). unsigned RWebWindow::MakeHeadless ; (; bool ; create_new = false). private . Start headless browser for specified window Normally only single instance is used, but many can be created See ROOT::RWebWindowsManager::Show() docu for more info returns (future) connection id (or 0 when fails) ; Definition at line 202 of file RWebWindow.cxx. ◆ NumConnections(). int RWebWindow::NumConnections ; (; bool ; with_pending = false); const. Returns current number of active clients connections. ; Parameters. with_pendingif true, also pending (not yet establ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:36685,Security,access,access,36685,"alogMessage ; (; const std::string & ; msg). static . Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ; Definition at line 2005 of file RWebWindow.cxx. ◆ IsNativeOnlyConn(). bool ROOT::RWebWindow::IsNativeOnlyConn ; (; ); const. inline . returns true if only native (own-created) connections are allowed ; Definition at line 315 of file RWebWindow.hxx. ◆ IsRequireAuthKey(). bool ROOT::RWebWindow::IsRequireAuthKey ; (; ); const. inline . returns true if authentication string is required ; Definition at line 323 of file RWebWindow.hxx. ◆ IsShown(). bool ROOT::RWebWindow::IsShown ; (; ); const. inline . Returns true when window was shown at least once. ; Definition at line 372 of file RWebWindow.hxx. ◆ IsUseCurrentDir(). bool ROOT::RWebWindow::IsUseCurrentDir ; (; ); const. inline . returns true if window can access local files via currentdir/ path of http server ; Definition at line 331 of file RWebWindow.hxx. ◆ MakeHeadless(). unsigned RWebWindow::MakeHeadless ; (; bool ; create_new = false). private . Start headless browser for specified window Normally only single instance is used, but many can be created See ROOT::RWebWindowsManager::Show() docu for more info returns (future) connection id (or 0 when fails) ; Definition at line 202 of file RWebWindow.cxx. ◆ NumConnections(). int RWebWindow::NumConnections ; (; bool ; with_pending = false); const. Returns current number of active clients connections. ; Parameters. with_pendingif true, also pending (not yet established) connection accounted . Definition at line 1372 of file RWebWindow.cxx. ◆ ProcessBatchHolder(). bool RWebWindow::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; arg). private . Process special http request, used to hold headless browser running Such requests should not be replied for the long time Be aware that function called directly from THttp",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:46510,Security,authenticat,authentication,46510,"; (; bool ; on = true). inline . configures that only native (own-created) connections are allowed ; Definition at line 311 of file RWebWindow.hxx. ◆ SetOperationTmout(). void ROOT::RWebWindow::SetOperationTmout ; (; float ; tm = 50.). inline . Set timeout for synchronous WebWindow operations. ; Definition at line 357 of file RWebWindow.hxx. ◆ SetPanelName(). void RWebWindow::SetPanelName ; (; const std::string & ; name). Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 272 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 319 of file RWebWindow.hxx. ◆ SetStartDialogFunc(). void RWebWindow::SetStartDialogFunc ; (; std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> ; func). staticprivate . Configure func which has to be used for starting dialog. ; Definition at line 1995 of file RWebWindow.cxx. ◆ SetUseCurrentDir(). void ROOT::RWebWindow::SetUseCurrentDir ; (; bool ; on = true). inline . Configure if window can access local files via currentdir/ path of http server. ; Definition at line 327 of file RWebWindow.hxx. ◆ SetUserArgs(). void RWebWindow::SetUserArgs ; (; const std::string & ; args). Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ; Parameters. args- arbitrary JSON data which can be provided to client side . Definition at line 1352 of ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:47019,Security,access,access,47019,"s/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 272 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 319 of file RWebWindow.hxx. ◆ SetStartDialogFunc(). void RWebWindow::SetStartDialogFunc ; (; std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> ; func). staticprivate . Configure func which has to be used for starting dialog. ; Definition at line 1995 of file RWebWindow.cxx. ◆ SetUseCurrentDir(). void ROOT::RWebWindow::SetUseCurrentDir ; (; bool ; on = true). inline . Configure if window can access local files via currentdir/ path of http server. ; Definition at line 327 of file RWebWindow.hxx. ◆ SetUserArgs(). void RWebWindow::SetUserArgs ; (; const std::string & ; args). Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ; Parameters. args- arbitrary JSON data which can be provided to client side . Definition at line 1352 of file RWebWindow.cxx. ◆ Show(). unsigned RWebWindow::Show ; (; const RWebDisplayArgs & ; args = """"). Show window in specified location. ; See alsoROOT::RWebWindowsManager::Show for more info ; Returns(future) connection id (or 0 when fails) ; Definition at line 191 of file RWebWindow.cxx. ◆ ShowWindow(). unsigned RWebWindow::ShowWindow ; (; std::shared_ptr< RWebWindow > ; window, . const RWebDisplayArgs & ; args = """" . ). static . Static method to show web window Has to be used instead of RWebWindow::",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:47238,Security,access,accessible,47238," ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 272 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 319 of file RWebWindow.hxx. ◆ SetStartDialogFunc(). void RWebWindow::SetStartDialogFunc ; (; std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> ; func). staticprivate . Configure func which has to be used for starting dialog. ; Definition at line 1995 of file RWebWindow.cxx. ◆ SetUseCurrentDir(). void ROOT::RWebWindow::SetUseCurrentDir ; (; bool ; on = true). inline . Configure if window can access local files via currentdir/ path of http server. ; Definition at line 327 of file RWebWindow.hxx. ◆ SetUserArgs(). void RWebWindow::SetUserArgs ; (; const std::string & ; args). Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ; Parameters. args- arbitrary JSON data which can be provided to client side . Definition at line 1352 of file RWebWindow.cxx. ◆ Show(). unsigned RWebWindow::Show ; (; const RWebDisplayArgs & ; args = """"). Show window in specified location. ; See alsoROOT::RWebWindowsManager::Show for more info ; Returns(future) connection id (or 0 when fails) ; Definition at line 191 of file RWebWindow.cxx. ◆ ShowWindow(). unsigned RWebWindow::ShowWindow ; (; std::shared_ptr< RWebWindow > ; window, . const RWebDisplayArgs & ; args = """" . ). static . Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ; Definition at line 1957 of file RWebWindow.cxx. ◆ StartThread(). void RWebWin",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:47308,Security,inject,injected,47308," CEF or Chromium) ; Definition at line 272 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 319 of file RWebWindow.hxx. ◆ SetStartDialogFunc(). void RWebWindow::SetStartDialogFunc ; (; std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> ; func). staticprivate . Configure func which has to be used for starting dialog. ; Definition at line 1995 of file RWebWindow.cxx. ◆ SetUseCurrentDir(). void ROOT::RWebWindow::SetUseCurrentDir ; (; bool ; on = true). inline . Configure if window can access local files via currentdir/ path of http server. ; Definition at line 327 of file RWebWindow.hxx. ◆ SetUserArgs(). void RWebWindow::SetUserArgs ; (; const std::string & ; args). Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ; Parameters. args- arbitrary JSON data which can be provided to client side . Definition at line 1352 of file RWebWindow.cxx. ◆ Show(). unsigned RWebWindow::Show ; (; const RWebDisplayArgs & ; args = """"). Show window in specified location. ; See alsoROOT::RWebWindowsManager::Show for more info ; Returns(future) connection id (or 0 when fails) ; Definition at line 191 of file RWebWindow.cxx. ◆ ShowWindow(). unsigned RWebWindow::ShowWindow ; (; std::shared_ptr< RWebWindow > ; window, . const RWebDisplayArgs & ; args = """" . ). static . Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ; Definition at line 1957 of file RWebWindow.cxx. ◆ StartThread(). void RWebWindow::StartThread ; (; ). Start special thread which will be used by the window to handle all callbacks One ha",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:48359,Security,access,access,48359,"Window({}) Must be set before RWebWindow::Show() method is called. ; Parameters. args- arbitrary JSON data which can be provided to client side . Definition at line 1352 of file RWebWindow.cxx. ◆ Show(). unsigned RWebWindow::Show ; (; const RWebDisplayArgs & ; args = """"). Show window in specified location. ; See alsoROOT::RWebWindowsManager::Show for more info ; Returns(future) connection id (or 0 when fails) ; Definition at line 191 of file RWebWindow.cxx. ◆ ShowWindow(). unsigned RWebWindow::ShowWindow ; (; std::shared_ptr< RWebWindow > ; window, . const RWebDisplayArgs & ; args = """" . ). static . Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ; Definition at line 1957 of file RWebWindow.cxx. ◆ StartThread(). void RWebWindow::StartThread ; (; ). Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ; Definition at line 1722 of file RWebWindow.cxx. ◆ StopThread(). void RWebWindow::StopThread ; (; ). Stop special thread. ; Definition at line 1744 of file RWebWindow.cxx. ◆ SubmitData(). void RWebWindow::SubmitData ; (; unsigned ; connid, . bool ; txt, . std::string && ; data, . int ; chid = 1 . ). private . Internal method to send data. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; txtis text message that should be sent ; datadata to be std-moved to SubmitData function ; chidchannel id, 1 - normal communication, 0 - internal with highest priority . Definition at line 1571 of file RWebWindow.cxx. ◆ Sync(). void RWebWindow::Sync ; (; ). Special method to process all internal activity when window runs in separate thread. ; Definition at line 1269 of file RWebWindow.cxx. ◆ TerminateROOT(). void RWebWindow::TerminateROOT ; (; ). Terminate ROOT session",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:57580,Security,authenticat,authentication,57580,"in dedicated thread ; Definition at line 147 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 177 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line 175 of file RWebWindow.hxx. ◆ fProtocolFileName. std::string ROOT::RWebWindow::fProtocolFileName. private . ! local file where communication protocol will be written ; Definition at line 173 of file RWebWindow.hxx. ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 176 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the widget ; Definition at line 149 of file RWebWindow.hxx. ◆ fSendMT. bool ROOT::RWebWindow::fSendMT {false}. private . ! true is special threads should be used for sending data ; Definition at line 148 of file RWebWindow.hxx. ◆ fUseCurrentDir. bool ROOT::RWebWindow::fUseCurrentDir {false}. private . ! if window can access local files via currentdir/ path of http server ; Definition at line 158 of file RWebWindow.hxx. ◆ fUseProcessEvents. bool ROOT::RWebWindow::fUseProcessEvents {false}. private . ! all window functionality will run through process events ; Definition at line 146 of file RWebWindow.hxx. ◆ fUserArgs. std::string ROOT::RWebWindow::fUserArgs. private . ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ; Definition at line 178 of file RWebWindow.hxx. ◆ fUseServerThreads. bool ROOT::RWebWindow::fUseServerThreads {false}. private . ! indicates that server thread is using, no special window thread ; Definition at line 145 of file RWebWindow.hxx. ◆",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:57950,Security,access,access,57950,"gned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line 175 of file RWebWindow.hxx. ◆ fProtocolFileName. std::string ROOT::RWebWindow::fProtocolFileName. private . ! local file where communication protocol will be written ; Definition at line 173 of file RWebWindow.hxx. ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 176 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the widget ; Definition at line 149 of file RWebWindow.hxx. ◆ fSendMT. bool ROOT::RWebWindow::fSendMT {false}. private . ! true is special threads should be used for sending data ; Definition at line 148 of file RWebWindow.hxx. ◆ fUseCurrentDir. bool ROOT::RWebWindow::fUseCurrentDir {false}. private . ! if window can access local files via currentdir/ path of http server ; Definition at line 158 of file RWebWindow.hxx. ◆ fUseProcessEvents. bool ROOT::RWebWindow::fUseProcessEvents {false}. private . ! all window functionality will run through process events ; Definition at line 146 of file RWebWindow.hxx. ◆ fUserArgs. std::string ROOT::RWebWindow::fUserArgs. private . ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ; Definition at line 178 of file RWebWindow.hxx. ◆ fUseServerThreads. bool ROOT::RWebWindow::fUseServerThreads {false}. private . ! indicates that server thread is using, no special window thread ; Definition at line 145 of file RWebWindow.hxx. ◆ fWidth. unsigned ROOT::RWebWindow::fWidth {0}. private . Definition at line 169 of file RWebWindow.hxx. ◆ fWindowThrd. std::thread ROOT::RWebWindow::fWindowThrd. private . ! special thread for that window ; Definition at line 166 of file RWebWindow.hxx. ◆ fWSHandler. std::shared_ptr<RWebWindowWSHandler> ROOT::RWebWindow::fWSHandler. private . ! specialize websoc",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:58339,Security,access,accessible,58339," ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 176 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the widget ; Definition at line 149 of file RWebWindow.hxx. ◆ fSendMT. bool ROOT::RWebWindow::fSendMT {false}. private . ! true is special threads should be used for sending data ; Definition at line 148 of file RWebWindow.hxx. ◆ fUseCurrentDir. bool ROOT::RWebWindow::fUseCurrentDir {false}. private . ! if window can access local files via currentdir/ path of http server ; Definition at line 158 of file RWebWindow.hxx. ◆ fUseProcessEvents. bool ROOT::RWebWindow::fUseProcessEvents {false}. private . ! all window functionality will run through process events ; Definition at line 146 of file RWebWindow.hxx. ◆ fUserArgs. std::string ROOT::RWebWindow::fUserArgs. private . ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ; Definition at line 178 of file RWebWindow.hxx. ◆ fUseServerThreads. bool ROOT::RWebWindow::fUseServerThreads {false}. private . ! indicates that server thread is using, no special window thread ; Definition at line 145 of file RWebWindow.hxx. ◆ fWidth. unsigned ROOT::RWebWindow::fWidth {0}. private . Definition at line 169 of file RWebWindow.hxx. ◆ fWindowThrd. std::thread ROOT::RWebWindow::fWindowThrd. private . ! special thread for that window ; Definition at line 166 of file RWebWindow.hxx. ◆ fWSHandler. std::shared_ptr<RWebWindowWSHandler> ROOT::RWebWindow::fWSHandler. private . ! specialize websocket handler for all incoming connections ; Definition at line 150 of file RWebWindow.hxx. ◆ fX. int ROOT::RWebWindow::fX {-1}. private . Definition at line 170 of file RWebWindow.hxx. ◆ fY. int ROOT::RWebWindow::fY {-1}. private . ! initial window position, -1 ignored ; Definition at line 170 of file RWebWindow.hxx. ◆ gStartDialogFunc. std:",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:22995,Testability,test,tested,22995,"file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 514 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1140 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . const std::string & ; key, . std::unique_ptr< RWebDisplayHandle > & ; handle . ). private . Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ; Definition at line 483 of file ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:38948,Testability,test,test,38948,"cks, invoked from RWebWindowWSHandler Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data. ; Definition at line 737 of file RWebWindow.cxx. ◆ ProvideQueueEntry(). void RWebWindow::ProvideQueueEntry ; (; unsigned ; connid, . EQueueEntryKind ; kind, . std::string && ; arg . ). private . Provide data to user callback User callback must be executed in the window thread. ; Definition at line 422 of file RWebWindow.cxx. ◆ RecordData(). void RWebWindow::RecordData ; (; const std::string & ; fname = ""protocol.json"", . const std::string & ; fprefix = """" . ). Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ; JSON file will look like: [""send"", ""msg0.txt"", ""send"", ""msg1.txt"", ""msg2.txt""]; If empty file name is provided, data recording will be disabled Recorded data can be used in JSROOT directly to test client code without running C++ server ; Definition at line 1397 of file RWebWindow.cxx. ◆ RemoveConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::RemoveConnection ; (; unsigned ; wsid). private . Remove connection with given websocket id. ; Definition at line 279 of file RWebWindow.cxx. ◆ RemoveEmbedWindow(). void RWebWindow::RemoveEmbedWindow ; (; unsigned ; connid, . int ; channel . ). private . Remove RWebWindow associated with the channelfEmbed. ; Definition at line 1909 of file RWebWindow.cxx. ◆ RemoveKey(). void RWebWindow::RemoveKey ; (; const std::string & ; key). private . Removes all connections with the key. ; Definition at line 584 of file RWebWindow.cxx. ◆ RemoveMasterConnection(). void RWebWindow::RemoveMasterConnection ; (; unsigned ; connid = 0). private . Remove master connection - if any. ; Definition at line 344 of file RWebWindow.cxx. ◆ Run(). void RWebWindow::Run ; (; double ; tm = 0.). Run window functionality for specified time",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:6476,Usability,clear,cleared,6476,"rray with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specified time. ;  ; void Send (unsigned connid, const std::string &data);  Sends data to specified connection. ;  ; void SendBinary (unsigned connid, const void *data, std::size_t len);  Send binary data to specified connection. ;  ; void SendBinary (unsigned connid, std::string &&data);  Send binary data to specified connection. ;  ; _R__DEPRECATED_LATER(""Use GetUrl() to get valid connection URL"") std _R__DEPRECATED_LATER(""Use GetAddr() to get valid connection URL"") std void SetCallBacks (WebWindowConnectCallback_t conn, WebWindowDataCallback_t data, WebWindowConnectCallback_t disconn=nullptr);  Set call-backs function for connect, data and disconnect events. ;  ; void SetClearOnClose (const std::shared_ptr< void > &handle=nullptr);  Set handle which is cleared when last active connection is closed Typically can be used to destroy web-based widget at such moment. ;  ; void SetClientVersion (const std::string &vers);  Set client version, used as prefix in scripts URL When changed, web browser will reload all related JS files while full URL will be different Default is empty value - no extra string in URL Version should be string like ""1.2"" or ""ver1.subv2"" and not contain any special symbols. ;  ; void SetConnectCallBack (WebWindowConnectCallback_t func);  Set call-back function for new connection. ;  ; void SetConnLimit (unsigned lmt=0);  Configure maximal number of allowed connections - 0 is unlimited Will not affect already existing connections Default is 1 - the only client is allowed. ;  ; void SetConnToken (const std::string &token="""");  Configures connection token (default none) When specified, in URL of webpage such token should be provided as &token=value parameter, otherwise web window will refuse connection. ;  ; void SetDataCallBac",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:17763,Usability,clear,cleared,17763,"hich has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex fConnMutex;  ! mutex used to protect connection list ;  ; std::string fConnToken;  ! value of ""token"" URL parameter which should be provided for connecting window ;  ; WebWindowDataCallback_t fDataCallback;  ! main callback when data over channel 1 is arrived ;  ; std::string fDefaultPage;  ! HTML page (or file name) returned when window URL is opened ;  ; WebWindowConnectCallback_t fDisconnCallback;  ! callback for disconnect event ;  ; bool fHasWindowThrd {false};  ! indicate if special window thread was started ;  ; unsigned fHeight {0};  ! initial window width and height when displayed, zeros are ignored ;  ; unsigned fId {0};  ! unique identifier ;  ; std::queue< QueueEntry > fInputQueue;  ! input queue for all callbacks ;  ; std::mutex fInputQueueMutex;  ! mutex to protect input queue ;  ; std::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchrono",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:22921,Usability,simpl,simpler,22921,"file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 514 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1140 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . const std::string & ; key, . std::unique_ptr< RWebDisplayHandle > & ; handle . ). private . Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ; Definition at line 483 of file ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:41449,Usability,clear,cleared,41449,"fied connection. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; datapointer to binary data ; lennumber of bytes in data . Definition at line 1672 of file RWebWindow.cxx. ◆ SendBinary() [2/2]. void RWebWindow::SendBinary ; (; unsigned ; connid, . std::string && ; data . ). Send binary data to specified connection. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; datadata to be std-moved to SubmitData function . Definition at line 1661 of file RWebWindow.cxx. ◆ SetCallBacks(). void RWebWindow::SetCallBacks ; (; WebWindowConnectCallback_t ; conn, . WebWindowDataCallback_t ; data, . WebWindowConnectCallback_t ; disconn = nullptr . ). Set call-backs function for connect, data and disconnect events. ; Definition at line 1814 of file RWebWindow.cxx. ◆ SetClearOnClose(). void RWebWindow::SetClearOnClose ; (; const std::shared_ptr< void > & ; handle = nullptr). Set handle which is cleared when last active connection is closed Typically can be used to destroy web-based widget at such moment. ; Definition at line 1806 of file RWebWindow.cxx. ◆ SetClientVersion(). void RWebWindow::SetClientVersion ; (; const std::string & ; vers). Set client version, used as prefix in scripts URL When changed, web browser will reload all related JS files while full URL will be different Default is empty value - no extra string in URL Version should be string like ""1.2"" or ""ver1.subv2"" and not contain any special symbols. ; Definition at line 1331 of file RWebWindow.cxx. ◆ SetConnectCallBack(). void RWebWindow::SetConnectCallBack ; (; WebWindowConnectCallback_t ; func). Set call-back function for new connection. ; Definition at line 1785 of file RWebWindow.cxx. ◆ SetConnLimit(). void RWebWindow::SetConnLimit ; (; unsigned ; lmt = 0). Configure maximal number of allowed connections - 0 is unlimited Will not affect already existing connections Default is 1 - the only client is allowed. ; Definition at line 694 of file RWebWindow",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:43369,Usability,simpl,simple,43369," only client is allowed. ; Definition at line 694 of file RWebWindow.cxx. ◆ SetConnToken(). void RWebWindow::SetConnToken ; (; const std::string & ; token = """"). Configures connection token (default none) When specified, in URL of webpage such token should be provided as &token=value parameter, otherwise web window will refuse connection. ; Definition at line 716 of file RWebWindow.cxx. ◆ SetDataCallBack(). void RWebWindow::SetDataCallBack ; (; WebWindowDataCallback_t ; func). Set call-back function for data, received from the clients via websocket. ; Function should have signature like void func(unsigned connid, const std::string &data) First argument identifies connection (unique for each window), second argument is received data; At the moment when callback is assigned, RWebWindow working thread is detected. If called not from main application thread, RWebWindow::Run() function must be regularly called from that thread.; Most simple way to assign call-back - use of c++11 lambdas like: auto win = RWebWindow::Create();; win->SetDefaultPage(""file:./page.htm"");; win->SetDataCallBack(; [](unsigned connid, const std::string &data) {; printf(""Conn:%u data:%s\n"", connid, data.c_str());; }; );; win->Show();; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; winOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t winDefinition TGWin32VirtualXProxy.cxx:186; ROOT::RWebWindow::Createstatic std::shared_ptr< RWebWindow > Create()Create new RWebWindow Using default RWebWindowsManager.Definition RWebWindow.cxx:1925. Definition at line 1775 of file RWebWindow.cxx. ◆ SetDefaultPage(). void ROOT::RWebWi",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindow.html:52593,Usability,clear,cleared,52593,"e RWebWindow.cxx. Friends And Related Symbol Documentation. ◆ RFileDialog. friend class RFileDialog. friend . Definition at line 59 of file RWebWindow.hxx. ◆ RWebDisplayHandle. friend class RWebDisplayHandle. friend . Definition at line 58 of file RWebWindow.hxx. ◆ RWebWindowsManager. friend class RWebWindowsManager. friend . Definition at line 56 of file RWebWindow.hxx. ◆ RWebWindowWSHandler. friend class RWebWindowWSHandler. friend . Definition at line 57 of file RWebWindow.hxx. Member Data Documentation. ◆ fCallbacksThrdId. std::thread::id ROOT::RWebWindow::fCallbacksThrdId. private . ! thread id where callbacks should be invoked ; Definition at line 163 of file RWebWindow.hxx. ◆ fCallbacksThrdIdSet. bool ROOT::RWebWindow::fCallbacksThrdIdSet {false}. private . ! flag indicating that thread id is assigned ; Definition at line 164 of file RWebWindow.hxx. ◆ fClearOnClose. std::shared_ptr<void> ROOT::RWebWindow::fClearOnClose. private . ! entry which is cleared when last connection is closed ; Definition at line 179 of file RWebWindow.hxx. ◆ fClientVersion. std::string ROOT::RWebWindow::fClientVersion. private . ! configured client version, used as prefix in scripts URL ; Definition at line 172 of file RWebWindow.hxx. ◆ fConn. ConnectionsList_t ROOT::RWebWindow::fConn. private . ! list of all accepted connections ; Definition at line 153 of file RWebWindow.hxx. ◆ fConnCallback. WebWindowConnectCallback_t ROOT::RWebWindow::fConnCallback. private . ! callback for connect event ; Definition at line 160 of file RWebWindow.hxx. ◆ fConnCnt. unsigned ROOT::RWebWindow::fConnCnt {0}. private . ! counter of new connections to assign ids ; Definition at line 151 of file RWebWindow.hxx. ◆ fConnLimit. unsigned ROOT::RWebWindow::fConnLimit {1}. private . ! number of allowed active connections ; Definition at line 155 of file RWebWindow.hxx. ◆ fConnMutex. std::mutex ROOT::RWebWindow::fConnMutex. mutableprivate . ! mutex used to protect connection list ; Definition at line 154 of fi",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:1257,Availability,avail,available,1257," |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RWebWindowsManager Class ReferenceWeb Display. ; Central instance to create and show web-based windows like Canvas or FitPanel. ; Manager responsible to creating THttpServer instance, which is used for RWebWindow's communication with clients.; Method RWebWindows::Show() used to show window in specified location. ; Definition at line 40 of file RWebWindowsManager.hxx. Public Member Functions;  RWebWindowsManager ();  window manager constructor Required here for correct usage of unique_ptr<THttpServer> ;  ;  ~RWebWindowsManager ();  window manager destructor Required here for correct usage of unique_ptr<THttpServer> ;  ; std::shared_ptr< RWebWindow > CreateWindow ();  Creates new window To show window, RWebWindow::Show() have to be called. ;  ; THttpServer * GetServer () const;  Returns THttpServer instance. ;  ; std::string GetServerAddr () const;  Returns http address of the server, empty string when not available. ;  ; void SetDeleteCallback (WebWindowDeleteCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void SetShowCallback (WebWindowShowCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void Terminate ();  Terminate http server and ROOT application. ;  . Static Public Member Functions; static void AddServerLocation (const std::string &server_prefix, const std::string &files_path);  Configure server location which can be used for loading of custom scripts or files When THttpServer instance of RWebWindowsManager will be created, THttpServer::AddLocation() method with correspondent arguments will be invoked. ;  ; static void AssignMainThrd ();  Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one h",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:9332,Availability,avail,available,9332,"ed It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 117 of file RWebWindowsManager.cxx. ◆ ClearServerLocations(). void RWebWindowsManager::ClearServerLocations ; (; ). static . Clear all server locations Does not change configuration of already running HTTP server. ; Definition at line 239 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: Web",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:13408,Availability,avail,available,13408,"Show() have to be called. ; Definition at line 619 of file RWebWindowsManager.cxx. ◆ GenerateKey(). std::string RWebWindowsManager::GenerateKey ; (; int ; keylen = 32). staticprivate . Static method to generate cryptographic key Parameter keylen defines length of cryptographic key in bytes Output string will be hex formatted and includes ""-"" separator after every 4 bytes Example for 16 bytes: ""fca45856-41bee066-ff74cc96-9154d405"". ; Definition at line 250 of file RWebWindowsManager.cxx. ◆ GetLaunchTmout(). float ROOT::RWebWindowsManager::GetLaunchTmout ; (; ); const. inlineprivate . Returns timeout for launching new browser process. ; Definition at line 66 of file RWebWindowsManager.hxx. ◆ GetServer(). THttpServer * ROOT::RWebWindowsManager::GetServer ; (; ); const. inline . Returns THttpServer instance. ; Definition at line 89 of file RWebWindowsManager.hxx. ◆ GetServerAddr(). std::string ROOT::RWebWindowsManager::GetServerAddr ; (; ); const. inline . Returns http address of the server, empty string when not available. ; Definition at line 92 of file RWebWindowsManager.hxx. ◆ GetServerLocations(). std::map< std::string, std::string > RWebWindowsManager::GetServerLocations ; (; ). static . Returns server locations as <std::string, std::string> Key is location name (with slash at the end) and value is file path. ; Definition at line 209 of file RWebWindowsManager.cxx. ◆ GetUrl(). std::string RWebWindowsManager::GetUrl ; (; RWebWindow & ; win, . bool ; remote = false, . std::string * ; produced_key = nullptr . ). private . Provide URL address to access specified window from inside or from remote. ; Definition at line 686 of file RWebWindowsManager.cxx. ◆ InformListener(). bool RWebWindowsManager::InformListener ; (; const std::string & ; msg). private . If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ; Definition at line 299 of file RWebWindowsManager.cxx. ◆ Instance(). std::shared_ptr< RWebWindowsManager > & RWebWindowsManager",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:17899,Availability,avail,available,17899,"um of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 168 of file RWebWindowsManager.cxx. ◆ SetUseSessionKey(). void RWebWindowsManager::SetUseSessionKey ; (; bool ; on = true). static . Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 157 of file RWebWindowsManager.cxx. ◆ ShowWindow(). unsigned RWebWindowsManager::ShowWindow ; (; RWebWindow & ; win, . const RWebDisplayArgs & ; user_args . ). private . Show window in specified location, see Show() method for more details. ; Show web window in specified location.; Parameters. [in,out]winweb window by reference ; user_argsspecifies where and how display web window. As display args one can use string like ""firefox"" or ""chrome"" - these are two main supported web browsers. See RWebDisplayArgs::SetBrowserKind() for all available options. Default value for the browser can be configured when starting root with –web argument like: ""root --web=chrome"". When root started in web server mode ""root --web=server"", no any web browser will be started - just URL will be printout, which can be entered in any running web browser; If allowed, same window can be displayed several times (like for RCanvas or TCanvas); Following parameters can be configured in rootrc file: WebGui.Display: kind of display like chrome or firefox or browser, can be overwritten by --web=value command line argument; WebGui.OnetimeKey: if configured requires unique key every time window is connected (default yes); WebGui.Chrome: full path to Google Chrome executable; WebGui.ChromeBatch: command to start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; WebGui.Chro",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:20046,Availability,error,error,20046,"eadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; WebGui.FirefoxProfile: name of Firefox profile to use; WebGui.FirefoxProfilePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; WebGui.LaunchTmout: time required to start process in seconds (default 30 s); WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/1.128.0/; WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; THttpServer-related parameters documented in CreateServer method ; Definition at line 778 of file RWebWindowsManager.cxx. ◆ Terminate(). void RWebWindowsManager::Terminate ; (; ). Terminate http server and ROOT application. ; Definition at line 937 of file RWebWindowsManager.cxx. ◆ Unregister(). void RWebWindowsManager::Unregister ; (; RWebWindow & ; win). private . Release all references to specified window Called from RWebWindow destructor. ; Definition at line 674 of file RWebWindowsManager.cxx. ◆ WaitFor(). int RWebWindowsManager::WaitFor ; (; RWebW",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:2384,Deployability,configurat,configuration,2384,"atch window showing, used by RBrowser. ;  ; void SetShowCallback (WebWindowShowCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void Terminate ();  Terminate http server and ROOT application. ;  . Static Public Member Functions; static void AddServerLocation (const std::string &server_prefix, const std::string &files_path);  Configure server location which can be used for loading of custom scripts or files When THttpServer instance of RWebWindowsManager will be created, THttpServer::AddLocation() method with correspondent arguments will be invoked. ;  ; static void AssignMainThrd ();  Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ;  ; static void ClearServerLocations ();  Clear all server locations Does not change configuration of already running HTTP server. ;  ; static std::map< std::string, std::string > GetServerLocations ();  Returns server locations as <std::string, std::string> Key is location name (with slash at the end) and value is file path. ;  ; static std::shared_ptr< RWebWindowsManager > & Instance ();  Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ;  ; static bool IsLoopbackMode ();  Returns true if loopback mode used by THttpServer for web widgets. ;  ; static bool IsMainThrd ();  Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ;  ; static void SetLoopbackMode (bool on=true);  Set loopback mode for THttpServer used for web widgets By default is",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:8669,Deployability,configurat,configuration,8669,"ServerLocation(). void RWebWindowsManager::AddServerLocation ; (; const std::string & ; server_prefix, . const std::string & ; files_path . ). static . Configure server location which can be used for loading of custom scripts or files When THttpServer instance of RWebWindowsManager will be created, THttpServer::AddLocation() method with correspondent arguments will be invoked. ; Definition at line 178 of file RWebWindowsManager.cxx. ◆ AssignMainThrd(). void RWebWindowsManager::AssignMainThrd ; (; ). static . Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 117 of file RWebWindowsManager.cxx. ◆ ClearServerLocations(). void RWebWindowsManager::ClearServerLocations ; (; ). static . Clear all server locations Does not change configuration of already running HTTP server. ; Definition at line 239 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to hand",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:19692,Deployability,update,update,19692,"me in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; WebGui.Firefox: full path to Mozilla Firefox executable; WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; WebGui.FirefoxProfile: name of Firefox profile to use; WebGui.FirefoxProfilePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; WebGui.LaunchTmout: time required to start process in seconds (default 30 s); WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/1.128.0/; WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; THttpServer-related parameters documented in CreateServer method ; Definition at line 778 of file RWebWindowsManager.cxx. ◆ Terminate(). void RWebWindowsManager::",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:10176,Energy Efficiency,allocate,allocate,10176,"ault range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can conf",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:4592,Integrability,message,message,4592,"on key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via websockets will be used (default off) ;  ; unsigned ShowWindow (RWebWindow &win, const RWebDisplayArgs &args);  Show window in specified location, see Show() method for more details. ;  ; void Unregister (RWebWindow &win);  Release all references to specified window Called from RWebWindow destructor. ;  ; int WaitFor (RWebWindow &win, WebWindowWaitFunc_t check, bool timed=false, double tm=-1);  Waits until provided check function or lambdas returns non-zero value Regularly calls WebWindow::Sync() method to let run event loop If call from the main thread, runs system events processing Check function has following signature: int func(double spent_tm) Parameter spent_tm is time in seconds, which already spent ins",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:9503,Integrability,protocol,protocol,9503,"file RWebWindowsManager.cxx. ◆ ClearServerLocations(). void RWebWindowsManager::ClearServerLocations ; (; ). static . Clear all server locations Does not change configuration of already running HTTP server. ; Definition at line 239 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrd",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:14213,Integrability,message,message,14213,"on at line 89 of file RWebWindowsManager.hxx. ◆ GetServerAddr(). std::string ROOT::RWebWindowsManager::GetServerAddr ; (; ); const. inline . Returns http address of the server, empty string when not available. ; Definition at line 92 of file RWebWindowsManager.hxx. ◆ GetServerLocations(). std::map< std::string, std::string > RWebWindowsManager::GetServerLocations ; (; ). static . Returns server locations as <std::string, std::string> Key is location name (with slash at the end) and value is file path. ; Definition at line 209 of file RWebWindowsManager.cxx. ◆ GetUrl(). std::string RWebWindowsManager::GetUrl ; (; RWebWindow & ; win, . bool ; remote = false, . std::string * ; produced_key = nullptr . ). private . Provide URL address to access specified window from inside or from remote. ; Definition at line 686 of file RWebWindowsManager.cxx. ◆ InformListener(). bool RWebWindowsManager::InformListener ; (; const std::string & ; msg). private . If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ; Definition at line 299 of file RWebWindowsManager.cxx. ◆ Instance(). std::shared_ptr< RWebWindowsManager > & RWebWindowsManager::Instance ; (; ). static . Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ; Definition at line 79 of file RWebWindowsManager.cxx. ◆ IsLoopbackMode(). bool RWebWindowsManager::IsLoopbackMode ; (; ). static . Returns true if loopback mode used by THttpServer for web widgets. ; Definition at line 147 of file RWebWindowsManager.cxx. ◆ IsMainThrd(). bool RWebWindowsManager::IsMainThrd ; (; ). static . Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 105 of file RWebWindowsManager.cxx.",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:2384,Modifiability,config,configuration,2384,"atch window showing, used by RBrowser. ;  ; void SetShowCallback (WebWindowShowCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void Terminate ();  Terminate http server and ROOT application. ;  . Static Public Member Functions; static void AddServerLocation (const std::string &server_prefix, const std::string &files_path);  Configure server location which can be used for loading of custom scripts or files When THttpServer instance of RWebWindowsManager will be created, THttpServer::AddLocation() method with correspondent arguments will be invoked. ;  ; static void AssignMainThrd ();  Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ;  ; static void ClearServerLocations ();  Clear all server locations Does not change configuration of already running HTTP server. ;  ; static std::map< std::string, std::string > GetServerLocations ();  Returns server locations as <std::string, std::string> Key is location name (with slash at the end) and value is file path. ;  ; static std::shared_ptr< RWebWindowsManager > & Instance ();  Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ;  ; static bool IsLoopbackMode ();  Returns true if loopback mode used by THttpServer for web widgets. ;  ; static bool IsMainThrd ();  Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ;  ; static void SetLoopbackMode (bool on=true);  Set loopback mode for THttpServer used for web widgets By default is",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:4124,Modifiability,config,configure,4124,"have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ;  ; static void SetLoopbackMode (bool on=true);  Set loopback mode for THttpServer used for web widgets By default is on. ;  ; static void SetUseConnectionKey (bool on=true);  Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via websockets will be used (default off) ;  ; unsigned ShowWindow (RWebWindow &win, const RWebDisplayArgs &args);  Show window in specified location, see Show() method for more details. ;  ; void Unregister (RWebWindow &win);  Release all references to specified window Called from RWebWindow destructor. ; ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:4568,Modifiability,variab,variable,4568,"on key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via websockets will be used (default off) ;  ; unsigned ShowWindow (RWebWindow &win, const RWebDisplayArgs &args);  Show window in specified location, see Show() method for more details. ;  ; void Unregister (RWebWindow &win);  Release all references to specified window Called from RWebWindow destructor. ;  ; int WaitFor (RWebWindow &win, WebWindowWaitFunc_t check, bool timed=false, double tm=-1);  Waits until provided check function or lambdas returns non-zero value Regularly calls WebWindow::Sync() method to let run event loop If call from the main thread, runs system events processing Check function has following signature: int func(double spent_tm) Parameter spent_tm is time in seconds, which already spent ins",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:4580,Modifiability,config,configured,4580,"on key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via websockets will be used (default off) ;  ; unsigned ShowWindow (RWebWindow &win, const RWebDisplayArgs &args);  Show window in specified location, see Show() method for more details. ;  ; void Unregister (RWebWindow &win);  Release all references to specified window Called from RWebWindow destructor. ;  ; int WaitFor (RWebWindow &win, WebWindowWaitFunc_t check, bool timed=false, double tm=-1);  Waits until provided check function or lambdas returns non-zero value Regularly calls WebWindow::Sync() method to let run event loop If call from the main thread, runs system events processing Check function has following signature: int func(double spent_tm) Parameter spent_tm is time in seconds, which already spent ins",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:8669,Modifiability,config,configuration,8669,"ServerLocation(). void RWebWindowsManager::AddServerLocation ; (; const std::string & ; server_prefix, . const std::string & ; files_path . ). static . Configure server location which can be used for loading of custom scripts or files When THttpServer instance of RWebWindowsManager will be created, THttpServer::AddLocation() method with correspondent arguments will be invoked. ; Definition at line 178 of file RWebWindowsManager.cxx. ◆ AssignMainThrd(). void RWebWindowsManager::AssignMainThrd ; (; ). static . Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 117 of file RWebWindowsManager.cxx. ◆ ClearServerLocations(). void RWebWindowsManager::ClearServerLocations ; (; ). static . Clear all server locations Does not change configuration of already running HTTP server. ; Definition at line 239 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to hand",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:8948,Modifiability,config,configure,8948,"d, THttpServer::AddLocation() method with correspondent arguments will be invoked. ; Definition at line 178 of file RWebWindowsManager.cxx. ◆ AssignMainThrd(). void RWebWindowsManager::AssignMainThrd ; (; ). static . Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 117 of file RWebWindowsManager.cxx. ◆ ClearServerLocations(). void RWebWindowsManager::ClearServerLocations ; (; ). static . Clear all server locations Does not change configuration of already running HTTP server. ; Definition at line 239 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpSer",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:10311,Modifiability,config,configure,10311,"lable: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can configure this directly (default no) WebGui.WSLongpoll: no; Following parameter controls browser max-age caching parameter for files (default 3600) Whe",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:11186,Modifiability,config,configure,11186,"erver allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can configure this directly (default no) WebGui.WSLongpoll: no; Following parameter controls browser max-age caching parameter for files (default 3600) When 0 is specified, browser cache will be disabled WebGui.HttpMaxAge: 3600; Also one can provide extra URL options for, see TCivetweb::Create for list of supported options WebGui.HttpExtraArgs: winsymlinks=no; One also can configure usage of FastCGI server for web windows: WebGui.FastCgiPort: 4000; WebGui.FastCgiThreads: 10; To be able start web browser for such windows, one can provide real URL of the web server which will connect with that FastCGI instance: WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path; For some custom applications one requires to load JavaScript modules or other files. For such applications one may require to load files from other locations which can be configured with AddServerLocation() method or directly via: WebGui.ServerLocations: location1:/file/path/to/location1;location2:/file",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:11558,Modifiability,config,configure,11558,"default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can configure this directly (default no) WebGui.WSLongpoll: no; Following parameter controls browser max-age caching parameter for files (default 3600) When 0 is specified, browser cache will be disabled WebGui.HttpMaxAge: 3600; Also one can provide extra URL options for, see TCivetweb::Create for list of supported options WebGui.HttpExtraArgs: winsymlinks=no; One also can configure usage of FastCGI server for web windows: WebGui.FastCgiPort: 4000; WebGui.FastCgiThreads: 10; To be able start web browser for such windows, one can provide real URL of the web server which will connect with that FastCGI instance: WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path; For some custom applications one requires to load JavaScript modules or other files. For such applications one may require to load files from other locations which can be configured with AddServerLocation() method or directly via: WebGui.ServerLocations: location1:/file/path/to/location1;location2:/file/path/to/location2 . Definition at line 430 of file RWebWindowsManager.cxx. ◆ CreateWindow(). std::shared_ptr< RWebWindow > RWebWindowsManager::CreateWindow ; (; ). Creates new window To show window, RWebWindow::Show() have to be called. ; Definition at line 619 of file RWebWindowsManager.cxx. ◆ GenerateKey(). std::string RWebWindowsManager::GenerateKey ; (; int ; keylen = 32). staticprivate",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:12038,Modifiability,config,configured,12038,"cket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can configure this directly (default no) WebGui.WSLongpoll: no; Following parameter controls browser max-age caching parameter for files (default 3600) When 0 is specified, browser cache will be disabled WebGui.HttpMaxAge: 3600; Also one can provide extra URL options for, see TCivetweb::Create for list of supported options WebGui.HttpExtraArgs: winsymlinks=no; One also can configure usage of FastCGI server for web windows: WebGui.FastCgiPort: 4000; WebGui.FastCgiThreads: 10; To be able start web browser for such windows, one can provide real URL of the web server which will connect with that FastCGI instance: WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path; For some custom applications one requires to load JavaScript modules or other files. For such applications one may require to load files from other locations which can be configured with AddServerLocation() method or directly via: WebGui.ServerLocations: location1:/file/path/to/location1;location2:/file/path/to/location2 . Definition at line 430 of file RWebWindowsManager.cxx. ◆ CreateWindow(). std::shared_ptr< RWebWindow > RWebWindowsManager::CreateWindow ; (; ). Creates new window To show window, RWebWindow::Show() have to be called. ; Definition at line 619 of file RWebWindowsManager.cxx. ◆ GenerateKey(). std::string RWebWindowsManager::GenerateKey ; (; int ; keylen = 32). staticprivate . Static method to generate cryptographic key Parameter keylen defines length of cryptographic key in bytes Output string will be hex formatted and includes ""-"" separator after every 4 bytes Example for 16 bytes: ""fca45856-41bee066-ff74cc96-9154d405"". ; Definition at line 250 of file RWebWindowsManager.cxx. ◆ GetLaunchTmout(). float ROOT::RWebWindowsManager::GetLaunchTmout ; (; ); const. inlineprivate . Returns timeout for launching new browser process. ; De",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:14189,Modifiability,variab,variable,14189,"on at line 89 of file RWebWindowsManager.hxx. ◆ GetServerAddr(). std::string ROOT::RWebWindowsManager::GetServerAddr ; (; ); const. inline . Returns http address of the server, empty string when not available. ; Definition at line 92 of file RWebWindowsManager.hxx. ◆ GetServerLocations(). std::map< std::string, std::string > RWebWindowsManager::GetServerLocations ; (; ). static . Returns server locations as <std::string, std::string> Key is location name (with slash at the end) and value is file path. ; Definition at line 209 of file RWebWindowsManager.cxx. ◆ GetUrl(). std::string RWebWindowsManager::GetUrl ; (; RWebWindow & ; win, . bool ; remote = false, . std::string * ; produced_key = nullptr . ). private . Provide URL address to access specified window from inside or from remote. ; Definition at line 686 of file RWebWindowsManager.cxx. ◆ InformListener(). bool RWebWindowsManager::InformListener ; (; const std::string & ; msg). private . If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ; Definition at line 299 of file RWebWindowsManager.cxx. ◆ Instance(). std::shared_ptr< RWebWindowsManager > & RWebWindowsManager::Instance ; (; ). static . Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ; Definition at line 79 of file RWebWindowsManager.cxx. ◆ IsLoopbackMode(). bool RWebWindowsManager::IsLoopbackMode ; (; ). static . Returns true if loopback mode used by THttpServer for web widgets. ; Definition at line 147 of file RWebWindowsManager.cxx. ◆ IsMainThrd(). bool RWebWindowsManager::IsMainThrd ; (; ). static . Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 105 of file RWebWindowsManager.cxx.",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:14201,Modifiability,config,configured,14201,"on at line 89 of file RWebWindowsManager.hxx. ◆ GetServerAddr(). std::string ROOT::RWebWindowsManager::GetServerAddr ; (; ); const. inline . Returns http address of the server, empty string when not available. ; Definition at line 92 of file RWebWindowsManager.hxx. ◆ GetServerLocations(). std::map< std::string, std::string > RWebWindowsManager::GetServerLocations ; (; ). static . Returns server locations as <std::string, std::string> Key is location name (with slash at the end) and value is file path. ; Definition at line 209 of file RWebWindowsManager.cxx. ◆ GetUrl(). std::string RWebWindowsManager::GetUrl ; (; RWebWindow & ; win, . bool ; remote = false, . std::string * ; produced_key = nullptr . ). private . Provide URL address to access specified window from inside or from remote. ; Definition at line 686 of file RWebWindowsManager.cxx. ◆ InformListener(). bool RWebWindowsManager::InformListener ; (; const std::string & ; msg). private . If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ; Definition at line 299 of file RWebWindowsManager.cxx. ◆ Instance(). std::shared_ptr< RWebWindowsManager > & RWebWindowsManager::Instance ; (; ). static . Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ; Definition at line 79 of file RWebWindowsManager.cxx. ◆ IsLoopbackMode(). bool RWebWindowsManager::IsLoopbackMode ; (; ). static . Returns true if loopback mode used by THttpServer for web widgets. ; Definition at line 147 of file RWebWindowsManager.cxx. ◆ IsMainThrd(). bool RWebWindowsManager::IsMainThrd ; (; ). static . Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 105 of file RWebWindowsManager.cxx.",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:17955,Modifiability,config,configured,17955," usage. ; Definition at line 168 of file RWebWindowsManager.cxx. ◆ SetUseSessionKey(). void RWebWindowsManager::SetUseSessionKey ; (; bool ; on = true). static . Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 157 of file RWebWindowsManager.cxx. ◆ ShowWindow(). unsigned RWebWindowsManager::ShowWindow ; (; RWebWindow & ; win, . const RWebDisplayArgs & ; user_args . ). private . Show window in specified location, see Show() method for more details. ; Show web window in specified location.; Parameters. [in,out]winweb window by reference ; user_argsspecifies where and how display web window. As display args one can use string like ""firefox"" or ""chrome"" - these are two main supported web browsers. See RWebDisplayArgs::SetBrowserKind() for all available options. Default value for the browser can be configured when starting root with –web argument like: ""root --web=chrome"". When root started in web server mode ""root --web=server"", no any web browser will be started - just URL will be printout, which can be entered in any running web browser; If allowed, same window can be displayed several times (like for RCanvas or TCanvas); Following parameters can be configured in rootrc file: WebGui.Display: kind of display like chrome or firefox or browser, can be overwritten by --web=value command line argument; WebGui.OnetimeKey: if configured requires unique key every time window is connected (default yes); WebGui.Chrome: full path to Google Chrome executable; WebGui.ChromeBatch: command to start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:18316,Modifiability,config,configured,18316,"enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 157 of file RWebWindowsManager.cxx. ◆ ShowWindow(). unsigned RWebWindowsManager::ShowWindow ; (; RWebWindow & ; win, . const RWebDisplayArgs & ; user_args . ). private . Show window in specified location, see Show() method for more details. ; Show web window in specified location.; Parameters. [in,out]winweb window by reference ; user_argsspecifies where and how display web window. As display args one can use string like ""firefox"" or ""chrome"" - these are two main supported web browsers. See RWebDisplayArgs::SetBrowserKind() for all available options. Default value for the browser can be configured when starting root with –web argument like: ""root --web=chrome"". When root started in web server mode ""root --web=server"", no any web browser will be started - just URL will be printout, which can be entered in any running web browser; If allowed, same window can be displayed several times (like for RCanvas or TCanvas); Following parameters can be configured in rootrc file: WebGui.Display: kind of display like chrome or firefox or browser, can be overwritten by --web=value command line argument; WebGui.OnetimeKey: if configured requires unique key every time window is connected (default yes); WebGui.Chrome: full path to Google Chrome executable; WebGui.ChromeBatch: command to start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; WebGui.Firefox: full path to Mozilla Firefox executable; WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.Firefo",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:18489,Modifiability,config,configured,18489,"ivate . Show window in specified location, see Show() method for more details. ; Show web window in specified location.; Parameters. [in,out]winweb window by reference ; user_argsspecifies where and how display web window. As display args one can use string like ""firefox"" or ""chrome"" - these are two main supported web browsers. See RWebDisplayArgs::SetBrowserKind() for all available options. Default value for the browser can be configured when starting root with –web argument like: ""root --web=chrome"". When root started in web server mode ""root --web=server"", no any web browser will be started - just URL will be printout, which can be entered in any running web browser; If allowed, same window can be displayed several times (like for RCanvas or TCanvas); Following parameters can be configured in rootrc file: WebGui.Display: kind of display like chrome or firefox or browser, can be overwritten by --web=value command line argument; WebGui.OnetimeKey: if configured requires unique key every time window is connected (default yes); WebGui.Chrome: full path to Google Chrome executable; WebGui.ChromeBatch: command to start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; WebGui.Firefox: full path to Mozilla Firefox executable; WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; WebGui.FirefoxProfile: name of Firefox profile to use; WebGui.FirefoxProfilePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; We",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:1784,Performance,load,loading,1784,"r Required here for correct usage of unique_ptr<THttpServer> ;  ;  ~RWebWindowsManager ();  window manager destructor Required here for correct usage of unique_ptr<THttpServer> ;  ; std::shared_ptr< RWebWindow > CreateWindow ();  Creates new window To show window, RWebWindow::Show() have to be called. ;  ; THttpServer * GetServer () const;  Returns THttpServer instance. ;  ; std::string GetServerAddr () const;  Returns http address of the server, empty string when not available. ;  ; void SetDeleteCallback (WebWindowDeleteCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void SetShowCallback (WebWindowShowCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void Terminate ();  Terminate http server and ROOT application. ;  . Static Public Member Functions; static void AddServerLocation (const std::string &server_prefix, const std::string &files_path);  Configure server location which can be used for loading of custom scripts or files When THttpServer instance of RWebWindowsManager will be created, THttpServer::AddLocation() method with correspondent arguments will be invoked. ;  ; static void AssignMainThrd ();  Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ;  ; static void ClearServerLocations ();  Clear all server locations Does not change configuration of already running HTTP server. ;  ; static std::map< std::string, std::string > GetServerLocations ();  Returns server locations as <std::string, std::string> Key is location name (with slash at the end) and value is file path. ;  ; static std::shared_ptr< RWebWindowsManager > & Instance ();  Returns default window manager Used to display all standard ROOT elements like TCanvas or T",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:2092,Performance,load,loaded,2092,"urns THttpServer instance. ;  ; std::string GetServerAddr () const;  Returns http address of the server, empty string when not available. ;  ; void SetDeleteCallback (WebWindowDeleteCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void SetShowCallback (WebWindowShowCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void Terminate ();  Terminate http server and ROOT application. ;  . Static Public Member Functions; static void AddServerLocation (const std::string &server_prefix, const std::string &files_path);  Configure server location which can be used for loading of custom scripts or files When THttpServer instance of RWebWindowsManager will be created, THttpServer::AddLocation() method with correspondent arguments will be invoked. ;  ; static void AssignMainThrd ();  Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ;  ; static void ClearServerLocations ();  Clear all server locations Does not change configuration of already running HTTP server. ;  ; static std::map< std::string, std::string > GetServerLocations ();  Returns server locations as <std::string, std::string> Key is location name (with slash at the end) and value is file path. ;  ; static std::shared_ptr< RWebWindowsManager > & Instance ();  Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ;  ; static bool IsLoopbackMode ();  Returns true if loopback mode used by THttpServer for web widgets. ;  ; static bool IsMainThrd ();  Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in sepa",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:3028,Performance,load,loaded,3028,"oment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ;  ; static void ClearServerLocations ();  Clear all server locations Does not change configuration of already running HTTP server. ;  ; static std::map< std::string, std::string > GetServerLocations ();  Returns server locations as <std::string, std::string> Key is location name (with slash at the end) and value is file path. ;  ; static std::shared_ptr< RWebWindowsManager > & Instance ();  Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ;  ; static bool IsLoopbackMode ();  Returns true if loopback mode used by THttpServer for web widgets. ;  ; static bool IsMainThrd ();  Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ;  ; static void SetLoopbackMode (bool on=true);  Set loopback mode for THttpServer used for web widgets By default is on. ;  ; static void SetUseConnectionKey (bool on=true);  Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if r",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:7869,Performance,load,loading,7869,"lse};  ! use extra threads for sending data from RWebWindow to clients ;  ; bool fUseSessionKey {false};  ! is session key has to be used for data signing ;  . Friends; class RWebWindow;  . #include <ROOT/RWebWindowsManager.hxx>; Constructor & Destructor Documentation. ◆ RWebWindowsManager(). RWebWindowsManager::RWebWindowsManager ; (; ). window manager constructor Required here for correct usage of unique_ptr<THttpServer> ; Definition at line 273 of file RWebWindowsManager.cxx. ◆ ~RWebWindowsManager(). RWebWindowsManager::~RWebWindowsManager ; (; ). window manager destructor Required here for correct usage of unique_ptr<THttpServer> ; Definition at line 287 of file RWebWindowsManager.cxx. Member Function Documentation. ◆ AddServerLocation(). void RWebWindowsManager::AddServerLocation ; (; const std::string & ; server_prefix, . const std::string & ; files_path . ). static . Configure server location which can be used for loading of custom scripts or files When THttpServer instance of RWebWindowsManager will be created, THttpServer::AddLocation() method with correspondent arguments will be invoked. ; Definition at line 178 of file RWebWindowsManager.cxx. ◆ AssignMainThrd(). void RWebWindowsManager::AssignMainThrd ; (; ). static . Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 117 of file RWebWindowsManager.cxx. ◆ ClearServerLocations(). void RWebWindowsManager::ClearServerLocations ; (; ). static . Clear all server locations Does not change configuration of already running HTTP server. ; Definition at line 239 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetw",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:8274,Performance,load,loaded,8274,"age of unique_ptr<THttpServer> ; Definition at line 273 of file RWebWindowsManager.cxx. ◆ ~RWebWindowsManager(). RWebWindowsManager::~RWebWindowsManager ; (; ). window manager destructor Required here for correct usage of unique_ptr<THttpServer> ; Definition at line 287 of file RWebWindowsManager.cxx. Member Function Documentation. ◆ AddServerLocation(). void RWebWindowsManager::AddServerLocation ; (; const std::string & ; server_prefix, . const std::string & ; files_path . ). static . Configure server location which can be used for loading of custom scripts or files When THttpServer instance of RWebWindowsManager will be created, THttpServer::AddLocation() method with correspondent arguments will be invoked. ; Definition at line 178 of file RWebWindowsManager.cxx. ◆ AssignMainThrd(). void RWebWindowsManager::AssignMainThrd ; (; ). static . Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 117 of file RWebWindowsManager.cxx. ◆ ClearServerLocations(). void RWebWindowsManager::ClearServerLocations ; (; ). static . Clear all server locations Does not change configuration of already running HTTP server. ; Definition at line 239 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:10042,Performance,latency,latency,10042,"le: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:10084,Performance,load,load,10084,"le: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:11363,Performance,cache,cache,11363,"configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can configure this directly (default no) WebGui.WSLongpoll: no; Following parameter controls browser max-age caching parameter for files (default 3600) When 0 is specified, browser cache will be disabled WebGui.HttpMaxAge: 3600; Also one can provide extra URL options for, see TCivetweb::Create for list of supported options WebGui.HttpExtraArgs: winsymlinks=no; One also can configure usage of FastCGI server for web windows: WebGui.FastCgiPort: 4000; WebGui.FastCgiThreads: 10; To be able start web browser for such windows, one can provide real URL of the web server which will connect with that FastCGI instance: WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path; For some custom applications one requires to load JavaScript modules or other files. For such applications one may require to load files from other locations which can be configured with AddServerLocation() method or directly via: WebGui.ServerLocations: location1:/file/path/to/location1;location2:/file/path/to/location2 . Definition at line 430 of file RWebWindowsManager.cxx. ◆ CreateWindow(). std::shared_ptr< RWebWindow > RWebWindowsManage",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:11912,Performance,load,load,11912,"d specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can configure this directly (default no) WebGui.WSLongpoll: no; Following parameter controls browser max-age caching parameter for files (default 3600) When 0 is specified, browser cache will be disabled WebGui.HttpMaxAge: 3600; Also one can provide extra URL options for, see TCivetweb::Create for list of supported options WebGui.HttpExtraArgs: winsymlinks=no; One also can configure usage of FastCGI server for web windows: WebGui.FastCgiPort: 4000; WebGui.FastCgiThreads: 10; To be able start web browser for such windows, one can provide real URL of the web server which will connect with that FastCGI instance: WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path; For some custom applications one requires to load JavaScript modules or other files. For such applications one may require to load files from other locations which can be configured with AddServerLocation() method or directly via: WebGui.ServerLocations: location1:/file/path/to/location1;location2:/file/path/to/location2 . Definition at line 430 of file RWebWindowsManager.cxx. ◆ CreateWindow(). std::shared_ptr< RWebWindow > RWebWindowsManager::CreateWindow ; (; ). Creates new window To show window, RWebWindow::Show() have to be called. ; Definition at line 619 of file RWebWindowsManager.cxx. ◆ GenerateKey(). std::string RWebWindowsManager::GenerateKey ; (; int ; keylen = 32). staticprivate . Static method to generate cryptographic key Parameter keylen defines length of cryptographic key in bytes Output string will be hex formatted and includes ""-"" separator after every 4 bytes Example for 16 bytes: ""fca45856-41bee066-ff74cc96-9154d405"". ; Definition at line 250 of file RWebWindowsManager.cxx. ◆ GetLaunchTmout(). float",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:11993,Performance,load,load,11993,"cket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can configure this directly (default no) WebGui.WSLongpoll: no; Following parameter controls browser max-age caching parameter for files (default 3600) When 0 is specified, browser cache will be disabled WebGui.HttpMaxAge: 3600; Also one can provide extra URL options for, see TCivetweb::Create for list of supported options WebGui.HttpExtraArgs: winsymlinks=no; One also can configure usage of FastCGI server for web windows: WebGui.FastCgiPort: 4000; WebGui.FastCgiThreads: 10; To be able start web browser for such windows, one can provide real URL of the web server which will connect with that FastCGI instance: WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path; For some custom applications one requires to load JavaScript modules or other files. For such applications one may require to load files from other locations which can be configured with AddServerLocation() method or directly via: WebGui.ServerLocations: location1:/file/path/to/location1;location2:/file/path/to/location2 . Definition at line 430 of file RWebWindowsManager.cxx. ◆ CreateWindow(). std::shared_ptr< RWebWindow > RWebWindowsManager::CreateWindow ; (; ). Creates new window To show window, RWebWindow::Show() have to be called. ; Definition at line 619 of file RWebWindowsManager.cxx. ◆ GenerateKey(). std::string RWebWindowsManager::GenerateKey ; (; int ; keylen = 32). staticprivate . Static method to generate cryptographic key Parameter keylen defines length of cryptographic key in bytes Output string will be hex formatted and includes ""-"" separator after every 4 bytes Example for 16 bytes: ""fca45856-41bee066-ff74cc96-9154d405"". ; Definition at line 250 of file RWebWindowsManager.cxx. ◆ GetLaunchTmout(). float ROOT::RWebWindowsManager::GetLaunchTmout ; (; ); const. inlineprivate . Returns timeout for launching new browser process. ; De",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:14936,Performance,load,loaded,14936,"m remote. ; Definition at line 686 of file RWebWindowsManager.cxx. ◆ InformListener(). bool RWebWindowsManager::InformListener ; (; const std::string & ; msg). private . If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ; Definition at line 299 of file RWebWindowsManager.cxx. ◆ Instance(). std::shared_ptr< RWebWindowsManager > & RWebWindowsManager::Instance ; (; ). static . Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ; Definition at line 79 of file RWebWindowsManager.cxx. ◆ IsLoopbackMode(). bool RWebWindowsManager::IsLoopbackMode ; (; ). static . Returns true if loopback mode used by THttpServer for web widgets. ; Definition at line 147 of file RWebWindowsManager.cxx. ◆ IsMainThrd(). bool RWebWindowsManager::IsMainThrd ; (; ). static . Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 105 of file RWebWindowsManager.cxx. ◆ IsUseHttpThread(). bool ROOT::RWebWindowsManager::IsUseHttpThread ; (; ); const. inlineprivate . Returns true if http server use special thread for requests processing (default off) ; Definition at line 60 of file RWebWindowsManager.hxx. ◆ IsUseSenderThreads(). bool ROOT::RWebWindowsManager::IsUseSenderThreads ; (; ); const. inlineprivate . Returns true if extra threads to send data via websockets will be used (default off) ; Definition at line 63 of file RWebWindowsManager.hxx. ◆ SetDeleteCallback(). void ROOT::RWebWindowsManager::SetDeleteCallback ; (; WebWindowDeleteCallback_t ; func). inline . Assign show callback which can catch window showing, used by RBrowser. ; Definition at line 98 of file RWebWindowsManager.hxx. ◆ SetLoopbackMode(). void RWebWindowsManager::SetLo",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:19640,Performance,perform,perform,19640,"me in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; WebGui.Firefox: full path to Mozilla Firefox executable; WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; WebGui.FirefoxProfile: name of Firefox profile to use; WebGui.FirefoxProfilePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; WebGui.LaunchTmout: time required to start process in seconds (default 30 s); WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/1.128.0/; WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; THttpServer-related parameters documented in CreateServer method ; Definition at line 778 of file RWebWindowsManager.cxx. ◆ Terminate(). void RWebWindowsManager::",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:20364,Performance,load,loaded,20364,"filePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; WebGui.LaunchTmout: time required to start process in seconds (default 30 s); WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/1.128.0/; WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; THttpServer-related parameters documented in CreateServer method ; Definition at line 778 of file RWebWindowsManager.cxx. ◆ Terminate(). void RWebWindowsManager::Terminate ; (; ). Terminate http server and ROOT application. ; Definition at line 937 of file RWebWindowsManager.cxx. ◆ Unregister(). void RWebWindowsManager::Unregister ; (; RWebWindow & ; win). private . Release all references to specified window Called from RWebWindow destructor. ; Definition at line 674 of file RWebWindowsManager.cxx. ◆ WaitFor(). int RWebWindowsManager::WaitFor ; (; RWebWindow & ; win, . WebWindowWaitFunc_t ; check, . bool ; timed = false, . double ; timelimit = -1 . ). private . Waits until provided check function or lambdas returns non-zero value Regularly calls WebWindow::Sync() method to let run event loop If call from the main thread, runs system events processing C",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:4276,Safety,timeout,timeout,4276,"have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ;  ; static void SetLoopbackMode (bool on=true);  Set loopback mode for THttpServer used for web widgets By default is on. ;  ; static void SetUseConnectionKey (bool on=true);  Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via websockets will be used (default off) ;  ; unsigned ShowWindow (RWebWindow &win, const RWebDisplayArgs &args);  Show window in specified location, see Show() method for more details. ;  ; void Unregister (RWebWindow &win);  Release all references to specified window Called from RWebWindow destructor. ; ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:6418,Safety,timeout,timeout,6418,"ic key Parameter keylen defines length of cryptographic key in bytes Output string will be hex formatted and includes ""-"" separator after every 4 bytes Example for 16 bytes: ""fca45856-41bee066-ff74cc96-9154d405"". ;  . Private Attributes; std::string fAddr;  ! HTTP address of the server ;  ; std::unique_ptr< TExec > fAssgnExec;  ! special exec to assign thread id via ProcessEvents ;  ; WebWindowDeleteCallback_t fDeleteCallback;  ! function called when RWebWindow is destroyed ;  ; bool fExternalProcessEvents {false};  ! indicate that there are external process events engine ;  ; unsigned fIdCnt {0};  ! counter for identifiers ;  ; float fLaunchTmout {30.};  ! timeout in seconds to start browser process, default 30s ;  ; std::recursive_mutex fMutex;  ! main mutex, used for window creations ;  ; std::unique_ptr< THttpServer > fServer;  ! central communication with the all used displays ;  ; std::string fSessionKey;  ! secret session key used on client to code connections keys ;  ; WebWindowShowCallback_t fShowCallback;  ! function called for each RWebWindow::Show call ;  ; bool fUseHttpThrd {false};  ! use special thread for THttpServer ;  ; bool fUseSenderThreads {false};  ! use extra threads for sending data from RWebWindow to clients ;  ; bool fUseSessionKey {false};  ! is session key has to be used for data signing ;  . Friends; class RWebWindow;  . #include <ROOT/RWebWindowsManager.hxx>; Constructor & Destructor Documentation. ◆ RWebWindowsManager(). RWebWindowsManager::RWebWindowsManager ; (; ). window manager constructor Required here for correct usage of unique_ptr<THttpServer> ; Definition at line 273 of file RWebWindowsManager.cxx. ◆ ~RWebWindowsManager(). RWebWindowsManager::~RWebWindowsManager ; (; ). window manager destructor Required here for correct usage of unique_ptr<THttpServer> ; Definition at line 287 of file RWebWindowsManager.cxx. Member Function Documentation. ◆ AddServerLocation(). void RWebWindowsManager::AddServerLocation ; (; const std::string ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:9999,Safety,timeout,timeout,9999,"onfigure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes):",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:10555,Safety,timeout,timeouts,10555,"ecified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can configure this directly (default no) WebGui.WSLongpoll: no; Following parameter controls browser max-age caching parameter for files (default 3600) When 0 is specified, browser cache will be disabled WebGui.HttpMaxAge: 3600; Also one can provide extra URL options for, see TCivetweb::Create for list of supported options WebGui.HttpExtraArgs: winsymlinks=no; O",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:12981,Safety,timeout,timeout,12981," files from other locations which can be configured with AddServerLocation() method or directly via: WebGui.ServerLocations: location1:/file/path/to/location1;location2:/file/path/to/location2 . Definition at line 430 of file RWebWindowsManager.cxx. ◆ CreateWindow(). std::shared_ptr< RWebWindow > RWebWindowsManager::CreateWindow ; (; ). Creates new window To show window, RWebWindow::Show() have to be called. ; Definition at line 619 of file RWebWindowsManager.cxx. ◆ GenerateKey(). std::string RWebWindowsManager::GenerateKey ; (; int ; keylen = 32). staticprivate . Static method to generate cryptographic key Parameter keylen defines length of cryptographic key in bytes Output string will be hex formatted and includes ""-"" separator after every 4 bytes Example for 16 bytes: ""fca45856-41bee066-ff74cc96-9154d405"". ; Definition at line 250 of file RWebWindowsManager.cxx. ◆ GetLaunchTmout(). float ROOT::RWebWindowsManager::GetLaunchTmout ; (; ); const. inlineprivate . Returns timeout for launching new browser process. ; Definition at line 66 of file RWebWindowsManager.hxx. ◆ GetServer(). THttpServer * ROOT::RWebWindowsManager::GetServer ; (; ); const. inline . Returns THttpServer instance. ; Definition at line 89 of file RWebWindowsManager.hxx. ◆ GetServerAddr(). std::string ROOT::RWebWindowsManager::GetServerAddr ; (; ); const. inline . Returns http address of the server, empty string when not available. ; Definition at line 92 of file RWebWindowsManager.hxx. ◆ GetServerLocations(). std::map< std::string, std::string > RWebWindowsManager::GetServerLocations ; (; ). static . Returns server locations as <std::string, std::string> Key is location name (with slash at the end) and value is file path. ; Definition at line 209 of file RWebWindowsManager.cxx. ◆ GetUrl(). std::string RWebWindowsManager::GetUrl ; (; RWebWindow & ; win, . bool ; remote = false, . std::string * ; produced_key = nullptr . ). private . Provide URL address to access specified window from inside or from r",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:22939,Safety,timeout,timeout,22939,"sManager::fAddr. private . ! HTTP address of the server ; Definition at line 46 of file RWebWindowsManager.hxx. ◆ fAssgnExec. std::unique_ptr<TExec> ROOT::RWebWindowsManager::fAssgnExec. private . ! special exec to assign thread id via ProcessEvents ; Definition at line 55 of file RWebWindowsManager.hxx. ◆ fDeleteCallback. WebWindowDeleteCallback_t ROOT::RWebWindowsManager::fDeleteCallback. private . ! function called when RWebWindow is destroyed ; Definition at line 57 of file RWebWindowsManager.hxx. ◆ fExternalProcessEvents. bool ROOT::RWebWindowsManager::fExternalProcessEvents {false}. private . ! indicate that there are external process events engine ; Definition at line 54 of file RWebWindowsManager.hxx. ◆ fIdCnt. unsigned ROOT::RWebWindowsManager::fIdCnt {0}. private . ! counter for identifiers ; Definition at line 50 of file RWebWindowsManager.hxx. ◆ fLaunchTmout. float ROOT::RWebWindowsManager::fLaunchTmout {30.}. private . ! timeout in seconds to start browser process, default 30s ; Definition at line 53 of file RWebWindowsManager.hxx. ◆ fMutex. std::recursive_mutex ROOT::RWebWindowsManager::fMutex. private . ! main mutex, used for window creations ; Definition at line 49 of file RWebWindowsManager.hxx. ◆ fServer. std::unique_ptr<THttpServer> ROOT::RWebWindowsManager::fServer. private . ! central communication with the all used displays ; Definition at line 45 of file RWebWindowsManager.hxx. ◆ fSessionKey. std::string ROOT::RWebWindowsManager::fSessionKey. private . ! secret session key used on client to code connections keys ; Definition at line 47 of file RWebWindowsManager.hxx. ◆ fShowCallback. WebWindowShowCallback_t ROOT::RWebWindowsManager::fShowCallback. private . ! function called for each RWebWindow::Show call ; Definition at line 56 of file RWebWindowsManager.hxx. ◆ fUseHttpThrd. bool ROOT::RWebWindowsManager::fUseHttpThrd {false}. private . ! use special thread for THttpServer ; Definition at line 51 of file RWebWindowsManager.hxx. ◆ fUseSenderThr",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:3613,Security,hash,hash,3613,"ng, std::string> Key is location name (with slash at the end) and value is file path. ;  ; static std::shared_ptr< RWebWindowsManager > & Instance ();  Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ;  ; static bool IsLoopbackMode ();  Returns true if loopback mode used by THttpServer for web widgets. ;  ; static bool IsMainThrd ();  Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ;  ; static void SetLoopbackMode (bool on=true);  Set loopback mode for THttpServer used for web widgets By default is on. ;  ; static void SetUseConnectionKey (bool on=true);  Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg)",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:3869,Security,hash,hash,3869," if loopback mode used by THttpServer for web widgets. ;  ; static bool IsMainThrd ();  Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ;  ; static void SetLoopbackMode (bool on=true);  Set loopback mode for THttpServer used for web widgets By default is on. ;  ; static void SetUseConnectionKey (bool on=true);  Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:4440,Security,access,access,4440," (bool on=true);  Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via websockets will be used (default off) ;  ; unsigned ShowWindow (RWebWindow &win, const RWebDisplayArgs &args);  Show window in specified location, see Show() method for more details. ;  ; void Unregister (RWebWindow &win);  Release all references to specified window Called from RWebWindow destructor. ;  ; int WaitFor (RWebWindow &win, WebWindowWaitFunc_t check, bool timed=false, double tm=-1);  Waits until provided check function or lambdas returns non-zero value Regularly calls WebWindow::Sync() method to let run event loop If call from the main thread, r",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:9495,Security,secur,secured,9495,"file RWebWindowsManager.cxx. ◆ ClearServerLocations(). void RWebWindowsManager::ClearServerLocations ; (; ). static . Clear all server locations Does not change configuration of already running HTTP server. ; Definition at line 239 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrd",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:10762,Security,secur,security,10762,"together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can configure this directly (default no) WebGui.WSLongpoll: no; Following parameter controls browser max-age caching parameter for files (default 3600) When 0 is specified, browser cache will be disabled WebGui.HttpMaxAge: 3600; Also one can provide extra URL options for, see TCivetweb::Create for list of supported options WebGui.HttpExtraArgs: winsymlinks=no; One also can configure usage of FastCGI server for web windows: WebGui.FastCgiPort: 4000; WebGui.FastCgiThreads: 10; To be able start web browser for such windows, one can provide real URL of the web server which will connect with that FastC",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:13953,Security,access,access,13953,"vate . Returns timeout for launching new browser process. ; Definition at line 66 of file RWebWindowsManager.hxx. ◆ GetServer(). THttpServer * ROOT::RWebWindowsManager::GetServer ; (; ); const. inline . Returns THttpServer instance. ; Definition at line 89 of file RWebWindowsManager.hxx. ◆ GetServerAddr(). std::string ROOT::RWebWindowsManager::GetServerAddr ; (; ); const. inline . Returns http address of the server, empty string when not available. ; Definition at line 92 of file RWebWindowsManager.hxx. ◆ GetServerLocations(). std::map< std::string, std::string > RWebWindowsManager::GetServerLocations ; (; ). static . Returns server locations as <std::string, std::string> Key is location name (with slash at the end) and value is file path. ; Definition at line 209 of file RWebWindowsManager.cxx. ◆ GetUrl(). std::string RWebWindowsManager::GetUrl ; (; RWebWindow & ; win, . bool ; remote = false, . std::string * ; produced_key = nullptr . ). private . Provide URL address to access specified window from inside or from remote. ; Definition at line 686 of file RWebWindowsManager.cxx. ◆ InformListener(). bool RWebWindowsManager::InformListener ; (; const std::string & ; msg). private . If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ; Definition at line 299 of file RWebWindowsManager.cxx. ◆ Instance(). std::shared_ptr< RWebWindowsManager > & RWebWindowsManager::Instance ; (; ). static . Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ; Definition at line 79 of file RWebWindowsManager.cxx. ◆ IsLoopbackMode(). bool RWebWindowsManager::IsLoopbackMode ; (; ). static . Returns true if loopback mode used by THttpServer for web widgets. ; Definition at line 147 of file RWebWindowsManager.cxx. ◆ IsMainThrd(). bool RWebWindowsManager::IsMainThrd ; (; ). static . Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thre",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:16236,Security,access,access,16236,"ead(). bool ROOT::RWebWindowsManager::IsUseHttpThread ; (; ); const. inlineprivate . Returns true if http server use special thread for requests processing (default off) ; Definition at line 60 of file RWebWindowsManager.hxx. ◆ IsUseSenderThreads(). bool ROOT::RWebWindowsManager::IsUseSenderThreads ; (; ); const. inlineprivate . Returns true if extra threads to send data via websockets will be used (default off) ; Definition at line 63 of file RWebWindowsManager.hxx. ◆ SetDeleteCallback(). void ROOT::RWebWindowsManager::SetDeleteCallback ; (; WebWindowDeleteCallback_t ; func). inline . Assign show callback which can catch window showing, used by RBrowser. ; Definition at line 98 of file RWebWindowsManager.hxx. ◆ SetLoopbackMode(). void RWebWindowsManager::SetLoopbackMode ; (; bool ; on = true). static . Set loopback mode for THttpServer used for web widgets By default is on. ; Only local communication via localhost address is possible Disable it only if really necessary - it may open unauthorized access to your application from external nodes!! ; Definition at line 129 of file RWebWindowsManager.cxx. ◆ SetShowCallback(). void ROOT::RWebWindowsManager::SetShowCallback ; (; WebWindowShowCallback_t ; func). inline . Assign show callback which can catch window showing, used by RBrowser. ; Definition at line 95 of file RWebWindowsManager.hxx. ◆ SetUseConnectionKey(). void RWebWindowsManager::SetUseConnectionKey ; (; bool ; on = true). static . Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 168 of file RWebWindowsManager.cxx. ◆ SetUseSessionKey(). void RWebWindowsManager::SetUseSessionKey ; (; bool ; on = true). static . Enable or disable usage of session key (default on) If enabled, secrete session key used ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:16878,Security,hash,hash,16878,"back which can catch window showing, used by RBrowser. ; Definition at line 98 of file RWebWindowsManager.hxx. ◆ SetLoopbackMode(). void RWebWindowsManager::SetLoopbackMode ; (; bool ; on = true). static . Set loopback mode for THttpServer used for web widgets By default is on. ; Only local communication via localhost address is possible Disable it only if really necessary - it may open unauthorized access to your application from external nodes!! ; Definition at line 129 of file RWebWindowsManager.cxx. ◆ SetShowCallback(). void ROOT::RWebWindowsManager::SetShowCallback ; (; WebWindowShowCallback_t ; func). inline . Assign show callback which can catch window showing, used by RBrowser. ; Definition at line 95 of file RWebWindowsManager.hxx. ◆ SetUseConnectionKey(). void RWebWindowsManager::SetUseConnectionKey ; (; bool ; on = true). static . Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 168 of file RWebWindowsManager.cxx. ◆ SetUseSessionKey(). void RWebWindowsManager::SetUseSessionKey ; (; bool ; on = true). static . Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 157 of file RWebWindowsManager.cxx. ◆ ShowWindow(). unsigned RWebWindowsManager::ShowWindow ; (; RWebWindow & ; win, . const RWebDisplayArgs & ; user_args . ). private . Show window in specified location, see Show() method for more details. ; Show web window in specified location.; Parameters. [in,out]winweb window by reference ; user_argsspecifies where and how display web window. As display args one can use string like ""firefox"" or ""chrome"" - these are two main supp",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:17237,Security,hash,hash,17237,"access to your application from external nodes!! ; Definition at line 129 of file RWebWindowsManager.cxx. ◆ SetShowCallback(). void ROOT::RWebWindowsManager::SetShowCallback ; (; WebWindowShowCallback_t ; func). inline . Assign show callback which can catch window showing, used by RBrowser. ; Definition at line 95 of file RWebWindowsManager.hxx. ◆ SetUseConnectionKey(). void RWebWindowsManager::SetUseConnectionKey ; (; bool ; on = true). static . Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 168 of file RWebWindowsManager.cxx. ◆ SetUseSessionKey(). void RWebWindowsManager::SetUseSessionKey ; (; bool ; on = true). static . Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 157 of file RWebWindowsManager.cxx. ◆ ShowWindow(). unsigned RWebWindowsManager::ShowWindow ; (; RWebWindow & ; win, . const RWebDisplayArgs & ; user_args . ). private . Show window in specified location, see Show() method for more details. ; Show web window in specified location.; Parameters. [in,out]winweb window by reference ; user_argsspecifies where and how display web window. As display args one can use string like ""firefox"" or ""chrome"" - these are two main supported web browsers. See RWebDisplayArgs::SetBrowserKind() for all available options. Default value for the browser can be configured when starting root with –web argument like: ""root --web=chrome"". When root started in web server mode ""root --web=server"", no any web browser will be started - just URL will be printout, which can be entered in any running web browser; If allowed, same window can be disp",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:20095,Testability,log,log,20095,"ode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; WebGui.FirefoxProfile: name of Firefox profile to use; WebGui.FirefoxProfilePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; WebGui.LaunchTmout: time required to start process in seconds (default 30 s); WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/1.128.0/; WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; THttpServer-related parameters documented in CreateServer method ; Definition at line 778 of file RWebWindowsManager.cxx. ◆ Terminate(). void RWebWindowsManager::Terminate ; (; ). Terminate http server and ROOT application. ; Definition at line 937 of file RWebWindowsManager.cxx. ◆ Unregister(). void RWebWindowsManager::Unregister ; (; RWebWindow & ; win). private . Release all references to specified window Called from RWebWindow destructor. ; Definition at line 674 of file RWebWindowsManager.cxx. ◆ WaitFor(). int RWebWindowsManager::WaitFor ; (; RWebWindow & ; win, . WebWindowWaitFunc_t ; check, .",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:6129,Availability,error,error,6129,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:6218,Availability,error,error,6218,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:6373,Availability,error,error,6373,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:6670,Availability,error,error,6670,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:10754,Availability,error,error,10754,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static int GetBoolEnv (const std::string &name, int dfl=-1);  Parse boolean gEnv variable which should be ""yes"" or ""no"". ;  ;  Static Public Member Functions inherited from THttpWSHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ;",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:339,Integrability,wrap,wrapper,339,". ROOT: ROOT::RWebWindowWSHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; List of all members ; ROOT::RWebWindowWSHandler Class Reference. ; just wrapper to deliver websockets call-backs to the RWebWindow class ; Definition at line 30 of file RWebWindowWSHandler.hxx. Public Member Functions;  RWebWindowWSHandler (RWebWindow &wind, const char *name);  constructor ;  ;  ~RWebWindowWSHandler () override=default;  ; Bool_t AllowMTProcess () const override;  Allow processing of WS actions in arbitrary thread. ;  ; Bool_t AllowMTSend () const override;  Allows usage of special threads for send operations. ;  ; Bool_t CanServeFiles () const override;  returns true when window allowed to serve files relative to default page ;  ; void CompleteWSSend (UInt_t wsid) override;  React on completion of multi-threaded send operation. ;  ; TString GetDefaultPageContent () override;  returns content of default web-page THttpWSHandler interface ;  ; Bool_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () con",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:1123,Integrability,interface,interface,1123,"mbers |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; List of all members ; ROOT::RWebWindowWSHandler Class Reference. ; just wrapper to deliver websockets call-backs to the RWebWindow class ; Definition at line 30 of file RWebWindowWSHandler.hxx. Public Member Functions;  RWebWindowWSHandler (RWebWindow &wind, const char *name);  constructor ;  ;  ~RWebWindowWSHandler () override=default;  ; Bool_t AllowMTProcess () const override;  Allow processing of WS actions in arbitrary thread. ;  ; Bool_t AllowMTSend () const override;  Allows usage of special threads for send operations. ;  ; Bool_t CanServeFiles () const override;  returns true when window allowed to serve files relative to default page ;  ; void CompleteWSSend (UInt_t wsid) override;  React on completion of multi-threaded send operation. ;  ; TString GetDefaultPageContent () override;  returns content of default web-page THttpWSHandler interface ;  ; Bool_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () const;  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All sen",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:1260,Integrability,interface,interface,1260,"mbers |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; List of all members ; ROOT::RWebWindowWSHandler Class Reference. ; just wrapper to deliver websockets call-backs to the RWebWindow class ; Definition at line 30 of file RWebWindowWSHandler.hxx. Public Member Functions;  RWebWindowWSHandler (RWebWindow &wind, const char *name);  constructor ;  ;  ~RWebWindowWSHandler () override=default;  ; Bool_t AllowMTProcess () const override;  Allow processing of WS actions in arbitrary thread. ;  ; Bool_t AllowMTSend () const override;  Allows usage of special threads for send operations. ;  ; Bool_t CanServeFiles () const override;  returns true when window allowed to serve files relative to default page ;  ; void CompleteWSSend (UInt_t wsid) override;  React on completion of multi-threaded send operation. ;  ; TString GetDefaultPageContent () override;  returns content of default web-page THttpWSHandler interface ;  ; Bool_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () const;  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All sen",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:6135,Integrability,message,message,6135,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:6676,Integrability,message,message,6676,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:7666,Integrability,message,message,7666,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:10760,Integrability,message,message,10760,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static int GetBoolEnv (const std::string &name, int dfl=-1);  Parse boolean gEnv variable which should be ""yes"" or ""no"". ;  ;  Static Public Member Functions inherited from THttpWSHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ;",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:11133,Integrability,message,message,11133," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static int GetBoolEnv (const std::string &name, int dfl=-1);  Parse boolean gEnv variable which should be ""yes"" or ""no"". ;  ;  Static Public Member Functions inherited from THttpWSHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; s",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:16728,Integrability,interface,interface,16728,"owWSHandler::CompleteWSSend ; (; UInt_t ; wsid). inlineoverridevirtual . React on completion of multi-threaded send operation. ; Reimplemented from THttpWSHandler.; Definition at line 155 of file RWebWindowWSHandler.hxx. ◆ GetBoolEnv(). int RWebWindowWSHandler::GetBoolEnv ; (; const std::string & ; name, . int ; dflt = -1 . ). static . Parse boolean gEnv variable which should be ""yes"" or ""no"". ; Returns1 for true or 0 for false Returns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 48 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandler.hxx. ◆ ProcessBatchHolder(). Bool_t ROOT::RWebWindowWSHandler::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; ). inlineoverrideprotectedvirtual . Method used to accept or reject root_batch_holder.js request. ; Reimplemented from THttpWSHandler.; Definition at line 33 of file RWebWindowWSHandler.hxx. ◆ ProcessWS(). Bool_t ROOT::RWebWindowWSHandler::ProcessWS ; (; THttpCallArg * ; arg). inlineoverridevirtual . Process websocket request - called from THttpServer thread THttpWSHandler interface. ; Implements THttpWSHandler.; Definition at line 142 of file RWebWindowWSHandler.hxx. ◆ VerifyDefaultPageContent(). void ROOT::RWebWindowWSHandler::VerifyDefaultPageContent ; (; std::shared_ptr< THttpCallArg > & ; arg). inlineoverrideprotectedvirtual . Method called when default page content is prepared for use By default no-cache header is provided. ; Reimplemented from THttpWSHandler",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:17326,Integrability,interface,interface,17326,ns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 48 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandler.hxx. ◆ ProcessBatchHolder(). Bool_t ROOT::RWebWindowWSHandler::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; ). inlineoverrideprotectedvirtual . Method used to accept or reject root_batch_holder.js request. ; Reimplemented from THttpWSHandler.; Definition at line 33 of file RWebWindowWSHandler.hxx. ◆ ProcessWS(). Bool_t ROOT::RWebWindowWSHandler::ProcessWS ; (; THttpCallArg * ; arg). inlineoverridevirtual . Process websocket request - called from THttpServer thread THttpWSHandler interface. ; Implements THttpWSHandler.; Definition at line 142 of file RWebWindowWSHandler.hxx. ◆ VerifyDefaultPageContent(). void ROOT::RWebWindowWSHandler::VerifyDefaultPageContent ; (; std::shared_ptr< THttpCallArg > & ; arg). inlineoverrideprotectedvirtual . Method called when default page content is prepared for use By default no-cache header is provided. ; Reimplemented from THttpWSHandler.; Definition at line 41 of file RWebWindowWSHandler.hxx. Member Data Documentation. ◆ fWindow. RWebWindow& ROOT::RWebWindowWSHandler::fWindow. ! window reference ; Definition at line 123 of file RWebWindowWSHandler.hxx. gui/webdisplay/src/RWebWindowWSHandler.hxx; gui/webdisplay/src/RWebWindowsManager.cxx. ROOTRWebWindowWSHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:1301,Modifiability,inherit,inherited,1301,"RWebWindow class ; Definition at line 30 of file RWebWindowWSHandler.hxx. Public Member Functions;  RWebWindowWSHandler (RWebWindow &wind, const char *name);  constructor ;  ;  ~RWebWindowWSHandler () override=default;  ; Bool_t AllowMTProcess () const override;  Allow processing of WS actions in arbitrary thread. ;  ; Bool_t AllowMTSend () const override;  Allows usage of special threads for send operations. ;  ; Bool_t CanServeFiles () const override;  returns true when window allowed to serve files relative to default page ;  ; void CompleteWSSend (UInt_t wsid) override;  React on completion of multi-threaded send operation. ;  ; TString GetDefaultPageContent () override;  returns content of default web-page THttpWSHandler interface ;  ; Bool_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () const;  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All send functions are blocking and must be performed from main thread If sync mode is false, WS handler can be used from different threads and starts its own sending threads. ;  ; Int_t SendCharStarWS (UInt_t wsid, const char *str);  Send string v",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:2932,Modifiability,inherit,inherited,2932,"ed to be destroyed. ;  ; Bool_t IsSyncMode () const;  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All send functions are blocking and must be performed from main thread If sync mode is false, WS handler can be used from different threads and starts its own sending threads. ;  ; Int_t SendCharStarWS (UInt_t wsid, const char *str);  Send string via given websocket id. ;  ; Int_t SendHeaderWS (UInt_t wsid, const char *hdr, const void *buf, int len);  Send binary data with text header via given websocket id. ;  ; Int_t SendWS (UInt_t wsid, const void *buf, int len);  Send binary data via given websocket id. ;  ; void SetDisabled ();  Disable all processing of websockets, normally called shortly before destructor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:4672,Modifiability,inherit,inherited,4672,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:5765,Modifiability,inherit,inheritance,5765,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:7764,Modifiability,inherit,inherits,7764,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:7881,Modifiability,inherit,inherits,7881,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:11528,Modifiability,variab,variable,11528,");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static int GetBoolEnv (const std::string &name, int dfl=-1);  Parse boolean gEnv variable which should be ""yes"" or ""no"". ;  ;  Static Public Member Functions inherited from THttpWSHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of object",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:11605,Modifiability,inherit,inherited,11605,"ngs in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static int GetBoolEnv (const std::string &name, int dfl=-1);  Parse boolean gEnv variable which should be ""yes"" or ""no"". ;  ;  Static Public Member Functions inherited from THttpWSHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:11823,Modifiability,inherit,inherited,11823,"ngs in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static int GetBoolEnv (const std::string &name, int dfl=-1);  Parse boolean gEnv variable which should be ""yes"" or ""no"". ;  ;  Static Public Member Functions inherited from THttpWSHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:12033,Modifiability,inherit,inherited,12033,"ngs in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static int GetBoolEnv (const std::string &name, int dfl=-1);  Parse boolean gEnv variable which should be ""yes"" or ""no"". ;  ;  Static Public Member Functions inherited from THttpWSHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:13074,Modifiability,inherit,inherited,13074,"tic Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg > &arg) override;  Method called when default page content is prepared for use By default no-cache header is provided. ;  ;  Protected Member Functions inherited from THttpWSHandler;  THttpWSHandler (const char *name, const char *title, Bool_t syncmode=kTRUE);  normal constructor ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNa",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:13236,Modifiability,inherit,inherited,13236,"tic Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg > &arg) override;  Method called when default page content is prepared for use By default no-cache header is provided. ;  ;  Protected Member Functions inherited from THttpWSHandler;  THttpWSHandler (const char *name, const char *title, Bool_t syncmode=kTRUE);  normal constructor ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNa",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:13463,Modifiability,inherit,inherited,13463," Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg > &arg) override;  Method called when default page content is prepared for use By default no-cache header is provided. ;  ;  Protected Member Functions inherited from THttpWSHandler;  THttpWSHandler (const char *name, const char *title, Bool_t syncmode=kTRUE);  normal constructor ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/gui/webdisplay/src/RWebWindowWSHandler.hxx>. Inheritance diagram for ROOT::RWebWindowWSHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:14104,Modifiability,inherit,inherited,14104,"ncmode=kTRUE);  normal constructor ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/gui/webdisplay/src/RWebWindowWSHandler.hxx>. Inheritance diagram for ROOT::RWebWindowWSHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebWindowWSHandler(). ROOT::RWebWindowWSHandler::RWebWindowWSHandler ; (; RWebWindow & ; wind, . const char * ; name . ). inline . constructor ; Definition at line 126 of file RWebWindowWSHandler.hxx. ◆ ~RWebWindowWSHandler(). ROOT::RWebWindowWSHandler::~RWebWindowWSHandler ; (; ). overridedefault . Member Function Documentation. ◆ AllowMTProcess(). Bool_t ROOT::RWebWindowWSHandler::AllowMTProcess ; (; ); const. inlineoverridevirtual . Allow processing of WS actions in arbitrary thread. ; Reimplemented from THttpWSHandler.; Definition at line 149 of file RWebWindowWSHandler.hxx. ◆ Al",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:14197,Modifiability,inherit,inherited,14197,"ncmode=kTRUE);  normal constructor ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/gui/webdisplay/src/RWebWindowWSHandler.hxx>. Inheritance diagram for ROOT::RWebWindowWSHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebWindowWSHandler(). ROOT::RWebWindowWSHandler::RWebWindowWSHandler ; (; RWebWindow & ; wind, . const char * ; name . ). inline . constructor ; Definition at line 126 of file RWebWindowWSHandler.hxx. ◆ ~RWebWindowWSHandler(). ROOT::RWebWindowWSHandler::~RWebWindowWSHandler ; (; ). overridedefault . Member Function Documentation. ◆ AllowMTProcess(). Bool_t ROOT::RWebWindowWSHandler::AllowMTProcess ; (; ); const. inlineoverridevirtual . Allow processing of WS actions in arbitrary thread. ; Reimplemented from THttpWSHandler.; Definition at line 149 of file RWebWindowWSHandler.hxx. ◆ Al",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:16082,Modifiability,variab,variable,16082,"THttpWSHandler.; Definition at line 149 of file RWebWindowWSHandler.hxx. ◆ AllowMTSend(). Bool_t ROOT::RWebWindowWSHandler::AllowMTSend ; (; ); const. inlineoverridevirtual . Allows usage of special threads for send operations. ; Reimplemented from THttpWSHandler.; Definition at line 152 of file RWebWindowWSHandler.hxx. ◆ CanServeFiles(). Bool_t ROOT::RWebWindowWSHandler::CanServeFiles ; (; ); const. inlineoverridevirtual . returns true when window allowed to serve files relative to default page ; Reimplemented from THttpWSHandler.; Definition at line 138 of file RWebWindowWSHandler.hxx. ◆ CompleteWSSend(). void ROOT::RWebWindowWSHandler::CompleteWSSend ; (; UInt_t ; wsid). inlineoverridevirtual . React on completion of multi-threaded send operation. ; Reimplemented from THttpWSHandler.; Definition at line 155 of file RWebWindowWSHandler.hxx. ◆ GetBoolEnv(). int RWebWindowWSHandler::GetBoolEnv ; (; const std::string & ; name, . int ; dflt = -1 . ). static . Parse boolean gEnv variable which should be ""yes"" or ""no"". ; Returns1 for true or 0 for false Returns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 48 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandler.hxx. ◆ ProcessBatchHolder(). Bool_t ROOT::RWebWindowWSHandler::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; ). inlineoverrideprotectedvirtual . Method used to accept or reject root_batch_holder.js request. ; Reimplemented from THttpWSHandler.; Defini",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:16229,Modifiability,variab,variable,16229,"ndler::AllowMTSend ; (; ); const. inlineoverridevirtual . Allows usage of special threads for send operations. ; Reimplemented from THttpWSHandler.; Definition at line 152 of file RWebWindowWSHandler.hxx. ◆ CanServeFiles(). Bool_t ROOT::RWebWindowWSHandler::CanServeFiles ; (; ); const. inlineoverridevirtual . returns true when window allowed to serve files relative to default page ; Reimplemented from THttpWSHandler.; Definition at line 138 of file RWebWindowWSHandler.hxx. ◆ CompleteWSSend(). void ROOT::RWebWindowWSHandler::CompleteWSSend ; (; UInt_t ; wsid). inlineoverridevirtual . React on completion of multi-threaded send operation. ; Reimplemented from THttpWSHandler.; Definition at line 155 of file RWebWindowWSHandler.hxx. ◆ GetBoolEnv(). int RWebWindowWSHandler::GetBoolEnv ; (; const std::string & ; name, . int ; dflt = -1 . ). static . Parse boolean gEnv variable which should be ""yes"" or ""no"". ; Returns1 for true or 0 for false Returns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 48 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandler.hxx. ◆ ProcessBatchHolder(). Bool_t ROOT::RWebWindowWSHandler::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; ). inlineoverrideprotectedvirtual . Method used to accept or reject root_batch_holder.js request. ; Reimplemented from THttpWSHandler.; Definition at line 33 of file RWebWindowWSHandler.hxx. ◆ ProcessWS(). Bool_t ROOT::RWebWindowWSHandler::ProcessWS ; (; THt",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:992,Performance,multi-thread,multi-threaded,992,". ROOT: ROOT::RWebWindowWSHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; List of all members ; ROOT::RWebWindowWSHandler Class Reference. ; just wrapper to deliver websockets call-backs to the RWebWindow class ; Definition at line 30 of file RWebWindowWSHandler.hxx. Public Member Functions;  RWebWindowWSHandler (RWebWindow &wind, const char *name);  constructor ;  ;  ~RWebWindowWSHandler () override=default;  ; Bool_t AllowMTProcess () const override;  Allow processing of WS actions in arbitrary thread. ;  ; Bool_t AllowMTSend () const override;  Allows usage of special threads for send operations. ;  ; Bool_t CanServeFiles () const override;  returns true when window allowed to serve files relative to default page ;  ; void CompleteWSSend (UInt_t wsid) override;  React on completion of multi-threaded send operation. ;  ; TString GetDefaultPageContent () override;  returns content of default web-page THttpWSHandler interface ;  ; Bool_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () con",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:2114,Performance,perform,performed,2114,"_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () const;  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All send functions are blocking and must be performed from main thread If sync mode is false, WS handler can be used from different threads and starts its own sending threads. ;  ; Int_t SendCharStarWS (UInt_t wsid, const char *str);  Send string via given websocket id. ;  ; Int_t SendHeaderWS (UInt_t wsid, const char *hdr, const void *buf, int len);  Send binary data with text header via given websocket id. ;  ; Int_t SendWS (UInt_t wsid, const void *buf, int len);  Send binary data via given websocket id. ;  ; void SetDisabled ();  Disable all processing of websockets, normally called shortly before destructor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNa",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:2183,Performance,perform,performed,2183,"_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () const;  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All send functions are blocking and must be performed from main thread If sync mode is false, WS handler can be used from different threads and starts its own sending threads. ;  ; Int_t SendCharStarWS (UInt_t wsid, const char *str);  Send string via given websocket id. ;  ; Int_t SendHeaderWS (UInt_t wsid, const char *hdr, const void *buf, int len);  Send binary data with text header via given websocket id. ;  ; Int_t SendWS (UInt_t wsid, const void *buf, int len);  Send binary data via given websocket id. ;  ; void SetDisabled ();  Disable all processing of websockets, normally called shortly before destructor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNa",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:12700,Performance,load,loaded,12700,"s * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg > &arg) override;  Method called when default page content is prepared for use By default no-cache header is provided. ;  ;  Protected Member Functions inherited from THttpWSHandler;  THttpWSHandler (const char *name, const char *title, Bool_t syncmode=kTRUE);  normal constructor ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { ",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:13015,Performance,cache,cache,13015,"ersion ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg > &arg) override;  Method called when default page content is prepared for use By default no-cache header is provided. ;  ;  Protected Member Functions inherited from THttpWSHandler;  THttpWSHandler (const char *name, const char *title, Bool_t syncmode=kTRUE);  normal constructor ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasU",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:15821,Performance,multi-thread,multi-threaded,15821,"andler::~RWebWindowWSHandler ; (; ). overridedefault . Member Function Documentation. ◆ AllowMTProcess(). Bool_t ROOT::RWebWindowWSHandler::AllowMTProcess ; (; ); const. inlineoverridevirtual . Allow processing of WS actions in arbitrary thread. ; Reimplemented from THttpWSHandler.; Definition at line 149 of file RWebWindowWSHandler.hxx. ◆ AllowMTSend(). Bool_t ROOT::RWebWindowWSHandler::AllowMTSend ; (; ); const. inlineoverridevirtual . Allows usage of special threads for send operations. ; Reimplemented from THttpWSHandler.; Definition at line 152 of file RWebWindowWSHandler.hxx. ◆ CanServeFiles(). Bool_t ROOT::RWebWindowWSHandler::CanServeFiles ; (; ); const. inlineoverridevirtual . returns true when window allowed to serve files relative to default page ; Reimplemented from THttpWSHandler.; Definition at line 138 of file RWebWindowWSHandler.hxx. ◆ CompleteWSSend(). void ROOT::RWebWindowWSHandler::CompleteWSSend ; (; UInt_t ; wsid). inlineoverridevirtual . React on completion of multi-threaded send operation. ; Reimplemented from THttpWSHandler.; Definition at line 155 of file RWebWindowWSHandler.hxx. ◆ GetBoolEnv(). int RWebWindowWSHandler::GetBoolEnv ; (; const std::string & ; name, . int ; dflt = -1 . ). static . Parse boolean gEnv variable which should be ""yes"" or ""no"". ; Returns1 for true or 0 for false Returns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 48 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandl",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:16455,Performance,load,loaded,16455,"t ROOT::RWebWindowWSHandler::CanServeFiles ; (; ); const. inlineoverridevirtual . returns true when window allowed to serve files relative to default page ; Reimplemented from THttpWSHandler.; Definition at line 138 of file RWebWindowWSHandler.hxx. ◆ CompleteWSSend(). void ROOT::RWebWindowWSHandler::CompleteWSSend ; (; UInt_t ; wsid). inlineoverridevirtual . React on completion of multi-threaded send operation. ; Reimplemented from THttpWSHandler.; Definition at line 155 of file RWebWindowWSHandler.hxx. ◆ GetBoolEnv(). int RWebWindowWSHandler::GetBoolEnv ; (; const std::string & ; name, . int ; dflt = -1 . ). static . Parse boolean gEnv variable which should be ""yes"" or ""no"". ; Returns1 for true or 0 for false Returns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 48 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandler.hxx. ◆ ProcessBatchHolder(). Bool_t ROOT::RWebWindowWSHandler::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; ). inlineoverrideprotectedvirtual . Method used to accept or reject root_batch_holder.js request. ; Reimplemented from THttpWSHandler.; Definition at line 33 of file RWebWindowWSHandler.hxx. ◆ ProcessWS(). Bool_t ROOT::RWebWindowWSHandler::ProcessWS ; (; THttpCallArg * ; arg). inlineoverridevirtual . Process websocket request - called from THttpServer thread THttpWSHandler interface. ; Implements THttpWSHandler.; Definition at line 142 of file RWebWindowWSHandler.hxx. ◆ VerifyDefault",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:17664,Performance,cache,cache,17664,ns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 48 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandler.hxx. ◆ ProcessBatchHolder(). Bool_t ROOT::RWebWindowWSHandler::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; ). inlineoverrideprotectedvirtual . Method used to accept or reject root_batch_holder.js request. ; Reimplemented from THttpWSHandler.; Definition at line 33 of file RWebWindowWSHandler.hxx. ◆ ProcessWS(). Bool_t ROOT::RWebWindowWSHandler::ProcessWS ; (; THttpCallArg * ; arg). inlineoverridevirtual . Process websocket request - called from THttpServer thread THttpWSHandler interface. ; Implements THttpWSHandler.; Definition at line 142 of file RWebWindowWSHandler.hxx. ◆ VerifyDefaultPageContent(). void ROOT::RWebWindowWSHandler::VerifyDefaultPageContent ; (; std::shared_ptr< THttpCallArg > & ; arg). inlineoverrideprotectedvirtual . Method called when default page content is prepared for use By default no-cache header is provided. ; Reimplemented from THttpWSHandler.; Definition at line 41 of file RWebWindowWSHandler.hxx. Member Data Documentation. ◆ fWindow. RWebWindow& ROOT::RWebWindowWSHandler::fWindow. ! window reference ; Definition at line 123 of file RWebWindowWSHandler.hxx. gui/webdisplay/src/RWebWindowWSHandler.hxx; gui/webdisplay/src/RWebWindowsManager.cxx. ROOTRWebWindowWSHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:3800,Security,hash,hash,3800," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:7043,Availability,error,error,7043,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:7132,Availability,error,error,7132,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:7287,Availability,error,error,7287,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:7584,Availability,error,error,7584,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:12148,Availability,error,error,12148," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:7049,Integrability,message,message,7049,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:7590,Integrability,message,message,7590,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:8792,Integrability,message,message,8792,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:12154,Integrability,message,message,12154," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:12527,Integrability,message,message,12527," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Prote",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:13579,Integrability,wrap,wrap,13579,"ption=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Rcpp::DataFrame df;  . Friends; SEXP Rcpp::wrap (const TRDataFrame &f);  ; class TRInterface;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ()",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:18755,Integrability,wrap,wrap,18755,"r SEXP ; (; ). inline . Definition at line 380 of file TRDataFrame.h. ◆ operator SEXP() [2/2]. ROOT::R::TRDataFrame::operator SEXP ; (; ); const. inline . Definition at line 385 of file TRDataFrame.h. ◆ operator=() [1/3]. TRDataFrame & ROOT::R::TRDataFrame::operator= ; (; SEXP ; obj). inline . Definition at line 374 of file TRDataFrame.h. ◆ operator=() [2/3]. TRDataFrame & ROOT::R::TRDataFrame::operator= ; (; TRDataFrame & ; obj). inline . Definition at line 362 of file TRDataFrame.h. ◆ operator=() [3/3]. TRDataFrame & ROOT::R::TRDataFrame::operator= ; (; TRDataFrame ; obj). inline . Definition at line 368 of file TRDataFrame.h. ◆ operator[](). TRDataFrame::Binding TRDataFrame::operator[] ; (; const TString & ; name). Definition at line 28 of file TRDataFrame.cxx. ◆ Print(). void ROOT::R::TRDataFrame::Print ; (; const Char_t * ; label = """"). inline . Method to print the dataframe in stdout or a column given the label. ; Parameters. labelnumber of the column to print . Definition at line 427 of file TRDataFrame.h. ◆ Streamer(). virtual void ROOT::R::TRDataFrame::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRDataFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 437 of file TRDataFrame.h. Friends And Related Symbol Documentation. ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRDataFrame & ; f). friend . ◆ TRInterface. friend class TRInterface. friend . Definition at line 177 of file TRDataFrame.h. Member Data Documentation. ◆ df. Rcpp::DataFrame ROOT::R::TRDataFrame::df. protected . Definition at line 180 of file TRDataFrame.h. Libraries for ROOT::R::TRDataFrame:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRDataFrame.h; bindings/r/src/TRDataFrame.cxx. ROOTRTRDataFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:18772,Integrability,wrap,wrap,18772,"r SEXP ; (; ). inline . Definition at line 380 of file TRDataFrame.h. ◆ operator SEXP() [2/2]. ROOT::R::TRDataFrame::operator SEXP ; (; ); const. inline . Definition at line 385 of file TRDataFrame.h. ◆ operator=() [1/3]. TRDataFrame & ROOT::R::TRDataFrame::operator= ; (; SEXP ; obj). inline . Definition at line 374 of file TRDataFrame.h. ◆ operator=() [2/3]. TRDataFrame & ROOT::R::TRDataFrame::operator= ; (; TRDataFrame & ; obj). inline . Definition at line 362 of file TRDataFrame.h. ◆ operator=() [3/3]. TRDataFrame & ROOT::R::TRDataFrame::operator= ; (; TRDataFrame ; obj). inline . Definition at line 368 of file TRDataFrame.h. ◆ operator[](). TRDataFrame::Binding TRDataFrame::operator[] ; (; const TString & ; name). Definition at line 28 of file TRDataFrame.cxx. ◆ Print(). void ROOT::R::TRDataFrame::Print ; (; const Char_t * ; label = """"). inline . Method to print the dataframe in stdout or a column given the label. ; Parameters. labelnumber of the column to print . Definition at line 427 of file TRDataFrame.h. ◆ Streamer(). virtual void ROOT::R::TRDataFrame::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRDataFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 437 of file TRDataFrame.h. Friends And Related Symbol Documentation. ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRDataFrame & ; f). friend . ◆ TRInterface. friend class TRInterface. friend . Definition at line 177 of file TRDataFrame.h. Member Data Documentation. ◆ df. Rcpp::DataFrame ROOT::R::TRDataFrame::df. protected . Definition at line 180 of file TRDataFrame.h. Libraries for ROOT::R::TRDataFrame:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRDataFrame.h; bindings/r/src/TRDataFrame.cxx. ROOTRTRDataFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:775,Modifiability,variab,variables,775,". ROOT: ROOT::R::TRDataFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::R::TRDataFrame Class ReferenceR Interface for Statistical Computing. ; This is a class to create DataFrames from ROOT to R. ; TRDataFrame class; DataFrame is a very important datatype in R and in ROOTR we have a class to manipulate; dataframes called TRDataFrame, with a lot of very useful operators overloaded to work with TRDataFrame's objects; in a similar way that in the R environment but from c++ in ROOT.; Example:. Lets to create need data to play with dataframe features. Creating variables. TVectorD v1(3);; std::vector<Double_t> v2(3);; std::array<Int_t,3> v3{ {1,2,3} };; std::list<std::string> names;; TVectorT< Double_t >; v2@ v2Definition rootcling_impl.cxx:3702; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_impl.cxx:3701; Assigning values . v1[0]=1;; v1[1]=2;; v1[2]=3;; ; v2[0]=0.101;; v2[1]=0.202;; v2[2]=0.303;; ; names.push_back(""v1"");; names.push_back(""v2"");; names.push_back(""v3"");; ; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; In R the dataframe have associate to every column a label, in ROOTR you can have the same label using the class ROOT::R::Label to create a TRDataFrame where you data have a label associate. Cre",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:5282,Modifiability,inherit,inherited,5282,"p::DataFrame &_df);  TDataFrame constructor for Rcpp::DataFrame. ;  ;  TRDataFrame (const TRDataFrame &_df);  TDataFrame copy constructor. ;  ;  TRDataFrame (SEXP obj);  TDataFrame constructor. ;  ; template<class T > ; TMatrixT< T > AsMatrix ();  Method to get dataframe as matrix. ;  ; TVectorString GetColNames ();  Method to get labels of dataframe. ;  ; Int_t GetNcols ();  Method to get the number of columns. ;  ; Int_t GetNrows ();  Method to get the number of rows. ;  ; virtual TClass * IsA () const;  ;  operator SEXP ();  ;  operator SEXP () const;  ; TRDataFrame & operator= (SEXP obj);  ; TRDataFrame & operator= (TRDataFrame &obj);  ; TRDataFrame & operator= (TRDataFrame obj);  ; Binding operator[] (const TString &name);  ; void Print (const Char_t *label="""");  Method to print the dataframe in stdout or a column given the label. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:6679,Modifiability,inherit,inheritance,6679,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:8890,Modifiability,inherit,inherits,8890,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:9007,Modifiability,inherit,inherits,9007,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:13028,Modifiability,inherit,inherited,13028,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Rcpp::DataFrame df;  . Friends; SEXP Rcpp::wrap (const TRDataFrame &f);  ; class TRInterface;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  E",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:13677,Modifiability,inherit,inherited,13677,"t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Rcpp::DataFrame df;  . Friends; SEXP Rcpp::wrap (const TRDataFrame &f);  ; class TRInterface;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRDataFrame.h>. Inheritance diagram for ROOT::R::TRDataFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:14318,Modifiability,inherit,inherited,14318,"ectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Rcpp::DataFrame df;  . Friends; SEXP Rcpp::wrap (const TRDataFrame &f);  ; class TRInterface;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRDataFrame.h>. Inheritance diagram for ROOT::R::TRDataFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRDataFrame() [1/4]. TRDataFrame::TRDataFrame ; (; ). Default TDataFrame constructor. ; Definition at line 16 of file TRDataFrame.cxx. ◆ TRDataFrame() [2/4]. ROOT::R::TRDataFrame::TRDataFrame ; (; SEXP ; obj). inline . TDataFrame constructor. ; Parameters. objraw R object that can be casted to DataFrame . Definition at line 343 of file TRDataFrame.h. ◆ TRDataFrame() [3/4]. TRDataFrame::TRDataFrame ; (; const TRDataFrame & ; _df). TDataFrame copy constructor. ; Parameters. _dfother TRDataFrame . Definition at line 22 of file TRDataFrame.cxx. ◆ TRDataFrame() [4/4]. ROOT::R::TRDataFrame::TRDataFrame ; (; const Rcpp::D",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:14417,Modifiability,inherit,inherited,14417,"ectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Rcpp::DataFrame df;  . Friends; SEXP Rcpp::wrap (const TRDataFrame &f);  ; class TRInterface;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRDataFrame.h>. Inheritance diagram for ROOT::R::TRDataFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRDataFrame() [1/4]. TRDataFrame::TRDataFrame ; (; ). Default TDataFrame constructor. ; Definition at line 16 of file TRDataFrame.cxx. ◆ TRDataFrame() [2/4]. ROOT::R::TRDataFrame::TRDataFrame ; (; SEXP ; obj). inline . TDataFrame constructor. ; Parameters. objraw R object that can be casted to DataFrame . Definition at line 343 of file TRDataFrame.h. ◆ TRDataFrame() [3/4]. TRDataFrame::TRDataFrame ; (; const TRDataFrame & ; _df). TDataFrame copy constructor. ; Parameters. _dfother TRDataFrame . Definition at line 22 of file TRDataFrame.cxx. ◆ TRDataFrame() [4/4]. ROOT::R::TRDataFrame::TRDataFrame ; (; const Rcpp::D",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:8521,Security,hash,hash,8521," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:2442,Availability,toler,tolerance,2442,"orD xx )"", because for optim, the input in your function definition must be a single vector.; The Gradient is formed by; \( \frac{\partial f}{\partial x} = -400x(y - x^{2}) - 2(1 - x) \); \( \frac{\partial f}{\partial y} = 200(y - x^{2}); \); The ""TVectorD RosenBrockGrad(const TVectorD xx )"" function must have a single vector as the argument a it will return a single vetor.; #include<TRInterface.h>; ; //in the next function the pointer *double must be changed by TVectorD, because the pointer has no; //sense in R's environment.; Double_t RosenBrock(const TVectorD xx ); {; const Double_t x = xx[0];; const Double_t y = xx[1];; const Double_t tmp1 = y-x*x;; const Double_t tmp2 = 1-x;; return 100*tmp1*tmp1+tmp2*tmp2;; }; ; TVectorD RosenBrockGrad(const TVectorD xx ); {; const Double_t x = xx[0];; const Double_t y = xx[1];; TVectorD grad(2);; grad[0]=-400 * x * (y - x * x) - 2 * (1 - x);; grad[1]=200 * (y - x * x);; return grad;; }; ; ; void Minimization(); {; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; //passing RosenBrock function to R; r[""RosenBrock""]<<ROOT::R::TRFunctionExport(RosenBrock);; ; //passing RosenBrockGrad function to R; r[""RosenBrockGrad""]<<ROOT::R::TRFunctionExport(RosenBrockGrad);; ; //the option ""method"" could be ""Nelder-Mead"", ""BFGS"", ""CG"", ""L-BFGS-B"", ""SANN"",""Brent""; //the option ""control"" lets you put some constraints like:; //""maxit"" The maximum number of iterations; //""abstol"" The absolute convergence tolerance.; //""reltol"" Relative convergence tolerance.; r<<""result <- optim( c(0.01,0.01), RosenBrock,method='BFGS',control = list(maxit = 1000000) )"";; ; //Getting results from R; TVectorD min=r.Eval(""result$par"");; ; std::cout.precision(8);; //printing results; std::cout<<""-----------------------------------------""<<std::endl;; std::cout<<""Minimum x=""<<min[0]<<"" y=""<<min[1]<<std::endl;; std::cout<<""Value at minimum =""<<RosenBrock(min)<<std::endl;; ; //using the gradient; r<<""optimHess(result$par, RosenBrock, RosenBrockGrad)"";; r<<""hre",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:2486,Availability,toler,tolerance,2486,"ointer has no; //sense in R's environment.; Double_t RosenBrock(const TVectorD xx ); {; const Double_t x = xx[0];; const Double_t y = xx[1];; const Double_t tmp1 = y-x*x;; const Double_t tmp2 = 1-x;; return 100*tmp1*tmp1+tmp2*tmp2;; }; ; TVectorD RosenBrockGrad(const TVectorD xx ); {; const Double_t x = xx[0];; const Double_t y = xx[1];; TVectorD grad(2);; grad[0]=-400 * x * (y - x * x) - 2 * (1 - x);; grad[1]=200 * (y - x * x);; return grad;; }; ; ; void Minimization(); {; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; //passing RosenBrock function to R; r[""RosenBrock""]<<ROOT::R::TRFunctionExport(RosenBrock);; ; //passing RosenBrockGrad function to R; r[""RosenBrockGrad""]<<ROOT::R::TRFunctionExport(RosenBrockGrad);; ; //the option ""method"" could be ""Nelder-Mead"", ""BFGS"", ""CG"", ""L-BFGS-B"", ""SANN"",""Brent""; //the option ""control"" lets you put some constraints like:; //""maxit"" The maximum number of iterations; //""abstol"" The absolute convergence tolerance.; //""reltol"" Relative convergence tolerance.; r<<""result <- optim( c(0.01,0.01), RosenBrock,method='BFGS',control = list(maxit = 1000000) )"";; ; //Getting results from R; TVectorD min=r.Eval(""result$par"");; ; std::cout.precision(8);; //printing results; std::cout<<""-----------------------------------------""<<std::endl;; std::cout<<""Minimum x=""<<min[0]<<"" y=""<<min[1]<<std::endl;; std::cout<<""Value at minimum =""<<RosenBrock(min)<<std::endl;; ; //using the gradient; r<<""optimHess(result$par, RosenBrock, RosenBrockGrad)"";; r<<""hresult <- optim(c(-1.2,1), RosenBrock, NULL, method = 'BFGS', hessian = TRUE)"";; //getting the minimum calculated with the gradient; TVectorD hmin=r.Eval(""hresult$par"");; ; //printing results; std::cout<<""-----------------------------------------""<<std::endl;; std::cout<<""Minimization with the Gradient""<<endl;; std::cout<<""Minimum x=""<<hmin[0]<<"" y=""<<hmin[1]<<std::endl;; std::cout<<""Value at minimum =""<<RosenBrock(hmin)<<std::endl;; ; }; hminOption_t Option_t TPoint TPoint const char Ge",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:7358,Availability,error,error,7358,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:7447,Availability,error,error,7447,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:7602,Availability,error,error,7602,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:7899,Availability,error,error,7899,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:12463,Availability,error,error,12463," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:904,Integrability,interface,interface,904,". ROOT: ROOT::R::TRFunctionExport Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::R::TRFunctionExport Class ReferenceR Interface for Statistical Computing. ; This is a class to pass functions from ROOT to R. ; TRFunctionExport class; The TRFunctionExport class lets you pass ROOT's functions to R's environment. The next example was based in ; https://root.cern/doc/master/NumericalMinimization_8C.html ; http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html. Let \( f(x,y)=(x-1)^{2} + 100(y-x^{2})^{2} \) , which is called the Rosenbrock function.; It's known that this function has a minimum when \( y = x^{2}\) , and \( x = 1.\) Let's get the minimum using R's optim package through ROOTR's interface. In the code this function was called ""Double_t RosenBrock(const TVectorD xx )"", because for optim, the input in your function definition must be a single vector.; The Gradient is formed by; \( \frac{\partial f}{\partial x} = -400x(y - x^{2}) - 2(1 - x) \); \( \frac{\partial f}{\partial y} = 200(y - x^{2}); \); The ""TVectorD RosenBrockGrad(const TVectorD xx )"" function must have a single vector as the argument a it will return a single vetor.; #include<TRInterface.h>; ; //in the next function the pointer *double must be changed by TVectorD, because the pointer has no; //sense in R's environment.; Double_t RosenBrock(const TVectorD xx ); {; const Double_t x = xx[0];; const Double_t y = xx[1];; const Double_t tmp1 = y-x*x;; const Double_t tmp2 = 1-x;; return 100*tmp1*tmp1+tmp2*tmp2;; }; ; TVectorD RosenBrockGrad(const TVectorD xx ); {; const Double_t x = xx[0];; const Double_t y = xx[1];; TVectorD grad(2);; grad[0]=-400 * x * (y - x * x) - 2 * (1 - x);; grad[1]=200 * (y - x * x);; return grad;; }; ; ; void Minimization(); {; ROOT::R::TRInterface &r=ROOT::R::TRInterface::In",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:7364,Integrability,message,message,7364,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:7905,Integrability,message,message,7905,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:9107,Integrability,message,message,9107,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:12469,Integrability,message,message,12469," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:12842,Integrability,message,message,12842," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Prote",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:13898,Integrability,wrap,wrap,13898,"0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TRInternalFunction * f;  . Friends; SEXP Rcpp::wrap (const TRFunctionExport &f);  ; class TRInterface;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:15954,Integrability,wrap,wrapped,15954,"rt.h>. Inheritance diagram for ROOT::R::TRFunctionExport:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRFunctionExport() [1/3]. TRFunctionExport::TRFunctionExport ; (; ). Default TRFunctionExport constructor. ; Definition at line 17 of file TRFunctionExport.cxx. ◆ ~TRFunctionExport(). ROOT::R::TRFunctionExport::~TRFunctionExport ; (; ). inline . Default TRFunctionExport destructor. ; Definition at line 154 of file TRFunctionExport.h. ◆ TRFunctionExport() [2/3]. TRFunctionExport::TRFunctionExport ; (; const TRFunctionExport & ; fun). TRFunctionExport copy constructor. ; Parameters. funother TRFunctionExport . Definition at line 23 of file TRFunctionExport.cxx. ◆ TRFunctionExport() [3/3]. template<class T > . ROOT::R::TRFunctionExport::TRFunctionExport ; (; T ; fun). inline . TRFunctionExport template constructor that supports a lot of function's prototypes. ; Parameters. funsupported function to be wrapped by Rcpp . Definition at line 168 of file TRFunctionExport.h. Member Function Documentation. ◆ Class(). static TClass * ROOT::R::TRFunctionExport::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::R::TRFunctionExport::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRFunctionExport::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 183 of file TRFunctionExport.h. ◆ DeclFileName(). static const char * ROOT::R::TRFunctionExport::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 183 of file TRFunctionExport.h. ◆ IsA(). virtual TClass * ROOT::R::TRFunctionExport::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 183 of file TRFunctionExport.h. ◆ SetFunction(). template<class T > . ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:17158,Integrability,wrap,wrapped,17158,"ing this class . ◆ Class_Name(). static const char * ROOT::R::TRFunctionExport::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRFunctionExport::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 183 of file TRFunctionExport.h. ◆ DeclFileName(). static const char * ROOT::R::TRFunctionExport::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 183 of file TRFunctionExport.h. ◆ IsA(). virtual TClass * ROOT::R::TRFunctionExport::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 183 of file TRFunctionExport.h. ◆ SetFunction(). template<class T > . void ROOT::R::TRFunctionExport::SetFunction ; (; T ; fun). inline . function to assign function to export, template method that supports a lot of function's prototypes ; Parameters. funsupported function to be wrapped by Rcpp . Definition at line 178 of file TRFunctionExport.h. ◆ Streamer(). virtual void ROOT::R::TRFunctionExport::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRFunctionExport::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 183 of file TRFunctionExport.h. Friends And Related Symbol Documentation. ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRFunctionExport & ; f). friend . ◆ TRInterface. friend class TRInterface. friend . Definition at line 141 of file TRFunctionExport.h. Member Data Documentation. ◆ f. TRInternalFunction* ROOT::R::TRFunctionExport::f. protected . Definition at line 144 of file TRFunctionExport.h. Libraries for ROOT::R::TRFunctionExport:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRFunctionExport.h; bindings/r/src/TRFunctionExport.cxx. ROOTRTRFunctionExport. R",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:17617,Integrability,wrap,wrap,17617,"ic . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRFunctionExport::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 183 of file TRFunctionExport.h. ◆ DeclFileName(). static const char * ROOT::R::TRFunctionExport::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 183 of file TRFunctionExport.h. ◆ IsA(). virtual TClass * ROOT::R::TRFunctionExport::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 183 of file TRFunctionExport.h. ◆ SetFunction(). template<class T > . void ROOT::R::TRFunctionExport::SetFunction ; (; T ; fun). inline . function to assign function to export, template method that supports a lot of function's prototypes ; Parameters. funsupported function to be wrapped by Rcpp . Definition at line 178 of file TRFunctionExport.h. ◆ Streamer(). virtual void ROOT::R::TRFunctionExport::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRFunctionExport::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 183 of file TRFunctionExport.h. Friends And Related Symbol Documentation. ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRFunctionExport & ; f). friend . ◆ TRInterface. friend class TRInterface. friend . Definition at line 141 of file TRFunctionExport.h. Member Data Documentation. ◆ f. TRInternalFunction* ROOT::R::TRFunctionExport::f. protected . Definition at line 144 of file TRFunctionExport.h. Libraries for ROOT::R::TRFunctionExport:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRFunctionExport.h; bindings/r/src/TRFunctionExport.cxx. ROOTRTRFunctionExport. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:17634,Integrability,wrap,wrap,17634,"ic . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRFunctionExport::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 183 of file TRFunctionExport.h. ◆ DeclFileName(). static const char * ROOT::R::TRFunctionExport::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 183 of file TRFunctionExport.h. ◆ IsA(). virtual TClass * ROOT::R::TRFunctionExport::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 183 of file TRFunctionExport.h. ◆ SetFunction(). template<class T > . void ROOT::R::TRFunctionExport::SetFunction ; (; T ; fun). inline . function to assign function to export, template method that supports a lot of function's prototypes ; Parameters. funsupported function to be wrapped by Rcpp . Definition at line 178 of file TRFunctionExport.h. ◆ Streamer(). virtual void ROOT::R::TRFunctionExport::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRFunctionExport::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 183 of file TRFunctionExport.h. Friends And Related Symbol Documentation. ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRFunctionExport & ; f). friend . ◆ TRInterface. friend class TRInterface. friend . Definition at line 141 of file TRFunctionExport.h. Member Data Documentation. ◆ f. TRInternalFunction* ROOT::R::TRFunctionExport::f. protected . Definition at line 144 of file TRFunctionExport.h. Libraries for ROOT::R::TRFunctionExport:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRFunctionExport.h; bindings/r/src/TRFunctionExport.cxx. ROOTRTRFunctionExport. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:5597,Modifiability,inherit,inherited,5597,"-------------------------------; Minimization with the Gradient; Minimum x=0.99980443 y=0.99960838; Value at minimum =3.8273828e-08; ValueDefinition functioncalls.h:15; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 140 of file TRFunctionExport.h. Public Member Functions;  TRFunctionExport ();  Default TRFunctionExport constructor. ;  ;  TRFunctionExport (const TRFunctionExport &fun);  TRFunctionExport copy constructor. ;  ; template<class T > ;  TRFunctionExport (T fun);  TRFunctionExport template constructor that supports a lot of function's prototypes. ;  ;  ~TRFunctionExport ();  Default TRFunctionExport destructor. ;  ; virtual TClass * IsA () const;  ; template<class T > ; void SetFunction (T fun);  function to assign function to export, template method that supports a lot of function's prototypes ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:6994,Modifiability,inherit,inheritance,6994,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:9205,Modifiability,inherit,inherits,9205,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:9322,Modifiability,inherit,inherits,9322,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:13343,Modifiability,inherit,inherited,13343,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TRInternalFunction * f;  . Friends; SEXP Rcpp::wrap (const TRFunctionExport &f);  ; class TRInterface;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:14001,Modifiability,inherit,inherited,14001,"=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TRInternalFunction * f;  . Friends; SEXP Rcpp::wrap (const TRFunctionExport &f);  ; class TRInterface;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRFunctionExport.h>. Inheritance diagram for ROOT::R::TRFunctionExport:. This browser is not able to show SVG: try Firefox, Chrome",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:14642,Modifiability,inherit,inherited,14642,"Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TRInternalFunction * f;  . Friends; SEXP Rcpp::wrap (const TRFunctionExport &f);  ; class TRInterface;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRFunctionExport.h>. Inheritance diagram for ROOT::R::TRFunctionExport:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRFunctionExport() [1/3]. TRFunctionExport::TRFunctionExport ; (; ). Default TRFunctionExport constructor. ; Definition at line 17 of file TRFunctionExport.cxx. ◆ ~TRFunctionExport(). ROOT::R::TRFunctionExport::~TRFunctionExport ; (; ). inline . Default TRFunctionExport destructor. ; Definition at line 154 of file TRFunctionExport.h. ◆ TRFunctionExport() [2/3]. TRFunctionExport::TRFunctionExport ; (; const TRFunctionExport & ; fun). TRFunctionExport copy constructor. ; Parameters. funother TRFunctionExport . Definition at line 23 of file TRFunctionExport.cxx. ◆ TRFunctionExport() [3/3]. template<class T >",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:14741,Modifiability,inherit,inherited,14741,"Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TRInternalFunction * f;  . Friends; SEXP Rcpp::wrap (const TRFunctionExport &f);  ; class TRInterface;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRFunctionExport.h>. Inheritance diagram for ROOT::R::TRFunctionExport:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRFunctionExport() [1/3]. TRFunctionExport::TRFunctionExport ; (; ). Default TRFunctionExport constructor. ; Definition at line 17 of file TRFunctionExport.cxx. ◆ ~TRFunctionExport(). ROOT::R::TRFunctionExport::~TRFunctionExport ; (; ). inline . Default TRFunctionExport destructor. ; Definition at line 154 of file TRFunctionExport.h. ◆ TRFunctionExport() [2/3]. TRFunctionExport::TRFunctionExport ; (; const TRFunctionExport & ; fun). TRFunctionExport copy constructor. ; Parameters. funother TRFunctionExport . Definition at line 23 of file TRFunctionExport.cxx. ◆ TRFunctionExport() [3/3]. template<class T >",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:8836,Security,hash,hash,8836," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:3973,Availability,error,error,3973,"R::TRDataFrameThis is a class to create DataFrames from ROOT to R.Definition TRDataFrame.h:176; ROOT::R::TRFunctionImportThis is a class to pass functions from ROOT to R.Definition TRFunctionImport.h:114; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; ROOT::R::TRObjectThis is a class to get ROOT's objects from R's objects.Definition TRObject.h:70; ROOT::Rnamespace associated R package for ROOT.Definition RExports.h:71; ROOT::R::Labelconst Rcpp::internal::NamedPlaceHolder & Label; Output Formula: ydata ~ p1 * cos(p2 * xdata) + p2 * sin(p1 * xdata); ; Parameters:; Estimate Std. Error t value Pr(>|t|); p1 1.881851 0.027430 68.61 2.27e-12 ***; p2 0.700230 0.009153 76.51 9.50e-13 ***; ---; Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1; ; Residual standard error: 0.08202 on 8 degrees of freedom; ; Number of iterations to convergence: 7; Achieved convergence tolerance: 2.189e-06; ; Waiting for profiling to be done...; 2.5% 97.5%; p1 1.8206081 1.9442365; p2 0.6794193 0.7209843; e#define e(i)Definition RSha256.hxx:103; onOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void onDefinition TGWin32VirtualXProxy.cxx:106; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; forfor(Int_t i=0;i< n;i++)Definition legend1.C:18; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 114 of file TRFunctionImport.h. Public Member Function",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:4076,Availability,toler,tolerance,4076,"tion TRDataFrame.h:176; ROOT::R::TRFunctionImportThis is a class to pass functions from ROOT to R.Definition TRFunctionImport.h:114; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; ROOT::R::TRObjectThis is a class to get ROOT's objects from R's objects.Definition TRObject.h:70; ROOT::Rnamespace associated R package for ROOT.Definition RExports.h:71; ROOT::R::Labelconst Rcpp::internal::NamedPlaceHolder & Label; Output Formula: ydata ~ p1 * cos(p2 * xdata) + p2 * sin(p1 * xdata); ; Parameters:; Estimate Std. Error t value Pr(>|t|); p1 1.881851 0.027430 68.61 2.27e-12 ***; p2 0.700230 0.009153 76.51 9.50e-13 ***; ---; Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1; ; Residual standard error: 0.08202 on 8 degrees of freedom; ; Number of iterations to convergence: 7; Achieved convergence tolerance: 2.189e-06; ; Waiting for profiling to be done...; 2.5% 97.5%; p1 1.8206081 1.9442365; p2 0.6794193 0.7209843; e#define e(i)Definition RSha256.hxx:103; onOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void onDefinition TGWin32VirtualXProxy.cxx:106; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; forfor(Int_t i=0;i< n;i++)Definition legend1.C:18; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 114 of file TRFunctionImport.h. Public Member Functions;  TRFunctionImport (const TRFunctionImport &fun);  TRFunctionImport cop",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:4736,Availability,error,error,4736,"(p1 * xdata); ; Parameters:; Estimate Std. Error t value Pr(>|t|); p1 1.881851 0.027430 68.61 2.27e-12 ***; p2 0.700230 0.009153 76.51 9.50e-13 ***; ---; Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1; ; Residual standard error: 0.08202 on 8 degrees of freedom; ; Number of iterations to convergence: 7; Achieved convergence tolerance: 2.189e-06; ; Waiting for profiling to be done...; 2.5% 97.5%; p1 1.8206081 1.9442365; p2 0.6794193 0.7209843; e#define e(i)Definition RSha256.hxx:103; onOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void onDefinition TGWin32VirtualXProxy.cxx:106; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; forfor(Int_t i=0;i< n;i++)Definition legend1.C:18; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 114 of file TRFunctionImport.h. Public Member Functions;  TRFunctionImport (const TRFunctionImport &fun);  TRFunctionImport copy constructor. ;  ;  TRFunctionImport (const TString &name);  TRFunctionImport constructor. ;  ;  TRFunctionImport (const TString &name, const TString &ns);  TRFunctionImport constructor. ;  ;  TRFunctionImport (SEXP obj);  TRFunctionImport constructor. ;  ;  TRFunctionImport (TRObject &obj);  TRFunctionImport constructor. ;  ;  ~TRFunctionImport ();  ; virtual TClass * IsA () const;  ; SEXP operator() ();  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ;",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:7376,Availability,error,error,7376,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:7465,Availability,error,error,7465,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:7620,Availability,error,error,7620,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:7917,Availability,error,error,7917,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:12481,Availability,error,error,12481," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:2242,Energy Efficiency,green,green,2242,"ot(""plot"");; TRFunctionImport lines(""lines"");; TRFunctionImport devnew(""dev.new"");; TRFunctionImport devoff(""dev.off"");; TRFunctionImport min(""min"");; TRFunctionImport max(""max"");; TRFunctionImport seq(""seq"");; TRFunctionImport predict(""predict"");; ; r<<""options(device='png')"";//enable plot in png file; ; ////////////////////////; //doing the procedure //; ////////////////////////; TRObject xdata = c(-2,-1.64,-1.33,-0.7,0,0.45,1.2,1.64,2.32,2.9);; TRObject ydata = c(0.699369,0.700462,0.695354,1.03905,1.97389,2.41143,1.91091,0.919576,-0.730975,-1.42001);; ; TRDataFrame data;; data[""xdata""]=xdata;; data[""ydata""]=ydata;; ; //fit = nls(ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata), start=list(p1=1,p2=0.2)) <- R code; TRObject fit = nls(asformula(""ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata)""),Label[""data""]=data, Label[""start""]=list(Label[""p1""]=1,Label[""p2""]=0.2));; print(summary(fit));; ; print(confint(fit));; ; devnew(""Fitting Regression"");; plot(xdata,ydata);; ; TRObject xgrid=seq(min(xdata),max(xdata),Label[""len""]=10);; lines(xgrid,predict(fit,xgrid),Label[""col""] = ""green"");; devoff();; }; c#define c(i)Definition RSha256.hxx:101; plotwinID h TVirtualViewer3D TVirtualGLPainter char TVirtualGLPainter plotDefinition TGWin32VirtualGLProxy.cxx:53; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRInterface.h; FunctionDouble_t(* Function)(Double_t)Definition Functor.C:4; ROOT::R::TRDataFrameThis is a class to create DataFrames from ROOT to R.Definition TRDataFrame.h:176; ROOT::R::TRFunctionImportThis is a class to pass functions from ROOT to R.Definition TRFunctionImport.h:",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:4742,Integrability,message,message,4742,"(p1 * xdata); ; Parameters:; Estimate Std. Error t value Pr(>|t|); p1 1.881851 0.027430 68.61 2.27e-12 ***; p2 0.700230 0.009153 76.51 9.50e-13 ***; ---; Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1; ; Residual standard error: 0.08202 on 8 degrees of freedom; ; Number of iterations to convergence: 7; Achieved convergence tolerance: 2.189e-06; ; Waiting for profiling to be done...; 2.5% 97.5%; p1 1.8206081 1.9442365; p2 0.6794193 0.7209843; e#define e(i)Definition RSha256.hxx:103; onOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void onDefinition TGWin32VirtualXProxy.cxx:106; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; forfor(Int_t i=0;i< n;i++)Definition legend1.C:18; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 114 of file TRFunctionImport.h. Public Member Functions;  TRFunctionImport (const TRFunctionImport &fun);  TRFunctionImport copy constructor. ;  ;  TRFunctionImport (const TString &name);  TRFunctionImport constructor. ;  ;  TRFunctionImport (const TString &name, const TString &ns);  TRFunctionImport constructor. ;  ;  TRFunctionImport (SEXP obj);  TRFunctionImport constructor. ;  ;  TRFunctionImport (TRObject &obj);  TRFunctionImport constructor. ;  ;  ~TRFunctionImport ();  ; virtual TClass * IsA () const;  ; SEXP operator() ();  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ;",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:7382,Integrability,message,message,7382,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:7923,Integrability,message,message,7923,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:9125,Integrability,message,message,9125,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:12487,Integrability,message,message,12487," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:12860,Integrability,message,message,12860," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Prote",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:14291,Integrability,wrap,wrap,14291,"atic const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TRFunctionImport (const Rcpp::Function &fun);  TRFunctionImport constructor for Rcpp::DataFrame. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Rcpp::Function * f;  . Friends; TRFunctionImport Rcpp::as (SEXP);  ; SEXP Rcpp::wrap (const TRFunctionImport &f);  ; class TRInterface;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TRFunctionImport.h>. Inheritance diagram for ROOT::R::TRFunctionImport:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constr",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:18330,Integrability,wrap,wrap,18330,tatic . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::R::TRFunctionImport::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRFunctionImport::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 168 of file TRFunctionImport.h. ◆ DeclFileName(). static const char * ROOT::R::TRFunctionImport::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 168 of file TRFunctionImport.h. ◆ IsA(). virtual TClass * ROOT::R::TRFunctionImport::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 168 of file TRFunctionImport.h. ◆ operator()(). SEXP ROOT::R::TRFunctionImport::operator() ; (; ). inline . Definition at line 163 of file TRFunctionImport.h. ◆ Streamer(). virtual void ROOT::R::TRFunctionImport::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRFunctionImport::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 168 of file TRFunctionImport.h. Friends And Related Symbol Documentation. ◆ Rcpp::as. TRFunctionImport Rcpp::as ; (; SEXP ; ). friend . ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRFunctionImport & ; f). friend . ◆ TRInterface. friend class TRInterface. friend . Definition at line 115 of file TRFunctionImport.h. Member Data Documentation. ◆ f. Rcpp::Function* ROOT::R::TRFunctionImport::f. protected . Definition at line 120 of file TRFunctionImport.h. Libraries for ROOT::R::TRFunctionImport:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRFunctionImport.h; bindings/r/src/TRFunctionImport.cxx. ROOTRTRFunctionImport. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:18347,Integrability,wrap,wrap,18347,tatic . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::R::TRFunctionImport::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRFunctionImport::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 168 of file TRFunctionImport.h. ◆ DeclFileName(). static const char * ROOT::R::TRFunctionImport::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 168 of file TRFunctionImport.h. ◆ IsA(). virtual TClass * ROOT::R::TRFunctionImport::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 168 of file TRFunctionImport.h. ◆ operator()(). SEXP ROOT::R::TRFunctionImport::operator() ; (; ). inline . Definition at line 163 of file TRFunctionImport.h. ◆ Streamer(). virtual void ROOT::R::TRFunctionImport::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRFunctionImport::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 168 of file TRFunctionImport.h. Friends And Related Symbol Documentation. ◆ Rcpp::as. TRFunctionImport Rcpp::as ; (; SEXP ; ). friend . ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRFunctionImport & ; f). friend . ◆ TRInterface. friend class TRInterface. friend . Definition at line 115 of file TRFunctionImport.h. Member Data Documentation. ◆ f. Rcpp::Function* ROOT::R::TRFunctionImport::f. protected . Definition at line 120 of file TRFunctionImport.h. Libraries for ROOT::R::TRFunctionImport:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRFunctionImport.h; bindings/r/src/TRFunctionImport.cxx. ROOTRTRFunctionImport. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:5615,Modifiability,inherit,inherited,5615," void valueDefinition TGWin32VirtualXProxy.cxx:142; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; forfor(Int_t i=0;i< n;i++)Definition legend1.C:18; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 114 of file TRFunctionImport.h. Public Member Functions;  TRFunctionImport (const TRFunctionImport &fun);  TRFunctionImport copy constructor. ;  ;  TRFunctionImport (const TString &name);  TRFunctionImport constructor. ;  ;  TRFunctionImport (const TString &name, const TString &ns);  TRFunctionImport constructor. ;  ;  TRFunctionImport (SEXP obj);  TRFunctionImport constructor. ;  ;  TRFunctionImport (TRObject &obj);  TRFunctionImport constructor. ;  ;  ~TRFunctionImport ();  ; virtual TClass * IsA () const;  ; SEXP operator() ();  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:7012,Modifiability,inherit,inheritance,7012,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:9223,Modifiability,inherit,inherits,9223,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:9340,Modifiability,inherit,inherits,9340,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:13361,Modifiability,inherit,inherited,13361,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TRFunctionImport (const Rcpp::Function &fun);  TRFunctionImport constructor for Rcpp::DataFrame. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Rcpp::Function * f;  . Friends; TRFunctionImport Rcpp::as (SEXP);  ; SEXP Rcpp::wrap (const TRFunctionImport &f);  ; class TRInterface;  . Additional Inherited M",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:14006,Modifiability,inherit,inherited,14006,", Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TRFunctionImport (const Rcpp::Function &fun);  TRFunctionImport constructor for Rcpp::DataFrame. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Rcpp::Function * f;  . Friends; TRFunctionImport Rcpp::as (SEXP);  ; SEXP Rcpp::wrap (const TRFunctionImport &f);  ; class TRInterface;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  {",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:14394,Modifiability,inherit,inherited,14394,"ic constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TRFunctionImport (const Rcpp::Function &fun);  TRFunctionImport constructor for Rcpp::DataFrame. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Rcpp::Function * f;  . Friends; TRFunctionImport Rcpp::as (SEXP);  ; SEXP Rcpp::wrap (const TRFunctionImport &f);  ; class TRInterface;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TRFunctionImport.h>. Inheritance diagram for ROOT::R::TRFunctionImport:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRFunctionImport() [1/6]. ROOT::R::TRFunctionImport::TRFunctionImport ; (; const Rcpp::Function & ; fun). inlineprotected . TRFunc",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:15035,Modifiability,inherit,inherited,15035,"vel, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Rcpp::Function * f;  . Friends; TRFunctionImport Rcpp::as (SEXP);  ; SEXP Rcpp::wrap (const TRFunctionImport &f);  ; class TRInterface;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TRFunctionImport.h>. Inheritance diagram for ROOT::R::TRFunctionImport:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRFunctionImport() [1/6]. ROOT::R::TRFunctionImport::TRFunctionImport ; (; const Rcpp::Function & ; fun). inlineprotected . TRFunctionImport constructor for Rcpp::DataFrame. ; Parameters. funraw function object from Rcpp . Definition at line 126 of file TRFunctionImport.h. ◆ TRFunctionImport() [2/6]. TRFunctionImport::TRFunctionImport ; (; const TString & ; name). TRFunctionImport constructor. ; Parameters. namename of function from R . Definition at line 31 of file TRFunctionImport.cxx. ◆ TRFunctionImport() [3/6]. TRFunctionImport::TRFunctionImport ; (; const TString & ; name, . const TString & ; ns . ). TRFunctionImport constructor. ; Parameters. namename of function from R ; nsnamespace of function from R . Definition ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:1391,Safety,predict,predict,1391,"ROOT to R. ; TRFunctionImport class; The TRFunctionImport class lets you call R's functions to ROOT's environment; The object associated to this class have a set of overloaded operators to use the object like function. #include<TRInterface.h>; ; using namespace ROOT::R;; void Function(); {; TRInterface &r = TRInterface::Instance();; r.SetVerbose(1);; ////////////////////////////////////////; //defining functions to be used from R//; ////////////////////////////////////////; TRFunctionImport c(""c"");; TRFunctionImport list(""list"");; TRFunctionImport asformula(""as.formula"");; TRFunctionImport nls(""nls"");; TRFunctionImport confint(""confint"");; TRFunctionImport summary(""summary"");; TRFunctionImport print(""print"");; TRFunctionImport plot(""plot"");; TRFunctionImport lines(""lines"");; TRFunctionImport devnew(""dev.new"");; TRFunctionImport devoff(""dev.off"");; TRFunctionImport min(""min"");; TRFunctionImport max(""max"");; TRFunctionImport seq(""seq"");; TRFunctionImport predict(""predict"");; ; r<<""options(device='png')"";//enable plot in png file; ; ////////////////////////; //doing the procedure //; ////////////////////////; TRObject xdata = c(-2,-1.64,-1.33,-0.7,0,0.45,1.2,1.64,2.32,2.9);; TRObject ydata = c(0.699369,0.700462,0.695354,1.03905,1.97389,2.41143,1.91091,0.919576,-0.730975,-1.42001);; ; TRDataFrame data;; data[""xdata""]=xdata;; data[""ydata""]=ydata;; ; //fit = nls(ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata), start=list(p1=1,p2=0.2)) <- R code; TRObject fit = nls(asformula(""ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata)""),Label[""data""]=data, Label[""start""]=list(Label[""p1""]=1,Label[""p2""]=0.2));; print(summary(fit));; ; print(confint(fit));; ; devnew(""Fitting Regression"");; plot(xdata,ydata);; ; TRObject xgrid=seq(min(xdata),max(xdata),Label[""len""]=10);; lines(xgrid,predict(fit,xgrid),Label[""col""] = ""green"");; devoff();; }; c#define c(i)Definition RSha256.hxx:101; plotwinID h TVirtualViewer3D TVirtualGLPainter char TVirtualGLPainter plotDefinition TGWin32VirtualGLProxy.cxx:53; dat",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:1400,Safety,predict,predict,1400,"ROOT to R. ; TRFunctionImport class; The TRFunctionImport class lets you call R's functions to ROOT's environment; The object associated to this class have a set of overloaded operators to use the object like function. #include<TRInterface.h>; ; using namespace ROOT::R;; void Function(); {; TRInterface &r = TRInterface::Instance();; r.SetVerbose(1);; ////////////////////////////////////////; //defining functions to be used from R//; ////////////////////////////////////////; TRFunctionImport c(""c"");; TRFunctionImport list(""list"");; TRFunctionImport asformula(""as.formula"");; TRFunctionImport nls(""nls"");; TRFunctionImport confint(""confint"");; TRFunctionImport summary(""summary"");; TRFunctionImport print(""print"");; TRFunctionImport plot(""plot"");; TRFunctionImport lines(""lines"");; TRFunctionImport devnew(""dev.new"");; TRFunctionImport devoff(""dev.off"");; TRFunctionImport min(""min"");; TRFunctionImport max(""max"");; TRFunctionImport seq(""seq"");; TRFunctionImport predict(""predict"");; ; r<<""options(device='png')"";//enable plot in png file; ; ////////////////////////; //doing the procedure //; ////////////////////////; TRObject xdata = c(-2,-1.64,-1.33,-0.7,0,0.45,1.2,1.64,2.32,2.9);; TRObject ydata = c(0.699369,0.700462,0.695354,1.03905,1.97389,2.41143,1.91091,0.919576,-0.730975,-1.42001);; ; TRDataFrame data;; data[""xdata""]=xdata;; data[""ydata""]=ydata;; ; //fit = nls(ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata), start=list(p1=1,p2=0.2)) <- R code; TRObject fit = nls(asformula(""ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata)""),Label[""data""]=data, Label[""start""]=list(Label[""p1""]=1,Label[""p2""]=0.2));; print(summary(fit));; ; print(confint(fit));; ; devnew(""Fitting Regression"");; plot(xdata,ydata);; ; TRObject xgrid=seq(min(xdata),max(xdata),Label[""len""]=10);; lines(xgrid,predict(fit,xgrid),Label[""col""] = ""green"");; devoff();; }; c#define c(i)Definition RSha256.hxx:101; plotwinID h TVirtualViewer3D TVirtualGLPainter char TVirtualGLPainter plotDefinition TGWin32VirtualGLProxy.cxx:53; dat",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:2207,Safety,predict,predict,2207,"ot(""plot"");; TRFunctionImport lines(""lines"");; TRFunctionImport devnew(""dev.new"");; TRFunctionImport devoff(""dev.off"");; TRFunctionImport min(""min"");; TRFunctionImport max(""max"");; TRFunctionImport seq(""seq"");; TRFunctionImport predict(""predict"");; ; r<<""options(device='png')"";//enable plot in png file; ; ////////////////////////; //doing the procedure //; ////////////////////////; TRObject xdata = c(-2,-1.64,-1.33,-0.7,0,0.45,1.2,1.64,2.32,2.9);; TRObject ydata = c(0.699369,0.700462,0.695354,1.03905,1.97389,2.41143,1.91091,0.919576,-0.730975,-1.42001);; ; TRDataFrame data;; data[""xdata""]=xdata;; data[""ydata""]=ydata;; ; //fit = nls(ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata), start=list(p1=1,p2=0.2)) <- R code; TRObject fit = nls(asformula(""ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata)""),Label[""data""]=data, Label[""start""]=list(Label[""p1""]=1,Label[""p2""]=0.2));; print(summary(fit));; ; print(confint(fit));; ; devnew(""Fitting Regression"");; plot(xdata,ydata);; ; TRObject xgrid=seq(min(xdata),max(xdata),Label[""len""]=10);; lines(xgrid,predict(fit,xgrid),Label[""col""] = ""green"");; devoff();; }; c#define c(i)Definition RSha256.hxx:101; plotwinID h TVirtualViewer3D TVirtualGLPainter char TVirtualGLPainter plotDefinition TGWin32VirtualGLProxy.cxx:53; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRInterface.h; FunctionDouble_t(* Function)(Double_t)Definition Functor.C:4; ROOT::R::TRDataFrameThis is a class to create DataFrames from ROOT to R.Definition TRDataFrame.h:176; ROOT::R::TRFunctionImportThis is a class to pass functions from ROOT to R.Definition TRFunctionImport.h:",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:8854,Security,hash,hash,8854," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:7465,Availability,error,error,7465,"inition legend1.C:16; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 136 of file TRInterface.h. Classes; class  Binding;  . Public Member Functions;  ~TRInterface ();  ; template<typename T > ; void Assign (const T &var, const TString &name);  Template method to assign C++ variables into R environment. ;  ; void Assign (const TRDataFrame &df, const TString &name);  Method to assign TRDataFrame in R's environment. ;  ; void Assign (const TRFunctionExport &fun, const TString &name);  Method to assign TRFunctionExport in R's environment. ;  ; TRObject Eval (const TString &code);  Method to eval R code and you get the result in a TRObject. ;  ; Int_t Eval (const TString &code, TRObject &ans);  Method to eval R code and you get the result in a reference to TRObject. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; void Execute (const TString &code);  Method to eval R code. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; Bool_t Install (TString pkg, TString repos=""http://cran.r-project.org"");  Method to install an R's package. ;  ; void Interactive ();  Method to get a R prompt to work interactively with tab completion support. ;  ; virtual TClass * IsA () const;  ; Bool_t IsInstalled (TString pkg);  Method to verify if a package is installed. ;  ; Binding operator[] (const TString &name);  ; void ProcessEventsLoop ();  Init event loop in a thread to support actions in windows from R graphics system. ;  ; Bool_t Require (TString pkg);  Method to load an R's package. ;  ; void SetVerbose (Bool_t status);  Method to set verbose mode, that produce extra output. ;  ; virtual void Streamer (TBuffer &);  ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:7685,Availability,error,error,7685,"f file TRInterface.h. Classes; class  Binding;  . Public Member Functions;  ~TRInterface ();  ; template<typename T > ; void Assign (const T &var, const TString &name);  Template method to assign C++ variables into R environment. ;  ; void Assign (const TRDataFrame &df, const TString &name);  Method to assign TRDataFrame in R's environment. ;  ; void Assign (const TRFunctionExport &fun, const TString &name);  Method to assign TRFunctionExport in R's environment. ;  ; TRObject Eval (const TString &code);  Method to eval R code and you get the result in a TRObject. ;  ; Int_t Eval (const TString &code, TRObject &ans);  Method to eval R code and you get the result in a reference to TRObject. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; void Execute (const TString &code);  Method to eval R code. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; Bool_t Install (TString pkg, TString repos=""http://cran.r-project.org"");  Method to install an R's package. ;  ; void Interactive ();  Method to get a R prompt to work interactively with tab completion support. ;  ; virtual TClass * IsA () const;  ; Bool_t IsInstalled (TString pkg);  Method to verify if a package is installed. ;  ; Binding operator[] (const TString &name);  ; void ProcessEventsLoop ();  Init event loop in a thread to support actions in windows from R graphics system. ;  ; Bool_t Require (TString pkg);  Method to load an R's package. ;  ; void SetVerbose (Bool_t status);  Method to set verbose mode, that produce extra output. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &objec",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:10360,Availability,error,error,10360,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:10584,Availability,error,error,10584,"onst;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:15148,Availability,error,error,15148," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TRInterface & Instance ();  static method to get an TRInterface instance reference ;  ; static TRInterface * InstancePtr ();  static method t",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:21245,Availability,error,error,21245,"Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 320 of file TRInterface.h. ◆ DeclFileName(). static const char * ROOT::R::TRInterface::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 320 of file TRInterface.h. ◆ Eval() [1/2]. TRObject TRInterface::Eval ; (; const TString & ; code). Method to eval R code and you get the result in a TRObject. ; Parameters. codeR code . Returnsa TRObject with result ; Definition at line 113 of file TRInterface.cxx. ◆ Eval() [2/2]. Int_t TRInterface::Eval ; (; const TString & ; code, . TRObject & ; ans . ). Method to eval R code and you get the result in a reference to TRObject. ; Parameters. codeR code ; ansreference to TRObject . Returnsan true or false if the execution was successful or not. ; Definition at line 80 of file TRInterface.cxx. ◆ Execute() [1/3]. void TObject::Execute ; (; const char * ; method, . const char * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with the given parameter string, e.g. ; ""3.14,1,\""text\"""". ; Reimplemented from TObject.; Definition at line 130 of file TObject.cxx. ◆ Execute() [2/3]. void TRInterface::Execute ; (; const TString & ; code). Method to eval R code. ; Parameters. codeR code . Definition at line 99 of file TRInterface.cxx. ◆ Execute() [3/3]. void TObject::Execute ; (; TMethod * ; method, . TObjArray * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28. Reimplemented from TObject.; Definition at line 131 of file TObject.cxx. ◆ Install(). Bool_t TRInterface::Install ; (; TString ; pkg, . TString ; repos = ""http://cran.r-project.org"" . ). Method to install an R's package. ; Parameters. pkgR's pkg name ; reposur",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:21714,Availability,error,error,21714,"R code . Returnsa TRObject with result ; Definition at line 113 of file TRInterface.cxx. ◆ Eval() [2/2]. Int_t TRInterface::Eval ; (; const TString & ; code, . TRObject & ; ans . ). Method to eval R code and you get the result in a reference to TRObject. ; Parameters. codeR code ; ansreference to TRObject . Returnsan true or false if the execution was successful or not. ; Definition at line 80 of file TRInterface.cxx. ◆ Execute() [1/3]. void TObject::Execute ; (; const char * ; method, . const char * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with the given parameter string, e.g. ; ""3.14,1,\""text\"""". ; Reimplemented from TObject.; Definition at line 130 of file TObject.cxx. ◆ Execute() [2/3]. void TRInterface::Execute ; (; const TString & ; code). Method to eval R code. ; Parameters. codeR code . Definition at line 99 of file TRInterface.cxx. ◆ Execute() [3/3]. void TObject::Execute ; (; TMethod * ; method, . TObjArray * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28. Reimplemented from TObject.; Definition at line 131 of file TObject.cxx. ◆ Install(). Bool_t TRInterface::Install ; (; TString ; pkg, . TString ; repos = ""http://cran.r-project.org"" . ). Method to install an R's package. ; Parameters. pkgR's pkg name ; reposurl for R's package repository . Returnstrue or false if the package was installed or not ; Definition at line 207 of file TRInterface.cxx. ◆ Instance(). TRInterface & TRInterface::Instance ; (; ). static . static method to get an TRInterface instance reference ; ReturnsTRInterface instance reference ; Definition at line 187 of file TRInterface.cxx. ◆ InstancePtr(). TRInterface * TRInterface::InstancePtr ; (; ). static . static method to get an TRInterface instance p",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:7862,Deployability,install,install,7862,"emplate method to assign C++ variables into R environment. ;  ; void Assign (const TRDataFrame &df, const TString &name);  Method to assign TRDataFrame in R's environment. ;  ; void Assign (const TRFunctionExport &fun, const TString &name);  Method to assign TRFunctionExport in R's environment. ;  ; TRObject Eval (const TString &code);  Method to eval R code and you get the result in a TRObject. ;  ; Int_t Eval (const TString &code, TRObject &ans);  Method to eval R code and you get the result in a reference to TRObject. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; void Execute (const TString &code);  Method to eval R code. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; Bool_t Install (TString pkg, TString repos=""http://cran.r-project.org"");  Method to install an R's package. ;  ; void Interactive ();  Method to get a R prompt to work interactively with tab completion support. ;  ; virtual TClass * IsA () const;  ; Bool_t IsInstalled (TString pkg);  Method to verify if a package is installed. ;  ; Binding operator[] (const TString &name);  ; void ProcessEventsLoop ();  Init event loop in a thread to support actions in windows from R graphics system. ;  ; Bool_t Require (TString pkg);  Method to load an R's package. ;  ; void SetVerbose (Bool_t status);  Method to set verbose mode, that produce extra output. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" meth",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:8096,Deployability,install,installed,8096,"ssign (const TRFunctionExport &fun, const TString &name);  Method to assign TRFunctionExport in R's environment. ;  ; TRObject Eval (const TString &code);  Method to eval R code and you get the result in a TRObject. ;  ; Int_t Eval (const TString &code, TRObject &ans);  Method to eval R code and you get the result in a reference to TRObject. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; void Execute (const TString &code);  Method to eval R code. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; Bool_t Install (TString pkg, TString repos=""http://cran.r-project.org"");  Method to install an R's package. ;  ; void Interactive ();  Method to get a R prompt to work interactively with tab completion support. ;  ; virtual TClass * IsA () const;  ; Bool_t IsInstalled (TString pkg);  Method to verify if a package is installed. ;  ; Binding operator[] (const TString &name);  ; void ProcessEventsLoop ();  Init event loop in a thread to support actions in windows from R graphics system. ;  ; Bool_t Require (TString pkg);  Method to load an R's package. ;  ; void SetVerbose (Bool_t status);  Method to set verbose mode, that produce extra output. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  B",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:22185,Deployability,install,install,22185,"char * ; method, . const char * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with the given parameter string, e.g. ; ""3.14,1,\""text\"""". ; Reimplemented from TObject.; Definition at line 130 of file TObject.cxx. ◆ Execute() [2/3]. void TRInterface::Execute ; (; const TString & ; code). Method to eval R code. ; Parameters. codeR code . Definition at line 99 of file TRInterface.cxx. ◆ Execute() [3/3]. void TObject::Execute ; (; TMethod * ; method, . TObjArray * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28. Reimplemented from TObject.; Definition at line 131 of file TObject.cxx. ◆ Install(). Bool_t TRInterface::Install ; (; TString ; pkg, . TString ; repos = ""http://cran.r-project.org"" . ). Method to install an R's package. ; Parameters. pkgR's pkg name ; reposurl for R's package repository . Returnstrue or false if the package was installed or not ; Definition at line 207 of file TRInterface.cxx. ◆ Instance(). TRInterface & TRInterface::Instance ; (; ). static . static method to get an TRInterface instance reference ; ReturnsTRInterface instance reference ; Definition at line 187 of file TRInterface.cxx. ◆ InstancePtr(). TRInterface * TRInterface::InstancePtr ; (; ). static . static method to get an TRInterface instance pointer ; ReturnsTRInterface instance pointer ; Definition at line 175 of file TRInterface.cxx. ◆ Interactive(). void TRInterface::Interactive ; (; ). Method to get a R prompt to work interactively with tab completion support. ; Definition at line 161 of file TRInterface.cxx. ◆ IsA(). virtual TClass * ROOT::R::TRInterface::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 320 of file TRInterface.h",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:22319,Deployability,install,installed,22319,"r string, e.g. ; ""3.14,1,\""text\"""". ; Reimplemented from TObject.; Definition at line 130 of file TObject.cxx. ◆ Execute() [2/3]. void TRInterface::Execute ; (; const TString & ; code). Method to eval R code. ; Parameters. codeR code . Definition at line 99 of file TRInterface.cxx. ◆ Execute() [3/3]. void TObject::Execute ; (; TMethod * ; method, . TObjArray * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28. Reimplemented from TObject.; Definition at line 131 of file TObject.cxx. ◆ Install(). Bool_t TRInterface::Install ; (; TString ; pkg, . TString ; repos = ""http://cran.r-project.org"" . ). Method to install an R's package. ; Parameters. pkgR's pkg name ; reposurl for R's package repository . Returnstrue or false if the package was installed or not ; Definition at line 207 of file TRInterface.cxx. ◆ Instance(). TRInterface & TRInterface::Instance ; (; ). static . static method to get an TRInterface instance reference ; ReturnsTRInterface instance reference ; Definition at line 187 of file TRInterface.cxx. ◆ InstancePtr(). TRInterface * TRInterface::InstancePtr ; (; ). static . static method to get an TRInterface instance pointer ; ReturnsTRInterface instance pointer ; Definition at line 175 of file TRInterface.cxx. ◆ Interactive(). void TRInterface::Interactive ; (; ). Method to get a R prompt to work interactively with tab completion support. ; Definition at line 161 of file TRInterface.cxx. ◆ IsA(). virtual TClass * ROOT::R::TRInterface::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 320 of file TRInterface.h. ◆ IsInstalled(). Bool_t TRInterface::IsInstalled ; (; TString ; pkg). Method to verify if a package is installed. ; Parameters. pkgR's pk",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:23296,Deployability,install,installed,23296,"nstrue or false if the package was installed or not ; Definition at line 207 of file TRInterface.cxx. ◆ Instance(). TRInterface & TRInterface::Instance ; (; ). static . static method to get an TRInterface instance reference ; ReturnsTRInterface instance reference ; Definition at line 187 of file TRInterface.cxx. ◆ InstancePtr(). TRInterface * TRInterface::InstancePtr ; (; ). static . static method to get an TRInterface instance pointer ; ReturnsTRInterface instance pointer ; Definition at line 175 of file TRInterface.cxx. ◆ Interactive(). void TRInterface::Interactive ; (; ). Method to get a R prompt to work interactively with tab completion support. ; Definition at line 161 of file TRInterface.cxx. ◆ IsA(). virtual TClass * ROOT::R::TRInterface::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 320 of file TRInterface.h. ◆ IsInstalled(). Bool_t TRInterface::IsInstalled ; (; TString ; pkg). Method to verify if a package is installed. ; Parameters. pkgR's pkg name . Returnstrue or false if the package is installed or not ; Definition at line 193 of file TRInterface.cxx. ◆ operator[](). TRInterface::Binding TRInterface::operator[] ; (; const TString & ; name). Definition at line 142 of file TRInterface.cxx. ◆ ProcessEventsLoop(). void TRInterface::ProcessEventsLoop ; (; ). Init event loop in a thread to support actions in windows from R graphics system. ; Definition at line 219 of file TRInterface.cxx. ◆ Require(). Bool_t TRInterface::Require ; (; TString ; pkg). Method to load an R's package. ; Parameters. pkgR's pkg name . Returnstrue or false if the package was loaded or not ; Definition at line 200 of file TRInterface.cxx. ◆ SetVerbose(). void TRInterface::SetVerbose ; (; Bool_t ; status). Method to set verbose mode, that produce extra output. ; Notesome time can produce so much noise in the output ; Parameters. statusboolean to enable of disable . Definition at line 134 of file TRInterface",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:23378,Deployability,install,installed,23378,"nstance(). TRInterface & TRInterface::Instance ; (; ). static . static method to get an TRInterface instance reference ; ReturnsTRInterface instance reference ; Definition at line 187 of file TRInterface.cxx. ◆ InstancePtr(). TRInterface * TRInterface::InstancePtr ; (; ). static . static method to get an TRInterface instance pointer ; ReturnsTRInterface instance pointer ; Definition at line 175 of file TRInterface.cxx. ◆ Interactive(). void TRInterface::Interactive ; (; ). Method to get a R prompt to work interactively with tab completion support. ; Definition at line 161 of file TRInterface.cxx. ◆ IsA(). virtual TClass * ROOT::R::TRInterface::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 320 of file TRInterface.h. ◆ IsInstalled(). Bool_t TRInterface::IsInstalled ; (; TString ; pkg). Method to verify if a package is installed. ; Parameters. pkgR's pkg name . Returnstrue or false if the package is installed or not ; Definition at line 193 of file TRInterface.cxx. ◆ operator[](). TRInterface::Binding TRInterface::operator[] ; (; const TString & ; name). Definition at line 142 of file TRInterface.cxx. ◆ ProcessEventsLoop(). void TRInterface::ProcessEventsLoop ; (; ). Init event loop in a thread to support actions in windows from R graphics system. ; Definition at line 219 of file TRInterface.cxx. ◆ Require(). Bool_t TRInterface::Require ; (; TString ; pkg). Method to load an R's package. ; Parameters. pkgR's pkg name . Returnstrue or false if the package was loaded or not ; Definition at line 200 of file TRInterface.cxx. ◆ SetVerbose(). void TRInterface::SetVerbose ; (; Bool_t ; status). Method to set verbose mode, that produce extra output. ; Notesome time can produce so much noise in the output ; Parameters. statusboolean to enable of disable . Definition at line 134 of file TRInterface.cxx. ◆ Streamer(). virtual void ROOT::R::TRInterface::Streamer ; (; TBuffer & ; R__b). virtual . Stream ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:622,Energy Efficiency,power,power,622,". ROOT: ROOT::R::TRInterface Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; ROOT::R::TRInterface Class ReferenceR Interface for Statistical Computing. ; ROOT R was implemented using the R Project library and the modules Rcpp and RInside ; TRInterface class; The TRInterface class lets you process R code from ROOT.; You can call R libraries and their functions, plot results in R or ROOT,; and use the power of ROOT and R at the same time.; It also lets you pass scalars, vectors and matrices from ROOT to R; and from R to ROOT using TRObject; but you can to use overloaded operators [],<< and >> ; to work with ROOTR like work with streams of data. TRInterface class can not be instantiated directly, but you can create objects using the static methods TRInterface& Instance() and TRInterface* InstancePtr() to create your own objects. Show an example below: Create an exponential fit, the idea is to create a set of numbers x,y with noise from ROOT, pass them to R and fit the data to \( x^3 \), get the fitted coefficient(power) and plot the data, the known function and the fitted function. TCanvas *c1 = new TCanvas(""c1"",""Curve Fit"",700,500);; c1->SetGrid();; ; // draw a frame for multiples graphs; TMultiGraph *mg = new TMultiGraph();; ; // create the first graph (points with gaussian noise); const Int_t n = 24;; Double_t x[n] ;; Double_t y[n] ;; //Generate points along a X^3 with noise; TRandom rg;; rg.SetSeed(520);; for (Int_t i = 0; i < n; i++) {; x[i] = rg.Uniform(0, 1);; y[i] = TMath::Power(x[i], 3) + rg.Gaus() * 0.06;; }; ; TGraph *gr1 = new TGraph(n,x,y);; gr1->SetMarkerColor(kBlue);; gr1->SetMarkerStyle(8);; gr1->SetMarkerSize(1);; mg->Add(gr1);; ; // create second graph; TF1 *f_known=new TF1(""f_known"",""pow(x,3)"",0,1);; TGraph *gr2 = new TGraph(f_known);; ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:1245,Energy Efficiency,power,power,1245,"|; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; ROOT::R::TRInterface Class ReferenceR Interface for Statistical Computing. ; ROOT R was implemented using the R Project library and the modules Rcpp and RInside ; TRInterface class; The TRInterface class lets you process R code from ROOT.; You can call R libraries and their functions, plot results in R or ROOT,; and use the power of ROOT and R at the same time.; It also lets you pass scalars, vectors and matrices from ROOT to R; and from R to ROOT using TRObject; but you can to use overloaded operators [],<< and >> ; to work with ROOTR like work with streams of data. TRInterface class can not be instantiated directly, but you can create objects using the static methods TRInterface& Instance() and TRInterface* InstancePtr() to create your own objects. Show an example below: Create an exponential fit, the idea is to create a set of numbers x,y with noise from ROOT, pass them to R and fit the data to \( x^3 \), get the fitted coefficient(power) and plot the data, the known function and the fitted function. TCanvas *c1 = new TCanvas(""c1"",""Curve Fit"",700,500);; c1->SetGrid();; ; // draw a frame for multiples graphs; TMultiGraph *mg = new TMultiGraph();; ; // create the first graph (points with gaussian noise); const Int_t n = 24;; Double_t x[n] ;; Double_t y[n] ;; //Generate points along a X^3 with noise; TRandom rg;; rg.SetSeed(520);; for (Int_t i = 0; i < n; i++) {; x[i] = rg.Uniform(0, 1);; y[i] = TMath::Power(x[i], 3) + rg.Gaus() * 0.06;; }; ; TGraph *gr1 = new TGraph(n,x,y);; gr1->SetMarkerColor(kBlue);; gr1->SetMarkerStyle(8);; gr1->SetMarkerSize(1);; mg->Add(gr1);; ; // create second graph; TF1 *f_known=new TF1(""f_known"",""pow(x,3)"",0,1);; TGraph *gr2 = new TGraph(f_known);; gr2->SetMarkerColor(kRed);; gr2->SetMarkerStyle(8);; gr2->SetMarkerSize(1);; mg->Add(gr2);; ; //passing x and y values to R for fitting; ROOT::R::TRInterface &r=ROOT::R::TRInterface::I",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:2328,Energy Efficiency,power,power,2328,"Generate points along a X^3 with noise; TRandom rg;; rg.SetSeed(520);; for (Int_t i = 0; i < n; i++) {; x[i] = rg.Uniform(0, 1);; y[i] = TMath::Power(x[i], 3) + rg.Gaus() * 0.06;; }; ; TGraph *gr1 = new TGraph(n,x,y);; gr1->SetMarkerColor(kBlue);; gr1->SetMarkerStyle(8);; gr1->SetMarkerSize(1);; mg->Add(gr1);; ; // create second graph; TF1 *f_known=new TF1(""f_known"",""pow(x,3)"",0,1);; TGraph *gr2 = new TGraph(f_known);; gr2->SetMarkerColor(kRed);; gr2->SetMarkerStyle(8);; gr2->SetMarkerSize(1);; mg->Add(gr2);; ; //passing x and y values to R for fitting; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; r[""x""]<<TVectorD(n, x);; r[""y""]<<TVectorD(n, y);; //creating a R data frame; r<<""ds<-data.frame(x=x,y=y)"";; //fitting x and y to X^power using Nonlinear Least Squares; r<<""m <- nls(y ~ I(x^power),data = ds, start = list(power = 1),trace = T)"";; //getting the fitted value (power); Double_t power;; r[""summary(m)$coefficients[1]""]>>power;; ; TF1 *f_fitted=new TF1(""f_fitted"",""pow(x,[0])"",0,1);; f_fitted->SetParameter(0,power);; //plotting the fitted function; TGraph *gr3 = new TGraph(f_fitted);; gr3->SetMarkerColor(kGreen);; gr3->SetMarkerStyle(8);; gr3->SetMarkerSize(1);; ; mg->Add(gr3);; mg->Draw(""ap"");; ; //displaying basic results; TPaveText *pt = new TPaveText(0.1,0.6,0.5,0.9,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Fitting x^power "");; pt->AddText("" \""Blue\"" Points with gaussian noise to be fitted"");; pt->AddText("" \""Red\"" Known function x^3"");; TString fmsg;; fmsg.Form("" \""Green\"" Fitted function with power=%.4lf"",power);; pt->AddText(fmsg);; pt->Draw();; c1->Update();; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TVec",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:2386,Energy Efficiency,power,power,2386,"Generate points along a X^3 with noise; TRandom rg;; rg.SetSeed(520);; for (Int_t i = 0; i < n; i++) {; x[i] = rg.Uniform(0, 1);; y[i] = TMath::Power(x[i], 3) + rg.Gaus() * 0.06;; }; ; TGraph *gr1 = new TGraph(n,x,y);; gr1->SetMarkerColor(kBlue);; gr1->SetMarkerStyle(8);; gr1->SetMarkerSize(1);; mg->Add(gr1);; ; // create second graph; TF1 *f_known=new TF1(""f_known"",""pow(x,3)"",0,1);; TGraph *gr2 = new TGraph(f_known);; gr2->SetMarkerColor(kRed);; gr2->SetMarkerStyle(8);; gr2->SetMarkerSize(1);; mg->Add(gr2);; ; //passing x and y values to R for fitting; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; r[""x""]<<TVectorD(n, x);; r[""y""]<<TVectorD(n, y);; //creating a R data frame; r<<""ds<-data.frame(x=x,y=y)"";; //fitting x and y to X^power using Nonlinear Least Squares; r<<""m <- nls(y ~ I(x^power),data = ds, start = list(power = 1),trace = T)"";; //getting the fitted value (power); Double_t power;; r[""summary(m)$coefficients[1]""]>>power;; ; TF1 *f_fitted=new TF1(""f_fitted"",""pow(x,[0])"",0,1);; f_fitted->SetParameter(0,power);; //plotting the fitted function; TGraph *gr3 = new TGraph(f_fitted);; gr3->SetMarkerColor(kGreen);; gr3->SetMarkerStyle(8);; gr3->SetMarkerSize(1);; ; mg->Add(gr3);; mg->Draw(""ap"");; ; //displaying basic results; TPaveText *pt = new TPaveText(0.1,0.6,0.5,0.9,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Fitting x^power "");; pt->AddText("" \""Blue\"" Points with gaussian noise to be fitted"");; pt->AddText("" \""Red\"" Known function x^3"");; TString fmsg;; fmsg.Form("" \""Green\"" Fitted function with power=%.4lf"",power);; pt->AddText(fmsg);; pt->Draw();; c1->Update();; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TVec",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:2417,Energy Efficiency,power,power,2417,"Generate points along a X^3 with noise; TRandom rg;; rg.SetSeed(520);; for (Int_t i = 0; i < n; i++) {; x[i] = rg.Uniform(0, 1);; y[i] = TMath::Power(x[i], 3) + rg.Gaus() * 0.06;; }; ; TGraph *gr1 = new TGraph(n,x,y);; gr1->SetMarkerColor(kBlue);; gr1->SetMarkerStyle(8);; gr1->SetMarkerSize(1);; mg->Add(gr1);; ; // create second graph; TF1 *f_known=new TF1(""f_known"",""pow(x,3)"",0,1);; TGraph *gr2 = new TGraph(f_known);; gr2->SetMarkerColor(kRed);; gr2->SetMarkerStyle(8);; gr2->SetMarkerSize(1);; mg->Add(gr2);; ; //passing x and y values to R for fitting; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; r[""x""]<<TVectorD(n, x);; r[""y""]<<TVectorD(n, y);; //creating a R data frame; r<<""ds<-data.frame(x=x,y=y)"";; //fitting x and y to X^power using Nonlinear Least Squares; r<<""m <- nls(y ~ I(x^power),data = ds, start = list(power = 1),trace = T)"";; //getting the fitted value (power); Double_t power;; r[""summary(m)$coefficients[1]""]>>power;; ; TF1 *f_fitted=new TF1(""f_fitted"",""pow(x,[0])"",0,1);; f_fitted->SetParameter(0,power);; //plotting the fitted function; TGraph *gr3 = new TGraph(f_fitted);; gr3->SetMarkerColor(kGreen);; gr3->SetMarkerStyle(8);; gr3->SetMarkerSize(1);; ; mg->Add(gr3);; mg->Draw(""ap"");; ; //displaying basic results; TPaveText *pt = new TPaveText(0.1,0.6,0.5,0.9,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Fitting x^power "");; pt->AddText("" \""Blue\"" Points with gaussian noise to be fitted"");; pt->AddText("" \""Red\"" Known function x^3"");; TString fmsg;; fmsg.Form("" \""Green\"" Fitted function with power=%.4lf"",power);; pt->AddText(fmsg);; pt->Draw();; c1->Update();; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TVec",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:2470,Energy Efficiency,power,power,2470,"Generate points along a X^3 with noise; TRandom rg;; rg.SetSeed(520);; for (Int_t i = 0; i < n; i++) {; x[i] = rg.Uniform(0, 1);; y[i] = TMath::Power(x[i], 3) + rg.Gaus() * 0.06;; }; ; TGraph *gr1 = new TGraph(n,x,y);; gr1->SetMarkerColor(kBlue);; gr1->SetMarkerStyle(8);; gr1->SetMarkerSize(1);; mg->Add(gr1);; ; // create second graph; TF1 *f_known=new TF1(""f_known"",""pow(x,3)"",0,1);; TGraph *gr2 = new TGraph(f_known);; gr2->SetMarkerColor(kRed);; gr2->SetMarkerStyle(8);; gr2->SetMarkerSize(1);; mg->Add(gr2);; ; //passing x and y values to R for fitting; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; r[""x""]<<TVectorD(n, x);; r[""y""]<<TVectorD(n, y);; //creating a R data frame; r<<""ds<-data.frame(x=x,y=y)"";; //fitting x and y to X^power using Nonlinear Least Squares; r<<""m <- nls(y ~ I(x^power),data = ds, start = list(power = 1),trace = T)"";; //getting the fitted value (power); Double_t power;; r[""summary(m)$coefficients[1]""]>>power;; ; TF1 *f_fitted=new TF1(""f_fitted"",""pow(x,[0])"",0,1);; f_fitted->SetParameter(0,power);; //plotting the fitted function; TGraph *gr3 = new TGraph(f_fitted);; gr3->SetMarkerColor(kGreen);; gr3->SetMarkerStyle(8);; gr3->SetMarkerSize(1);; ; mg->Add(gr3);; mg->Draw(""ap"");; ; //displaying basic results; TPaveText *pt = new TPaveText(0.1,0.6,0.5,0.9,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Fitting x^power "");; pt->AddText("" \""Blue\"" Points with gaussian noise to be fitted"");; pt->AddText("" \""Red\"" Known function x^3"");; TString fmsg;; fmsg.Form("" \""Green\"" Fitted function with power=%.4lf"",power);; pt->AddText(fmsg);; pt->Draw();; c1->Update();; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TVec",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:2487,Energy Efficiency,power,power,2487,"Generate points along a X^3 with noise; TRandom rg;; rg.SetSeed(520);; for (Int_t i = 0; i < n; i++) {; x[i] = rg.Uniform(0, 1);; y[i] = TMath::Power(x[i], 3) + rg.Gaus() * 0.06;; }; ; TGraph *gr1 = new TGraph(n,x,y);; gr1->SetMarkerColor(kBlue);; gr1->SetMarkerStyle(8);; gr1->SetMarkerSize(1);; mg->Add(gr1);; ; // create second graph; TF1 *f_known=new TF1(""f_known"",""pow(x,3)"",0,1);; TGraph *gr2 = new TGraph(f_known);; gr2->SetMarkerColor(kRed);; gr2->SetMarkerStyle(8);; gr2->SetMarkerSize(1);; mg->Add(gr2);; ; //passing x and y values to R for fitting; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; r[""x""]<<TVectorD(n, x);; r[""y""]<<TVectorD(n, y);; //creating a R data frame; r<<""ds<-data.frame(x=x,y=y)"";; //fitting x and y to X^power using Nonlinear Least Squares; r<<""m <- nls(y ~ I(x^power),data = ds, start = list(power = 1),trace = T)"";; //getting the fitted value (power); Double_t power;; r[""summary(m)$coefficients[1]""]>>power;; ; TF1 *f_fitted=new TF1(""f_fitted"",""pow(x,[0])"",0,1);; f_fitted->SetParameter(0,power);; //plotting the fitted function; TGraph *gr3 = new TGraph(f_fitted);; gr3->SetMarkerColor(kGreen);; gr3->SetMarkerStyle(8);; gr3->SetMarkerSize(1);; ; mg->Add(gr3);; mg->Draw(""ap"");; ; //displaying basic results; TPaveText *pt = new TPaveText(0.1,0.6,0.5,0.9,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Fitting x^power "");; pt->AddText("" \""Blue\"" Points with gaussian noise to be fitted"");; pt->AddText("" \""Red\"" Known function x^3"");; TString fmsg;; fmsg.Form("" \""Green\"" Fitted function with power=%.4lf"",power);; pt->AddText(fmsg);; pt->Draw();; c1->Update();; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TVec",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:2528,Energy Efficiency,power,power,2528,"Generate points along a X^3 with noise; TRandom rg;; rg.SetSeed(520);; for (Int_t i = 0; i < n; i++) {; x[i] = rg.Uniform(0, 1);; y[i] = TMath::Power(x[i], 3) + rg.Gaus() * 0.06;; }; ; TGraph *gr1 = new TGraph(n,x,y);; gr1->SetMarkerColor(kBlue);; gr1->SetMarkerStyle(8);; gr1->SetMarkerSize(1);; mg->Add(gr1);; ; // create second graph; TF1 *f_known=new TF1(""f_known"",""pow(x,3)"",0,1);; TGraph *gr2 = new TGraph(f_known);; gr2->SetMarkerColor(kRed);; gr2->SetMarkerStyle(8);; gr2->SetMarkerSize(1);; mg->Add(gr2);; ; //passing x and y values to R for fitting; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; r[""x""]<<TVectorD(n, x);; r[""y""]<<TVectorD(n, y);; //creating a R data frame; r<<""ds<-data.frame(x=x,y=y)"";; //fitting x and y to X^power using Nonlinear Least Squares; r<<""m <- nls(y ~ I(x^power),data = ds, start = list(power = 1),trace = T)"";; //getting the fitted value (power); Double_t power;; r[""summary(m)$coefficients[1]""]>>power;; ; TF1 *f_fitted=new TF1(""f_fitted"",""pow(x,[0])"",0,1);; f_fitted->SetParameter(0,power);; //plotting the fitted function; TGraph *gr3 = new TGraph(f_fitted);; gr3->SetMarkerColor(kGreen);; gr3->SetMarkerStyle(8);; gr3->SetMarkerSize(1);; ; mg->Add(gr3);; mg->Draw(""ap"");; ; //displaying basic results; TPaveText *pt = new TPaveText(0.1,0.6,0.5,0.9,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Fitting x^power "");; pt->AddText("" \""Blue\"" Points with gaussian noise to be fitted"");; pt->AddText("" \""Red\"" Known function x^3"");; TString fmsg;; fmsg.Form("" \""Green\"" Fitted function with power=%.4lf"",power);; pt->AddText(fmsg);; pt->Draw();; c1->Update();; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TVec",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:2616,Energy Efficiency,power,power,2616,"Generate points along a X^3 with noise; TRandom rg;; rg.SetSeed(520);; for (Int_t i = 0; i < n; i++) {; x[i] = rg.Uniform(0, 1);; y[i] = TMath::Power(x[i], 3) + rg.Gaus() * 0.06;; }; ; TGraph *gr1 = new TGraph(n,x,y);; gr1->SetMarkerColor(kBlue);; gr1->SetMarkerStyle(8);; gr1->SetMarkerSize(1);; mg->Add(gr1);; ; // create second graph; TF1 *f_known=new TF1(""f_known"",""pow(x,3)"",0,1);; TGraph *gr2 = new TGraph(f_known);; gr2->SetMarkerColor(kRed);; gr2->SetMarkerStyle(8);; gr2->SetMarkerSize(1);; mg->Add(gr2);; ; //passing x and y values to R for fitting; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; r[""x""]<<TVectorD(n, x);; r[""y""]<<TVectorD(n, y);; //creating a R data frame; r<<""ds<-data.frame(x=x,y=y)"";; //fitting x and y to X^power using Nonlinear Least Squares; r<<""m <- nls(y ~ I(x^power),data = ds, start = list(power = 1),trace = T)"";; //getting the fitted value (power); Double_t power;; r[""summary(m)$coefficients[1]""]>>power;; ; TF1 *f_fitted=new TF1(""f_fitted"",""pow(x,[0])"",0,1);; f_fitted->SetParameter(0,power);; //plotting the fitted function; TGraph *gr3 = new TGraph(f_fitted);; gr3->SetMarkerColor(kGreen);; gr3->SetMarkerStyle(8);; gr3->SetMarkerSize(1);; ; mg->Add(gr3);; mg->Draw(""ap"");; ; //displaying basic results; TPaveText *pt = new TPaveText(0.1,0.6,0.5,0.9,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Fitting x^power "");; pt->AddText("" \""Blue\"" Points with gaussian noise to be fitted"");; pt->AddText("" \""Red\"" Known function x^3"");; TString fmsg;; fmsg.Form("" \""Green\"" Fitted function with power=%.4lf"",power);; pt->AddText(fmsg);; pt->Draw();; c1->Update();; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TVec",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:2963,Energy Efficiency,power,power,2963,"nown);; gr2->SetMarkerColor(kRed);; gr2->SetMarkerStyle(8);; gr2->SetMarkerSize(1);; mg->Add(gr2);; ; //passing x and y values to R for fitting; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; r[""x""]<<TVectorD(n, x);; r[""y""]<<TVectorD(n, y);; //creating a R data frame; r<<""ds<-data.frame(x=x,y=y)"";; //fitting x and y to X^power using Nonlinear Least Squares; r<<""m <- nls(y ~ I(x^power),data = ds, start = list(power = 1),trace = T)"";; //getting the fitted value (power); Double_t power;; r[""summary(m)$coefficients[1]""]>>power;; ; TF1 *f_fitted=new TF1(""f_fitted"",""pow(x,[0])"",0,1);; f_fitted->SetParameter(0,power);; //plotting the fitted function; TGraph *gr3 = new TGraph(f_fitted);; gr3->SetMarkerColor(kGreen);; gr3->SetMarkerStyle(8);; gr3->SetMarkerSize(1);; ; mg->Add(gr3);; mg->Draw(""ap"");; ; //displaying basic results; TPaveText *pt = new TPaveText(0.1,0.6,0.5,0.9,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Fitting x^power "");; pt->AddText("" \""Blue\"" Points with gaussian noise to be fitted"");; pt->AddText("" \""Red\"" Known function x^3"");; TString fmsg;; fmsg.Form("" \""Green\"" Fitted function with power=%.4lf"",power);; pt->AddText(fmsg);; pt->Draw();; c1->Update();; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TVectorDTVectorT< Double_t > TVectorDDefinition TVectorDfwd.h:23; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fil",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:3144,Energy Efficiency,power,power,3144,"fitting; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; r[""x""]<<TVectorD(n, x);; r[""y""]<<TVectorD(n, y);; //creating a R data frame; r<<""ds<-data.frame(x=x,y=y)"";; //fitting x and y to X^power using Nonlinear Least Squares; r<<""m <- nls(y ~ I(x^power),data = ds, start = list(power = 1),trace = T)"";; //getting the fitted value (power); Double_t power;; r[""summary(m)$coefficients[1]""]>>power;; ; TF1 *f_fitted=new TF1(""f_fitted"",""pow(x,[0])"",0,1);; f_fitted->SetParameter(0,power);; //plotting the fitted function; TGraph *gr3 = new TGraph(f_fitted);; gr3->SetMarkerColor(kGreen);; gr3->SetMarkerStyle(8);; gr3->SetMarkerSize(1);; ; mg->Add(gr3);; mg->Draw(""ap"");; ; //displaying basic results; TPaveText *pt = new TPaveText(0.1,0.6,0.5,0.9,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Fitting x^power "");; pt->AddText("" \""Blue\"" Points with gaussian noise to be fitted"");; pt->AddText("" \""Red\"" Known function x^3"");; TString fmsg;; fmsg.Form("" \""Green\"" Fitted function with power=%.4lf"",power);; pt->AddText(fmsg);; pt->Draw();; c1->Update();; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TVectorDTVectorT< Double_t > TVectorDDefinition TVectorDfwd.h:23; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Defi",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:3157,Energy Efficiency,power,power,3157,"r[""x""]<<TVectorD(n, x);; r[""y""]<<TVectorD(n, y);; //creating a R data frame; r<<""ds<-data.frame(x=x,y=y)"";; //fitting x and y to X^power using Nonlinear Least Squares; r<<""m <- nls(y ~ I(x^power),data = ds, start = list(power = 1),trace = T)"";; //getting the fitted value (power); Double_t power;; r[""summary(m)$coefficients[1]""]>>power;; ; TF1 *f_fitted=new TF1(""f_fitted"",""pow(x,[0])"",0,1);; f_fitted->SetParameter(0,power);; //plotting the fitted function; TGraph *gr3 = new TGraph(f_fitted);; gr3->SetMarkerColor(kGreen);; gr3->SetMarkerStyle(8);; gr3->SetMarkerSize(1);; ; mg->Add(gr3);; mg->Draw(""ap"");; ; //displaying basic results; TPaveText *pt = new TPaveText(0.1,0.6,0.5,0.9,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Fitting x^power "");; pt->AddText("" \""Blue\"" Points with gaussian noise to be fitted"");; pt->AddText("" \""Red\"" Known function x^3"");; TString fmsg;; fmsg.Form("" \""Green\"" Fitted function with power=%.4lf"",power);; pt->AddText(fmsg);; pt->Draw();; c1->Update();; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TVectorDTVectorT< Double_t > TVectorDDefinition TVectorDfwd.h:23; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMa",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:6576,Energy Efficiency,power,power,6576,"ion TPaveText.cxx:242; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cxx:615; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TStringBasic string class.Definition TString.h:139; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; double; int; ptTPaveText * ptDefinition entrylist_figure1.C:7; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 136 of file TRInterface.h. Classes; class  Binding;  . Public Member Functions;  ~TRInterface ();  ; template<typename T > ; void Assign (const T &var, const TString &name);  Template method to assign C++ variables into R environment. ;  ; void Assign (const TRDataFrame &df, const TString &name);  Method to assign TRDataFrame in R's environment. ;  ; void Assign (const TRFunctionExport &fun, const TString &name);  Method to assign TRFunctionExport in R's environment. ;  ; TRObject Eval (const TString &code);  Method to eval R code and you get the result in a TRObject. ;  ; Int_t Eval (const TString &code, TRObject &ans);  Method to eval R code and you get the result in a reference to TRObject. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given paramet",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:10366,Integrability,message,message,10366,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:10590,Integrability,message,message,10590,"onst;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:11792,Integrability,message,message,11792,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:15154,Integrability,message,message,15154," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TRInterface & Instance ();  static method to get an TRInterface instance reference ;  ; static TRInterface * InstancePtr ();  static method t",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:15527,Integrability,message,message,15527," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TRInterface & Instance ();  static method to get an TRInterface instance reference ;  ; static TRInterface * InstancePtr ();  static method to get an TRInterface instance pointer ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:19266,Integrability,wrap,wrappable,19266," TRInterface(). TRInterface::TRInterface ; (; const Int_t ; argc = 0, . const Char_t * ; argv[] = NULL, . const Bool_t ; loadRcpp = true, . const Bool_t ; verbose = false, . const Bool_t ; interactive = true . ). private . The command line arguments are by default argc=0 and argv=NULL, The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr. ; Notesome time can produce so much noise in the output ; Parameters. argcdefault 0 ; argvdefault null ; loadRcppdefault true ; verbosedefault false ; interactivedefault true . Definition at line 33 of file TRInterface.cxx. ◆ ~TRInterface(). TRInterface::~TRInterface ; (; ). Definition at line 71 of file TRInterface.cxx. Member Function Documentation. ◆ Assign() [1/3]. template<typename T > . void ROOT::R::TRInterface::Assign ; (; const T & ; var, . const TString & ; name . ). inline . Template method to assign C++ variables into R environment. ; Parameters. varany R wrappable datatype ; namename of the variable in R's environment . Definition at line 258 of file TRInterface.h. ◆ Assign() [2/3]. void TRInterface::Assign ; (; const TRDataFrame & ; df, . const TString & ; name . ). Method to assign TRDataFrame in R's environment. ; Parameters. dfTRDataFrame ; namename of the variable in R's environment . Definition at line 154 of file TRInterface.cxx. ◆ Assign() [3/3]. void TRInterface::Assign ; (; const TRFunctionExport & ; fun, . const TString & ; name . ). Method to assign TRFunctionExport in R's environment. ; Parameters. funTRFunctionExport ; namename of the variable in R's environment . Definition at line 148 of file TRInterface.cxx. ◆ Class(). static TClass * ROOT::R::TRInterface::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::R::TRInterface::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRInterface::Class_Version ; (; ). inlinestaticconstexpr . Return",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:6893,Modifiability,variab,variables,6893,"n TRandom.cxx:275; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cxx:615; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TStringBasic string class.Definition TString.h:139; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; double; int; ptTPaveText * ptDefinition entrylist_figure1.C:7; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 136 of file TRInterface.h. Classes; class  Binding;  . Public Member Functions;  ~TRInterface ();  ; template<typename T > ; void Assign (const T &var, const TString &name);  Template method to assign C++ variables into R environment. ;  ; void Assign (const TRDataFrame &df, const TString &name);  Method to assign TRDataFrame in R's environment. ;  ; void Assign (const TRFunctionExport &fun, const TString &name);  Method to assign TRFunctionExport in R's environment. ;  ; TRObject Eval (const TString &code);  Method to eval R code and you get the result in a TRObject. ;  ; Int_t Eval (const TString &code, TRObject &ans);  Method to eval R code and you get the result in a reference to TRObject. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; void Execute (const TString &code);  Method to eval R code. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; Bool_t Install (TString pkg, TString repos=""http://cra",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:8599,Modifiability,inherit,inherited,8599,"ng &code);  Method to eval R code. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; Bool_t Install (TString pkg, TString repos=""http://cran.r-project.org"");  Method to install an R's package. ;  ; void Interactive ();  Method to get a R prompt to work interactively with tab completion support. ;  ; virtual TClass * IsA () const;  ; Bool_t IsInstalled (TString pkg);  Method to verify if a package is installed. ;  ; Binding operator[] (const TString &name);  ; void ProcessEventsLoop ();  Init event loop in a thread to support actions in windows from R graphics system. ;  ; Bool_t Require (TString pkg);  Method to load an R's package. ;  ; void SetVerbose (Bool_t status);  Method to set verbose mode, that produce extra output. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:9996,Modifiability,inherit,inheritance,9996,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virt",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:11890,Modifiability,inherit,inherits,11890,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:12007,Modifiability,inherit,inherits,12007,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:16219,Modifiability,inherit,inherited,16219," Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TRInterface & Instance ();  static method to get an TRInterface instance reference ;  ; static TRInterface * InstancePtr ();  static method to get an TRInterface instance pointer ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; RInside * fR;  ; TThread * th;  . Private Member Functions;  TRInterface (const Int_t argc=0, const Char_t *argv[]=NULL, const Bool_t loadRcpp=true, const Bool_t verbose=false, const Bool_t interactive=true);  The command line arguments are by default argc=0 and argv=NULL, The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr. ;  . Additional Inheri",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:17161,Modifiability,inherit,inherited,17161,"rited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; RInside * fR;  ; TThread * th;  . Private Member Functions;  TRInterface (const Int_t argc=0, const Char_t *argv[]=NULL, const Bool_t loadRcpp=true, const Bool_t verbose=false, const Bool_t interactive=true);  The command line arguments are by default argc=0 and argv=NULL, The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRInterface.h>. Inheritance diagram for ROOT::R::TRInterface:. This browser is not able to show SVG: try Firefox, Chrome, Safari, ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:17802,Modifiability,inherit,inherited,17802," interactive=true);  The command line arguments are by default argc=0 and argv=NULL, The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRInterface.h>. Inheritance diagram for ROOT::R::TRInterface:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRInterface(). TRInterface::TRInterface ; (; const Int_t ; argc = 0, . const Char_t * ; argv[] = NULL, . const Bool_t ; loadRcpp = true, . const Bool_t ; verbose = false, . const Bool_t ; interactive = true . ). private . The command line arguments are by default argc=0 and argv=NULL, The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr. ; Notesome time can produce so much noise in the output ; Parameters. argcdefault 0 ; argvdefault null ; loadRcppdefault true ; verbosedefault false ; interactivedefault true . Definition at line 33 of file TRInterface.cxx. ◆",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:17901,Modifiability,inherit,inherited,17901," interactive=true);  The command line arguments are by default argc=0 and argv=NULL, The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRInterface.h>. Inheritance diagram for ROOT::R::TRInterface:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRInterface(). TRInterface::TRInterface ; (; const Int_t ; argc = 0, . const Char_t * ; argv[] = NULL, . const Bool_t ; loadRcpp = true, . const Bool_t ; verbose = false, . const Bool_t ; interactive = true . ). private . The command line arguments are by default argc=0 and argv=NULL, The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr. ; Notesome time can produce so much noise in the output ; Parameters. argcdefault 0 ; argvdefault null ; loadRcppdefault true ; verbosedefault false ; interactivedefault true . Definition at line 33 of file TRInterface.cxx. ◆",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:19213,Modifiability,variab,variables,19213,"me, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRInterface(). TRInterface::TRInterface ; (; const Int_t ; argc = 0, . const Char_t * ; argv[] = NULL, . const Bool_t ; loadRcpp = true, . const Bool_t ; verbose = false, . const Bool_t ; interactive = true . ). private . The command line arguments are by default argc=0 and argv=NULL, The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr. ; Notesome time can produce so much noise in the output ; Parameters. argcdefault 0 ; argvdefault null ; loadRcppdefault true ; verbosedefault false ; interactivedefault true . Definition at line 33 of file TRInterface.cxx. ◆ ~TRInterface(). TRInterface::~TRInterface ; (; ). Definition at line 71 of file TRInterface.cxx. Member Function Documentation. ◆ Assign() [1/3]. template<typename T > . void ROOT::R::TRInterface::Assign ; (; const T & ; var, . const TString & ; name . ). inline . Template method to assign C++ variables into R environment. ; Parameters. varany R wrappable datatype ; namename of the variable in R's environment . Definition at line 258 of file TRInterface.h. ◆ Assign() [2/3]. void TRInterface::Assign ; (; const TRDataFrame & ; df, . const TString & ; name . ). Method to assign TRDataFrame in R's environment. ; Parameters. dfTRDataFrame ; namename of the variable in R's environment . Definition at line 154 of file TRInterface.cxx. ◆ Assign() [3/3]. void TRInterface::Assign ; (; const TRFunctionExport & ; fun, . const TString & ; name . ). Method to assign TRFunctionExport in R's environment. ; Parameters. funTRFunctionExport ; namename of the variable in R's environment . Definition at line 148 of file TRInterface.cxx. ◆ Class(). static TClass * ROOT::R::TRInterface::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::R::TRInterface::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Ve",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:19303,Modifiability,variab,variable,19303," TRInterface(). TRInterface::TRInterface ; (; const Int_t ; argc = 0, . const Char_t * ; argv[] = NULL, . const Bool_t ; loadRcpp = true, . const Bool_t ; verbose = false, . const Bool_t ; interactive = true . ). private . The command line arguments are by default argc=0 and argv=NULL, The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr. ; Notesome time can produce so much noise in the output ; Parameters. argcdefault 0 ; argvdefault null ; loadRcppdefault true ; verbosedefault false ; interactivedefault true . Definition at line 33 of file TRInterface.cxx. ◆ ~TRInterface(). TRInterface::~TRInterface ; (; ). Definition at line 71 of file TRInterface.cxx. Member Function Documentation. ◆ Assign() [1/3]. template<typename T > . void ROOT::R::TRInterface::Assign ; (; const T & ; var, . const TString & ; name . ). inline . Template method to assign C++ variables into R environment. ; Parameters. varany R wrappable datatype ; namename of the variable in R's environment . Definition at line 258 of file TRInterface.h. ◆ Assign() [2/3]. void TRInterface::Assign ; (; const TRDataFrame & ; df, . const TString & ; name . ). Method to assign TRDataFrame in R's environment. ; Parameters. dfTRDataFrame ; namename of the variable in R's environment . Definition at line 154 of file TRInterface.cxx. ◆ Assign() [3/3]. void TRInterface::Assign ; (; const TRFunctionExport & ; fun, . const TString & ; name . ). Method to assign TRFunctionExport in R's environment. ; Parameters. funTRFunctionExport ; namename of the variable in R's environment . Definition at line 148 of file TRInterface.cxx. ◆ Class(). static TClass * ROOT::R::TRInterface::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::R::TRInterface::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRInterface::Class_Version ; (; ). inlinestaticconstexpr . Return",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:19578,Modifiability,variab,variable,19578,"ULL, The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr. ; Notesome time can produce so much noise in the output ; Parameters. argcdefault 0 ; argvdefault null ; loadRcppdefault true ; verbosedefault false ; interactivedefault true . Definition at line 33 of file TRInterface.cxx. ◆ ~TRInterface(). TRInterface::~TRInterface ; (; ). Definition at line 71 of file TRInterface.cxx. Member Function Documentation. ◆ Assign() [1/3]. template<typename T > . void ROOT::R::TRInterface::Assign ; (; const T & ; var, . const TString & ; name . ). inline . Template method to assign C++ variables into R environment. ; Parameters. varany R wrappable datatype ; namename of the variable in R's environment . Definition at line 258 of file TRInterface.h. ◆ Assign() [2/3]. void TRInterface::Assign ; (; const TRDataFrame & ; df, . const TString & ; name . ). Method to assign TRDataFrame in R's environment. ; Parameters. dfTRDataFrame ; namename of the variable in R's environment . Definition at line 154 of file TRInterface.cxx. ◆ Assign() [3/3]. void TRInterface::Assign ; (; const TRFunctionExport & ; fun, . const TString & ; name . ). Method to assign TRFunctionExport in R's environment. ; Parameters. funTRFunctionExport ; namename of the variable in R's environment . Definition at line 148 of file TRInterface.cxx. ◆ Class(). static TClass * ROOT::R::TRInterface::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::R::TRInterface::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRInterface::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 320 of file TRInterface.h. ◆ DeclFileName(). static const char * ROOT::R::TRInterface::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 320 of file TRInterface.h. ◆ Eval() [",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:19872,Modifiability,variab,variable,19872,". Definition at line 33 of file TRInterface.cxx. ◆ ~TRInterface(). TRInterface::~TRInterface ; (; ). Definition at line 71 of file TRInterface.cxx. Member Function Documentation. ◆ Assign() [1/3]. template<typename T > . void ROOT::R::TRInterface::Assign ; (; const T & ; var, . const TString & ; name . ). inline . Template method to assign C++ variables into R environment. ; Parameters. varany R wrappable datatype ; namename of the variable in R's environment . Definition at line 258 of file TRInterface.h. ◆ Assign() [2/3]. void TRInterface::Assign ; (; const TRDataFrame & ; df, . const TString & ; name . ). Method to assign TRDataFrame in R's environment. ; Parameters. dfTRDataFrame ; namename of the variable in R's environment . Definition at line 154 of file TRInterface.cxx. ◆ Assign() [3/3]. void TRInterface::Assign ; (; const TRFunctionExport & ; fun, . const TString & ; name . ). Method to assign TRFunctionExport in R's environment. ; Parameters. funTRFunctionExport ; namename of the variable in R's environment . Definition at line 148 of file TRInterface.cxx. ◆ Class(). static TClass * ROOT::R::TRInterface::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::R::TRInterface::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRInterface::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 320 of file TRInterface.h. ◆ DeclFileName(). static const char * ROOT::R::TRInterface::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 320 of file TRInterface.h. ◆ Eval() [1/2]. TRObject TRInterface::Eval ; (; const TString & ; code). Method to eval R code and you get the result in a TRObject. ; Parameters. codeR code . Returnsa TRObject with result ; Definition at line 113 of file TRInterface.cxx. ◆ Eval() [2/2]. Int_t TRInterface::Eval ; (; const TString & ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:8313,Performance,load,load,8313,", TRObject &ans);  Method to eval R code and you get the result in a reference to TRObject. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; void Execute (const TString &code);  Method to eval R code. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; Bool_t Install (TString pkg, TString repos=""http://cran.r-project.org"");  Method to install an R's package. ;  ; void Interactive ();  Method to get a R prompt to work interactively with tab completion support. ;  ; virtual TClass * IsA () const;  ; Bool_t IsInstalled (TString pkg);  Method to verify if a package is installed. ;  ; Binding operator[] (const TString &name);  ; void ProcessEventsLoop ();  Init event loop in a thread to support actions in windows from R graphics system. ;  ; Bool_t Require (TString pkg);  Method to load an R's package. ;  ; void SetVerbose (Bool_t status);  Method to set verbose mode, that produce extra output. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:16861,Performance,load,loadRcpp,16861,"Class_Version ();  ; static const char * DeclFileName ();  ; static TRInterface & Instance ();  static method to get an TRInterface instance reference ;  ; static TRInterface * InstancePtr ();  static method to get an TRInterface instance pointer ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; RInside * fR;  ; TThread * th;  . Private Member Functions;  TRInterface (const Int_t argc=0, const Char_t *argv[]=NULL, const Bool_t loadRcpp=true, const Bool_t verbose=false, const Bool_t interactive=true);  The command line arguments are by default argc=0 and argv=NULL, The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual voi",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:18415,Performance,load,loadRcpp,18415,"Delete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRInterface.h>. Inheritance diagram for ROOT::R::TRInterface:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRInterface(). TRInterface::TRInterface ; (; const Int_t ; argc = 0, . const Char_t * ; argv[] = NULL, . const Bool_t ; loadRcpp = true, . const Bool_t ; verbose = false, . const Bool_t ; interactive = true . ). private . The command line arguments are by default argc=0 and argv=NULL, The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr. ; Notesome time can produce so much noise in the output ; Parameters. argcdefault 0 ; argvdefault null ; loadRcppdefault true ; verbosedefault false ; interactivedefault true . Definition at line 33 of file TRInterface.cxx. ◆ ~TRInterface(). TRInterface::~TRInterface ; (; ). Definition at line 71 of file TRInterface.cxx. Member Function Documentation. ◆ Assign() [1/3]. template<typename T > . void ROOT::R::TRInterface::Assign ; (; const T & ; var, . const TString & ; name . ). inline . Template method to assign C++ variables into R environment. ; Parameters. varany R wrappable datatype ; namename of the variable in R's environment . Definition at line 258 of file TRInterface.h. ◆ Assign() [2/3]. void TRInterface::A",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:18797,Performance,load,loadRcppdefault,18797,"om TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRInterface.h>. Inheritance diagram for ROOT::R::TRInterface:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRInterface(). TRInterface::TRInterface ; (; const Int_t ; argc = 0, . const Char_t * ; argv[] = NULL, . const Bool_t ; loadRcpp = true, . const Bool_t ; verbose = false, . const Bool_t ; interactive = true . ). private . The command line arguments are by default argc=0 and argv=NULL, The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr. ; Notesome time can produce so much noise in the output ; Parameters. argcdefault 0 ; argvdefault null ; loadRcppdefault true ; verbosedefault false ; interactivedefault true . Definition at line 33 of file TRInterface.cxx. ◆ ~TRInterface(). TRInterface::~TRInterface ; (; ). Definition at line 71 of file TRInterface.cxx. Member Function Documentation. ◆ Assign() [1/3]. template<typename T > . void ROOT::R::TRInterface::Assign ; (; const T & ; var, . const TString & ; name . ). inline . Template method to assign C++ variables into R environment. ; Parameters. varany R wrappable datatype ; namename of the variable in R's environment . Definition at line 258 of file TRInterface.h. ◆ Assign() [2/3]. void TRInterface::Assign ; (; const TRDataFrame & ; df, . const TString & ; name . ). Method to assign TRDataFrame in R's environment. ; Parameters. dfTRDataFrame ; namename of the variable in R's environment . Definition at line 154 of file TRInterface.cxx. ◆ Assign() [3/3]. void TRInterface::Assign ; (; const TRFunctionExport & ; fun, . const TString & ; name . ). Method to assign TRFunctionExport in R's environm",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:23855,Performance,load,load,23855,"; (; ). Method to get a R prompt to work interactively with tab completion support. ; Definition at line 161 of file TRInterface.cxx. ◆ IsA(). virtual TClass * ROOT::R::TRInterface::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 320 of file TRInterface.h. ◆ IsInstalled(). Bool_t TRInterface::IsInstalled ; (; TString ; pkg). Method to verify if a package is installed. ; Parameters. pkgR's pkg name . Returnstrue or false if the package is installed or not ; Definition at line 193 of file TRInterface.cxx. ◆ operator[](). TRInterface::Binding TRInterface::operator[] ; (; const TString & ; name). Definition at line 142 of file TRInterface.cxx. ◆ ProcessEventsLoop(). void TRInterface::ProcessEventsLoop ; (; ). Init event loop in a thread to support actions in windows from R graphics system. ; Definition at line 219 of file TRInterface.cxx. ◆ Require(). Bool_t TRInterface::Require ; (; TString ; pkg). Method to load an R's package. ; Parameters. pkgR's pkg name . Returnstrue or false if the package was loaded or not ; Definition at line 200 of file TRInterface.cxx. ◆ SetVerbose(). void TRInterface::SetVerbose ; (; Bool_t ; status). Method to set verbose mode, that produce extra output. ; Notesome time can produce so much noise in the output ; Parameters. statusboolean to enable of disable . Definition at line 134 of file TRInterface.cxx. ◆ Streamer(). virtual void ROOT::R::TRInterface::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRInterface::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 320 of file TRInterface.h. Member Data Documentation. ◆ fR. RInside* ROOT::R::TRInterface::fR. protected . Definition at line 138 of file TRInterface.h. ◆ th. TThread* ROOT::R::TRInterface::th. protected . Definition at line 139 of file TRInterface.h. Libraries for ROOT::",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:23948,Performance,load,loaded,23948,"t line 161 of file TRInterface.cxx. ◆ IsA(). virtual TClass * ROOT::R::TRInterface::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 320 of file TRInterface.h. ◆ IsInstalled(). Bool_t TRInterface::IsInstalled ; (; TString ; pkg). Method to verify if a package is installed. ; Parameters. pkgR's pkg name . Returnstrue or false if the package is installed or not ; Definition at line 193 of file TRInterface.cxx. ◆ operator[](). TRInterface::Binding TRInterface::operator[] ; (; const TString & ; name). Definition at line 142 of file TRInterface.cxx. ◆ ProcessEventsLoop(). void TRInterface::ProcessEventsLoop ; (; ). Init event loop in a thread to support actions in windows from R graphics system. ; Definition at line 219 of file TRInterface.cxx. ◆ Require(). Bool_t TRInterface::Require ; (; TString ; pkg). Method to load an R's package. ; Parameters. pkgR's pkg name . Returnstrue or false if the package was loaded or not ; Definition at line 200 of file TRInterface.cxx. ◆ SetVerbose(). void TRInterface::SetVerbose ; (; Bool_t ; status). Method to set verbose mode, that produce extra output. ; Notesome time can produce so much noise in the output ; Parameters. statusboolean to enable of disable . Definition at line 134 of file TRInterface.cxx. ◆ Streamer(). virtual void ROOT::R::TRInterface::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRInterface::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 320 of file TRInterface.h. Member Data Documentation. ◆ fR. RInside* ROOT::R::TRInterface::fR. protected . Definition at line 138 of file TRInterface.h. ◆ th. TThread* ROOT::R::TRInterface::th. protected . Definition at line 139 of file TRInterface.h. Libraries for ROOT::R::TRInterface:. [legend]; The documentation for this class was generated from the following file",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:11521,Security,hash,hash,11521," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:5159,Availability,error,error,5159,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:5248,Availability,error,error,5248,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:5403,Availability,error,error,5403,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:5700,Availability,error,error,5700,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:10264,Availability,error,error,10264," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:13805,Availability,error,error,13805,"ow SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRObject() [1/3]. ROOT::R::TRObject::TRObject ; (; ). inline . Default constructor. ; Definition at line 79 of file TRObject.h. ◆ TRObject() [2/3]. TRObject::TRObject ; (; SEXP ; robj). Construct a TRObject given a R base object. ; Parameters. robjraw R object . Definition at line 17 of file TRObject.cxx. ◆ TRObject() [3/3]. TRObject::TRObject ; (; SEXP ; robj, . Bool_t ; status . ). Construct a TRObject given a R base object. ; Parameters. robjraw R object ; statusif the raw object is valid obj . Definition at line 28 of file TRObject.cxx. Member Function Documentation. ◆ As(). template<class T > . T ROOT::R::TRObject::As ; (; ). inline . Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you unwrap those datatypes encapsulate into this TRObject. ; NoteIf the current TRObject is not a valid object it will return and empty object and it will print an error message ; Returnstemplate return with the require datatype ; Definition at line 152 of file TRObject.h. ◆ Class(). static TClass * ROOT::R::TRObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::R::TRObject::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRObject::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 194 of file TRObject.h. ◆ DeclFileName(). static const char * ROOT::R::TRObject::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 194 of file TRObject.h. ◆ GetAttribute(). TRObject ROOT::R::TRObject::GetAttribute ; (; const TString ; name). inline . The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ; Parameters. nameattribute name . Returnsobject associ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:2185,Integrability,wrap,wrapped,2185,"136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; ROOT::R::TRObjectThis is a class to get ROOT's objects from R's objects.Definition TRObject.h:70; TObject::Printvirtual void Print(Option_t *option="""") constThis method must be overridden when a class wants to print itself.Definition TObject.cxx:642; TVectorT< Double_t >; v@ vDefinition rootcling_impl.cxx:3699; Output Vector (10) is as follows; ; | 1 |; ------------------; 0 |1; 1 |2; 2 |3; 3 |4; 4 |5; 5 |6; 6 |7; 7 |8; 8 |9; 9 |10; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 70 of file TRObject.h. Public Member Functions;  TRObject ();  Default constructor. ;  ;  TRObject (SEXP robj);  Construct a TRObject given a R base object. ;  ;  TRObject (SEXP robj, Bool_t status);  Construct a TRObject given a R base object. ;  ; template<class T > ; T As ();  Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you unwrap those datatypes encapsulate into this TRObject. ;  ; TRObject GetAttribute (const TString name);  The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ;  ; Bool_t GetStatus ();  TRObject is a current valid object? ;  ; virtual TClass * IsA () const;  ;  operator Rcpp::RObject ();  ;  operator SEXP ();  ;  operator SEXP () const;  ; template<class T > ;  operator T ();  ; void operator= (SEXP xx);  ; template<class T > ; T operator= (TRObject &obj);  ; template<class T > ; void SetAttribute (const TString name, T obj);  The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ;  ; void SetStatus (Bool_t status);  TRObject is a current valid object? ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_Streamer",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:3299,Integrability,wrap,wrapped,3299,"encapsulate into this TRObject. ;  ; TRObject GetAttribute (const TString name);  The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ;  ; Bool_t GetStatus ();  TRObject is a current valid object? ;  ; virtual TClass * IsA () const;  ;  operator Rcpp::RObject ();  ;  operator SEXP ();  ;  operator SEXP () const;  ; template<class T > ;  operator T ();  ; void operator= (SEXP xx);  ; template<class T > ; T operator= (TRObject &obj);  ; template<class T > ; void SetAttribute (const TString name, T obj);  The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ;  ; void SetStatus (Bool_t status);  TRObject is a current valid object? ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; template<class T > ; TRObject & Wrap (T obj);  Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you wrap those datatypes. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *n",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:3346,Integrability,wrap,wrap,3346,"encapsulate into this TRObject. ;  ; TRObject GetAttribute (const TString name);  The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ;  ; Bool_t GetStatus ();  TRObject is a current valid object? ;  ; virtual TClass * IsA () const;  ;  operator Rcpp::RObject ();  ;  operator SEXP ();  ;  operator SEXP () const;  ; template<class T > ;  operator T ();  ; void operator= (SEXP xx);  ; template<class T > ; T operator= (TRObject &obj);  ; template<class T > ; void SetAttribute (const TString name, T obj);  The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ;  ; void SetStatus (Bool_t status);  TRObject is a current valid object? ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; template<class T > ; TRObject & Wrap (T obj);  Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you wrap those datatypes. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *n",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:5165,Integrability,message,message,5165,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:5706,Integrability,message,message,5706,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:6908,Integrability,message,message,6908,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:10270,Integrability,message,message,10270," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:10643,Integrability,message,message,10643," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Priva",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:11712,Integrability,wrap,wrap,11712,"n=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Rcpp::RObject fObj;  ; Bool_t fStatus;  . Friends; SEXP Rcpp::wrap (const TRObject &f);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:13598,Integrability,wrap,wrapped,13598,"va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRObject.h>. Inheritance diagram for ROOT::R::TRObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRObject() [1/3]. ROOT::R::TRObject::TRObject ; (; ). inline . Default constructor. ; Definition at line 79 of file TRObject.h. ◆ TRObject() [2/3]. TRObject::TRObject ; (; SEXP ; robj). Construct a TRObject given a R base object. ; Parameters. robjraw R object . Definition at line 17 of file TRObject.cxx. ◆ TRObject() [3/3]. TRObject::TRObject ; (; SEXP ; robj, . Bool_t ; status . ). Construct a TRObject given a R base object. ; Parameters. robjraw R object ; statusif the raw object is valid obj . Definition at line 28 of file TRObject.cxx. Member Function Documentation. ◆ As(). template<class T > . T ROOT::R::TRObject::As ; (; ). inline . Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you unwrap those datatypes encapsulate into this TRObject. ; NoteIf the current TRObject is not a valid object it will return and empty object and it will print an error message ; Returnstemplate return with the require datatype ; Definition at line 152 of file TRObject.h. ◆ Class(). static TClass * ROOT::R::TRObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::R::TRObject::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRObject::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 194 of file TRObject.h. ◆ DeclFileName(). static const char * ROOT::R::TRObject::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 194 of file TRObject.h. ◆ GetAttribute(). TRObject ROOT::R::TRObject::GetAttribute ; (; const TString ; name). inline . The R objects can to ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:13811,Integrability,message,message,13811,"ow SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRObject() [1/3]. ROOT::R::TRObject::TRObject ; (; ). inline . Default constructor. ; Definition at line 79 of file TRObject.h. ◆ TRObject() [2/3]. TRObject::TRObject ; (; SEXP ; robj). Construct a TRObject given a R base object. ; Parameters. robjraw R object . Definition at line 17 of file TRObject.cxx. ◆ TRObject() [3/3]. TRObject::TRObject ; (; SEXP ; robj, . Bool_t ; status . ). Construct a TRObject given a R base object. ; Parameters. robjraw R object ; statusif the raw object is valid obj . Definition at line 28 of file TRObject.cxx. Member Function Documentation. ◆ As(). template<class T > . T ROOT::R::TRObject::As ; (; ). inline . Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you unwrap those datatypes encapsulate into this TRObject. ; NoteIf the current TRObject is not a valid object it will return and empty object and it will print an error message ; Returnstemplate return with the require datatype ; Definition at line 152 of file TRObject.h. ◆ Class(). static TClass * ROOT::R::TRObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::R::TRObject::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRObject::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 194 of file TRObject.h. ◆ DeclFileName(). static const char * ROOT::R::TRObject::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 194 of file TRObject.h. ◆ GetAttribute(). TRObject ROOT::R::TRObject::GetAttribute ; (; const TString ; name). inline . The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ; Parameters. nameattribute name . Returnsobject associ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:17114,Integrability,wrap,wrapped,17114,"ject::operator= ; (; TRObject & ; obj). inline . Definition at line 163 of file TRObject.h. ◆ SetAttribute(). template<class T > . void ROOT::R::TRObject::SetAttribute ; (; const TString ; name, . T ; obj . ). inline . The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ; Parameters. nameattribute name ; objobject associated to the attribute name in the current TRObject . Definition at line 116 of file TRObject.h. ◆ SetStatus(). void ROOT::R::TRObject::SetStatus ; (; Bool_t ; status). inline . TRObject is a current valid object? ; Parameters. statusif the current object is valid obj . Definition at line 96 of file TRObject.h. ◆ Streamer(). virtual void ROOT::R::TRObject::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRObject::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 194 of file TRObject.h. ◆ Wrap(). template<class T > . TRObject & ROOT::R::TRObject::Wrap ; (; T ; obj). inline . Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you wrap those datatypes. ; Parameters. objtemplate object to be wrapped . ReturnsTRObject reference of wrapped object ; Definition at line 140 of file TRObject.h. Friends And Related Symbol Documentation. ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRObject & ; f). friend . Member Data Documentation. ◆ fObj. Rcpp::RObject ROOT::R::TRObject::fObj. private . Definition at line 73 of file TRObject.h. ◆ fStatus. Bool_t ROOT::R::TRObject::fStatus. private . Definition at line 74 of file TRObject.h. Libraries for ROOT::R::TRObject:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRObject.h; bindings/r/src/TRObject.cxx. ROOTRTRObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:17161,Integrability,wrap,wrap,17161,"ject::operator= ; (; TRObject & ; obj). inline . Definition at line 163 of file TRObject.h. ◆ SetAttribute(). template<class T > . void ROOT::R::TRObject::SetAttribute ; (; const TString ; name, . T ; obj . ). inline . The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ; Parameters. nameattribute name ; objobject associated to the attribute name in the current TRObject . Definition at line 116 of file TRObject.h. ◆ SetStatus(). void ROOT::R::TRObject::SetStatus ; (; Bool_t ; status). inline . TRObject is a current valid object? ; Parameters. statusif the current object is valid obj . Definition at line 96 of file TRObject.h. ◆ Streamer(). virtual void ROOT::R::TRObject::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRObject::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 194 of file TRObject.h. ◆ Wrap(). template<class T > . TRObject & ROOT::R::TRObject::Wrap ; (; T ; obj). inline . Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you wrap those datatypes. ; Parameters. objtemplate object to be wrapped . ReturnsTRObject reference of wrapped object ; Definition at line 140 of file TRObject.h. Friends And Related Symbol Documentation. ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRObject & ; f). friend . Member Data Documentation. ◆ fObj. Rcpp::RObject ROOT::R::TRObject::fObj. private . Definition at line 73 of file TRObject.h. ◆ fStatus. Bool_t ROOT::R::TRObject::fStatus. private . Definition at line 74 of file TRObject.h. Libraries for ROOT::R::TRObject:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRObject.h; bindings/r/src/TRObject.cxx. ROOTRTRObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:17222,Integrability,wrap,wrapped,17222,"ject::operator= ; (; TRObject & ; obj). inline . Definition at line 163 of file TRObject.h. ◆ SetAttribute(). template<class T > . void ROOT::R::TRObject::SetAttribute ; (; const TString ; name, . T ; obj . ). inline . The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ; Parameters. nameattribute name ; objobject associated to the attribute name in the current TRObject . Definition at line 116 of file TRObject.h. ◆ SetStatus(). void ROOT::R::TRObject::SetStatus ; (; Bool_t ; status). inline . TRObject is a current valid object? ; Parameters. statusif the current object is valid obj . Definition at line 96 of file TRObject.h. ◆ Streamer(). virtual void ROOT::R::TRObject::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRObject::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 194 of file TRObject.h. ◆ Wrap(). template<class T > . TRObject & ROOT::R::TRObject::Wrap ; (; T ; obj). inline . Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you wrap those datatypes. ; Parameters. objtemplate object to be wrapped . ReturnsTRObject reference of wrapped object ; Definition at line 140 of file TRObject.h. Friends And Related Symbol Documentation. ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRObject & ; f). friend . Member Data Documentation. ◆ fObj. Rcpp::RObject ROOT::R::TRObject::fObj. private . Definition at line 73 of file TRObject.h. ◆ fStatus. Bool_t ROOT::R::TRObject::fStatus. private . Definition at line 74 of file TRObject.h. Libraries for ROOT::R::TRObject:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRObject.h; bindings/r/src/TRObject.cxx. ROOTRTRObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:17261,Integrability,wrap,wrapped,17261,"ject::operator= ; (; TRObject & ; obj). inline . Definition at line 163 of file TRObject.h. ◆ SetAttribute(). template<class T > . void ROOT::R::TRObject::SetAttribute ; (; const TString ; name, . T ; obj . ). inline . The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ; Parameters. nameattribute name ; objobject associated to the attribute name in the current TRObject . Definition at line 116 of file TRObject.h. ◆ SetStatus(). void ROOT::R::TRObject::SetStatus ; (; Bool_t ; status). inline . TRObject is a current valid object? ; Parameters. statusif the current object is valid obj . Definition at line 96 of file TRObject.h. ◆ Streamer(). virtual void ROOT::R::TRObject::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRObject::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 194 of file TRObject.h. ◆ Wrap(). template<class T > . TRObject & ROOT::R::TRObject::Wrap ; (; T ; obj). inline . Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you wrap those datatypes. ; Parameters. objtemplate object to be wrapped . ReturnsTRObject reference of wrapped object ; Definition at line 140 of file TRObject.h. Friends And Related Symbol Documentation. ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRObject & ; f). friend . Member Data Documentation. ◆ fObj. Rcpp::RObject ROOT::R::TRObject::fObj. private . Definition at line 73 of file TRObject.h. ◆ fStatus. Bool_t ROOT::R::TRObject::fStatus. private . Definition at line 74 of file TRObject.h. Libraries for ROOT::R::TRObject:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRObject.h; bindings/r/src/TRObject.cxx. ROOTRTRObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:17371,Integrability,wrap,wrap,17371,"ject::operator= ; (; TRObject & ; obj). inline . Definition at line 163 of file TRObject.h. ◆ SetAttribute(). template<class T > . void ROOT::R::TRObject::SetAttribute ; (; const TString ; name, . T ; obj . ). inline . The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ; Parameters. nameattribute name ; objobject associated to the attribute name in the current TRObject . Definition at line 116 of file TRObject.h. ◆ SetStatus(). void ROOT::R::TRObject::SetStatus ; (; Bool_t ; status). inline . TRObject is a current valid object? ; Parameters. statusif the current object is valid obj . Definition at line 96 of file TRObject.h. ◆ Streamer(). virtual void ROOT::R::TRObject::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRObject::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 194 of file TRObject.h. ◆ Wrap(). template<class T > . TRObject & ROOT::R::TRObject::Wrap ; (; T ; obj). inline . Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you wrap those datatypes. ; Parameters. objtemplate object to be wrapped . ReturnsTRObject reference of wrapped object ; Definition at line 140 of file TRObject.h. Friends And Related Symbol Documentation. ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRObject & ; f). friend . Member Data Documentation. ◆ fObj. Rcpp::RObject ROOT::R::TRObject::fObj. private . Definition at line 73 of file TRObject.h. ◆ fStatus. Bool_t ROOT::R::TRObject::fStatus. private . Definition at line 74 of file TRObject.h. Libraries for ROOT::R::TRObject:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRObject.h; bindings/r/src/TRObject.cxx. ROOTRTRObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:17388,Integrability,wrap,wrap,17388,"ject::operator= ; (; TRObject & ; obj). inline . Definition at line 163 of file TRObject.h. ◆ SetAttribute(). template<class T > . void ROOT::R::TRObject::SetAttribute ; (; const TString ; name, . T ; obj . ). inline . The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ; Parameters. nameattribute name ; objobject associated to the attribute name in the current TRObject . Definition at line 116 of file TRObject.h. ◆ SetStatus(). void ROOT::R::TRObject::SetStatus ; (; Bool_t ; status). inline . TRObject is a current valid object? ; Parameters. statusif the current object is valid obj . Definition at line 96 of file TRObject.h. ◆ Streamer(). virtual void ROOT::R::TRObject::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRObject::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 194 of file TRObject.h. ◆ Wrap(). template<class T > . TRObject & ROOT::R::TRObject::Wrap ; (; T ; obj). inline . Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you wrap those datatypes. ; Parameters. objtemplate object to be wrapped . ReturnsTRObject reference of wrapped object ; Definition at line 140 of file TRObject.h. Friends And Related Symbol Documentation. ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRObject & ; f). friend . Member Data Documentation. ◆ fObj. Rcpp::RObject ROOT::R::TRObject::fObj. private . Definition at line 73 of file TRObject.h. ◆ fStatus. Bool_t ROOT::R::TRObject::fStatus. private . Definition at line 74 of file TRObject.h. Libraries for ROOT::R::TRObject:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRObject.h; bindings/r/src/TRObject.cxx. ROOTRTRObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:3398,Modifiability,inherit,inherited,3398,"ded attribute to TRObject given an object in the template argument. ;  ; Bool_t GetStatus ();  TRObject is a current valid object? ;  ; virtual TClass * IsA () const;  ;  operator Rcpp::RObject ();  ;  operator SEXP ();  ;  operator SEXP () const;  ; template<class T > ;  operator T ();  ; void operator= (SEXP xx);  ; template<class T > ; T operator= (TRObject &obj);  ; template<class T > ; void SetAttribute (const TString name, T obj);  The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ;  ; void SetStatus (Bool_t status);  TRObject is a current valid object? ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; template<class T > ; TRObject & Wrap (T obj);  Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you wrap those datatypes. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:4795,Modifiability,inherit,inheritance,4795,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:7006,Modifiability,inherit,inherits,7006,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:7123,Modifiability,inherit,inherits,7123,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:11144,Modifiability,inherit,inherited,11144,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Rcpp::RObject fObj;  ; Bool_t fStatus;  . Friends; SEXP Rcpp::wrap (const TRObject &f);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBi",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:11785,Modifiability,inherit,inherited,11785,"=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Rcpp::RObject fObj;  ; Bool_t fStatus;  . Friends; SEXP Rcpp::wrap (const TRObject &f);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRObject.h>. Inheritance diagram for ROOT::R::TRObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Ope",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:12426,Modifiability,inherit,inherited,12426,"d SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Rcpp::RObject fObj;  ; Bool_t fStatus;  . Friends; SEXP Rcpp::wrap (const TRObject &f);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRObject.h>. Inheritance diagram for ROOT::R::TRObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRObject() [1/3]. ROOT::R::TRObject::TRObject ; (; ). inline . Default constructor. ; Definition at line 79 of file TRObject.h. ◆ TRObject() [2/3]. TRObject::TRObject ; (; SEXP ; robj). Construct a TRObject given a R base object. ; Parameters. robjraw R object . Definition at line 17 of file TRObject.cxx. ◆ TRObject() [3/3]. TRObject::TRObject ; (; SEXP ; robj, . Bool_t ; status . ). Construct a TRObject given a R base object. ; Parameters. robjraw R object ; statusif the raw object is valid obj . Definition at line 28 of file TRObject.cxx. Member Function Documentation. ◆ As(). template<class T > . T ROOT::R::TRObject::",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:12525,Modifiability,inherit,inherited,12525,"d SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Rcpp::RObject fObj;  ; Bool_t fStatus;  . Friends; SEXP Rcpp::wrap (const TRObject &f);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRObject.h>. Inheritance diagram for ROOT::R::TRObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRObject() [1/3]. ROOT::R::TRObject::TRObject ; (; ). inline . Default constructor. ; Definition at line 79 of file TRObject.h. ◆ TRObject() [2/3]. TRObject::TRObject ; (; SEXP ; robj). Construct a TRObject given a R base object. ; Parameters. robjraw R object . Definition at line 17 of file TRObject.cxx. ◆ TRObject() [3/3]. TRObject::TRObject ; (; SEXP ; robj, . Bool_t ; status . ). Construct a TRObject given a R base object. ; Parameters. robjraw R object ; statusif the raw object is valid obj . Definition at line 28 of file TRObject.cxx. Member Function Documentation. ◆ As(). template<class T > . T ROOT::R::TRObject::",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:6637,Security,hash,hash,6637," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:565,Usability,simpl,simple,565,". ROOT: ROOT::R::TRObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::R::TRObject Class ReferenceR Interface for Statistical Computing. ; This is a class to get ROOT's objects from R's objects. ; TRObject class; The TRObject class lets you obtain ROOT's objects from R's objects.; It has some basic template operators to convert R's objects into ROOT's datatypes. A simple example. #include<TRInterface.h>; void Proxy(); {; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; ROOT::R::TRObject obj;; obj=r.Eval(""seq(1,10)"");; TVectorD v=obj;; v.Print();; }; Proxyvoid Proxy()Definition Proxy.C:4; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRInterface.h; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; ROOT::R::TRObjectThis is a class to get ROOT's objects from R's objects.Definition TRObject.h:70; TObject::Printvirtual void Print(Option_t *option="""") constThis method must be overridden when a class wants to print itself.Definition TObject.cxx:642; TVectorT< Double_t >; v@ vDefinition rootcling_impl.cxx:3699; Output Vector (10) is as follows; ; | 1 |; ------------------; 0 |1; 1 |2; 2 |3; 3 |4; 4 |5; 5 |6; 6 |7; 7 |8; 8 |9; 9 |10; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 70 of file TRObject.h. Public Member Functions;  TRObject ();  Default constructor. ;  ;  TRObject (SEXP robj);  Construct a TRObject ",MatchSource.WIKI,doc/master/classROOT_1_1R_1_1TRObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html
https://root.cern/doc/master/classROOT_1_1TBufferMerger.html:646,Performance,queue,queue,646,". ROOT: ROOT::TBufferMerger Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TBufferMerger Class ReferenceInput/Output Library. ; TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. ; Its purpose is similar to TParallelMergingFile, but instead of using processes that connect to a network socket, TBufferMerger uses threads that each write to a TBufferMergerFile, which in turn push data into a queue managed by the TBufferMerger. ; Definition at line 41 of file TBufferMerger.hxx. Public Member Functions;  TBufferMerger (const char *name, Option_t *option=""RECREATE"", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Constructor. ;  ;  TBufferMerger (std::unique_ptr< TFile > output);  Constructor. ;  ; virtual ~TBufferMerger ();  Destructor. ;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetAutoSave() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetBuffered() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetQueueSize() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") void SetAutoSave(size_t);  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") void SetCompressTemporaryKeys(Bool_t;  ; std::shared_ptr< TBufferMergerFile > GetFile ();  Returns a TBufferMergerFile to which data can be written. ;  ; const char * GetMergeOptions ();  Returns the current merge options. ;  ; Bool_t GetNotrees () const;  Returns whether the file has been marked as not containing any TTree objects and thus that steps that are specific to TTree can be skippe",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMerger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMerger.html
https://root.cern/doc/master/classROOT_1_1TBufferMerger.html:5354,Performance,race condition,race condition,5354,"_LATER() [3/5]. ROOT::TBufferMerger::_R__DEPRECATED_LATER ; (; ""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"" ; ); const. inline . Definition at line 71 of file TBufferMerger.hxx. ◆ _R__DEPRECATED_LATER() [4/5]. ROOT::TBufferMerger::_R__DEPRECATED_LATER ; (; ""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"" ; ). inline . Definition at line 83 of file TBufferMerger.hxx. ◆ _R__DEPRECATED_LATER() [5/5]. ROOT::TBufferMerger::_R__DEPRECATED_LATER ; (; ""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"" ; ). ◆ GetFile(). std::shared_ptr< TBufferMergerFile > ROOT::TBufferMerger::GetFile ; (; ). Returns a TBufferMergerFile to which data can be written. ; At the end, all TBufferMergerFiles get merged into the output file. The user is responsible to ""cd"" into the file to associate objects such as histograms or trees to it.; After the creation of this file, the user must reset the kMustCleanup bit on any objects attached to it and take care of their deletion, as there is a possibility that a race condition will happen that causes a crash if ROOT manages these objects. ; Definition at line 56 of file TBufferMerger.cxx. ◆ GetMergeOptions(). const char * ROOT::TBufferMerger::GetMergeOptions ; (; ). Returns the current merge options. ; Definition at line 65 of file TBufferMerger.cxx. ◆ GetNotrees(). Bool_t ROOT::TBufferMerger::GetNotrees ; (; ); const. inline . Returns whether the file has been marked as not containing any TTree objects and thus that steps that are specific to TTree can be skipped. ; Definition at line 102 of file TBufferMerger.hxx. ◆ Init(). void ROOT::TBufferMerger::Init ; (; std::unique_ptr< TFile > ; output). private . Definition at line 36 of file TBufferMerger.cxx. ◆ Merge(). void ROOT::TBufferMerger::Merge ; (; ROOT::TBufferMergerFile * ; memfile). private . Definition at line 76 of file TBufferMerger.cxx. ◆ operator=(). TBufferMerger & ROOT::TBufferMerger::operator= ; (; const TBufferMerger & ; ). private ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMerger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMerger.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:2789,Availability,alive,alive,2789,"eCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. ;  ;  TMemFile (const char *name, std::unique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the content of the TMemFile into another TMemFile. ;  ;  ~TMemFile () override;  Close and clean-up file. ;  ; virtual void CopyTo (TBuffer &tobuf) const;  Copy the binary representation of the TMemFile into the TBuffer tobuf. ;  ; virtual Long64_t CopyTo (void *to, Long64_t maxsize) const;  Copy the binary representation of the TMemFile into the memory area starting at 'to' and of length at most 'maxsize' returns the number of bytes actually copied. ;  ; Long64_t GetSize () const override;  Return the current size of the memory file. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; void ResetErrno () const override;  Simply calls TSystem::ResetErrno(). ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Close (Option_t *option="""") override;  Close a file. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; virtual TKey * CreateKey (TDirectory *mother, const TObject *obj, const char *name, Int_t bufsize);  Creates key for object and conver",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:7945,Availability,recover,recover,7945,"ption_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtua",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:21158,Availability,error,error,21158," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer)",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:21247,Availability,error,error,21247,"ave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:21402,Availability,error,error,21402,"hether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:21699,Availability,error,error,21699,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ; ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:25192,Availability,error,error,25192," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMemFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults:",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:34248,Availability,alive,alive,34248,"enced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TMemFile; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMemFile; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFile (EMode mode) const;  ; bool NeedsToWrite (EMode mode) const;  ; TMemFile & operator= (const TMemFile &)=delete;  ; EMode ParseOption (Option_t *option);  Parse option strings and set fOption. ;  ; void ResetObjects (TDirectoryFile *, TFileMergeInfo *) const;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; Int_t SysClose (Int_t fd) override;  Close the mem file. ;  ; Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence) override;  Seek to a specified position in the file. ;  ; Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime) override;  Perform a stat on the file; see TFile::SysStat(). ;  ; Int_t SysSync (Int_t fd) override;  Sync remaining data to disk. ;  ; Int_t SysWrite (Int_t fd, const void *buf, Int_t len) override;  Write a buffer into the file. ;  ; Int_t SysWriteImpl (Int_t fd, const void *buf, Long64_",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:21164,Integrability,message,message,21164," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer)",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:21705,Integrability,message,message,21705,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ; ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:22453,Integrability,message,message,22453,"ct with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be o",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:25198,Integrability,message,message,25198," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMemFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults:",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:25571,Integrability,message,message,25571," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMemFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFi",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:27977,Integrability,protocol,protocol,27977,"const char * GetCacheFileDir ();  Get the directory where to locally stage/cache remote files. ;  ; static const TUrl * GetEndpointUrl (const char *name);  Get final URL for file being opened asynchronously. ;  ; static Long64_t GetFileBytesRead ();  Static function returning the total number of bytes read from all files. ;  ; static Long64_t GetFileBytesWritten ();  Static function returning the total number of bytes written to all files. ;  ; static Long64_t GetFileCounter ();  ; static Int_t GetFileReadCalls ();  Static function returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:1024,Modifiability,inherit,inherited,1024,"st of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::TBufferMergerFile Class ReferenceInput/Output Library. ; A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. ; The TBufferMerger merges all data into the output file on disk. ; Definition at line 143 of file TBufferMerger.hxx. Public Member Functions;  ~TBufferMergerFile () override;  Destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsize=0) override;  Write data into a TBufferFile and append it to TBufferMerger. ;  ;  Public Member Functions inherited from TMemFile;  TMemFile (const char *name, char *buffer, Long64_t size, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. See the TFile constructor for details. Copy data from buffer. ;  ;  TMemFile (const char *name, const ZeroCopyView_t &datarange);  Constructor to create a TMemFile re-using external C-Style storage. ;  ;  TMemFile (const char *name, ExternalDataPtr_t data);  Constructor to create a TMemFile re-using external storage. ;  ;  TMemFile (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. ;  ;  TMemFile (const char *name, std::unique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the content of the TMemFile into another TMemFile. ;  ;  ~TMemFile () override;  Close and clean-up file. ;  ; virtual void CopyTo (TBuff",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:3033,Modifiability,inherit,inherited,3033," TMemFile into another TMemFile. ;  ;  ~TMemFile () override;  Close and clean-up file. ;  ; virtual void CopyTo (TBuffer &tobuf) const;  Copy the binary representation of the TMemFile into the TBuffer tobuf. ;  ; virtual Long64_t CopyTo (void *to, Long64_t maxsize) const;  Copy the binary representation of the TMemFile into the memory area starting at 'to' and of length at most 'maxsize' returns the number of bytes actually copied. ;  ; Long64_t GetSize () const override;  Return the current size of the memory file. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; void ResetErrno () const override;  Simply calls TSystem::ResetErrno(). ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Close (Option_t *option="""") override;  Close a file. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; virtual TKey * CreateKey (TDirectory *mother, const TObject *obj, const char *name, Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; virtual TKey * CreateKey (TDirectory *mother, const void *obj, const TClass *cl, const char *name, Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; void Delete (const char *namecycle="""") override;  Delete object namecycle. ;  ; void Draw (O",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:10387,Modifiability,inherit,inherited,10387,"amerNVirtual_b);  ; void SumBuffer (Int_t bufsize);  Increment statistics for buffer sizes of objects in this file. ;  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) const override;  One can not save a const TDirectory object. ;  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) override;  Write memory objects to this file. ;  ; virtual Bool_t WriteBuffer (const char *buf, Int_t len);  Write a buffer to the file. ;  ; virtual void WriteFree ();  Write FREE linked list on the file. ;  ; virtual void WriteHeader ();  Write File Header. ;  ; virtual UShort_t WriteProcessID (TProcessID *pid);  Check if the ProcessID pidd is already in the file, if not, add it and return the index number in the local file list. ;  ; virtual void WriteStreamerInfo ();  Write the list of TStreamerInfo as a single object in this file The class Streamer description for all classes written to this file is saved. ;  ;  Public Member Functions inherited from TDirectoryFile;  TDirectoryFile ();  Default TDirectoryFile constructor. ;  ;  TDirectoryFile (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new TDirectoryFile. ;  ;  ~TDirectoryFile () override;  Destructor. ;  ; void Add (TObject *obj, Bool_t replace=kFALSE) override;  ; void Append (TObject *obj, Bool_t replace=kFALSE) override;  Append object to this directory. ;  ; Int_t AppendKey (TKey *key) override;  Insert key in the linked list of keys of this directory. ;  ; void Browse (TBrowser *b) override;  Browse the content of the directory. ;  ; void Build (TFile *motherFile=nullptr, TDirectory *motherDir=nullptr) override;  ; Bool_t cd () override;  Change current directory to ""this"" directory. ;  ; Bool_t cd (const char *path) override;  Change current directory the directory described by the path if given one. ;  ; TObject * CloneObject (const TObject *obj, Bool_t autoadd=kTRUE) override;  Make a clone of an object using the Streamer facilit",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:16022,Modifiability,inherit,inherited,16022,"d in the dictionary of the parent class and store the corresponding exec number into fBits. ;  ; void SetWritable (Bool_t writable=kTRUE) override;  Set the new value of fWritable recursively. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteDirHeader () override;  Overwrite the Directory header record. ;  ; void WriteKeys () override;  Write Keys linked list on the file. ;  ; Int_t WriteObjectAny (const void *obj, const char *classname, const char *name, Option_t *option="""", Int_t bufsize=0) override;  Write object from pointer of class classname in this directory. ;  ; Int_t WriteObjectAny (const void *obj, const TClass *cl, const char *name, Option_t *option="""", Int_t bufsize=0) override;  Write object of class with dictionary cl in this directory. ;  ; Int_t WriteTObject (const TObject *obj, const char *name=nullptr, Option_t *option="""", Int_t bufsize=0) override;  Write object obj to this directory. ;  ;  Public Member Functions inherited from TDirectory;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; void Clear (Option_t *option="""") override;  Delete all objects from a Directory list. ;  ; virtual void DeleteAll (Option_t *option="""");  Delete all objects from memory. ;  ; TObject * FindObject (const char *name) const override;  Find object by name in the list of memory objects. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object in the list of memory objects. ;  ; template<class T > ; T * Get (const char *namecycle);  See documentation of TDirectoryFile::Get(const char *namecycle) ;  ; virtual TList * GetList () const;  ; TObject * GetMother () const;  ; TDirectory * GetMotherDir () const;  ; template<class T > ; void GetObject (const char *namecycle, T *&ptr);  Get an object with proper type checking. ;  ; virtual const char * G",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:18456,Modifiability,inherit,inherited,18456,"ecursively remove object from a Directory. ;  ; virtual TObject * Remove (TObject *);  Remove an object from the in-memory list. ;  ; virtual void SetMother (TObject *mother);  ; void SetName (const char *newname) override;  Set the name for directory If the directory name is changed after the directory was written once, ROOT currently would NOT change the name of correspondent key in the mother directory. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; template<typename T > ; std::enable_if_t<!std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ; template<typename T > ; std::enable_if_t< std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:19956,Modifiability,inherit,inherited,19956," *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:20794,Modifiability,inherit,inheritance,20794,"amer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics sys",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:22551,Modifiability,inherit,inherits,22551,"Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op).",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:22668,Modifiability,inherit,inherits,22668,"nst char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:25804,Modifiability,inherit,inherited,25804,"n="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMemFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;  ; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *handle);  Get status of the async open request related to 'handle'. ;  ; static const",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:26016,Modifiability,inherit,inherited,26016,"n="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMemFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;  ; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *handle);  Get status of the async open request related to 'handle'. ;  ; static const",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:29249,Modifiability,inherit,inherited,29249,"l_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:29467,Modifiability,inherit,inherited,29467,"l_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:30300,Modifiability,inherit,inherited,30300,"AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TBufferMergerFile ();  TBufferMergerFile has no default constructor. ;  ;  TBufferMergerFile (const TBufferMergerFile &);  TBufferMergerFile has no copy constructor. ;  ;  TBufferMergerFile (TBufferMerger &m);  Constructor. ;  ; TBufferMergerFile & operator= (const TBufferMergerFile &);  TBufferMergerFile has no copy operator. ;  . Private Attributes; TBufferMerger & fMerger;  . Friends; class TBufferMerger;  . Additional Inherited Members;  Public Types inherited from TMemFile; ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:30510,Modifiability,inherit,inherited,30510,"AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TBufferMergerFile ();  TBufferMergerFile has no default constructor. ;  ;  TBufferMergerFile (const TBufferMergerFile &);  TBufferMergerFile has no copy constructor. ;  ;  TBufferMergerFile (TBufferMerger &m);  Constructor. ;  ; TBufferMergerFile & operator= (const TBufferMergerFile &);  TBufferMergerFile has no copy operator. ;  . Private Attributes; TBufferMerger & fMerger;  . Friends; class TBufferMerger;  . Additional Inherited Members;  Public Types inherited from TMemFile; ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:31482,Modifiability,inherit,inherited,31482,"ersion_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TBufferMergerFile ();  TBufferMergerFile has no default constructor. ;  ;  TBufferMergerFile (const TBufferMergerFile &);  TBufferMergerFile has no copy constructor. ;  ;  TBufferMergerFile (TBufferMerger &m);  Constructor. ;  ; TBufferMergerFile & operator= (const TBufferMergerFile &);  TBufferMergerFile has no copy operator. ;  . Private Attributes; TBufferMerger & fMerger;  . Friends; class TBufferMerger;  . Additional Inherited Members;  Public Types inherited from TMemFile; using ExternalDataPtr_t = std::shared_ptr< const std::vector< char > >;  ;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:31596,Modifiability,inherit,inherited,31596,"ersion_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TBufferMergerFile ();  TBufferMergerFile has no default constructor. ;  ;  TBufferMergerFile (const TBufferMergerFile &);  TBufferMergerFile has no copy constructor. ;  ;  TBufferMergerFile (TBufferMerger &m);  Constructor. ;  ; TBufferMergerFile & operator= (const TBufferMergerFile &);  TBufferMergerFile has no copy operator. ;  . Private Attributes; TBufferMerger & fMerger;  . Friends; class TBufferMerger;  . Additional Inherited Members;  Public Types inherited from TMemFile; using ExternalDataPtr_t = std::shared_ptr< const std::vector< char > >;  ;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:32620,Modifiability,inherit,inherited,32620,"AOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TMemFile; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:32726,Modifiability,inherit,inherited,32726,"AOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TMemFile; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:33367,Modifiability,inherit,inherited,33367,"( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TMemFile; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMemFile; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFile (EMode mode) const;  ; bool NeedsToWrite (EMode mode) const;  ; TMemFile & operator= (const TMemFile &)=delete;  ; EMode ParseOption (Option_t *option);  Parse option strings and set fOption. ;  ; void ResetObjects (TDirectoryFile *, TFileMergeInfo *) const;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; Int_t SysClose (Int_t fd) override;  Close the mem file. ;  ; Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read spec",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:33477,Modifiability,inherit,inherited,33477,"( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TMemFile; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMemFile; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFile (EMode mode) const;  ; bool NeedsToWrite (EMode mode) const;  ; TMemFile & operator= (const TMemFile &)=delete;  ; EMode ParseOption (Option_t *option);  Parse option strings and set fOption. ;  ; void ResetObjects (TDirectoryFile *, TFileMergeInfo *) const;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; Int_t SysClose (Int_t fd) override;  Close the mem file. ;  ; Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read spec",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:33668,Modifiability,inherit,inherited,33668,"kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TMemFile; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMemFile; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFile (EMode mode) const;  ; bool NeedsToWrite (EMode mode) const;  ; TMemFile & operator= (const TMemFile &)=delete;  ; EMode ParseOption (Option_t *option);  Parse option strings and set fOption. ;  ; void ResetObjects (TDirectoryFile *, TFileMergeInfo *) const;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; Int_t SysClose (Int_t fd) override;  Close the mem file. ;  ; Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence) override;  Seek to a specified position in the file. ;  ; Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Lon",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:33767,Modifiability,inherit,inherited,33767,"kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TMemFile; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMemFile; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFile (EMode mode) const;  ; bool NeedsToWrite (EMode mode) const;  ; TMemFile & operator= (const TMemFile &)=delete;  ; EMode ParseOption (Option_t *option);  Parse option strings and set fOption. ;  ; void ResetObjects (TDirectoryFile *, TFileMergeInfo *) const;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; Int_t SysClose (Int_t fd) override;  Close the mem file. ;  ; Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence) override;  Seek to a specified position in the file. ;  ; Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Lon",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:35251,Modifiability,inherit,inherited,35251,"s, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence) override;  Seek to a specified position in the file. ;  ; Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime) override;  Perform a stat on the file; see TFile::SysStat(). ;  ; Int_t SysSync (Int_t fd) override;  Sync remaining data to disk. ;  ; Int_t SysWrite (Int_t fd, const void *buf, Int_t len) override;  Write a buffer into the file. ;  ; Int_t SysWriteImpl (Int_t fd, const void *buf, Long64_t len);  Write a buffer into the file. ;  ;  Protected Member Functions inherited from TFile; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise direc",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:36253,Modifiability,inherit,inherited,36253,"ry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr); ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:36643,Modifiability,inherit,inherited,36643,"l void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ; ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:37532,Modifiability,inherit,inherited,37532,"ted data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TDirectory; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  ;  Protected Attributes inherited from TMemFile; TMemBlock fBlockList;  Collection of memory blocks of size fgDefaultBlockSize. ;  ; Long64_t fBlockOffset {0};  Seek offset within the block. ;  ; TMemBlock * fBlockSeek {nullptr};  Pointer to the block we seeked to. ;  ; Long64_t fDefaultBlockSize = fgDefaultBlockSize;  ; ExternalDataPtr_t fExternalData;  shared file data / content ;  ; Bool_t fIsOwnedByROOT {kFALSE};  if this is a C-style memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunk",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:37750,Modifiability,inherit,inherited,37750,"ctory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TDirectory; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  ;  Protected Attributes inherited from TMemFile; TMemBlock fBlockList;  Collection of memory blocks of size fgDefaultBlockSize. ;  ; Long64_t fBlockOffset {0};  Seek offset within the block. ;  ; TMemBlock * fBlockSeek {nullptr};  Pointer to the block we seeked to. ;  ; Long64_t fDefaultBlockSize = fgDefaultBlockSize;  ; ExternalDataPtr_t fExternalData;  shared file data / content ;  ; Bool_t fIsOwnedByROOT {kFALSE};  if this is a C-style memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:38088,Modifiability,inherit,inherited,38088," TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TDirectory; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  ;  Protected Attributes inherited from TMemFile; TMemBlock fBlockList;  Collection of memory blocks of size fgDefaultBlockSize. ;  ; Long64_t fBlockOffset {0};  Seek offset within the block. ;  ; TMemBlock * fBlockSeek {nullptr};  Pointer to the block we seeked to. ;  ; Long64_t fDefaultBlockSize = fgDefaultBlockSize;  ; ExternalDataPtr_t fExternalData;  shared file data / content ;  ; Bool_t fIsOwnedByROOT {kFALSE};  if this is a C-style memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes rea",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:38674,Modifiability,inherit,inherited,38674,tic SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  ;  Protected Attributes inherited from TMemFile; TMemBlock fBlockList;  Collection of memory blocks of size fgDefaultBlockSize. ;  ; Long64_t fBlockOffset {0};  Seek offset within the block. ;  ; TMemBlock * fBlockSeek {nullptr};  Pointer to the block we seeked to. ;  ; Long64_t fDefaultBlockSize = fgDefaultBlockSize;  ; ExternalDataPtr_t fExternalData;  shared file data / content ;  ; Bool_t fIsOwnedByROOT {kFALSE};  if this is a C-style memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any) ;  ; TArrayC * fClassIndex {nullptr};  !Index of TStreamerInfo classes written to this file ;  ; Int_t fCompress {0};  Compression level and algorithm. ;  ; Int_t fD {-1};  File descriptor. ;  ; Long64_t fEND {0};  Last used byte in file. ;  ; TList * fFree {nullptr};  Free segments linked list table. ;  ; b,MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:41712,Modifiability,inherit,inherited,41712,;  !Seek offset cache ;  ; TList * fOpenPhases {nullptr};  !Time info about open phases ;  ; TString fOption;  File options. ;  ; TObjArray * fProcessIDs {nullptr};  !Array of pointers to TProcessIDs ;  ; Int_t fReadCalls {0};  Number of read calls ( not counting the cache calls ) ;  ; TString fRealName;  Effective real file name (not original url) ;  ; Long64_t fSeekFree {0};  Location on disk of free segments structure. ;  ; Long64_t fSeekInfo {0};  Location on disk of StreamerInfo record. ;  ; Double_t fSum2Buffer {0};  Sum of squares of buffer sizes of objects written so far. ;  ; Double_t fSumBuffer {0};  Sum of buffer sizes of objects written so far. ;  ; Char_t fUnits {0};  Number of bytes for file pointers. ;  ; TUrl fUrl;  !URL of file ;  ; Int_t fVersion {0};  File format version. ;  ; std::mutex fWriteMutex;  !Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to create new TKeys. ;  ; TDatime fDatimeC;  Date and time when directory is created. ;  ; TDatime fDatimeM;  Date and time of last modification. ;  ; TFile * fFile {nullptr};  Pointer to current file in memory. ;  ; TList * fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vect,MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:42548,Modifiability,inherit,inherited,42548,Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to create new TKeys. ;  ; TDatime fDatimeC;  Date and time when directory is created. ;  ; TDatime fDatimeM;  Date and time of last modification. ;  ; TFile * fFile {nullptr};  Pointer to current file in memory. ;  ; TList * fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from TMemFile; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCac,MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:43004,Modifiability,inherit,inherited,43004,"of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from TMemFile; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 2560",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:43093,Modifiability,inherit,inherited,43093,"of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from TMemFile; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 2560",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:43214,Modifiability,inherit,inherited,43214,"of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from TMemFile; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 2560",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:44543,Modifiability,inherit,inherited,44543,"bjects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . #include <ROOT/TBufferMerger.hxx>. Inheritance diagram for ROOT::TBufferMergerFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBufferMergerFile() [1/3]. ROOT::TBufferMergerFile::TBufferMergerFile ; (; TBufferMerger & ; m). private . Constructor. ; Can only be called by TBufferMerger. Parameters. mMerger this file is attached to. . Definition at line 18 of file TBufferMergerFile.cxx. ◆ TBufferMergerFile() [2/3]. ROOT::TBufferMergerFile::TBufferMergerFile ; (; ). private . TBufferMergerFile has no default constructor. . ◆ TBufferMergerFile() [3/3]. ROOT::TBufferMergerFile::TBufferMergerFile ; (; const TBufferMergerFile & ; ). private . TBufferMergerFile has no copy constructor. . ◆ ~TBufferMergerFile(). ROOT::T",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:474,Performance,queue,queue,474,". ROOT: ROOT::TBufferMergerFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::TBufferMergerFile Class ReferenceInput/Output Library. ; A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. ; The TBufferMerger merges all data into the output file on disk. ; Definition at line 143 of file TBufferMerger.hxx. Public Member Functions;  ~TBufferMergerFile () override;  Destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsize=0) override;  Write data into a TBufferFile and append it to TBufferMerger. ;  ;  Public Member Functions inherited from TMemFile;  TMemFile (const char *name, char *buffer, Long64_t size, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. See the TFile constructor for details. Copy data from buffer. ;  ;  TMemFile (const char *name, const ZeroCopyView_t &datarange);  Constructor to create a TMemFile re-using external C-Style storage. ;  ;  TMemFile (const char *name, ExternalDataPtr_t data);  Constructor to create a TMemFile re-using external storage. ;  ;  TMemFile (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. ;  ;  TMemFile (const char *name, std::unique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the c",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:4902,Performance,cache,cache,4902,"Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; void Delete (const char *namecycle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; virtual void DrawMap (const char *keys=""*"", Option_t *option="""");  Draw map of objects in this file. ;  ; void FillBuffer (char *&buffer) override;  Encode file output buffer. ;  ; virtual void Flush ();  Synchronize a file's in-memory and on-disk states. ;  ; TArchiveFile * GetArchive () const;  ; Long64_t GetArchiveOffset () const;  ; Int_t GetBestBuffer () const;  Return the best buffer size of objects on this file. ;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; virtual Int_t GetBytesToPrefetch () const;  Max number of bytes to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbyt",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:4995,Performance,cache,cache,4995,"cle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; virtual void DrawMap (const char *keys=""*"", Option_t *option="""");  Draw map of objects in this file. ;  ; void FillBuffer (char *&buffer) override;  Encode file output buffer. ;  ; virtual void Flush ();  Synchronize a file's in-memory and on-disk states. ;  ; TArchiveFile * GetArchive () const;  ; Long64_t GetArchiveOffset () const;  ; Int_t GetBestBuffer () const;  Return the best buffer size of objects on this file. ;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; virtual Int_t GetBytesToPrefetch () const;  Max number of bytes to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Lo",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:6124,Performance,cache,cached,6124,"ssionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first, Long64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, const char *classes=""*"", Option_t *option=""new"");  Generate source code necessary to access the objects stored in the file. ;  ; virtual void Map ();  ; virtual void Map (Option_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRU",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:8260,Performance,cache,cache,8260,"ad a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ; ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:8351,Performance,cache,cache,8351,"ad a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ; ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:8408,Performance,cache,cache,8408," file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ;  ; Int_t Sizeof () const override;  Return the size in bytes of the file header. ;  ; void StreamerNVirtual (TBuffer &Cl",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:8444,Performance,cache,cache,8444," file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ;  ; Int_t Sizeof () const override;  Return the size in bytes of the file header. ;  ; void StreamerNVirtual (TBuffer &Cl",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:13250,Performance,perform,performed,13250,"ject with name. ;  ; template<class T > ; T * Get (const char *namecycle);  See documentation of TDirectoryFile::Get(const char *namecycle) ;  ; TObject * Get (const char *namecycle) override;  Return pointer to object identified by namecycle. ;  ; Int_t GetBufferSize () const override;  Return the buffer size to create new TKeys. ;  ; const TDatime & GetCreationDate () const;  ; TDirectory * GetDirectory (const char *apath, Bool_t printError=false, const char *funcname=""GetDirectory"") override;  Find a directory named ""apath"". ;  ; TFile * GetFile () const override;  ; TKey * GetKey (const char *name, Short_t cycle=9999) const override;  Return pointer to key with name,cycle. ;  ; TList * GetListOfKeys () const override;  ; const TDatime & GetModificationDate () const;  ; Int_t GetNbytesKeys () const override;  ; Int_t GetNkeys () const override;  ; void * GetObjectChecked (const char *namecycle, const char *classname) override;  See documentation of TDirectoryFile::GetObjectCheck(const char *namecycle, const TClass *cl) ;  ; void * GetObjectChecked (const char *namecycle, const TClass *cl) override;  Return pointer to object identified by namecycle if and only if the actual object is a type suitable to be stored as a pointer to a ""expectedClass"" If expectedClass is null, no check is performed. ;  ; void * GetObjectUnchecked (const char *namecycle) override;  Return pointer to object identified by namecycle. ;  ; Long64_t GetSeekDir () const override;  ; Long64_t GetSeekKeys () const override;  ; Long64_t GetSeekParent () const override;  ; Bool_t IsModified () const override;  ; Bool_t IsWritable () const override;  ; TDirectory * mkdir (const char *name, const char *title="""", Bool_t returnExistingDirectory=kFALSE) override;  Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."". ;  ; TFile * OpenFile (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t neto",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:26994,Performance,cache,cache,26994,"ar * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;  ; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *handle);  Get status of the async open request related to 'handle'. ;  ; static const char * GetCacheFileDir ();  Get the directory where to locally stage/cache remote files. ;  ; static const TUrl * GetEndpointUrl (const char *name);  Get final URL for file being opened asynchronously. ;  ; static Long64_t GetFileBytesRead ();  Static function returning the total number of bytes read from all files. ;  ; static Long64_t GetFileBytesWritten ();  Static function returning the total number of bytes written to all files. ;  ; static Long64_t GetFileCounter ();  ; static Int_t GetFileReadCalls ();  Static function returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:28409,Performance,cache,cacheDir,28409,"nction returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public M",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:28527,Performance,cache,cache,28527,"nction returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public M",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:29185,Performance,cache,cache,29185,"=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecy",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:35505,Performance,cache,cache,35505,"s, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence) override;  Seek to a specified position in the file. ;  ; Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime) override;  Perform a stat on the file; see TFile::SysStat(). ;  ; Int_t SysSync (Int_t fd) override;  Sync remaining data to disk. ;  ; Int_t SysWrite (Int_t fd, const void *buf, Int_t len) override;  Write a buffer into the file. ;  ; Int_t SysWriteImpl (Int_t fd, const void *buf, Long64_t len);  Write a buffer into the file. ;  ;  Protected Member Functions inherited from TFile; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise direc",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:36127,Performance,cache,cache,36127,"e a buffer into the file. ;  ; Int_t SysWriteImpl (Int_t fd, const void *buf, Long64_t len);  Write a buffer into the file. ;  ;  Protected Member Functions inherited from TFile; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for direct",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:36213,Performance,cache,cache,36213,"64_t len);  Write a buffer into the file. ;  ;  Protected Member Functions inherited from TFile; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TCo",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:39379,Performance,cache,cache,39379,"memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any) ;  ; TArrayC * fClassIndex {nullptr};  !Index of TStreamerInfo classes written to this file ;  ; Int_t fCompress {0};  Compression level and algorithm. ;  ; Int_t fD {-1};  File descriptor. ;  ; Long64_t fEND {0};  Last used byte in file. ;  ; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:39453,Performance,cache,cache,39453,"memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any) ;  ; TArrayC * fClassIndex {nullptr};  !Index of TStreamerInfo classes written to this file ;  ; Int_t fCompress {0};  Compression level and algorithm. ;  ; Int_t fD {-1};  File descriptor. ;  ; Long64_t fEND {0};  Last used byte in file. ;  ; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:39537,Performance,cache,cache,39537,"memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any) ;  ; TArrayC * fClassIndex {nullptr};  !Index of TStreamerInfo classes written to this file ;  ; Int_t fCompress {0};  Compression level and algorithm. ;  ; Int_t fD {-1};  File descriptor. ;  ; Long64_t fEND {0};  Last used byte in file. ;  ; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:40761,Performance,cache,cache,40761,"; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes for StreamerInfo record. ;  ; Bool_t fNoAnchorInName {kFALSE};  !True if we don't want to force the anchor to be appended to the file name ;  ; Int_t fNProcessIDs {0};  Number of TProcessID written to this file. ;  ; Long64_t fOffset {0};  !Seek offset cache ;  ; TList * fOpenPhases {nullptr};  !Time info about open phases ;  ; TString fOption;  File options. ;  ; TObjArray * fProcessIDs {nullptr};  !Array of pointers to TProcessIDs ;  ; Int_t fReadCalls {0};  Number of read calls ( not counting the cache calls ) ;  ; TString fRealName;  Effective real file name (not original url) ;  ; Long64_t fSeekFree {0};  Location on disk of free segments structure. ;  ; Long64_t fSeekInfo {0};  Location on disk of StreamerInfo record. ;  ; Double_t fSum2Buffer {0};  Sum of squares of buffer sizes of objects written so far. ;  ; Double_t fSumBuffer {0};  Sum of buffer sizes of objects written so far. ;  ; Char_t fUnits {0};  Number of bytes for file pointers. ;  ; TUrl fUrl;  !URL of file ;  ; Int_t fVersion {0};  File format version. ;  ; std::mutex fWriteMutex;  !Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to crea",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:41013,Performance,cache,cache,41013,"; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes for StreamerInfo record. ;  ; Bool_t fNoAnchorInName {kFALSE};  !True if we don't want to force the anchor to be appended to the file name ;  ; Int_t fNProcessIDs {0};  Number of TProcessID written to this file. ;  ; Long64_t fOffset {0};  !Seek offset cache ;  ; TList * fOpenPhases {nullptr};  !Time info about open phases ;  ; TString fOption;  File options. ;  ; TObjArray * fProcessIDs {nullptr};  !Array of pointers to TProcessIDs ;  ; Int_t fReadCalls {0};  Number of read calls ( not counting the cache calls ) ;  ; TString fRealName;  Effective real file name (not original url) ;  ; Long64_t fSeekFree {0};  Location on disk of free segments structure. ;  ; Long64_t fSeekInfo {0};  Location on disk of StreamerInfo record. ;  ; Double_t fSum2Buffer {0};  Sum of squares of buffer sizes of objects written so far. ;  ; Double_t fSumBuffer {0};  Sum of buffer sizes of objects written so far. ;  ; Char_t fUnits {0};  Number of bytes for file pointers. ;  ; TUrl fUrl;  !URL of file ;  ; Int_t fVersion {0};  File format version. ;  ; std::mutex fWriteMutex;  !Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to create new TKeys. ;  ; TDatime fDatimeC;  Date and time when directory is created. ;  ; TDatime fDatimeM;  Date and time of last modification. ;  ; TFile * fFile {nullptr};  Pointer to current file in memory. ;  ; TList * fKeys {n",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:43648,Performance,cache,cache,43648,"ath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from TMemFile; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:43678,Performance,cache,cached,43678,"ath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from TMemFile; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:7945,Safety,recover,recover,7945,"ption_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtua",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:27630,Safety,timeout,timeout,27630,"; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *handle);  Get status of the async open request related to 'handle'. ;  ; static const char * GetCacheFileDir ();  Get the directory where to locally stage/cache remote files. ;  ; static const TUrl * GetEndpointUrl (const char *name);  Get final URL for file being opened asynchronously. ;  ; static Long64_t GetFileBytesRead ();  Static function returning the total number of bytes read from all files. ;  ; static Long64_t GetFileBytesWritten ();  Static function returning the total number of bytes written to all files. ;  ; static Long64_t GetFileCounter ();  ; static Int_t GetFileReadCalls ();  Static function returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static v",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:28827,Safety,timeout,timeout,28827,"e opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; s",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:28848,Safety,timeout,timeout,28848,"e opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; s",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:28887,Safety,timeout,timeout,28887," Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:32137,Safety,timeout,timeout,32137,"ferMergerFile (const TBufferMergerFile &);  TBufferMergerFile has no copy constructor. ;  ;  TBufferMergerFile (TBufferMerger &m);  Constructor. ;  ; TBufferMergerFile & operator= (const TBufferMergerFile &);  TBufferMergerFile has no copy operator. ;  . Private Attributes; TBufferMerger & fMerger;  . Friends; class TBufferMerger;  . Additional Inherited Members;  Public Types inherited from TMemFile; using ExternalDataPtr_t = std::shared_ptr< const std::vector< char > >;  ;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ; ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:6854,Security,access,access,6854,"f, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first, Long64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, const char *classes=""*"", Option_t *option=""new"");  Generate source code necessary to access the objects stored in the file. ;  ; virtual void Map ();  ; virtual void Map (Option_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:8059,Security,access,access,8059," (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeT",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:19243,Security,hash,hash,19243," std::enable_if_t< std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you ",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:44471,Security,hash,hashes,44471,"bjects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . #include <ROOT/TBufferMerger.hxx>. Inheritance diagram for ROOT::TBufferMergerFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBufferMergerFile() [1/3]. ROOT::TBufferMergerFile::TBufferMergerFile ; (; TBufferMerger & ; m). private . Constructor. ; Can only be called by TBufferMerger. Parameters. mMerger this file is attached to. . Definition at line 18 of file TBufferMergerFile.cxx. ◆ TBufferMergerFile() [2/3]. ROOT::TBufferMergerFile::TBufferMergerFile ; (; ). private . TBufferMergerFile has no default constructor. . ◆ TBufferMergerFile() [3/3]. ROOT::TBufferMergerFile::TBufferMergerFile ; (; const TBufferMergerFile & ; ). private . TBufferMergerFile has no copy constructor. . ◆ ~TBufferMergerFile(). ROOT::T",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:5895,Testability,log,logical,5895,"es to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first",MatchSource.WIKI,doc/master/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:974,Availability,avail,available,974,". ROOT: ROOT::TExecutorCRTP< SubC > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Private Member Functions |; List of all members ; ROOT::TExecutorCRTP< SubC > Class Template Reference. ; template<class SubC>; class ROOT::TExecutorCRTP< SubC >This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. . ROOT::TExecutorCRTP<SubC>::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. The Map function forwards the call to MapImpl, to be implemented by the child classes.; For either signature, func is executed as many times as needed by a pool of n workers, where n typically defaults to the number of available cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes never delete what they return, they simply forget it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. The ordering of the elements corresponds to the ordering of the arguments. R",MatchSource.WIKI,doc/master/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:395,Integrability,interface,interface,395,". ROOT: ROOT::TExecutorCRTP< SubC > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Private Member Functions |; List of all members ; ROOT::TExecutorCRTP< SubC > Class Template Reference. ; template<class SubC>; class ROOT::TExecutorCRTP< SubC >This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. . ROOT::TExecutorCRTP<SubC>::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. The Map function forwards the call to MapImpl, to be implemented by the child classes.; For either signature, func is executed as many times as needed by a pool of n workers, where n typically defaults to the number of available cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes never delete what they return, they simply forget it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. The ordering of the elements corresponds to the ordering of the arguments. R",MatchSource.WIKI,doc/master/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:1756,Integrability,wrap,wrapped,1756," the collection of arguments args. The Map function forwards the call to MapImpl, to be implemented by the child classes.; For either signature, func is executed as many times as needed by a pool of n workers, where n typically defaults to the number of available cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes never delete what they return, they simply forget it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. The ordering of the elements corresponds to the ordering of the arguments. ROOT::TExecutorCRTP<SubC>::Reduce; These set of methods combine all elements from a std::vector into a single value. Parameters. redfunca callable object, such as a lambda expression, an std::function, a functor object or a function that takes an std::vector and combines all its elements into a single result. [args]a standard vector. ROOT::TExecutorCRTP<SubC>::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. This function should be independent of the size of the vector returned by Map due to optimization of the number of ch",MatchSource.WIKI,doc/master/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:3815,Integrability,interface,interface,3815,"auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ; Create 10 histograms and merge them into one; root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3699; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; t",MatchSource.WIKI,doc/master/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:4209,Integrability,interface,interface,4209,"cutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3699; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER >",MatchSource.WIKI,doc/master/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:13670,Integrability,wrap,wrapping,13670,"11 of file TExecutorCRTP.hxx. ◆ Map() [4/5]. template<class SubC > . template<class F , class T , class Cond > . auto ROOT::TExecutorCRTP< SubC >::Map ; (; F ; func, . std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. Execute a function over the elements of a vector. ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. . ReturnsA vector with the results of the function calls. ; Definition at line 226 of file TExecutorCRTP.hxx. ◆ Map() [5/5]. template<class SubC > . template<class F , class Cond > . auto ROOT::TExecutorCRTP< SubC >::Map ; (; F ; func, . unsigned ; nTimes . ); -> std::vector<InvokeResult_t<F>>. Execute a function without arguments several times. ; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. Functions that take arguments can be executed (with fixed arguments) by wrapping them in a lambda or with std::bind. ; Definition at line 185 of file TExecutorCRTP.hxx. ◆ MapImpl() [1/4]. template<class SubC > . template<class F , class T , class Cond = validMapReturnCond<F, T>> . auto ROOT::TExecutorCRTP< SubC >::MapImpl ; (; F ; func, . const std::vector< T > & ; args . ); -> std::vector< InvokeResult_t< F, T > >=delete. privatedelete . Implementation of the Map method, left to the derived classes. . ◆ MapImpl() [2/4]. template<class SubC > . template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> . auto ROOT::TExecutorCRTP< SubC >::MapImpl ; (; F ; func, . ROOT::TSeq< INTEGER > ; args . ); -> std::vector< InvokeResult_t< F, INTEGER > >=delete. privatedelete . Implementation of the Map method, left to the derived classes. . ◆ MapImpl() [3/4]. template<class SubC > . template<class F , class T , class Cond = validMapReturnCond<F, T>> . auto ROOT::TExecutorCRTP< SubC >::MapImpl ; (; F ; func, . std::vector< T > & ; arg",MatchSource.WIKI,doc/master/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:6064,Modifiability,inherit,inheriting,6064,"e vector. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto Map (F func, std::initializer_list< T > args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an initializer_list. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto Map (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; template<class F , class T , class R , class Cond = validMapReturnCond<F, T>> ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class INTEGER , class R , class Cond = validMapReturnCond<F, INTEGER>> ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class T , class R , class Cond = validMapReturnCond<F, T>> ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate ",MatchSource.WIKI,doc/master/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:7233,Modifiability,inherit,inheriting,7233,", class R , class Cond = validMapReturnCond<F, T>> ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class INTEGER , class R , class Cond = validMapReturnCond<F, INTEGER>> ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class T , class R , class Cond = validMapReturnCond<F, T>> ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; T * MapReduce (F func, std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ;  ; template<class F , class T , class R , class Cond = validMapReturnCond<F, T>> ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class R , class Cond = validMapReturnCond<F>> ; auto MapReduce (F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >;  Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce). ;  ; TExecutorCRTP & operator= (const TExecutorCRTP &)=delete;  ; template<class T > ; T * Reduce (const std::vector< T * > &mergeObjs);  ""Reduce"" an std::vector into a single object by using the object's Merge method. ;  ; template<class T , class R > ; auto Reduce (const std::vector< T > &objs, R redfunc) -> decltype(redfun",MatchSource.WIKI,doc/master/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:15326,Modifiability,inherit,inheriting,15326,"F, INTEGER > >=delete. privatedelete . Implementation of the Map method, left to the derived classes. . ◆ MapImpl() [3/4]. template<class SubC > . template<class F , class T , class Cond = validMapReturnCond<F, T>> . auto ROOT::TExecutorCRTP< SubC >::MapImpl ; (; F ; func, . std::vector< T > & ; args . ); -> std::vector< InvokeResult_t< F, T > >=delete. privatedelete . Implementation of the Map method, left to the derived classes. . ◆ MapImpl() [4/4]. template<class SubC > . template<class F , class Cond = validMapReturnCond<F>> . auto ROOT::TExecutorCRTP< SubC >::MapImpl ; (; F ; func, . unsigned ; nTimes . ); -> std::vector< InvokeResult_t< F > >=delete. privatedelete . Implementation of the Map method, left to the derived classes. . ◆ MapReduce() [1/7]. template<class SubC > . template<class F , class T , class Cond > . T * ROOT::TExecutorCRTP< SubC >::MapReduce ; (; F ; func, . const std::vector< T * > & ; args . ). Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsImmutable vector of elements passed as an argument to func. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 336 of file TExecutorCRTP.hxx. ◆ MapReduce() [2/7]. template<class SubC > . template<class F , class T , class R , class Cond > . auto ROOT::TExecutorCRTP< SubC >::MapReduce ; (; F ; func, . const std::vector< T > & ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsImmutable vector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func. Must return th",MatchSource.WIKI,doc/master/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:18319,Modifiability,inherit,inheriting,18319,"class SubC > . template<class F , class T , class R , class Cond > . auto ROOT::TExecutorCRTP< SubC >::MapReduce ; (; F ; func, . std::initializer_list< T > ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ; Parameters. funcFunction to be executed on the elements of the initializer_list passed as second parameter. ; argsinitializer_list for a vector to apply func on. ; redfuncReduction function to combine the results of the calls to func. Must return the same type as func. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 283 of file TExecutorCRTP.hxx. ◆ MapReduce() [5/7]. template<class SubC > . template<class F , class T , class Cond > . T * ROOT::TExecutorCRTP< SubC >::MapReduce ; (; F ; func, . std::vector< T * > & ; args . ). Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 324 of file TExecutorCRTP.hxx. ◆ MapReduce() [6/7]. template<class SubC > . template<class F , class T , class R , class Cond > . auto ROOT::TExecutorCRTP< SubC >::MapReduce ; (; F ; func, . std::vector< T > & ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func. Must return the same type as func. . ReturnsA value resu",MatchSource.WIKI,doc/master/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:2689,Performance,optimiz,optimization,2689,"ed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. The ordering of the elements corresponds to the ordering of the arguments. ROOT::TExecutorCRTP<SubC>::Reduce; These set of methods combine all elements from a std::vector into a single value. Parameters. redfunca callable object, such as a lambda expression, an std::function, a functor object or a function that takes an std::vector and combines all its elements into a single result. [args]a standard vector. ROOT::TExecutorCRTP<SubC>::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. This function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; Examples:; Generate 1 ten times and sum those tens; root[] ROOT::TProcessExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ; Create 10 histograms and merge them into one; root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std",MatchSource.WIKI,doc/master/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:1265,Usability,simpl,simply,1265,"|; List of all members ; ROOT::TExecutorCRTP< SubC > Class Template Reference. ; template<class SubC>; class ROOT::TExecutorCRTP< SubC >This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. . ROOT::TExecutorCRTP<SubC>::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. The Map function forwards the call to MapImpl, to be implemented by the child classes.; For either signature, func is executed as many times as needed by a pool of n workers, where n typically defaults to the number of available cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes never delete what they return, they simply forget it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. The ordering of the elements corresponds to the ordering of the arguments. ROOT::TExecutorCRTP<SubC>::Reduce; These set of methods combine all elements from a std::vector into a single value. Parameters. redfunca callable object, such as a lambda expression, an std::function, a functor object or a function that",MatchSource.WIKI,doc/master/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:3808,Usability,simpl,simple,3808,"auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ; Create 10 histograms and merge them into one; root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3699; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; t",MatchSource.WIKI,doc/master/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:4202,Usability,simpl,simple,4202,"cutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3699; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER >",MatchSource.WIKI,doc/master/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:5118,Availability,error,error,5118," Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at line 172 of file TIOFeatures.cxx. ◆ Set() [2/4]. bool TIOFeatures::Set ; (; EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatur",MatchSource.WIKI,doc/master/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html
https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:3413,Integrability,message,message,3413,iven feature is set. ;  ; bool Test (Experimental::EIOUnsupportedFeatures bits) const;  . Static Public Attributes; static constexpr int kIOFeatureCount = 1;  . Private Member Functions;  TIOFeatures (UChar_t IOBits);  ; UChar_t GetFeatures () const;  ; void Set (UChar_t newBits);  . Private Attributes; UChar_t fIOBits {0};  . Friends; class ::TBasket;  ; class ::TBranch;  ; class ::TTree;  . #include <ROOT/TIOFeatures.hxx>; Constructor & Destructor Documentation. ◆ TIOFeatures() [1/2]. ROOT::TIOFeatures::TIOFeatures ; (; ). inline . Definition at line 75 of file TIOFeatures.hxx. ◆ TIOFeatures() [2/2]. ROOT::TIOFeatures::TIOFeatures ; (; UChar_t ; IOBits). inlineprivate . Definition at line 96 of file TIOFeatures.hxx. Member Function Documentation. ◆ Clear() [1/3]. void TIOFeatures::Clear ; (; EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 80 of file TIOFeatures.cxx. ◆ Clear() [2/3]. void TIOFeatures::Clear ; (; Experimental::EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 58 of file TIOFeatures.cxx. ◆ Clear() [3/3]. void TIOFeatures::Clear ; (; Experimental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). ,MatchSource.WIKI,doc/master/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html
https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:3783,Integrability,message,message,3783,"nch;  ; class ::TTree;  . #include <ROOT/TIOFeatures.hxx>; Constructor & Destructor Documentation. ◆ TIOFeatures() [1/2]. ROOT::TIOFeatures::TIOFeatures ; (; ). inline . Definition at line 75 of file TIOFeatures.hxx. ◆ TIOFeatures() [2/2]. ROOT::TIOFeatures::TIOFeatures ; (; UChar_t ; IOBits). inlineprivate . Definition at line 96 of file TIOFeatures.hxx. Member Function Documentation. ◆ Clear() [1/3]. void TIOFeatures::Clear ; (; EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 80 of file TIOFeatures.cxx. ◆ Clear() [2/3]. void TIOFeatures::Clear ; (; Experimental::EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 58 of file TIOFeatures.cxx. ◆ Clear() [3/3]. void TIOFeatures::Clear ; (; Experimental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valu",MatchSource.WIKI,doc/master/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html
https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:4164,Integrability,message,message,4164,"tation. ◆ Clear() [1/3]. void TIOFeatures::Clear ; (; EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 80 of file TIOFeatures.cxx. ◆ Clear() [2/3]. void TIOFeatures::Clear ; (; Experimental::EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 58 of file TIOFeatures.cxx. ◆ Clear() [3/3]. void TIOFeatures::Clear ; (; Experimental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at",MatchSource.WIKI,doc/master/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html
https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:5042,Integrability,interface,interfaces,5042,"m this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at line 172 of file TIOFeatures.cxx. ◆ Set() [2/4]. bool TIOFeatures::Set ; (; EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition ",MatchSource.WIKI,doc/master/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html
https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:5124,Integrability,message,message,5124," Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at line 172 of file TIOFeatures.cxx. ◆ Set() [2/4]. bool TIOFeatures::Set ; (; EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatur",MatchSource.WIKI,doc/master/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html
https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:5414,Integrability,message,message,5414,"d TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at line 172 of file TIOFeatures.cxx. ◆ Set() [2/4]. bool TIOFeatures::Set ; (; EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatures::Set ; (; UChar_t ; newBits). inlineprivate . Definition at line 98 of file TIOFeatures.hxx. ◆ Test() [1/3]. bool TIOFeatures::Test ; (; EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this",MatchSource.WIKI,doc/master/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html
https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:5854,Integrability,message,message,5854,"string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at line 172 of file TIOFeatures.cxx. ◆ Set() [2/4]. bool TIOFeatures::Set ; (; EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatures::Set ; (; UChar_t ; newBits). inlineprivate . Definition at line 98 of file TIOFeatures.hxx. ◆ Test() [1/3]. bool TIOFeatures::Test ; (; EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 239 of file TIOFeatures.cxx. ◆ Test() [2/3]. bool TIOFeatures::Test ; (; Experimental::EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 228 of file TIOFeatures.cxx. ◆ Test() [3",MatchSource.WIKI,doc/master/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html
https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:4981,Safety,safe,safe,4981,"imental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at line 172 of file TIOFeatures.cxx. ◆ Set() [2/4]. bool TIOFeatures::Set ; (; EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported ",MatchSource.WIKI,doc/master/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html
https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:460,Security,access,access,460,". ROOT: ROOT::TIOFeatures Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::TIOFeatures Class ReferenceTree Library. ; TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. ; This class allows access to experimental and non-default features.; When one of these features are activated, forward compatibility breaks may occur. That is, older versions of ROOT may not be able to read files written by this version of ROOT that have enabled these non-default features.; To utilize TIOFeatures, create the object, set the desired feature flags, then attach it to a TTree. All subsequently created branches (and their baskets) will be serialized using those particular features.; Example usage: ROOT::TIOFeatures features;; features.Set(ROOT::Experimental::EIOFeatures::kGenerateOffsetMap);; ttree_ref.SetIOFeatures(features);; ROOT::TIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TT...Definition TIOFeatures.hxx:69; ROOT::TIOFeatures::Setbool Set(EIOFeatures bits)Set a specific IO feature.Definition TIOFeatures.cxx:139; ROOT::Experimental::EIOFeatures::kGenerateOffsetMap@ kGenerateOffsetMap; The method TTree::SetIOFeatures creates a copy of the feature set; subsequent changes to the TIOFeatures object do not propagate to the TTree. ; Definition at line 69 of file TIOFeatures.hxx. Public Member Functions;  TIOFeatures ();  ; void Clear (EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOUnsupportedFeatures bits);  Clear a specific IO feature from this set. ;  ; void Print () const;  Print a human-readable representation of th",MatchSource.WIKI,doc/master/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html
https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:4802,Testability,test,test,4802,"if the IO feature is not supported by this version of ROOT. ; Definition at line 58 of file TIOFeatures.cxx. ◆ Clear() [3/3]. void TIOFeatures::Clear ; (; Experimental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at line 172 of file TIOFeatures.cxx. ◆ Set() [2/4]. bool TIOFeatures::Set ; (; EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to ena",MatchSource.WIKI,doc/master/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html
https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:6367,Testability,test,test,6367,"nable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatures::Set ; (; UChar_t ; newBits). inlineprivate . Definition at line 98 of file TIOFeatures.hxx. ◆ Test() [1/3]. bool TIOFeatures::Test ; (; EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 239 of file TIOFeatures.cxx. ◆ Test() [2/3]. bool TIOFeatures::Test ; (; Experimental::EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 228 of file TIOFeatures.cxx. ◆ Test() [3/3]. bool ROOT::TIOFeatures::Test ; (; Experimental::EIOUnsupportedFeatures ; bits); const. Friends And Related Symbol Documentation. ◆ ::TBasket. friend class ::TBasket. friend . Definition at line 72 of file TIOFeatures.hxx. ◆ ::TBranch. friend class ::TBranch. friend . Definition at line 71 of file TIOFeatures.hxx. ◆ ::TTree. friend class ::TTree. friend . Definition at line 70 of file TIOFeatures.hxx. Member Data Documentation. ◆ fIOBits. UChar_t ROOT::TIOFeatures::fIOBits {0}. priv",MatchSource.WIKI,doc/master/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html
https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:6699,Testability,test,test,6699,":EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatures::Set ; (; UChar_t ; newBits). inlineprivate . Definition at line 98 of file TIOFeatures.hxx. ◆ Test() [1/3]. bool TIOFeatures::Test ; (; EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 239 of file TIOFeatures.cxx. ◆ Test() [2/3]. bool TIOFeatures::Test ; (; Experimental::EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 228 of file TIOFeatures.cxx. ◆ Test() [3/3]. bool ROOT::TIOFeatures::Test ; (; Experimental::EIOUnsupportedFeatures ; bits); const. Friends And Related Symbol Documentation. ◆ ::TBasket. friend class ::TBasket. friend . Definition at line 72 of file TIOFeatures.hxx. ◆ ::TBranch. friend class ::TBranch. friend . Definition at line 71 of file TIOFeatures.hxx. ◆ ::TTree. friend class ::TTree. friend . Definition at line 70 of file TIOFeatures.hxx. Member Data Documentation. ◆ fIOBits. UChar_t ROOT::TIOFeatures::fIOBits {0}. private . Definition at line 100 of file TIOFeatures.hxx. ◆ kIOFeatureCount. constexpr int ROOT::TIOFeatures::kIOFeatureCount = 1. staticconstexpr . Definition at line 89 of file TIOFeatures.hxx. Libraries for ROOT::TIOFeatures:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/ROOT/TIO",MatchSource.WIKI,doc/master/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html
https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html:883,Integrability,rout,routine,883,". ROOT: ROOT::TMetaUtils::TClingLookupHelper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TMetaUtils::TClingLookupHelper Class Reference. . Definition at line 160 of file TClingUtils.h. Public Types; typedef bool(* AutoParse_t) (const char *name);  ; typedef bool(* ExistingTypeCheck_t) (const std::string &tname, std::string &result);  . Public Member Functions;  TClingLookupHelper (cling::Interpreter &interpreter, TNormalizedCtxt &normCtxt, ExistingTypeCheck_t existingTypeCheck, AutoParse_t autoParse, bool *shuttingDownPtr, const int *pgDebug=nullptr);  ; virtual ~TClingLookupHelper ();  ; bool ExistingTypeCheck (const std::string &tname, std::string &result) override;  Helper routine to ry hard to avoid looking up in the Cling database as this could enduce an unwanted autoparsing. ;  ; void GetPartiallyDesugaredName (std::string &nameLong) override;  ; bool GetPartiallyDesugaredNameWithScopeHandling (const std::string &tname, std::string &result, bool dropstd=true) override;  We assume that we have a simple type: [const] typename[*&][const]. ;  ; bool IsAlreadyPartiallyDesugaredName (const std::string &nondef, const std::string &nameLong) override;  ; bool IsDeclaredScope (const std::string &base, bool &isInlined) override;  ; void ShuttingDownSignal () override;  ;  Public Member Functions inherited from TClassEdit::TInterpreterLookupHelper;  TInterpreterLookupHelper ();  ; virtual ~TInterpreterLookupHelper ();  . Private Member Functions; bool WantDiags () const;  . Private Attributes; AutoParse_t fAutoParse;  ; ExistingTypeCheck_t fExistingTypeCheck;  ; cling::Interpreter * fInterpreter;  ; bool * fInterpreterIsShuttingDownPtr;  ; TNormalizedCtxt * fNormalizedCtxt;  ; const int * fPDebug;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/m",MatchSource.WIKI,doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html
https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html:3315,Integrability,rout,routine,3315,"TClingUtils.h. ◆ ExistingTypeCheck_t. typedef bool(* ROOT::TMetaUtils::TClingLookupHelper::ExistingTypeCheck_t) (const std::string &tname, std::string &result). Definition at line 162 of file TClingUtils.h. Constructor & Destructor Documentation. ◆ TClingLookupHelper(). ROOT::TMetaUtils::TClingLookupHelper::TClingLookupHelper ; (; cling::Interpreter & ; interpreter, . TNormalizedCtxt & ; normCtxt, . ExistingTypeCheck_t ; existingTypeCheck, . AutoParse_t ; autoParse, . bool * ; shuttingDownPtr, . const int * ; pgDebug = nullptr . ). Definition at line 523 of file TClingUtils.cxx. ◆ ~TClingLookupHelper(). virtual ROOT::TMetaUtils::TClingLookupHelper::~TClingLookupHelper ; (; ). inlinevirtual . Definition at line 180 of file TClingUtils.h. Member Function Documentation. ◆ ExistingTypeCheck(). bool ROOT::TMetaUtils::TClingLookupHelper::ExistingTypeCheck ; (; const std::string & ; tname, . std::string & ; result . ). overridevirtual . Helper routine to ry hard to avoid looking up in the Cling database as this could enduce an unwanted autoparsing. ; Implements TClassEdit::TInterpreterLookupHelper.; Definition at line 541 of file TClingUtils.cxx. ◆ GetPartiallyDesugaredName(). void ROOT::TMetaUtils::TClingLookupHelper::GetPartiallyDesugaredName ; (; std::string & ; nameLong). overridevirtual . Implements TClassEdit::TInterpreterLookupHelper.; Definition at line 552 of file TClingUtils.cxx. ◆ GetPartiallyDesugaredNameWithScopeHandling(). bool ROOT::TMetaUtils::TClingLookupHelper::GetPartiallyDesugaredNameWithScopeHandling ; (; const std::string & ; tname, . std::string & ; result, . bool ; dropstd = true . ). overridevirtual . We assume that we have a simple type: [const] typename[*&][const]. ; Implements TClassEdit::TInterpreterLookupHelper.; Definition at line 603 of file TClingUtils.cxx. ◆ IsAlreadyPartiallyDesugaredName(). bool ROOT::TMetaUtils::TClingLookupHelper::IsAlreadyPartiallyDesugaredName ; (; const std::string & ; nondef, . const std::string & ; nameLong . ). o",MatchSource.WIKI,doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html
https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html:1510,Modifiability,inherit,inherited,1510," ; typedef bool(* ExistingTypeCheck_t) (const std::string &tname, std::string &result);  . Public Member Functions;  TClingLookupHelper (cling::Interpreter &interpreter, TNormalizedCtxt &normCtxt, ExistingTypeCheck_t existingTypeCheck, AutoParse_t autoParse, bool *shuttingDownPtr, const int *pgDebug=nullptr);  ; virtual ~TClingLookupHelper ();  ; bool ExistingTypeCheck (const std::string &tname, std::string &result) override;  Helper routine to ry hard to avoid looking up in the Cling database as this could enduce an unwanted autoparsing. ;  ; void GetPartiallyDesugaredName (std::string &nameLong) override;  ; bool GetPartiallyDesugaredNameWithScopeHandling (const std::string &tname, std::string &result, bool dropstd=true) override;  We assume that we have a simple type: [const] typename[*&][const]. ;  ; bool IsAlreadyPartiallyDesugaredName (const std::string &nondef, const std::string &nameLong) override;  ; bool IsDeclaredScope (const std::string &base, bool &isInlined) override;  ; void ShuttingDownSignal () override;  ;  Public Member Functions inherited from TClassEdit::TInterpreterLookupHelper;  TInterpreterLookupHelper ();  ; virtual ~TInterpreterLookupHelper ();  . Private Member Functions; bool WantDiags () const;  . Private Attributes; AutoParse_t fAutoParse;  ; ExistingTypeCheck_t fExistingTypeCheck;  ; cling::Interpreter * fInterpreter;  ; bool * fInterpreterIsShuttingDownPtr;  ; TNormalizedCtxt * fNormalizedCtxt;  ; const int * fPDebug;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/clingutils/res/TClingUtils.h>. Inheritance diagram for ROOT::TMetaUtils::TClingLookupHelper:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ AutoParse_t. typedef bool(* ROOT::TMetaUtils::TClingLookupHelper::AutoParse_t) (const char *name). Definition at line 163 of file TClingUtils.h. ◆ ExistingTypeCheck_t. typedef bool(* ROOT::TMetaUtils::TClingLooku",MatchSource.WIKI,doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html
https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html:905,Safety,avoid,avoid,905,". ROOT: ROOT::TMetaUtils::TClingLookupHelper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TMetaUtils::TClingLookupHelper Class Reference. . Definition at line 160 of file TClingUtils.h. Public Types; typedef bool(* AutoParse_t) (const char *name);  ; typedef bool(* ExistingTypeCheck_t) (const std::string &tname, std::string &result);  . Public Member Functions;  TClingLookupHelper (cling::Interpreter &interpreter, TNormalizedCtxt &normCtxt, ExistingTypeCheck_t existingTypeCheck, AutoParse_t autoParse, bool *shuttingDownPtr, const int *pgDebug=nullptr);  ; virtual ~TClingLookupHelper ();  ; bool ExistingTypeCheck (const std::string &tname, std::string &result) override;  Helper routine to ry hard to avoid looking up in the Cling database as this could enduce an unwanted autoparsing. ;  ; void GetPartiallyDesugaredName (std::string &nameLong) override;  ; bool GetPartiallyDesugaredNameWithScopeHandling (const std::string &tname, std::string &result, bool dropstd=true) override;  We assume that we have a simple type: [const] typename[*&][const]. ;  ; bool IsAlreadyPartiallyDesugaredName (const std::string &nondef, const std::string &nameLong) override;  ; bool IsDeclaredScope (const std::string &base, bool &isInlined) override;  ; void ShuttingDownSignal () override;  ;  Public Member Functions inherited from TClassEdit::TInterpreterLookupHelper;  TInterpreterLookupHelper ();  ; virtual ~TInterpreterLookupHelper ();  . Private Member Functions; bool WantDiags () const;  . Private Attributes; AutoParse_t fAutoParse;  ; ExistingTypeCheck_t fExistingTypeCheck;  ; cling::Interpreter * fInterpreter;  ; bool * fInterpreterIsShuttingDownPtr;  ; TNormalizedCtxt * fNormalizedCtxt;  ; const int * fPDebug;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/m",MatchSource.WIKI,doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html
https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html:3337,Safety,avoid,avoid,3337,"TClingUtils.h. ◆ ExistingTypeCheck_t. typedef bool(* ROOT::TMetaUtils::TClingLookupHelper::ExistingTypeCheck_t) (const std::string &tname, std::string &result). Definition at line 162 of file TClingUtils.h. Constructor & Destructor Documentation. ◆ TClingLookupHelper(). ROOT::TMetaUtils::TClingLookupHelper::TClingLookupHelper ; (; cling::Interpreter & ; interpreter, . TNormalizedCtxt & ; normCtxt, . ExistingTypeCheck_t ; existingTypeCheck, . AutoParse_t ; autoParse, . bool * ; shuttingDownPtr, . const int * ; pgDebug = nullptr . ). Definition at line 523 of file TClingUtils.cxx. ◆ ~TClingLookupHelper(). virtual ROOT::TMetaUtils::TClingLookupHelper::~TClingLookupHelper ; (; ). inlinevirtual . Definition at line 180 of file TClingUtils.h. Member Function Documentation. ◆ ExistingTypeCheck(). bool ROOT::TMetaUtils::TClingLookupHelper::ExistingTypeCheck ; (; const std::string & ; tname, . std::string & ; result . ). overridevirtual . Helper routine to ry hard to avoid looking up in the Cling database as this could enduce an unwanted autoparsing. ; Implements TClassEdit::TInterpreterLookupHelper.; Definition at line 541 of file TClingUtils.cxx. ◆ GetPartiallyDesugaredName(). void ROOT::TMetaUtils::TClingLookupHelper::GetPartiallyDesugaredName ; (; std::string & ; nameLong). overridevirtual . Implements TClassEdit::TInterpreterLookupHelper.; Definition at line 552 of file TClingUtils.cxx. ◆ GetPartiallyDesugaredNameWithScopeHandling(). bool ROOT::TMetaUtils::TClingLookupHelper::GetPartiallyDesugaredNameWithScopeHandling ; (; const std::string & ; tname, . std::string & ; result, . bool ; dropstd = true . ). overridevirtual . We assume that we have a simple type: [const] typename[*&][const]. ; Implements TClassEdit::TInterpreterLookupHelper.; Definition at line 603 of file TClingUtils.cxx. ◆ IsAlreadyPartiallyDesugaredName(). bool ROOT::TMetaUtils::TClingLookupHelper::IsAlreadyPartiallyDesugaredName ; (; const std::string & ; nondef, . const std::string & ; nameLong . ). o",MatchSource.WIKI,doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html
https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html:1214,Usability,simpl,simple,1214,"hing...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TMetaUtils::TClingLookupHelper Class Reference. . Definition at line 160 of file TClingUtils.h. Public Types; typedef bool(* AutoParse_t) (const char *name);  ; typedef bool(* ExistingTypeCheck_t) (const std::string &tname, std::string &result);  . Public Member Functions;  TClingLookupHelper (cling::Interpreter &interpreter, TNormalizedCtxt &normCtxt, ExistingTypeCheck_t existingTypeCheck, AutoParse_t autoParse, bool *shuttingDownPtr, const int *pgDebug=nullptr);  ; virtual ~TClingLookupHelper ();  ; bool ExistingTypeCheck (const std::string &tname, std::string &result) override;  Helper routine to ry hard to avoid looking up in the Cling database as this could enduce an unwanted autoparsing. ;  ; void GetPartiallyDesugaredName (std::string &nameLong) override;  ; bool GetPartiallyDesugaredNameWithScopeHandling (const std::string &tname, std::string &result, bool dropstd=true) override;  We assume that we have a simple type: [const] typename[*&][const]. ;  ; bool IsAlreadyPartiallyDesugaredName (const std::string &nondef, const std::string &nameLong) override;  ; bool IsDeclaredScope (const std::string &base, bool &isInlined) override;  ; void ShuttingDownSignal () override;  ;  Public Member Functions inherited from TClassEdit::TInterpreterLookupHelper;  TInterpreterLookupHelper ();  ; virtual ~TInterpreterLookupHelper ();  . Private Member Functions; bool WantDiags () const;  . Private Attributes; AutoParse_t fAutoParse;  ; ExistingTypeCheck_t fExistingTypeCheck;  ; cling::Interpreter * fInterpreter;  ; bool * fInterpreterIsShuttingDownPtr;  ; TNormalizedCtxt * fNormalizedCtxt;  ; const int * fPDebug;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/clingutils/res/TClingUtils.h>. Inheritance diagram for ROOT::TMetaUtils::TClingLookupHelper:. This browser is ",MatchSource.WIKI,doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html
https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html:4036,Usability,simpl,simple,4036,"(; ). inlinevirtual . Definition at line 180 of file TClingUtils.h. Member Function Documentation. ◆ ExistingTypeCheck(). bool ROOT::TMetaUtils::TClingLookupHelper::ExistingTypeCheck ; (; const std::string & ; tname, . std::string & ; result . ). overridevirtual . Helper routine to ry hard to avoid looking up in the Cling database as this could enduce an unwanted autoparsing. ; Implements TClassEdit::TInterpreterLookupHelper.; Definition at line 541 of file TClingUtils.cxx. ◆ GetPartiallyDesugaredName(). void ROOT::TMetaUtils::TClingLookupHelper::GetPartiallyDesugaredName ; (; std::string & ; nameLong). overridevirtual . Implements TClassEdit::TInterpreterLookupHelper.; Definition at line 552 of file TClingUtils.cxx. ◆ GetPartiallyDesugaredNameWithScopeHandling(). bool ROOT::TMetaUtils::TClingLookupHelper::GetPartiallyDesugaredNameWithScopeHandling ; (; const std::string & ; tname, . std::string & ; result, . bool ; dropstd = true . ). overridevirtual . We assume that we have a simple type: [const] typename[*&][const]. ; Implements TClassEdit::TInterpreterLookupHelper.; Definition at line 603 of file TClingUtils.cxx. ◆ IsAlreadyPartiallyDesugaredName(). bool ROOT::TMetaUtils::TClingLookupHelper::IsAlreadyPartiallyDesugaredName ; (; const std::string & ; nondef, . const std::string & ; nameLong . ). overridevirtual . Implements TClassEdit::TInterpreterLookupHelper.; Definition at line 568 of file TClingUtils.cxx. ◆ IsDeclaredScope(). bool ROOT::TMetaUtils::TClingLookupHelper::IsDeclaredScope ; (; const std::string & ; base, . bool & ; isInlined . ). overridevirtual . Implements TClassEdit::TInterpreterLookupHelper.; Definition at line 584 of file TClingUtils.cxx. ◆ ShuttingDownSignal(). void ROOT::TMetaUtils::TClingLookupHelper::ShuttingDownSignal ; (; ). overridevirtual . Implements TClassEdit::TInterpreterLookupHelper.; Definition at line 686 of file TClingUtils.cxx. ◆ WantDiags(). bool ROOT::TMetaUtils::TClingLookupHelper::WantDiags ; (; ); const. inlineprivate . D",MatchSource.WIKI,doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html
https://root.cern/doc/master/classROOT_1_1TModuleGenerator.html:1368,Modifiability,variab,variables,1368,"nition at line 36 of file TModuleGenerator.h. Public Types; enum  ESourceFileKind { kSFKNotC; , kSFKHeader; , kSFKSource; , kSFKLinkdef; };  . Public Member Functions;  TModuleGenerator (clang::CompilerInstance *CI, bool inlineHeader, const std::string &shLibFileName, bool isInPCH);  ;  ~TModuleGenerator ();  ; const std::string & GetContentName () const;  ; const std::string & GetDemangledDictionaryName () const;  ; const std::string & GetDictionaryName () const;  ; int GetErrorCount () const;  ; const std::vector< std::string > & GetHeaders () const;  ; const std::vector< std::string > & GetIncludePaths () const;  ; const std::string & GetModuleDirName () const;  ; const std::string & GetModuleFileName () const;  ; const std::string & GetUmbrellaName () const;  ; bool IsPCH () const;  ; void ParseArgs (const std::vector< std::string > &args);  Parse -I -D -U headers.h SomethingLinkdef.h. ;  ; void WriteContentHeader (std::ostream &out) const;  Write a header file describing the content of this module through a series of variables inside the namespace ROOT::Dict::[DictionaryName]. ;  ; std::ostream & WritePPDefines (std::ostream &out) const;  Write #ifndef FOO # define FOO=bar #endif ;  ; std::ostream & WritePPUndefines (std::ostream &out) const;  Write #ifdef FOO # undef FOO #endif ;  ; void WriteRegistrationSource (std::ostream &out, const std::string &fwdDeclnArgsToKeepString, const std::string &headersClassesMapString, const std::string &fwdDeclsString, const std::string &extraIncludes, bool hasCxxModule) const;  ; void WriteUmbrellaHeader (std::ostream &out) const;  Write a header file pulling in the content of this module through a series of #defined, #undefs and #includes. ;  . Private Types; typedef std::vector< std::pair< std::string, std::string > > StringPairVec_t;  . Private Member Functions; void ConvertToCppString (std::string &text) const;  ; bool FindHeader (const std::string &hdrName, std::string &hdrFullPath) const;  Return true if the header is f",MatchSource.WIKI,doc/master/classROOT_1_1TModuleGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TModuleGenerator.html
https://root.cern/doc/master/classROOT_1_1TModuleGenerator.html:2393,Modifiability,variab,variable,2393,") const;  Write a header file describing the content of this module through a series of variables inside the namespace ROOT::Dict::[DictionaryName]. ;  ; std::ostream & WritePPDefines (std::ostream &out) const;  Write #ifndef FOO # define FOO=bar #endif ;  ; std::ostream & WritePPUndefines (std::ostream &out) const;  Write #ifdef FOO # undef FOO #endif ;  ; void WriteRegistrationSource (std::ostream &out, const std::string &fwdDeclnArgsToKeepString, const std::string &headersClassesMapString, const std::string &fwdDeclsString, const std::string &extraIncludes, bool hasCxxModule) const;  ; void WriteUmbrellaHeader (std::ostream &out) const;  Write a header file pulling in the content of this module through a series of #defined, #undefs and #includes. ;  . Private Types; typedef std::vector< std::pair< std::string, std::string > > StringPairVec_t;  . Private Member Functions; void ConvertToCppString (std::string &text) const;  ; bool FindHeader (const std::string &hdrName, std::string &hdrFullPath) const;  Return true if the header is found in the include paths in this case also fill the full path variable with the full path. ;  ; ESourceFileKind GetSourceFileKind (const char *filename) const;  Check whether the file's extension is compatible with C or C++. ;  ; std::ostream & WriteDefinesArray (std::ostream &out) const;  ; std::ostream & WriteHeaderArray (std::ostream &out) const;  ; std::ostream & WriteIncludePathArray (std::ostream &out) const;  ; std::ostream & WritePPCode (std::ostream &out) const;  ; std::ostream & WritePPIncludes (std::ostream &out) const;  Write #include ""header1.h"" #include ""header2.h"" or, if inlining of headers is requested, dump the content of the files. ;  ; void WriteRegistrationSourceImpl (std::ostream &out, const std::string &dictName, const std::string &demangledDictName, const std::vector< std::string > &headerArray, const std::vector< std::string > &includePathArray, const std::string &fwdDeclStringRAW, const std::string &fwdDeclnArgs",MatchSource.WIKI,doc/master/classROOT_1_1TModuleGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TModuleGenerator.html
https://root.cern/doc/master/classROOT_1_1TModuleGenerator.html:5512,Modifiability,variab,variable,5512,"e . Definition at line 144 of file TModuleGenerator.h. Member Enumeration Documentation. ◆ ESourceFileKind. enum ROOT::TModuleGenerator::ESourceFileKind. EnumeratorkSFKNotC ; kSFKHeader ; kSFKSource ; kSFKLinkdef . Definition at line 38 of file TModuleGenerator.h. Constructor & Destructor Documentation. ◆ TModuleGenerator(). TModuleGenerator::TModuleGenerator ; (; clang::CompilerInstance * ; CI, . bool ; inlineHeader, . const std::string & ; shLibFileName, . bool ; isInPCH . ). Definition at line 45 of file TModuleGenerator.cxx. ◆ ~TModuleGenerator(). TModuleGenerator::~TModuleGenerator ; (; ). Definition at line 91 of file TModuleGenerator.cxx. Member Function Documentation. ◆ ConvertToCppString(). void ROOT::TModuleGenerator::ConvertToCppString ; (; std::string & ; text); const. private . ◆ FindHeader(). bool TModuleGenerator::FindHeader ; (; const std::string & ; hdrName, . std::string & ; hdrFullPath . ); const. private . Return true if the header is found in the include paths in this case also fill the full path variable with the full path. ; Definition at line 567 of file TModuleGenerator.cxx. ◆ GetContentName(). const std::string & ROOT::TModuleGenerator::GetContentName ; (; ); const. inline . Definition at line 79 of file TModuleGenerator.h. ◆ GetDemangledDictionaryName(). const std::string & ROOT::TModuleGenerator::GetDemangledDictionaryName ; (; ); const. inline . Definition at line 61 of file TModuleGenerator.h. ◆ GetDictionaryName(). const std::string & ROOT::TModuleGenerator::GetDictionaryName ; (; ); const. inline . Definition at line 57 of file TModuleGenerator.h. ◆ GetErrorCount(). int ROOT::TModuleGenerator::GetErrorCount ; (; ); const. inline . Definition at line 72 of file TModuleGenerator.h. ◆ GetHeaders(). const std::vector< std::string > & ROOT::TModuleGenerator::GetHeaders ; (; ); const. inline . Definition at line 83 of file TModuleGenerator.h. ◆ GetIncludePaths(). const std::vector< std::string > & ROOT::TModuleGenerator::GetIncludePaths ; (",MatchSource.WIKI,doc/master/classROOT_1_1TModuleGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TModuleGenerator.html
https://root.cern/doc/master/classROOT_1_1TModuleGenerator.html:7830,Modifiability,variab,variables,7830,"nition at line 65 of file TModuleGenerator.h. ◆ GetSourceFileKind(). TModuleGenerator::ESourceFileKind TModuleGenerator::GetSourceFileKind ; (; const char * ; filename); const. private . Check whether the file's extension is compatible with C or C++. ; Return whether source, header, Linkdef or nothing. ; Definition at line 102 of file TModuleGenerator.cxx. ◆ GetUmbrellaName(). const std::string & ROOT::TModuleGenerator::GetUmbrellaName ; (; ); const. inline . Definition at line 76 of file TModuleGenerator.h. ◆ IsPCH(). bool ROOT::TModuleGenerator::IsPCH ; (; ); const. inline . Definition at line 52 of file TModuleGenerator.h. ◆ ParseArgs(). void TModuleGenerator::ParseArgs ; (; const std::vector< std::string > & ; args). Parse -I -D -U headers.h SomethingLinkdef.h. ; Definition at line 180 of file TModuleGenerator.cxx. ◆ WriteContentHeader(). void TModuleGenerator::WriteContentHeader ; (; std::ostream & ; out); const. Write a header file describing the content of this module through a series of variables inside the namespace ROOT::Dict::[DictionaryName]. ; Each variable is an array of string literals, with a const char* of 0 being the last element, e.g. ROOT::Dict::_DictName::arrIncludes[] = { ""A.h"", ""B.h"", 0 }; ; Definition at line 543 of file TModuleGenerator.cxx. ◆ WriteDefinesArray(). std::ostream & ROOT::TModuleGenerator::WriteDefinesArray ; (; std::ostream & ; out); const. inlineprivate . Definition at line 133 of file TModuleGenerator.h. ◆ WriteHeaderArray(). std::ostream & ROOT::TModuleGenerator::WriteHeaderArray ; (; std::ostream & ; out); const. inlineprivate . Definition at line 125 of file TModuleGenerator.h. ◆ WriteIncludePathArray(). std::ostream & ROOT::TModuleGenerator::WriteIncludePathArray ; (; std::ostream & ; out); const. inlineprivate . Definition at line 129 of file TModuleGenerator.h. ◆ WritePPCode(). std::ostream & ROOT::TModuleGenerator::WritePPCode ; (; std::ostream & ; out); const. inlineprivate . Definition at line 117 of file TModuleGener",MatchSource.WIKI,doc/master/classROOT_1_1TModuleGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TModuleGenerator.html
https://root.cern/doc/master/classROOT_1_1TModuleGenerator.html:7898,Modifiability,variab,variable,7898,"::GetSourceFileKind ; (; const char * ; filename); const. private . Check whether the file's extension is compatible with C or C++. ; Return whether source, header, Linkdef or nothing. ; Definition at line 102 of file TModuleGenerator.cxx. ◆ GetUmbrellaName(). const std::string & ROOT::TModuleGenerator::GetUmbrellaName ; (; ); const. inline . Definition at line 76 of file TModuleGenerator.h. ◆ IsPCH(). bool ROOT::TModuleGenerator::IsPCH ; (; ); const. inline . Definition at line 52 of file TModuleGenerator.h. ◆ ParseArgs(). void TModuleGenerator::ParseArgs ; (; const std::vector< std::string > & ; args). Parse -I -D -U headers.h SomethingLinkdef.h. ; Definition at line 180 of file TModuleGenerator.cxx. ◆ WriteContentHeader(). void TModuleGenerator::WriteContentHeader ; (; std::ostream & ; out); const. Write a header file describing the content of this module through a series of variables inside the namespace ROOT::Dict::[DictionaryName]. ; Each variable is an array of string literals, with a const char* of 0 being the last element, e.g. ROOT::Dict::_DictName::arrIncludes[] = { ""A.h"", ""B.h"", 0 }; ; Definition at line 543 of file TModuleGenerator.cxx. ◆ WriteDefinesArray(). std::ostream & ROOT::TModuleGenerator::WriteDefinesArray ; (; std::ostream & ; out); const. inlineprivate . Definition at line 133 of file TModuleGenerator.h. ◆ WriteHeaderArray(). std::ostream & ROOT::TModuleGenerator::WriteHeaderArray ; (; std::ostream & ; out); const. inlineprivate . Definition at line 125 of file TModuleGenerator.h. ◆ WriteIncludePathArray(). std::ostream & ROOT::TModuleGenerator::WriteIncludePathArray ; (; std::ostream & ; out); const. inlineprivate . Definition at line 129 of file TModuleGenerator.h. ◆ WritePPCode(). std::ostream & ROOT::TModuleGenerator::WritePPCode ; (; std::ostream & ; out); const. inlineprivate . Definition at line 117 of file TModuleGenerator.h. ◆ WritePPDefines(). std::ostream & TModuleGenerator::WritePPDefines ; (; std::ostream & ; out); const. Write #i",MatchSource.WIKI,doc/master/classROOT_1_1TModuleGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TModuleGenerator.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:11008,Energy Efficiency,monitor,monitor,11008," unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void SetNWorkers (unsigned n);  Set the number of workers that will be spawned by the next call to Fork() ;  . Private Attributes; unsigned fNProcessed;  number of arguments already passed to the workers ;  ; unsigned fNToProcess;  total number of arguments to pass to the workers ;  ; ETask fTaskType = ETask::kNoTask;  the kind of task that is being executed, if any ;  ; friend TExecutorCRTP;  . Additional Inherited Members;  Protected Types inherited from ROOT::TExecutorCRTP< TProcessExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TProcessExecutor.hxx>. Inheritance diagram for ROOT::TProcessExecutor:. This browser is not abl",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:359,Integrability,interface,interface,359,". ROOT: ROOT::TProcessExecutor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda ",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:523,Integrability,interface,interfaces,523,". ROOT: ROOT::TProcessExecutor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda ",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:1981,Integrability,wrap,wrapped,1981,"It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Note: the user should take care of initializing random seeds differently in each process (e.g. using the process id in the seed). Otherwise several parallel executions might generate the same sequence of pseudo-random numbers.; Return value:; An std::vector. The elements in the container will be the objects returned by func.; Examples:; root[] ROOT::TProcessExecutor pool; auto hists = pool.Map(CreateHisto, 10);; root[] ROOT::TProcessExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37. ROOT::",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:2839,Integrability,interface,interface,2839," . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Note: the user should take care of initializing random seeds differently in each process (e.g. using the process id in the seed). Otherwise several parallel executions might generate the same sequence of pseudo-random numbers.; Return value:; An std::vector. The elements in the container will be the objects returned by func.; Examples:; root[] ROOT::TProcessExecutor pool; auto hists = pool.Map(CreateHisto, 10);; root[] ROOT::TProcessExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37. ROOT::TProcessExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object.; Examples:; root[] ROOT::TProcessExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TProcessExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; v@ vDef",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:8197,Integrability,message,messages,8197,"tion over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >;  Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce). ;  ; TExecutorCRTP & operator= (const TExecutorCRTP &)=delete;  ; T * Reduce (const std::vector< T * > &mergeObjs);  ""Reduce"" an std::vector into a single object by using the object's Merge method. ;  ; auto Reduce (const std::vector< T > &objs, R redfunc) -> decltype(redfunc(objs));  ""Reduce"" an std::vector into a single object by passing a function as the second argument defining the reduction operation. ;  . Private Types; enum class  ETask : unsigned char { ;   kNoTask; , kMap; , kMapWithArg; , kMapRed; , ;   kMapRedWithArg. };  A collection of the types of tasks that TProcessExecutor can execute. More...;  . Private Member Functions; template<class T > ; void Collect (std::vector< T > &reslist);  Listen for messages sent by the workers and call the appropriate handler function. ;  ; template<class T > ; void HandlePoolCode (MPCodeBufPair &msg, TSocket *sender, std::vector< T > &reslist);  Handle message and reply to the worker. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto MapImpl (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector in parallel Implementation of the Map method. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto MapImpl (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes in parallel. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto MapImpl (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector in parallel Implementation",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:8389,Integrability,message,message,8389,"eResult_t< F >;  Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce). ;  ; TExecutorCRTP & operator= (const TExecutorCRTP &)=delete;  ; T * Reduce (const std::vector< T * > &mergeObjs);  ""Reduce"" an std::vector into a single object by using the object's Merge method. ;  ; auto Reduce (const std::vector< T > &objs, R redfunc) -> decltype(redfunc(objs));  ""Reduce"" an std::vector into a single object by passing a function as the second argument defining the reduction operation. ;  . Private Types; enum class  ETask : unsigned char { ;   kNoTask; , kMap; , kMapWithArg; , kMapRed; , ;   kMapRedWithArg. };  A collection of the types of tasks that TProcessExecutor can execute. More...;  . Private Member Functions; template<class T > ; void Collect (std::vector< T > &reslist);  Listen for messages sent by the workers and call the appropriate handler function. ;  ; template<class T > ; void HandlePoolCode (MPCodeBufPair &msg, TSocket *sender, std::vector< T > &reslist);  Handle message and reply to the worker. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto MapImpl (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector in parallel Implementation of the Map method. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto MapImpl (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes in parallel. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto MapImpl (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector in parallel Implementation of the Map method. ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto MapImpl (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Ex",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:9906,Integrability,message,message,9906," >;  Execute a function over a sequence of indexes in parallel. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto MapImpl (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector in parallel Implementation of the Map method. ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto MapImpl (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times in parallel. ;  ; void ReplyToFuncResult (TSocket *s);  Reply to a worker who just sent a result. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TProcessExecutor's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  W",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:10058,Integrability,message,message,10058,"l (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector in parallel Implementation of the Map method. ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto MapImpl (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times in parallel. ;  ; void ReplyToFuncResult (TSocket *s);  Reply to a worker who just sent a result. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TProcessExecutor's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void Se",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:10205,Integrability,message,message,10205," ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto MapImpl (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times in parallel. ;  ; void ReplyToFuncResult (TSocket *s);  Reply to a worker who just sent a result. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TProcessExecutor's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void SetNWorkers (unsigned n);  Set the number of workers that will be spawned by the next call to Fork() ;  . Private Attributes; unsigned fNProcessed;  number of arguments alrea",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:10369,Integrability,message,message,10369,"ithout arguments several times in parallel. ;  ; void ReplyToFuncResult (TSocket *s);  Reply to a worker who just sent a result. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TProcessExecutor's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void SetNWorkers (unsigned n);  Set the number of workers that will be spawned by the next call to Fork() ;  . Private Attributes; unsigned fNProcessed;  number of arguments already passed to the workers ;  ; unsigned fNToProcess;  total number of arguments to pass to the workers ;  ; ETask fTaskType = ETask::kNoTask;  the kind of task that",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:10766,Integrability,message,messages,10766,")=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void SetNWorkers (unsigned n);  Set the number of workers that will be spawned by the next call to Fork() ;  . Private Attributes; unsigned fNProcessed;  number of arguments already passed to the workers ;  ; unsigned fNToProcess;  total number of arguments to pass to the workers ;  ; ETask fTaskType = ETask::kNoTask;  the kind of task that is being executed, if any ;  ; friend TExecutorCRTP;  . Additional Inherited Members;  Protected Types inherited from ROOT::TExecutorCRTP< TProcessExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:12308,Integrability,message,messages,12308," ETask fTaskType = ETask::kNoTask;  the kind of task that is being executed, if any ;  ; friend TExecutorCRTP;  . Additional Inherited Members;  Protected Types inherited from ROOT::TExecutorCRTP< TProcessExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TProcessExecutor.hxx>. Inheritance diagram for ROOT::TProcessExecutor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ETask. enum class ROOT::TProcessExecutor::ETask : unsigned char. strongprivate . A collection of the types of tasks that TProcessExecutor can execute. ; It is used to interpret in the right way and properly reply to the messages received (see, for example, TProcessExecutor::HandleInput) . EnumeratorkNoTask no task is being executed . kMap a Map method with no arguments is being executed . kMapWithArg a Map method with arguments is being executed . kMapRed a MapReduce method with no arguments is being executed . kMapRedWithArg a MapReduce method with arguments is being executed . Definition at line 99 of file TProcessExecutor.hxx. Constructor & Destructor Documentation. ◆ TProcessExecutor() [1/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; unsigned ; nWorkers = 0). explicit . Class constructor. ; Parameters. nWorkersNumber of times this ROOT session will be forked, i.e. the number of workers that will be spawned. . Definition at line 90 of file TProcessExecutor.cxx. ◆ ~TProcessExecutor(). ROOT::TProcessExecutor::~TProcessExecutor ; (; ). default . ◆ TProcessExecutor() [2/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; const TProcessExecutor & ; ). delete . Member Function Documentation. ◆ Collect(",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:13426,Integrability,message,messages,13426,"ents is being executed . kMapWithArg a Map method with arguments is being executed . kMapRed a MapReduce method with no arguments is being executed . kMapRedWithArg a MapReduce method with arguments is being executed . Definition at line 99 of file TProcessExecutor.hxx. Constructor & Destructor Documentation. ◆ TProcessExecutor() [1/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; unsigned ; nWorkers = 0). explicit . Class constructor. ; Parameters. nWorkersNumber of times this ROOT session will be forked, i.e. the number of workers that will be spawned. . Definition at line 90 of file TProcessExecutor.cxx. ◆ ~TProcessExecutor(). ROOT::TProcessExecutor::~TProcessExecutor ; (; ). default . ◆ TProcessExecutor() [2/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; const TProcessExecutor & ; ). delete . Member Function Documentation. ◆ Collect(). template<class T > . void ROOT::TProcessExecutor::Collect ; (; std::vector< T > & ; reslist). private . Listen for messages sent by the workers and call the appropriate handler function. ; TProcessExecutor::HandlePoolCode is called on messages with a code < 1000 and TMPClient::HandleMPCode is called on messages with a code >= 1000. ; Definition at line 412 of file TProcessExecutor.hxx. ◆ GetPoolSize(). unsigned ROOT::TProcessExecutor::GetPoolSize ; (; ); const. inline . Return the number of pooled parallel workers. ; ReturnsThe number of workers in the pool. ; Definition at line 72 of file TProcessExecutor.hxx. ◆ HandlePoolCode(). template<class T > . void ROOT::TProcessExecutor::HandlePoolCode ; (; MPCodeBufPair & ; msg, . TSocket * ; sender, . std::vector< T > & ; reslist . ). private . Handle message and reply to the worker. ; Definition at line 383 of file TProcessExecutor.hxx. ◆ MapImpl() [1/4]. template<class F , class T , class Cond > . auto ROOT::TProcessExecutor::MapImpl ; (; F ; func, . const std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of an immut",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:13546,Integrability,message,messages,13546,"h no arguments is being executed . kMapRedWithArg a MapReduce method with arguments is being executed . Definition at line 99 of file TProcessExecutor.hxx. Constructor & Destructor Documentation. ◆ TProcessExecutor() [1/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; unsigned ; nWorkers = 0). explicit . Class constructor. ; Parameters. nWorkersNumber of times this ROOT session will be forked, i.e. the number of workers that will be spawned. . Definition at line 90 of file TProcessExecutor.cxx. ◆ ~TProcessExecutor(). ROOT::TProcessExecutor::~TProcessExecutor ; (; ). default . ◆ TProcessExecutor() [2/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; const TProcessExecutor & ; ). delete . Member Function Documentation. ◆ Collect(). template<class T > . void ROOT::TProcessExecutor::Collect ; (; std::vector< T > & ; reslist). private . Listen for messages sent by the workers and call the appropriate handler function. ; TProcessExecutor::HandlePoolCode is called on messages with a code < 1000 and TMPClient::HandleMPCode is called on messages with a code >= 1000. ; Definition at line 412 of file TProcessExecutor.hxx. ◆ GetPoolSize(). unsigned ROOT::TProcessExecutor::GetPoolSize ; (; ); const. inline . Return the number of pooled parallel workers. ; ReturnsThe number of workers in the pool. ; Definition at line 72 of file TProcessExecutor.hxx. ◆ HandlePoolCode(). template<class T > . void ROOT::TProcessExecutor::HandlePoolCode ; (; MPCodeBufPair & ; msg, . TSocket * ; sender, . std::vector< T > & ; reslist . ). private . Handle message and reply to the worker. ; Definition at line 383 of file TProcessExecutor.hxx. ◆ MapImpl() [1/4]. template<class F , class T , class Cond > . auto ROOT::TProcessExecutor::MapImpl ; (; F ; func, . const std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of an immutable vector in parallel Implementation of the Map method. ; Parameters. funcFunction to be executed on the elements",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:13615,Integrability,message,messages,13615,"h no arguments is being executed . kMapRedWithArg a MapReduce method with arguments is being executed . Definition at line 99 of file TProcessExecutor.hxx. Constructor & Destructor Documentation. ◆ TProcessExecutor() [1/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; unsigned ; nWorkers = 0). explicit . Class constructor. ; Parameters. nWorkersNumber of times this ROOT session will be forked, i.e. the number of workers that will be spawned. . Definition at line 90 of file TProcessExecutor.cxx. ◆ ~TProcessExecutor(). ROOT::TProcessExecutor::~TProcessExecutor ; (; ). default . ◆ TProcessExecutor() [2/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; const TProcessExecutor & ; ). delete . Member Function Documentation. ◆ Collect(). template<class T > . void ROOT::TProcessExecutor::Collect ; (; std::vector< T > & ; reslist). private . Listen for messages sent by the workers and call the appropriate handler function. ; TProcessExecutor::HandlePoolCode is called on messages with a code < 1000 and TMPClient::HandleMPCode is called on messages with a code >= 1000. ; Definition at line 412 of file TProcessExecutor.hxx. ◆ GetPoolSize(). unsigned ROOT::TProcessExecutor::GetPoolSize ; (; ); const. inline . Return the number of pooled parallel workers. ; ReturnsThe number of workers in the pool. ; Definition at line 72 of file TProcessExecutor.hxx. ◆ HandlePoolCode(). template<class T > . void ROOT::TProcessExecutor::HandlePoolCode ; (; MPCodeBufPair & ; msg, . TSocket * ; sender, . std::vector< T > & ; reslist . ). private . Handle message and reply to the worker. ; Definition at line 383 of file TProcessExecutor.hxx. ◆ MapImpl() [1/4]. template<class F , class T , class Cond > . auto ROOT::TProcessExecutor::MapImpl ; (; F ; func, . const std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of an immutable vector in parallel Implementation of the Map method. ; Parameters. funcFunction to be executed on the elements",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:14118,Integrability,message,message,14118,"cutor ; (; ). default . ◆ TProcessExecutor() [2/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; const TProcessExecutor & ; ). delete . Member Function Documentation. ◆ Collect(). template<class T > . void ROOT::TProcessExecutor::Collect ; (; std::vector< T > & ; reslist). private . Listen for messages sent by the workers and call the appropriate handler function. ; TProcessExecutor::HandlePoolCode is called on messages with a code < 1000 and TMPClient::HandleMPCode is called on messages with a code >= 1000. ; Definition at line 412 of file TProcessExecutor.hxx. ◆ GetPoolSize(). unsigned ROOT::TProcessExecutor::GetPoolSize ; (; ); const. inline . Return the number of pooled parallel workers. ; ReturnsThe number of workers in the pool. ; Definition at line 72 of file TProcessExecutor.hxx. ◆ HandlePoolCode(). template<class T > . void ROOT::TProcessExecutor::HandlePoolCode ; (; MPCodeBufPair & ; msg, . TSocket * ; sender, . std::vector< T > & ; reslist . ). private . Handle message and reply to the worker. ; Definition at line 383 of file TProcessExecutor.hxx. ◆ MapImpl() [1/4]. template<class F , class T , class Cond > . auto ROOT::TProcessExecutor::MapImpl ; (; F ; func, . const std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of an immutable vector in parallel Implementation of the Map method. ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. . ReturnsA vector with the results of the function calls. ; Definition at line 205 of file TProcessExecutor.hxx. ◆ MapImpl() [2/4]. template<class F , class INTEGER , class Cond > . auto ROOT::TProcessExecutor::MapImpl ; (; F ; func, . ROOT::TSeq< INTEGER > ; args . ); -> std::vector<InvokeResult_t<F, INTEGER>>. private . Execute a function over a sequence of indexes in parallel. ; Implementation of the Map method.; Parameters. funcFunction to be executed.",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:16426,Integrability,wrap,wrapping,16426," T , class Cond > . auto ROOT::TProcessExecutor::MapImpl ; (; F ; func, . std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of a vector in parallel Implementation of the Map method. ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. . ReturnsA vector with the results of the function calls. ; Definition at line 160 of file TProcessExecutor.hxx. ◆ MapImpl() [4/4]. template<class F , class Cond > . auto ROOT::TProcessExecutor::MapImpl ; (; F ; func, . unsigned ; nTimes . ); -> std::vector<InvokeResult_t<F>>. private . Execute a function without arguments several times in parallel. ; Implementation of the Map method.; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. Functions that take arguments can be executed (with fixed arguments) by wrapping them in a lambda or with std::bind. ; Definition at line 119 of file TProcessExecutor.hxx. ◆ MapReduce() [1/3]. template<class F , class T , class R , class Cond > . auto ROOT::TProcessExecutor::MapReduce ; (; F ; func, . const std::vector< T > & ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function in parallel over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results.; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsImmutable vector, whose elements are passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial ",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:510,Modifiability,inherit,inherits,510,". ROOT: ROOT::TProcessExecutor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda ",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:5175,Modifiability,inherit,inherited,5175,"turnCond<F, T>> ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function in parallel over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class T , class R , class Cond = validMapReturnCond<F, T>> ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function in parallel over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class R , class Cond = validMapReturnCond<F>> ; auto MapReduce (F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >;  Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce). ;  ; TProcessExecutor & operator= (const TProcessExecutor &)=delete;  ; void SetNWorkers (unsigned n);  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TProcessExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; auto Map (F func, std::initializer_list< T > args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an initializer_list. ;  ; auto Map (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapR",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:6140,Modifiability,inherit,inheriting,6140,"ned n);  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TProcessExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; auto Map (F func, std::initializer_list< T > args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an initializer_list. ;  ; auto Map (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; T * MapReduce (F func, std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:6987,Modifiability,inherit,inheriting,6987,"> >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; T * MapReduce (F func, std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >;  Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce). ;  ; TExecutorCRTP & operator= (const TExecutorCRTP &)=delete;  ; T * Reduce (const std::vector< T * > &mergeObjs);  ""Reduce"" an std::vector into a single object by using the object's Merge method. ;  ; auto Reduce (const std::vector< T > &objs, R redfunc) -> decltype(redfunc(objs));  ""Reduce"" an std::vector into a single object by passing a function as the second argument defining the reduction operation. ;  . Private Types; enum class  ETask : unsigned char { ;   kNoTask; , kMap; , kMapWithArg; , kMapR",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:9644,Modifiability,inherit,inherited,9644,"p method. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto MapImpl (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes in parallel. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto MapImpl (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector in parallel Implementation of the Map method. ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto MapImpl (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times in parallel. ;  ; void ReplyToFuncResult (TSocket *s);  Reply to a worker who just sent a result. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TProcessExecutor's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers (",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:11468,Modifiability,inherit,inherited,11468,"l Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void SetNWorkers (unsigned n);  Set the number of workers that will be spawned by the next call to Fork() ;  . Private Attributes; unsigned fNProcessed;  number of arguments already passed to the workers ;  ; unsigned fNToProcess;  total number of arguments to pass to the workers ;  ; ETask fTaskType = ETask::kNoTask;  the kind of task that is being executed, if any ;  ; friend TExecutorCRTP;  . Additional Inherited Members;  Protected Types inherited from ROOT::TExecutorCRTP< TProcessExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TProcessExecutor.hxx>. Inheritance diagram for ROOT::TProcessExecutor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ETask. enum class ROOT::TProcessExecutor::ETask : unsigned char. strongprivate . A collection of the types of tasks that TProcessExecutor can execute. ; It is used to interpret in the right way and properly reply to the messages received (see, for example, TProcessExecutor::HandleInput) . EnumeratorkNoTask no task is being executed . kMap a Map method with no arguments is being executed . kMapWithArg a Map method ",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:17094,Performance,perform,performs,17094,">>. private . Execute a function without arguments several times in parallel. ; Implementation of the Map method.; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. Functions that take arguments can be executed (with fixed arguments) by wrapping them in a lambda or with std::bind. ; Definition at line 119 of file TProcessExecutor.hxx. ◆ MapReduce() [1/3]. template<class F , class T , class R , class Cond > . auto ROOT::TProcessExecutor::MapReduce ; (; F ; func, . const std::vector< T > & ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function in parallel over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results.; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsImmutable vector, whose elements are passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 344 of file TProcessExecutor.hxx. ◆ MapReduce() [2/3]. template<class F , class T , class R , class Cond > . auto ROOT::TProcessExecutor::MapReduce ; (; F ; func, . std::vector< T > & ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function in parallel over the elements of a vector (Map) and accumulate the results into ",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:18339,Performance,perform,performs,18339,"ncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 344 of file TProcessExecutor.hxx. ◆ MapReduce() [2/3]. template<class F , class T , class R , class Cond > . auto ROOT::TProcessExecutor::MapReduce ; (; F ; func, . std::vector< T > & ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function in parallel over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results.; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsVector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 302 of file TProcessExecutor.hxx. ◆ MapReduce() [3/3]. template<class F , class R , class Cond > . auto ROOT::TProcessExecutor::MapReduce ; (; F ; func, . unsigned ; nTimes, . R ; redfunc . ); -> InvokeResult_t<F>. Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce). ; Parameters. funcFunction to be exec",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:352,Usability,simpl,simple,352,". ROOT: ROOT::TProcessExecutor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda ",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:1250,Usability,simpl,simply,1250,"ber Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Note: the user should take care of initializing random seeds differently in each process (e.g. using the process",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:2832,Usability,simpl,simple,2832," . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Note: the user should take care of initializing random seeds differently in each process (e.g. using the process id in the seed). Otherwise several parallel executions might generate the same sequence of pseudo-random numbers.; Return value:; An std::vector. The elements in the container will be the objects returned by func.; Examples:; root[] ROOT::TProcessExecutor pool; auto hists = pool.Map(CreateHisto, 10);; root[] ROOT::TProcessExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37. ROOT::TProcessExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object.; Examples:; root[] ROOT::TProcessExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TProcessExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; v@ vDef",MatchSource.WIKI,doc/master/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html:3617,Availability,error,error,3617,"k< MutexT, RecurseCountsT >::StateDelta = TVirtualRWMutex::StateDelta. Definition at line 300 of file TReentrantRWLock.hxx. Constructor & Destructor Documentation. ◆ TReentrantRWLock(). template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::TReentrantRWLock ; (; ). inline . Regular constructor. ; Definition at line 304 of file TReentrantRWLock.hxx. Member Function Documentation. ◆ Apply(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::Apply ; (; std::unique_ptr< StateDelta > && ; delta). Re-apply a delta. ; Definition at line 358 of file TReentrantRWLock.cxx. ◆ AssertReadCountLocIsFromCurrentThread(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::AssertReadCountLocIsFromCurrentThread ; (; const size_t * ; presumedLocalReadersCount). private . Assert that presumedLocalReadersCount really matches the local read count. ; Print an error message if not. ; Definition at line 394 of file TReentrantRWLock.cxx. ◆ GetStateBefore(). template<typename MutexT , typename RecurseCountsT > . std::unique_ptr< TVirtualRWMutex::State > TReentrantRWLock::GetStateBefore. Get the lock state before the most recent write lock was taken. ; Definition at line 260 of file TReentrantRWLock.cxx. ◆ ReadLock(). template<typename MutexT , typename RecurseCountsT > . TVirtualRWMutex::Hint_t * TReentrantRWLock::ReadLock. Acquire the lock in read mode. ; Definition at line 70 of file TReentrantRWLock.cxx. ◆ ReadUnLock(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::ReadUnLock ; (; TVirtualRWMutex::Hint_t * ; hint). Release the lock in read mode. ; Definition at line 137 of file TReentrantRWLock.cxx. ◆ Rewind(). template<typename MutexT , typename RecurseCountsT > . std::unique_ptr< TVirtualRWMutex::StateDelta > TReentrantRWLock::Rewind ; (; const State & ; earlierState). Rewind to an earlier mutex state, returning ",MatchSource.WIKI,doc/master/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html:3623,Integrability,message,message,3623,"k< MutexT, RecurseCountsT >::StateDelta = TVirtualRWMutex::StateDelta. Definition at line 300 of file TReentrantRWLock.hxx. Constructor & Destructor Documentation. ◆ TReentrantRWLock(). template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::TReentrantRWLock ; (; ). inline . Regular constructor. ; Definition at line 304 of file TReentrantRWLock.hxx. Member Function Documentation. ◆ Apply(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::Apply ; (; std::unique_ptr< StateDelta > && ; delta). Re-apply a delta. ; Definition at line 358 of file TReentrantRWLock.cxx. ◆ AssertReadCountLocIsFromCurrentThread(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::AssertReadCountLocIsFromCurrentThread ; (; const size_t * ; presumedLocalReadersCount). private . Assert that presumedLocalReadersCount really matches the local read count. ; Print an error message if not. ; Definition at line 394 of file TReentrantRWLock.cxx. ◆ GetStateBefore(). template<typename MutexT , typename RecurseCountsT > . std::unique_ptr< TVirtualRWMutex::State > TReentrantRWLock::GetStateBefore. Get the lock state before the most recent write lock was taken. ; Definition at line 260 of file TReentrantRWLock.cxx. ◆ ReadLock(). template<typename MutexT , typename RecurseCountsT > . TVirtualRWMutex::Hint_t * TReentrantRWLock::ReadLock. Acquire the lock in read mode. ; Definition at line 70 of file TReentrantRWLock.cxx. ◆ ReadUnLock(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::ReadUnLock ; (; TVirtualRWMutex::Hint_t * ; hint). Release the lock in read mode. ; Definition at line 137 of file TReentrantRWLock.cxx. ◆ Rewind(). template<typename MutexT , typename RecurseCountsT > . std::unique_ptr< TVirtualRWMutex::StateDelta > TReentrantRWLock::Rewind ; (; const State & ; earlierState). Rewind to an earlier mutex state, returning ",MatchSource.WIKI,doc/master/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html:1679,Modifiability,variab,variable,1679,"pply (std::unique_ptr< StateDelta > &&delta);  Re-apply a delta. ;  ; std::unique_ptr< State > GetStateBefore ();  Get the lock state before the most recent write lock was taken. ;  ; TVirtualRWMutex::Hint_t * ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in read mode. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState);  Rewind to an earlier mutex state, returning the delta. ;  ; TVirtualRWMutex::Hint_t * WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in write mode. ;  . Private Member Functions; void AssertReadCountLocIsFromCurrentThread (const size_t *presumedLocalReadersCount);  Assert that presumedLocalReadersCount really matches the local read count. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; MutexT fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; RecurseCountsT fRecurseCounts;  ! Trackers for re-entry in the lock by the same thread. ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/thread/src/TReentrantRWLock.hxx>; Member Typedef Documentation. ◆ State. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::State = TVirtualRWMutex::State. Definition at line 299 of file TReentrantRWLock.hxx. ◆ StateDelta. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::StateDelta = TVirtualRWMutex::StateDelta. Definition at line 300 of file TReentrantRWLock.hxx. Constructor & Destructor Do",MatchSource.WIKI,doc/master/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html:5387,Modifiability,variab,variable,5387," ◆ Rewind(). template<typename MutexT , typename RecurseCountsT > . std::unique_ptr< TVirtualRWMutex::StateDelta > TReentrantRWLock::Rewind ; (; const State & ; earlierState). Rewind to an earlier mutex state, returning the delta. ; Definition at line 300 of file TReentrantRWLock.cxx. ◆ WriteLock(). template<typename MutexT , typename RecurseCountsT > . TVirtualRWMutex::Hint_t * TReentrantRWLock::WriteLock. Acquire the lock in write mode. ; Definition at line 169 of file TReentrantRWLock.cxx. ◆ WriteUnLock(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::WriteUnLock ; (; TVirtualRWMutex::Hint_t * ; ). Release the lock in write mode. ; Definition at line 217 of file TReentrantRWLock.cxx. Member Data Documentation. ◆ fCond. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::condition_variable_any ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fCond. private . ! RWlock internal condition variable ; Definition at line 287 of file TReentrantRWLock.hxx. ◆ fMutex. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . MutexT ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fMutex. private . ! RWlock internal mutex ; Definition at line 286 of file TReentrantRWLock.hxx. ◆ fReaderReservation. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaderReservation. private . ! A reader wants access ; Definition at line 283 of file TReentrantRWLock.hxx. ◆ fReaders. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaders. private . ! Number of readers ; Definition at line 282 of file TReentrantRWLock.hxx. ◆ fRecurseCounts. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . Recur",MatchSource.WIKI,doc/master/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html:1795,Security,access,access,1795,"pply (std::unique_ptr< StateDelta > &&delta);  Re-apply a delta. ;  ; std::unique_ptr< State > GetStateBefore ();  Get the lock state before the most recent write lock was taken. ;  ; TVirtualRWMutex::Hint_t * ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in read mode. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState);  Rewind to an earlier mutex state, returning the delta. ;  ; TVirtualRWMutex::Hint_t * WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in write mode. ;  . Private Member Functions; void AssertReadCountLocIsFromCurrentThread (const size_t *presumedLocalReadersCount);  Assert that presumedLocalReadersCount really matches the local read count. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; MutexT fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; RecurseCountsT fRecurseCounts;  ! Trackers for re-entry in the lock by the same thread. ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/thread/src/TReentrantRWLock.hxx>; Member Typedef Documentation. ◆ State. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::State = TVirtualRWMutex::State. Definition at line 299 of file TReentrantRWLock.hxx. ◆ StateDelta. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::StateDelta = TVirtualRWMutex::StateDelta. Definition at line 300 of file TReentrantRWLock.hxx. Constructor & Destructor Do",MatchSource.WIKI,doc/master/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html:2068,Security,access,access,2068," read mode. ;  ; void ReadUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in read mode. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState);  Rewind to an earlier mutex state, returning the delta. ;  ; TVirtualRWMutex::Hint_t * WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in write mode. ;  . Private Member Functions; void AssertReadCountLocIsFromCurrentThread (const size_t *presumedLocalReadersCount);  Assert that presumedLocalReadersCount really matches the local read count. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; MutexT fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; RecurseCountsT fRecurseCounts;  ! Trackers for re-entry in the lock by the same thread. ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/thread/src/TReentrantRWLock.hxx>; Member Typedef Documentation. ◆ State. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::State = TVirtualRWMutex::State. Definition at line 299 of file TReentrantRWLock.hxx. ◆ StateDelta. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::StateDelta = TVirtualRWMutex::StateDelta. Definition at line 300 of file TReentrantRWLock.hxx. Constructor & Destructor Documentation. ◆ TReentrantRWLock(). template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::TReentrantRWLock ; (; ). inline . Regular constructor. ; De",MatchSource.WIKI,doc/master/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html:5947,Security,access,access,5947,"T > . void TReentrantRWLock::WriteUnLock ; (; TVirtualRWMutex::Hint_t * ; ). Release the lock in write mode. ; Definition at line 217 of file TReentrantRWLock.cxx. Member Data Documentation. ◆ fCond. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::condition_variable_any ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fCond. private . ! RWlock internal condition variable ; Definition at line 287 of file TReentrantRWLock.hxx. ◆ fMutex. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . MutexT ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fMutex. private . ! RWlock internal mutex ; Definition at line 286 of file TReentrantRWLock.hxx. ◆ fReaderReservation. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaderReservation. private . ! A reader wants access ; Definition at line 283 of file TReentrantRWLock.hxx. ◆ fReaders. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaders. private . ! Number of readers ; Definition at line 282 of file TReentrantRWLock.hxx. ◆ fRecurseCounts. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . RecurseCountsT ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fRecurseCounts. private . ! Trackers for re-entry in the lock by the same thread. ; Definition at line 289 of file TReentrantRWLock.hxx. ◆ fWriter. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<bool> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fWriter. private . ! Is there a writer? ; Definition at line 285 of file TReentrantRWLock.hxx. ◆ fWriterReservation. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Int",MatchSource.WIKI,doc/master/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html:7105,Security,access,access,7105,"nternal condition variable ; Definition at line 287 of file TReentrantRWLock.hxx. ◆ fMutex. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . MutexT ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fMutex. private . ! RWlock internal mutex ; Definition at line 286 of file TReentrantRWLock.hxx. ◆ fReaderReservation. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaderReservation. private . ! A reader wants access ; Definition at line 283 of file TReentrantRWLock.hxx. ◆ fReaders. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaders. private . ! Number of readers ; Definition at line 282 of file TReentrantRWLock.hxx. ◆ fRecurseCounts. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . RecurseCountsT ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fRecurseCounts. private . ! Trackers for re-entry in the lock by the same thread. ; Definition at line 289 of file TReentrantRWLock.hxx. ◆ fWriter. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<bool> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fWriter. private . ! Is there a writer? ; Definition at line 285 of file TReentrantRWLock.hxx. ◆ fWriterReservation. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fWriterReservation. private . ! A writer wants access ; Definition at line 284 of file TReentrantRWLock.hxx. core/thread/src/TReentrantRWLock.hxx; core/thread/src/TReentrantRWLock.cxx. ROOTTReentrantRWLock. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/master/classROOT_1_1TRWMutexImp.html:1455,Modifiability,inherit,inherited,1455,"E) override;  Create mutex and return pointer to it. ;  ; std::unique_ptr< State > GetStateBefore () override;  Get the mutex state before the current lock was taken. ;  ; TClass * IsA () const override;  ; Hint_t * ReadLock () override;  Take the Read Lock of the mutex. ;  ; void ReadUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState) override;  Restore the mutex state to state. ;  ; void Streamer (TBuffer &R__b) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Hint_t * WriteLock () override;  Take the Write Lock of the mutex. ;  ; void WriteUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ;  Public Member Functions inherited from ROOT::TVirtualRWMutex; Int_t CleanUp () override;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from ROOT::TVirtualRWMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; ROOT::TReentrantRWLock< MutexT, RecurseCountsT > fMutexImp;  . #include </h",MatchSource.WIKI,doc/master/classROOT_1_1TRWMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWMutexImp.html
https://root.cern/doc/master/classROOT_1_1TRWMutexImp.html:1773,Modifiability,inherit,inherited,1773,"E) override;  Create mutex and return pointer to it. ;  ; std::unique_ptr< State > GetStateBefore () override;  Get the mutex state before the current lock was taken. ;  ; TClass * IsA () const override;  ; Hint_t * ReadLock () override;  Take the Read Lock of the mutex. ;  ; void ReadUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState) override;  Restore the mutex state to state. ;  ; void Streamer (TBuffer &R__b) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Hint_t * WriteLock () override;  Take the Write Lock of the mutex. ;  ; void WriteUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ;  Public Member Functions inherited from ROOT::TVirtualRWMutex; Int_t CleanUp () override;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from ROOT::TVirtualRWMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; ROOT::TReentrantRWLock< MutexT, RecurseCountsT > fMutexImp;  . #include </h",MatchSource.WIKI,doc/master/classROOT_1_1TRWMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWMutexImp.html
https://root.cern/doc/master/classROOT_1_1TRWMutexImp.html:2194,Modifiability,inherit,inherited,2194,"riteLock () override;  Take the Write Lock of the mutex. ;  ; void WriteUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ;  Public Member Functions inherited from ROOT::TVirtualRWMutex; Int_t CleanUp () override;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from ROOT::TVirtualRWMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; ROOT::TReentrantRWLock< MutexT, RecurseCountsT > fMutexImp;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/thread/src/TRWMutexImp.h>. Inheritance diagram for ROOT::TRWMutexImp< MutexT, RecurseCountsT >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Apply(). template<typename MutexT , typename RecurseCountsT > . void ROOT::TRWMutexImp< MutexT, RecurseCountsT >::Apply ; (; std::unique_ptr< StateDelta > && ; delta). overridevirtual . Apply the mutex state delta. ; In pseudo-code: current_lock_count += delta; ; Implements ROOT::TVirt",MatchSource.WIKI,doc/master/classROOT_1_1TRWMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWMutexImp.html
https://root.cern/doc/master/classROOT_1_1TRWMutexImp.html:2419,Modifiability,inherit,inherited,2419,"riteLock () override;  Take the Write Lock of the mutex. ;  ; void WriteUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ;  Public Member Functions inherited from ROOT::TVirtualRWMutex; Int_t CleanUp () override;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from ROOT::TVirtualRWMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; ROOT::TReentrantRWLock< MutexT, RecurseCountsT > fMutexImp;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/thread/src/TRWMutexImp.h>. Inheritance diagram for ROOT::TRWMutexImp< MutexT, RecurseCountsT >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Apply(). template<typename MutexT , typename RecurseCountsT > . void ROOT::TRWMutexImp< MutexT, RecurseCountsT >::Apply ; (; std::unique_ptr< StateDelta > && ; delta). overridevirtual . Apply the mutex state delta. ; In pseudo-code: current_lock_count += delta; ; Implements ROOT::TVirt",MatchSource.WIKI,doc/master/classROOT_1_1TRWMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWMutexImp.html
https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html:683,Modifiability,variab,variable,683,. ROOT: ROOT::TRWSpinLock Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLock Class Reference. . Definition at line 22 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLock ();  Regular constructor. ;  ; void ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock ();  Release the lock in read mode. ;  ; void WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock ();  Release the lock in write mode. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; ROOT::TSpinMutex fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock,MatchSource.WIKI,doc/master/classROOT_1_1TRWSpinLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html
https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html:1899,Modifiability,variab,variable,1899,there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock::fMutex. private . ! RWlock internal mutex ; Definition at line 28 of file TRWSpinLock.hxx. ◆ fReaderReservation. std::atomic<int> ROOT::TRWSpinLock::fReaderReservation. private . ! A reader wants access ; Definition at line 25 of file TRWSpinLock.hxx. ◆ fReaders. std::atomic<int> ROOT::TRWSpinLock::fReaders. private . ! Number of readers ; Definition at line 24 of file TRWSpinLock.hxx. ◆ fWriter. std::atomic<bool> ROOT::TRWSpinLock::fWriter. private . ! Is there a writer? ; Definition at line 27 of file TRWSpinLock.hxx. ◆ fWriterReservation. std::atomic<int> ROOT::TRWSpinLock::fWriterReservation. private . ! A writer wants access ; Definition at line 26 of file TRWSpinLock.hxx. Libraries for ROOT::TRWSpinLock:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/TRWSpinLock.hxx; core/thread/src/TRWSpinLock.cxx. ROOTTRWSpinLock. ROOT master - R,MatchSource.WIKI,doc/master/classROOT_1_1TRWSpinLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html
https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html:809,Security,access,access,809,. ROOT: ROOT::TRWSpinLock Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLock Class Reference. . Definition at line 22 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLock ();  Regular constructor. ;  ; void ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock ();  Release the lock in read mode. ;  ; void WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock ();  Release the lock in write mode. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; ROOT::TSpinMutex fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock,MatchSource.WIKI,doc/master/classROOT_1_1TRWSpinLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html
https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html:989,Security,access,access,989,. ROOT: ROOT::TRWSpinLock Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLock Class Reference. . Definition at line 22 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLock ();  Regular constructor. ;  ; void ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock ();  Release the lock in read mode. ;  ; void WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock ();  Release the lock in write mode. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; ROOT::TSpinMutex fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock,MatchSource.WIKI,doc/master/classROOT_1_1TRWSpinLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html
https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html:2199,Security,access,access,2199, #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock::fMutex. private . ! RWlock internal mutex ; Definition at line 28 of file TRWSpinLock.hxx. ◆ fReaderReservation. std::atomic<int> ROOT::TRWSpinLock::fReaderReservation. private . ! A reader wants access ; Definition at line 25 of file TRWSpinLock.hxx. ◆ fReaders. std::atomic<int> ROOT::TRWSpinLock::fReaders. private . ! Number of readers ; Definition at line 24 of file TRWSpinLock.hxx. ◆ fWriter. std::atomic<bool> ROOT::TRWSpinLock::fWriter. private . ! Is there a writer? ; Definition at line 27 of file TRWSpinLock.hxx. ◆ fWriterReservation. std::atomic<int> ROOT::TRWSpinLock::fWriterReservation. private . ! A writer wants access ; Definition at line 26 of file TRWSpinLock.hxx. Libraries for ROOT::TRWSpinLock:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/TRWSpinLock.hxx; core/thread/src/TRWSpinLock.cxx. ROOTTRWSpinLock. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1TRWSpinLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html
https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html:2634,Security,access,access,2634, #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock::fMutex. private . ! RWlock internal mutex ; Definition at line 28 of file TRWSpinLock.hxx. ◆ fReaderReservation. std::atomic<int> ROOT::TRWSpinLock::fReaderReservation. private . ! A reader wants access ; Definition at line 25 of file TRWSpinLock.hxx. ◆ fReaders. std::atomic<int> ROOT::TRWSpinLock::fReaders. private . ! Number of readers ; Definition at line 24 of file TRWSpinLock.hxx. ◆ fWriter. std::atomic<bool> ROOT::TRWSpinLock::fWriter. private . ! Is there a writer? ; Definition at line 27 of file TRWSpinLock.hxx. ◆ fWriterReservation. std::atomic<int> ROOT::TRWSpinLock::fWriterReservation. private . ! A writer wants access ; Definition at line 26 of file TRWSpinLock.hxx. Libraries for ROOT::TRWSpinLock:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/TRWSpinLock.hxx; core/thread/src/TRWSpinLock.cxx. ROOTTRWSpinLock. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1TRWSpinLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html
https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html:1503,Availability,error,error,1503,"hemaRulestatic; Class_Version()ROOT::TSchemaRuleinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""") overrideROOT::TSchemaRulevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Conflicts(const TSchemaRule *rule) constROOT::TSchemaRule; Copy(TObject &object) constTObjectvirtual; DeclFileName()ROOT::TSchemaRuleinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fAttributesROOT::TSchemaRuleprivate; fBitsTObjectprivate; fChecksumROOT::TSchemaRuleprivate; fChecksumVectROOT::TSchemaRulemutableprivate; fCodeROOT::TSchemaRuleprivate; fEmbedROOT::TSchemaRuleprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fIncludeROOT::TSchemaRuleprivate; fIncludeVectROOT::TSchemaRulemutableprivate; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fReadFuncPtrROOT::TSchemaRuleprivate; fReadRawFuncPtrROOT::TSchemaRuleprivate; fRuleTypeROOT::TSchemaRuleprivate; fSourceROOT::TSchemaRuleprivate; fSourceClassROOT::TSchemaRuleprivate; fSourceVectROOT::TSchemaRulemutableprivate; fTargetROOT::TSchemaRuleprivate; fTargetClassROOT::TSchemaRuleprivate; fTargetVectROOT::TSchemaRulemutableprivate; fUniqueIDTObjectpri",MatchSource.WIKI,doc/master/classROOT_1_1TSchemaRule-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html
https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html:1584,Availability,error,error,1584,"hemaRulestatic; Class_Version()ROOT::TSchemaRuleinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""") overrideROOT::TSchemaRulevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Conflicts(const TSchemaRule *rule) constROOT::TSchemaRule; Copy(TObject &object) constTObjectvirtual; DeclFileName()ROOT::TSchemaRuleinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fAttributesROOT::TSchemaRuleprivate; fBitsTObjectprivate; fChecksumROOT::TSchemaRuleprivate; fChecksumVectROOT::TSchemaRulemutableprivate; fCodeROOT::TSchemaRuleprivate; fEmbedROOT::TSchemaRuleprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fIncludeROOT::TSchemaRuleprivate; fIncludeVectROOT::TSchemaRulemutableprivate; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fReadFuncPtrROOT::TSchemaRuleprivate; fReadRawFuncPtrROOT::TSchemaRuleprivate; fRuleTypeROOT::TSchemaRuleprivate; fSourceROOT::TSchemaRuleprivate; fSourceClassROOT::TSchemaRuleprivate; fSourceVectROOT::TSchemaRulemutableprivate; fTargetROOT::TSchemaRuleprivate; fTargetClassROOT::TSchemaRuleprivate; fTargetVectROOT::TSchemaRulemutableprivate; fUniqueIDTObjectpri",MatchSource.WIKI,doc/master/classROOT_1_1TSchemaRule-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html
https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html:207,Modifiability,inherit,inherited,207,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::TSchemaRule Member List. This is the complete list of members for ROOT::TSchemaRule, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; AsString(TString &out, const char *options="""") constROOT::TSchemaRule; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()ROOT::TSchemaRulestatic; Class_Name()ROOT::TSchemaRulestatic; Class_Version()ROOT::TSchemaRuleinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""") overrideROOT::TSchemaRulevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Conflicts(const TSchemaRule *rule) constROOT::TSchemaRule; Copy(TObject &object) constTObjectvirtual; DeclFileName()ROOT::TSchemaRuleinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fAttributesROOT::TSchemaRuleprivate; fBitsTObjectprivate; fChecksumROOT::TSchemaRuleprivate; fChecksumVectROOT::TSchemaRulemutableprivate; fCodeROOT::TSchemaRuleprivate; fEmbedROOT::TSchemaRuleprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectpr",MatchSource.WIKI,doc/master/classROOT_1_1TSchemaRule-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html
https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html:5820,Security,checksum,checksum,5820,"Rule enum valueROOT::TSchemaRule; kReadRule enum valueROOT::TSchemaRule; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; ls(Option_t *option="""") const overrideROOT::TSchemaRulevirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TSchemaRule &rhs)ROOT::TSchemaRule; TObject::operator=(const TObject &rhs)TObjectinline; operator==(const TSchemaRule &rhs) constROOT::TSchemaRule; Paint(Option_t *option="""")TObjectvirtual; ParseChecksum(const char *checksum) constROOT::TSchemaRuleprivate; Pop()TObjectvirtual; Print(Option_t *option="""") constTObjectvirtual; ProcessChecksum(const TString &checksum) constROOT::TSchemaRuleprivate; ProcessDeclaration(TObjArray *array, const TString &list)ROOT::TSchemaRuleprivatestatic; ProcessList(TObjArray *array, const TString &list)ROOT::TSchemaRuleprivatestatic; ProcessVersion(const TString &version) constROOT::TSchemaRuleprivate; Read(const char *name)TObjectvirtual; ReadFuncPtr_t typedefROOT::TSchemaRule; ReadRawFuncPtr_t typedefROOT::TSchemaRule; RecursiveRemove(TObject *obj)TObjectvirtual; ResetBit(UInt_t f)TObjectinline; RuleType_t enum nameROOT::TSchemaRule; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetAttributes(const TString &attributes)ROOT::TSchemaRule; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetChecksum(const TString &checksum)ROOT::TSchemaRule; SetCode(const TStri",MatchSource.WIKI,doc/master/classROOT_1_1TSchemaRule-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html
https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html:5961,Security,checksum,checksum,5961,"e enum valueTObject; ls(Option_t *option="""") const overrideROOT::TSchemaRulevirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TSchemaRule &rhs)ROOT::TSchemaRule; TObject::operator=(const TObject &rhs)TObjectinline; operator==(const TSchemaRule &rhs) constROOT::TSchemaRule; Paint(Option_t *option="""")TObjectvirtual; ParseChecksum(const char *checksum) constROOT::TSchemaRuleprivate; Pop()TObjectvirtual; Print(Option_t *option="""") constTObjectvirtual; ProcessChecksum(const TString &checksum) constROOT::TSchemaRuleprivate; ProcessDeclaration(TObjArray *array, const TString &list)ROOT::TSchemaRuleprivatestatic; ProcessList(TObjArray *array, const TString &list)ROOT::TSchemaRuleprivatestatic; ProcessVersion(const TString &version) constROOT::TSchemaRuleprivate; Read(const char *name)TObjectvirtual; ReadFuncPtr_t typedefROOT::TSchemaRule; ReadRawFuncPtr_t typedefROOT::TSchemaRule; RecursiveRemove(TObject *obj)TObjectvirtual; ResetBit(UInt_t f)TObjectinline; RuleType_t enum nameROOT::TSchemaRule; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetAttributes(const TString &attributes)ROOT::TSchemaRule; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetChecksum(const TString &checksum)ROOT::TSchemaRule; SetCode(const TString &code)ROOT::TSchemaRule; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEmbed(Bool_t embed)ROOT",MatchSource.WIKI,doc/master/classROOT_1_1TSchemaRule-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html
https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html:6778,Security,checksum,checksum,6778,"ectvirtual; ParseChecksum(const char *checksum) constROOT::TSchemaRuleprivate; Pop()TObjectvirtual; Print(Option_t *option="""") constTObjectvirtual; ProcessChecksum(const TString &checksum) constROOT::TSchemaRuleprivate; ProcessDeclaration(TObjArray *array, const TString &list)ROOT::TSchemaRuleprivatestatic; ProcessList(TObjArray *array, const TString &list)ROOT::TSchemaRuleprivatestatic; ProcessVersion(const TString &version) constROOT::TSchemaRuleprivate; Read(const char *name)TObjectvirtual; ReadFuncPtr_t typedefROOT::TSchemaRule; ReadRawFuncPtr_t typedefROOT::TSchemaRule; RecursiveRemove(TObject *obj)TObjectvirtual; ResetBit(UInt_t f)TObjectinline; RuleType_t enum nameROOT::TSchemaRule; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetAttributes(const TString &attributes)ROOT::TSchemaRule; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetChecksum(const TString &checksum)ROOT::TSchemaRule; SetCode(const TString &code)ROOT::TSchemaRule; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEmbed(Bool_t embed)ROOT::TSchemaRule; SetFromRule(const char *rule)ROOT::TSchemaRule; SetInclude(const TString &include)ROOT::TSchemaRule; SetObjectStat(Bool_t stat)TObjectstatic; SetReadFunctionPointer(ReadFuncPtr_t ptr)ROOT::TSchemaRule; SetReadRawFunctionPointer(ReadRawFuncPtr_t ptr)ROOT::TSchemaRule; SetRuleType(RuleType_t type)ROOT::TSchemaRule; SetSource(const TString &source)ROOT::TSchemaRule; SetSourceClass(const TString &classname)ROOT::TSchemaRule; SetTarget(const TString &target)ROOT::TSchemaRule; SetTargetClass(const TString &classname)ROOT::TSchemaRule; SetUniqueID(UInt_t uid)TObjectvirtual; SetVersion(const TString &version)ROOT::TSchemaRule; Streamer(TBuffer &) overrideROOT::TSchemaRulevirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)ROOT::TSchemaRuleinline; SysError(const char *method, const char *m",MatchSource.WIKI,doc/master/classROOT_1_1TSchemaRule-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html
https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html:7912,Security,checksum,checksum,7912,"_t *option="""")TObjectvirtual; SetAttributes(const TString &attributes)ROOT::TSchemaRule; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetChecksum(const TString &checksum)ROOT::TSchemaRule; SetCode(const TString &code)ROOT::TSchemaRule; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEmbed(Bool_t embed)ROOT::TSchemaRule; SetFromRule(const char *rule)ROOT::TSchemaRule; SetInclude(const TString &include)ROOT::TSchemaRule; SetObjectStat(Bool_t stat)TObjectstatic; SetReadFunctionPointer(ReadFuncPtr_t ptr)ROOT::TSchemaRule; SetReadRawFunctionPointer(ReadRawFuncPtr_t ptr)ROOT::TSchemaRule; SetRuleType(RuleType_t type)ROOT::TSchemaRule; SetSource(const TString &source)ROOT::TSchemaRule; SetSourceClass(const TString &classname)ROOT::TSchemaRule; SetTarget(const TString &target)ROOT::TSchemaRule; SetTargetClass(const TString &classname)ROOT::TSchemaRule; SetUniqueID(UInt_t uid)TObjectvirtual; SetVersion(const TString &version)ROOT::TSchemaRule; Streamer(TBuffer &) overrideROOT::TSchemaRulevirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)ROOT::TSchemaRuleinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TestChecksum(UInt_t checksum) constROOT::TSchemaRule; TestVersion(Int_t version) constROOT::TSchemaRule; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TSchemaRule()ROOT::TSchemaRule; TSchemaRule(const TSchemaRule &rhs)ROOT::TSchemaRule; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TObject()TObjectvirtual; ~TSchemaRule()ROOT::TSchemaRulevirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1TSchemaRule-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html
https://root.cern/doc/master/classROOT_1_1TSchemaRule.html:7715,Availability,error,error,7715,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule.html
https://root.cern/doc/master/classROOT_1_1TSchemaRule.html:7804,Availability,error,error,7804,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule.html
https://root.cern/doc/master/classROOT_1_1TSchemaRule.html:7959,Availability,error,error,7959,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule.html
https://root.cern/doc/master/classROOT_1_1TSchemaRule.html:8256,Availability,error,error,8256,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule.html
https://root.cern/doc/master/classROOT_1_1TSchemaRule.html:12712,Availability,error,error,12712," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule.html
https://root.cern/doc/master/classROOT_1_1TSchemaRule.html:7721,Integrability,message,message,7721,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule.html
