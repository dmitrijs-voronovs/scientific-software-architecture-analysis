id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:6526,Integrability,interface,interface,6526,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:8190,Integrability,rout,routine,8190," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:5103,Modifiability,Inherit,Inheritance,5103,"ty); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >(const double& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >(const ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,5,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:5116,Modifiability,Inherit,Inherited,5116,"ty); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >(const double& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >(const ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,5,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:9893,Performance,perform,performing,9893,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:11589,Safety,avoid,avoid,11589,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:5545,Security,Access,Access,5545," ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,5,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:5568,Security,access,access,5568," ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,5,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:5673,Security,access,accessing,5673," ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,5,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:5938,Security,access,access,5938,"5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:6962,Security,access,access,6962,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:7076,Security,access,access,7076,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:7192,Security,access,access,7192,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:7370,Security,access,access,7370,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:7294,Testability,assert,assert,7294,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:7471,Testability,assert,assert,7471,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5_____SMatrixRow.html:2141,Modifiability,Inherit,Inheritance,2141,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow&&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5_____SMatrixRow.html:2154,Modifiability,Inherit,Inherited,2154,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow&&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5_____SMatrixRow_const.html:2261,Modifiability,Inherit,Inheritance,2261,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5_____SMatrixRow_const.html:2274,Modifiability,Inherit,Inherited,2274,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:9563,Availability,error,error,9563,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:9632,Availability,failure,failure,9632,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:9978,Availability,error,error,9978,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:10047,Availability,failure,failure,10047,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:11160,Availability,error,error,11160,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:5831,Integrability,interface,interface,5831,"e,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:6284,Integrability,interface,interface,6284,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:6326,Integrability,interface,interface,6326,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:6388,Integrability,interface,interface,6388,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:6448,Integrability,interface,interface,6448,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:8112,Integrability,rout,routine,8112," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:5025,Modifiability,Inherit,Inheritance,5025,"T::Math::SMatrixIdentity); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >(const double& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >(const ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:5038,Modifiability,Inherit,Inherited,5038,"T::Math::SMatrixIdentity); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >(const double& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >(const ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:9815,Performance,perform,performing,9815,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:11511,Safety,avoid,avoid,11511,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:5467,Security,Access,Access,5467," >(const ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:5490,Security,access,access,5490," >(const ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:5595,Security,access,accessing,5595," >(const ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:5860,Security,access,access,5860,"e,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:6884,Security,access,access,6884,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:6998,Security,access,access,6998,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:7114,Security,access,access,7114,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:7292,Security,access,access,7292,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:7216,Testability,assert,assert,7216,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html:7393,Testability,assert,assert,7393,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5_____SMatrixRow.html:2113,Modifiability,Inherit,Inheritance,2113,", where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow&&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5_____SMatrixRow.html:2126,Modifiability,Inherit,Inherited,2126,", where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow&&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5_____SMatrixRow_const.html:2233,Modifiability,Inherit,Inheritance,2233,"on, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5_____SMatrixRow_const.html:2246,Modifiability,Inherit,Inherited,2246,"on, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepSym_double_5_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:9641,Availability,error,error,9641,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:9710,Availability,failure,failure,9710,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:10056,Availability,error,error,10056,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:10125,Availability,failure,failure,10125,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:11238,Availability,error,error,11238,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:5909,Integrability,interface,interface,5909,"6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:6362,Integrability,interface,interface,6362,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:6404,Integrability,interface,interface,6404,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:6466,Integrability,interface,interface,6466,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:6526,Integrability,interface,interface,6526,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:8190,Integrability,rout,routine,8190," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:5103,Modifiability,Inherit,Inheritance,5103,"ty); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >(const double& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >(const ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,6,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:5116,Modifiability,Inherit,Inherited,5116,"ty); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >(const double& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >(const ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,6,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:9893,Performance,perform,performing,9893,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:11589,Safety,avoid,avoid,11589,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:5545,Security,Access,Access,5545," ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,6,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:5568,Security,access,access,5568," ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,6,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:5673,Security,access,accessing,5673," ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,6,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:5938,Security,access,access,5938,"6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:6962,Security,access,access,6962,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:7076,Security,access,access,7076,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:7192,Security,access,access,7192,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:7370,Security,access,access,7370,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:7294,Testability,assert,assert,7294,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:7471,Testability,assert,assert,7471,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6_____SMatrixRow.html:2141,Modifiability,Inherit,Inheritance,2141,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow&&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6_____SMatrixRow.html:2154,Modifiability,Inherit,Inherited,2154,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow&&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6_____SMatrixRow_const.html:2261,Modifiability,Inherit,Inheritance,2261,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6_____SMatrixRow_const.html:2274,Modifiability,Inherit,Inherited,2274,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:9563,Availability,error,error,9563,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:9632,Availability,failure,failure,9632,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:9978,Availability,error,error,9978,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:10047,Availability,failure,failure,10047,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:11160,Availability,error,error,11160,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:5831,Integrability,interface,interface,5831,"e,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:6284,Integrability,interface,interface,6284,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:6326,Integrability,interface,interface,6326,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:6388,Integrability,interface,interface,6388,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:6448,Integrability,interface,interface,6448,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:8112,Integrability,rout,routine,8112," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:5025,Modifiability,Inherit,Inheritance,5025,"T::Math::SMatrixIdentity); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >(const double& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >(const ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:5038,Modifiability,Inherit,Inherited,5038,"T::Math::SMatrixIdentity); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >(const double& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >(const ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:9815,Performance,perform,performing,9815,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:11511,Safety,avoid,avoid,11511,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:5467,Security,Access,Access,5467," >(const ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:5490,Security,access,access,5490," >(const ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:5595,Security,access,accessing,5595," >(const ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:5860,Security,access,access,5860,"e,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:6884,Security,access,access,6884,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:6998,Security,access,access,6998,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:7114,Security,access,access,7114,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:7292,Security,access,access,7292,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:7216,Testability,assert,assert,7216,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html:7393,Testability,assert,assert,7393,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6_____SMatrixRow.html:2113,Modifiability,Inherit,Inheritance,2113,", where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow&&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6_____SMatrixRow.html:2126,Modifiability,Inherit,Inherited,2126,", where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow&&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6_____SMatrixRow_const.html:2233,Modifiability,Inherit,Inheritance,2233,"on, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6_____SMatrixRow_const.html:2246,Modifiability,Inherit,Inherited,2246,"on, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_6_6_-p1MatRepSym_double_6_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:9641,Availability,error,error,9641,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:9710,Availability,failure,failure,9710,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:10056,Availability,error,error,10056,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:10125,Availability,failure,failure,10125,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:11238,Availability,error,error,11238,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:5909,Integrability,interface,interface,5909,"7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:6362,Integrability,interface,interface,6362,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:6404,Integrability,interface,interface,6404,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:6466,Integrability,interface,interface,6466,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:6526,Integrability,interface,interface,6526,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:8190,Integrability,rout,routine,8190," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:5103,Modifiability,Inherit,Inheritance,5103,"ty); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >(const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepStd<double,7,7> >& rhs); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >(const double& rhs); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >(const ROOT::Math::SVector<double,7U*(7U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,7,7>fRep; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:5116,Modifiability,Inherit,Inherited,5116,"ty); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >(const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepStd<double,7,7> >& rhs); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >(const double& rhs); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >(const ROOT::Math::SVector<double,7U*(7U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,7,7>fRep; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:9893,Performance,perform,performing,9893,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:11589,Safety,avoid,avoid,11589,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:5545,Security,Access,Access,5545," ROOT::Math::SVector<double,7U*(7U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,7,7>fRep; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:5568,Security,access,access,5568," ROOT::Math::SVector<double,7U*(7U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,7,7>fRep; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:5673,Security,access,accessing,5673," ROOT::Math::SVector<double,7U*(7U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,7,7>fRep; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:5938,Security,access,access,5938,"7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:6962,Security,access,access,6962,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:7076,Security,access,access,7076,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:7192,Security,access,access,7192,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:7370,Security,access,access,7370,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:7294,Testability,assert,assert,7294,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:7471,Testability,assert,assert,7471,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7_____SMatrixRow.html:2141,Modifiability,Inherit,Inheritance,2141,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow&&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepStd<double,7,7> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepStd<double,7,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepStd<double,7,7> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7_____SMatrixRow.html:2154,Modifiability,Inherit,Inherited,2154,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow&&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepStd<double,7,7> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepStd<double,7,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepStd<double,7,7> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7_____SMatrixRow_const.html:2261,Modifiability,Inherit,Inheritance,2261,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepStd<double,7,7> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepStd<double,7,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepStd<double,7,7> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7_____SMatrixRow_const.html:2274,Modifiability,Inherit,Inherited,2274,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepStd<double,7,7> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepStd<double,7,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepStd<double,7,7> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:9563,Availability,error,error,9563,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:9632,Availability,failure,failure,9632,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:9978,Availability,error,error,9978,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:10047,Availability,failure,failure,10047,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:11160,Availability,error,error,11160,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:5831,Integrability,interface,interface,5831,"e,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:6284,Integrability,interface,interface,6284,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:6326,Integrability,interface,interface,6326,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:6388,Integrability,interface,interface,6388,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:6448,Integrability,interface,interface,6448,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:8112,Integrability,rout,routine,8112," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:5025,Modifiability,Inherit,Inheritance,5025,"T::Math::SMatrixIdentity); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >(const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepSym<double,7> >& rhs); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >(const double& rhs); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >(const ROOT::Math::SVector<double,7U*(7U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,7>fRep; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:5038,Modifiability,Inherit,Inherited,5038,"T::Math::SMatrixIdentity); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >(const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepSym<double,7> >& rhs); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >(const double& rhs); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >(const ROOT::Math::SVector<double,7U*(7U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,7>fRep; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:9815,Performance,perform,performing,9815,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:11511,Safety,avoid,avoid,11511,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:5467,Security,Access,Access,5467," >(const ROOT::Math::SVector<double,7U*(7U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,7>fRep; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:5490,Security,access,access,5490," >(const ROOT::Math::SVector<double,7U*(7U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,7>fRep; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:5595,Security,access,accessing,5595," >(const ROOT::Math::SVector<double,7U*(7U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,7>fRep; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:5860,Security,access,access,5860,"e,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:6884,Security,access,access,6884,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:6998,Security,access,access,6998,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:7114,Security,access,access,7114,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:7292,Security,access,access,7292,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:7216,Testability,assert,assert,7216,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html:7393,Testability,assert,assert,7393,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7_____SMatrixRow.html:2113,Modifiability,Inherit,Inheritance,2113,", where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow&&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepSym<double,7> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepSym<double,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepSym<double,7> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7_____SMatrixRow.html:2126,Modifiability,Inherit,Inherited,2126,", where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow&&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepSym<double,7> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepSym<double,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepSym<double,7> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7_____SMatrixRow_const.html:2233,Modifiability,Inherit,Inheritance,2233,"on, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepSym<double,7> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepSym<double,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepSym<double,7> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7_____SMatrixRow_const.html:2246,Modifiability,Inherit,Inherited,2246,"on, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepSym<double,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepSym<double,7> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepSym<double,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,7U,7U,ROOT::Math::MatRepSym<double,7> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepSym_double_7_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:9641,Availability,error,error,9641,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:9710,Availability,failure,failure,9710,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:10056,Availability,error,error,10056,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:10125,Availability,failure,failure,10125,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:11238,Availability,error,error,11238,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:5909,Integrability,interface,interface,5909,"7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:6362,Integrability,interface,interface,6362,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:6404,Integrability,interface,interface,6404,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:6466,Integrability,interface,interface,6466,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:6526,Integrability,interface,interface,6526,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:8190,Integrability,rout,routine,8190," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:5103,Modifiability,Inherit,Inheritance,5103,"ty); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >(const ROOT::Math::SMatrix<double,9U,7U,ROOT::Math::MatRepStd<double,9,7> >& rhs); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >(const double& rhs); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >(const ROOT::Math::SVector<double,9U*(7U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,9U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,9,7>fRep; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:5116,Modifiability,Inherit,Inherited,5116,"ty); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >(const ROOT::Math::SMatrix<double,9U,7U,ROOT::Math::MatRepStd<double,9,7> >& rhs); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >(const double& rhs); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >(const ROOT::Math::SVector<double,9U*(7U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,9U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,9,7>fRep; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:9893,Performance,perform,performing,9893,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:11589,Safety,avoid,avoid,11589,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:5545,Security,Access,Access,5545," ROOT::Math::SVector<double,9U*(7U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,9U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,9,7>fRep; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:5568,Security,access,access,5568," ROOT::Math::SVector<double,9U*(7U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,9U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,9,7>fRep; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:5673,Security,access,accessing,5673," ROOT::Math::SVector<double,9U*(7U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,9U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,9,7>fRep; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:5938,Security,access,access,5938,"7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:6962,Security,access,access,6962,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:7076,Security,access,access,7076,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:7192,Security,access,access,7192,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:7370,Security,access,access,7370,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:7294,Testability,assert,assert,7294,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:7471,Testability,assert,assert,7471,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7_____SMatrixRow.html:2141,Modifiability,Inherit,Inheritance,2141,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow&); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow&); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow&&); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,9U,7U,ROOT::Math::MatRepStd<double,9,7> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,9U,7U,ROOT::Math::MatRepStd<double,9,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,9U,7U,ROOT::Math::MatRepStd<double,9,7> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7_____SMatrixRow.html:2154,Modifiability,Inherit,Inherited,2154,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow&); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow&); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow&&); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,9U,7U,ROOT::Math::MatRepStd<double,9,7> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,9U,7U,ROOT::Math::MatRepStd<double,9,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,9U,7U,ROOT::Math::MatRepStd<double,9,7> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7_____SMatrixRow_const.html:2261,Modifiability,Inherit,Inheritance,2261,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,9U,7U,ROOT::Math::MatRepStd<double,9,7> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,9U,7U,ROOT::Math::MatRepStd<double,9,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,9U,7U,ROOT::Math::MatRepStd<double,9,7> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7_____SMatrixRow_const.html:2274,Modifiability,Inherit,Inherited,2274,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,9U,7U,ROOT::Math::MatRepStd<double,9,7> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,9U,7U,ROOT::Math::MatRepStd<double,9,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,9U,7U,ROOT::Math::MatRepStd<double,9,7> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:9530,Availability,error,error,9530,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:9599,Availability,failure,failure,9599,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:9945,Availability,error,error,9945,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:10014,Availability,failure,failure,10014,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:11125,Availability,error,error,11125,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:5805,Integrability,interface,interface,5805,",2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:6258,Integrability,interface,interface,6258,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:6300,Integrability,interface,interface,6300,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element wi",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:6362,Integrability,interface,interface,6362,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ind",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:6422,Integrability,interface,interface,6422,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:8079,Integrability,rout,routine,8079," 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:4999,Modifiability,Inherit,Inheritance,4999,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >(const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepStd<float,2,2> >& rhs); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >(const float& rhs); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >(const ROOT::Math::SVector<float,2U*(2U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,2,2>fRep; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:5012,Modifiability,Inherit,Inherited,5012,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >(const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepStd<float,2,2> >& rhs); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >(const float& rhs); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >(const ROOT::Math::SVector<float,2U*(2U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,2,2>fRep; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:9782,Performance,perform,performing,9782,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:11475,Safety,avoid,avoid,11475,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:5441,Security,Access,Access,5441,"2> >(const ROOT::Math::SVector<float,2U*(2U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,2,2>fRep; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:5464,Security,access,access,5464,"2> >(const ROOT::Math::SVector<float,2U*(2U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,2,2>fRep; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:5569,Security,access,accessing,5569,"2> >(const ROOT::Math::SVector<float,2U*(2U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,2,2>fRep; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:5834,Security,access,access,5834,",2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:6855,Security,access,access,6855,"they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functio",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:6969,Security,access,access,6969,"ator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:7085,Security,access,access,7085,"a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (w",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:7263,Security,access,access,7263,"); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SM",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:7187,Testability,assert,assert,7187,"_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunc",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:7364,Testability,assert,assert,7364,"iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix an",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2_____SMatrixRow.html:2112,Modifiability,Inherit,Inheritance,2112,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow&&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepStd<float,2,2> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepStd<float,2,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepStd<float,2,2> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2_____SMatrixRow.html:2125,Modifiability,Inherit,Inherited,2125,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow&&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepStd<float,2,2> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepStd<float,2,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepStd<float,2,2> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2_____SMatrixRow_const.html:2232,Modifiability,Inherit,Inheritance,2232,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepStd<float,2,2> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepStd<float,2,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepStd<float,2,2> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2_____SMatrixRow_const.html:2245,Modifiability,Inherit,Inherited,2245,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepStd<float,2,2> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepStd<float,2,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepStd<float,2,2> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:9452,Availability,error,error,9452,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:9521,Availability,failure,failure,9521,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:9867,Availability,error,error,9867,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:9936,Availability,failure,failure,9936,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:11047,Availability,error,error,11047,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:5727,Integrability,interface,interface,5727,"loat,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:6180,Integrability,interface,interface,6180,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:6222,Integrability,interface,interface,6222,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element wi",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:6284,Integrability,interface,interface,6284,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ind",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:6344,Integrability,interface,interface,6344,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:8001,Integrability,rout,routine,8001," 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:4921,Modifiability,Inherit,Inheritance,4921,":MatRepSym<float,2> >(ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >(const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepSym<float,2> >& rhs); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >(const float& rhs); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >(const ROOT::Math::SVector<float,2U*(2U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,2>fRep; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:4934,Modifiability,Inherit,Inherited,4934,":MatRepSym<float,2> >(ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >(const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepSym<float,2> >& rhs); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >(const float& rhs); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >(const ROOT::Math::SVector<float,2U*(2U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,2>fRep; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:9704,Performance,perform,performing,9704,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:11397,Safety,avoid,avoid,11397,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:5363,Security,Access,Access,5363,"m<float,2> >(const ROOT::Math::SVector<float,2U*(2U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,2>fRep; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:5386,Security,access,access,5386,"m<float,2> >(const ROOT::Math::SVector<float,2U*(2U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,2>fRep; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:5491,Security,access,accessing,5491,"m<float,2> >(const ROOT::Math::SVector<float,2U*(2U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,2>fRep; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:5756,Security,access,access,5756,"loat,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:6777,Security,access,access,6777,"they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functio",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:6891,Security,access,access,6891,"ator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:7007,Security,access,access,7007,"a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (w",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:7185,Security,access,access,7185,"); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SM",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:7109,Testability,assert,assert,7109,"_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunc",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html:7286,Testability,assert,assert,7286,"iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix an",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2_____SMatrixRow.html:2084,Modifiability,Inherit,Inheritance,2084,"or symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow&&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepSym<float,2> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepSym<float,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepSym<float,2> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2_____SMatrixRow.html:2097,Modifiability,Inherit,Inherited,2097,"or symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow&&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepSym<float,2> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepSym<float,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepSym<float,2> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2_____SMatrixRow_const.html:2204,Modifiability,Inherit,Inheritance,2204,"Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepSym<float,2> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepSym<float,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepSym<float,2> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2_____SMatrixRow_const.html:2217,Modifiability,Inherit,Inherited,2217,"Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepSym<float,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepSym<float,2> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepSym<float,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,2U,2U,ROOT::Math::MatRepSym<float,2> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepSym_float_2_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:9530,Availability,error,error,9530,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:9599,Availability,failure,failure,9599,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:9945,Availability,error,error,9945,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:10014,Availability,failure,failure,10014,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:11125,Availability,error,error,11125,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:5805,Integrability,interface,interface,5805,",3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:6258,Integrability,interface,interface,6258,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:6300,Integrability,interface,interface,6300,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element wi",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:6362,Integrability,interface,interface,6362,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ind",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:6422,Integrability,interface,interface,6422,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:8079,Integrability,rout,routine,8079," 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:4999,Modifiability,Inherit,Inheritance,4999,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >(const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepStd<float,3,3> >& rhs); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >(const float& rhs); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >(const ROOT::Math::SVector<float,3U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,3,3>fRep; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:5012,Modifiability,Inherit,Inherited,5012,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >(const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepStd<float,3,3> >& rhs); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >(const float& rhs); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >(const ROOT::Math::SVector<float,3U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,3,3>fRep; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:9782,Performance,perform,performing,9782,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:11475,Safety,avoid,avoid,11475,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:5441,Security,Access,Access,5441,"3> >(const ROOT::Math::SVector<float,3U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,3,3>fRep; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:5464,Security,access,access,5464,"3> >(const ROOT::Math::SVector<float,3U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,3,3>fRep; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:5569,Security,access,accessing,5569,"3> >(const ROOT::Math::SVector<float,3U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,3,3>fRep; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:5834,Security,access,access,5834,",3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:6855,Security,access,access,6855,"they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functio",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:6969,Security,access,access,6969,"ator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:7085,Security,access,access,7085,"a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (w",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:7263,Security,access,access,7263,"); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SM",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:7187,Testability,assert,assert,7187,"_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunc",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:7364,Testability,assert,assert,7364,"iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix an",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3_____SMatrixRow.html:2112,Modifiability,Inherit,Inheritance,2112,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow&&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepStd<float,3,3> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepStd<float,3,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepStd<float,3,3> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3_____SMatrixRow.html:2125,Modifiability,Inherit,Inherited,2125,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow&&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepStd<float,3,3> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepStd<float,3,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepStd<float,3,3> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3_____SMatrixRow_const.html:2232,Modifiability,Inherit,Inheritance,2232,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepStd<float,3,3> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepStd<float,3,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepStd<float,3,3> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3_____SMatrixRow_const.html:2245,Modifiability,Inherit,Inherited,2245,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepStd<float,3,3> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepStd<float,3,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepStd<float,3,3> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:9452,Availability,error,error,9452,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:9521,Availability,failure,failure,9521,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:9867,Availability,error,error,9867,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:9936,Availability,failure,failure,9936,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:11047,Availability,error,error,11047,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:5727,Integrability,interface,interface,5727,"loat,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:6180,Integrability,interface,interface,6180,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:6222,Integrability,interface,interface,6222,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element wi",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:6284,Integrability,interface,interface,6284,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ind",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:6344,Integrability,interface,interface,6344,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:8001,Integrability,rout,routine,8001," 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:4921,Modifiability,Inherit,Inheritance,4921,":MatRepSym<float,3> >(ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >(const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepSym<float,3> >& rhs); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >(const float& rhs); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >(const ROOT::Math::SVector<float,3U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,3>fRep; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:4934,Modifiability,Inherit,Inherited,4934,":MatRepSym<float,3> >(ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >(const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepSym<float,3> >& rhs); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >(const float& rhs); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >(const ROOT::Math::SVector<float,3U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,3>fRep; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:9704,Performance,perform,performing,9704,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:11397,Safety,avoid,avoid,11397,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:5363,Security,Access,Access,5363,"m<float,3> >(const ROOT::Math::SVector<float,3U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,3>fRep; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:5386,Security,access,access,5386,"m<float,3> >(const ROOT::Math::SVector<float,3U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,3>fRep; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:5491,Security,access,accessing,5491,"m<float,3> >(const ROOT::Math::SVector<float,3U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,3>fRep; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:5756,Security,access,access,5756,"loat,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:6777,Security,access,access,6777,"they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functio",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:6891,Security,access,access,6891,"ator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:7007,Security,access,access,7007,"a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (w",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:7185,Security,access,access,7185,"); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SM",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:7109,Testability,assert,assert,7109,"_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunc",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html:7286,Testability,assert,assert,7286,"iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix an",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3_____SMatrixRow.html:2084,Modifiability,Inherit,Inheritance,2084,"or symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow&&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepSym<float,3> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepSym<float,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepSym<float,3> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3_____SMatrixRow.html:2097,Modifiability,Inherit,Inherited,2097,"or symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow&&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepSym<float,3> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepSym<float,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepSym<float,3> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3_____SMatrixRow_const.html:2204,Modifiability,Inherit,Inheritance,2204,"Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepSym<float,3> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepSym<float,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepSym<float,3> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3_____SMatrixRow_const.html:2217,Modifiability,Inherit,Inherited,2217,"Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepSym<float,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepSym<float,3> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepSym<float,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,3U,3U,ROOT::Math::MatRepSym<float,3> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepSym_float_3_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:9530,Availability,error,error,9530,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:9599,Availability,failure,failure,9599,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:9945,Availability,error,error,9945,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:10014,Availability,failure,failure,10014,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:11125,Availability,error,error,11125,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:5805,Integrability,interface,interface,5805,",3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:6258,Integrability,interface,interface,6258,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:6300,Integrability,interface,interface,6300,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element wi",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:6362,Integrability,interface,interface,6362,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ind",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:6422,Integrability,interface,interface,6422,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:8079,Integrability,rout,routine,8079," 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:4999,Modifiability,Inherit,Inheritance,4999,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >(const ROOT::Math::SMatrix<float,3U,4U,ROOT::Math::MatRepStd<float,3,4> >& rhs); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >(const float& rhs); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >(const ROOT::Math::SVector<float,3U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,3,4>fRep; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:5012,Modifiability,Inherit,Inherited,5012,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >(const ROOT::Math::SMatrix<float,3U,4U,ROOT::Math::MatRepStd<float,3,4> >& rhs); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >(const float& rhs); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >(const ROOT::Math::SVector<float,3U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,3,4>fRep; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:9782,Performance,perform,performing,9782,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:11475,Safety,avoid,avoid,11475,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:5441,Security,Access,Access,5441,"4> >(const ROOT::Math::SVector<float,3U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,3,4>fRep; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:5464,Security,access,access,5464,"4> >(const ROOT::Math::SVector<float,3U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,3,4>fRep; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:5569,Security,access,accessing,5569,"4> >(const ROOT::Math::SVector<float,3U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,3,4>fRep; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:5834,Security,access,access,5834,",3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:6855,Security,access,access,6855,"they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functio",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:6969,Security,access,access,6969,"ator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:7085,Security,access,access,7085,"a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (w",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:7263,Security,access,access,7263,"); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SM",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:7187,Testability,assert,assert,7187,"_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunc",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:7364,Testability,assert,assert,7364,"iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix an",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4_____SMatrixRow.html:2112,Modifiability,Inherit,Inheritance,2112,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow&); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow&); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow&&); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,3U,4U,ROOT::Math::MatRepStd<float,3,4> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,3U,4U,ROOT::Math::MatRepStd<float,3,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,3U,4U,ROOT::Math::MatRepStd<float,3,4> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4_____SMatrixRow.html:2125,Modifiability,Inherit,Inherited,2125,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow&); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow&); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow&&); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,3U,4U,ROOT::Math::MatRepStd<float,3,4> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,3U,4U,ROOT::Math::MatRepStd<float,3,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,3U,4U,ROOT::Math::MatRepStd<float,3,4> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4_____SMatrixRow_const.html:2232,Modifiability,Inherit,Inheritance,2232,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,3U,4U,ROOT::Math::MatRepStd<float,3,4> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,3U,4U,ROOT::Math::MatRepStd<float,3,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,3U,4U,ROOT::Math::MatRepStd<float,3,4> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4_____SMatrixRow_const.html:2245,Modifiability,Inherit,Inherited,2245,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,3U,4U,ROOT::Math::MatRepStd<float,3,4> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,3U,4U,ROOT::Math::MatRepStd<float,3,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,3U,4U,ROOT::Math::MatRepStd<float,3,4> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:9530,Availability,error,error,9530,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:9599,Availability,failure,failure,9599,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:9945,Availability,error,error,9945,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:10014,Availability,failure,failure,10014,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:11125,Availability,error,error,11125,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:5805,Integrability,interface,interface,5805,",4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:6258,Integrability,interface,interface,6258,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:6300,Integrability,interface,interface,6300,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element wi",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:6362,Integrability,interface,interface,6362,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ind",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:6422,Integrability,interface,interface,6422,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:8079,Integrability,rout,routine,8079," 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:4999,Modifiability,Inherit,Inheritance,4999,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >(const ROOT::Math::SMatrix<float,4U,3U,ROOT::Math::MatRepStd<float,4,3> >& rhs); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >(const float& rhs); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >(const ROOT::Math::SVector<float,4U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,4,3>fRep; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:5012,Modifiability,Inherit,Inherited,5012,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >(const ROOT::Math::SMatrix<float,4U,3U,ROOT::Math::MatRepStd<float,4,3> >& rhs); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >(const float& rhs); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >(const ROOT::Math::SVector<float,4U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,4,3>fRep; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:9782,Performance,perform,performing,9782,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:11475,Safety,avoid,avoid,11475,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:5441,Security,Access,Access,5441,"3> >(const ROOT::Math::SVector<float,4U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,4,3>fRep; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:5464,Security,access,access,5464,"3> >(const ROOT::Math::SVector<float,4U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,4,3>fRep; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:5569,Security,access,accessing,5569,"3> >(const ROOT::Math::SVector<float,4U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,4,3>fRep; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:5834,Security,access,access,5834,",4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:6855,Security,access,access,6855,"they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functio",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:6969,Security,access,access,6969,"ator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:7085,Security,access,access,7085,"a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (w",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:7263,Security,access,access,7263,"); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SM",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:7187,Testability,assert,assert,7187,"_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunc",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:7364,Testability,assert,assert,7364,"iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix an",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3_____SMatrixRow.html:2112,Modifiability,Inherit,Inheritance,2112,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow&); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow&); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow&&); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,4U,3U,ROOT::Math::MatRepStd<float,4,3> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,4U,3U,ROOT::Math::MatRepStd<float,4,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,4U,3U,ROOT::Math::MatRepStd<float,4,3> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3_____SMatrixRow.html:2125,Modifiability,Inherit,Inherited,2125,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow&); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow&); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow&&); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,4U,3U,ROOT::Math::MatRepStd<float,4,3> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,4U,3U,ROOT::Math::MatRepStd<float,4,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,4U,3U,ROOT::Math::MatRepStd<float,4,3> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3_____SMatrixRow_const.html:2232,Modifiability,Inherit,Inheritance,2232,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,4U,3U,ROOT::Math::MatRepStd<float,4,3> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,4U,3U,ROOT::Math::MatRepStd<float,4,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,4U,3U,ROOT::Math::MatRepStd<float,4,3> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3_____SMatrixRow_const.html:2245,Modifiability,Inherit,Inherited,2245,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,4U,3U,ROOT::Math::MatRepStd<float,4,3> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,4U,3U,ROOT::Math::MatRepStd<float,4,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,4U,3U,ROOT::Math::MatRepStd<float,4,3> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:9530,Availability,error,error,9530,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:9599,Availability,failure,failure,9599,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:9945,Availability,error,error,9945,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:10014,Availability,failure,failure,10014,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:11125,Availability,error,error,11125,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:5805,Integrability,interface,interface,5805,",4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:6258,Integrability,interface,interface,6258,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:6300,Integrability,interface,interface,6300,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element wi",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:6362,Integrability,interface,interface,6362,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ind",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:6422,Integrability,interface,interface,6422,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:8079,Integrability,rout,routine,8079," 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:4999,Modifiability,Inherit,Inheritance,4999,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >(const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepStd<float,4,4> >& rhs); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >(const float& rhs); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >(const ROOT::Math::SVector<float,4U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,4,4>fRep; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:5012,Modifiability,Inherit,Inherited,5012,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >(const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepStd<float,4,4> >& rhs); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >(const float& rhs); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >(const ROOT::Math::SVector<float,4U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,4,4>fRep; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:9782,Performance,perform,performing,9782,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:11475,Safety,avoid,avoid,11475,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:5441,Security,Access,Access,5441,"4> >(const ROOT::Math::SVector<float,4U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,4,4>fRep; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:5464,Security,access,access,5464,"4> >(const ROOT::Math::SVector<float,4U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,4,4>fRep; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:5569,Security,access,accessing,5569,"4> >(const ROOT::Math::SVector<float,4U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,4,4>fRep; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:5834,Security,access,access,5834,",4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:6855,Security,access,access,6855,"they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functio",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:6969,Security,access,access,6969,"ator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:7085,Security,access,access,7085,"a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (w",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:7263,Security,access,access,7263,"); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SM",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:7187,Testability,assert,assert,7187,"_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunc",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:7364,Testability,assert,assert,7364,"iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix an",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4_____SMatrixRow.html:2112,Modifiability,Inherit,Inheritance,2112,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow&&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepStd<float,4,4> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepStd<float,4,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepStd<float,4,4> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4_____SMatrixRow.html:2125,Modifiability,Inherit,Inherited,2125,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow&&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepStd<float,4,4> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepStd<float,4,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepStd<float,4,4> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4_____SMatrixRow_const.html:2232,Modifiability,Inherit,Inheritance,2232,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepStd<float,4,4> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepStd<float,4,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepStd<float,4,4> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4_____SMatrixRow_const.html:2245,Modifiability,Inherit,Inherited,2245,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepStd<float,4,4> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepStd<float,4,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepStd<float,4,4> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:9452,Availability,error,error,9452,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:9521,Availability,failure,failure,9521,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:9867,Availability,error,error,9867,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:9936,Availability,failure,failure,9936,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:11047,Availability,error,error,11047,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:5727,Integrability,interface,interface,5727,"loat,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:6180,Integrability,interface,interface,6180,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:6222,Integrability,interface,interface,6222,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element wi",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:6284,Integrability,interface,interface,6284,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ind",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:6344,Integrability,interface,interface,6344,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:8001,Integrability,rout,routine,8001," 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:4921,Modifiability,Inherit,Inheritance,4921,":MatRepSym<float,4> >(ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >(const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepSym<float,4> >& rhs); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >(const float& rhs); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >(const ROOT::Math::SVector<float,4U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,4>fRep; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:4934,Modifiability,Inherit,Inherited,4934,":MatRepSym<float,4> >(ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >(const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepSym<float,4> >& rhs); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >(const float& rhs); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >(const ROOT::Math::SVector<float,4U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,4>fRep; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:9704,Performance,perform,performing,9704,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:11397,Safety,avoid,avoid,11397,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:5363,Security,Access,Access,5363,"m<float,4> >(const ROOT::Math::SVector<float,4U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,4>fRep; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:5386,Security,access,access,5386,"m<float,4> >(const ROOT::Math::SVector<float,4U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,4>fRep; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:5491,Security,access,accessing,5491,"m<float,4> >(const ROOT::Math::SVector<float,4U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,4>fRep; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:5756,Security,access,access,5756,"loat,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:6777,Security,access,access,6777,"they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functio",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:6891,Security,access,access,6891,"ator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:7007,Security,access,access,7007,"a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (w",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:7185,Security,access,access,7185,"); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SM",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:7109,Testability,assert,assert,7109,"_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunc",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html:7286,Testability,assert,assert,7286,"iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix an",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4_____SMatrixRow.html:2084,Modifiability,Inherit,Inheritance,2084,"or symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow&&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepSym<float,4> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepSym<float,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepSym<float,4> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4_____SMatrixRow.html:2097,Modifiability,Inherit,Inherited,2097,"or symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow&&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepSym<float,4> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepSym<float,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepSym<float,4> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4_____SMatrixRow_const.html:2204,Modifiability,Inherit,Inheritance,2204,"Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepSym<float,4> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepSym<float,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepSym<float,4> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4_____SMatrixRow_const.html:2217,Modifiability,Inherit,Inherited,2217,"Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepSym<float,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepSym<float,4> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepSym<float,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,4U,4U,ROOT::Math::MatRepSym<float,4> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepSym_float_4_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:9530,Availability,error,error,9530,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:9599,Availability,failure,failure,9599,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:9945,Availability,error,error,9945,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:10014,Availability,failure,failure,10014,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:11125,Availability,error,error,11125,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:5805,Integrability,interface,interface,5805,",5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:6258,Integrability,interface,interface,6258,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:6300,Integrability,interface,interface,6300,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element wi",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:6362,Integrability,interface,interface,6362,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ind",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:6422,Integrability,interface,interface,6422,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:8079,Integrability,rout,routine,8079," 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:4999,Modifiability,Inherit,Inheritance,4999,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >(const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepStd<float,5,5> >& rhs); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >(const float& rhs); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >(const ROOT::Math::SVector<float,5U*(5U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,5,5>fRep; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:5012,Modifiability,Inherit,Inherited,5012,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >(const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepStd<float,5,5> >& rhs); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >(const float& rhs); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >(const ROOT::Math::SVector<float,5U*(5U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,5,5>fRep; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:9782,Performance,perform,performing,9782,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:11475,Safety,avoid,avoid,11475,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:5441,Security,Access,Access,5441,"5> >(const ROOT::Math::SVector<float,5U*(5U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,5,5>fRep; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:5464,Security,access,access,5464,"5> >(const ROOT::Math::SVector<float,5U*(5U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,5,5>fRep; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:5569,Security,access,accessing,5569,"5> >(const ROOT::Math::SVector<float,5U*(5U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,5,5>fRep; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:5834,Security,access,access,5834,",5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:6855,Security,access,access,6855,"they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functio",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:6969,Security,access,access,6969,"ator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:7085,Security,access,access,7085,"a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (w",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:7263,Security,access,access,7263,"); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SM",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:7187,Testability,assert,assert,7187,"_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunc",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:7364,Testability,assert,assert,7364,"iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix an",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5_____SMatrixRow.html:2112,Modifiability,Inherit,Inheritance,2112,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow&&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepStd<float,5,5> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepStd<float,5,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepStd<float,5,5> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5_____SMatrixRow.html:2125,Modifiability,Inherit,Inherited,2125,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow&&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepStd<float,5,5> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepStd<float,5,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepStd<float,5,5> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5_____SMatrixRow_const.html:2232,Modifiability,Inherit,Inheritance,2232,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepStd<float,5,5> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepStd<float,5,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepStd<float,5,5> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5_____SMatrixRow_const.html:2245,Modifiability,Inherit,Inherited,2245,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepStd<float,5,5> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepStd<float,5,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepStd<float,5,5> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:9452,Availability,error,error,9452,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:9521,Availability,failure,failure,9521,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:9867,Availability,error,error,9867,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:9936,Availability,failure,failure,9936,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:11047,Availability,error,error,11047,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:5727,Integrability,interface,interface,5727,"loat,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:6180,Integrability,interface,interface,6180,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:6222,Integrability,interface,interface,6222,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element wi",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:6284,Integrability,interface,interface,6284,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ind",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:6344,Integrability,interface,interface,6344,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:8001,Integrability,rout,routine,8001," 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:4921,Modifiability,Inherit,Inheritance,4921,":MatRepSym<float,5> >(ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >(const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepSym<float,5> >& rhs); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >(const float& rhs); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >(const ROOT::Math::SVector<float,5U*(5U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,5>fRep; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:4934,Modifiability,Inherit,Inherited,4934,":MatRepSym<float,5> >(ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >(const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepSym<float,5> >& rhs); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >(const float& rhs); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >(const ROOT::Math::SVector<float,5U*(5U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,5>fRep; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:9704,Performance,perform,performing,9704,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:11397,Safety,avoid,avoid,11397,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:5363,Security,Access,Access,5363,"m<float,5> >(const ROOT::Math::SVector<float,5U*(5U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,5>fRep; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:5386,Security,access,access,5386,"m<float,5> >(const ROOT::Math::SVector<float,5U*(5U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,5>fRep; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:5491,Security,access,accessing,5491,"m<float,5> >(const ROOT::Math::SVector<float,5U*(5U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,5>fRep; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:5756,Security,access,access,5756,"loat,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:6777,Security,access,access,6777,"they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functio",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:6891,Security,access,access,6891,"ator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:7007,Security,access,access,7007,"a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (w",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:7185,Security,access,access,7185,"); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SM",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:7109,Testability,assert,assert,7109,"_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunc",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html:7286,Testability,assert,assert,7286,"iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix an",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5_____SMatrixRow.html:2084,Modifiability,Inherit,Inheritance,2084,"or symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow&&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepSym<float,5> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepSym<float,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepSym<float,5> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5_____SMatrixRow.html:2097,Modifiability,Inherit,Inherited,2097,"or symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow&&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepSym<float,5> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepSym<float,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepSym<float,5> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5_____SMatrixRow_const.html:2204,Modifiability,Inherit,Inheritance,2204,"Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepSym<float,5> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepSym<float,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepSym<float,5> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5_____SMatrixRow_const.html:2217,Modifiability,Inherit,Inherited,2217,"Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepSym<float,5> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepSym<float,5> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepSym<float,5> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,5U,5U,ROOT::Math::MatRepSym<float,5> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepSym_float_5_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:9530,Availability,error,error,9530,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:9599,Availability,failure,failure,9599,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:9945,Availability,error,error,9945,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:10014,Availability,failure,failure,10014,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:11125,Availability,error,error,11125,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:5805,Integrability,interface,interface,5805,",6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:6258,Integrability,interface,interface,6258,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:6300,Integrability,interface,interface,6300,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element wi",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:6362,Integrability,interface,interface,6362,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ind",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:6422,Integrability,interface,interface,6422,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:8079,Integrability,rout,routine,8079," 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:4999,Modifiability,Inherit,Inheritance,4999,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >(const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepStd<float,6,6> >& rhs); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >(const float& rhs); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >(const ROOT::Math::SVector<float,6U*(6U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,6,6>fRep; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:5012,Modifiability,Inherit,Inherited,5012,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >(const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepStd<float,6,6> >& rhs); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >(const float& rhs); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >(const ROOT::Math::SVector<float,6U*(6U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,6,6>fRep; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:9782,Performance,perform,performing,9782,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:11475,Safety,avoid,avoid,11475,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:5441,Security,Access,Access,5441,"6> >(const ROOT::Math::SVector<float,6U*(6U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,6,6>fRep; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:5464,Security,access,access,5464,"6> >(const ROOT::Math::SVector<float,6U*(6U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,6,6>fRep; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:5569,Security,access,accessing,5569,"6> >(const ROOT::Math::SVector<float,6U*(6U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,6,6>fRep; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:5834,Security,access,access,5834,",6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:6855,Security,access,access,6855,"they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functio",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:6969,Security,access,access,6969,"ator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:7085,Security,access,access,7085,"a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (w",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:7263,Security,access,access,7263,"); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SM",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:7187,Testability,assert,assert,7187,"_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunc",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:7364,Testability,assert,assert,7364,"iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix an",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6_____SMatrixRow.html:2112,Modifiability,Inherit,Inheritance,2112,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow&&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepStd<float,6,6> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepStd<float,6,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepStd<float,6,6> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6_____SMatrixRow.html:2125,Modifiability,Inherit,Inherited,2125,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow&&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepStd<float,6,6> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepStd<float,6,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepStd<float,6,6> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6_____SMatrixRow_const.html:2232,Modifiability,Inherit,Inheritance,2232,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepStd<float,6,6> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepStd<float,6,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepStd<float,6,6> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6_____SMatrixRow_const.html:2245,Modifiability,Inherit,Inherited,2245,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepStd<float,6,6> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepStd<float,6,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepStd<float,6,6> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:9452,Availability,error,error,9452,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:9521,Availability,failure,failure,9521,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:9867,Availability,error,error,9867,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:9936,Availability,failure,failure,9936,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:11047,Availability,error,error,11047,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:5727,Integrability,interface,interface,5727,"loat,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:6180,Integrability,interface,interface,6180,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:6222,Integrability,interface,interface,6222,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element wi",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:6284,Integrability,interface,interface,6284,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ind",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:6344,Integrability,interface,interface,6344,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:8001,Integrability,rout,routine,8001," 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:4921,Modifiability,Inherit,Inheritance,4921,":MatRepSym<float,6> >(ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >(const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepSym<float,6> >& rhs); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >(const float& rhs); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >(const ROOT::Math::SVector<float,6U*(6U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,6>fRep; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:4934,Modifiability,Inherit,Inherited,4934,":MatRepSym<float,6> >(ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >(const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepSym<float,6> >& rhs); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >(const float& rhs); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >(const ROOT::Math::SVector<float,6U*(6U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,6>fRep; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:9704,Performance,perform,performing,9704,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:11397,Safety,avoid,avoid,11397,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:5363,Security,Access,Access,5363,"m<float,6> >(const ROOT::Math::SVector<float,6U*(6U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,6>fRep; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:5386,Security,access,access,5386,"m<float,6> >(const ROOT::Math::SVector<float,6U*(6U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,6>fRep; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:5491,Security,access,accessing,5491,"m<float,6> >(const ROOT::Math::SVector<float,6U*(6U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,6>fRep; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:5756,Security,access,access,5756,"loat,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:6777,Security,access,access,6777,"they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functio",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:6891,Security,access,access,6891,"ator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:7007,Security,access,access,7007,"a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (w",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:7185,Security,access,access,7185,"); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SM",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:7109,Testability,assert,assert,7109,"_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunc",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html:7286,Testability,assert,assert,7286,"iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix an",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6_____SMatrixRow.html:2084,Modifiability,Inherit,Inheritance,2084,"or symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow&&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepSym<float,6> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepSym<float,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepSym<float,6> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6_____SMatrixRow.html:2097,Modifiability,Inherit,Inherited,2097,"or symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow&&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepSym<float,6> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepSym<float,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepSym<float,6> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6_____SMatrixRow_const.html:2204,Modifiability,Inherit,Inheritance,2204,"Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepSym<float,6> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepSym<float,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepSym<float,6> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6_____SMatrixRow_const.html:2217,Modifiability,Inherit,Inherited,2217,"Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepSym<float,6> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepSym<float,6> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepSym<float,6> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,6U,6U,ROOT::Math::MatRepSym<float,6> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepSym_float_6_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:9530,Availability,error,error,9530,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:9599,Availability,failure,failure,9599,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:9945,Availability,error,error,9945,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:10014,Availability,failure,failure,10014,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:11125,Availability,error,error,11125,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:5805,Integrability,interface,interface,5805,",7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:6258,Integrability,interface,interface,6258,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:6300,Integrability,interface,interface,6300,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element wi",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:6362,Integrability,interface,interface,6362,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ind",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:6422,Integrability,interface,interface,6422,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:8079,Integrability,rout,routine,8079," 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:4999,Modifiability,Inherit,Inheritance,4999,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >(const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepStd<float,7,7> >& rhs); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >(const float& rhs); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >(const ROOT::Math::SVector<float,7U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,7,7>fRep; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:5012,Modifiability,Inherit,Inherited,5012,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >(const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepStd<float,7,7> >& rhs); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >(const float& rhs); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >(const ROOT::Math::SVector<float,7U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,7,7>fRep; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:9782,Performance,perform,performing,9782,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:11475,Safety,avoid,avoid,11475,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:5441,Security,Access,Access,5441,"7> >(const ROOT::Math::SVector<float,7U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,7,7>fRep; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:5464,Security,access,access,5464,"7> >(const ROOT::Math::SVector<float,7U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,7,7>fRep; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:5569,Security,access,accessing,5569,"7> >(const ROOT::Math::SVector<float,7U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,7,7>fRep; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:5834,Security,access,access,5834,",7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:6855,Security,access,access,6855,"they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functio",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:6969,Security,access,access,6969,"ator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:7085,Security,access,access,7085,"a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (w",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:7263,Security,access,access,7263,"); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SM",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:7187,Testability,assert,assert,7187,"_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunc",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:7364,Testability,assert,assert,7364,"iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix an",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7_____SMatrixRow.html:2112,Modifiability,Inherit,Inheritance,2112,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow&&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepStd<float,7,7> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepStd<float,7,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepStd<float,7,7> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7_____SMatrixRow.html:2125,Modifiability,Inherit,Inherited,2125,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow&&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepStd<float,7,7> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepStd<float,7,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepStd<float,7,7> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7_____SMatrixRow_const.html:2232,Modifiability,Inherit,Inheritance,2232,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepStd<float,7,7> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepStd<float,7,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepStd<float,7,7> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7_____SMatrixRow_const.html:2245,Modifiability,Inherit,Inherited,2245,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepStd<float,7,7> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepStd<float,7,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepStd<float,7,7> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:9452,Availability,error,error,9452,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:9521,Availability,failure,failure,9521,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:9867,Availability,error,error,9867,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:9936,Availability,failure,failure,9936,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:11047,Availability,error,error,11047,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:5727,Integrability,interface,interface,5727,"loat,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:6180,Integrability,interface,interface,6180,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:6222,Integrability,interface,interface,6222,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element wi",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:6284,Integrability,interface,interface,6284,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ind",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:6344,Integrability,interface,interface,6344,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:8001,Integrability,rout,routine,8001," 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:4921,Modifiability,Inherit,Inheritance,4921,":MatRepSym<float,7> >(ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >(const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepSym<float,7> >& rhs); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >(const float& rhs); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >(const ROOT::Math::SVector<float,7U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,7>fRep; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:4934,Modifiability,Inherit,Inherited,4934,":MatRepSym<float,7> >(ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >(const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepSym<float,7> >& rhs); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >(const float& rhs); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >(const ROOT::Math::SVector<float,7U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,7>fRep; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:9704,Performance,perform,performing,9704,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:11397,Safety,avoid,avoid,11397,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:5363,Security,Access,Access,5363,"m<float,7> >(const ROOT::Math::SVector<float,7U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,7>fRep; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:5386,Security,access,access,5386,"m<float,7> >(const ROOT::Math::SVector<float,7U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,7>fRep; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:5491,Security,access,accessing,5491,"m<float,7> >(const ROOT::Math::SVector<float,7U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<float,7>fRep; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:5756,Security,access,access,5756,"loat,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:6777,Security,access,access,6777,"they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functio",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:6891,Security,access,access,6891,"ator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:7007,Security,access,access,7007,"a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (w",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:7185,Security,access,access,7185,"); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SM",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:7109,Testability,assert,assert,7109,"_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunc",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html:7286,Testability,assert,assert,7286,"iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix an",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7_____SMatrixRow.html:2084,Modifiability,Inherit,Inheritance,2084,"or symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow&&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepSym<float,7> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepSym<float,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepSym<float,7> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7_____SMatrixRow.html:2097,Modifiability,Inherit,Inherited,2097,"or symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow&&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepSym<float,7> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepSym<float,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepSym<float,7> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7_____SMatrixRow_const.html:2204,Modifiability,Inherit,Inheritance,2204,"Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepSym<float,7> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepSym<float,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepSym<float,7> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7_____SMatrixRow_const.html:2217,Modifiability,Inherit,Inherited,2217,"Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepSym<float,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepSym<float,7> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepSym<float,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,7U,7U,ROOT::Math::MatRepSym<float,7> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepSym_float_7_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:9530,Availability,error,error,9530,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:9599,Availability,failure,failure,9599,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:9945,Availability,error,error,9945,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:10014,Availability,failure,failure,10014,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. retu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:11125,Availability,error,error,11125,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:5805,Integrability,interface,interface,5805,",9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:6258,Integrability,interface,interface,6258,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:6300,Integrability,interface,interface,6300,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element wi",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:6362,Integrability,interface,interface,6362,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ind",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:6422,Integrability,interface,interface,6422,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:8079,Integrability,rout,routine,8079," 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:4999,Modifiability,Inherit,Inheritance,4999,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >(const ROOT::Math::SMatrix<float,9U,7U,ROOT::Math::MatRepStd<float,9,7> >& rhs); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >(const float& rhs); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >(const ROOT::Math::SVector<float,9U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,9U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,9,7>fRep; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:5012,Modifiability,Inherit,Inherited,5012,"ROOT::Math::SMatrixIdentity); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >(const ROOT::Math::SMatrix<float,9U,7U,ROOT::Math::MatRepStd<float,9,7> >& rhs); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >(const float& rhs); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >(const ROOT::Math::SVector<float,9U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,9U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,9,7>fRep; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:9782,Performance,perform,performing,9782,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:11475,Safety,avoid,avoid,11475,"ilure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(float& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(float& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const float* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:5441,Security,Access,Access,5441,"7> >(const ROOT::Math::SVector<float,9U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,9U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,9,7>fRep; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:5464,Security,access,access,5464,"7> >(const ROOT::Math::SVector<float,9U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,9U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,9,7>fRep; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:5569,Security,access,accessing,5569,"7> >(const ROOT::Math::SVector<float,9U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,9U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,9,7>fRep; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:5834,Security,access,access,5834,",9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:6855,Security,access,access,6855,"they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functio",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:6969,Security,access,access,6969,"ator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfu",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:7085,Security,access,access,7085,"a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (w",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:7263,Security,access,access,7263,"); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SM",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:7187,Testability,assert,assert,7187,"_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunc",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:7364,Testability,assert,assert,7364,"iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const float& rhs) const; element wise comparison. bool operator<(const float& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const float& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const float& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const float& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const float& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix an",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7_____SMatrixRow.html:2112,Modifiability,Inherit,Inheritance,2112,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow&); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow&); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow&&); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,9U,7U,ROOT::Math::MatRepStd<float,9,7> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,9U,7U,ROOT::Math::MatRepStd<float,9,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,9U,7U,ROOT::Math::MatRepStd<float,9,7> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7_____SMatrixRow.html:2125,Modifiability,Inherit,Inherited,2125,"D, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow&); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow&operator=(ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow&&); float&operator[](int j); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow&); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow&&); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<float,9U,7U,ROOT::Math::MatRepStd<float,9,7> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<float,9U,7U,ROOT::Math::MatRepStd<float,9,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<float,9U,7U,ROOT::Math::MatRepStd<float,9,7> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7_____SMatrixRow_const.html:2232,Modifiability,Inherit,Inheritance,2232,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,9U,7U,ROOT::Math::MatRepStd<float,9,7> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,9U,7U,ROOT::Math::MatRepStd<float,9,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,9U,7U,ROOT::Math::MatRepStd<float,9,7> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7_____SMatrixRow_const.html:2245,Modifiability,Inherit,Inherited,2245,"ion, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_const&&); const float&operator[](int j) const; ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_const&); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_const&&); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<float,9U,7U,ROOT::Math::MatRepStd<float,9,7> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<float,9U,7U,ROOT::Math::MatRepStd<float,9,7> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<float,9U,7U,ROOT::Math::MatRepStd<float,9,7> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html:4834,Integrability,interface,interface,4834,"a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. Double32_tfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html:4863,Integrability,interface,interface,4863,"a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. Double32_tfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html:4905,Integrability,interface,interface,4905,"OT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. Double32_tfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html:4967,Integrability,interface,interface,4967,"ouble& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. Double32_tfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html:5027,Integrability,interface,interface,5027,"a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. Double32_tfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html:4285,Modifiability,Inherit,Inheritance,4285,"& a6); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. Double32_tfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html:4298,Modifiability,Inherit,Inherited,4298,"& a6); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. Double32_tfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html:6895,Safety,avoid,avoid,6895,"(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html:4626,Security,access,access,4626,"e& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. Double32_tfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html:5607,Security,access,access,5607,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtr",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html:5708,Security,access,access,5708,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html:5801,Security,access,access,5801,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing sam",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html:5911,Security,access,access,5911,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid th",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html:6001,Security,access,access,6001,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in o",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html:6083,Security,access,access,6083,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate resul",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html:4834,Integrability,interface,interface,4834,"a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. Double32_tfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html:4863,Integrability,interface,interface,4863,"a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. Double32_tfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html:4905,Integrability,interface,interface,4905,"OT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. Double32_tfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html:4967,Integrability,interface,interface,4967,"ouble& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. Double32_tfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html:5027,Integrability,interface,interface,5027,"a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. Double32_tfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html:4285,Modifiability,Inherit,Inheritance,4285,"& a6); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. Double32_tfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html:4298,Modifiability,Inherit,Inherited,4298,"& a6); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. Double32_tfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html:6895,Safety,avoid,avoid,6895,"(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html:4626,Security,access,access,4626,"e& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. Double32_tfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html:5607,Security,access,access,5607,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtr",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html:5708,Security,access,access,5708,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html:5801,Security,access,access,5801,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing sam",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html:5911,Security,access,access,5911,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid th",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html:6001,Security,access,access,6001,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in o",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html:6083,Security,access,access,6083,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate resul",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html:4834,Integrability,interface,interface,4834,"a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. Double32_tfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html:4863,Integrability,interface,interface,4863,"a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. Double32_tfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html:4905,Integrability,interface,interface,4905,"OT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. Double32_tfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html:4967,Integrability,interface,interface,4967,"ouble& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. Double32_tfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html:5027,Integrability,interface,interface,5027,"a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. Double32_tfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html:4285,Modifiability,Inherit,Inheritance,4285,"& a6); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. Double32_tfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html:4298,Modifiability,Inherit,Inherited,4298,"& a6); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. Double32_tfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html:6895,Safety,avoid,avoid,6895,"(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html:4626,Security,access,access,4626,"e& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. Double32_tfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html:5607,Security,access,access,5607,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtr",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html:5708,Security,access,access,5708,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html:5801,Security,access,access,5801,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing sam",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html:5911,Security,access,access,5911,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid th",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html:6001,Security,access,access,6001,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in o",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html:6083,Security,access,access,6083,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate resul",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html:4834,Integrability,interface,interface,4834,"a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. Double32_tfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html:4863,Integrability,interface,interface,4863,"a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. Double32_tfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html:4905,Integrability,interface,interface,4905,"OT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. Double32_tfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html:4967,Integrability,interface,interface,4967,"ouble& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. Double32_tfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html:5027,Integrability,interface,interface,5027,"a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. Double32_tfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html:4285,Modifiability,Inherit,Inheritance,4285,"& a6); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. Double32_tfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html:4298,Modifiability,Inherit,Inherited,4298,"& a6); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. Double32_tfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html:6895,Safety,avoid,avoid,6895,"(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html:4626,Security,access,access,4626,"e& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. Double32_tfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html:5607,Security,access,access,5607,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtr",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html:5708,Security,access,access,5708,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html:5801,Security,access,access,5801,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing sam",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html:5911,Security,access,access,5911,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid th",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html:6001,Security,access,access,6001,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in o",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html:6083,Security,access,access,6083,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate resul",MatchSource.WIKI,root/html602/ROOT__Math__SVector_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html:4818,Integrability,interface,interface,4818,"le& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,2>SVector<double,2>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,2>::(anonymous)kSize. private:. doublefArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html:4847,Integrability,interface,interface,4847,"le& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,2>SVector<double,2>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,2>::(anonymous)kSize. private:. doublefArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html:4889,Integrability,interface,interface,4889,"; ROOT::Math::SVector<double,2>SVector<double,2>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,2>::(anonymous)kSize. private:. doublefArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html:4951,Integrability,interface,interface,4951,"st double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,2>::(anonymous)kSize. private:. doublefArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html:5011,Integrability,interface,interface,5011,"le& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,2>::(anonymous)kSize. private:. doublefArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html:4269,Modifiability,Inherit,Inheritance,4269,"uble& a6); ROOT::Math::SVector<double,2>SVector<double,2>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,2>SVector<double,2>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,2>SVector<double,2>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,2>SVector<double,2>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,2>::(anonymous)kSize. private:. doublefArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html:4282,Modifiability,Inherit,Inherited,4282,"uble& a6); ROOT::Math::SVector<double,2>SVector<double,2>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,2>SVector<double,2>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,2>SVector<double,2>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,2>SVector<double,2>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,2>::(anonymous)kSize. private:. doublefArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html:6879,Safety,avoid,avoid,6879,"(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html:4610,Security,access,access,4610,"ouble& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,2>SVector<double,2>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,2>SVector<double,2>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,2>::(anonymous)kSize. private:. doublefArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html:5591,Security,access,access,5591,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtr",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html:5692,Security,access,access,5692,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html:5785,Security,access,access,5785,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing sam",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html:5895,Security,access,access,5895,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid th",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html:5985,Security,access,access,5985,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in o",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html:6067,Security,access,access,6067,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate resul",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html:4818,Integrability,interface,interface,4818,"le& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. doublefArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html:4847,Integrability,interface,interface,4847,"le& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. doublefArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html:4889,Integrability,interface,interface,4889,"; ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. doublefArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html:4951,Integrability,interface,interface,4951,"st double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. doublefArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html:5011,Integrability,interface,interface,5011,"le& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. doublefArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html:4269,Modifiability,Inherit,Inheritance,4269,"uble& a6); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. doublefArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html:4282,Modifiability,Inherit,Inherited,4282,"uble& a6); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. doublefArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html:6879,Safety,avoid,avoid,6879,"(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html:4610,Security,access,access,4610,"ouble& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,3>SVector<double,3>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,3>::(anonymous)kSize. private:. doublefArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html:5591,Security,access,access,5591,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtr",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html:5692,Security,access,access,5692,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html:5785,Security,access,access,5785,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing sam",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html:5895,Security,access,access,5895,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid th",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html:5985,Security,access,access,5985,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in o",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html:6067,Security,access,access,6067,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate resul",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html:4818,Integrability,interface,interface,4818,"le& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. doublefArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html:4847,Integrability,interface,interface,4847,"le& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. doublefArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html:4889,Integrability,interface,interface,4889,"; ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. doublefArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html:4951,Integrability,interface,interface,4951,"st double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. doublefArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html:5011,Integrability,interface,interface,5011,"le& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. doublefArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html:4269,Modifiability,Inherit,Inheritance,4269,"uble& a6); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. doublefArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html:4282,Modifiability,Inherit,Inherited,4282,"uble& a6); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. doublefArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html:6879,Safety,avoid,avoid,6879,"(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html:4610,Security,access,access,4610,"ouble& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,4>SVector<double,4>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,4>::(anonymous)kSize. private:. doublefArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html:5591,Security,access,access,5591,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtr",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html:5692,Security,access,access,5692,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html:5785,Security,access,access,5785,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing sam",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html:5895,Security,access,access,5895,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid th",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html:5985,Security,access,access,5985,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in o",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html:6067,Security,access,access,6067,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate resul",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html:4818,Integrability,interface,interface,4818,"le& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. doublefArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html:4847,Integrability,interface,interface,4847,"le& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. doublefArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html:4889,Integrability,interface,interface,4889,"; ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. doublefArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html:4951,Integrability,interface,interface,4951,"st double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. doublefArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html:5011,Integrability,interface,interface,5011,"le& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. doublefArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html:4269,Modifiability,Inherit,Inheritance,4269,"uble& a6); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. doublefArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html:4282,Modifiability,Inherit,Inherited,4282,"uble& a6); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. doublefArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html:6879,Safety,avoid,avoid,6879,"(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html:4610,Security,access,access,4610,"ouble& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,5>SVector<double,5>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,5>::(anonymous)kSize. private:. doublefArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html:5591,Security,access,access,5591,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtr",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html:5692,Security,access,access,5692,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html:5785,Security,access,access,5785,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing sam",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html:5895,Security,access,access,5895,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid th",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html:5985,Security,access,access,5985,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in o",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html:6067,Security,access,access,6067,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate resul",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html:4818,Integrability,interface,interface,4818,"le& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. doublefArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html:4847,Integrability,interface,interface,4847,"le& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. doublefArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html:4889,Integrability,interface,interface,4889,"; ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. doublefArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html:4951,Integrability,interface,interface,4951,"st double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. doublefArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html:5011,Integrability,interface,interface,5011,"le& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. doublefArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html:4269,Modifiability,Inherit,Inheritance,4269,"uble& a6); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. doublefArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html:4282,Modifiability,Inherit,Inherited,4282,"uble& a6); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. doublefArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html:6879,Safety,avoid,avoid,6879,"(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html:4610,Security,access,access,4610,"ouble& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,6>SVector<double,6>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,6>::(anonymous)kSize. private:. doublefArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html:5591,Security,access,access,5591,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtr",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html:5692,Security,access,access,5692,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html:5785,Security,access,access,5785,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing sam",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html:5895,Security,access,access,5895,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid th",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html:5985,Security,access,access,5985,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in o",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html:6067,Security,access,access,6067,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate resul",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html:4818,Integrability,interface,interface,4818,"le& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,7>SVector<double,7>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,7>::(anonymous)kSize. private:. doublefArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html:4847,Integrability,interface,interface,4847,"le& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,7>SVector<double,7>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,7>::(anonymous)kSize. private:. doublefArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html:4889,Integrability,interface,interface,4889,"; ROOT::Math::SVector<double,7>SVector<double,7>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,7>::(anonymous)kSize. private:. doublefArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html:4951,Integrability,interface,interface,4951,"st double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,7>::(anonymous)kSize. private:. doublefArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html:5011,Integrability,interface,interface,5011,"le& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,7>::(anonymous)kSize. private:. doublefArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html:4269,Modifiability,Inherit,Inheritance,4269,"uble& a6); ROOT::Math::SVector<double,7>SVector<double,7>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,7>SVector<double,7>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,7>SVector<double,7>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,7>SVector<double,7>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,7>::(anonymous)kSize. private:. doublefArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html:4282,Modifiability,Inherit,Inherited,4282,"uble& a6); ROOT::Math::SVector<double,7>SVector<double,7>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7); ROOT::Math::SVector<double,7>SVector<double,7>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,7>SVector<double,7>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,7>SVector<double,7>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,7>::(anonymous)kSize. private:. doublefArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html:6879,Safety,avoid,avoid,6879,"(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html:4610,Security,access,access,4610,"ouble& a5, const double& a6, const double& a7, const double& a8); ROOT::Math::SVector<double,7>SVector<double,7>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9); ROOT::Math::SVector<double,7>SVector<double,7>(const double& a1, const double& a2, const double& a3, const double& a4, const double& a5, const double& a6, const double& a7, const double& a8, const double& a9, const double& a10); ROOT::Math::SVector<double,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<double,7>::(anonymous)kSize. private:. doublefArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html:5591,Security,access,access,5591,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtr",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html:5692,Security,access,access,5692,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html:5785,Security,access,access,5785,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing sam",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html:5895,Security,access,access,5895,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid th",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html:5985,Security,access,access,5985,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in o",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html:6067,Security,access,access,6067,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const double* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate resul",MatchSource.WIKI,root/html602/ROOT__Math__SVector_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_double_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:4686,Integrability,interface,interface,4686,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,2>SVector<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,2>::(anonymous)kSize. private:. floatfArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:4715,Integrability,interface,interface,4715,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,2>SVector<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,2>::(anonymous)kSize. private:. floatfArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:4757,Integrability,interface,interface,4757,"onst float& a9); ROOT::Math::SVector<float,2>SVector<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,2>::(anonymous)kSize. private:. floatfArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:4819,Integrability,interface,interface,4819,"<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,2>::(anonymous)kSize. private:. floatfArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:4879,Integrability,interface,interface,4879,"const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,2>::(anonymous)kSize. private:. floatfArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:4137,Modifiability,Inherit,Inheritance,4137,"a3, const float& a4, const float& a5, const float& a6); ROOT::Math::SVector<float,2>SVector<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7); ROOT::Math::SVector<float,2>SVector<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,2>SVector<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,2>SVector<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,2>::(anonymous)kSize. private:. floatfArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:4150,Modifiability,Inherit,Inherited,4150,"a3, const float& a4, const float& a5, const float& a6); ROOT::Math::SVector<float,2>SVector<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7); ROOT::Math::SVector<float,2>SVector<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,2>SVector<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,2>SVector<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,2>::(anonymous)kSize. private:. floatfArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:6744,Safety,avoid,avoid,6744,"or>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:4478,Security,access,access,4478,"& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,2>SVector<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,2>SVector<float,2>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,2U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,2>::(anonymous)kSize. private:. floatfArray[2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:5459,Security,access,access,5459,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtrac",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:5560,Security,access,access,5560,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:5653,Security,access,access,5653,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same m",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:5763,Security,access,access,5763,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the a",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:5853,Security,access,access,5853,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in oper",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:5935,Security,access,access,5935,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:4686,Integrability,interface,interface,4686,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,3>SVector<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,3>::(anonymous)kSize. private:. floatfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:4715,Integrability,interface,interface,4715,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,3>SVector<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,3>::(anonymous)kSize. private:. floatfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:4757,Integrability,interface,interface,4757,"onst float& a9); ROOT::Math::SVector<float,3>SVector<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,3>::(anonymous)kSize. private:. floatfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:4819,Integrability,interface,interface,4819,"<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,3>::(anonymous)kSize. private:. floatfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:4879,Integrability,interface,interface,4879,"const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,3>::(anonymous)kSize. private:. floatfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:4137,Modifiability,Inherit,Inheritance,4137,"a3, const float& a4, const float& a5, const float& a6); ROOT::Math::SVector<float,3>SVector<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7); ROOT::Math::SVector<float,3>SVector<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,3>SVector<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,3>SVector<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,3>::(anonymous)kSize. private:. floatfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:4150,Modifiability,Inherit,Inherited,4150,"a3, const float& a4, const float& a5, const float& a6); ROOT::Math::SVector<float,3>SVector<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7); ROOT::Math::SVector<float,3>SVector<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,3>SVector<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,3>SVector<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,3>::(anonymous)kSize. private:. floatfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:6744,Safety,avoid,avoid,6744,"or>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:4478,Security,access,access,4478,"& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,3>SVector<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,3>SVector<float,3>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,3U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,3>::(anonymous)kSize. private:. floatfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:5459,Security,access,access,5459,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtrac",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:5560,Security,access,access,5560,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:5653,Security,access,access,5653,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same m",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:5763,Security,access,access,5763,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the a",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:5853,Security,access,access,5853,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in oper",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html:5935,Security,access,access,5935,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_3_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:4686,Integrability,interface,interface,4686,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,4>SVector<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,4>::(anonymous)kSize. private:. floatfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:4715,Integrability,interface,interface,4715,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,4>SVector<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,4>::(anonymous)kSize. private:. floatfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:4757,Integrability,interface,interface,4757,"onst float& a9); ROOT::Math::SVector<float,4>SVector<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,4>::(anonymous)kSize. private:. floatfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:4819,Integrability,interface,interface,4819,"<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,4>::(anonymous)kSize. private:. floatfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:4879,Integrability,interface,interface,4879,"const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,4>::(anonymous)kSize. private:. floatfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:4137,Modifiability,Inherit,Inheritance,4137,"a3, const float& a4, const float& a5, const float& a6); ROOT::Math::SVector<float,4>SVector<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7); ROOT::Math::SVector<float,4>SVector<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,4>SVector<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,4>SVector<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,4>::(anonymous)kSize. private:. floatfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:4150,Modifiability,Inherit,Inherited,4150,"a3, const float& a4, const float& a5, const float& a6); ROOT::Math::SVector<float,4>SVector<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7); ROOT::Math::SVector<float,4>SVector<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,4>SVector<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,4>SVector<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,4>::(anonymous)kSize. private:. floatfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:6744,Safety,avoid,avoid,6744,"or>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:4478,Security,access,access,4478,"& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,4>SVector<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,4>SVector<float,4>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,4U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,4>::(anonymous)kSize. private:. floatfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:5459,Security,access,access,5459,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtrac",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:5560,Security,access,access,5560,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:5653,Security,access,access,5653,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same m",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:5763,Security,access,access,5763,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the a",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:5853,Security,access,access,5853,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in oper",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html:5935,Security,access,access,5935,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_4_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:4686,Integrability,interface,interface,4686,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,5>SVector<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,5>::(anonymous)kSize. private:. floatfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:4715,Integrability,interface,interface,4715,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,5>SVector<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,5>::(anonymous)kSize. private:. floatfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:4757,Integrability,interface,interface,4757,"onst float& a9); ROOT::Math::SVector<float,5>SVector<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,5>::(anonymous)kSize. private:. floatfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:4819,Integrability,interface,interface,4819,"<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,5>::(anonymous)kSize. private:. floatfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:4879,Integrability,interface,interface,4879,"const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,5>::(anonymous)kSize. private:. floatfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:4137,Modifiability,Inherit,Inheritance,4137,"a3, const float& a4, const float& a5, const float& a6); ROOT::Math::SVector<float,5>SVector<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7); ROOT::Math::SVector<float,5>SVector<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,5>SVector<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,5>SVector<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,5>::(anonymous)kSize. private:. floatfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:4150,Modifiability,Inherit,Inherited,4150,"a3, const float& a4, const float& a5, const float& a6); ROOT::Math::SVector<float,5>SVector<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7); ROOT::Math::SVector<float,5>SVector<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,5>SVector<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,5>SVector<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,5>::(anonymous)kSize. private:. floatfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:6744,Safety,avoid,avoid,6744,"or>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:4478,Security,access,access,4478,"& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,5>SVector<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,5>SVector<float,5>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,5U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,5>::(anonymous)kSize. private:. floatfArray[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:5459,Security,access,access,5459,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtrac",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:5560,Security,access,access,5560,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:5653,Security,access,access,5653,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same m",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:5763,Security,access,access,5763,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the a",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:5853,Security,access,access,5853,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in oper",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html:5935,Security,access,access,5935,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_5_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:4686,Integrability,interface,interface,4686,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,6>SVector<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,6>::(anonymous)kSize. private:. floatfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:4715,Integrability,interface,interface,4715,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,6>SVector<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,6>::(anonymous)kSize. private:. floatfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:4757,Integrability,interface,interface,4757,"onst float& a9); ROOT::Math::SVector<float,6>SVector<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,6>::(anonymous)kSize. private:. floatfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:4819,Integrability,interface,interface,4819,"<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,6>::(anonymous)kSize. private:. floatfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:4879,Integrability,interface,interface,4879,"const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,6>::(anonymous)kSize. private:. floatfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:4137,Modifiability,Inherit,Inheritance,4137,"a3, const float& a4, const float& a5, const float& a6); ROOT::Math::SVector<float,6>SVector<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7); ROOT::Math::SVector<float,6>SVector<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,6>SVector<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,6>SVector<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,6>::(anonymous)kSize. private:. floatfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:4150,Modifiability,Inherit,Inherited,4150,"a3, const float& a4, const float& a5, const float& a6); ROOT::Math::SVector<float,6>SVector<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7); ROOT::Math::SVector<float,6>SVector<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,6>SVector<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,6>SVector<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,6>::(anonymous)kSize. private:. floatfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:6744,Safety,avoid,avoid,6744,"or>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:4478,Security,access,access,4478,"& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,6>SVector<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,6>SVector<float,6>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,6U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,6>::(anonymous)kSize. private:. floatfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:5459,Security,access,access,5459,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtrac",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:5560,Security,access,access,5560,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:5653,Security,access,access,5653,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same m",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:5763,Security,access,access,5763,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the a",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:5853,Security,access,access,5853,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in oper",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html:5935,Security,access,access,5935,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_6_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:4686,Integrability,interface,interface,4686,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,7>SVector<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,7>::(anonymous)kSize. private:. floatfArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:4715,Integrability,interface,interface,4715,"oat& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,7>SVector<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,7>::(anonymous)kSize. private:. floatfArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with che",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:4757,Integrability,interface,interface,4757,"onst float& a9); ROOT::Math::SVector<float,7>SVector<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,7>::(anonymous)kSize. private:. floatfArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:4819,Integrability,interface,interface,4819,"<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,7>::(anonymous)kSize. private:. floatfArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index sta",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:4879,Integrability,interface,interface,4879,"const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,7>::(anonymous)kSize. private:. floatfArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:4137,Modifiability,Inherit,Inheritance,4137,"a3, const float& a4, const float& a5, const float& a6); ROOT::Math::SVector<float,7>SVector<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7); ROOT::Math::SVector<float,7>SVector<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,7>SVector<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,7>SVector<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,7>::(anonymous)kSize. private:. floatfArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:4150,Modifiability,Inherit,Inherited,4150,"a3, const float& a4, const float& a5, const float& a6); ROOT::Math::SVector<float,7>SVector<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7); ROOT::Math::SVector<float,7>SVector<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,7>SVector<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,7>SVector<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,7>::(anonymous)kSize. private:. floatfArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison.",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:6744,Safety,avoid,avoid,6744,"or>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:4478,Security,access,access,4478,"& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8); ROOT::Math::SVector<float,7>SVector<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9); ROOT::Math::SVector<float,7>SVector<float,7>(const float& a1, const float& a2, const float& a3, const float& a4, const float& a5, const float& a6, const float& a7, const float& a8, const float& a9, const float& a10); ROOT::Math::SVector<float,7U>&Unit(). Data Members; public:. static ROOT::Math::SVector<float,7>::(anonymous)kSize. private:. floatfArray[7]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SVector<T,D>& operator=(const T& a1); assignment from a scalar (only for size 1 vector). SVector<T,D>& operator=(const VecExpr<A,T,D>& rhs); assignment from Vector Expression. unsigned int Dim(); return dimension $D$. { return D; }. T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vect",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:5459,Security,access,access,5459,". T apply(unsigned int i) const; access the parse tree. Index starts from zero. const T* Array() const; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtrac",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:5560,Security,access,access,5560,"t; return read-only pointer to internal array. T* Array(); return non-const pointer to internal array. iterator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector int",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:5653,Security,access,access,5653,"ator begin(); @name --- STL-like interface --- ; STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same m",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:5763,Security,access,access,5763,"or interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the a",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:5853,Security,access,access,5853,"or end() const; STL const_iterator interface. . bool operator==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in oper",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html
https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html:5935,Security,access,access,5935,"rs --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result i",MatchSource.WIKI,root/html602/ROOT__Math__SVector_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_7_.html
https://root.cern/root/html602/ROOT__Math__TDataPointN_double_.html:1125,Modifiability,Inherit,Inheritance,1125,". ROOT::Math::TDataPointN<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<double>. class ROOT::Math::TDataPointN<double>. Function Members (Methods); public:. virtual~TDataPointN<double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; doubleGetWeight() const; boolLess(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<double>&operator=(const ROOT::Math::TDataPointN<double>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<double>TDataPointN<double>(); ROOT::Math::TDataPointN<double>TDataPointN<double>(const ROOT::Math::TDataPointN<double>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<double>::value_typem_fWeight; ROOT::Math::TDataPointN<double>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__TDataPointN_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPointN_double_.html
https://root.cern/root/html602/ROOT__Math__TDataPointN_double_.html:1138,Modifiability,Inherit,Inherited,1138,". ROOT::Math::TDataPointN<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<double>. class ROOT::Math::TDataPointN<double>. Function Members (Methods); public:. virtual~TDataPointN<double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; doubleGetWeight() const; boolLess(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<double>&operator=(const ROOT::Math::TDataPointN<double>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<double>TDataPointN<double>(); ROOT::Math::TDataPointN<double>TDataPointN<double>(const ROOT::Math::TDataPointN<double>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<double>::value_typem_fWeight; ROOT::Math::TDataPointN<double>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__TDataPointN_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPointN_double_.html
https://root.cern/root/html602/ROOT__Math__TDataPointN_double_.html:1276,Testability,assert,assert,1276,". ROOT::Math::TDataPointN<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<double>. class ROOT::Math::TDataPointN<double>. Function Members (Methods); public:. virtual~TDataPointN<double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; doubleGetWeight() const; boolLess(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<double>&operator=(const ROOT::Math::TDataPointN<double>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<double>TDataPointN<double>(); ROOT::Math::TDataPointN<double>TDataPointN<double>(const ROOT::Math::TDataPointN<double>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<double>::value_typem_fWeight; ROOT::Math::TDataPointN<double>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__TDataPointN_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPointN_double_.html
https://root.cern/root/html602/ROOT__Math__TDataPointN_float_.html:1108,Modifiability,Inherit,Inheritance,1108,". ROOT::Math::TDataPointN<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<float>. class ROOT::Math::TDataPointN<float>. Function Members (Methods); public:. virtual~TDataPointN<float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; floatGetWeight() const; boolLess(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<float>&operator=(const ROOT::Math::TDataPointN<float>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<float>TDataPointN<float>(); ROOT::Math::TDataPointN<float>TDataPointN<float>(const ROOT::Math::TDataPointN<float>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<float>::value_typem_fWeight; ROOT::Math::TDataPointN<float>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__TDataPointN_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPointN_float_.html
https://root.cern/root/html602/ROOT__Math__TDataPointN_float_.html:1121,Modifiability,Inherit,Inherited,1121,". ROOT::Math::TDataPointN<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<float>. class ROOT::Math::TDataPointN<float>. Function Members (Methods); public:. virtual~TDataPointN<float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; floatGetWeight() const; boolLess(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<float>&operator=(const ROOT::Math::TDataPointN<float>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<float>TDataPointN<float>(); ROOT::Math::TDataPointN<float>TDataPointN<float>(const ROOT::Math::TDataPointN<float>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<float>::value_typem_fWeight; ROOT::Math::TDataPointN<float>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__TDataPointN_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPointN_float_.html
https://root.cern/root/html602/ROOT__Math__TDataPointN_float_.html:1259,Testability,assert,assert,1259,". ROOT::Math::TDataPointN<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<float>. class ROOT::Math::TDataPointN<float>. Function Members (Methods); public:. virtual~TDataPointN<float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; floatGetWeight() const; boolLess(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<float>&operator=(const ROOT::Math::TDataPointN<float>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<float>TDataPointN<float>(); ROOT::Math::TDataPointN<float>TDataPointN<float>(const ROOT::Math::TDataPointN<float>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<float>::value_typem_fWeight; ROOT::Math::TDataPointN<float>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__TDataPointN_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPointN_float_.html
https://root.cern/root/html602/ROOT__Math__TDataPoint_1_double_.html:1387,Modifiability,Inherit,Inheritance,1387,",double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPoint<1,double>. class ROOT::Math::TDataPoint<1,double>. Function Members (Methods); public:. ~TDataPoint<1,double>(); static UInt_tDimension(); ROOT::Math::TDataPoint<1,double>::value_typeGetCoordinate(unsigned int iAxis) const; ROOT::Math::TDataPoint<1,double>::value_typeGetWeight() const; Bool_tLess(ROOT::Math::TDataPoint<1,double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPoint<1,double>&operator=(const ROOT::Math::TDataPoint<1,double>&); ROOT::Math::TDataPoint<1,double>&operator=(ROOT::Math::TDataPoint<1,double>&&); voidSetCoordinate(unsigned int iAxis, double fValue); voidSetWeight(float fWeight); ROOT::Math::TDataPoint<1,double>TDataPoint<1,double>(); ROOT::Math::TDataPoint<1,double>TDataPoint<1,double>(const ROOT::Math::TDataPoint<1,double>&); ROOT::Math::TDataPoint<1,double>TDataPoint<1,double>(ROOT::Math::TDataPoint<1,double>&&). Data Members; public:. static ROOT::Math::TDataPoint<1,double>::(anonymous)kDimension. private:. ROOT::Math::TDataPoint<1,double>::value_typem_fWeightweight at this point; ROOT::Math::TDataPoint<1,double>::value_typem_vCoordinates[1]coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. value_type GetCoordinate(unsigned int iAxis) const. value_type GetWeight() const; {return m_fWeight;}. Bool_t Less(ROOT::Math::TDataPoint<1,double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, double fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__TDataPoint_1_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPoint_1_double_.html
https://root.cern/root/html602/ROOT__Math__TDataPoint_1_double_.html:1400,Modifiability,Inherit,Inherited,1400,",double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPoint<1,double>. class ROOT::Math::TDataPoint<1,double>. Function Members (Methods); public:. ~TDataPoint<1,double>(); static UInt_tDimension(); ROOT::Math::TDataPoint<1,double>::value_typeGetCoordinate(unsigned int iAxis) const; ROOT::Math::TDataPoint<1,double>::value_typeGetWeight() const; Bool_tLess(ROOT::Math::TDataPoint<1,double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPoint<1,double>&operator=(const ROOT::Math::TDataPoint<1,double>&); ROOT::Math::TDataPoint<1,double>&operator=(ROOT::Math::TDataPoint<1,double>&&); voidSetCoordinate(unsigned int iAxis, double fValue); voidSetWeight(float fWeight); ROOT::Math::TDataPoint<1,double>TDataPoint<1,double>(); ROOT::Math::TDataPoint<1,double>TDataPoint<1,double>(const ROOT::Math::TDataPoint<1,double>&); ROOT::Math::TDataPoint<1,double>TDataPoint<1,double>(ROOT::Math::TDataPoint<1,double>&&). Data Members; public:. static ROOT::Math::TDataPoint<1,double>::(anonymous)kDimension. private:. ROOT::Math::TDataPoint<1,double>::value_typem_fWeightweight at this point; ROOT::Math::TDataPoint<1,double>::value_typem_vCoordinates[1]coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. value_type GetCoordinate(unsigned int iAxis) const. value_type GetWeight() const; {return m_fWeight;}. Bool_t Less(ROOT::Math::TDataPoint<1,double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, double fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__TDataPoint_1_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPoint_1_double_.html
https://root.cern/root/html602/ROOT__Math__TDataPoint_1_float_.html:1364,Modifiability,Inherit,Inheritance,1364," ROOT::Math::TDataPoint<1,float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPoint<1,float>. class ROOT::Math::TDataPoint<1,float>. Function Members (Methods); public:. ~TDataPoint<1,float>(); static UInt_tDimension(); ROOT::Math::TDataPoint<1,float>::value_typeGetCoordinate(unsigned int iAxis) const; ROOT::Math::TDataPoint<1,float>::value_typeGetWeight() const; Bool_tLess(ROOT::Math::TDataPoint<1,float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPoint<1,float>&operator=(const ROOT::Math::TDataPoint<1,float>&); ROOT::Math::TDataPoint<1,float>&operator=(ROOT::Math::TDataPoint<1,float>&&); voidSetCoordinate(unsigned int iAxis, float fValue); voidSetWeight(float fWeight); ROOT::Math::TDataPoint<1,float>TDataPoint<1,float>(); ROOT::Math::TDataPoint<1,float>TDataPoint<1,float>(const ROOT::Math::TDataPoint<1,float>&); ROOT::Math::TDataPoint<1,float>TDataPoint<1,float>(ROOT::Math::TDataPoint<1,float>&&). Data Members; public:. static ROOT::Math::TDataPoint<1,float>::(anonymous)kDimension. private:. ROOT::Math::TDataPoint<1,float>::value_typem_fWeightweight at this point; ROOT::Math::TDataPoint<1,float>::value_typem_vCoordinates[1]coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. value_type GetCoordinate(unsigned int iAxis) const. value_type GetWeight() const; {return m_fWeight;}. Bool_t Less(ROOT::Math::TDataPoint<1,float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, float fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__TDataPoint_1_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPoint_1_float_.html
https://root.cern/root/html602/ROOT__Math__TDataPoint_1_float_.html:1377,Modifiability,Inherit,Inherited,1377," ROOT::Math::TDataPoint<1,float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPoint<1,float>. class ROOT::Math::TDataPoint<1,float>. Function Members (Methods); public:. ~TDataPoint<1,float>(); static UInt_tDimension(); ROOT::Math::TDataPoint<1,float>::value_typeGetCoordinate(unsigned int iAxis) const; ROOT::Math::TDataPoint<1,float>::value_typeGetWeight() const; Bool_tLess(ROOT::Math::TDataPoint<1,float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPoint<1,float>&operator=(const ROOT::Math::TDataPoint<1,float>&); ROOT::Math::TDataPoint<1,float>&operator=(ROOT::Math::TDataPoint<1,float>&&); voidSetCoordinate(unsigned int iAxis, float fValue); voidSetWeight(float fWeight); ROOT::Math::TDataPoint<1,float>TDataPoint<1,float>(); ROOT::Math::TDataPoint<1,float>TDataPoint<1,float>(const ROOT::Math::TDataPoint<1,float>&); ROOT::Math::TDataPoint<1,float>TDataPoint<1,float>(ROOT::Math::TDataPoint<1,float>&&). Data Members; public:. static ROOT::Math::TDataPoint<1,float>::(anonymous)kDimension. private:. ROOT::Math::TDataPoint<1,float>::value_typem_fWeightweight at this point; ROOT::Math::TDataPoint<1,float>::value_typem_vCoordinates[1]coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. value_type GetCoordinate(unsigned int iAxis) const. value_type GetWeight() const; {return m_fWeight;}. Bool_t Less(ROOT::Math::TDataPoint<1,float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, float fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__TDataPoint_1_float_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPoint_1_float_.html
https://root.cern/root/html602/ROOT__Math__Transform3D.html:6547,Modifiability,Inherit,Inheritance,6547,"From(const ROOT::Math::Transform3D::Vector& v); voidAssignFrom(const ROOT::Math::Rotation3D& r, const ROOT::Math::Transform3D::Vector& v); voidSetIdentity(). Data Members; public:. static ROOT::Math::Transform3D::ETransform3DMatrixIndexkDX; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkDY; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkDZ; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkXX; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkXY; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkXZ; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkYX; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkYY; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkYZ; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkZX; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkZY; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkZZ. private:. doublefM[12]transformation elements (3x4 matrix). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Transform3D(). Default constructor (identy rotation) + zero translation. SetIdentity(). Transform3D(IT begin, IT end). Construct given a pair of pointers or iterators defining the; beginning and end of an array of 12 Scalars. SetComponents(begin,end). Transform3D( const Rotation3D & r, const Vector & v). Construct from a rotation and then a translation described by a Vector. AssignFrom(const ROOT::Math::Rotation3D& r, const ROOT::Math::Transform3D::Vector& v). Transform3D( const Rotation3D & r, const Translation3D & t). Construct from a rotation and then a translation described by a Translation3D class. AssignFrom(const ROOT::Math::Rotation3D& r, const ROOT::Math::Transform3D::Vector& v). Transform3D( const ARotation & r, const DisplacementVector3D<CoordSystem,Tag> & v). Construct from a rotation (any rotation object) and then a translation; (represented by any DisplacementVector); The requirements on the rotation and vector objects ar",MatchSource.WIKI,root/html602/ROOT__Math__Transform3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Transform3D.html
https://root.cern/root/html602/ROOT__Math__Transform3D.html:6560,Modifiability,Inherit,Inherited,6560,"From(const ROOT::Math::Transform3D::Vector& v); voidAssignFrom(const ROOT::Math::Rotation3D& r, const ROOT::Math::Transform3D::Vector& v); voidSetIdentity(). Data Members; public:. static ROOT::Math::Transform3D::ETransform3DMatrixIndexkDX; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkDY; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkDZ; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkXX; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkXY; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkXZ; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkYX; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkYY; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkYZ; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkZX; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkZY; static ROOT::Math::Transform3D::ETransform3DMatrixIndexkZZ. private:. doublefM[12]transformation elements (3x4 matrix). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Transform3D(). Default constructor (identy rotation) + zero translation. SetIdentity(). Transform3D(IT begin, IT end). Construct given a pair of pointers or iterators defining the; beginning and end of an array of 12 Scalars. SetComponents(begin,end). Transform3D( const Rotation3D & r, const Vector & v). Construct from a rotation and then a translation described by a Vector. AssignFrom(const ROOT::Math::Rotation3D& r, const ROOT::Math::Transform3D::Vector& v). Transform3D( const Rotation3D & r, const Translation3D & t). Construct from a rotation and then a translation described by a Translation3D class. AssignFrom(const ROOT::Math::Rotation3D& r, const ROOT::Math::Transform3D::Vector& v). Transform3D( const ARotation & r, const DisplacementVector3D<CoordSystem,Tag> & v). Construct from a rotation (any rotation object) and then a translation; (represented by any DisplacementVector); The requirements on the rotation and vector objects ar",MatchSource.WIKI,root/html602/ROOT__Math__Transform3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Transform3D.html
https://root.cern/root/html602/ROOT__Math__Transform3D.html:530,Usability,simpl,simple,530,". ROOT::Math::Transform3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::Transform3D. class ROOT::Math::Transform3D. Basic 3D Transformation class describing a rotation and then a translation; The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data.; They are represented and held in this class like a 3x4 matrix (a simple array of 12 numbers). The class can be constructed from any 3D rotation object; (ROOT::Math::Rotation3D, ROOT::Math::AxisAngle, ROOT::Math::Quaternion, etc...) and/or; a 3D Vector (ROOT::Math::DislacementVector3D or via ROOT::Math::Translation ) representing a Translation.; The Transformation is defined by applying first the rotation and then the translation.; A transformation defined by applying first a translation and then a rotation is equivalent to the; transformation obtained applying first the rotation and then a translation equivalent to the rotated vector.; The operator * can be used to obtain directly such transformations, in addition to combine various; transformations.; Keep in mind that the operator * (like in the case of rotations ) is not commutative.; The operator * is used (in addition to operator() ) to apply a transformations on the vector; (DisplacementVector3D and LorentzVector classes) and point (PositionVector3D) classes.; In the case of Vector objects the transformation only rotates them and does not translate them.; Only Point objects are able to be both rotated and translated. @ingroup GenVector. Function Members (Methods); public:. ~Transform3D(); voidGetComponents(double& xx, double& xy, double& xz, double& dx, double& yx, double& yy, double& yz, double& dy, double& zx, double& zy, double& zz, double& dz) const; voidGetDecomposition(ROOT::Math::Rotation3D& r, ROOT::Math::Transform3D::Vector& v) const; voidGetRotat",MatchSource.WIKI,root/html602/ROOT__Math__Transform3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Transform3D.html
https://root.cern/root/html602/ROOT__Math__Translation3D.html:2136,Modifiability,Inherit,Inheritance,2136,"n3D& t) const; ROOT::Math::Translation3D&operator*=(const ROOT::Math::Translation3D& t); ROOT::Math::Translation3D&operator=(const ROOT::Math::Translation3D&); ROOT::Math::Translation3D&operator=(ROOT::Math::Translation3D&&); booloperator==(const ROOT::Math::Translation3D& rhs) const; voidSetComponents(double dx, double dy, double dz); voidSetXYZ(double dx, double dy, double dz); ROOT::Math::Translation3DTranslation3D(); ROOT::Math::Translation3DTranslation3D(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& v); ROOT::Math::Translation3DTranslation3D(const ROOT::Math::Translation3D&); ROOT::Math::Translation3DTranslation3D(ROOT::Math::Translation3D&&); ROOT::Math::Translation3DTranslation3D(double dx, double dy, double dz); const ROOT::Math::Translation3D::Vector&Vect() const. Data Members; private:. ROOT::Math::Translation3D::VectorfVectinternal 3D vector representing the translation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Translation3D(). Default constructor ( zero translation ). {}. Translation3D(IT begin, IT end). Construct given a pair of pointers or iterators defining the; beginning and end of an array of 3 Scalars representing the z,y,z of the translation vector. Translation3D(double dx, double dy, double dz). Construct from x,y,z values representing the translation. { }. explicit Translation3D( const DisplacementVector3D<CoordSystem,Tag> & v). Construct from any Displacement vector in ant tag and coordinate system. { }. Translation3D(const PositionVector3D<CoordSystem,Tag> & p1, const PositionVector3D<CoordSystem,Tag> & p2 ). Construct transformation from one coordinate system defined one point (the origin); to a new coordinate system defined by other point (origin ); @param p1 point defining origin of original reference system; @param p2 point defining origin of transformed reference system. { }. void SetComponents(IT begin, IT end). Set the 3 co",MatchSource.WIKI,root/html602/ROOT__Math__Translation3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Translation3D.html
https://root.cern/root/html602/ROOT__Math__Translation3D.html:2149,Modifiability,Inherit,Inherited,2149,"n3D& t) const; ROOT::Math::Translation3D&operator*=(const ROOT::Math::Translation3D& t); ROOT::Math::Translation3D&operator=(const ROOT::Math::Translation3D&); ROOT::Math::Translation3D&operator=(ROOT::Math::Translation3D&&); booloperator==(const ROOT::Math::Translation3D& rhs) const; voidSetComponents(double dx, double dy, double dz); voidSetXYZ(double dx, double dy, double dz); ROOT::Math::Translation3DTranslation3D(); ROOT::Math::Translation3DTranslation3D(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& v); ROOT::Math::Translation3DTranslation3D(const ROOT::Math::Translation3D&); ROOT::Math::Translation3DTranslation3D(ROOT::Math::Translation3D&&); ROOT::Math::Translation3DTranslation3D(double dx, double dy, double dz); const ROOT::Math::Translation3D::Vector&Vect() const. Data Members; private:. ROOT::Math::Translation3D::VectorfVectinternal 3D vector representing the translation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Translation3D(). Default constructor ( zero translation ). {}. Translation3D(IT begin, IT end). Construct given a pair of pointers or iterators defining the; beginning and end of an array of 3 Scalars representing the z,y,z of the translation vector. Translation3D(double dx, double dy, double dz). Construct from x,y,z values representing the translation. { }. explicit Translation3D( const DisplacementVector3D<CoordSystem,Tag> & v). Construct from any Displacement vector in ant tag and coordinate system. { }. Translation3D(const PositionVector3D<CoordSystem,Tag> & p1, const PositionVector3D<CoordSystem,Tag> & p2 ). Construct transformation from one coordinate system defined one point (the origin); to a new coordinate system defined by other point (origin ); @param p1 point defining origin of original reference system; @param p2 point defining origin of transformed reference system. { }. void SetComponents(IT begin, IT end). Set the 3 co",MatchSource.WIKI,root/html602/ROOT__Math__Translation3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Translation3D.html
https://root.cern/root/html602/ROOT__Math__Translation3D.html:640,Performance,perform,performes,640,". ROOT::Math::Translation3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::Translation3D. class ROOT::Math::Translation3D. Class describing a 3 dimensional translation. It can be combined (using the operator *); with the ROOT::Math::Rotation3D classes and ROOT::Math::Transform3D to obtained combined; transformations and to operate on points and vectors.; Note that a the translation applied to a Vector object (DisplacementVector3D and LorentzVector classes); performes a noop, i.e. it returns the same vector. A translation can be applied only to the Point objects; (PositionVector3D classes). @ingroup GenVector. Function Members (Methods); public:. ~Translation3D(); voidGetComponents(double& dx, double& dy, double& dz) const; ROOT::Math::Translation3DInverse() const; voidInvert(); booloperator!=(const ROOT::Math::Translation3D& rhs) const; ROOT::Math::Plane3Doperator()(const ROOT::Math::Plane3D& plane) const; ROOT::Math::Translation3Doperator*(const ROOT::Math::Translation3D& t) const; ROOT::Math::Translation3D&operator*=(const ROOT::Math::Translation3D& t); ROOT::Math::Translation3D&operator=(const ROOT::Math::Translation3D&); ROOT::Math::Translation3D&operator=(ROOT::Math::Translation3D&&); booloperator==(const ROOT::Math::Translation3D& rhs) const; voidSetComponents(double dx, double dy, double dz); voidSetXYZ(double dx, double dy, double dz); ROOT::Math::Translation3DTranslation3D(); ROOT::Math::Translation3DTranslation3D(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& v); ROOT::Math::Translation3DTranslation3D(const ROOT::Math::Translation3D&); ROOT::Math::Translation3DTranslation3D(ROOT::Math::Translation3D&&); ROOT::Math::Translation3DTranslation3D(double dx, double dy, double dz); const ROOT::Math::Translation3D::Vector&Vect",MatchSource.WIKI,root/html602/ROOT__Math__Translation3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Translation3D.html
https://root.cern/root/html602/ROOT__Math__Vavilov.html:1639,Availability,Avail,Available,1639," \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class Vavilov,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::Mean(kappa, beta2); and sqrt(Vavilov::Variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. Two subclasses are provided:; - VavilovFast uses the algorithm by; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; which has been implemented in; <A HREF=""http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/g115/top.html"">; CERNLIB (G115)</A>. - VavilovAccurate uses the algorithm by; B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers,; <A HREF=""http://dx.do",MatchSource.WIKI,root/html602/ROOT__Math__Vavilov.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Vavilov.html
https://root.cern/root/html602/ROOT__Math__Vavilov.html:3631,Availability,avail,available,3631,"om numbers,; <A HREF=""http://dx.doi.org/10.1016/0010-4655(74)90091-5"">Computer Phys. Comm. 7 (1974) 215-224</A>,; which has been implemented in; <A HREF=""http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/g116/top.html"">; CERNLIB (G116)</A>. Both subclasses store coefficients needed to calculate \f$p(\lambda; \kappa, \beta^2)\f$; for fixed values of \f$\kappa\f$ and \f$\beta^2\f$.; Changing these values is computationally expensive. VavilovFast is about 5 times faster for the calculation of the Pdf than VavilovAccurate;; initialization takes about 100 times longer than calculation of the Pdf value.; For the quantile calculation, VavilovFast; is 30 times faster for the initialization, and 6 times faster for; subsequent calculations. Initialization for Quantile takes; 27 (11) times longer than subsequent calls for VavilovFast (VavilovAccurate). @ingroup StatFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Vavilov(); virtual doubleCdf(double x) const; virtual doubleCdf(double x, double kappa, double beta2); virtual doubleCdf_c(double x) const; virtual doubleCdf_c(double x, double kappa, double beta2); virtual doubleGetBeta2() const; virtual doubleGetKappa() const; virtual doubleGetLambdaMax() const; virtual doubleGetLambdaMin() const; virtual doubleKurtosis() const; static doubleKurtosis(double kappa, double beta2); virtual doubleMean() const; static doubleMean(double kappa, double beta2); virtual doubleMode() const; virtual doubleMode(double kappa, double beta2); ROOT::Math::Vavilov&operator=(const ROOT::Math::Vavilov&); virtual doublePdf(double x) const; virtual doublePdf(double x, double kappa, double beta2); virtual doubleQuantile(double z) const; virtual doubleQuantile(double z, double kappa, double beta2); virtual doubleQuantile_c(double z) const; virtual doubleQuantile_c(double z, double kappa, double beta2); virtual voidSetKappaBet",MatchSource.WIKI,root/html602/ROOT__Math__Vavilov.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Vavilov.html
https://root.cern/root/html602/ROOT__Math__Vavilov.html:408,Energy Efficiency,energy,energy,408,". ROOT::Math::Vavilov. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Vavilov. class ROOT::Math::Vavilov. Base class describing a Vavilov distribution. The Vavilov distribution is defined in; P.V. Vavilov: Ionization losses of high-energy heavy particles,; Sov. Phys. JETP 5 (1957) 749 [Zh. Eksp. Teor. Fiz. 32 (1957) 920]. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class Vavilov,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::Mean(kappa, beta2); and",MatchSource.WIKI,root/html602/ROOT__Math__Vavilov.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Vavilov.html
https://root.cern/root/html602/ROOT__Math__Vavilov.html:1303,Energy Efficiency,Energy,Energy,1303,"in; P.V. Vavilov: Ionization losses of high-energy heavy particles,; Sov. Phys. JETP 5 (1957) 749 [Zh. Eksp. Teor. Fiz. 32 (1957) 920]. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class Vavilov,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::Mean(kappa, beta2); and sqrt(Vavilov::Variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. Two subclasses are provided:; - VavilovFast uses the algorithm by; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; w",MatchSource.WIKI,root/html602/ROOT__Math__Vavilov.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Vavilov.html
https://root.cern/root/html602/ROOT__Math__Vavilov.html:1496,Energy Efficiency,charge,charged,1496," 32 (1957) 920]. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class Vavilov,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::Mean(kappa, beta2); and sqrt(Vavilov::Variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. Two subclasses are provided:; - VavilovFast uses the algorithm by; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; which has been implemented in; <A HREF=""http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/g115/top.html"">; CERNLIB (G11",MatchSource.WIKI,root/html602/ROOT__Math__Vavilov.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Vavilov.html
https://root.cern/root/html602/ROOT__Math__Vavilov.html:1241,Integrability,rout,routines,1241,"nction members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Vavilov. class ROOT::Math::Vavilov. Base class describing a Vavilov distribution. The Vavilov distribution is defined in; P.V. Vavilov: Ionization losses of high-energy heavy particles,; Sov. Phys. JETP 5 (1957) 749 [Zh. Eksp. Teor. Fiz. 32 (1957) 920]. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class Vavilov,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::Mean(kappa, beta2); and sqrt(Vavilov::Variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. Two subclasses are provided:; - VavilovFast",MatchSource.WIKI,root/html602/ROOT__Math__Vavilov.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Vavilov.html
https://root.cern/root/html602/ROOT__Math__Vavilov.html:4922,Modifiability,Inherit,Inheritance,4922,"bleGetLambdaMax() const; virtual doubleGetLambdaMin() const; virtual doubleKurtosis() const; static doubleKurtosis(double kappa, double beta2); virtual doubleMean() const; static doubleMean(double kappa, double beta2); virtual doubleMode() const; virtual doubleMode(double kappa, double beta2); ROOT::Math::Vavilov&operator=(const ROOT::Math::Vavilov&); virtual doublePdf(double x) const; virtual doublePdf(double x, double kappa, double beta2); virtual doubleQuantile(double z) const; virtual doubleQuantile(double z, double kappa, double beta2); virtual doubleQuantile_c(double z) const; virtual doubleQuantile_c(double z, double kappa, double beta2); virtual voidSetKappaBeta2(double kappa, double beta2); virtual doubleSkewness() const; static doubleSkewness(double kappa, double beta2); virtual doubleVariance() const; static doubleVariance(double kappa, double beta2); ROOT::Math::VavilovVavilov(); ROOT::Math::VavilovVavilov(const ROOT::Math::Vavilov&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Vavilov(). Default constructor. virtual ~Vavilov(). Destructor. double Pdf(double x) const. Evaluate the Vavilov probability density function. @param x The Landau parameter \f$x = \lambda_L\f$. double Pdf(double x, double kappa, double beta2). Evaluate the Vavilov probability density function,; and set kappa and beta2, if necessary. @param x The Landau parameter \f$x = \lambda_L\f$; @param kappa The parameter \f$\kappa\f$, which should be in the range \f$0.01 \le \kappa \le 10 \f$; @param beta2 The parameter \f$\beta^2\f$, which must be in the range \f$0 \le \beta^2 \le 1 \f$. double Cdf(double x) const. Evaluate the Vavilov cummulative probability density function. @param x The Landau parameter \f$x = \lambda_L\f$. double Cdf(double x, double kappa, double beta2). Evaluate the Vavilov cummulative probability density function,; and set kappa and beta2, if necessary. @param x The Landau parameter \f$x = \lambda_L\f$; @param kappa The pa",MatchSource.WIKI,root/html602/ROOT__Math__Vavilov.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Vavilov.html
https://root.cern/root/html602/ROOT__Math__Vavilov.html:4935,Modifiability,Inherit,Inherited,4935,"bleGetLambdaMax() const; virtual doubleGetLambdaMin() const; virtual doubleKurtosis() const; static doubleKurtosis(double kappa, double beta2); virtual doubleMean() const; static doubleMean(double kappa, double beta2); virtual doubleMode() const; virtual doubleMode(double kappa, double beta2); ROOT::Math::Vavilov&operator=(const ROOT::Math::Vavilov&); virtual doublePdf(double x) const; virtual doublePdf(double x, double kappa, double beta2); virtual doubleQuantile(double z) const; virtual doubleQuantile(double z, double kappa, double beta2); virtual doubleQuantile_c(double z) const; virtual doubleQuantile_c(double z, double kappa, double beta2); virtual voidSetKappaBeta2(double kappa, double beta2); virtual doubleSkewness() const; static doubleSkewness(double kappa, double beta2); virtual doubleVariance() const; static doubleVariance(double kappa, double beta2); ROOT::Math::VavilovVavilov(); ROOT::Math::VavilovVavilov(const ROOT::Math::Vavilov&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Vavilov(). Default constructor. virtual ~Vavilov(). Destructor. double Pdf(double x) const. Evaluate the Vavilov probability density function. @param x The Landau parameter \f$x = \lambda_L\f$. double Pdf(double x, double kappa, double beta2). Evaluate the Vavilov probability density function,; and set kappa and beta2, if necessary. @param x The Landau parameter \f$x = \lambda_L\f$; @param kappa The parameter \f$\kappa\f$, which should be in the range \f$0.01 \le \kappa \le 10 \f$; @param beta2 The parameter \f$\beta^2\f$, which must be in the range \f$0 \le \beta^2 \le 1 \f$. double Cdf(double x) const. Evaluate the Vavilov cummulative probability density function. @param x The Landau parameter \f$x = \lambda_L\f$. double Cdf(double x, double kappa, double beta2). Evaluate the Vavilov cummulative probability density function,; and set kappa and beta2, if necessary. @param x The Landau parameter \f$x = \lambda_L\f$; @param kappa The pa",MatchSource.WIKI,root/html602/ROOT__Math__Vavilov.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Vavilov.html
https://root.cern/root/html602/ROOT__Math__Vavilov.html:2101,Testability,log,log,2101,"stribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::Mean(kappa, beta2); and sqrt(Vavilov::Variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. Two subclasses are provided:; - VavilovFast uses the algorithm by; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; which has been implemented in; <A HREF=""http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/g115/top.html"">; CERNLIB (G115)</A>. - VavilovAccurate uses the algorithm by; B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers,; <A HREF=""http://dx.doi.org/10.1016/0010-4655(74)90091-5"">Computer Phys. Comm. 7 (1974) 215-224</A>,; which has been implemented in; <A HREF=""http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/g116/top.html"">; CERNLIB (G116)</A>. Both subclasses store coefficients needed to calculate \f$p(\lambda; \kappa, \beta^2)\f$; for fixed values of \f$\kappa\f$ and \f$\beta^2\f$.; Changing these values is computationally expensive. VavilovFast is about 5 times faster for t",MatchSource.WIKI,root/html602/ROOT__Math__Vavilov.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Vavilov.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html:1522,Availability,Avail,Available,1522,"int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovAccurate,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers,; <A HREF=""http://dx.doi.org/10.1016/0010-4655(74)90091-5"">Computer Phys. Comm. 7 (1974) 215-224</A>,; which has been implemented in; <A HREF=""http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/g116/top.html"">; CERNLIB (G116)</A>. The class stores coefficients needed to calculate \f$p(\lambda; \kappa, \beta^2)\f$; for fixed values of \f$\kappa\f$ and \f$\beta^2\f$.; Changing these values is computation",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurate.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html:1186,Energy Efficiency,Energy,Energy,1186,":Math::VavilovAccurate. class ROOT::Math::VavilovAccurate: public ROOT::Math::Vavilov. Class describing a Vavilov distribution. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovAccurate,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers,; <A HREF=""http://dx.doi.org/10.1016/0010-4655(74)90091-5"">Computer Phys. Comm. 7 (1974) 215-224</A>,; which has",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurate.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html:1379,Energy Efficiency,charge,charged,1379,"ibution. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovAccurate,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers,; <A HREF=""http://dx.doi.org/10.1016/0010-4655(74)90091-5"">Computer Phys. Comm. 7 (1974) 215-224</A>,; which has been implemented in; <A HREF=""http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/g116/top.html"">; CERNLIB (G116)</A>. ",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurate.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html:1124,Integrability,rout,routines,1124,"s:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::VavilovAccurate. class ROOT::Math::VavilovAccurate: public ROOT::Math::Vavilov. Class describing a Vavilov distribution. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovAccurate,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; B. Schorr",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurate.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html:4087,Integrability,depend,depending,4087,") of Schorr's paper.; epsilonPM gives an estimate on the integral of the cummulative distribution function; outside the range \f$\lambda_{min} \le \lambda \le \lambda_{max}\f$; where the approximation is valid.; Thus, it determines the support of the approximation used here (called $T_0 - T_1$ in the paper).; Schorr recommends \f$\epsilon^+ = \epsilon^- = 5\cdot 10^{-4}\f$.; The code from CERNLIB has been extended such that also smaller values are possible. - epsilon corresponds to \f$\epsilon\f$ in Eq. (4.10) of Schorr's paper.; It determines the accuracy of the series expansion.; Schorr recommends \f$\epsilon = 10^{-5}\f$. For the quantile calculation, the algorithm given by Schorr is not used,; because it turns out to be very slow and still inaccurate.; Instead, an initial estimate is calculated based on a precalculated table,; which is subsequently improved by Newton iterations. While the CERNLIB implementation calculates at most 156 terms in the series expansion; for the pdf and cdf calculation, this class calculates up to 500 terms, depending; on the values of epsilonPM and epsilon. Average times on a Pentium Core2 Duo P8400 2.26GHz:; - 38us per call to SetKappaBeta2 or constructor; - 0.49us per call to Pdf, Cdf; - 8.2us per first call to Quantile after SetKappaBeta2 or constructor; - 0.83us per subsequent call to Quantile. Benno List, June 2010. @ingroup StatFunc. Function Members (Methods); public:. virtual~VavilovAccurate(); virtual doubleCdf(double x) const; virtual doubleCdf(double x, double kappa, double beta2); virtual doubleCdf_c(double x) const; virtual doubleCdf_c(double x, double kappa, double beta2); virtual doubleGetBeta2() const; doubleGetEpsilon() const; doubleGetEpsilonPM() const; static ROOT::Math::VavilovAccurate*GetInstance(); static ROOT::Math::VavilovAccurate*GetInstance(double kappa, double beta2); virtual doubleGetKappa() const; virtual doubleGetLambdaMax() const; virtual doubleGetLambdaMin() const; doubleGetNTerms() const; virtual doubl",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurate.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html:3441,Modifiability,extend,extended,3441," for fixed values of \f$\kappa\f$ and \f$\beta^2\f$.; Changing these values is computationally expensive. The parameter \f$\kappa\f$ should be in the range \f$0.01 \le \kappa \le 10\f$.; In contrast to the CERNLIB implementation, all values of \f$\kappa \ge 0.001\f$ may be used,; but may result in slower running and/or inaccurate results. The parameter \f$\beta^2\f$ must be in the range \f$0 \le \beta^2 \le 1\f$. Two parameters which are fixed in the CERNLIB implementation may be set by the user:; - epsilonPM corresponds to \f$\epsilon^+ = \epsilon^-\f$ in Eqs. (2.1) and (2.2) of Schorr's paper.; epsilonPM gives an estimate on the integral of the cummulative distribution function; outside the range \f$\lambda_{min} \le \lambda \le \lambda_{max}\f$; where the approximation is valid.; Thus, it determines the support of the approximation used here (called $T_0 - T_1$ in the paper).; Schorr recommends \f$\epsilon^+ = \epsilon^- = 5\cdot 10^{-4}\f$.; The code from CERNLIB has been extended such that also smaller values are possible. - epsilon corresponds to \f$\epsilon\f$ in Eq. (4.10) of Schorr's paper.; It determines the accuracy of the series expansion.; Schorr recommends \f$\epsilon = 10^{-5}\f$. For the quantile calculation, the algorithm given by Schorr is not used,; because it turns out to be very slow and still inaccurate.; Instead, an initial estimate is calculated based on a precalculated table,; which is subsequently improved by Newton iterations. While the CERNLIB implementation calculates at most 156 terms in the series expansion; for the pdf and cdf calculation, this class calculates up to 500 terms, depending; on the values of epsilonPM and epsilon. Average times on a Pentium Core2 Duo P8400 2.26GHz:; - 38us per call to SetKappaBeta2 or constructor; - 0.49us per call to Pdf, Cdf; - 8.2us per first call to Quantile after SetKappaBeta2 or constructor; - 0.83us per subsequent call to Quantile. Benno List, June 2010. @ingroup StatFunc. Function Members (Methods",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurate.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html:7235,Modifiability,Inherit,Inheritance,7235,"&); ROOT::Math::VavilovAccurateVavilovAccurate(const ROOT::Math::VavilovAccurate&); ROOT::Math::VavilovAccurateVavilovAccurate(double kappa = 1, double beta2 = 1, double epsilonPM = 5.0000000000000001E-4, double epsilon = 1.0000000000000001E-5). private:. static doubleE1plLog(double x); doubleG116f1(double x) const; doubleG116f2(double x) const; voidInitQuantile() const; intRzero(double a, double b, double& x0, double eps, int mxf, double(ROOT::Math::VavilovAccurate::*)(double)const f) const. Data Members; private:. static ROOT::Math::VavilovAccurate::(anonymous)MAXTERMS; doublefA_cdf[501]; doublefA_pdf[501]; doublefB_cdf[501]; doublefB_pdf[501]; doublefBeta2; doublefEpsilon; doublefEpsilonPM; doublefH[8]; doublefKappa; doublefLambda[32]; intfNQuant; doublefOmega; doublefQuant[32]; boolfQuantileInit; doublefT; doublefT0; doublefT1; doublefX0; static ROOT::Math::VavilovAccurate*fgInstance; static ROOT::Math::VavilovAccurate::(anonymous)kNquantMax. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VavilovAccurate(double kappa = 1, double beta2 = 1, double epsilonPM = 5.0000000000000001E-4, double epsilon = 1.0000000000000001E-5). Initialize an object to calculate the Vavilov distribution. @param kappa The parameter \f$\kappa\f$, which must be in the range \f$\kappa \ge 0.001 \f$; @param beta2 The parameter \f$\beta^2\f$, which must be in the range \f$0 \le \beta^2 \le 1 \f$; @param epsilonPM: \f$\epsilon^+ = \epsilon^-\f$ in Eqs. (2.1) and (2.2) of Schorr's paper; gives an estimate on the integral of the cummulative distribution function; outside the range \f$\lambda_{min} \le \lambda \le \lambda_{max}\f$; where the approximation is valid.; @param epsilon: \f$\epsilon\f$ in Eq. (4.10) of Schorr's paper; determines the accuracy of the series expansion. virtual ~VavilovAccurate(). Destructor. double Pdf(double x) const. Evaluate the Vavilov probability density function. @param x The Landau parameter \f$x = \lambda_L\f$. double Pdf",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurate.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html:7248,Modifiability,Inherit,Inherited,7248,"&); ROOT::Math::VavilovAccurateVavilovAccurate(const ROOT::Math::VavilovAccurate&); ROOT::Math::VavilovAccurateVavilovAccurate(double kappa = 1, double beta2 = 1, double epsilonPM = 5.0000000000000001E-4, double epsilon = 1.0000000000000001E-5). private:. static doubleE1plLog(double x); doubleG116f1(double x) const; doubleG116f2(double x) const; voidInitQuantile() const; intRzero(double a, double b, double& x0, double eps, int mxf, double(ROOT::Math::VavilovAccurate::*)(double)const f) const. Data Members; private:. static ROOT::Math::VavilovAccurate::(anonymous)MAXTERMS; doublefA_cdf[501]; doublefA_pdf[501]; doublefB_cdf[501]; doublefB_pdf[501]; doublefBeta2; doublefEpsilon; doublefEpsilonPM; doublefH[8]; doublefKappa; doublefLambda[32]; intfNQuant; doublefOmega; doublefQuant[32]; boolfQuantileInit; doublefT; doublefT0; doublefT1; doublefX0; static ROOT::Math::VavilovAccurate*fgInstance; static ROOT::Math::VavilovAccurate::(anonymous)kNquantMax. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VavilovAccurate(double kappa = 1, double beta2 = 1, double epsilonPM = 5.0000000000000001E-4, double epsilon = 1.0000000000000001E-5). Initialize an object to calculate the Vavilov distribution. @param kappa The parameter \f$\kappa\f$, which must be in the range \f$\kappa \ge 0.001 \f$; @param beta2 The parameter \f$\beta^2\f$, which must be in the range \f$0 \le \beta^2 \le 1 \f$; @param epsilonPM: \f$\epsilon^+ = \epsilon^-\f$ in Eqs. (2.1) and (2.2) of Schorr's paper; gives an estimate on the integral of the cummulative distribution function; outside the range \f$\lambda_{min} \le \lambda \le \lambda_{max}\f$; where the approximation is valid.; @param epsilon: \f$\epsilon\f$ in Eq. (4.10) of Schorr's paper; determines the accuracy of the series expansion. virtual ~VavilovAccurate(). Destructor. double Pdf(double x) const. Evaluate the Vavilov probability density function. @param x The Landau parameter \f$x = \lambda_L\f$. double Pdf",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurate.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html:1984,Testability,log,log,1984,"stribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers,; <A HREF=""http://dx.doi.org/10.1016/0010-4655(74)90091-5"">Computer Phys. Comm. 7 (1974) 215-224</A>,; which has been implemented in; <A HREF=""http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/g116/top.html"">; CERNLIB (G116)</A>. The class stores coefficients needed to calculate \f$p(\lambda; \kappa, \beta^2)\f$; for fixed values of \f$\kappa\f$ and \f$\beta^2\f$.; Changing these values is computationally expensive. The parameter \f$\kappa\f$ should be in the range \f$0.01 \le \kappa \le 10\f$.; In contrast to the CERNLIB implementation, all values of \f$\kappa \ge 0.001\f$ may be used,; but may result in slower running and/or inaccurate results. The parameter \f$\beta^2\f$ must be in the range \f$0 \le \beta^2 \le 1\f$. Two parameters which are fixed in the CERNLIB implementation may be set by the user:; - epsilonPM corresponds to \f$\",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurate.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurate.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurateCdf.html:2869,Modifiability,Inherit,Inheritance,2869,"rametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(ROOT::Math::IParametricFunctionOneDim&&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(const ROOT::Math::IParametricFunctionOneDim&); virtual unsigned intNPar() const; doubleROOT::Math::IParametricFunctionOneDim::operator()(double x, const double* p) const; doubleROOT::Math::IParametricFunctionOneDim::operator()(const double* x, const double* p) const; ROOT::Math::VavilovAccurateCdf&operator=(const ROOT::Math::VavilovAccurateCdf&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p); ROOT::Math::VavilovAccurateCdfVavilovAccurateCdf(); ROOT::Math::VavilovAccurateCdfVavilovAccurateCdf(const double* p); ROOT::Math::VavilovAccurateCdfVavilovAccurateCdf(const ROOT::Math::VavilovAccurateCdf&). Data Members; private:. doublefP[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VavilovAccurateCdf(). Default constructor. VavilovAccurateCdf(const double* p). Constructor with parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). virtual ~VavilovAccurateCdf(). Destructor. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero); Overwrite if want to avoid the default name (""Par_0, Par_1, ...""). double DoEval(double x) const. Evaluate the function. @param x The Landau parameter \f$x = \lambda_L\f$. double DoEvalPar(double x, const double* p) const. Evaluate the function, using parameters p. @param x The Landau parameter \f$x = \lambda_L\f$; ",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurateCdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurateCdf.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurateCdf.html:2882,Modifiability,Inherit,Inherited,2882,"rametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(ROOT::Math::IParametricFunctionOneDim&&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(const ROOT::Math::IParametricFunctionOneDim&); virtual unsigned intNPar() const; doubleROOT::Math::IParametricFunctionOneDim::operator()(double x, const double* p) const; doubleROOT::Math::IParametricFunctionOneDim::operator()(const double* x, const double* p) const; ROOT::Math::VavilovAccurateCdf&operator=(const ROOT::Math::VavilovAccurateCdf&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p); ROOT::Math::VavilovAccurateCdfVavilovAccurateCdf(); ROOT::Math::VavilovAccurateCdfVavilovAccurateCdf(const double* p); ROOT::Math::VavilovAccurateCdfVavilovAccurateCdf(const ROOT::Math::VavilovAccurateCdf&). Data Members; private:. doublefP[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VavilovAccurateCdf(). Default constructor. VavilovAccurateCdf(const double* p). Constructor with parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). virtual ~VavilovAccurateCdf(). Destructor. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero); Overwrite if want to avoid the default name (""Par_0, Par_1, ...""). double DoEval(double x) const. Evaluate the function. @param x The Landau parameter \f$x = \lambda_L\f$. double DoEvalPar(double x, const double* p) const. Evaluate the function, using parameters p. @param x The Landau parameter \f$x = \lambda_L\f$; ",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurateCdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurateCdf.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurateCdf.html:3599,Safety,avoid,avoid,3599," double* p) const; doubleROOT::Math::IParametricFunctionOneDim::operator()(const double* x, const double* p) const; ROOT::Math::VavilovAccurateCdf&operator=(const ROOT::Math::VavilovAccurateCdf&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p); ROOT::Math::VavilovAccurateCdfVavilovAccurateCdf(); ROOT::Math::VavilovAccurateCdfVavilovAccurateCdf(const double* p); ROOT::Math::VavilovAccurateCdfVavilovAccurateCdf(const ROOT::Math::VavilovAccurateCdf&). Data Members; private:. doublefP[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VavilovAccurateCdf(). Default constructor. VavilovAccurateCdf(const double* p). Constructor with parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). virtual ~VavilovAccurateCdf(). Destructor. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero); Overwrite if want to avoid the default name (""Par_0, Par_1, ...""). double DoEval(double x) const. Evaluate the function. @param x The Landau parameter \f$x = \lambda_L\f$. double DoEvalPar(double x, const double* p) const. Evaluate the function, using parameters p. @param x The Landau parameter \f$x = \lambda_L\f$; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). IBaseFunctionOneDim * Clone() const. Return a clone of the object. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurateCdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurateCdf.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurateCdf.html:3228,Security,Access,Access,3228,"onOneDim::operator()(double x, const double* p) const; doubleROOT::Math::IParametricFunctionOneDim::operator()(const double* x, const double* p) const; ROOT::Math::VavilovAccurateCdf&operator=(const ROOT::Math::VavilovAccurateCdf&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p); ROOT::Math::VavilovAccurateCdfVavilovAccurateCdf(); ROOT::Math::VavilovAccurateCdfVavilovAccurateCdf(const double* p); ROOT::Math::VavilovAccurateCdfVavilovAccurateCdf(const ROOT::Math::VavilovAccurateCdf&). Data Members; private:. doublefP[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VavilovAccurateCdf(). Default constructor. VavilovAccurateCdf(const double* p). Constructor with parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). virtual ~VavilovAccurateCdf(). Destructor. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero); Overwrite if want to avoid the default name (""Par_0, Par_1, ...""). double DoEval(double x) const. Evaluate the function. @param x The Landau parameter \f$x = \lambda_L\f$. double DoEvalPar(double x, const double* p) const. Evaluate the function, using parameters p. @param x The Landau parameter \f$x = \lambda_L\f$; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). IBaseFunctionOneDim * Clone() const. Return a clone of the object. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general p",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurateCdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurateCdf.html
https://root.cern/root/html602/ROOT__Math__VavilovAccuratePdf.html:2869,Modifiability,Inherit,Inheritance,2869,"rametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(ROOT::Math::IParametricFunctionOneDim&&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(const ROOT::Math::IParametricFunctionOneDim&); virtual unsigned intNPar() const; doubleROOT::Math::IParametricFunctionOneDim::operator()(double x, const double* p) const; doubleROOT::Math::IParametricFunctionOneDim::operator()(const double* x, const double* p) const; ROOT::Math::VavilovAccuratePdf&operator=(const ROOT::Math::VavilovAccuratePdf&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p); ROOT::Math::VavilovAccuratePdfVavilovAccuratePdf(); ROOT::Math::VavilovAccuratePdfVavilovAccuratePdf(const double* p); ROOT::Math::VavilovAccuratePdfVavilovAccuratePdf(const ROOT::Math::VavilovAccuratePdf&). Data Members; private:. doublefP[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VavilovAccuratePdf(). Default constructor. VavilovAccuratePdf(const double* p). Constructor with parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). virtual ~VavilovAccuratePdf(). Destructor. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values. @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero). double DoEval(double x) const. Evaluate the function. @param x The Landau parameter \f$x = \lambda_L\f$. double DoEvalPar(double x, const double* p) const. Evaluate the function, using parameters p. @param x The Landau parameter \f$x = \lambda_L\f$; @param p vector of doubles containing the parameter values (Norm, x",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccuratePdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccuratePdf.html
https://root.cern/root/html602/ROOT__Math__VavilovAccuratePdf.html:2882,Modifiability,Inherit,Inherited,2882,"rametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(ROOT::Math::IParametricFunctionOneDim&&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(const ROOT::Math::IParametricFunctionOneDim&); virtual unsigned intNPar() const; doubleROOT::Math::IParametricFunctionOneDim::operator()(double x, const double* p) const; doubleROOT::Math::IParametricFunctionOneDim::operator()(const double* x, const double* p) const; ROOT::Math::VavilovAccuratePdf&operator=(const ROOT::Math::VavilovAccuratePdf&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p); ROOT::Math::VavilovAccuratePdfVavilovAccuratePdf(); ROOT::Math::VavilovAccuratePdfVavilovAccuratePdf(const double* p); ROOT::Math::VavilovAccuratePdfVavilovAccuratePdf(const ROOT::Math::VavilovAccuratePdf&). Data Members; private:. doublefP[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VavilovAccuratePdf(). Default constructor. VavilovAccuratePdf(const double* p). Constructor with parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). virtual ~VavilovAccuratePdf(). Destructor. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values. @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero). double DoEval(double x) const. Evaluate the function. @param x The Landau parameter \f$x = \lambda_L\f$. double DoEvalPar(double x, const double* p) const. Evaluate the function, using parameters p. @param x The Landau parameter \f$x = \lambda_L\f$; @param p vector of doubles containing the parameter values (Norm, x",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccuratePdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccuratePdf.html
https://root.cern/root/html602/ROOT__Math__VavilovAccuratePdf.html:3228,Security,Access,Access,3228,"leROOT::Math::IParametricFunctionOneDim::operator()(double x, const double* p) const; doubleROOT::Math::IParametricFunctionOneDim::operator()(const double* x, const double* p) const; ROOT::Math::VavilovAccuratePdf&operator=(const ROOT::Math::VavilovAccuratePdf&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p); ROOT::Math::VavilovAccuratePdfVavilovAccuratePdf(); ROOT::Math::VavilovAccuratePdfVavilovAccuratePdf(const double* p); ROOT::Math::VavilovAccuratePdfVavilovAccuratePdf(const ROOT::Math::VavilovAccuratePdf&). Data Members; private:. doublefP[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VavilovAccuratePdf(). Default constructor. VavilovAccuratePdf(const double* p). Constructor with parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). virtual ~VavilovAccuratePdf(). Destructor. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values. @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero). double DoEval(double x) const. Evaluate the function. @param x The Landau parameter \f$x = \lambda_L\f$. double DoEvalPar(double x, const double* p) const. Evaluate the function, using parameters p. @param x The Landau parameter \f$x = \lambda_L\f$; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). IBaseFunctionOneDim * Clone() const. Return a clone of the object. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccuratePdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccuratePdf.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurateQuantile.html:2948,Modifiability,Inherit,Inheritance,2948,"FunctionOneDim::IParametricFunctionOneDim(ROOT::Math::IParametricFunctionOneDim&&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(const ROOT::Math::IParametricFunctionOneDim&); virtual unsigned intNPar() const; doubleROOT::Math::IParametricFunctionOneDim::operator()(double x, const double* p) const; doubleROOT::Math::IParametricFunctionOneDim::operator()(const double* x, const double* p) const; ROOT::Math::VavilovAccurateQuantile&operator=(const ROOT::Math::VavilovAccurateQuantile&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p); ROOT::Math::VavilovAccurateQuantileVavilovAccurateQuantile(); ROOT::Math::VavilovAccurateQuantileVavilovAccurateQuantile(const double* p); ROOT::Math::VavilovAccurateQuantileVavilovAccurateQuantile(const ROOT::Math::VavilovAccurateQuantile&). Data Members; private:. doublefP[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VavilovAccurateQuantile(). Default constructor. VavilovAccurateQuantile(const double* p). Constructor with parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). virtual ~VavilovAccurateQuantile(). Destructor. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero). double DoEval(double x) const. Evaluate the function. @param x The Quantile \f$z\f$ , \f$0 \le z \le 1\f$. double DoEvalPar(double x, const double* p) const. Evaluate the function, using parameters p. @param x The Quantile \f$z\f$, \f$0 \le z \le 1\f$; @param p vector of doubles containing the paramet",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurateQuantile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurateQuantile.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurateQuantile.html:2961,Modifiability,Inherit,Inherited,2961,"FunctionOneDim::IParametricFunctionOneDim(ROOT::Math::IParametricFunctionOneDim&&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(const ROOT::Math::IParametricFunctionOneDim&); virtual unsigned intNPar() const; doubleROOT::Math::IParametricFunctionOneDim::operator()(double x, const double* p) const; doubleROOT::Math::IParametricFunctionOneDim::operator()(const double* x, const double* p) const; ROOT::Math::VavilovAccurateQuantile&operator=(const ROOT::Math::VavilovAccurateQuantile&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p); ROOT::Math::VavilovAccurateQuantileVavilovAccurateQuantile(); ROOT::Math::VavilovAccurateQuantileVavilovAccurateQuantile(const double* p); ROOT::Math::VavilovAccurateQuantileVavilovAccurateQuantile(const ROOT::Math::VavilovAccurateQuantile&). Data Members; private:. doublefP[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VavilovAccurateQuantile(). Default constructor. VavilovAccurateQuantile(const double* p). Constructor with parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). virtual ~VavilovAccurateQuantile(). Destructor. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero). double DoEval(double x) const. Evaluate the function. @param x The Quantile \f$z\f$ , \f$0 \le z \le 1\f$. double DoEvalPar(double x, const double* p) const. Evaluate the function, using parameters p. @param x The Quantile \f$z\f$, \f$0 \le z \le 1\f$; @param p vector of doubles containing the paramet",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurateQuantile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurateQuantile.html
https://root.cern/root/html602/ROOT__Math__VavilovAccurateQuantile.html:3322,Security,Access,Access,3322,"onst double* p) const; doubleROOT::Math::IParametricFunctionOneDim::operator()(const double* x, const double* p) const; ROOT::Math::VavilovAccurateQuantile&operator=(const ROOT::Math::VavilovAccurateQuantile&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p); ROOT::Math::VavilovAccurateQuantileVavilovAccurateQuantile(); ROOT::Math::VavilovAccurateQuantileVavilovAccurateQuantile(const double* p); ROOT::Math::VavilovAccurateQuantileVavilovAccurateQuantile(const ROOT::Math::VavilovAccurateQuantile&). Data Members; private:. doublefP[5]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VavilovAccurateQuantile(). Default constructor. VavilovAccurateQuantile(const double* p). Constructor with parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). virtual ~VavilovAccurateQuantile(). Destructor. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero). double DoEval(double x) const. Evaluate the function. @param x The Quantile \f$z\f$ , \f$0 \le z \le 1\f$. double DoEvalPar(double x, const double* p) const. Evaluate the function, using parameters p. @param x The Quantile \f$z\f$, \f$0 \le z \le 1\f$; @param p vector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). IBaseFunctionOneDim * Clone() const. Return a clone of the object. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VavilovAccurateQuantile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovAccurateQuantile.html
https://root.cern/root/html602/ROOT__Math__VavilovFast.html:1506,Availability,Avail,Available,1506," i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovFast,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; which has been implemented in; <A HREF=""http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/g115/top.html"">; CERNLIB (G115)</A>. The class stores coef",MatchSource.WIKI,root/html602/ROOT__Math__VavilovFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovFast.html
https://root.cern/root/html602/ROOT__Math__VavilovFast.html:1170,Energy Efficiency,Energy,Energy,1170,"ORE; » ROOT::Math::VavilovFast. class ROOT::Math::VavilovFast: public ROOT::Math::Vavilov. Class describing a Vavilov distribution. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovFast,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; A. Rotondi and P. Montagna, Fast",MatchSource.WIKI,root/html602/ROOT__Math__VavilovFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovFast.html
https://root.cern/root/html602/ROOT__Math__VavilovFast.html:1363,Energy Efficiency,charge,charged,1363,"istribution. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovFast,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. ",MatchSource.WIKI,root/html602/ROOT__Math__VavilovFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovFast.html
https://root.cern/root/html602/ROOT__Math__VavilovFast.html:1108,Integrability,rout,routines,1108,"Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::VavilovFast. class ROOT::Math::VavilovFast: public ROOT::Math::Vavilov. Class describing a Vavilov distribution. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovFast,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::m",MatchSource.WIKI,root/html602/ROOT__Math__VavilovFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovFast.html
https://root.cern/root/html602/ROOT__Math__VavilovFast.html:5115,Modifiability,Inherit,Inheritance,5115,"pa, double beta2); virtual doubleQuantile(double z) const; virtual doubleQuantile(double z, double kappa, double beta2); virtual doubleQuantile_c(double z) const; virtual doubleQuantile_c(double z, double kappa, double beta2); virtual voidSetKappaBeta2(double kappa, double beta2); virtual doubleROOT::Math::Vavilov::Skewness() const; static doubleROOT::Math::Vavilov::Skewness(double kappa, double beta2); virtual doubleROOT::Math::Vavilov::Variance() const; static doubleROOT::Math::Vavilov::Variance(double kappa, double beta2); ROOT::Math::VavilovROOT::Math::Vavilov::Vavilov(); ROOT::Math::VavilovROOT::Math::Vavilov::Vavilov(const ROOT::Math::Vavilov&); ROOT::Math::VavilovFastVavilovFast(const ROOT::Math::VavilovFast&); ROOT::Math::VavilovFastVavilovFast(double kappa = 1, double beta2 = 1). Data Members; private:. doublefAC[14]; doublefBeta2; doublefHC[9]; intfItype; doublefKappa; intfNpt; doublefWCM[201]; static ROOT::Math::VavilovFast*fgInstance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VavilovFast(double kappa = 1, double beta2 = 1). Initialize an object to calculate the Vavilov distribution. @param kappa The parameter \f$\kappa\f$, which must be in the range \f$0.01 \le \kappa \le 12 \f$; @param beta2 The parameter \f$\beta^2\f$, which must be in the range \f$0 \le \beta^2 \le 1 \f$. virtual ~VavilovFast(). Destructor. double Pdf(double x) const. Evaluate the Vavilov probability density function. @param x The Landau parameter \f$x = \lambda_L\f$. double Pdf(double x, double kappa, double beta2). Evaluate the Vavilov probability density function,; and set kappa and beta2, if necessary. @param x The Landau parameter \f$x = \lambda_L\f$; @param kappa The parameter \f$\kappa\f$, which must be in the range \f$0.01 \le \kappa \le 12 \f$; @param beta2 The parameter \f$\beta^2\f$, which must be in the range \f$0 \le \beta^2 \le 1 \f$. double Cdf(double x) const. Evaluate the Vavilov cummulative probability density function.",MatchSource.WIKI,root/html602/ROOT__Math__VavilovFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovFast.html
https://root.cern/root/html602/ROOT__Math__VavilovFast.html:5128,Modifiability,Inherit,Inherited,5128,"pa, double beta2); virtual doubleQuantile(double z) const; virtual doubleQuantile(double z, double kappa, double beta2); virtual doubleQuantile_c(double z) const; virtual doubleQuantile_c(double z, double kappa, double beta2); virtual voidSetKappaBeta2(double kappa, double beta2); virtual doubleROOT::Math::Vavilov::Skewness() const; static doubleROOT::Math::Vavilov::Skewness(double kappa, double beta2); virtual doubleROOT::Math::Vavilov::Variance() const; static doubleROOT::Math::Vavilov::Variance(double kappa, double beta2); ROOT::Math::VavilovROOT::Math::Vavilov::Vavilov(); ROOT::Math::VavilovROOT::Math::Vavilov::Vavilov(const ROOT::Math::Vavilov&); ROOT::Math::VavilovFastVavilovFast(const ROOT::Math::VavilovFast&); ROOT::Math::VavilovFastVavilovFast(double kappa = 1, double beta2 = 1). Data Members; private:. doublefAC[14]; doublefBeta2; doublefHC[9]; intfItype; doublefKappa; intfNpt; doublefWCM[201]; static ROOT::Math::VavilovFast*fgInstance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VavilovFast(double kappa = 1, double beta2 = 1). Initialize an object to calculate the Vavilov distribution. @param kappa The parameter \f$\kappa\f$, which must be in the range \f$0.01 \le \kappa \le 12 \f$; @param beta2 The parameter \f$\beta^2\f$, which must be in the range \f$0 \le \beta^2 \le 1 \f$. virtual ~VavilovFast(). Destructor. double Pdf(double x) const. Evaluate the Vavilov probability density function. @param x The Landau parameter \f$x = \lambda_L\f$. double Pdf(double x, double kappa, double beta2). Evaluate the Vavilov probability density function,; and set kappa and beta2, if necessary. @param x The Landau parameter \f$x = \lambda_L\f$; @param kappa The parameter \f$\kappa\f$, which must be in the range \f$0.01 \le \kappa \le 12 \f$; @param beta2 The parameter \f$\beta^2\f$, which must be in the range \f$0 \le \beta^2 \le 1 \f$. double Cdf(double x) const. Evaluate the Vavilov cummulative probability density function.",MatchSource.WIKI,root/html602/ROOT__Math__VavilovFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovFast.html
https://root.cern/root/html602/ROOT__Math__VavilovFast.html:2150,Testability,log,log,2150,"er and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; which has been implemented in; <A HREF=""http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/g115/top.html"">; CERNLIB (G115)</A>. The class stores coefficients needed to calculate \f$p(\lambda; \kappa, \beta^2)\f$; for fixed values of \f$\kappa\f$ and \f$\beta^2\f$.; Changing these values is computationally expensive. The parameter \f$\kappa\f$ must be in the range \f$0.01 \le \kappa \le 12\f$. The parameter \f$\beta^2\f$ must be in the range \f$0 \le \beta^2 \le 1\f$. Average times on a Pentium Core2 Duo P8400 2.26GHz:; - 9.9us per call to SetKappaBeta2 or constructor; - 0.095us per call to Pdf, Cdf; - 3.7us per first call to Quantile after SetKappaBeta2 or constructor; - 0.137us per subsequent call to Quantile. Benno List, June 2010. @ingroup StatFunc. Function Mem",MatchSource.WIKI,root/html602/ROOT__Math__VavilovFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VavilovFast.html
https://root.cern/root/html602/ROOT__Math__VegasParameters.html:1022,Modifiability,Inherit,Inheritance,1022,". ROOT::Math::VegasParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::VegasParameters. class ROOT::Math::VegasParameters. Function Members (Methods); public:. ~VegasParameters(); ROOT::Math::IOptions*operator()() const; ROOT::Math::VegasParameters&operator=(const ROOT::Math::IOptions& opt); ROOT::Math::VegasParameters&operator=(const ROOT::Math::VegasParameters&); ROOT::Math::VegasParameters&operator=(ROOT::Math::VegasParameters&&); voidSetDefaultValues(); ROOT::Math::VegasParametersVegasParameters(); ROOT::Math::VegasParametersVegasParameters(const ROOT::Math::IOptions& opt); ROOT::Math::VegasParametersVegasParameters(const ROOT::Math::VegasParameters&); ROOT::Math::VegasParametersVegasParameters(ROOT::Math::VegasParameters&&). Data Members; public:. doublealpha; size_titerations; intmode; intstage; intverbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VegasParameters(); constructor of default parameters. { SetDefaultValues(); }. VegasParameters(const ROOT::Math::IOptions& opt); construct from GenAlgoOptions; parameter not specified are ignored. void SetDefaultValues(). VegasParameters & operator=(const ROOT::Math::IOptions& opt). ROOT::Math::IOptions * operator()() const; convert to options (return object is managed by the user). MiserParameters & operator=(const ROOT::Math::IOptions& opt). » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VegasParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VegasParameters.html
https://root.cern/root/html602/ROOT__Math__VegasParameters.html:1035,Modifiability,Inherit,Inherited,1035,". ROOT::Math::VegasParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::VegasParameters. class ROOT::Math::VegasParameters. Function Members (Methods); public:. ~VegasParameters(); ROOT::Math::IOptions*operator()() const; ROOT::Math::VegasParameters&operator=(const ROOT::Math::IOptions& opt); ROOT::Math::VegasParameters&operator=(const ROOT::Math::VegasParameters&); ROOT::Math::VegasParameters&operator=(ROOT::Math::VegasParameters&&); voidSetDefaultValues(); ROOT::Math::VegasParametersVegasParameters(); ROOT::Math::VegasParametersVegasParameters(const ROOT::Math::IOptions& opt); ROOT::Math::VegasParametersVegasParameters(const ROOT::Math::VegasParameters&); ROOT::Math::VegasParametersVegasParameters(ROOT::Math::VegasParameters&&). Data Members; public:. doublealpha; size_titerations; intmode; intstage; intverbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VegasParameters(); constructor of default parameters. { SetDefaultValues(); }. VegasParameters(const ROOT::Math::IOptions& opt); construct from GenAlgoOptions; parameter not specified are ignored. void SetDefaultValues(). VegasParameters & operator=(const ROOT::Math::IOptions& opt). ROOT::Math::IOptions * operator()() const; convert to options (return object is managed by the user). MiserParameters & operator=(const ROOT::Math::IOptions& opt). » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VegasParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VegasParameters.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:1121,Availability,avail,available,1121,"er file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. i",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:1792,Availability,Error,Error,1792,"ived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return -1; }. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:1855,Availability,Error,Error,1855,"ived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return -1; }. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:1944,Availability,Error,Error,1944,"ived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return -1; }. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:1995,Availability,Error,Error,1995,"ived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return -1; }. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:2066,Availability,Error,Error,2066,"ived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return -1; }. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:345,Deployability,integrat,integration,345,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:442,Deployability,integrat,integrator,442,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:573,Deployability,integrat,integration,573,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:673,Deployability,integrat,integration,673,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:912,Deployability,Integrat,IntegratorOneDim,912,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:945,Deployability,Integrat,IntegratorMultiDim,945,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:974,Deployability,Integrat,Integration,974,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:2203,Deployability,integrat,integrator,2203,"ived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return -1; }. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:345,Integrability,integrat,integration,345,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:385,Integrability,Interface,Interface,385,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:442,Integrability,integrat,integrator,442,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:573,Integrability,integrat,integration,573,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:673,Integrability,integrat,integration,673,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:912,Integrability,Integrat,IntegratorOneDim,912,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:945,Integrability,Integrat,IntegratorMultiDim,945,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:974,Integrability,Integrat,Integration,974,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:2203,Integrability,integrat,integrator,2203,"ived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return -1; }. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:816,Modifiability,plug-in,plug-in,816,". ROOT::Math::VirtualIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegrator. class ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:1599,Modifiability,Inherit,Inheritance,1599,"ived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return -1; }. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html:1612,Modifiability,Inherit,Inherited,1612,"ived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegrator(); virtual doubleError() const; virtual intNEval() const; ROOT::Math::VirtualIntegrator&operator=(const ROOT::Math::VirtualIntegrator&); virtual doubleResult() const; virtual voidSetAbsTolerance(double); virtual voidSetRelTolerance(double); virtual intStatus() const; ROOT::Math::VirtualIntegratorVirtualIntegrator(); ROOT::Math::VirtualIntegratorVirtualIntegrator(const ROOT::Math::VirtualIntegrator&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegrator(); destructor: no operation. {}. void SetRelTolerance(double ). set the desired relative Error. void SetAbsTolerance(double ). set the desired absolute Error. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return -1; }. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegrator.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:1183,Availability,avail,available,1183,"n; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::Vi",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:1299,Availability,Error,Error,1299,"; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more option",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:2818,Availability,toler,tolerance,2818,"l~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. virtual ~VirtualIntegratorMultiDim(); destructor: no operation. {}. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:407,Deployability,integrat,integration,407,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integra",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:504,Deployability,integrat,integrator,504,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integra",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:635,Deployability,integrat,integration,635,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integra",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:735,Deployability,integrat,integration,735,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integra",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:974,Deployability,Integrat,IntegratorOneDim,974,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integra",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:1007,Deployability,Integrat,IntegratorMultiDim,1007,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integra",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:1036,Deployability,Integrat,Integration,1036,"im. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:1540,Deployability,Integrat,IntegratorMultiDimOptionsOptions,1540,"; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more option",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:1815,Deployability,Integrat,IntegratorMultiDimOptions,1815,"; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more option",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:1994,Deployability,Integrat,IntegrationMultiDim,1994,"; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more option",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:2627,Deployability,integrat,integration,2627,"l~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. virtual ~VirtualIntegratorMultiDim(); destructor: no operation. {}. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:2701,Deployability,Integrat,IntegratorMultiDimOptions,2701,"l~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. virtual ~VirtualIntegratorMultiDim(); destructor: no operation. {}. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:407,Integrability,integrat,integration,407,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integra",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:447,Integrability,Interface,Interface,447,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integra",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:504,Integrability,integrat,integrator,504,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integra",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:635,Integrability,integrat,integration,635,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integra",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:735,Integrability,integrat,integration,735,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integra",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:974,Integrability,Integrat,IntegratorOneDim,974,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integra",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:1007,Integrability,Integrat,IntegratorMultiDim,1007,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integra",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:1036,Integrability,Integrat,Integration,1036,"im. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:1540,Integrability,Integrat,IntegratorMultiDimOptionsOptions,1540,"; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more option",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:1815,Integrability,Integrat,IntegratorMultiDimOptions,1815,"; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more option",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:1994,Integrability,Integrat,IntegrationMultiDim,1994,"; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more option",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:2627,Integrability,integrat,integration,2627,"l~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. virtual ~VirtualIntegratorMultiDim(); destructor: no operation. {}. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:2701,Integrability,Integrat,IntegratorMultiDimOptions,2701,"l~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. virtual ~VirtualIntegratorMultiDim(); destructor: no operation. {}. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:878,Modifiability,plug-in,plug-in,878,". ROOT::Math::VirtualIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorMultiDim. class ROOT::Math::VirtualIntegratorMultiDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::Integra",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:2421,Modifiability,Inherit,Inheritance,2421,"l~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. virtual ~VirtualIntegratorMultiDim(); destructor: no operation. {}. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:2434,Modifiability,Inherit,Inherited,2434,"l~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. virtual ~VirtualIntegratorMultiDim(); destructor: no operation. {}. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:1177,Availability,avail,available,1177,"ption; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Mat",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:1291,Availability,Error,Error,1291,"sers should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, double b); evaluate integral. void SetFunction(const ROOT::Math::IGenFunction& ); set integration function. double Integral(); evaluate",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:3401,Availability,toler,tolerance,3401,"OneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, double b); evaluate integral. void SetFunction(const ROOT::Math::IGenFunction& ); set integration function. double Integral(); evaluate un-defined integral (between -inf, + inf). double IntegralUp(double a); evaluate integral over the (a, +inf). double IntegralLow(double b); evaluate integral over the (-inf, b). double Integral(const vector<double>& pts); evaluate integral with singular points. double IntegralCauchy(double a, double b, double c); evaluate Cauchy integral. return Options(). void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:401,Deployability,integrat,integration,401,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:498,Deployability,integrat,integrator,498,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:629,Deployability,integrat,integration,629,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:729,Deployability,integrat,integration,729,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:968,Deployability,Integrat,IntegratorOneDim,968,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:1001,Deployability,Integrat,IntegratorMultiDim,1001,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:1030,Deployability,Integrat,Integration,1030,"OneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virt",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:1728,Deployability,Integrat,IntegratorOneDimOptionsOptions,1728,"sers should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, double b); evaluate integral. void SetFunction(const ROOT::Math::IGenFunction& ); set integration function. double Integral(); evaluate",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:1996,Deployability,Integrat,IntegratorOneDimOptions,1996,"sers should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, double b); evaluate integral. void SetFunction(const ROOT::Math::IGenFunction& ); set integration function. double Integral(); evaluate",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:2173,Deployability,Integrat,IntegrationOneDim,2173,"sers should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, double b); evaluate integral. void SetFunction(const ROOT::Math::IGenFunction& ); set integration function. double Integral(); evaluate",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:2843,Deployability,integrat,integration,2843,"OneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, double b); evaluate integral. void SetFunction(const ROOT::Math::IGenFunction& ); set integration function. double Integral(); evaluate un-defined integral (between -inf, + inf). double IntegralUp(double a); evaluate integral over the (a, +inf). double IntegralLow(double b); evaluate integral over the (-inf, b). double Integral(const vector<double>& pts); evaluate integral with singular points. double IntegralCauchy(double a, double b, double c); evaluate Cauchy integral. return Options(). void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:3286,Deployability,Integrat,IntegratorOneDimOptions,3286,"OneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, double b); evaluate integral. void SetFunction(const ROOT::Math::IGenFunction& ); set integration function. double Integral(); evaluate un-defined integral (between -inf, + inf). double IntegralUp(double a); evaluate integral over the (a, +inf). double IntegralLow(double b); evaluate integral over the (-inf, b). double Integral(const vector<double>& pts); evaluate integral with singular points. double IntegralCauchy(double a, double b, double c); evaluate Cauchy integral. return Options(). void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:401,Integrability,integrat,integration,401,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:441,Integrability,Interface,Interface,441,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:498,Integrability,integrat,integrator,498,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:629,Integrability,integrat,integration,629,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:729,Integrability,integrat,integration,729,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:968,Integrability,Integrat,IntegratorOneDim,968,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:1001,Integrability,Integrat,IntegratorMultiDim,1001,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:1030,Integrability,Integrat,Integration,1030,"OneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virt",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:1728,Integrability,Integrat,IntegratorOneDimOptionsOptions,1728,"sers should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, double b); evaluate integral. void SetFunction(const ROOT::Math::IGenFunction& ); set integration function. double Integral(); evaluate",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:1996,Integrability,Integrat,IntegratorOneDimOptions,1996,"sers should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, double b); evaluate integral. void SetFunction(const ROOT::Math::IGenFunction& ); set integration function. double Integral(); evaluate",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:2173,Integrability,Integrat,IntegrationOneDim,2173,"sers should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, double b); evaluate integral. void SetFunction(const ROOT::Math::IGenFunction& ); set integration function. double Integral(); evaluate",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:2843,Integrability,integrat,integration,2843,"OneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, double b); evaluate integral. void SetFunction(const ROOT::Math::IGenFunction& ); set integration function. double Integral(); evaluate un-defined integral (between -inf, + inf). double IntegralUp(double a); evaluate integral over the (a, +inf). double IntegralLow(double b); evaluate integral over the (-inf, b). double Integral(const vector<double>& pts); evaluate integral with singular points. double IntegralCauchy(double a, double b, double c); evaluate Cauchy integral. return Options(). void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:3286,Integrability,Integrat,IntegratorOneDimOptions,3286,"OneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, double b); evaluate integral. void SetFunction(const ROOT::Math::IGenFunction& ); set integration function. double Integral(); evaluate un-defined integral (between -inf, + inf). double IntegralUp(double a); evaluate integral over the (a, +inf). double IntegralLow(double b); evaluate integral over the (-inf, b). double Integral(const vector<double>& pts); evaluate integral with singular points. double IntegralCauchy(double a, double b, double c); evaluate Cauchy integral. return Options(). void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:872,Modifiability,plug-in,plug-in,872,". ROOT::Math::VirtualIntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::Integ",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:2588,Modifiability,Inherit,Inheritance,2588,"st; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, double b); evaluate integral. void SetFunction(const ROOT::Math::IGenFunction& ); set integration function. double Integral(); evaluate un-defined integral (between -inf, + inf). double IntegralUp(double a); evaluate integral over the (a, +inf). double IntegralLow(double b); evaluate integral over the (-inf, b). double Integral(const vector<double>& pts); evaluate integral with singular points. double IntegralCauchy(double a, double b, double c); evaluate Cauchy integral. return Options(). void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automaticall",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html:2601,Modifiability,Inherit,Inherited,2601,"st; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimVirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, double b); evaluate integral. void SetFunction(const ROOT::Math::IGenFunction& ); set integration function. double Integral(); evaluate un-defined integral (between -inf, + inf). double IntegralUp(double a); evaluate integral over the (a, +inf). double IntegralLow(double b); evaluate integral over the (-inf, b). double Integral(const vector<double>& pts); evaluate integral with singular points. double IntegralCauchy(double a, double b, double c); evaluate Cauchy integral. return Options(). void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automaticall",MatchSource.WIKI,root/html602/ROOT__Math__VirtualIntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html:3794,Integrability,interface,interface,3794,"ned intfDimcached value of dimension; TF1*fFuncpointer to ROOT function; boolfLinearflag for linear functions; boolfOwnFuncflag to indicate we own the TF1 function pointer; vector<double>fParamscached vector with parameter values; boolfPolynomialflag for polynomial functions; static doublefgEpsepsilon used in derivative calculation h ~ eps |p|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. { if (fOwnFunc && fFunc) delete fFunc; }. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cached inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (from TF1). void ParameterGradient(const double* x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step",MatchSource.WIKI,root/html602/ROOT__Math__WrappedMultiTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html:3841,Integrability,wrap,wrapper,3841,"function; boolfLinearflag for linear functions; boolfOwnFuncflag to indicate we own the TF1 function pointer; vector<double>fParamscached vector with parameter values; boolfPolynomialflag for polynomial functions; static doublefgEpsepsilon used in derivative calculation h ~ eps |p|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. { if (fOwnFunc && fFunc) delete fFunc; }. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cached inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (from TF1). void ParameterGradient(const double* x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step-size. const TF1 * GetFunction() const; method to retrieve the i",MatchSource.WIKI,root/html602/ROOT__Math__WrappedMultiTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html:3968,Integrability,interface,interface,3968,"values; boolfPolynomialflag for polynomial functions; static doublefgEpsepsilon used in derivative calculation h ~ eps |p|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. { if (fOwnFunc && fFunc) delete fFunc; }. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cached inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (from TF1). void ParameterGradient(const double* x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step-size. const TF1 * GetFunction() const; method to retrieve the internal function pointer. { return fFunc; }. void SetAndCopyFunction(const TF1* f = 0); method to set a new function pointer and copy it inside.; By calling th",MatchSource.WIKI,root/html602/ROOT__Math__WrappedMultiTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html:3152,Modifiability,Inherit,Inheritance,3152,"t double* par, double* grad) const; virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; voidSetAndCopyFunction(const TF1* f = 0); static voidSetDerivPrecision(double eps); virtual voidSetParameters(const double* p); ROOT::Math::WrappedMultiTF1WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs); ROOT::Math::WrappedMultiTF1WrappedMultiTF1(TF1& f, unsigned int dim = 0). private:. virtual doubleDoEvalPar(const double* x, const double* p) const; virtual doubleDoParameterDerivative(const double* x, const double* p, unsigned int ipar) const. Data Members; private:. unsigned intfDimcached value of dimension; TF1*fFuncpointer to ROOT function; boolfLinearflag for linear functions; boolfOwnFuncflag to indicate we own the TF1 function pointer; vector<double>fParamscached vector with parameter values; boolfPolynomialflag for polynomial functions; static doublefgEpsepsilon used in derivative calculation h ~ eps |p|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. { if (fOwnFunc && fFunc) delete fFunc; }. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cached inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached ",MatchSource.WIKI,root/html602/ROOT__Math__WrappedMultiTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html:3165,Modifiability,Inherit,Inherited,3165,"t double* par, double* grad) const; virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; voidSetAndCopyFunction(const TF1* f = 0); static voidSetDerivPrecision(double eps); virtual voidSetParameters(const double* p); ROOT::Math::WrappedMultiTF1WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs); ROOT::Math::WrappedMultiTF1WrappedMultiTF1(TF1& f, unsigned int dim = 0). private:. virtual doubleDoEvalPar(const double* x, const double* p) const; virtual doubleDoParameterDerivative(const double* x, const double* p, unsigned int ipar) const. Data Members; private:. unsigned intfDimcached value of dimension; TF1*fFuncpointer to ROOT function; boolfLinearflag for linear functions; boolfOwnFuncflag to indicate we own the TF1 function pointer; vector<double>fParamscached vector with parameter values; boolfPolynomialflag for polynomial functions; static doublefgEpsepsilon used in derivative calculation h ~ eps |p|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. { if (fOwnFunc && fFunc) delete fFunc; }. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cached inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached ",MatchSource.WIKI,root/html602/ROOT__Math__WrappedMultiTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html:3804,Modifiability,inherit,inherited,3804,"ned intfDimcached value of dimension; TF1*fFuncpointer to ROOT function; boolfLinearflag for linear functions; boolfOwnFuncflag to indicate we own the TF1 function pointer; vector<double>fParamscached vector with parameter values; boolfPolynomialflag for polynomial functions; static doublefgEpsepsilon used in derivative calculation h ~ eps |p|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. { if (fOwnFunc && fFunc) delete fFunc; }. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cached inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (from TF1). void ParameterGradient(const double* x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step",MatchSource.WIKI,root/html602/ROOT__Math__WrappedMultiTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html:3978,Modifiability,inherit,inherited,3978,"values; boolfPolynomialflag for polynomial functions; static doublefgEpsepsilon used in derivative calculation h ~ eps |p|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. { if (fOwnFunc && fFunc) delete fFunc; }. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cached inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (from TF1). void ParameterGradient(const double* x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step-size. const TF1 * GetFunction() const; method to retrieve the internal function pointer. { return fFunc; }. void SetAndCopyFunction(const TF1* f = 0); method to set a new function pointer and copy it inside.; By calling th",MatchSource.WIKI,root/html602/ROOT__Math__WrappedMultiTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html:4050,Performance,cache,cached,4050,"values; boolfPolynomialflag for polynomial functions; static doublefgEpsepsilon used in derivative calculation h ~ eps |p|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. { if (fOwnFunc && fFunc) delete fFunc; }. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cached inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (from TF1). void ParameterGradient(const double* x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step-size. const TF1 * GetFunction() const; method to retrieve the internal function pointer. { return fFunc; }. void SetAndCopyFunction(const TF1* f = 0); method to set a new function pointer and copy it inside.; By calling th",MatchSource.WIKI,root/html602/ROOT__Math__WrappedMultiTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html:4171,Performance,cache,cached,4171," Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. { if (fOwnFunc && fFunc) delete fFunc; }. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cached inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (from TF1). void ParameterGradient(const double* x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step-size. const TF1 * GetFunction() const; method to retrieve the internal function pointer. { return fFunc; }. void SetAndCopyFunction(const TF1* f = 0); method to set a new function pointer and copy it inside.; By calling this method the clas manages now the passed TF1 pointer. double DoEvalPar(const double* x, const double* p) const; evaluate function passing coordinates",MatchSource.WIKI,root/html602/ROOT__Math__WrappedMultiTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedMultiTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedTF1.html:4847,Integrability,interface,interface,4847,"umentation; WrappedTF1(TF1& f); constructor from a TF1 function pointer. WrappedTF1(TF1& f); copy constructor. void ParameterGradient(double x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. double DoDerivative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters; IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters. void SetDerivPrecision(double eps); { fgEps = eps; }. double GetDerivPrecision(); { return fgEps; }. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. ROOT::Math::IGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cachen inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (this is stored in TF1). void FdF(double x, double& f, double& deriv) const; calculate function and derivative at same time (required by IGradient interface). double DoEvalPar(double x, const double* p) const; evaluate function passing coordinates x and vector of parameters. double DoEval(double x) const; evaluate function using the cached parameter values of this class (not of TF1); re-implement for better efficiency. » Author: L. Moneta Wed Sep 6 09:52:26 2006 » Copyright (c",MatchSource.WIKI,root/html602/ROOT__Math__WrappedTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedTF1.html:4894,Integrability,wrap,wrapper,4894,"nter. WrappedTF1(TF1& f); copy constructor. void ParameterGradient(double x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. double DoDerivative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters; IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters. void SetDerivPrecision(double eps); { fgEps = eps; }. double GetDerivPrecision(); { return fgEps; }. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. ROOT::Math::IGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cachen inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (this is stored in TF1). void FdF(double x, double& f, double& deriv) const; calculate function and derivative at same time (required by IGradient interface). double DoEvalPar(double x, const double* p) const; evaluate function passing coordinates x and vector of parameters. double DoEval(double x) const; evaluate function using the cached parameter values of this class (not of TF1); re-implement for better efficiency. » Author: L. Moneta Wed Sep 6 09:52:26 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/math",MatchSource.WIKI,root/html602/ROOT__Math__WrappedTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedTF1.html:4974,Integrability,interface,interface,4974,"st; evaluate the derivative of the function with respect to the parameters. double DoDerivative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters; IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters. void SetDerivPrecision(double eps); { fgEps = eps; }. double GetDerivPrecision(); { return fgEps; }. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. ROOT::Math::IGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cachen inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (this is stored in TF1). void FdF(double x, double& f, double& deriv) const; calculate function and derivative at same time (required by IGradient interface). double DoEvalPar(double x, const double* p) const; evaluate function passing coordinates x and vector of parameters. double DoEval(double x) const; evaluate function using the cached parameter values of this class (not of TF1); re-implement for better efficiency. » Author: L. Moneta Wed Sep 6 09:52:26 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or sugges",MatchSource.WIKI,root/html602/ROOT__Math__WrappedTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedTF1.html:5507,Integrability,interface,interface,5507,"vative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters; IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters. void SetDerivPrecision(double eps); { fgEps = eps; }. double GetDerivPrecision(); { return fgEps; }. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. ROOT::Math::IGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cachen inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (this is stored in TF1). void FdF(double x, double& f, double& deriv) const; calculate function and derivative at same time (required by IGradient interface). double DoEvalPar(double x, const double* p) const; evaluate function passing coordinates x and vector of parameters. double DoEval(double x) const; evaluate function using the cached parameter values of this class (not of TF1); re-implement for better efficiency. » Author: L. Moneta Wed Sep 6 09:52:26 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__WrappedTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedTF1.html:3775,Modifiability,Inherit,Inheritance,3775,"onst; virtual voidParameterGradient(double x, const double* par, double* grad) const; virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; static voidSetDerivPrecision(double eps); virtual voidSetParameters(const double* p); ROOT::Math::WrappedTF1WrappedTF1(TF1& f); ROOT::Math::WrappedTF1WrappedTF1(const ROOT::Math::WrappedTF1& rhs). private:. virtual doubleDoDerivative(double x) const; virtual doubleDoEval(double x) const; virtual doubleDoEvalPar(double x, const double* p) const; virtual doubleDoParameterDerivative(double x, const double* p, unsigned int ipar) const. Data Members; private:. TF1*fFuncpointer to ROOT function; boolfLinearflag for linear functions; vector<double>fParamscached vector with parameter values; boolfPolynomialflag for polynomial functions; doublefX[1]! cached vector for x value (needed for TF1::EvalPar signature); static doublefgEpsepsilon used in derivative calculation h ~ eps |x|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedTF1(TF1& f); constructor from a TF1 function pointer. WrappedTF1(TF1& f); copy constructor. void ParameterGradient(double x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. double DoDerivative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters; IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters. void SetDerivPrecision(double eps); { fgEps = eps; }. double GetDerivPrecision(); { return fgEps; }. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. RO",MatchSource.WIKI,root/html602/ROOT__Math__WrappedTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedTF1.html:3788,Modifiability,Inherit,Inherited,3788,"onst; virtual voidParameterGradient(double x, const double* par, double* grad) const; virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; static voidSetDerivPrecision(double eps); virtual voidSetParameters(const double* p); ROOT::Math::WrappedTF1WrappedTF1(TF1& f); ROOT::Math::WrappedTF1WrappedTF1(const ROOT::Math::WrappedTF1& rhs). private:. virtual doubleDoDerivative(double x) const; virtual doubleDoEval(double x) const; virtual doubleDoEvalPar(double x, const double* p) const; virtual doubleDoParameterDerivative(double x, const double* p, unsigned int ipar) const. Data Members; private:. TF1*fFuncpointer to ROOT function; boolfLinearflag for linear functions; vector<double>fParamscached vector with parameter values; boolfPolynomialflag for polynomial functions; doublefX[1]! cached vector for x value (needed for TF1::EvalPar signature); static doublefgEpsepsilon used in derivative calculation h ~ eps |x|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedTF1(TF1& f); constructor from a TF1 function pointer. WrappedTF1(TF1& f); copy constructor. void ParameterGradient(double x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. double DoDerivative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters; IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters. void SetDerivPrecision(double eps); { fgEps = eps; }. double GetDerivPrecision(); { return fgEps; }. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. RO",MatchSource.WIKI,root/html602/ROOT__Math__WrappedTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedTF1.html:4857,Modifiability,inherit,inherited,4857,"umentation; WrappedTF1(TF1& f); constructor from a TF1 function pointer. WrappedTF1(TF1& f); copy constructor. void ParameterGradient(double x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. double DoDerivative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters; IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters. void SetDerivPrecision(double eps); { fgEps = eps; }. double GetDerivPrecision(); { return fgEps; }. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. ROOT::Math::IGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cachen inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (this is stored in TF1). void FdF(double x, double& f, double& deriv) const; calculate function and derivative at same time (required by IGradient interface). double DoEvalPar(double x, const double* p) const; evaluate function passing coordinates x and vector of parameters. double DoEval(double x) const; evaluate function using the cached parameter values of this class (not of TF1); re-implement for better efficiency. » Author: L. Moneta Wed Sep 6 09:52:26 2006 » Copyright (c",MatchSource.WIKI,root/html602/ROOT__Math__WrappedTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedTF1.html:4984,Modifiability,inherit,inherited,4984,"st; evaluate the derivative of the function with respect to the parameters. double DoDerivative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters; IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters. void SetDerivPrecision(double eps); { fgEps = eps; }. double GetDerivPrecision(); { return fgEps; }. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. ROOT::Math::IGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cachen inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (this is stored in TF1). void FdF(double x, double& f, double& deriv) const; calculate function and derivative at same time (required by IGradient interface). double DoEvalPar(double x, const double* p) const; evaluate function passing coordinates x and vector of parameters. double DoEval(double x) const; evaluate function using the cached parameter values of this class (not of TF1); re-implement for better efficiency. » Author: L. Moneta Wed Sep 6 09:52:26 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or sugges",MatchSource.WIKI,root/html602/ROOT__Math__WrappedTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedTF1.html:3628,Performance,cache,cached,3628,"rameterDerivative(double x, const double* p, unsigned int ipar = 0) const; doubleROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const; virtual voidParameterGradient(double x, const double* par, double* grad) const; virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; static voidSetDerivPrecision(double eps); virtual voidSetParameters(const double* p); ROOT::Math::WrappedTF1WrappedTF1(TF1& f); ROOT::Math::WrappedTF1WrappedTF1(const ROOT::Math::WrappedTF1& rhs). private:. virtual doubleDoDerivative(double x) const; virtual doubleDoEval(double x) const; virtual doubleDoEvalPar(double x, const double* p) const; virtual doubleDoParameterDerivative(double x, const double* p, unsigned int ipar) const. Data Members; private:. TF1*fFuncpointer to ROOT function; boolfLinearflag for linear functions; vector<double>fParamscached vector with parameter values; boolfPolynomialflag for polynomial functions; doublefX[1]! cached vector for x value (needed for TF1::EvalPar signature); static doublefgEpsepsilon used in derivative calculation h ~ eps |x|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedTF1(TF1& f); constructor from a TF1 function pointer. WrappedTF1(TF1& f); copy constructor. void ParameterGradient(double x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. double DoDerivative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters; IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed par",MatchSource.WIKI,root/html602/ROOT__Math__WrappedTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedTF1.html:5056,Performance,cache,cachen,5056,"st; evaluate the derivative of the function with respect to the parameters. double DoDerivative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters; IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters. void SetDerivPrecision(double eps); { fgEps = eps; }. double GetDerivPrecision(); { return fgEps; }. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. ROOT::Math::IGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cachen inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (this is stored in TF1). void FdF(double x, double& f, double& deriv) const; calculate function and derivative at same time (required by IGradient interface). double DoEvalPar(double x, const double* p) const; evaluate function passing coordinates x and vector of parameters. double DoEval(double x) const; evaluate function using the cached parameter values of this class (not of TF1); re-implement for better efficiency. » Author: L. Moneta Wed Sep 6 09:52:26 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or sugges",MatchSource.WIKI,root/html602/ROOT__Math__WrappedTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedTF1.html:5177,Performance,cache,cached,5177,"vative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters; IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters. void SetDerivPrecision(double eps); { fgEps = eps; }. double GetDerivPrecision(); { return fgEps; }. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. ROOT::Math::IGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cachen inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (this is stored in TF1). void FdF(double x, double& f, double& deriv) const; calculate function and derivative at same time (required by IGradient interface). double DoEvalPar(double x, const double* p) const; evaluate function passing coordinates x and vector of parameters. double DoEval(double x) const; evaluate function using the cached parameter values of this class (not of TF1); re-implement for better efficiency. » Author: L. Moneta Wed Sep 6 09:52:26 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__WrappedTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedTF1.html:5695,Performance,cache,cached,5695,"vative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters; IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters. void SetDerivPrecision(double eps); { fgEps = eps; }. double GetDerivPrecision(); { return fgEps; }. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. ROOT::Math::IGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cachen inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (this is stored in TF1). void FdF(double x, double& f, double& deriv) const; calculate function and derivative at same time (required by IGradient interface). double DoEvalPar(double x, const double* p) const; evaluate function passing coordinates x and vector of parameters. double DoEval(double x) const; evaluate function using the cached parameter values of this class (not of TF1); re-implement for better efficiency. » Author: L. Moneta Wed Sep 6 09:52:26 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__WrappedTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedTF1.html
https://root.cern/root/html602/ROOT__Math__WrappedTF1.html:4396,Safety,avoid,avoid,4396,"arameterDerivative(double x, const double* p, unsigned int ipar) const. Data Members; private:. TF1*fFuncpointer to ROOT function; boolfLinearflag for linear functions; vector<double>fParamscached vector with parameter values; boolfPolynomialflag for polynomial functions; doublefX[1]! cached vector for x value (needed for TF1::EvalPar signature); static doublefgEpsepsilon used in derivative calculation h ~ eps |x|. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; WrappedTF1(TF1& f); constructor from a TF1 function pointer. WrappedTF1(TF1& f); copy constructor. void ParameterGradient(double x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. double DoDerivative(double x) const; return the function derivatives w.r.t. x. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const; evaluate the derivative of the function with respect to the parameters; IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters. void SetDerivPrecision(double eps); { fgEps = eps; }. double GetDerivPrecision(); { return fgEps; }. virtual ~WrappedTF1(). Destructor (no operations). TF1 Function pointer is not owned. {}. ROOT::Math::IGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cachen inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; retur",MatchSource.WIKI,root/html602/ROOT__Math__WrappedTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__WrappedTF1.html
https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:1299,Availability,toler,toler,1299,". ROOT::Minuit2::CombinedMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::CombinedMinimizer. class ROOT::Minuit2::CombinedMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Combined minimizer: combination of Migrad and Simplex. I; If the Migrad method fails at first attempt, a simplex; minimization is performed and then migrad is tried again. Function Members (Methods); public:. virtual~CombinedMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(const ROOT::Minuit2::CombinedMinimizer&); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const",MatchSource.WIKI,root/html602/ROOT__Minuit2__CombinedMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:1568,Availability,toler,toler,1568,"hod fails at first attempt, a simplex; minimization is performed and then migrad is tried again. Function Members (Methods); public:. virtual~CombinedMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(const ROOT::Minuit2::CombinedMinimizer&); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Mi",MatchSource.WIKI,root/html602/ROOT__Minuit2__CombinedMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:1833,Availability,toler,toler,1833,"er(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(const ROOT::Minuit2::CombinedMinimizer&); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minui",MatchSource.WIKI,root/html602/ROOT__Minuit2__CombinedMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:2106,Availability,toler,toler,2106,"rROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Min",MatchSource.WIKI,root/html602/ROOT__Minuit2__CombinedMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:2362,Availability,toler,toler,2362,":Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = ",MatchSource.WIKI,root/html602/ROOT__Minuit2__CombinedMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:2626,Availability,toler,toler,2626,"nst ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsi",MatchSource.WIKI,root/html602/ROOT__Minuit2__CombinedMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:2927,Availability,toler,toler,2927,"::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000",MatchSource.WIKI,root/html602/ROOT__Minuit2__CombinedMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:3236,Availability,toler,toler,3236,"cn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::",MatchSource.WIKI,root/html602/ROOT__Minuit2__CombinedMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:3763,Availability,toler,toler,3763,"NGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::CombinedMinimizer&operator=(const ROOT::Minuit2::CombinedMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members;",MatchSource.WIKI,root/html602/ROOT__Minuit2__CombinedMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:4041,Availability,toler,toler,4041,"cn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::CombinedMinimizer&operator=(const ROOT::Minuit2::CombinedMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::CombinedMinimumBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CombinedMinimizer(); {}. ~CombinedMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the ",MatchSource.WIKI,root/html602/ROOT__Minuit2__CombinedMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:4628,Modifiability,Inherit,Inheritance,4628,"it2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::CombinedMinimizer&operator=(const ROOT::Minuit2::CombinedMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::CombinedMinimumBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CombinedMinimizer(); {}. ~CombinedMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__CombinedMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:4641,Modifiability,Inherit,Inherited,4641,"it2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::CombinedMinimizer&operator=(const ROOT::Minuit2::CombinedMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::CombinedMinimumBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CombinedMinimizer(); {}. ~CombinedMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__CombinedMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:498,Performance,perform,performed,498,". ROOT::Minuit2::CombinedMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::CombinedMinimizer. class ROOT::Minuit2::CombinedMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Combined minimizer: combination of Migrad and Simplex. I; If the Migrad method fails at first attempt, a simplex; minimization is performed and then migrad is tried again. Function Members (Methods); public:. virtual~CombinedMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(const ROOT::Minuit2::CombinedMinimizer&); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const",MatchSource.WIKI,root/html602/ROOT__Minuit2__CombinedMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:414,Usability,Simpl,Simplex,414,". ROOT::Minuit2::CombinedMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::CombinedMinimizer. class ROOT::Minuit2::CombinedMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Combined minimizer: combination of Migrad and Simplex. I; If the Migrad method fails at first attempt, a simplex; minimization is performed and then migrad is tried again. Function Members (Methods); public:. virtual~CombinedMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(const ROOT::Minuit2::CombinedMinimizer&); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const",MatchSource.WIKI,root/html602/ROOT__Minuit2__CombinedMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:473,Usability,simpl,simplex,473,". ROOT::Minuit2::CombinedMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::CombinedMinimizer. class ROOT::Minuit2::CombinedMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Combined minimizer: combination of Migrad and Simplex. I; If the Migrad method fails at first attempt, a simplex; minimization is performed and then migrad is tried again. Function Members (Methods); public:. virtual~CombinedMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(); ROOT::Minuit2::CombinedMinimizerCombinedMinimizer(const ROOT::Minuit2::CombinedMinimizer&); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const",MatchSource.WIKI,root/html602/ROOT__Minuit2__CombinedMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:674,Availability,avail,available,674,". ROOT::Minuit2::FCNBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::FCNBase. class ROOT::Minuit2::FCNBase: public ROOT::Minuit2::GenericFunction. Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. @author Fred James and Matthias Winkler; modified by Andras Zsenei and Lorenzo Moneta. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FCNBase(); virtual doubleErrorDef() const; ROOT::Minuit2::FCNBaseFCNBase(); ROOT::Minuit2::FCNBaseFCNBase(const ROOT::Minuit2::FCNBase&); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(const ROOT::Minuit2::GenericFunction&); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::FCNBase&operator=(const ROOT::Minuit2::FCNBase&); virtual voidSetErrorDef(double); virtual doubleUp() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FCNBase(); {}. double operator()(const vector<double>& x) const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is reque",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:2185,Availability,Error,ErrorDef,2185,"tErrorDef(double); virtual doubleUp() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FCNBase(); {}. double operator()(const vector<double>& x) const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this fu",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:2203,Availability,Error,Error,2203,"bleUp() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FCNBase(); {}. double operator()(const vector<double>& x) const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:2262,Availability,error,errors,2262,"ibraries. Function documentation; virtual ~FCNBase(); {}. double operator()(const vector<double>& x) const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:2478,Availability,error,errors,2478,"s is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:2649,Availability,Error,Error,2649,"s is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:2708,Availability,error,errors,2708,"s is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:2924,Availability,error,errors,2924,"s is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:3074,Availability,Error,ErrorDef,3074,"s is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:3152,Availability,error,error,3152,"s is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:329,Integrability,Interface,Interface,329,". ROOT::Minuit2::FCNBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::FCNBase. class ROOT::Minuit2::FCNBase: public ROOT::Minuit2::GenericFunction. Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. @author Fred James and Matthias Winkler; modified by Andras Zsenei and Lorenzo Moneta. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FCNBase(); virtual doubleErrorDef() const; ROOT::Minuit2::FCNBaseFCNBase(); ROOT::Minuit2::FCNBaseFCNBase(const ROOT::Minuit2::FCNBase&); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(const ROOT::Minuit2::GenericFunction&); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::FCNBase&operator=(const ROOT::Minuit2::FCNBase&); virtual voidSetErrorDef(double); virtual doubleUp() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FCNBase(); {}. double operator()(const vector<double>& x) const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is reque",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:3117,Integrability,interface,interface,3117,"s is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:1248,Modifiability,Inherit,Inheritance,1248,"inuit2::FCNBase: public ROOT::Minuit2::GenericFunction. Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. @author Fred James and Matthias Winkler; modified by Andras Zsenei and Lorenzo Moneta. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FCNBase(); virtual doubleErrorDef() const; ROOT::Minuit2::FCNBaseFCNBase(); ROOT::Minuit2::FCNBaseFCNBase(const ROOT::Minuit2::FCNBase&); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(const ROOT::Minuit2::GenericFunction&); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::FCNBase&operator=(const ROOT::Minuit2::FCNBase&); virtual voidSetErrorDef(double); virtual doubleUp() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FCNBase(); {}. double operator()(const vector<double>& x) const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as th",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:1261,Modifiability,Inherit,Inherited,1261,"inuit2::FCNBase: public ROOT::Minuit2::GenericFunction. Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. @author Fred James and Matthias Winkler; modified by Andras Zsenei and Lorenzo Moneta. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FCNBase(); virtual doubleErrorDef() const; ROOT::Minuit2::FCNBaseFCNBase(); ROOT::Minuit2::FCNBaseFCNBase(const ROOT::Minuit2::FCNBase&); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(const ROOT::Minuit2::GenericFunction&); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::FCNBase&operator=(const ROOT::Minuit2::FCNBase&); virtual voidSetErrorDef(double); virtual doubleUp() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FCNBase(); {}. double operator()(const vector<double>& x) const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as th",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:1856,Modifiability,Variab,VariableMetricMinimizer,1856,"ROOT::Minuit2::FCNBaseFCNBase(const ROOT::Minuit2::FCNBase&); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(const ROOT::Minuit2::GenericFunction&); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::FCNBase&operator=(const ROOT::Minuit2::FCNBase&); virtual voidSetErrorDef(double); virtual doubleUp() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FCNBase(); {}. double operator()(const vector<double>& x) const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:2138,Modifiability,Variab,VariableMetricMinimizer,2138,"const ROOT::Minuit2::FCNBase&); virtual voidSetErrorDef(double); virtual doubleUp() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FCNBase(); {}. double operator()(const vector<double>& x) const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamical",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:1966,Performance,perform,performs,1966,"icFunctionROOT::Minuit2::GenericFunction::GenericFunction(const ROOT::Minuit2::GenericFunction&); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::FCNBase&operator=(const ROOT::Minuit2::FCNBase&); virtual voidSetErrorDef(double); virtual doubleUp() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FCNBase(); {}. double operator()(const vector<double>& x) const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it b",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:2405,Testability,log,log,2405," const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:2851,Testability,log,log,2851,"s is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNGradientBase.html:1073,Availability,avail,available,1073,"ass Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::FCNGradientBase. class ROOT::Minuit2::FCNGradientBase: public ROOT::Minuit2::FCNBase. Extension of the FCNBase for providing the analytical Gradient of the; function. The user-Gradient is checked at the beginning of the; minimization against the Minuit internal numerical Gradient in order to; spot problems in the analytical Gradient calculation. This can be turned; off by overriding CheckGradient() to make it return ""false"".; The size of the output Gradient vector must be equal to the size of the; input Parameter vector.; Minuit does a check of the user Gradient at the beginning, if this is not; wanted the method ""CheckGradient()"" has to be overridden to return; ""false"". Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FCNGradientBase(); virtual boolCheckGradient() const; virtual doubleROOT::Minuit2::FCNBase::ErrorDef() const; ROOT::Minuit2::FCNBaseROOT::Minuit2::FCNBase::FCNBase(); ROOT::Minuit2::FCNBaseROOT::Minuit2::FCNBase::FCNBase(const ROOT::Minuit2::FCNBase&); ROOT::Minuit2::FCNGradientBaseFCNGradientBase(); ROOT::Minuit2::FCNGradientBaseFCNGradientBase(const ROOT::Minuit2::FCNGradientBase&); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(const ROOT::Minuit2::GenericFunction&); virtual vector<double>Gradient(const vector<double>&) const; virtual doubleROOT::Minuit2::FCNBase::operator()(const vector<double>& x) const; ROOT::Minuit2::FCNGradientBase&operator=(const ROOT::Minuit2::FCNGradientBase&); virtual voidROOT::Minuit2::FCNBase::SetErrorDef(double); virtual doubleROOT::Minuit2::FCNBase::Up() const. Class Charts. Inheritance; Inherit",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNGradientBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNGradientBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNGradientBase.html:1207,Availability,Error,ErrorDef,1207,"mization against the Minuit internal numerical Gradient in order to; spot problems in the analytical Gradient calculation. This can be turned; off by overriding CheckGradient() to make it return ""false"".; The size of the output Gradient vector must be equal to the size of the; input Parameter vector.; Minuit does a check of the user Gradient at the beginning, if this is not; wanted the method ""CheckGradient()"" has to be overridden to return; ""false"". Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FCNGradientBase(); virtual boolCheckGradient() const; virtual doubleROOT::Minuit2::FCNBase::ErrorDef() const; ROOT::Minuit2::FCNBaseROOT::Minuit2::FCNBase::FCNBase(); ROOT::Minuit2::FCNBaseROOT::Minuit2::FCNBase::FCNBase(const ROOT::Minuit2::FCNBase&); ROOT::Minuit2::FCNGradientBaseFCNGradientBase(); ROOT::Minuit2::FCNGradientBaseFCNGradientBase(const ROOT::Minuit2::FCNGradientBase&); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(const ROOT::Minuit2::GenericFunction&); virtual vector<double>Gradient(const vector<double>&) const; virtual doubleROOT::Minuit2::FCNBase::operator()(const vector<double>& x) const; ROOT::Minuit2::FCNGradientBase&operator=(const ROOT::Minuit2::FCNGradientBase&); virtual voidROOT::Minuit2::FCNBase::SetErrorDef(double); virtual doubleROOT::Minuit2::FCNBase::Up() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FCNGradientBase(); {}. std::vector<double> Gradient(const vector<double>& ) const. bool CheckGradient() const; {return true;}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNGradientBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNGradientBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNGradientBase.html:2046,Modifiability,Inherit,Inheritance,2046,"mization against the Minuit internal numerical Gradient in order to; spot problems in the analytical Gradient calculation. This can be turned; off by overriding CheckGradient() to make it return ""false"".; The size of the output Gradient vector must be equal to the size of the; input Parameter vector.; Minuit does a check of the user Gradient at the beginning, if this is not; wanted the method ""CheckGradient()"" has to be overridden to return; ""false"". Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FCNGradientBase(); virtual boolCheckGradient() const; virtual doubleROOT::Minuit2::FCNBase::ErrorDef() const; ROOT::Minuit2::FCNBaseROOT::Minuit2::FCNBase::FCNBase(); ROOT::Minuit2::FCNBaseROOT::Minuit2::FCNBase::FCNBase(const ROOT::Minuit2::FCNBase&); ROOT::Minuit2::FCNGradientBaseFCNGradientBase(); ROOT::Minuit2::FCNGradientBaseFCNGradientBase(const ROOT::Minuit2::FCNGradientBase&); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(const ROOT::Minuit2::GenericFunction&); virtual vector<double>Gradient(const vector<double>&) const; virtual doubleROOT::Minuit2::FCNBase::operator()(const vector<double>& x) const; ROOT::Minuit2::FCNGradientBase&operator=(const ROOT::Minuit2::FCNGradientBase&); virtual voidROOT::Minuit2::FCNBase::SetErrorDef(double); virtual doubleROOT::Minuit2::FCNBase::Up() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FCNGradientBase(); {}. std::vector<double> Gradient(const vector<double>& ) const. bool CheckGradient() const; {return true;}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNGradientBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNGradientBase.html
https://root.cern/root/html602/ROOT__Minuit2__FCNGradientBase.html:2059,Modifiability,Inherit,Inherited,2059,"mization against the Minuit internal numerical Gradient in order to; spot problems in the analytical Gradient calculation. This can be turned; off by overriding CheckGradient() to make it return ""false"".; The size of the output Gradient vector must be equal to the size of the; input Parameter vector.; Minuit does a check of the user Gradient at the beginning, if this is not; wanted the method ""CheckGradient()"" has to be overridden to return; ""false"". Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FCNGradientBase(); virtual boolCheckGradient() const; virtual doubleROOT::Minuit2::FCNBase::ErrorDef() const; ROOT::Minuit2::FCNBaseROOT::Minuit2::FCNBase::FCNBase(); ROOT::Minuit2::FCNBaseROOT::Minuit2::FCNBase::FCNBase(const ROOT::Minuit2::FCNBase&); ROOT::Minuit2::FCNGradientBaseFCNGradientBase(); ROOT::Minuit2::FCNGradientBaseFCNGradientBase(const ROOT::Minuit2::FCNGradientBase&); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(const ROOT::Minuit2::GenericFunction&); virtual vector<double>Gradient(const vector<double>&) const; virtual doubleROOT::Minuit2::FCNBase::operator()(const vector<double>& x) const; ROOT::Minuit2::FCNGradientBase&operator=(const ROOT::Minuit2::FCNGradientBase&); virtual voidROOT::Minuit2::FCNBase::SetErrorDef(double); virtual doubleROOT::Minuit2::FCNBase::Up() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FCNGradientBase(); {}. std::vector<double> Gradient(const vector<double>& ) const. bool CheckGradient() const; {return true;}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FCNGradientBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNGradientBase.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html:1227,Availability,avail,available,1227,"; » MATH; » MINUIT2; » ROOT::Minuit2::FumiliFCNBase. class ROOT::Minuit2::FumiliFCNBase: public ROOT::Minuit2::FCNBase. Extension of the FCNBase for the Fumili method. Fumili applies only to; minimization problems used for fitting. The method is based on a; linearization of the model function negleting second derivatives.; User needs to provide the model function. The figure-of-merit describing; the difference between the model function and the actual measurements; has to be implemented by the user in a subclass of FumiliFCNBase.; For an example see the FumiliChi2FCN and FumiliStandardChi2FCN classes. @author Andras Zsenei and Lorenzo Moneta, Creation date: 23 Aug 2004. @see <A HREF=""http://www.cern.ch/winkler/minuit/tutorial/mntutorial.pdf"">MINUIT Tutorial</A> on function minimization, section 5. @see FumiliChi2FCN. @see FumiliStandardChi2FCN. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FumiliFCNBase(); virtual unsigned intDimension(); virtual doubleROOT::Minuit2::FCNBase::ErrorDef() const; virtual voidEvaluateAll(const vector<double>& par); ROOT::Minuit2::FCNBaseROOT::Minuit2::FCNBase::FCNBase(); ROOT::Minuit2::FCNBaseROOT::Minuit2::FCNBase::FCNBase(const ROOT::Minuit2::FCNBase&); ROOT::Minuit2::FumiliFCNBaseFumiliFCNBase(); ROOT::Minuit2::FumiliFCNBaseFumiliFCNBase(unsigned int npar); ROOT::Minuit2::FumiliFCNBaseFumiliFCNBase(const ROOT::Minuit2::FumiliFCNBase&); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(const ROOT::Minuit2::GenericFunction&); virtual const vector<double>&Gradient() const; virtual doubleHessian(unsigned int row, unsigned int col) const; virtual doubleROOT::Minuit2::FCNBase::operator()(const vector<double>& x) const; ROOT::Minuit2::FumiliFCNBase&operator=(const ROOT::Minuit2::FumiliFCNBa",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliFCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html:1357,Availability,Error,ErrorDef,1357,"dChi2FCN classes. @author Andras Zsenei and Lorenzo Moneta, Creation date: 23 Aug 2004. @see <A HREF=""http://www.cern.ch/winkler/minuit/tutorial/mntutorial.pdf"">MINUIT Tutorial</A> on function minimization, section 5. @see FumiliChi2FCN. @see FumiliStandardChi2FCN. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FumiliFCNBase(); virtual unsigned intDimension(); virtual doubleROOT::Minuit2::FCNBase::ErrorDef() const; virtual voidEvaluateAll(const vector<double>& par); ROOT::Minuit2::FCNBaseROOT::Minuit2::FCNBase::FCNBase(); ROOT::Minuit2::FCNBaseROOT::Minuit2::FCNBase::FCNBase(const ROOT::Minuit2::FCNBase&); ROOT::Minuit2::FumiliFCNBaseFumiliFCNBase(); ROOT::Minuit2::FumiliFCNBaseFumiliFCNBase(unsigned int npar); ROOT::Minuit2::FumiliFCNBaseFumiliFCNBase(const ROOT::Minuit2::FumiliFCNBase&); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(const ROOT::Minuit2::GenericFunction&); virtual const vector<double>&Gradient() const; virtual doubleHessian(unsigned int row, unsigned int col) const; virtual doubleROOT::Minuit2::FCNBase::operator()(const vector<double>& x) const; ROOT::Minuit2::FumiliFCNBase&operator=(const ROOT::Minuit2::FumiliFCNBase&); virtual voidROOT::Minuit2::FCNBase::SetErrorDef(double); virtual doubleROOT::Minuit2::FCNBase::Up() const; virtual doubleValue() const. protected:. vector<double>&Gradient(); vector<double>&Hessian(); virtual voidInitAndReset(unsigned int npar); voidSetFCNValue(double value). Data Members; private:. vector<double>fGradient; vector<double>fHessian; unsigned intfNumberOfParameters; doublefValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FumiliFCNBase(). Default Constructor. Need in this case to create when implementing EvaluateAll t",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliFCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html:2637,Modifiability,Inherit,Inheritance,2637,"ned int npar); ROOT::Minuit2::FumiliFCNBaseFumiliFCNBase(const ROOT::Minuit2::FumiliFCNBase&); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(const ROOT::Minuit2::GenericFunction&); virtual const vector<double>&Gradient() const; virtual doubleHessian(unsigned int row, unsigned int col) const; virtual doubleROOT::Minuit2::FCNBase::operator()(const vector<double>& x) const; ROOT::Minuit2::FumiliFCNBase&operator=(const ROOT::Minuit2::FumiliFCNBase&); virtual voidROOT::Minuit2::FCNBase::SetErrorDef(double); virtual doubleROOT::Minuit2::FCNBase::Up() const; virtual doubleValue() const. protected:. vector<double>&Gradient(); vector<double>&Hessian(); virtual voidInitAndReset(unsigned int npar); voidSetFCNValue(double value). Data Members; private:. vector<double>fGradient; vector<double>fHessian; unsigned intfNumberOfParameters; doublefValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FumiliFCNBase(). Default Constructor. Need in this case to create when implementing EvaluateAll the Gradient and Hessian vectors with the right size. {}. FumiliFCNBase(unsigned int npar). Constructor which initializes the class with the function provided by the; user for modeling the data. @param npar the number of parameters. {}. virtual ~FumiliFCNBase(); FumiliFCNBase(const ParametricFunction& modelFCN) { fModelFunction = &modelFCN; }. {}. void EvaluateAll(const vector<double>& par). Evaluate function Value, Gradient and Hessian using Fumili approximation, for values of parameters p; The resul is cached inside and is return from the FumiliFCNBase::Value , FumiliFCNBase::Gradient and; FumiliFCNBase::Hessian methods. @param par vector of parameters. double Value() const. Return cached Value of objective function estimated previously using the FumiliFCNBase::EvaluateAll method. { return fValue; }. const std::vector<double> & Gradient() ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliFCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html:2650,Modifiability,Inherit,Inherited,2650,"ned int npar); ROOT::Minuit2::FumiliFCNBaseFumiliFCNBase(const ROOT::Minuit2::FumiliFCNBase&); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(); ROOT::Minuit2::GenericFunctionROOT::Minuit2::GenericFunction::GenericFunction(const ROOT::Minuit2::GenericFunction&); virtual const vector<double>&Gradient() const; virtual doubleHessian(unsigned int row, unsigned int col) const; virtual doubleROOT::Minuit2::FCNBase::operator()(const vector<double>& x) const; ROOT::Minuit2::FumiliFCNBase&operator=(const ROOT::Minuit2::FumiliFCNBase&); virtual voidROOT::Minuit2::FCNBase::SetErrorDef(double); virtual doubleROOT::Minuit2::FCNBase::Up() const; virtual doubleValue() const. protected:. vector<double>&Gradient(); vector<double>&Hessian(); virtual voidInitAndReset(unsigned int npar); voidSetFCNValue(double value). Data Members; private:. vector<double>fGradient; vector<double>fHessian; unsigned intfNumberOfParameters; doublefValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FumiliFCNBase(). Default Constructor. Need in this case to create when implementing EvaluateAll the Gradient and Hessian vectors with the right size. {}. FumiliFCNBase(unsigned int npar). Constructor which initializes the class with the function provided by the; user for modeling the data. @param npar the number of parameters. {}. virtual ~FumiliFCNBase(); FumiliFCNBase(const ParametricFunction& modelFCN) { fModelFunction = &modelFCN; }. {}. void EvaluateAll(const vector<double>& par). Evaluate function Value, Gradient and Hessian using Fumili approximation, for values of parameters p; The resul is cached inside and is return from the FumiliFCNBase::Value , FumiliFCNBase::Gradient and; FumiliFCNBase::Hessian methods. @param par vector of parameters. double Value() const. Return cached Value of objective function estimated previously using the FumiliFCNBase::EvaluateAll method. { return fValue; }. const std::vector<double> & Gradient() ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliFCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html:4108,Modifiability,variab,variable,4108,"Default Constructor. Need in this case to create when implementing EvaluateAll the Gradient and Hessian vectors with the right size. {}. FumiliFCNBase(unsigned int npar). Constructor which initializes the class with the function provided by the; user for modeling the data. @param npar the number of parameters. {}. virtual ~FumiliFCNBase(); FumiliFCNBase(const ParametricFunction& modelFCN) { fModelFunction = &modelFCN; }. {}. void EvaluateAll(const vector<double>& par). Evaluate function Value, Gradient and Hessian using Fumili approximation, for values of parameters p; The resul is cached inside and is return from the FumiliFCNBase::Value , FumiliFCNBase::Gradient and; FumiliFCNBase::Hessian methods. @param par vector of parameters. double Value() const. Return cached Value of objective function estimated previously using the FumiliFCNBase::EvaluateAll method. { return fValue; }. const std::vector<double> & Gradient() const. Return cached Value of function Gradient estimated previously using the FumiliFCNBase::EvaluateAll method. { return fGradient; }. double Hessian(unsigned int row, unsigned int col) const. Return Value of the i-th j-th element of the Hessian matrix estimated previously using the FumiliFCNBase::EvaluateAll method; @param row row Index of the matrix; @param col col Index of the matrix. unsigned int Dimension(). return number of function variable (parameters) , i.e. function dimension. { return fNumberOfParameters; }. void InitAndReset(unsigned int npar). initialize and reset values of gradien and Hessian. void SetFCNValue(double value); methods to be used by the derived classes to set the values. { fValue = value; }. std::vector<double> & Gradient(); { return fGradient; }. std::vector<double> & Hessian(); { return fHessian; }. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliFCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html:3320,Performance,cache,cached,3320,"p() const; virtual doubleValue() const. protected:. vector<double>&Gradient(); vector<double>&Hessian(); virtual voidInitAndReset(unsigned int npar); voidSetFCNValue(double value). Data Members; private:. vector<double>fGradient; vector<double>fHessian; unsigned intfNumberOfParameters; doublefValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FumiliFCNBase(). Default Constructor. Need in this case to create when implementing EvaluateAll the Gradient and Hessian vectors with the right size. {}. FumiliFCNBase(unsigned int npar). Constructor which initializes the class with the function provided by the; user for modeling the data. @param npar the number of parameters. {}. virtual ~FumiliFCNBase(); FumiliFCNBase(const ParametricFunction& modelFCN) { fModelFunction = &modelFCN; }. {}. void EvaluateAll(const vector<double>& par). Evaluate function Value, Gradient and Hessian using Fumili approximation, for values of parameters p; The resul is cached inside and is return from the FumiliFCNBase::Value , FumiliFCNBase::Gradient and; FumiliFCNBase::Hessian methods. @param par vector of parameters. double Value() const. Return cached Value of objective function estimated previously using the FumiliFCNBase::EvaluateAll method. { return fValue; }. const std::vector<double> & Gradient() const. Return cached Value of function Gradient estimated previously using the FumiliFCNBase::EvaluateAll method. { return fGradient; }. double Hessian(unsigned int row, unsigned int col) const. Return Value of the i-th j-th element of the Hessian matrix estimated previously using the FumiliFCNBase::EvaluateAll method; @param row row Index of the matrix; @param col col Index of the matrix. unsigned int Dimension(). return number of function variable (parameters) , i.e. function dimension. { return fNumberOfParameters; }. void InitAndReset(unsigned int npar). initialize and reset values of gradien and Hessian. void SetFCNValue(double value); methods to",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliFCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html:3503,Performance,cache,cached,3503,"t; vector<double>fHessian; unsigned intfNumberOfParameters; doublefValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FumiliFCNBase(). Default Constructor. Need in this case to create when implementing EvaluateAll the Gradient and Hessian vectors with the right size. {}. FumiliFCNBase(unsigned int npar). Constructor which initializes the class with the function provided by the; user for modeling the data. @param npar the number of parameters. {}. virtual ~FumiliFCNBase(); FumiliFCNBase(const ParametricFunction& modelFCN) { fModelFunction = &modelFCN; }. {}. void EvaluateAll(const vector<double>& par). Evaluate function Value, Gradient and Hessian using Fumili approximation, for values of parameters p; The resul is cached inside and is return from the FumiliFCNBase::Value , FumiliFCNBase::Gradient and; FumiliFCNBase::Hessian methods. @param par vector of parameters. double Value() const. Return cached Value of objective function estimated previously using the FumiliFCNBase::EvaluateAll method. { return fValue; }. const std::vector<double> & Gradient() const. Return cached Value of function Gradient estimated previously using the FumiliFCNBase::EvaluateAll method. { return fGradient; }. double Hessian(unsigned int row, unsigned int col) const. Return Value of the i-th j-th element of the Hessian matrix estimated previously using the FumiliFCNBase::EvaluateAll method; @param row row Index of the matrix; @param col col Index of the matrix. unsigned int Dimension(). return number of function variable (parameters) , i.e. function dimension. { return fNumberOfParameters; }. void InitAndReset(unsigned int npar). initialize and reset values of gradien and Hessian. void SetFCNValue(double value); methods to be used by the derived classes to set the values. { fValue = value; }. std::vector<double> & Gradient(); { return fGradient; }. std::vector<double> & Hessian(); { return fHessian; }. » Last changed: root/minuit2:$Id$ » Last ge",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliFCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html:3677,Performance,cache,cached,3677,"NBase(). Default Constructor. Need in this case to create when implementing EvaluateAll the Gradient and Hessian vectors with the right size. {}. FumiliFCNBase(unsigned int npar). Constructor which initializes the class with the function provided by the; user for modeling the data. @param npar the number of parameters. {}. virtual ~FumiliFCNBase(); FumiliFCNBase(const ParametricFunction& modelFCN) { fModelFunction = &modelFCN; }. {}. void EvaluateAll(const vector<double>& par). Evaluate function Value, Gradient and Hessian using Fumili approximation, for values of parameters p; The resul is cached inside and is return from the FumiliFCNBase::Value , FumiliFCNBase::Gradient and; FumiliFCNBase::Hessian methods. @param par vector of parameters. double Value() const. Return cached Value of objective function estimated previously using the FumiliFCNBase::EvaluateAll method. { return fValue; }. const std::vector<double> & Gradient() const. Return cached Value of function Gradient estimated previously using the FumiliFCNBase::EvaluateAll method. { return fGradient; }. double Hessian(unsigned int row, unsigned int col) const. Return Value of the i-th j-th element of the Hessian matrix estimated previously using the FumiliFCNBase::EvaluateAll method; @param row row Index of the matrix; @param col col Index of the matrix. unsigned int Dimension(). return number of function variable (parameters) , i.e. function dimension. { return fNumberOfParameters; }. void InitAndReset(unsigned int npar). initialize and reset values of gradien and Hessian. void SetFCNValue(double value); methods to be used by the derived classes to set the values. { fValue = value; }. std::vector<double> & Gradient(); { return fGradient; }. std::vector<double> & Hessian(); { return fHessian; }. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT s",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliFCNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliFCNBase.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:1334,Availability,toler,toler,1334,"OOT::Minuit2::FumiliMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::FumiliMinimizer. class ROOT::Minuit2::FumiliMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Instantiates the seed generator and Minimum builder for the; Fumili minimization method. Produces the Minimum via the; Minimize methods inherited from ModularFunctionMinimizer. @author Andras Zsenei and Lorenzo Moneta, Creation date: 28 Sep 2004. @ingroup Minuit. Function Members (Methods); public:. virtual~FumiliMinimizer(); virtual const ROOT::Minuit2::FumiliBuilder&Builder() const; virtual ROOT::Minuit2::FumiliBuilder&Builder(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(const ROOT::Minuit2::FumiliMinimizer&); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& s",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:1566,Availability,toler,toler,1566,"the Minimum via the; Minimize methods inherited from ModularFunctionMinimizer. @author Andras Zsenei and Lorenzo Moneta, Creation date: 28 Sep 2004. @ingroup Minuit. Function Members (Methods); public:. virtual~FumiliMinimizer(); virtual const ROOT::Minuit2::FumiliBuilder&Builder() const; virtual ROOT::Minuit2::FumiliBuilder&Builder(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(const ROOT::Minuit2::FumiliMinimizer&); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:1799,Availability,toler,toler,1799,"rtual const ROOT::Minuit2::FumiliBuilder&Builder() const; virtual ROOT::Minuit2::FumiliBuilder&Builder(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(const ROOT::Minuit2::FumiliMinimizer&); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCo",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:2040,Availability,toler,toler,2040,"&); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUs",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:2267,Availability,toler,toler,2267,"uit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minui",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:2502,Availability,toler,toler,2502,"unctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::MnFcn& mfcn, const ROOT::Minuit2::GradientCalculator& gc, const ROOT::Minuit2::MinimumSeed& seed, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(c",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:2779,Availability,toler,toler,2779,"onst ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::MnFcn& mfcn, const ROOT::Minuit2::GradientCalculator& gc, const ROOT::Minuit2::MinimumSeed& seed, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT:",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:3064,Availability,toler,toler,3064,"ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::MnFcn& mfcn, const ROOT::Minuit2::GradientCalculator& gc, const ROOT::Minuit2::MinimumSeed& seed, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::Modul",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:3333,Availability,toler,toler,3333,"uit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::MnFcn& mfcn, const ROOT::Minuit2::GradientCalculator& gc, const ROOT::Minuit2::MinimumSeed& seed, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::FumiliMinimizer&operator=(const ROOT::Minuit2::FumiliMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::FumiliBuilderfMinBu",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:3557,Availability,toler,toler,3557,"uit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::MnFcn& mfcn, const ROOT::Minuit2::GradientCalculator& gc, const ROOT::Minuit2::MinimumSeed& seed, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::FumiliMinimizer&operator=(const ROOT::Minuit2::FumiliMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::FumiliBuilderfMinBu",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:3811,Availability,toler,toler,3811,"ariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::MnFcn& mfcn, const ROOT::Minuit2::GradientCalculator& gc, const ROOT::Minuit2::MinimumSeed& seed, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::FumiliMinimizer&operator=(const ROOT::Minuit2::FumiliMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::FumiliBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FumiliMinimizer(). Constructor initializing the FumiliMinimizer by instantiatiating; the SeedGenerator and MinimumBuilder for the Fumili minimization method. @see MnSeedGenerator. @see FumiliBuilder. {}. ~FumiliMinimizer(); {}. Func",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:4811,Availability,toler,toler,4811," unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::FumiliMinimizer&operator=(const ROOT::Minuit2::FumiliMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::FumiliBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FumiliMinimizer(). Constructor initializing the FumiliMinimizer by instantiatiating; the SeedGenerator and MinimumBuilder for the Fumili minimization method. @see MnSeedGenerator. @see FumiliBuilder. {}. ~FumiliMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); for Fumili. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&c",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:4966,Availability,toler,toler,4966,"arFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::FumiliMinimizer&operator=(const ROOT::Minuit2::FumiliMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::FumiliBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FumiliMinimizer(). Constructor initializing the FumiliMinimizer by instantiatiating; the SeedGenerator and MinimumBuilder for the Fumili minimization method. @see MnSeedGenerator. @see FumiliBuilder. {}. ~FumiliMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); for Fumili. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:5144,Availability,toler,toler,5144,"ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::FumiliMinimizer&operator=(const ROOT::Minuit2::FumiliMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::FumiliBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FumiliMinimizer(). Constructor initializing the FumiliMinimizer by instantiatiating; the SeedGenerator and MinimumBuilder for the Fumili minimization method. @see MnSeedGenerator. @see FumiliBuilder. {}. ~FumiliMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); for Fumili. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrateg",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:5418,Availability,toler,toler,5418,"t2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FumiliMinimizer(). Constructor initializing the FumiliMinimizer by instantiatiating; the SeedGenerator and MinimumBuilder for the Fumili minimization method. @see MnSeedGenerator. @see FumiliBuilder. {}. ~FumiliMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); for Fumili. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBa",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:5611,Availability,toler,toler,5611,"by instantiatiating; the SeedGenerator and MinimumBuilder for the Fumili minimization method. @see MnSeedGenerator. @see FumiliBuilder. {}. ~FumiliMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); for Fumili. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn& mfcn, const ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:5812,Availability,toler,toler,5812,"NBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); for Fumili. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn& mfcn, const GradientCalculator& gc, const MinimumSeed& seed, const MnStrategy& stra, unsigned int maxfcn, double toler). » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:5956,Availability,toler,toler,5956,"e(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn& mfcn, const GradientCalculator& gc, const MinimumSeed& seed, const MnStrategy& stra, unsigned int maxfcn, double toler). » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:6108,Availability,toler,toler,6108,"e(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn& mfcn, const GradientCalculator& gc, const MinimumSeed& seed, const MnStrategy& stra, unsigned int maxfcn, double toler). » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:6281,Availability,toler,toler,6281,"e(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn& mfcn, const GradientCalculator& gc, const MinimumSeed& seed, const MnStrategy& stra, unsigned int maxfcn, double toler). » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:6462,Availability,toler,toler,6462,"e(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn& mfcn, const GradientCalculator& gc, const MinimumSeed& seed, const MnStrategy& stra, unsigned int maxfcn, double toler). » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:6627,Availability,toler,toler,6627,"e(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn& mfcn, const GradientCalculator& gc, const MinimumSeed& seed, const MnStrategy& stra, unsigned int maxfcn, double toler). » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:498,Modifiability,inherit,inherited,498,". ROOT::Minuit2::FumiliMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::FumiliMinimizer. class ROOT::Minuit2::FumiliMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Instantiates the seed generator and Minimum builder for the; Fumili minimization method. Produces the Minimum via the; Minimize methods inherited from ModularFunctionMinimizer. @author Andras Zsenei and Lorenzo Moneta, Creation date: 28 Sep 2004. @ingroup Minuit. Function Members (Methods); public:. virtual~FumiliMinimizer(); virtual const ROOT::Minuit2::FumiliBuilder&Builder() const; virtual ROOT::Minuit2::FumiliBuilder&Builder(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(); ROOT::Minuit2::FumiliMinimizerFumiliMinimizer(const ROOT::Minuit2::FumiliMinimizer&); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnStrategy&",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:4385,Modifiability,Inherit,Inheritance,4385,"it2::FCNBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::FumiliMinimizer&operator=(const ROOT::Minuit2::FumiliMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::FumiliBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FumiliMinimizer(). Constructor initializing the FumiliMinimizer by instantiatiating; the SeedGenerator and MinimumBuilder for the Fumili minimization method. @see MnSeedGenerator. @see FumiliBuilder. {}. ~FumiliMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); for Fumili. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:4398,Modifiability,Inherit,Inherited,4398,"it2::FCNBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::FumiliMinimizer&operator=(const ROOT::Minuit2::FumiliMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::FumiliBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FumiliMinimizer(). Constructor initializing the FumiliMinimizer by instantiatiating; the SeedGenerator and MinimumBuilder for the Fumili minimization method. @see MnSeedGenerator. @see FumiliBuilder. {}. ~FumiliMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); for Fumili. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html:435,Availability,Error,Error,435,". ROOT::Minuit2::FunctionMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::FunctionMinimizer. class ROOT::Minuit2::FunctionMinimizer. base class for function minimizers; user may give FCN or FCN with Gradient,; Parameter starting values and initial Error guess (sigma) (or ""step size""),; or Parameter starting values and initial covariance matrix;; covariance matrix is stored in Upper triangular packed storage format,; e.g. the Elements in the array are arranged like; {a(0,0), a(0,1), a(1,1), a(0,2), a(1,2), a(2,2), ...},; the size is nrow*(nrow+1)/2 (see also MnUserCovariance.h);. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerFunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerFunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; ROOT::Minuit2::FunctionMinimizer&operator=(c",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html:907,Availability,avail,available,907,". ROOT::Minuit2::FunctionMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::FunctionMinimizer. class ROOT::Minuit2::FunctionMinimizer. base class for function minimizers; user may give FCN or FCN with Gradient,; Parameter starting values and initial Error guess (sigma) (or ""step size""),; or Parameter starting values and initial covariance matrix;; covariance matrix is stored in Upper triangular packed storage format,; e.g. the Elements in the array are arranged like; {a(0,0), a(0,1), a(1,1), a(0,2), a(1,2), a(2,2), ...},; the size is nrow*(nrow+1)/2 (see also MnUserCovariance.h);. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerFunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerFunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; ROOT::Minuit2::FunctionMinimizer&operator=(c",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html:1298,Availability,toler,toler,1298,"rting values and initial covariance matrix;; covariance matrix is stored in Upper triangular packed storage format,; e.g. the Elements in the array are arranged like; {a(0,0), a(0,1), a(1,1), a(0,2), a(1,2), a(2,2), ...},; the size is nrow*(nrow+1)/2 (see also MnUserCovariance.h);. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerFunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerFunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; ROOT::Minuit2::FunctionMinimizer&operator=(const ROOT::Minuit2::FunctionMinimizer&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, const std::vector<double>& err, unsi",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html:1503,Availability,toler,toler,1503,"rting values and initial covariance matrix;; covariance matrix is stored in Upper triangular packed storage format,; e.g. the Elements in the array are arranged like; {a(0,0), a(0,1), a(1,1), a(0,2), a(1,2), a(2,2), ...},; the size is nrow*(nrow+1)/2 (see also MnUserCovariance.h);. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerFunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerFunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; ROOT::Minuit2::FunctionMinimizer&operator=(const ROOT::Minuit2::FunctionMinimizer&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, const std::vector<double>& err, unsi",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html:1719,Availability,toler,toler,1719,"rting values and initial covariance matrix;; covariance matrix is stored in Upper triangular packed storage format,; e.g. the Elements in the array are arranged like; {a(0,0), a(0,1), a(1,1), a(0,2), a(1,2), a(2,2), ...},; the size is nrow*(nrow+1)/2 (see also MnUserCovariance.h);. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerFunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerFunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; ROOT::Minuit2::FunctionMinimizer&operator=(const ROOT::Minuit2::FunctionMinimizer&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, const std::vector<double>& err, unsi",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html:1943,Availability,toler,toler,1943,"rting values and initial covariance matrix;; covariance matrix is stored in Upper triangular packed storage format,; e.g. the Elements in the array are arranged like; {a(0,0), a(0,1), a(1,1), a(0,2), a(1,2), a(2,2), ...},; the size is nrow*(nrow+1)/2 (see also MnUserCovariance.h);. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerFunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerFunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; ROOT::Minuit2::FunctionMinimizer&operator=(const ROOT::Minuit2::FunctionMinimizer&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, const std::vector<double>& err, unsi",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html:2323,Availability,toler,toler,2323," unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; ROOT::Minuit2::FunctionMinimizer&operator=(const ROOT::Minuit2::FunctionMinimizer&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors and FCN with Gradient. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covariance matrix. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covariance matrix and FCN with Gradient. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html:2366,Availability,error,errors,2366," unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; ROOT::Minuit2::FunctionMinimizer&operator=(const ROOT::Minuit2::FunctionMinimizer&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors and FCN with Gradient. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covariance matrix. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covariance matrix and FCN with Gradient. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html:2538,Availability,toler,toler,2538,"ionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; ROOT::Minuit2::FunctionMinimizer&operator=(const ROOT::Minuit2::FunctionMinimizer&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors and FCN with Gradient. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covariance matrix. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covariance matrix and FCN with Gradient. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html:2581,Availability,error,errors,2581,"ionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; ROOT::Minuit2::FunctionMinimizer&operator=(const ROOT::Minuit2::FunctionMinimizer&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors and FCN with Gradient. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covariance matrix. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covariance matrix and FCN with Gradient. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html:2786,Availability,toler,toler,2786,"ionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; ROOT::Minuit2::FunctionMinimizer&operator=(const ROOT::Minuit2::FunctionMinimizer&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors and FCN with Gradient. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covariance matrix. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covariance matrix and FCN with Gradient. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html:3031,Availability,toler,toler,3031,"ionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; ROOT::Minuit2::FunctionMinimizer&operator=(const ROOT::Minuit2::FunctionMinimizer&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors and FCN with Gradient. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covariance matrix. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covariance matrix and FCN with Gradient. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html:2056,Modifiability,Inherit,Inheritance,2056,"OT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; ROOT::Minuit2::FunctionMinimizer&operator=(const ROOT::Minuit2::FunctionMinimizer&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors and FCN with Gradient. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covariance matrix. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covarian",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html:2069,Modifiability,Inherit,Inherited,2069,"OT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; ROOT::Minuit2::FunctionMinimizer&operator=(const ROOT::Minuit2::FunctionMinimizer&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors and FCN with Gradient. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covariance matrix. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and covarian",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimizer.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimum.html:431,Availability,avail,available,431,". ROOT::Minuit2::FunctionMinimum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::FunctionMinimum. class ROOT::Minuit2::FunctionMinimum. class holding the full result of the minimization;; both internal and external (MnUserParameterState) representation available; for the parameters at the Minimum. Function Members (Methods); public:. ~FunctionMinimum(); voidAdd(const ROOT::Minuit2::MinimumState& state); voidAdd(const ROOT::Minuit2::MinimumState& state, ROOT::Minuit2::FunctionMinimum::MnAboveMaxEdm); doubleEdm() const; const ROOT::Minuit2::MinimumError&Error() const; ROOT::Minuit2::FunctionMinimumFunctionMinimum(const ROOT::Minuit2::FunctionMinimum& min); ROOT::Minuit2::FunctionMinimumFunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, double up); ROOT::Minuit2::FunctionMinimumFunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, const vector<ROOT::Minuit2::MinimumState>& states, double up); ROOT::Minuit2::FunctionMinimumFunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, const vector<ROOT::Minuit2::MinimumState>& states, double up, ROOT::Minuit2::FunctionMinimum::MnReachedCallLimit); ROOT::Minuit2::FunctionMinimumFunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, const vector<ROOT::Minuit2::MinimumState>& states, double up, ROOT::Minuit2::FunctionMinimum::MnAboveMaxEdm); doubleFval() const; const ROOT::Minuit2::FunctionGradient&Grad() const; boolHasAccurateCovar() const; boolHasCovariance() const; boolHasMadePosDefCovar() const; boolHasPosDefCovar() const; boolHasReachedCallLimit() const; boolHasValidCovariance() const; boolHasValidParameters() const; boolHesseFailed() const; boolIsAboveMaxEdm() const; boolIsValid() const; intNFcn() const; ROOT::Minuit2::FunctionMinimum&operator=(const ROOT::Minuit2::FunctionMinimum& min); const ROOT::Minuit2::MinimumParameters&Parameters() con",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimum.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimum.html:736,Availability,Error,Error,736,"arameters at the Minimum. Function Members (Methods); public:. ~FunctionMinimum(); voidAdd(const ROOT::Minuit2::MinimumState& state); voidAdd(const ROOT::Minuit2::MinimumState& state, ROOT::Minuit2::FunctionMinimum::MnAboveMaxEdm); doubleEdm() const; const ROOT::Minuit2::MinimumError&Error() const; ROOT::Minuit2::FunctionMinimumFunctionMinimum(const ROOT::Minuit2::FunctionMinimum& min); ROOT::Minuit2::FunctionMinimumFunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, double up); ROOT::Minuit2::FunctionMinimumFunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, const vector<ROOT::Minuit2::MinimumState>& states, double up); ROOT::Minuit2::FunctionMinimumFunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, const vector<ROOT::Minuit2::MinimumState>& states, double up, ROOT::Minuit2::FunctionMinimum::MnReachedCallLimit); ROOT::Minuit2::FunctionMinimumFunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, const vector<ROOT::Minuit2::MinimumState>& states, double up, ROOT::Minuit2::FunctionMinimum::MnAboveMaxEdm); doubleFval() const; const ROOT::Minuit2::FunctionGradient&Grad() const; boolHasAccurateCovar() const; boolHasCovariance() const; boolHasMadePosDefCovar() const; boolHasPosDefCovar() const; boolHasReachedCallLimit() const; boolHasValidCovariance() const; boolHasValidParameters() const; boolHesseFailed() const; boolIsAboveMaxEdm() const; boolIsValid() const; intNFcn() const; ROOT::Minuit2::FunctionMinimum&operator=(const ROOT::Minuit2::FunctionMinimum& min); const ROOT::Minuit2::MinimumParameters&Parameters() const; const ROOT::Minuit2::MinimumSeed&Seed() const; voidSetErrorDef(double up); const ROOT::Minuit2::MinimumState&State() const; const vector<ROOT::Minuit2::MinimumState>&States() const; doubleUp() const; const ROOT::Minuit2::MnUserCovariance&UserCovariance() const; const ROOT::Minuit2::MnUserParameters&UserParameters() const; const ROOT::Minuit2::MnUserParameterState&UserState() const. Data Members; private:. ROOT::Minuit2::MnRefCountedPointer<RO",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimum.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimum.html:2506,Modifiability,Inherit,Inheritance,2506,"ionGradient&Grad() const; boolHasAccurateCovar() const; boolHasCovariance() const; boolHasMadePosDefCovar() const; boolHasPosDefCovar() const; boolHasReachedCallLimit() const; boolHasValidCovariance() const; boolHasValidParameters() const; boolHesseFailed() const; boolIsAboveMaxEdm() const; boolIsValid() const; intNFcn() const; ROOT::Minuit2::FunctionMinimum&operator=(const ROOT::Minuit2::FunctionMinimum& min); const ROOT::Minuit2::MinimumParameters&Parameters() const; const ROOT::Minuit2::MinimumSeed&Seed() const; voidSetErrorDef(double up); const ROOT::Minuit2::MinimumState&State() const; const vector<ROOT::Minuit2::MinimumState>&States() const; doubleUp() const; const ROOT::Minuit2::MnUserCovariance&UserCovariance() const; const ROOT::Minuit2::MnUserParameters&UserParameters() const; const ROOT::Minuit2::MnUserParameterState&UserState() const. Data Members; private:. ROOT::Minuit2::MnRefCountedPointer<ROOT::Minuit2::BasicFunctionMinimum>fData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, double up); constructor from only MinimumSeed. Minimum is only from seed result not full minimization. {}. FunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, const vector<ROOT::Minuit2::MinimumState>& states, double up); constructor at the end of a successfull minimization from seed and vector of states. {}. FunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, const vector<ROOT::Minuit2::MinimumState>& states, double up, ROOT::Minuit2::FunctionMinimum::MnReachedCallLimit ); constructor at the end of a failed minimization due to exceeding function call limit. {}. FunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, const vector<ROOT::Minuit2::MinimumState>& states, double up, ROOT::Minuit2::FunctionMinimum::MnAboveMaxEdm ); constructor at the end of a failed minimization due to edm above maximum value. {}. FunctionMinimum(const ROOT::Minuit2::FunctionMinimum& min); copy ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimum.html
https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimum.html:2519,Modifiability,Inherit,Inherited,2519,"ionGradient&Grad() const; boolHasAccurateCovar() const; boolHasCovariance() const; boolHasMadePosDefCovar() const; boolHasPosDefCovar() const; boolHasReachedCallLimit() const; boolHasValidCovariance() const; boolHasValidParameters() const; boolHesseFailed() const; boolIsAboveMaxEdm() const; boolIsValid() const; intNFcn() const; ROOT::Minuit2::FunctionMinimum&operator=(const ROOT::Minuit2::FunctionMinimum& min); const ROOT::Minuit2::MinimumParameters&Parameters() const; const ROOT::Minuit2::MinimumSeed&Seed() const; voidSetErrorDef(double up); const ROOT::Minuit2::MinimumState&State() const; const vector<ROOT::Minuit2::MinimumState>&States() const; doubleUp() const; const ROOT::Minuit2::MnUserCovariance&UserCovariance() const; const ROOT::Minuit2::MnUserParameters&UserParameters() const; const ROOT::Minuit2::MnUserParameterState&UserState() const. Data Members; private:. ROOT::Minuit2::MnRefCountedPointer<ROOT::Minuit2::BasicFunctionMinimum>fData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, double up); constructor from only MinimumSeed. Minimum is only from seed result not full minimization. {}. FunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, const vector<ROOT::Minuit2::MinimumState>& states, double up); constructor at the end of a successfull minimization from seed and vector of states. {}. FunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, const vector<ROOT::Minuit2::MinimumState>& states, double up, ROOT::Minuit2::FunctionMinimum::MnReachedCallLimit ); constructor at the end of a failed minimization due to exceeding function call limit. {}. FunctionMinimum(const ROOT::Minuit2::MinimumSeed& seed, const vector<ROOT::Minuit2::MinimumState>& states, double up, ROOT::Minuit2::FunctionMinimum::MnAboveMaxEdm ); constructor at the end of a failed minimization due to edm above maximum value. {}. FunctionMinimum(const ROOT::Minuit2::FunctionMinimum& min); copy ",MatchSource.WIKI,root/html602/ROOT__Minuit2__FunctionMinimum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FunctionMinimum.html
https://root.cern/root/html602/ROOT__Minuit2__GenericFunction.html:701,Availability,avail,available,701,". ROOT::Minuit2::GenericFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::GenericFunction. class ROOT::Minuit2::GenericFunction. Class from which all the other classes, representing functions,; inherit. That is why it defines only one method, the operator(),; which allows to call the function. @author Andras Zsenei and Lorenzo Moneta, Creation date: 23 Sep 2004. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~GenericFunction(); ROOT::Minuit2::GenericFunctionGenericFunction(); ROOT::Minuit2::GenericFunctionGenericFunction(const ROOT::Minuit2::GenericFunction&); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::GenericFunction&operator=(const ROOT::Minuit2::GenericFunction&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GenericFunction(); {}. double operator()(const vector<double>& x) const. Evaluates the function using the vector containing the input values. @param x vector of the coordinates (for example the x coordinate for a; one-dimensional Gaussian). @return the result of the evaluation of the function. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__GenericFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__GenericFunction.html
https://root.cern/root/html602/ROOT__Minuit2__GenericFunction.html:379,Modifiability,inherit,inherit,379,". ROOT::Minuit2::GenericFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::GenericFunction. class ROOT::Minuit2::GenericFunction. Class from which all the other classes, representing functions,; inherit. That is why it defines only one method, the operator(),; which allows to call the function. @author Andras Zsenei and Lorenzo Moneta, Creation date: 23 Sep 2004. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~GenericFunction(); ROOT::Minuit2::GenericFunctionGenericFunction(); ROOT::Minuit2::GenericFunctionGenericFunction(const ROOT::Minuit2::GenericFunction&); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::GenericFunction&operator=(const ROOT::Minuit2::GenericFunction&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GenericFunction(); {}. double operator()(const vector<double>& x) const. Evaluates the function using the vector containing the input values. @param x vector of the coordinates (for example the x coordinate for a; one-dimensional Gaussian). @return the result of the evaluation of the function. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__GenericFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__GenericFunction.html
https://root.cern/root/html602/ROOT__Minuit2__GenericFunction.html:1049,Modifiability,Inherit,Inheritance,1049,". ROOT::Minuit2::GenericFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::GenericFunction. class ROOT::Minuit2::GenericFunction. Class from which all the other classes, representing functions,; inherit. That is why it defines only one method, the operator(),; which allows to call the function. @author Andras Zsenei and Lorenzo Moneta, Creation date: 23 Sep 2004. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~GenericFunction(); ROOT::Minuit2::GenericFunctionGenericFunction(); ROOT::Minuit2::GenericFunctionGenericFunction(const ROOT::Minuit2::GenericFunction&); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::GenericFunction&operator=(const ROOT::Minuit2::GenericFunction&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GenericFunction(); {}. double operator()(const vector<double>& x) const. Evaluates the function using the vector containing the input values. @param x vector of the coordinates (for example the x coordinate for a; one-dimensional Gaussian). @return the result of the evaluation of the function. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__GenericFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__GenericFunction.html
https://root.cern/root/html602/ROOT__Minuit2__GenericFunction.html:1062,Modifiability,Inherit,Inherited,1062,". ROOT::Minuit2::GenericFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::GenericFunction. class ROOT::Minuit2::GenericFunction. Class from which all the other classes, representing functions,; inherit. That is why it defines only one method, the operator(),; which allows to call the function. @author Andras Zsenei and Lorenzo Moneta, Creation date: 23 Sep 2004. @ingroup Minuit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~GenericFunction(); ROOT::Minuit2::GenericFunctionGenericFunction(); ROOT::Minuit2::GenericFunctionGenericFunction(const ROOT::Minuit2::GenericFunction&); virtual doubleoperator()(const vector<double>& x) const; ROOT::Minuit2::GenericFunction&operator=(const ROOT::Minuit2::GenericFunction&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GenericFunction(); {}. double operator()(const vector<double>& x) const. Evaluates the function using the vector containing the input values. @param x vector of the coordinates (for example the x coordinate for a; one-dimensional Gaussian). @return the result of the evaluation of the function. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Minuit2__GenericFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__GenericFunction.html
https://root.cern/root/html602/ROOT__Minuit2__MinosError.html:1478,Modifiability,Inherit,Inheritance,1478,"it() const; boolAtUpperMaxFcn() const; boolIsValid() const; doubleLower() const; boolLowerNewMin() const; const ROOT::Minuit2::MnUserParameterState&LowerState() const; boolLowerValid() const; doubleMin() const; ROOT::Minuit2::MinosErrorMinosError(); ROOT::Minuit2::MinosErrorMinosError(const ROOT::Minuit2::MinosError& err); ROOT::Minuit2::MinosErrorMinosError(unsigned int par, double min, const ROOT::Minuit2::MnCross& low, const ROOT::Minuit2::MnCross& up); unsigned intNFcn() const; pair<double,double>operator()() const; ROOT::Minuit2::MinosError&operator()(const ROOT::Minuit2::MinosError& err); ROOT::Minuit2::MinosError&operator=(const ROOT::Minuit2::MinosError&); unsigned intParameter() const; doubleUpper() const; boolUpperNewMin() const; const ROOT::Minuit2::MnUserParameterState&UpperState() const; boolUpperValid() const. Data Members; private:. ROOT::Minuit2::MnCrossfLower; doublefMinValue; unsigned intfParameter; ROOT::Minuit2::MnCrossfUpper. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinosError(); {}. MinosError(unsigned int par, double min, const ROOT::Minuit2::MnCross& low, const ROOT::Minuit2::MnCross& up); {}. ~MinosError(); {}. MinosError(const ROOT::Minuit2::MinosError& err); {}. MinosError& operator()(const ROOT::Minuit2::MinosError& err). std::pair<double,double> operator()() const. double Lower() const. return -1.* LowerState(). double Upper() const. return UpperState(). unsigned int Parameter() const; {return fParameter;}. bool IsValid() const; {return fLower.IsValid() && fUpper.IsValid();}. bool LowerValid() const; {return fLower.IsValid();}. bool UpperValid() const; {return fUpper.IsValid();}. bool AtLowerLimit() const; {return fLower.AtLimit();}. bool AtUpperLimit() const; {return fUpper.AtLimit();}. bool AtLowerMaxFcn() const; {return fLower.AtMaxFcn();}. bool AtUpperMaxFcn() const; {return fUpper.AtMaxFcn();}. bool LowerNewMin() const; {return fLower.NewMinimum();}. bool UpperNewMin() const; {return ",MatchSource.WIKI,root/html602/ROOT__Minuit2__MinosError.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__MinosError.html
https://root.cern/root/html602/ROOT__Minuit2__MinosError.html:1491,Modifiability,Inherit,Inherited,1491,"it() const; boolAtUpperMaxFcn() const; boolIsValid() const; doubleLower() const; boolLowerNewMin() const; const ROOT::Minuit2::MnUserParameterState&LowerState() const; boolLowerValid() const; doubleMin() const; ROOT::Minuit2::MinosErrorMinosError(); ROOT::Minuit2::MinosErrorMinosError(const ROOT::Minuit2::MinosError& err); ROOT::Minuit2::MinosErrorMinosError(unsigned int par, double min, const ROOT::Minuit2::MnCross& low, const ROOT::Minuit2::MnCross& up); unsigned intNFcn() const; pair<double,double>operator()() const; ROOT::Minuit2::MinosError&operator()(const ROOT::Minuit2::MinosError& err); ROOT::Minuit2::MinosError&operator=(const ROOT::Minuit2::MinosError&); unsigned intParameter() const; doubleUpper() const; boolUpperNewMin() const; const ROOT::Minuit2::MnUserParameterState&UpperState() const; boolUpperValid() const. Data Members; private:. ROOT::Minuit2::MnCrossfLower; doublefMinValue; unsigned intfParameter; ROOT::Minuit2::MnCrossfUpper. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinosError(); {}. MinosError(unsigned int par, double min, const ROOT::Minuit2::MnCross& low, const ROOT::Minuit2::MnCross& up); {}. ~MinosError(); {}. MinosError(const ROOT::Minuit2::MinosError& err); {}. MinosError& operator()(const ROOT::Minuit2::MinosError& err). std::pair<double,double> operator()() const. double Lower() const. return -1.* LowerState(). double Upper() const. return UpperState(). unsigned int Parameter() const; {return fParameter;}. bool IsValid() const; {return fLower.IsValid() && fUpper.IsValid();}. bool LowerValid() const; {return fLower.IsValid();}. bool UpperValid() const; {return fUpper.IsValid();}. bool AtLowerLimit() const; {return fLower.AtLimit();}. bool AtUpperLimit() const; {return fUpper.AtLimit();}. bool AtLowerMaxFcn() const; {return fLower.AtMaxFcn();}. bool AtUpperMaxFcn() const; {return fUpper.AtMaxFcn();}. bool LowerNewMin() const; {return fLower.NewMinimum();}. bool UpperNewMin() const; {return ",MatchSource.WIKI,root/html602/ROOT__Minuit2__MinosError.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__MinosError.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:1110,Availability,Error,ErrorDef,1110," virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* cov) const; virtual boolGetHessianMatrix(double* h) const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); virtual boolIsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Math::MinimizerROOT::Math::Minimizer::Minimizer(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad);",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:1149,Availability,Error,Errors,1149," virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* cov) const; virtual boolGetHessianMatrix(double* h) const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); virtual boolIsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Math::MinimizerROOT::Math::Minimizer::Minimizer(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad);",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:4615,Availability,Toler,Tolerance,4615,"boolSetFixedVariable(unsigned int, const string&, double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); virtual voidSetFunction(const ROOT::Math::IMultiGradFunction& func); virtual boolSetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double, double); virtual boolSetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); voidROOT::Math::Minimizer::SetOptions(const ROOT::Math::MinimizerOptions& opt); voidROOT::Math::Minimizer::SetPrecision(double prec); voidROOT::Math::Minimizer::SetPrintLevel(int level); voidSetStorageLevel(int level); voidROOT::Math::Minimizer::SetStrategy(int strategyLevel); voidROOT::Math::Minimizer::SetTolerance(double tol); voidSetTraceObject(ROOT::Minuit2::MnTraceObject& obj); virtual boolSetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); voidROOT::Math::Minimizer::SetValidError(bool on); virtual boolSetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolROOT::Math::Minimizer::SetVariableInitialRange(unsigned int, double, double); virtual boolSetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolSetVariableLowerLimit(unsigned int ivar, double lower); virtual boolSetVariableStepSize(unsigned int ivar, double step); virtual boolSetVariableUpperLimit(unsigned int ivar, double upper); virtual boolSetVariableValue(unsigned int ivar, double val); virtual boolSetVariableValues(const double* val); const ROOT::Minuit2::MnUserParameterState&State(); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intVariableIndex(const string& name) const; virtual stringVariableName(unsigned int ivar) const; virtual const double*X() const.",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:5504,Availability,error,errors,5504," val); const ROOT::Minuit2::MnUserParameterState&State(); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intVariableIndex(const string& name) const; virtual stringVariableName(unsigned int ivar) const; virtual const double*X() const. protected:. boolExamineMinimum(const ROOT::Minuit2::FunctionMinimum& min); virtual const ROOT::Minuit2::FCNBase*GetFCN() const; virtual const ROOT::Minuit2::ModularFunctionMinimizer*GetMinimizer() const; virtual voidSetMinimizer(ROOT::Minuit2::ModularFunctionMinimizer* m); voidSetMinimizerType(ROOT::Minuit2::EMinimizerType type). private:. ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(const ROOT::Minuit2::Minuit2Minimizer&); ROOT::Minuit2::Minuit2Minimizer&operator=(const ROOT::Minuit2::Minuit2Minimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. unsigned intfDimdimension of the function to be minimized; vector<double>fErrors; ROOT::Minuit2::ModularFunctionMinimizer*fMinimizer; ROOT::Minuit2::FunctionMinimum*fMinimum; ROOT::Minuit2::FCNBase*fMinuitFCN; ROOT::Minuit2::MnUserParameterStatefState; boolfUseFumili; vector<double>fValues. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Minuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad). Default constructor. Minuit2Minimizer(const char* type). Constructor with a char (used by PM). virtual ~Minuit2Minimizer(). Destructor (no operations). Minuit2Minimizer(const ROOT::Minuit2::Minuit2Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. void Clear(); clear resources (parameters) for consecutives minimizations. void SetFunction(const ROOT::Math",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:9075,Availability,failure,failure,9075,"ble. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the min",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:9900,Availability,error,error,9900,"Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the ",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:9910,Availability,error,error,9910,"Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the ",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:9957,Availability,Error,Errors,9957,"esse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is ",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:9980,Availability,error,errors,9980,"esse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is ",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:10195,Availability,error,errors,10195,"{ return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance mat",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:10596,Availability,error,errors,10596,"t; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance matrix; status = -1 : not available (inversion failed or Hesse failed); status = 0 : available but not positive defined; status = 1 : covariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:11163,Availability,avail,available,11163,"nt from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance matrix; status = -1 : not available (inversion failed or Hesse failed); status = 0 : available but not positive defined; status = 1 : covariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0). get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus where the minos sta",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:11222,Availability,avail,available,11222,"nt from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance matrix; status = -1 : not available (inversion failed or Hesse failed); status = 0 : available but not positive defined; status = 1 : covariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0). get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus where the minos sta",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:11988,Availability,error,error,11988,"ovariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0). get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus where the minos status is:; status = 1 : maximum number of function calls exceeded when running for lower error; status = 2 : maximum number of function calls exceeded when running for upper error; status = 3 : new minimum found when running for lower error; status = 4 : new minimum found when running for upper error; status = 5 : any other failure. bool Scan(unsigned int i, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan a parameter i around the minimum. A minimization must have been done before,; return false if it is not the case. bool Contour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj). find the contour points (xi,xj) of the function for parameter i and j around the minimum; The contour will be find for value of the function = Min + ErrorUp();. bool Hesse(). perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; S",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:12163,Availability,error,error,12163,"ovariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0). get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus where the minos status is:; status = 1 : maximum number of function calls exceeded when running for lower error; status = 2 : maximum number of function calls exceeded when running for upper error; status = 3 : new minimum found when running for lower error; status = 4 : new minimum found when running for upper error; status = 5 : any other failure. bool Scan(unsigned int i, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan a parameter i around the minimum. A minimization must have been done before,; return false if it is not the case. bool Contour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj). find the contour points (xi,xj) of the function for parameter i and j around the minimum; The contour will be find for value of the function = Min + ErrorUp();. bool Hesse(). perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; S",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:12327,Availability,error,error,12327,"ovariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0). get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus where the minos status is:; status = 1 : maximum number of function calls exceeded when running for lower error; status = 2 : maximum number of function calls exceeded when running for upper error; status = 3 : new minimum found when running for lower error; status = 4 : new minimum found when running for upper error; status = 5 : any other failure. bool Scan(unsigned int i, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan a parameter i around the minimum. A minimization must have been done before,; return false if it is not the case. bool Contour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj). find the contour points (xi,xj) of the function for parameter i and j around the minimum; The contour will be find for value of the function = Min + ErrorUp();. bool Hesse(). perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; S",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:12412,Availability,error,error,12412,"ovariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0). get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus where the minos status is:; status = 1 : maximum number of function calls exceeded when running for lower error; status = 2 : maximum number of function calls exceeded when running for upper error; status = 3 : new minimum found when running for lower error; status = 4 : new minimum found when running for upper error; status = 5 : any other failure. bool Scan(unsigned int i, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan a parameter i around the minimum. A minimization must have been done before,; return false if it is not the case. bool Contour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj). find the contour points (xi,xj) of the function for parameter i and j around the minimum; The contour will be find for value of the function = Min + ErrorUp();. bool Hesse(). perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; S",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:12473,Availability,error,error,12473,"ovariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0). get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus where the minos status is:; status = 1 : maximum number of function calls exceeded when running for lower error; status = 2 : maximum number of function calls exceeded when running for upper error; status = 3 : new minimum found when running for lower error; status = 4 : new minimum found when running for upper error; status = 5 : any other failure. bool Scan(unsigned int i, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan a parameter i around the minimum. A minimization must have been done before,; return false if it is not the case. bool Contour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj). find the contour points (xi,xj) of the function for parameter i and j around the minimum; The contour will be find for value of the function = Min + ErrorUp();. bool Hesse(). perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; S",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:12534,Availability,error,error,12534,"ovariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0). get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus where the minos status is:; status = 1 : maximum number of function calls exceeded when running for lower error; status = 2 : maximum number of function calls exceeded when running for upper error; status = 3 : new minimum found when running for lower error; status = 4 : new minimum found when running for upper error; status = 5 : any other failure. bool Scan(unsigned int i, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan a parameter i around the minimum. A minimization must have been done before,; return false if it is not the case. bool Contour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj). find the contour points (xi,xj) of the function for parameter i and j around the minimum; The contour will be find for value of the function = Min + ErrorUp();. bool Hesse(). perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; S",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:12564,Availability,failure,failure,12564,"ovariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0). get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus where the minos status is:; status = 1 : maximum number of function calls exceeded when running for lower error; status = 2 : maximum number of function calls exceeded when running for upper error; status = 3 : new minimum found when running for lower error; status = 4 : new minimum found when running for upper error; status = 5 : any other failure. bool Scan(unsigned int i, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan a parameter i around the minimum. A minimization must have been done before,; return false if it is not the case. bool Contour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj). find the contour points (xi,xj) of the function for parameter i and j around the minimum; The contour will be find for value of the function = Min + ErrorUp();. bool Hesse(). perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; S",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:13038,Availability,Error,ErrorUp,13038,"= 0). get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus where the minos status is:; status = 1 : maximum number of function calls exceeded when running for lower error; status = 2 : maximum number of function calls exceeded when running for upper error; status = 3 : new minimum found when running for lower error; status = 4 : new minimum found when running for upper error; status = 5 : any other failure. bool Scan(unsigned int i, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan a parameter i around the minimum. A minimization must have been done before,; return false if it is not the case. bool Contour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj). find the contour points (xi,xj) of the function for parameter i and j around the minimum; The contour will be find for value of the function = Min + ErrorUp();. bool Hesse(). perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; Status code of minimizer is updated according to the following convention (in case Hesse failed); status += 100*hesseStatus where hesse status is:; status = 1 : hesse failed; status = 2 : matrix inversion failed; status = 3 : matrix is not pos defined. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const;; print result of minimization. void SetTraceObject(ROOT::Minuit2::MnTraceObject& obj); set an object to trace operation for each iteration; The object muust implement operator() (unsigned int, MinimumState & state). void SetStorageLevel(int level); set storage level = 1 : store all iteration states (default); = 0 : sto",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:13117,Availability,error,error,13117,"s exceeded when running for lower error; status = 2 : maximum number of function calls exceeded when running for upper error; status = 3 : new minimum found when running for lower error; status = 4 : new minimum found when running for upper error; status = 5 : any other failure. bool Scan(unsigned int i, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan a parameter i around the minimum. A minimization must have been done before,; return false if it is not the case. bool Contour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj). find the contour points (xi,xj) of the function for parameter i and j around the minimum; The contour will be find for value of the function = Min + ErrorUp();. bool Hesse(). perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; Status code of minimizer is updated according to the following convention (in case Hesse failed); status += 100*hesseStatus where hesse status is:; status = 1 : hesse failed; status = 2 : matrix inversion failed; status = 3 : matrix is not pos defined. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const;; print result of minimization. void SetTraceObject(ROOT::Minuit2::MnTraceObject& obj); set an object to trace operation for each iteration; The object muust implement operator() (unsigned int, MinimumState & state). void SetStorageLevel(int level); set storage level = 1 : store all iteration states (default); = 0 : store only first and last state to save memory. const ROOT::Minuit2::ModularFunctionMinimizer * GetMinimizer() const; protected function for accessing the internal Minuit2 object. Needed for derived classes. { return fMinimizer; }. void SetMinimizer(ROOT::Minuit2::ModularFunctionMinimizer* m); { fMinimizer = m; }. void SetMini",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:8006,Deployability,Release,ReleaseVariable,8006,"orts them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reac",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:8042,Deployability,release,release,8042,"orts them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reac",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:12172,Deployability,update,updated,12172,"ovariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0). get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus where the minos status is:; status = 1 : maximum number of function calls exceeded when running for lower error; status = 2 : maximum number of function calls exceeded when running for upper error; status = 3 : new minimum found when running for lower error; status = 4 : new minimum found when running for upper error; status = 5 : any other failure. bool Scan(unsigned int i, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan a parameter i around the minimum. A minimization must have been done before,; return false if it is not the case. bool Contour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj). find the contour points (xi,xj) of the function for parameter i and j around the minimum; The contour will be find for value of the function = Min + ErrorUp();. bool Hesse(). perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; S",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:13300,Deployability,update,updated,13300,"s exceeded when running for lower error; status = 2 : maximum number of function calls exceeded when running for upper error; status = 3 : new minimum found when running for lower error; status = 4 : new minimum found when running for upper error; status = 5 : any other failure. bool Scan(unsigned int i, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan a parameter i around the minimum. A minimization must have been done before,; return false if it is not the case. bool Contour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj). find the contour points (xi,xj) of the function for parameter i and j around the minimum; The contour will be find for value of the function = Min + ErrorUp();. bool Hesse(). perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; Status code of minimizer is updated according to the following convention (in case Hesse failed); status += 100*hesseStatus where hesse status is:; status = 1 : hesse failed; status = 2 : matrix inversion failed; status = 3 : matrix is not pos defined. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const;; print result of minimization. void SetTraceObject(ROOT::Minuit2::MnTraceObject& obj); set an object to trace operation for each iteration; The object muust implement operator() (unsigned int, MinimumState & state). void SetStorageLevel(int level); set storage level = 1 : store all iteration states (default); = 0 : store only first and last state to save memory. const ROOT::Minuit2::ModularFunctionMinimizer * GetMinimizer() const; protected function for accessing the internal Minuit2 object. Needed for derived classes. { return fMinimizer; }. void SetMinimizer(ROOT::Minuit2::ModularFunctionMinimizer* m); { fMinimizer = m; }. void SetMini",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:409,Integrability,interface,interface,409,". ROOT::Minuit2::Minuit2Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::Minuit2Minimizer. class ROOT::Minuit2::Minuit2Minimizer: public ROOT::Math::Minimizer. Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Function Members (Methods); public:. virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* cov) const; virtual boolGetHessianMatrix(double* h) const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); virtual boolIsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Math::MinimizerROOT::Math::Minimizer::Minimizer(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad);",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:10258,Integrability,interface,interface,10258,"st; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance matrix; status = -1 : not available (inversion failed or Hesse failed); status = 0 : available but not positive defined; status = 1 : covariance only",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:10659,Integrability,interface,interface,10659,"nt NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance matrix; status = -1 : not available (inversion failed or Hesse failed); status = 0 : available but not positive defined; status = 1 : covariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:498,Modifiability,plug-in,plug-in,498,". ROOT::Minuit2::Minuit2Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::Minuit2Minimizer. class ROOT::Minuit2::Minuit2Minimizer: public ROOT::Math::Minimizer. Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Function Members (Methods); public:. virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* cov) const; virtual boolGetHessianMatrix(double* h) const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); virtual boolIsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Math::MinimizerROOT::Math::Minimizer::Minimizer(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad);",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:515,Modifiability,plug-in,plug-in,515,". ROOT::Minuit2::Minuit2Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::Minuit2Minimizer. class ROOT::Minuit2::Minuit2Minimizer: public ROOT::Math::Minimizer. Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Function Members (Methods); public:. virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* cov) const; virtual boolGetHessianMatrix(double* h) const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); virtual boolIsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Math::MinimizerROOT::Math::Minimizer::Minimizer(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad);",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:563,Modifiability,plugin,plugin,563,". ROOT::Minuit2::Minuit2Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::Minuit2Minimizer. class ROOT::Minuit2::Minuit2Minimizer: public ROOT::Math::Minimizer. Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Function Members (Methods); public:. virtual~Minuit2Minimizer(); virtual voidClear(); virtual boolContour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* cov) const; virtual boolGetHessianMatrix(double* h) const; virtual boolGetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleGlobalCC(unsigned int i) const; virtual boolHesse(); virtual boolIsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Math::MinimizerROOT::Math::Minimizer::Minimizer(); ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad);",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:5887,Modifiability,Inherit,Inheritance,5887," ROOT::Minuit2::ModularFunctionMinimizer*GetMinimizer() const; virtual voidSetMinimizer(ROOT::Minuit2::ModularFunctionMinimizer* m); voidSetMinimizerType(ROOT::Minuit2::EMinimizerType type). private:. ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(const ROOT::Minuit2::Minuit2Minimizer&); ROOT::Minuit2::Minuit2Minimizer&operator=(const ROOT::Minuit2::Minuit2Minimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. unsigned intfDimdimension of the function to be minimized; vector<double>fErrors; ROOT::Minuit2::ModularFunctionMinimizer*fMinimizer; ROOT::Minuit2::FunctionMinimum*fMinimum; ROOT::Minuit2::FCNBase*fMinuitFCN; ROOT::Minuit2::MnUserParameterStatefState; boolfUseFumili; vector<double>fValues. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Minuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad). Default constructor. Minuit2Minimizer(const char* type). Constructor with a char (used by PM). virtual ~Minuit2Minimizer(). Destructor (no operations). Minuit2Minimizer(const ROOT::Minuit2::Minuit2Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. void Clear(); clear resources (parameters) for consecutives minimizations. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned ",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:5900,Modifiability,Inherit,Inherited,5900," ROOT::Minuit2::ModularFunctionMinimizer*GetMinimizer() const; virtual voidSetMinimizer(ROOT::Minuit2::ModularFunctionMinimizer* m); voidSetMinimizerType(ROOT::Minuit2::EMinimizerType type). private:. ROOT::Minuit2::Minuit2MinimizerMinuit2Minimizer(const ROOT::Minuit2::Minuit2Minimizer&); ROOT::Minuit2::Minuit2Minimizer&operator=(const ROOT::Minuit2::Minuit2Minimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. unsigned intfDimdimension of the function to be minimized; vector<double>fErrors; ROOT::Minuit2::ModularFunctionMinimizer*fMinimizer; ROOT::Minuit2::FunctionMinimum*fMinimum; ROOT::Minuit2::FCNBase*fMinuitFCN; ROOT::Minuit2::MnUserParameterStatefState; boolfUseFumili; vector<double>fValues. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Minuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad). Default constructor. Minuit2Minimizer(const char* type). Constructor with a char (used by PM). virtual ~Minuit2Minimizer(). Destructor (no operations). Minuit2Minimizer(const ROOT::Minuit2::Minuit2Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. void Clear(); clear resources (parameters) for consecutives minimizations. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned ",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:6692,Modifiability,variab,variable,6692,"ble>fErrors; ROOT::Minuit2::ModularFunctionMinimizer*fMinimizer; ROOT::Minuit2::FunctionMinimum*fMinimum; ROOT::Minuit2::FCNBase*fMinuitFCN; ROOT::Minuit2::MnUserParameterStatefState; boolfUseFumili; vector<double>fValues. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Minuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad). Default constructor. Minuit2Minimizer(const char* type). Constructor with a char (used by PM). virtual ~Minuit2Minimizer(). Destructor (no operations). Minuit2Minimizer(const ROOT::Minuit2::Minuit2Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. void Clear(); clear resources (parameters) for consecutives minimizations. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower);",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:6826,Modifiability,variab,variable,6826,"CN; ROOT::Minuit2::MnUserParameterStatefState; boolfUseFumili; vector<double>fValues. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Minuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad). Default constructor. Minuit2Minimizer(const char* type). Constructor with a char (used by PM). virtual ~Minuit2Minimizer(). Destructor (no operations). Minuit2Minimizer(const ROOT::Minuit2::Minuit2Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. void Clear(); clear resources (parameters) for consecutives minimizations. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:6999,Modifiability,variab,variable,6999,"on; Minuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad). Default constructor. Minuit2Minimizer(const char* type). Constructor with a char (used by PM). virtual ~Minuit2Minimizer(). Destructor (no operations). Minuit2Minimizer(const ROOT::Minuit2::Minuit2Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. void Clear(); clear resources (parameters) for consecutives minimizations. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsign",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:7179,Modifiability,variab,variable,7179," virtual ~Minuit2Minimizer(). Destructor (no operations). Minuit2Minimizer(const ROOT::Minuit2::Minuit2Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. void Clear(); clear resources (parameters) for consecutives minimizations. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existi",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:7301,Modifiability,variab,variable,7301," we make this unaccessible. Copy constructor. void Clear(); clear resources (parameters) for consecutives minimizations. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigne",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:7408,Modifiability,variab,variable,7408,"nsecutives minimizations. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable ob",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:7465,Modifiability,variab,variable,7465,"iGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(un",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:7581,Modifiability,variab,variable,7581,"IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:7695,Modifiability,variab,variable,7695,"ng& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a n",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:7809,Modifiability,variab,variable,7809,"g& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in cas",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:7928,Modifiability,variab,variable,7928,"ol SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derive",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:7991,Modifiability,variab,variable,7991,"double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 :",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:8062,Modifiability,variab,variable,8062,"orts them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reac",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:8140,Modifiability,variab,variable,8140,"e val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return ",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:8231,Modifiability,variab,variables,8231,"r supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distan",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:8349,Modifiability,variab,variable,8349,"rts them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:8372,Modifiability,variab,variable,8372,"rts them ). bool SetVariableValue(unsigned int ivar, double val); set variable. bool SetVariableValues(const double* val); set variable values. bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:8434,Modifiability,Variab,VariableName,8434,"SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:8485,Modifiability,variab,variables,8485,"SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:8537,Modifiability,variab,variable,8537,"SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:8558,Modifiability,Variab,VariableIndex,8558,"signed int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number ",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:8612,Modifiability,variab,variable,8612,"signed int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number ",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:8629,Modifiability,variab,variable,8629,"signed int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number ",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:8665,Modifiability,variab,variable,8665,"signed int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number ",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:9623,Modifiability,variab,variables,9623,"iven a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:9720,Modifiability,variab,variables,9720,"imization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to ",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:9828,Modifiability,Variab,VariableParameters,9828," zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix el",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:10101,Modifiability,variab,variable,10101,"{ return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance mat",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:10167,Modifiability,variab,variables,10167,"{ return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance mat",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:10330,Modifiability,variab,variable,10330,"st; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance matrix; status = -1 : not available (inversion failed or Hesse failed); status = 0 : available but not positive defined; status = 1 : covariance only",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:10455,Modifiability,variab,variable,10455,"nt NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance matrix; status = -1 : not available (inversion failed or Hesse failed); status = 0 : available but not positive defined; status = 1 : covariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:10568,Modifiability,variab,variables,10568,"t; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance matrix; status = -1 : not available (inversion failed or Hesse failed); status = 0 : available but not positive defined; status = 1 : covariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:10731,Modifiability,variab,variable,10731,"nt NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance matrix; status = -1 : not available (inversion failed or Hesse failed); status = 0 : available but not positive defined; status = 1 : covariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:10960,Modifiability,variab,variable,10960,"d error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance matrix; status = -1 : not available (inversion failed or Hesse failed); status = 0 : available but not positive defined; status = 1 : covariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero. bool GetMin",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:11007,Modifiability,variab,variables,11007,"d error matrix. { return true; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const. return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetCovMatrix(double* cov) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance matrix; status = -1 : not available (inversion failed or Hesse failed); status = 0 : available but not positive defined; status = 1 : covariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero. bool GetMin",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:11477,Modifiability,variab,variable,11477,"s fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* h) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const. return the status of the covariance matrix; status = -1 : not available (inversion failed or Hesse failed); status = 0 : available but not positive defined; status = 1 : covariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0). get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus where the minos status is:; status = 1 : maximum number of function calls exceeded when running for lower error; status = 2 : maximum number of function calls exceeded when running for upper error; status = 3 : new minimum found when running for",MatchSource.WIKI,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html
