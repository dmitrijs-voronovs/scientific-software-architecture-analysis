id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/COMBINE-lab/salmon/releases/tag/v1.9.0:628,Availability,down,downstream,628,"New features; ============. * Salmon learned the ability to optionally write quality values in output SAM files. If the `--writeQualities` flag is passed to `salmon` when mappings are also being written (i.e. with `--writeMappings=`), then the SAM records for reads will contain the corresponding quality values. **Note**: You should *not* pass this flag to `salmon` if you are providing `FASTA` rather than `FASTQ` files as input; those files have no quality values, and so this flag is not compatible with `FASTA` input. **Note**: The default behavior remains to *not* write quality values, as they are not necessary for many downstream applications and they consume considerable extra space in the output. This addresses the feature request in #756; thanks to @A-N-Other for the suggestion. Fixes; =====. * Addressing #748, raised by @taylorreiter - In single-end mode, *all* unmapped reads were being reported with the code `u`, including those mapped to decoys. This release fixes the output so the proper code `d`, is reported for those fragments best mapping to decoys. . Improvements; ============. * When `salmon` `alevin` was being run upstream of `alevin-fry` for generating a RAD file, it was possible for the file to be truncated if there was insufficient disk space for the output. This release of `salmon` adds a final check of the `ofstream` after the call to `close` to determine if the stream is in a bad state. This should lead to better error reporting and proper exit codes if the RAD output of `salmon` `alevin` is unexpectedly truncated. Thanks to @allyhawkins for helping to uncover this issue. * The use of multi-stage builds has greatly reduced the size of the Docker image to ~101MB (from ~1.38G); thanks to @kaczmarj for contributing this improvement. * Improvements to the documentation have been made and some typos fidex thanks to @molecules. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.8.0...v1.9.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.9.0:1457,Availability,error,error,1457,"New features; ============. * Salmon learned the ability to optionally write quality values in output SAM files. If the `--writeQualities` flag is passed to `salmon` when mappings are also being written (i.e. with `--writeMappings=`), then the SAM records for reads will contain the corresponding quality values. **Note**: You should *not* pass this flag to `salmon` if you are providing `FASTA` rather than `FASTQ` files as input; those files have no quality values, and so this flag is not compatible with `FASTA` input. **Note**: The default behavior remains to *not* write quality values, as they are not necessary for many downstream applications and they consume considerable extra space in the output. This addresses the feature request in #756; thanks to @A-N-Other for the suggestion. Fixes; =====. * Addressing #748, raised by @taylorreiter - In single-end mode, *all* unmapped reads were being reported with the code `u`, including those mapped to decoys. This release fixes the output so the proper code `d`, is reported for those fragments best mapping to decoys. . Improvements; ============. * When `salmon` `alevin` was being run upstream of `alevin-fry` for generating a RAD file, it was possible for the file to be truncated if there was insufficient disk space for the output. This release of `salmon` adds a final check of the `ofstream` after the call to `close` to determine if the stream is in a bad state. This should lead to better error reporting and proper exit codes if the RAD output of `salmon` `alevin` is unexpectedly truncated. Thanks to @allyhawkins for helping to uncover this issue. * The use of multi-stage builds has greatly reduced the size of the Docker image to ~101MB (from ~1.38G); thanks to @kaczmarj for contributing this improvement. * Improvements to the documentation have been made and some typos fidex thanks to @molecules. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.8.0...v1.9.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.9.0:972,Deployability,release,release,972,"New features; ============. * Salmon learned the ability to optionally write quality values in output SAM files. If the `--writeQualities` flag is passed to `salmon` when mappings are also being written (i.e. with `--writeMappings=`), then the SAM records for reads will contain the corresponding quality values. **Note**: You should *not* pass this flag to `salmon` if you are providing `FASTA` rather than `FASTQ` files as input; those files have no quality values, and so this flag is not compatible with `FASTA` input. **Note**: The default behavior remains to *not* write quality values, as they are not necessary for many downstream applications and they consume considerable extra space in the output. This addresses the feature request in #756; thanks to @A-N-Other for the suggestion. Fixes; =====. * Addressing #748, raised by @taylorreiter - In single-end mode, *all* unmapped reads were being reported with the code `u`, including those mapped to decoys. This release fixes the output so the proper code `d`, is reported for those fragments best mapping to decoys. . Improvements; ============. * When `salmon` `alevin` was being run upstream of `alevin-fry` for generating a RAD file, it was possible for the file to be truncated if there was insufficient disk space for the output. This release of `salmon` adds a final check of the `ofstream` after the call to `close` to determine if the stream is in a bad state. This should lead to better error reporting and proper exit codes if the RAD output of `salmon` `alevin` is unexpectedly truncated. Thanks to @allyhawkins for helping to uncover this issue. * The use of multi-stage builds has greatly reduced the size of the Docker image to ~101MB (from ~1.38G); thanks to @kaczmarj for contributing this improvement. * Improvements to the documentation have been made and some typos fidex thanks to @molecules. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.8.0...v1.9.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.9.0:1301,Deployability,release,release,1301,"New features; ============. * Salmon learned the ability to optionally write quality values in output SAM files. If the `--writeQualities` flag is passed to `salmon` when mappings are also being written (i.e. with `--writeMappings=`), then the SAM records for reads will contain the corresponding quality values. **Note**: You should *not* pass this flag to `salmon` if you are providing `FASTA` rather than `FASTQ` files as input; those files have no quality values, and so this flag is not compatible with `FASTA` input. **Note**: The default behavior remains to *not* write quality values, as they are not necessary for many downstream applications and they consume considerable extra space in the output. This addresses the feature request in #756; thanks to @A-N-Other for the suggestion. Fixes; =====. * Addressing #748, raised by @taylorreiter - In single-end mode, *all* unmapped reads were being reported with the code `u`, including those mapped to decoys. This release fixes the output so the proper code `d`, is reported for those fragments best mapping to decoys. . Improvements; ============. * When `salmon` `alevin` was being run upstream of `alevin-fry` for generating a RAD file, it was possible for the file to be truncated if there was insufficient disk space for the output. This release of `salmon` adds a final check of the `ofstream` after the call to `close` to determine if the stream is in a bad state. This should lead to better error reporting and proper exit codes if the RAD output of `salmon` `alevin` is unexpectedly truncated. Thanks to @allyhawkins for helping to uncover this issue. * The use of multi-stage builds has greatly reduced the size of the Docker image to ~101MB (from ~1.38G); thanks to @kaczmarj for contributing this improvement. * Improvements to the documentation have been made and some typos fidex thanks to @molecules. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.8.0...v1.9.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.9.0:1663,Energy Efficiency,reduce,reduced,1663,"New features; ============. * Salmon learned the ability to optionally write quality values in output SAM files. If the `--writeQualities` flag is passed to `salmon` when mappings are also being written (i.e. with `--writeMappings=`), then the SAM records for reads will contain the corresponding quality values. **Note**: You should *not* pass this flag to `salmon` if you are providing `FASTA` rather than `FASTQ` files as input; those files have no quality values, and so this flag is not compatible with `FASTA` input. **Note**: The default behavior remains to *not* write quality values, as they are not necessary for many downstream applications and they consume considerable extra space in the output. This addresses the feature request in #756; thanks to @A-N-Other for the suggestion. Fixes; =====. * Addressing #748, raised by @taylorreiter - In single-end mode, *all* unmapped reads were being reported with the code `u`, including those mapped to decoys. This release fixes the output so the proper code `d`, is reported for those fragments best mapping to decoys. . Improvements; ============. * When `salmon` `alevin` was being run upstream of `alevin-fry` for generating a RAD file, it was possible for the file to be truncated if there was insufficient disk space for the output. This release of `salmon` adds a final check of the `ofstream` after the call to `close` to determine if the stream is in a bad state. This should lead to better error reporting and proper exit codes if the RAD output of `salmon` `alevin` is unexpectedly truncated. Thanks to @allyhawkins for helping to uncover this issue. * The use of multi-stage builds has greatly reduced the size of the Docker image to ~101MB (from ~1.38G); thanks to @kaczmarj for contributing this improvement. * Improvements to the documentation have been made and some typos fidex thanks to @molecules. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.8.0...v1.9.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.9.0:37,Usability,learn,learned,37,"New features; ============. * Salmon learned the ability to optionally write quality values in output SAM files. If the `--writeQualities` flag is passed to `salmon` when mappings are also being written (i.e. with `--writeMappings=`), then the SAM records for reads will contain the corresponding quality values. **Note**: You should *not* pass this flag to `salmon` if you are providing `FASTA` rather than `FASTQ` files as input; those files have no quality values, and so this flag is not compatible with `FASTA` input. **Note**: The default behavior remains to *not* write quality values, as they are not necessary for many downstream applications and they consume considerable extra space in the output. This addresses the feature request in #756; thanks to @A-N-Other for the suggestion. Fixes; =====. * Addressing #748, raised by @taylorreiter - In single-end mode, *all* unmapped reads were being reported with the code `u`, including those mapped to decoys. This release fixes the output so the proper code `d`, is reported for those fragments best mapping to decoys. . Improvements; ============. * When `salmon` `alevin` was being run upstream of `alevin-fry` for generating a RAD file, it was possible for the file to be truncated if there was insufficient disk space for the output. This release of `salmon` adds a final check of the `ofstream` after the call to `close` to determine if the stream is in a bad state. This should lead to better error reporting and proper exit codes if the RAD output of `salmon` `alevin` is unexpectedly truncated. Thanks to @allyhawkins for helping to uncover this issue. * The use of multi-stage builds has greatly reduced the size of the Docker image to ~101MB (from ~1.38G); thanks to @kaczmarj for contributing this improvement. * Improvements to the documentation have been made and some typos fidex thanks to @molecules. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.8.0...v1.9.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0:681,Availability,error,error,681,"New features & improvements; ---------------------------. * This release includes a refactoring and optimization of the mapping code in `--sketch` mode, further increasing speed; output should remain identical. * This release adds the `--splitSeqV1` and `--splitSeqV2` flags, that have been the development release for a bit, as simple alternatives to custom geometry when processing SPLiT-seq data for `alevin-fry` or `alevin` processing. Fixes; -----. * No particular bug fixes are noted for this release. Other changes / enhancements; -------------------------------. * Explicitly check for valid value of `k` before calling out to the indexer. This leads to a more informative error message and exit if the user passes an unacceptable value of `k`. . Notes; -----. * The `Intel TBB` library used internally by `salmon` (and used as well in `TwoPaCo` that is relied upon for compacted reference de Bruijn graph construction) has evolved into the [`oneAPI TBB`](https://github.com/oneapi-src/oneTBB). Recent releases of this library (2021.1 and forward) make certain backward incompatible changes and therefore cannot be used to build `salmon`. We anticipate working toward replacing the deprecated and removed functions with the corresponding `oneAPI` replacements and idioms, hopefully in the next release of `salmon`. Therefore, we anticipate that this will be the last — or close to the last —`salmon` release to use (and be compatible with) the legacy `Intel TBB` library. Future releases will likely require a newer version of the `oneAPI TBB` library instead. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.6.0...v1.7.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0:65,Deployability,release,release,65,"New features & improvements; ---------------------------. * This release includes a refactoring and optimization of the mapping code in `--sketch` mode, further increasing speed; output should remain identical. * This release adds the `--splitSeqV1` and `--splitSeqV2` flags, that have been the development release for a bit, as simple alternatives to custom geometry when processing SPLiT-seq data for `alevin-fry` or `alevin` processing. Fixes; -----. * No particular bug fixes are noted for this release. Other changes / enhancements; -------------------------------. * Explicitly check for valid value of `k` before calling out to the indexer. This leads to a more informative error message and exit if the user passes an unacceptable value of `k`. . Notes; -----. * The `Intel TBB` library used internally by `salmon` (and used as well in `TwoPaCo` that is relied upon for compacted reference de Bruijn graph construction) has evolved into the [`oneAPI TBB`](https://github.com/oneapi-src/oneTBB). Recent releases of this library (2021.1 and forward) make certain backward incompatible changes and therefore cannot be used to build `salmon`. We anticipate working toward replacing the deprecated and removed functions with the corresponding `oneAPI` replacements and idioms, hopefully in the next release of `salmon`. Therefore, we anticipate that this will be the last — or close to the last —`salmon` release to use (and be compatible with) the legacy `Intel TBB` library. Future releases will likely require a newer version of the `oneAPI TBB` library instead. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.6.0...v1.7.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0:218,Deployability,release,release,218,"New features & improvements; ---------------------------. * This release includes a refactoring and optimization of the mapping code in `--sketch` mode, further increasing speed; output should remain identical. * This release adds the `--splitSeqV1` and `--splitSeqV2` flags, that have been the development release for a bit, as simple alternatives to custom geometry when processing SPLiT-seq data for `alevin-fry` or `alevin` processing. Fixes; -----. * No particular bug fixes are noted for this release. Other changes / enhancements; -------------------------------. * Explicitly check for valid value of `k` before calling out to the indexer. This leads to a more informative error message and exit if the user passes an unacceptable value of `k`. . Notes; -----. * The `Intel TBB` library used internally by `salmon` (and used as well in `TwoPaCo` that is relied upon for compacted reference de Bruijn graph construction) has evolved into the [`oneAPI TBB`](https://github.com/oneapi-src/oneTBB). Recent releases of this library (2021.1 and forward) make certain backward incompatible changes and therefore cannot be used to build `salmon`. We anticipate working toward replacing the deprecated and removed functions with the corresponding `oneAPI` replacements and idioms, hopefully in the next release of `salmon`. Therefore, we anticipate that this will be the last — or close to the last —`salmon` release to use (and be compatible with) the legacy `Intel TBB` library. Future releases will likely require a newer version of the `oneAPI TBB` library instead. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.6.0...v1.7.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0:307,Deployability,release,release,307,"New features & improvements; ---------------------------. * This release includes a refactoring and optimization of the mapping code in `--sketch` mode, further increasing speed; output should remain identical. * This release adds the `--splitSeqV1` and `--splitSeqV2` flags, that have been the development release for a bit, as simple alternatives to custom geometry when processing SPLiT-seq data for `alevin-fry` or `alevin` processing. Fixes; -----. * No particular bug fixes are noted for this release. Other changes / enhancements; -------------------------------. * Explicitly check for valid value of `k` before calling out to the indexer. This leads to a more informative error message and exit if the user passes an unacceptable value of `k`. . Notes; -----. * The `Intel TBB` library used internally by `salmon` (and used as well in `TwoPaCo` that is relied upon for compacted reference de Bruijn graph construction) has evolved into the [`oneAPI TBB`](https://github.com/oneapi-src/oneTBB). Recent releases of this library (2021.1 and forward) make certain backward incompatible changes and therefore cannot be used to build `salmon`. We anticipate working toward replacing the deprecated and removed functions with the corresponding `oneAPI` replacements and idioms, hopefully in the next release of `salmon`. Therefore, we anticipate that this will be the last — or close to the last —`salmon` release to use (and be compatible with) the legacy `Intel TBB` library. Future releases will likely require a newer version of the `oneAPI TBB` library instead. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.6.0...v1.7.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0:499,Deployability,release,release,499,"New features & improvements; ---------------------------. * This release includes a refactoring and optimization of the mapping code in `--sketch` mode, further increasing speed; output should remain identical. * This release adds the `--splitSeqV1` and `--splitSeqV2` flags, that have been the development release for a bit, as simple alternatives to custom geometry when processing SPLiT-seq data for `alevin-fry` or `alevin` processing. Fixes; -----. * No particular bug fixes are noted for this release. Other changes / enhancements; -------------------------------. * Explicitly check for valid value of `k` before calling out to the indexer. This leads to a more informative error message and exit if the user passes an unacceptable value of `k`. . Notes; -----. * The `Intel TBB` library used internally by `salmon` (and used as well in `TwoPaCo` that is relied upon for compacted reference de Bruijn graph construction) has evolved into the [`oneAPI TBB`](https://github.com/oneapi-src/oneTBB). Recent releases of this library (2021.1 and forward) make certain backward incompatible changes and therefore cannot be used to build `salmon`. We anticipate working toward replacing the deprecated and removed functions with the corresponding `oneAPI` replacements and idioms, hopefully in the next release of `salmon`. Therefore, we anticipate that this will be the last — or close to the last —`salmon` release to use (and be compatible with) the legacy `Intel TBB` library. Future releases will likely require a newer version of the `oneAPI TBB` library instead. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.6.0...v1.7.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0:1010,Deployability,release,releases,1010,"New features & improvements; ---------------------------. * This release includes a refactoring and optimization of the mapping code in `--sketch` mode, further increasing speed; output should remain identical. * This release adds the `--splitSeqV1` and `--splitSeqV2` flags, that have been the development release for a bit, as simple alternatives to custom geometry when processing SPLiT-seq data for `alevin-fry` or `alevin` processing. Fixes; -----. * No particular bug fixes are noted for this release. Other changes / enhancements; -------------------------------. * Explicitly check for valid value of `k` before calling out to the indexer. This leads to a more informative error message and exit if the user passes an unacceptable value of `k`. . Notes; -----. * The `Intel TBB` library used internally by `salmon` (and used as well in `TwoPaCo` that is relied upon for compacted reference de Bruijn graph construction) has evolved into the [`oneAPI TBB`](https://github.com/oneapi-src/oneTBB). Recent releases of this library (2021.1 and forward) make certain backward incompatible changes and therefore cannot be used to build `salmon`. We anticipate working toward replacing the deprecated and removed functions with the corresponding `oneAPI` replacements and idioms, hopefully in the next release of `salmon`. Therefore, we anticipate that this will be the last — or close to the last —`salmon` release to use (and be compatible with) the legacy `Intel TBB` library. Future releases will likely require a newer version of the `oneAPI TBB` library instead. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.6.0...v1.7.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0:1302,Deployability,release,release,1302,"New features & improvements; ---------------------------. * This release includes a refactoring and optimization of the mapping code in `--sketch` mode, further increasing speed; output should remain identical. * This release adds the `--splitSeqV1` and `--splitSeqV2` flags, that have been the development release for a bit, as simple alternatives to custom geometry when processing SPLiT-seq data for `alevin-fry` or `alevin` processing. Fixes; -----. * No particular bug fixes are noted for this release. Other changes / enhancements; -------------------------------. * Explicitly check for valid value of `k` before calling out to the indexer. This leads to a more informative error message and exit if the user passes an unacceptable value of `k`. . Notes; -----. * The `Intel TBB` library used internally by `salmon` (and used as well in `TwoPaCo` that is relied upon for compacted reference de Bruijn graph construction) has evolved into the [`oneAPI TBB`](https://github.com/oneapi-src/oneTBB). Recent releases of this library (2021.1 and forward) make certain backward incompatible changes and therefore cannot be used to build `salmon`. We anticipate working toward replacing the deprecated and removed functions with the corresponding `oneAPI` replacements and idioms, hopefully in the next release of `salmon`. Therefore, we anticipate that this will be the last — or close to the last —`salmon` release to use (and be compatible with) the legacy `Intel TBB` library. Future releases will likely require a newer version of the `oneAPI TBB` library instead. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.6.0...v1.7.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0:1408,Deployability,release,release,1408,"New features & improvements; ---------------------------. * This release includes a refactoring and optimization of the mapping code in `--sketch` mode, further increasing speed; output should remain identical. * This release adds the `--splitSeqV1` and `--splitSeqV2` flags, that have been the development release for a bit, as simple alternatives to custom geometry when processing SPLiT-seq data for `alevin-fry` or `alevin` processing. Fixes; -----. * No particular bug fixes are noted for this release. Other changes / enhancements; -------------------------------. * Explicitly check for valid value of `k` before calling out to the indexer. This leads to a more informative error message and exit if the user passes an unacceptable value of `k`. . Notes; -----. * The `Intel TBB` library used internally by `salmon` (and used as well in `TwoPaCo` that is relied upon for compacted reference de Bruijn graph construction) has evolved into the [`oneAPI TBB`](https://github.com/oneapi-src/oneTBB). Recent releases of this library (2021.1 and forward) make certain backward incompatible changes and therefore cannot be used to build `salmon`. We anticipate working toward replacing the deprecated and removed functions with the corresponding `oneAPI` replacements and idioms, hopefully in the next release of `salmon`. Therefore, we anticipate that this will be the last — or close to the last —`salmon` release to use (and be compatible with) the legacy `Intel TBB` library. Future releases will likely require a newer version of the `oneAPI TBB` library instead. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.6.0...v1.7.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0:1487,Deployability,release,releases,1487,"New features & improvements; ---------------------------. * This release includes a refactoring and optimization of the mapping code in `--sketch` mode, further increasing speed; output should remain identical. * This release adds the `--splitSeqV1` and `--splitSeqV2` flags, that have been the development release for a bit, as simple alternatives to custom geometry when processing SPLiT-seq data for `alevin-fry` or `alevin` processing. Fixes; -----. * No particular bug fixes are noted for this release. Other changes / enhancements; -------------------------------. * Explicitly check for valid value of `k` before calling out to the indexer. This leads to a more informative error message and exit if the user passes an unacceptable value of `k`. . Notes; -----. * The `Intel TBB` library used internally by `salmon` (and used as well in `TwoPaCo` that is relied upon for compacted reference de Bruijn graph construction) has evolved into the [`oneAPI TBB`](https://github.com/oneapi-src/oneTBB). Recent releases of this library (2021.1 and forward) make certain backward incompatible changes and therefore cannot be used to build `salmon`. We anticipate working toward replacing the deprecated and removed functions with the corresponding `oneAPI` replacements and idioms, hopefully in the next release of `salmon`. Therefore, we anticipate that this will be the last — or close to the last —`salmon` release to use (and be compatible with) the legacy `Intel TBB` library. Future releases will likely require a newer version of the `oneAPI TBB` library instead. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.6.0...v1.7.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0:687,Integrability,message,message,687,"New features & improvements; ---------------------------. * This release includes a refactoring and optimization of the mapping code in `--sketch` mode, further increasing speed; output should remain identical. * This release adds the `--splitSeqV1` and `--splitSeqV2` flags, that have been the development release for a bit, as simple alternatives to custom geometry when processing SPLiT-seq data for `alevin-fry` or `alevin` processing. Fixes; -----. * No particular bug fixes are noted for this release. Other changes / enhancements; -------------------------------. * Explicitly check for valid value of `k` before calling out to the indexer. This leads to a more informative error message and exit if the user passes an unacceptable value of `k`. . Notes; -----. * The `Intel TBB` library used internally by `salmon` (and used as well in `TwoPaCo` that is relied upon for compacted reference de Bruijn graph construction) has evolved into the [`oneAPI TBB`](https://github.com/oneapi-src/oneTBB). Recent releases of this library (2021.1 and forward) make certain backward incompatible changes and therefore cannot be used to build `salmon`. We anticipate working toward replacing the deprecated and removed functions with the corresponding `oneAPI` replacements and idioms, hopefully in the next release of `salmon`. Therefore, we anticipate that this will be the last — or close to the last —`salmon` release to use (and be compatible with) the legacy `Intel TBB` library. Future releases will likely require a newer version of the `oneAPI TBB` library instead. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.6.0...v1.7.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0:84,Modifiability,refactor,refactoring,84,"New features & improvements; ---------------------------. * This release includes a refactoring and optimization of the mapping code in `--sketch` mode, further increasing speed; output should remain identical. * This release adds the `--splitSeqV1` and `--splitSeqV2` flags, that have been the development release for a bit, as simple alternatives to custom geometry when processing SPLiT-seq data for `alevin-fry` or `alevin` processing. Fixes; -----. * No particular bug fixes are noted for this release. Other changes / enhancements; -------------------------------. * Explicitly check for valid value of `k` before calling out to the indexer. This leads to a more informative error message and exit if the user passes an unacceptable value of `k`. . Notes; -----. * The `Intel TBB` library used internally by `salmon` (and used as well in `TwoPaCo` that is relied upon for compacted reference de Bruijn graph construction) has evolved into the [`oneAPI TBB`](https://github.com/oneapi-src/oneTBB). Recent releases of this library (2021.1 and forward) make certain backward incompatible changes and therefore cannot be used to build `salmon`. We anticipate working toward replacing the deprecated and removed functions with the corresponding `oneAPI` replacements and idioms, hopefully in the next release of `salmon`. Therefore, we anticipate that this will be the last — or close to the last —`salmon` release to use (and be compatible with) the legacy `Intel TBB` library. Future releases will likely require a newer version of the `oneAPI TBB` library instead. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.6.0...v1.7.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0:524,Modifiability,enhance,enhancements,524,"New features & improvements; ---------------------------. * This release includes a refactoring and optimization of the mapping code in `--sketch` mode, further increasing speed; output should remain identical. * This release adds the `--splitSeqV1` and `--splitSeqV2` flags, that have been the development release for a bit, as simple alternatives to custom geometry when processing SPLiT-seq data for `alevin-fry` or `alevin` processing. Fixes; -----. * No particular bug fixes are noted for this release. Other changes / enhancements; -------------------------------. * Explicitly check for valid value of `k` before calling out to the indexer. This leads to a more informative error message and exit if the user passes an unacceptable value of `k`. . Notes; -----. * The `Intel TBB` library used internally by `salmon` (and used as well in `TwoPaCo` that is relied upon for compacted reference de Bruijn graph construction) has evolved into the [`oneAPI TBB`](https://github.com/oneapi-src/oneTBB). Recent releases of this library (2021.1 and forward) make certain backward incompatible changes and therefore cannot be used to build `salmon`. We anticipate working toward replacing the deprecated and removed functions with the corresponding `oneAPI` replacements and idioms, hopefully in the next release of `salmon`. Therefore, we anticipate that this will be the last — or close to the last —`salmon` release to use (and be compatible with) the legacy `Intel TBB` library. Future releases will likely require a newer version of the `oneAPI TBB` library instead. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.6.0...v1.7.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0:932,Modifiability,evolve,evolved,932,"New features & improvements; ---------------------------. * This release includes a refactoring and optimization of the mapping code in `--sketch` mode, further increasing speed; output should remain identical. * This release adds the `--splitSeqV1` and `--splitSeqV2` flags, that have been the development release for a bit, as simple alternatives to custom geometry when processing SPLiT-seq data for `alevin-fry` or `alevin` processing. Fixes; -----. * No particular bug fixes are noted for this release. Other changes / enhancements; -------------------------------. * Explicitly check for valid value of `k` before calling out to the indexer. This leads to a more informative error message and exit if the user passes an unacceptable value of `k`. . Notes; -----. * The `Intel TBB` library used internally by `salmon` (and used as well in `TwoPaCo` that is relied upon for compacted reference de Bruijn graph construction) has evolved into the [`oneAPI TBB`](https://github.com/oneapi-src/oneTBB). Recent releases of this library (2021.1 and forward) make certain backward incompatible changes and therefore cannot be used to build `salmon`. We anticipate working toward replacing the deprecated and removed functions with the corresponding `oneAPI` replacements and idioms, hopefully in the next release of `salmon`. Therefore, we anticipate that this will be the last — or close to the last —`salmon` release to use (and be compatible with) the legacy `Intel TBB` library. Future releases will likely require a newer version of the `oneAPI TBB` library instead. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.6.0...v1.7.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0:100,Performance,optimiz,optimization,100,"New features & improvements; ---------------------------. * This release includes a refactoring and optimization of the mapping code in `--sketch` mode, further increasing speed; output should remain identical. * This release adds the `--splitSeqV1` and `--splitSeqV2` flags, that have been the development release for a bit, as simple alternatives to custom geometry when processing SPLiT-seq data for `alevin-fry` or `alevin` processing. Fixes; -----. * No particular bug fixes are noted for this release. Other changes / enhancements; -------------------------------. * Explicitly check for valid value of `k` before calling out to the indexer. This leads to a more informative error message and exit if the user passes an unacceptable value of `k`. . Notes; -----. * The `Intel TBB` library used internally by `salmon` (and used as well in `TwoPaCo` that is relied upon for compacted reference de Bruijn graph construction) has evolved into the [`oneAPI TBB`](https://github.com/oneapi-src/oneTBB). Recent releases of this library (2021.1 and forward) make certain backward incompatible changes and therefore cannot be used to build `salmon`. We anticipate working toward replacing the deprecated and removed functions with the corresponding `oneAPI` replacements and idioms, hopefully in the next release of `salmon`. Therefore, we anticipate that this will be the last — or close to the last —`salmon` release to use (and be compatible with) the legacy `Intel TBB` library. Future releases will likely require a newer version of the `oneAPI TBB` library instead. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.6.0...v1.7.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0:329,Usability,simpl,simple,329,"New features & improvements; ---------------------------. * This release includes a refactoring and optimization of the mapping code in `--sketch` mode, further increasing speed; output should remain identical. * This release adds the `--splitSeqV1` and `--splitSeqV2` flags, that have been the development release for a bit, as simple alternatives to custom geometry when processing SPLiT-seq data for `alevin-fry` or `alevin` processing. Fixes; -----. * No particular bug fixes are noted for this release. Other changes / enhancements; -------------------------------. * Explicitly check for valid value of `k` before calling out to the indexer. This leads to a more informative error message and exit if the user passes an unacceptable value of `k`. . Notes; -----. * The `Intel TBB` library used internally by `salmon` (and used as well in `TwoPaCo` that is relied upon for compacted reference de Bruijn graph construction) has evolved into the [`oneAPI TBB`](https://github.com/oneapi-src/oneTBB). Recent releases of this library (2021.1 and forward) make certain backward incompatible changes and therefore cannot be used to build `salmon`. We anticipate working toward replacing the deprecated and removed functions with the corresponding `oneAPI` replacements and idioms, hopefully in the next release of `salmon`. Therefore, we anticipate that this will be the last — or close to the last —`salmon` release to use (and be compatible with) the legacy `Intel TBB` library. Future releases will likely require a newer version of the `oneAPI TBB` library instead. **Full Changelog**: https://github.com/COMBINE-lab/salmon/compare/v1.6.0...v1.7.0",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.7.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:891,Availability,avail,available,891,"**salmon 1.4.0** : Thanksgiving release 🦃 . ## Bug fixes. * Fixed a _very rare_ bug whereby, on certain operating systems, under certain types of system load, and with specific versions of the C++ standard library, the `default` standard device would fail to produce a pseudorandom seed and would raise an exception. On these systems, ""/dev/urandom"" is explicitly substituted for the default random device. Unfortunately, it is not possible / easy to make the appropriate source changes at runtime. So, if you are experiencing this issue (which, again, looks to be exceedingly rare), it may be best to compile from source on the machine causing the issue. ## salmon-related changes. * salmon should now compile and run on ARM machines. It has been tested on an AWS aarch64 node (running Ubuntu 20.10), but presumably should work on many ARM machines. *It is assumed that NEON intrinsics are available*. This support for ARM was made immensely easier by [SIMDe](https://github.com/simd-everywhere/simde). Thanks to @mr-c and @BenLangmead for pointing out SIMDe project and to @mr-c, @lh3 and lead developer of SIMDe @nemequ who all gave useful advice on the initial expansion to ARM support. ## alevin-related changes. ### Support for RAD file creation and the alevin-fry pipeline. * `--rad`/`--justAlign` **flag** : Salmon/alevin 1.4.0 coincides with the initial release of [alevin-fry](https://github.com/COMBINE-lab/alevin-fry), a flexible and efficient framework for single-cell quantification. Alevin-fry handles barcode-detection and quantification, providing the methods developed as part of alevin, as well as a number of other possibilities. Alevin-fry is computationally efficient, flexible, and _very_ memory efficient, *processing single-cell experiments in 2-3GB of memory* (see more details in the [poster](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1) introducing alevin-fry). Moving forwa",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:2482,Availability,avail,available,2482,"-cell quantification. Alevin-fry handles barcode-detection and quantification, providing the methods developed as part of alevin, as well as a number of other possibilities. Alevin-fry is computationally efficient, flexible, and _very_ memory efficient, *processing single-cell experiments in 2-3GB of memory* (see more details in the [poster](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1) introducing alevin-fry). Moving forward, we plan for alevin-fry to be the primary development platform for new single-cell quantification methods. Nonetheless, [alevin-fry](https://github.com/COMBINE-lab/alevin-fry) currently, and for the forseeable future, will rely on alevin to perform the actual barcode / umi extraction, and mapping of sequencing reads. alevin communicates with alevin-fry via an intermediate binary file called a RAD (Reduced Alignment Data) file. To process data with alevin-fry (documentation available [here](https://alevin-fry.readthedocs.io/en/latest/)), you must first map the reads to the reference transcriptome to generate a RAD file. This is done by running alevin as you would normally do, and by additionally passing the flag `--rad` or `--justAlign`. This flag will tell alevin to just align the reads and to write the appropriate information to a RAD file in the output directory (with a pre-determined name). . * `--sketch`/`--sketchMode` **flag** : Alevin learned the `--sketch`/`--sketchMode` flag. This flag is currently relevant only in RAD mode. In fact, this flag currently implies RAD mode (that is `--sketch` is currently the same as `--rad --sketch`). The `--sketch` flag is meant to prioritize mapping speed at the potential cost of reduced specificity. It turns off selective-alignment and instead maps the reads using a custom implementation of psuedoalignment [[1]](#1) with structural constraints (PASC). This consists of executing the k-mer collecting part of",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:3995,Availability,down,downstream,3995,"In fact, this flag currently implies RAD mode (that is `--sketch` is currently the same as `--rad --sketch`). The `--sketch` flag is meant to prioritize mapping speed at the potential cost of reduced specificity. It turns off selective-alignment and instead maps the reads using a custom implementation of psuedoalignment [[1]](#1) with structural constraints (PASC). This consists of executing the k-mer collecting part of a pseudoalignment [[1]](#1) algorithm to collect potentially compatible targets for a fragment, represented by a series of ""hits"". The targets are then filtered to ensure that the collected hits are consistent in their orientation, and co-linear in their placement on the fragment and reference (these are the enforced structural constraints). This algorithm is distinct from the seeding step of selective alignment or the quasi-mapping algorithm, and prioritizes speed. For an overview of how `--sketch` mode affects downstream results, please check out our poster [Accurate, efficient, and uncertainty-aware expression quantification of single-cell RNA-seq data](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1). ### Other alevin-related changes. * `--noWhitelist` **flag** : Alevin learned the `--noWhitelist` flag. Passing this flag to alevin (in classic mode; this flag has no effect in RAD mode) stops the pipeline after UMI deduplication and quantification. The second-round intelligent whitelisting operation will not be performed. * **generic barcode / umi / read geometry syntax** : Alevin learned to support a generic syntax to specify the read sequence that should be used for barcodes, UMIs and the read sequence. The syntax allows one to specify how the pattern corresponding to the barcode, UMI, and read sequence should be pieced together, and the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:5921,Availability,avail,available,5921,"d together, and the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner using the generic syntax:; * `--read-geometry 2[1-end] --bc-geometry 1[1-16] --umi-geometry 1[17-26]`. This specifies that the ""sequence"" read (the biological sequence to be aligned) comes from read `2`, and it spans from the first index `1` (this syntax used 1-based indexing) until the `end` of the read. Likewise, the barcode derives from read `1` and occupies positions `1-16`, and the UMI comes from read `1` and occupies positions `17-26`. The syntax can specify multiple ranges, and they will simply be concatenated together to produce the string. For example, one could specify `--bc-geometry 1[1-8,16-23]` to designate that the barcode should be taken from the substring in positions 1-8 of read 1 followed by the substring in positions 16-23 of read 1. It is even possible to have the string pieced together across both reads, but that functionality is only available if you are running with `--rad` or `--sketch` and preparing a RAD file for alevin-fry. _If you are running classic alevin, the barcode must reside on a single read_. The robust parsing of the flexible geometry syntax is made possible by the [cpp-peglib](https://github.com/yhirose/cpp-peglib) project.; ; * Alevin learned the ability to annotate output SAM files with the `CB` and `UR` tags. If you write a SAM file by running alevin with `--writeMappings`, then the resulting SAM file will have `CB` and `UR` tags in the alignment records to record the cell barcode and UMI for the fragment. ; ; * A new command-line flag `--noWhitelist` is added to explicitly disable the 'intelligent-whitelist' by alevin. It helps with a still-unresolved issue on HPC running on old centOS, where alevin fails to gain access to virtual memory.; ; ## References; <a id=""1"">[1]</a> Bray NL, Pimentel H, Melsted P, Pachter L. _Near-optimal probabilistic RNA-seq quantification._ Nat Biotechnol. 2016;3",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:6101,Availability,robust,robust,6101,"nd the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner using the generic syntax:; * `--read-geometry 2[1-end] --bc-geometry 1[1-16] --umi-geometry 1[17-26]`. This specifies that the ""sequence"" read (the biological sequence to be aligned) comes from read `2`, and it spans from the first index `1` (this syntax used 1-based indexing) until the `end` of the read. Likewise, the barcode derives from read `1` and occupies positions `1-16`, and the UMI comes from read `1` and occupies positions `17-26`. The syntax can specify multiple ranges, and they will simply be concatenated together to produce the string. For example, one could specify `--bc-geometry 1[1-8,16-23]` to designate that the barcode should be taken from the substring in positions 1-8 of read 1 followed by the substring in positions 16-23 of read 1. It is even possible to have the string pieced together across both reads, but that functionality is only available if you are running with `--rad` or `--sketch` and preparing a RAD file for alevin-fry. _If you are running classic alevin, the barcode must reside on a single read_. The robust parsing of the flexible geometry syntax is made possible by the [cpp-peglib](https://github.com/yhirose/cpp-peglib) project.; ; * Alevin learned the ability to annotate output SAM files with the `CB` and `UR` tags. If you write a SAM file by running alevin with `--writeMappings`, then the resulting SAM file will have `CB` and `UR` tags in the alignment records to record the cell barcode and UMI for the fragment. ; ; * A new command-line flag `--noWhitelist` is added to explicitly disable the 'intelligent-whitelist' by alevin. It helps with a still-unresolved issue on HPC running on old centOS, where alevin fails to gain access to virtual memory.; ; ## References; <a id=""1"">[1]</a> Bray NL, Pimentel H, Melsted P, Pachter L. _Near-optimal probabilistic RNA-seq quantification._ Nat Biotechnol. 2016;34(5):525-527.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:32,Deployability,release,release,32,"**salmon 1.4.0** : Thanksgiving release 🦃 . ## Bug fixes. * Fixed a _very rare_ bug whereby, on certain operating systems, under certain types of system load, and with specific versions of the C++ standard library, the `default` standard device would fail to produce a pseudorandom seed and would raise an exception. On these systems, ""/dev/urandom"" is explicitly substituted for the default random device. Unfortunately, it is not possible / easy to make the appropriate source changes at runtime. So, if you are experiencing this issue (which, again, looks to be exceedingly rare), it may be best to compile from source on the machine causing the issue. ## salmon-related changes. * salmon should now compile and run on ARM machines. It has been tested on an AWS aarch64 node (running Ubuntu 20.10), but presumably should work on many ARM machines. *It is assumed that NEON intrinsics are available*. This support for ARM was made immensely easier by [SIMDe](https://github.com/simd-everywhere/simde). Thanks to @mr-c and @BenLangmead for pointing out SIMDe project and to @mr-c, @lh3 and lead developer of SIMDe @nemequ who all gave useful advice on the initial expansion to ARM support. ## alevin-related changes. ### Support for RAD file creation and the alevin-fry pipeline. * `--rad`/`--justAlign` **flag** : Salmon/alevin 1.4.0 coincides with the initial release of [alevin-fry](https://github.com/COMBINE-lab/alevin-fry), a flexible and efficient framework for single-cell quantification. Alevin-fry handles barcode-detection and quantification, providing the methods developed as part of alevin, as well as a number of other possibilities. Alevin-fry is computationally efficient, flexible, and _very_ memory efficient, *processing single-cell experiments in 2-3GB of memory* (see more details in the [poster](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1) introducing alevin-fry). Moving forwa",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:1271,Deployability,pipeline,pipeline,1271,"ld fail to produce a pseudorandom seed and would raise an exception. On these systems, ""/dev/urandom"" is explicitly substituted for the default random device. Unfortunately, it is not possible / easy to make the appropriate source changes at runtime. So, if you are experiencing this issue (which, again, looks to be exceedingly rare), it may be best to compile from source on the machine causing the issue. ## salmon-related changes. * salmon should now compile and run on ARM machines. It has been tested on an AWS aarch64 node (running Ubuntu 20.10), but presumably should work on many ARM machines. *It is assumed that NEON intrinsics are available*. This support for ARM was made immensely easier by [SIMDe](https://github.com/simd-everywhere/simde). Thanks to @mr-c and @BenLangmead for pointing out SIMDe project and to @mr-c, @lh3 and lead developer of SIMDe @nemequ who all gave useful advice on the initial expansion to ARM support. ## alevin-related changes. ### Support for RAD file creation and the alevin-fry pipeline. * `--rad`/`--justAlign` **flag** : Salmon/alevin 1.4.0 coincides with the initial release of [alevin-fry](https://github.com/COMBINE-lab/alevin-fry), a flexible and efficient framework for single-cell quantification. Alevin-fry handles barcode-detection and quantification, providing the methods developed as part of alevin, as well as a number of other possibilities. Alevin-fry is computationally efficient, flexible, and _very_ memory efficient, *processing single-cell experiments in 2-3GB of memory* (see more details in the [poster](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1) introducing alevin-fry). Moving forward, we plan for alevin-fry to be the primary development platform for new single-cell quantification methods. Nonetheless, [alevin-fry](https://github.com/COMBINE-lab/alevin-fry) currently, and for the forseeable future, will rely on alevin to perf",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:1363,Deployability,release,release,1363,"tituted for the default random device. Unfortunately, it is not possible / easy to make the appropriate source changes at runtime. So, if you are experiencing this issue (which, again, looks to be exceedingly rare), it may be best to compile from source on the machine causing the issue. ## salmon-related changes. * salmon should now compile and run on ARM machines. It has been tested on an AWS aarch64 node (running Ubuntu 20.10), but presumably should work on many ARM machines. *It is assumed that NEON intrinsics are available*. This support for ARM was made immensely easier by [SIMDe](https://github.com/simd-everywhere/simde). Thanks to @mr-c and @BenLangmead for pointing out SIMDe project and to @mr-c, @lh3 and lead developer of SIMDe @nemequ who all gave useful advice on the initial expansion to ARM support. ## alevin-related changes. ### Support for RAD file creation and the alevin-fry pipeline. * `--rad`/`--justAlign` **flag** : Salmon/alevin 1.4.0 coincides with the initial release of [alevin-fry](https://github.com/COMBINE-lab/alevin-fry), a flexible and efficient framework for single-cell quantification. Alevin-fry handles barcode-detection and quantification, providing the methods developed as part of alevin, as well as a number of other possibilities. Alevin-fry is computationally efficient, flexible, and _very_ memory efficient, *processing single-cell experiments in 2-3GB of memory* (see more details in the [poster](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1) introducing alevin-fry). Moving forward, we plan for alevin-fry to be the primary development platform for new single-cell quantification methods. Nonetheless, [alevin-fry](https://github.com/COMBINE-lab/alevin-fry) currently, and for the forseeable future, will rely on alevin to perform the actual barcode / umi extraction, and mapping of sequencing reads. alevin communicates with alevin-fry via an in",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:4484,Deployability,pipeline,pipeline,4484,"cting part of a pseudoalignment [[1]](#1) algorithm to collect potentially compatible targets for a fragment, represented by a series of ""hits"". The targets are then filtered to ensure that the collected hits are consistent in their orientation, and co-linear in their placement on the fragment and reference (these are the enforced structural constraints). This algorithm is distinct from the seeding step of selective alignment or the quasi-mapping algorithm, and prioritizes speed. For an overview of how `--sketch` mode affects downstream results, please check out our poster [Accurate, efficient, and uncertainty-aware expression quantification of single-cell RNA-seq data](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1). ### Other alevin-related changes. * `--noWhitelist` **flag** : Alevin learned the `--noWhitelist` flag. Passing this flag to alevin (in classic mode; this flag has no effect in RAD mode) stops the pipeline after UMI deduplication and quantification. The second-round intelligent whitelisting operation will not be performed. * **generic barcode / umi / read geometry syntax** : Alevin learned to support a generic syntax to specify the read sequence that should be used for barcodes, UMIs and the read sequence. The syntax allows one to specify how the pattern corresponding to the barcode, UMI, and read sequence should be pieced together, and the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner using the generic syntax:; * `--read-geometry 2[1-end] --bc-geometry 1[1-16] --umi-geometry 1[17-26]`. This specifies that the ""sequence"" read (the biological sequence to be aligned) comes from read `2`, and it spans from the first index `1` (this syntax used 1-based indexing) until the `end` of the read. Likewise, the barcode derives from read `1` and occupies positions `1-16`, and the UMI comes from read ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:1446,Energy Efficiency,efficient,efficient,1446,"o make the appropriate source changes at runtime. So, if you are experiencing this issue (which, again, looks to be exceedingly rare), it may be best to compile from source on the machine causing the issue. ## salmon-related changes. * salmon should now compile and run on ARM machines. It has been tested on an AWS aarch64 node (running Ubuntu 20.10), but presumably should work on many ARM machines. *It is assumed that NEON intrinsics are available*. This support for ARM was made immensely easier by [SIMDe](https://github.com/simd-everywhere/simde). Thanks to @mr-c and @BenLangmead for pointing out SIMDe project and to @mr-c, @lh3 and lead developer of SIMDe @nemequ who all gave useful advice on the initial expansion to ARM support. ## alevin-related changes. ### Support for RAD file creation and the alevin-fry pipeline. * `--rad`/`--justAlign` **flag** : Salmon/alevin 1.4.0 coincides with the initial release of [alevin-fry](https://github.com/COMBINE-lab/alevin-fry), a flexible and efficient framework for single-cell quantification. Alevin-fry handles barcode-detection and quantification, providing the methods developed as part of alevin, as well as a number of other possibilities. Alevin-fry is computationally efficient, flexible, and _very_ memory efficient, *processing single-cell experiments in 2-3GB of memory* (see more details in the [poster](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1) introducing alevin-fry). Moving forward, we plan for alevin-fry to be the primary development platform for new single-cell quantification methods. Nonetheless, [alevin-fry](https://github.com/COMBINE-lab/alevin-fry) currently, and for the forseeable future, will rely on alevin to perform the actual barcode / umi extraction, and mapping of sequencing reads. alevin communicates with alevin-fry via an intermediate binary file called a RAD (Reduced Alignment Data) file. To process data",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:1680,Energy Efficiency,efficient,efficient,1680,"been tested on an AWS aarch64 node (running Ubuntu 20.10), but presumably should work on many ARM machines. *It is assumed that NEON intrinsics are available*. This support for ARM was made immensely easier by [SIMDe](https://github.com/simd-everywhere/simde). Thanks to @mr-c and @BenLangmead for pointing out SIMDe project and to @mr-c, @lh3 and lead developer of SIMDe @nemequ who all gave useful advice on the initial expansion to ARM support. ## alevin-related changes. ### Support for RAD file creation and the alevin-fry pipeline. * `--rad`/`--justAlign` **flag** : Salmon/alevin 1.4.0 coincides with the initial release of [alevin-fry](https://github.com/COMBINE-lab/alevin-fry), a flexible and efficient framework for single-cell quantification. Alevin-fry handles barcode-detection and quantification, providing the methods developed as part of alevin, as well as a number of other possibilities. Alevin-fry is computationally efficient, flexible, and _very_ memory efficient, *processing single-cell experiments in 2-3GB of memory* (see more details in the [poster](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1) introducing alevin-fry). Moving forward, we plan for alevin-fry to be the primary development platform for new single-cell quantification methods. Nonetheless, [alevin-fry](https://github.com/COMBINE-lab/alevin-fry) currently, and for the forseeable future, will rely on alevin to perform the actual barcode / umi extraction, and mapping of sequencing reads. alevin communicates with alevin-fry via an intermediate binary file called a RAD (Reduced Alignment Data) file. To process data with alevin-fry (documentation available [here](https://alevin-fry.readthedocs.io/en/latest/)), you must first map the reads to the reference transcriptome to generate a RAD file. This is done by running alevin as you would normally do, and by additionally passing the flag `--rad` or `--just",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:1719,Energy Efficiency,efficient,efficient,1719,"been tested on an AWS aarch64 node (running Ubuntu 20.10), but presumably should work on many ARM machines. *It is assumed that NEON intrinsics are available*. This support for ARM was made immensely easier by [SIMDe](https://github.com/simd-everywhere/simde). Thanks to @mr-c and @BenLangmead for pointing out SIMDe project and to @mr-c, @lh3 and lead developer of SIMDe @nemequ who all gave useful advice on the initial expansion to ARM support. ## alevin-related changes. ### Support for RAD file creation and the alevin-fry pipeline. * `--rad`/`--justAlign` **flag** : Salmon/alevin 1.4.0 coincides with the initial release of [alevin-fry](https://github.com/COMBINE-lab/alevin-fry), a flexible and efficient framework for single-cell quantification. Alevin-fry handles barcode-detection and quantification, providing the methods developed as part of alevin, as well as a number of other possibilities. Alevin-fry is computationally efficient, flexible, and _very_ memory efficient, *processing single-cell experiments in 2-3GB of memory* (see more details in the [poster](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1) introducing alevin-fry). Moving forward, we plan for alevin-fry to be the primary development platform for new single-cell quantification methods. Nonetheless, [alevin-fry](https://github.com/COMBINE-lab/alevin-fry) currently, and for the forseeable future, will rely on alevin to perform the actual barcode / umi extraction, and mapping of sequencing reads. alevin communicates with alevin-fry via an intermediate binary file called a RAD (Reduced Alignment Data) file. To process data with alevin-fry (documentation available [here](https://alevin-fry.readthedocs.io/en/latest/)), you must first map the reads to the reference transcriptome to generate a RAD file. This is done by running alevin as you would normally do, and by additionally passing the flag `--rad` or `--just",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:3245,Energy Efficiency,reduce,reduced,3245," future, will rely on alevin to perform the actual barcode / umi extraction, and mapping of sequencing reads. alevin communicates with alevin-fry via an intermediate binary file called a RAD (Reduced Alignment Data) file. To process data with alevin-fry (documentation available [here](https://alevin-fry.readthedocs.io/en/latest/)), you must first map the reads to the reference transcriptome to generate a RAD file. This is done by running alevin as you would normally do, and by additionally passing the flag `--rad` or `--justAlign`. This flag will tell alevin to just align the reads and to write the appropriate information to a RAD file in the output directory (with a pre-determined name). . * `--sketch`/`--sketchMode` **flag** : Alevin learned the `--sketch`/`--sketchMode` flag. This flag is currently relevant only in RAD mode. In fact, this flag currently implies RAD mode (that is `--sketch` is currently the same as `--rad --sketch`). The `--sketch` flag is meant to prioritize mapping speed at the potential cost of reduced specificity. It turns off selective-alignment and instead maps the reads using a custom implementation of psuedoalignment [[1]](#1) with structural constraints (PASC). This consists of executing the k-mer collecting part of a pseudoalignment [[1]](#1) algorithm to collect potentially compatible targets for a fragment, represented by a series of ""hits"". The targets are then filtered to ensure that the collected hits are consistent in their orientation, and co-linear in their placement on the fragment and reference (these are the enforced structural constraints). This algorithm is distinct from the seeding step of selective alignment or the quasi-mapping algorithm, and prioritizes speed. For an overview of how `--sketch` mode affects downstream results, please check out our poster [Accurate, efficient, and uncertainty-aware expression quantification of single-cell RNA-seq data](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:4054,Energy Efficiency,efficient,efficient,4054,"In fact, this flag currently implies RAD mode (that is `--sketch` is currently the same as `--rad --sketch`). The `--sketch` flag is meant to prioritize mapping speed at the potential cost of reduced specificity. It turns off selective-alignment and instead maps the reads using a custom implementation of psuedoalignment [[1]](#1) with structural constraints (PASC). This consists of executing the k-mer collecting part of a pseudoalignment [[1]](#1) algorithm to collect potentially compatible targets for a fragment, represented by a series of ""hits"". The targets are then filtered to ensure that the collected hits are consistent in their orientation, and co-linear in their placement on the fragment and reference (these are the enforced structural constraints). This algorithm is distinct from the seeding step of selective alignment or the quasi-mapping algorithm, and prioritizes speed. For an overview of how `--sketch` mode affects downstream results, please check out our poster [Accurate, efficient, and uncertainty-aware expression quantification of single-cell RNA-seq data](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1). ### Other alevin-related changes. * `--noWhitelist` **flag** : Alevin learned the `--noWhitelist` flag. Passing this flag to alevin (in classic mode; this flag has no effect in RAD mode) stops the pipeline after UMI deduplication and quantification. The second-round intelligent whitelisting operation will not be performed. * **generic barcode / umi / read geometry syntax** : Alevin learned to support a generic syntax to specify the read sequence that should be used for barcodes, UMIs and the read sequence. The syntax allows one to specify how the pattern corresponding to the barcode, UMI, and read sequence should be pieced together, and the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:1433,Modifiability,flexible,flexible,1433,"o make the appropriate source changes at runtime. So, if you are experiencing this issue (which, again, looks to be exceedingly rare), it may be best to compile from source on the machine causing the issue. ## salmon-related changes. * salmon should now compile and run on ARM machines. It has been tested on an AWS aarch64 node (running Ubuntu 20.10), but presumably should work on many ARM machines. *It is assumed that NEON intrinsics are available*. This support for ARM was made immensely easier by [SIMDe](https://github.com/simd-everywhere/simde). Thanks to @mr-c and @BenLangmead for pointing out SIMDe project and to @mr-c, @lh3 and lead developer of SIMDe @nemequ who all gave useful advice on the initial expansion to ARM support. ## alevin-related changes. ### Support for RAD file creation and the alevin-fry pipeline. * `--rad`/`--justAlign` **flag** : Salmon/alevin 1.4.0 coincides with the initial release of [alevin-fry](https://github.com/COMBINE-lab/alevin-fry), a flexible and efficient framework for single-cell quantification. Alevin-fry handles barcode-detection and quantification, providing the methods developed as part of alevin, as well as a number of other possibilities. Alevin-fry is computationally efficient, flexible, and _very_ memory efficient, *processing single-cell experiments in 2-3GB of memory* (see more details in the [poster](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1) introducing alevin-fry). Moving forward, we plan for alevin-fry to be the primary development platform for new single-cell quantification methods. Nonetheless, [alevin-fry](https://github.com/COMBINE-lab/alevin-fry) currently, and for the forseeable future, will rely on alevin to perform the actual barcode / umi extraction, and mapping of sequencing reads. alevin communicates with alevin-fry via an intermediate binary file called a RAD (Reduced Alignment Data) file. To process data",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:1691,Modifiability,flexible,flexible,1691,"been tested on an AWS aarch64 node (running Ubuntu 20.10), but presumably should work on many ARM machines. *It is assumed that NEON intrinsics are available*. This support for ARM was made immensely easier by [SIMDe](https://github.com/simd-everywhere/simde). Thanks to @mr-c and @BenLangmead for pointing out SIMDe project and to @mr-c, @lh3 and lead developer of SIMDe @nemequ who all gave useful advice on the initial expansion to ARM support. ## alevin-related changes. ### Support for RAD file creation and the alevin-fry pipeline. * `--rad`/`--justAlign` **flag** : Salmon/alevin 1.4.0 coincides with the initial release of [alevin-fry](https://github.com/COMBINE-lab/alevin-fry), a flexible and efficient framework for single-cell quantification. Alevin-fry handles barcode-detection and quantification, providing the methods developed as part of alevin, as well as a number of other possibilities. Alevin-fry is computationally efficient, flexible, and _very_ memory efficient, *processing single-cell experiments in 2-3GB of memory* (see more details in the [poster](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1) introducing alevin-fry). Moving forward, we plan for alevin-fry to be the primary development platform for new single-cell quantification methods. Nonetheless, [alevin-fry](https://github.com/COMBINE-lab/alevin-fry) currently, and for the forseeable future, will rely on alevin to perform the actual barcode / umi extraction, and mapping of sequencing reads. alevin communicates with alevin-fry via an intermediate binary file called a RAD (Reduced Alignment Data) file. To process data with alevin-fry (documentation available [here](https://alevin-fry.readthedocs.io/en/latest/)), you must first map the reads to the reference transcriptome to generate a RAD file. This is done by running alevin as you would normally do, and by additionally passing the flag `--rad` or `--just",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:6123,Modifiability,flexible,flexible,6123,"nd the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner using the generic syntax:; * `--read-geometry 2[1-end] --bc-geometry 1[1-16] --umi-geometry 1[17-26]`. This specifies that the ""sequence"" read (the biological sequence to be aligned) comes from read `2`, and it spans from the first index `1` (this syntax used 1-based indexing) until the `end` of the read. Likewise, the barcode derives from read `1` and occupies positions `1-16`, and the UMI comes from read `1` and occupies positions `17-26`. The syntax can specify multiple ranges, and they will simply be concatenated together to produce the string. For example, one could specify `--bc-geometry 1[1-8,16-23]` to designate that the barcode should be taken from the substring in positions 1-8 of read 1 followed by the substring in positions 16-23 of read 1. It is even possible to have the string pieced together across both reads, but that functionality is only available if you are running with `--rad` or `--sketch` and preparing a RAD file for alevin-fry. _If you are running classic alevin, the barcode must reside on a single read_. The robust parsing of the flexible geometry syntax is made possible by the [cpp-peglib](https://github.com/yhirose/cpp-peglib) project.; ; * Alevin learned the ability to annotate output SAM files with the `CB` and `UR` tags. If you write a SAM file by running alevin with `--writeMappings`, then the resulting SAM file will have `CB` and `UR` tags in the alignment records to record the cell barcode and UMI for the fragment. ; ; * A new command-line flag `--noWhitelist` is added to explicitly disable the 'intelligent-whitelist' by alevin. It helps with a still-unresolved issue on HPC running on old centOS, where alevin fails to gain access to virtual memory.; ; ## References; <a id=""1"">[1]</a> Bray NL, Pimentel H, Melsted P, Pachter L. _Near-optimal probabilistic RNA-seq quantification._ Nat Biotechnol. 2016;34(5):525-527.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:153,Performance,load,load,153,"**salmon 1.4.0** : Thanksgiving release 🦃 . ## Bug fixes. * Fixed a _very rare_ bug whereby, on certain operating systems, under certain types of system load, and with specific versions of the C++ standard library, the `default` standard device would fail to produce a pseudorandom seed and would raise an exception. On these systems, ""/dev/urandom"" is explicitly substituted for the default random device. Unfortunately, it is not possible / easy to make the appropriate source changes at runtime. So, if you are experiencing this issue (which, again, looks to be exceedingly rare), it may be best to compile from source on the machine causing the issue. ## salmon-related changes. * salmon should now compile and run on ARM machines. It has been tested on an AWS aarch64 node (running Ubuntu 20.10), but presumably should work on many ARM machines. *It is assumed that NEON intrinsics are available*. This support for ARM was made immensely easier by [SIMDe](https://github.com/simd-everywhere/simde). Thanks to @mr-c and @BenLangmead for pointing out SIMDe project and to @mr-c, @lh3 and lead developer of SIMDe @nemequ who all gave useful advice on the initial expansion to ARM support. ## alevin-related changes. ### Support for RAD file creation and the alevin-fry pipeline. * `--rad`/`--justAlign` **flag** : Salmon/alevin 1.4.0 coincides with the initial release of [alevin-fry](https://github.com/COMBINE-lab/alevin-fry), a flexible and efficient framework for single-cell quantification. Alevin-fry handles barcode-detection and quantification, providing the methods developed as part of alevin, as well as a number of other possibilities. Alevin-fry is computationally efficient, flexible, and _very_ memory efficient, *processing single-cell experiments in 2-3GB of memory* (see more details in the [poster](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1) introducing alevin-fry). Moving forwa",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:2245,Performance,perform,perform,2245," file creation and the alevin-fry pipeline. * `--rad`/`--justAlign` **flag** : Salmon/alevin 1.4.0 coincides with the initial release of [alevin-fry](https://github.com/COMBINE-lab/alevin-fry), a flexible and efficient framework for single-cell quantification. Alevin-fry handles barcode-detection and quantification, providing the methods developed as part of alevin, as well as a number of other possibilities. Alevin-fry is computationally efficient, flexible, and _very_ memory efficient, *processing single-cell experiments in 2-3GB of memory* (see more details in the [poster](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1) introducing alevin-fry). Moving forward, we plan for alevin-fry to be the primary development platform for new single-cell quantification methods. Nonetheless, [alevin-fry](https://github.com/COMBINE-lab/alevin-fry) currently, and for the forseeable future, will rely on alevin to perform the actual barcode / umi extraction, and mapping of sequencing reads. alevin communicates with alevin-fry via an intermediate binary file called a RAD (Reduced Alignment Data) file. To process data with alevin-fry (documentation available [here](https://alevin-fry.readthedocs.io/en/latest/)), you must first map the reads to the reference transcriptome to generate a RAD file. This is done by running alevin as you would normally do, and by additionally passing the flag `--rad` or `--justAlign`. This flag will tell alevin to just align the reads and to write the appropriate information to a RAD file in the output directory (with a pre-determined name). . * `--sketch`/`--sketchMode` **flag** : Alevin learned the `--sketch`/`--sketchMode` flag. This flag is currently relevant only in RAD mode. In fact, this flag currently implies RAD mode (that is `--sketch` is currently the same as `--rad --sketch`). The `--sketch` flag is meant to prioritize mapping speed at the potential ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:4601,Performance,perform,performed,4601,"represented by a series of ""hits"". The targets are then filtered to ensure that the collected hits are consistent in their orientation, and co-linear in their placement on the fragment and reference (these are the enforced structural constraints). This algorithm is distinct from the seeding step of selective alignment or the quasi-mapping algorithm, and prioritizes speed. For an overview of how `--sketch` mode affects downstream results, please check out our poster [Accurate, efficient, and uncertainty-aware expression quantification of single-cell RNA-seq data](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1). ### Other alevin-related changes. * `--noWhitelist` **flag** : Alevin learned the `--noWhitelist` flag. Passing this flag to alevin (in classic mode; this flag has no effect in RAD mode) stops the pipeline after UMI deduplication and quantification. The second-round intelligent whitelisting operation will not be performed. * **generic barcode / umi / read geometry syntax** : Alevin learned to support a generic syntax to specify the read sequence that should be used for barcodes, UMIs and the read sequence. The syntax allows one to specify how the pattern corresponding to the barcode, UMI, and read sequence should be pieced together, and the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner using the generic syntax:; * `--read-geometry 2[1-end] --bc-geometry 1[1-16] --umi-geometry 1[17-26]`. This specifies that the ""sequence"" read (the biological sequence to be aligned) comes from read `2`, and it spans from the first index `1` (this syntax used 1-based indexing) until the `end` of the read. Likewise, the barcode derives from read `1` and occupies positions `1-16`, and the UMI comes from read `1` and occupies positions `17-26`. The syntax can specify multiple ranges, and they will simply be concatenate",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:1525,Safety,detect,detection,1525,"gly rare), it may be best to compile from source on the machine causing the issue. ## salmon-related changes. * salmon should now compile and run on ARM machines. It has been tested on an AWS aarch64 node (running Ubuntu 20.10), but presumably should work on many ARM machines. *It is assumed that NEON intrinsics are available*. This support for ARM was made immensely easier by [SIMDe](https://github.com/simd-everywhere/simde). Thanks to @mr-c and @BenLangmead for pointing out SIMDe project and to @mr-c, @lh3 and lead developer of SIMDe @nemequ who all gave useful advice on the initial expansion to ARM support. ## alevin-related changes. ### Support for RAD file creation and the alevin-fry pipeline. * `--rad`/`--justAlign` **flag** : Salmon/alevin 1.4.0 coincides with the initial release of [alevin-fry](https://github.com/COMBINE-lab/alevin-fry), a flexible and efficient framework for single-cell quantification. Alevin-fry handles barcode-detection and quantification, providing the methods developed as part of alevin, as well as a number of other possibilities. Alevin-fry is computationally efficient, flexible, and _very_ memory efficient, *processing single-cell experiments in 2-3GB of memory* (see more details in the [poster](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1) introducing alevin-fry). Moving forward, we plan for alevin-fry to be the primary development platform for new single-cell quantification methods. Nonetheless, [alevin-fry](https://github.com/COMBINE-lab/alevin-fry) currently, and for the forseeable future, will rely on alevin to perform the actual barcode / umi extraction, and mapping of sequencing reads. alevin communicates with alevin-fry via an intermediate binary file called a RAD (Reduced Alignment Data) file. To process data with alevin-fry (documentation available [here](https://alevin-fry.readthedocs.io/en/latest/)), you must first map the rea",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:6736,Security,access,access,6736,"nd the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner using the generic syntax:; * `--read-geometry 2[1-end] --bc-geometry 1[1-16] --umi-geometry 1[17-26]`. This specifies that the ""sequence"" read (the biological sequence to be aligned) comes from read `2`, and it spans from the first index `1` (this syntax used 1-based indexing) until the `end` of the read. Likewise, the barcode derives from read `1` and occupies positions `1-16`, and the UMI comes from read `1` and occupies positions `17-26`. The syntax can specify multiple ranges, and they will simply be concatenated together to produce the string. For example, one could specify `--bc-geometry 1[1-8,16-23]` to designate that the barcode should be taken from the substring in positions 1-8 of read 1 followed by the substring in positions 16-23 of read 1. It is even possible to have the string pieced together across both reads, but that functionality is only available if you are running with `--rad` or `--sketch` and preparing a RAD file for alevin-fry. _If you are running classic alevin, the barcode must reside on a single read_. The robust parsing of the flexible geometry syntax is made possible by the [cpp-peglib](https://github.com/yhirose/cpp-peglib) project.; ; * Alevin learned the ability to annotate output SAM files with the `CB` and `UR` tags. If you write a SAM file by running alevin with `--writeMappings`, then the resulting SAM file will have `CB` and `UR` tags in the alignment records to record the cell barcode and UMI for the fragment. ; ; * A new command-line flag `--noWhitelist` is added to explicitly disable the 'intelligent-whitelist' by alevin. It helps with a still-unresolved issue on HPC running on old centOS, where alevin fails to gain access to virtual memory.; ; ## References; <a id=""1"">[1]</a> Bray NL, Pimentel H, Melsted P, Pachter L. _Near-optimal probabilistic RNA-seq quantification._ Nat Biotechnol. 2016;34(5):525-527.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:748,Testability,test,tested,748,"**salmon 1.4.0** : Thanksgiving release 🦃 . ## Bug fixes. * Fixed a _very rare_ bug whereby, on certain operating systems, under certain types of system load, and with specific versions of the C++ standard library, the `default` standard device would fail to produce a pseudorandom seed and would raise an exception. On these systems, ""/dev/urandom"" is explicitly substituted for the default random device. Unfortunately, it is not possible / easy to make the appropriate source changes at runtime. So, if you are experiencing this issue (which, again, looks to be exceedingly rare), it may be best to compile from source on the machine causing the issue. ## salmon-related changes. * salmon should now compile and run on ARM machines. It has been tested on an AWS aarch64 node (running Ubuntu 20.10), but presumably should work on many ARM machines. *It is assumed that NEON intrinsics are available*. This support for ARM was made immensely easier by [SIMDe](https://github.com/simd-everywhere/simde). Thanks to @mr-c and @BenLangmead for pointing out SIMDe project and to @mr-c, @lh3 and lead developer of SIMDe @nemequ who all gave useful advice on the initial expansion to ARM support. ## alevin-related changes. ### Support for RAD file creation and the alevin-fry pipeline. * `--rad`/`--justAlign` **flag** : Salmon/alevin 1.4.0 coincides with the initial release of [alevin-fry](https://github.com/COMBINE-lab/alevin-fry), a flexible and efficient framework for single-cell quantification. Alevin-fry handles barcode-detection and quantification, providing the methods developed as part of alevin, as well as a number of other possibilities. Alevin-fry is computationally efficient, flexible, and _very_ memory efficient, *processing single-cell experiments in 2-3GB of memory* (see more details in the [poster](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1) introducing alevin-fry). Moving forwa",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:2959,Usability,learn,learned,2959,"100/1) introducing alevin-fry). Moving forward, we plan for alevin-fry to be the primary development platform for new single-cell quantification methods. Nonetheless, [alevin-fry](https://github.com/COMBINE-lab/alevin-fry) currently, and for the forseeable future, will rely on alevin to perform the actual barcode / umi extraction, and mapping of sequencing reads. alevin communicates with alevin-fry via an intermediate binary file called a RAD (Reduced Alignment Data) file. To process data with alevin-fry (documentation available [here](https://alevin-fry.readthedocs.io/en/latest/)), you must first map the reads to the reference transcriptome to generate a RAD file. This is done by running alevin as you would normally do, and by additionally passing the flag `--rad` or `--justAlign`. This flag will tell alevin to just align the reads and to write the appropriate information to a RAD file in the output directory (with a pre-determined name). . * `--sketch`/`--sketchMode` **flag** : Alevin learned the `--sketch`/`--sketchMode` flag. This flag is currently relevant only in RAD mode. In fact, this flag currently implies RAD mode (that is `--sketch` is currently the same as `--rad --sketch`). The `--sketch` flag is meant to prioritize mapping speed at the potential cost of reduced specificity. It turns off selective-alignment and instead maps the reads using a custom implementation of psuedoalignment [[1]](#1) with structural constraints (PASC). This consists of executing the k-mer collecting part of a pseudoalignment [[1]](#1) algorithm to collect potentially compatible targets for a fragment, represented by a series of ""hits"". The targets are then filtered to ensure that the collected hits are consistent in their orientation, and co-linear in their placement on the fragment and reference (these are the enforced structural constraints). This algorithm is distinct from the seeding step of selective alignment or the quasi-mapping algorithm, and prioritizes speed. For an ov",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:4357,Usability,learn,learned,4357," of psuedoalignment [[1]](#1) with structural constraints (PASC). This consists of executing the k-mer collecting part of a pseudoalignment [[1]](#1) algorithm to collect potentially compatible targets for a fragment, represented by a series of ""hits"". The targets are then filtered to ensure that the collected hits are consistent in their orientation, and co-linear in their placement on the fragment and reference (these are the enforced structural constraints). This algorithm is distinct from the seeding step of selective alignment or the quasi-mapping algorithm, and prioritizes speed. For an overview of how `--sketch` mode affects downstream results, please check out our poster [Accurate, efficient, and uncertainty-aware expression quantification of single-cell RNA-seq data](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1). ### Other alevin-related changes. * `--noWhitelist` **flag** : Alevin learned the `--noWhitelist` flag. Passing this flag to alevin (in classic mode; this flag has no effect in RAD mode) stops the pipeline after UMI deduplication and quantification. The second-round intelligent whitelisting operation will not be performed. * **generic barcode / umi / read geometry syntax** : Alevin learned to support a generic syntax to specify the read sequence that should be used for barcodes, UMIs and the read sequence. The syntax allows one to specify how the pattern corresponding to the barcode, UMI, and read sequence should be pieced together, and the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner using the generic syntax:; * `--read-geometry 2[1-end] --bc-geometry 1[1-16] --umi-geometry 1[17-26]`. This specifies that the ""sequence"" read (the biological sequence to be aligned) comes from read `2`, and it spans from the first index `1` (this syntax used 1-based indexing) until the `end` of the r",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:4672,Usability,learn,learned,4672,"ion, and co-linear in their placement on the fragment and reference (these are the enforced structural constraints). This algorithm is distinct from the seeding step of selective alignment or the quasi-mapping algorithm, and prioritizes speed. For an overview of how `--sketch` mode affects downstream results, please check out our poster [Accurate, efficient, and uncertainty-aware expression quantification of single-cell RNA-seq data](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1). ### Other alevin-related changes. * `--noWhitelist` **flag** : Alevin learned the `--noWhitelist` flag. Passing this flag to alevin (in classic mode; this flag has no effect in RAD mode) stops the pipeline after UMI deduplication and quantification. The second-round intelligent whitelisting operation will not be performed. * **generic barcode / umi / read geometry syntax** : Alevin learned to support a generic syntax to specify the read sequence that should be used for barcodes, UMIs and the read sequence. The syntax allows one to specify how the pattern corresponding to the barcode, UMI, and read sequence should be pieced together, and the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner using the generic syntax:; * `--read-geometry 2[1-end] --bc-geometry 1[1-16] --umi-geometry 1[17-26]`. This specifies that the ""sequence"" read (the biological sequence to be aligned) comes from read `2`, and it spans from the first index `1` (this syntax used 1-based indexing) until the `end` of the read. Likewise, the barcode derives from read `1` and occupies positions `1-16`, and the UMI comes from read `1` and occupies positions `17-26`. The syntax can specify multiple ranges, and they will simply be concatenated together to produce the string. For example, one could specify `--bc-geometry 1[1-8,16-23]` to designate that the barcode should ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:4958,Usability,intuit,intuitive,4958,"ent or the quasi-mapping algorithm, and prioritizes speed. For an overview of how `--sketch` mode affects downstream results, please check out our poster [Accurate, efficient, and uncertainty-aware expression quantification of single-cell RNA-seq data](https://figshare.com/articles/poster/Accurate_efficient_and_uncertainty-aware_expression_quantification_of_single-cell_RNA-seq_data/13198100/1). ### Other alevin-related changes. * `--noWhitelist` **flag** : Alevin learned the `--noWhitelist` flag. Passing this flag to alevin (in classic mode; this flag has no effect in RAD mode) stops the pipeline after UMI deduplication and quantification. The second-round intelligent whitelisting operation will not be performed. * **generic barcode / umi / read geometry syntax** : Alevin learned to support a generic syntax to specify the read sequence that should be used for barcodes, UMIs and the read sequence. The syntax allows one to specify how the pattern corresponding to the barcode, UMI, and read sequence should be pieced together, and the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner using the generic syntax:; * `--read-geometry 2[1-end] --bc-geometry 1[1-16] --umi-geometry 1[17-26]`. This specifies that the ""sequence"" read (the biological sequence to be aligned) comes from read `2`, and it spans from the first index `1` (this syntax used 1-based indexing) until the `end` of the read. Likewise, the barcode derives from read `1` and occupies positions `1-16`, and the UMI comes from read `1` and occupies positions `17-26`. The syntax can specify multiple ranges, and they will simply be concatenated together to produce the string. For example, one could specify `--bc-geometry 1[1-8,16-23]` to designate that the barcode should be taken from the substring in positions 1-8 of read 1 followed by the substring in positions 16-23 of read 1. It is even possible to have the string pieced together across both reads,",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:5553,Usability,simpl,simply,5553,"d intelligent whitelisting operation will not be performed. * **generic barcode / umi / read geometry syntax** : Alevin learned to support a generic syntax to specify the read sequence that should be used for barcodes, UMIs and the read sequence. The syntax allows one to specify how the pattern corresponding to the barcode, UMI, and read sequence should be pieced together, and the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner using the generic syntax:; * `--read-geometry 2[1-end] --bc-geometry 1[1-16] --umi-geometry 1[17-26]`. This specifies that the ""sequence"" read (the biological sequence to be aligned) comes from read `2`, and it spans from the first index `1` (this syntax used 1-based indexing) until the `end` of the read. Likewise, the barcode derives from read `1` and occupies positions `1-16`, and the UMI comes from read `1` and occupies positions `17-26`. The syntax can specify multiple ranges, and they will simply be concatenated together to produce the string. For example, one could specify `--bc-geometry 1[1-8,16-23]` to designate that the barcode should be taken from the substring in positions 1-8 of read 1 followed by the substring in positions 16-23 of read 1. It is even possible to have the string pieced together across both reads, but that functionality is only available if you are running with `--rad` or `--sketch` and preparing a RAD file for alevin-fry. _If you are running classic alevin, the barcode must reside on a single read_. The robust parsing of the flexible geometry syntax is made possible by the [cpp-peglib](https://github.com/yhirose/cpp-peglib) project.; ; * Alevin learned the ability to annotate output SAM files with the `CB` and `UR` tags. If you write a SAM file by running alevin with `--writeMappings`, then the resulting SAM file will have `CB` and `UR` tags in the alignment records to record the cell barcode and UMI for the fragment. ; ; * A new command-line flag",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0:6245,Usability,learn,learned,6245,"nd the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner using the generic syntax:; * `--read-geometry 2[1-end] --bc-geometry 1[1-16] --umi-geometry 1[17-26]`. This specifies that the ""sequence"" read (the biological sequence to be aligned) comes from read `2`, and it spans from the first index `1` (this syntax used 1-based indexing) until the `end` of the read. Likewise, the barcode derives from read `1` and occupies positions `1-16`, and the UMI comes from read `1` and occupies positions `17-26`. The syntax can specify multiple ranges, and they will simply be concatenated together to produce the string. For example, one could specify `--bc-geometry 1[1-8,16-23]` to designate that the barcode should be taken from the substring in positions 1-8 of read 1 followed by the substring in positions 16-23 of read 1. It is even possible to have the string pieced together across both reads, but that functionality is only available if you are running with `--rad` or `--sketch` and preparing a RAD file for alevin-fry. _If you are running classic alevin, the barcode must reside on a single read_. The robust parsing of the flexible geometry syntax is made possible by the [cpp-peglib](https://github.com/yhirose/cpp-peglib) project.; ; * Alevin learned the ability to annotate output SAM files with the `CB` and `UR` tags. If you write a SAM file by running alevin with `--writeMappings`, then the resulting SAM file will have `CB` and `UR` tags in the alignment records to record the cell barcode and UMI for the fragment. ; ; * A new command-line flag `--noWhitelist` is added to explicitly disable the 'intelligent-whitelist' by alevin. It helps with a still-unresolved issue on HPC running on old centOS, where alevin fails to gain access to virtual memory.; ; ## References; <a id=""1"">[1]</a> Bray NL, Pimentel H, Melsted P, Pachter L. _Near-optimal probabilistic RNA-seq quantification._ Nat Biotechnol. 2016;34(5):525-527.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:1567,Availability,error,errors,1567,"for a decoy mapping to be written to the file are as follows:; ; 1) There is no valid mapping to a non-decoy target. That is, all mappings to valid (non-decoy) targets must have alignment score < `decoyThreshold` * bestDecoyScore.; 2) Only best-scoring decoy alignments are written to file. Thus, if there are sub-optimal decoy alignments that are still better than alignments to valid targets, they will not appear in the output SAM file.; 3) If decoy alignments are written (condition 1 is satisfied), then all equally-best decoy alignments are written to file (i.e. a decoy fragment can still multi-map). . * In the SAM file produced with the `--writeMappings` option, the header lines now include tags to designate each reference sequence as being a decoy or not. Sequence lines (`@SQ` lines) that correspond to valid targets contain the tag `DS:T`, while those corresponding to decoys contain the tag `DS:D`. **Note**: In alignment-based mode, salmon will not process SAM/BAM files with decoy entries (to avoid usage errors, since decoy alignment is not intended for quantification). So, if, for some reason you are using a salmon-generated SAM file containing decoy sequences and alignment records, you must remove them before quantifying using alignment-based mode (i.e. removing all headers with `DS:D` and all alignment records with`XT:A:D`). Details about how to perform that transformation can be found [here](https://github.com/COMBINE-lab/SalmonTools#salmon-in-alignment-mode-w-decoy-bam). * This release enables some considerable improvements to speed in the case of aligning poor quality reads. Specifically, this is enabled due to upstream changes in pufferfish implemented by @mohsenzakeri. Now, the aligner can exit early if it becomes clear at any point during alignment that a valid score cannot be obtained. This reduces the computation used to evaluate poor alignments that will not pass subsequent filtering (addresses #527 adn #537). * Homopolymer seeds are now skipped during ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:7978,Availability,down,down,7978,"jis in release notes :smiley:. ### :bug: Bug fixes. * Improved selective-alignment speed in pathological case involving isolated homopolymer MEM chains. Thanks to [@red-plant](https://github.com/red-plant) for raising the issue (with reproducible data) in [527](https://github.com/COMBINE-lab/salmon/issues/527). * Custom barcode lengths for the `--citeseq` mode was disabled. It has been fixed in https://github.com/COMBINE-lab/salmon/issues/531 and `--citeseq` single-cell protocol can be used along with `--end --barcodeLength --umiLength` triplets. Thanks @rfarouni for reporting this. * The variance estimates reported by `--numCellBootstraps` command in alevin were not corrected for bias. It has been corrected to reported unbiased estimates by multiplying the variance matrix by `(n/n-1)`. * Fixed linking order issue that could, on rare custom compiles of salmon, cause memory to be allocated by TBB and freed by jemalloc (resulting in a segfault). Thanks to @mathog and davidtgoldblatt for helping to track down and resolve this one!. * Fixed an error (_regression_) that could cause an overhanging read in a read pair to be improperly not marked as a dovetail (when it is). This could result in assignment preference for transcripts where the dovetailing read overhangs the transcript start. * Fixed a bug that could occur in certain cases of between-mem alignment where too high of an alignment score could be attributed to a mapping. This could occur when there were _overlapping_ MEMs in the chain on the reference (a bit uncommon), and when the size of the overlap was different on the read and reference. This bug has been fixed by properly adjusting the score in all cases. * The dynamic and asynchronous update of the fragment length distribution could cause the fluctuations in fragment-level conditional probabilities _within the set of alignments for a given fragment_. For duplicate transcripts this could lead to an unexpected result where sequence-duplicate transcripts could b",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:8017,Availability,error,error,8017,"lving isolated homopolymer MEM chains. Thanks to [@red-plant](https://github.com/red-plant) for raising the issue (with reproducible data) in [527](https://github.com/COMBINE-lab/salmon/issues/527). * Custom barcode lengths for the `--citeseq` mode was disabled. It has been fixed in https://github.com/COMBINE-lab/salmon/issues/531 and `--citeseq` single-cell protocol can be used along with `--end --barcodeLength --umiLength` triplets. Thanks @rfarouni for reporting this. * The variance estimates reported by `--numCellBootstraps` command in alevin were not corrected for bias. It has been corrected to reported unbiased estimates by multiplying the variance matrix by `(n/n-1)`. * Fixed linking order issue that could, on rare custom compiles of salmon, cause memory to be allocated by TBB and freed by jemalloc (resulting in a segfault). Thanks to @mathog and davidtgoldblatt for helping to track down and resolve this one!. * Fixed an error (_regression_) that could cause an overhanging read in a read pair to be improperly not marked as a dovetail (when it is). This could result in assignment preference for transcripts where the dovetailing read overhangs the transcript start. * Fixed a bug that could occur in certain cases of between-mem alignment where too high of an alignment score could be attributed to a mapping. This could occur when there were _overlapping_ MEMs in the chain on the reference (a bit uncommon), and when the size of the overlap was different on the read and reference. This bug has been fixed by properly adjusting the score in all cases. * The dynamic and asynchronous update of the fragment length distribution could cause the fluctuations in fragment-level conditional probabilities _within the set of alignments for a given fragment_. For duplicate transcripts this could lead to an unexpected result where sequence-duplicate transcripts could be inferred to have unequal abundance. The current release addresses this behavior by employing a fragment length ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:2055,Deployability,release,release,2055,"to file (i.e. a decoy fragment can still multi-map). . * In the SAM file produced with the `--writeMappings` option, the header lines now include tags to designate each reference sequence as being a decoy or not. Sequence lines (`@SQ` lines) that correspond to valid targets contain the tag `DS:T`, while those corresponding to decoys contain the tag `DS:D`. **Note**: In alignment-based mode, salmon will not process SAM/BAM files with decoy entries (to avoid usage errors, since decoy alignment is not intended for quantification). So, if, for some reason you are using a salmon-generated SAM file containing decoy sequences and alignment records, you must remove them before quantifying using alignment-based mode (i.e. removing all headers with `DS:D` and all alignment records with`XT:A:D`). Details about how to perform that transformation can be found [here](https://github.com/COMBINE-lab/SalmonTools#salmon-in-alignment-mode-w-decoy-bam). * This release enables some considerable improvements to speed in the case of aligning poor quality reads. Specifically, this is enabled due to upstream changes in pufferfish implemented by @mohsenzakeri. Now, the aligner can exit early if it becomes clear at any point during alignment that a valid score cannot be obtained. This reduces the computation used to evaluate poor alignments that will not pass subsequent filtering (addresses #527 adn #537). * Homopolymer seeds are now skipped during mapping and alignment. In pathological datasets, this could cause unnecessarily slow mapping without any improvements to the actual mapping rate (i.e. it could generate many poor mappings that would fail alignment). This change can speed up mapping in such datasets (addresses #527 adn #537). * Three new filtering flags have been added to both improve sensitivity and speed. They determine how mappings are filtered at different stages. The previous behavior (that of salmon v1.0.0 — 1.2.1) can be obtained by setting `--preMergeChainSubThresh 1.0`, `--p",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:5461,Deployability,install,installed,5461,"and is ignored for single-end libraries.; * `--orphanChainSubThresh` : This threshold sets a global sub-optimality threshold for chains corresponding to orphan mappings. That is, if the merging procedure results in no concordant mappings then only orphan mappings with a chain score >= orphanChainSubThresh * bestChainScore will be retained and passed to subsequent mapping phases. This value must be in the range [0, 1]. Unlike the `--preMergeChainSubThresh` and `--postMergeChainSubThresh` options, this threshold is global with respect to _all_ orphan chains (not simply per-target). From that perspective, you can view it as overriding the value of `--consensusSlack` in the case of orphan mappings. **Note**: This option is only meaningful for paired-end libraries, and is ignored for single-end libraries.; ; * The default `--mismatchSeedSkip` was changed from 5 to 3. ; ; * Updated the required LibGFF dependency to v2.0.0. If you already have this installed on your system, you can pass the hint to the location to `cmake` using `-DLIB_GFF_PATH` or `-DGFF_ROOT`. ; ; * Add the ""CellRanger"" standard tags, `CB:Z` and `UR:Z` tags to the alignment records reported by _alevin_ if the user passes the `--writeMappings` flag when running alevin. * Moved from (deprecated) `tbb::atomic<double>` to `std::atomic<double>` throughout the codebase, including accounting for the lack of a `compare_and_swap` method on the latter. * Changed the default gap-open penalty to 6 (from 4). This makes any gap less preferred compared to a mismatch. **Note**: How to properly set the default scoring scheme, as well as how to set an ideal alignment quality threshold (i.e. what is the lowest quality alignment one should allow) is not a straightforward question. This change in default accords with our belief that gaps should be penalized more in typical data. However, the ideal settings for such parameters is certainly worthy of more in-depth study, and we are looking into both empirical and theoretical me",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:6968,Deployability,release,release,6968," 6 (from 4). This makes any gap less preferred compared to a mismatch. **Note**: How to properly set the default scoring scheme, as well as how to set an ideal alignment quality threshold (i.e. what is the lowest quality alignment one should allow) is not a straightforward question. This change in default accords with our belief that gaps should be penalized more in typical data. However, the ideal settings for such parameters is certainly worthy of more in-depth study, and we are looking into both empirical and theoretical mechanisms for determining how these parameters can be best determined. To obtain the old (pre 1.3.0) scoring scheme, simply pass `--go 4` on the command line. You can also experiment with even more stringent gap penalties by increasing `--go` for gap open (current default `6`) and `--ge` for gap extend (current default `2`). * Changed warning message color from yellow to magenta to make it readable on both light and dark background (address #541). * Emojis in release notes :smiley:. ### :bug: Bug fixes. * Improved selective-alignment speed in pathological case involving isolated homopolymer MEM chains. Thanks to [@red-plant](https://github.com/red-plant) for raising the issue (with reproducible data) in [527](https://github.com/COMBINE-lab/salmon/issues/527). * Custom barcode lengths for the `--citeseq` mode was disabled. It has been fixed in https://github.com/COMBINE-lab/salmon/issues/531 and `--citeseq` single-cell protocol can be used along with `--end --barcodeLength --umiLength` triplets. Thanks @rfarouni for reporting this. * The variance estimates reported by `--numCellBootstraps` command in alevin were not corrected for bias. It has been corrected to reported unbiased estimates by multiplying the variance matrix by `(n/n-1)`. * Fixed linking order issue that could, on rare custom compiles of salmon, cause memory to be allocated by TBB and freed by jemalloc (resulting in a segfault). Thanks to @mathog and davidtgoldblatt for helping to t",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:8683,Deployability,update,update,8683,"BINE-lab/salmon/issues/531 and `--citeseq` single-cell protocol can be used along with `--end --barcodeLength --umiLength` triplets. Thanks @rfarouni for reporting this. * The variance estimates reported by `--numCellBootstraps` command in alevin were not corrected for bias. It has been corrected to reported unbiased estimates by multiplying the variance matrix by `(n/n-1)`. * Fixed linking order issue that could, on rare custom compiles of salmon, cause memory to be allocated by TBB and freed by jemalloc (resulting in a segfault). Thanks to @mathog and davidtgoldblatt for helping to track down and resolve this one!. * Fixed an error (_regression_) that could cause an overhanging read in a read pair to be improperly not marked as a dovetail (when it is). This could result in assignment preference for transcripts where the dovetailing read overhangs the transcript start. * Fixed a bug that could occur in certain cases of between-mem alignment where too high of an alignment score could be attributed to a mapping. This could occur when there were _overlapping_ MEMs in the chain on the reference (a bit uncommon), and when the size of the overlap was different on the read and reference. This bug has been fixed by properly adjusting the score in all cases. * The dynamic and asynchronous update of the fragment length distribution could cause the fluctuations in fragment-level conditional probabilities _within the set of alignments for a given fragment_. For duplicate transcripts this could lead to an unexpected result where sequence-duplicate transcripts could be inferred to have unequal abundance. The current release addresses this behavior by employing a fragment length distribution cache to ensure there are no fluctuation in conditional fragment length probabilities among the set of alignments for a given fragment. *Note:* This behavior is expected only to have affected atypical salmon usage, as duplicate transcripts are collapsed / discarded by default during indexing.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:9012,Deployability,release,release,9012,"BINE-lab/salmon/issues/531 and `--citeseq` single-cell protocol can be used along with `--end --barcodeLength --umiLength` triplets. Thanks @rfarouni for reporting this. * The variance estimates reported by `--numCellBootstraps` command in alevin were not corrected for bias. It has been corrected to reported unbiased estimates by multiplying the variance matrix by `(n/n-1)`. * Fixed linking order issue that could, on rare custom compiles of salmon, cause memory to be allocated by TBB and freed by jemalloc (resulting in a segfault). Thanks to @mathog and davidtgoldblatt for helping to track down and resolve this one!. * Fixed an error (_regression_) that could cause an overhanging read in a read pair to be improperly not marked as a dovetail (when it is). This could result in assignment preference for transcripts where the dovetailing read overhangs the transcript start. * Fixed a bug that could occur in certain cases of between-mem alignment where too high of an alignment score could be attributed to a mapping. This could occur when there were _overlapping_ MEMs in the chain on the reference (a bit uncommon), and when the size of the overlap was different on the read and reference. This bug has been fixed by properly adjusting the score in all cases. * The dynamic and asynchronous update of the fragment length distribution could cause the fluctuations in fragment-level conditional probabilities _within the set of alignments for a given fragment_. For duplicate transcripts this could lead to an unexpected result where sequence-duplicate transcripts could be inferred to have unequal abundance. The current release addresses this behavior by employing a fragment length distribution cache to ensure there are no fluctuation in conditional fragment length probabilities among the set of alignments for a given fragment. *Note:* This behavior is expected only to have affected atypical salmon usage, as duplicate transcripts are collapsed / discarded by default during indexing.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:2379,Energy Efficiency,reduce,reduces,2379,"ntain the tag `DS:D`. **Note**: In alignment-based mode, salmon will not process SAM/BAM files with decoy entries (to avoid usage errors, since decoy alignment is not intended for quantification). So, if, for some reason you are using a salmon-generated SAM file containing decoy sequences and alignment records, you must remove them before quantifying using alignment-based mode (i.e. removing all headers with `DS:D` and all alignment records with`XT:A:D`). Details about how to perform that transformation can be found [here](https://github.com/COMBINE-lab/SalmonTools#salmon-in-alignment-mode-w-decoy-bam). * This release enables some considerable improvements to speed in the case of aligning poor quality reads. Specifically, this is enabled due to upstream changes in pufferfish implemented by @mohsenzakeri. Now, the aligner can exit early if it becomes clear at any point during alignment that a valid score cannot be obtained. This reduces the computation used to evaluate poor alignments that will not pass subsequent filtering (addresses #527 adn #537). * Homopolymer seeds are now skipped during mapping and alignment. In pathological datasets, this could cause unnecessarily slow mapping without any improvements to the actual mapping rate (i.e. it could generate many poor mappings that would fail alignment). This change can speed up mapping in such datasets (addresses #527 adn #537). * Three new filtering flags have been added to both improve sensitivity and speed. They determine how mappings are filtered at different stages. The previous behavior (that of salmon v1.0.0 — 1.2.1) can be obtained by setting `--preMergeChainSubThresh 1.0`, `--postMergeChainSubThresh x`, `--orphanChainSubThresh x` where x is (1.0 - `--consensusSlack`) — by default this corresponds to x = 0.65.; ; * `--perMergeChainSubThresh` : The threshold of sub-optimal chains, compared to the best chain on a given target, that will be retained and passed to the next phase of mapping. Specifically, if the b",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:7853,Energy Efficiency,allocate,allocated,7853,"ed warning message color from yellow to magenta to make it readable on both light and dark background (address #541). * Emojis in release notes :smiley:. ### :bug: Bug fixes. * Improved selective-alignment speed in pathological case involving isolated homopolymer MEM chains. Thanks to [@red-plant](https://github.com/red-plant) for raising the issue (with reproducible data) in [527](https://github.com/COMBINE-lab/salmon/issues/527). * Custom barcode lengths for the `--citeseq` mode was disabled. It has been fixed in https://github.com/COMBINE-lab/salmon/issues/531 and `--citeseq` single-cell protocol can be used along with `--end --barcodeLength --umiLength` triplets. Thanks @rfarouni for reporting this. * The variance estimates reported by `--numCellBootstraps` command in alevin were not corrected for bias. It has been corrected to reported unbiased estimates by multiplying the variance matrix by `(n/n-1)`. * Fixed linking order issue that could, on rare custom compiles of salmon, cause memory to be allocated by TBB and freed by jemalloc (resulting in a segfault). Thanks to @mathog and davidtgoldblatt for helping to track down and resolve this one!. * Fixed an error (_regression_) that could cause an overhanging read in a read pair to be improperly not marked as a dovetail (when it is). This could result in assignment preference for transcripts where the dovetailing read overhangs the transcript start. * Fixed a bug that could occur in certain cases of between-mem alignment where too high of an alignment score could be attributed to a mapping. This could occur when there were _overlapping_ MEMs in the chain on the reference (a bit uncommon), and when the size of the overlap was different on the read and reference. This bug has been fixed by properly adjusting the score in all cases. * The dynamic and asynchronous update of the fragment length distribution could cause the fluctuations in fragment-level conditional probabilities _within the set of alignments for a giv",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:5414,Integrability,depend,dependency,5414,"value for this parameter is 0.9. **Note**: This option is only meaningful for paired-end libraries, and is ignored for single-end libraries.; * `--orphanChainSubThresh` : This threshold sets a global sub-optimality threshold for chains corresponding to orphan mappings. That is, if the merging procedure results in no concordant mappings then only orphan mappings with a chain score >= orphanChainSubThresh * bestChainScore will be retained and passed to subsequent mapping phases. This value must be in the range [0, 1]. Unlike the `--preMergeChainSubThresh` and `--postMergeChainSubThresh` options, this threshold is global with respect to _all_ orphan chains (not simply per-target). From that perspective, you can view it as overriding the value of `--consensusSlack` in the case of orphan mappings. **Note**: This option is only meaningful for paired-end libraries, and is ignored for single-end libraries.; ; * The default `--mismatchSeedSkip` was changed from 5 to 3. ; ; * Updated the required LibGFF dependency to v2.0.0. If you already have this installed on your system, you can pass the hint to the location to `cmake` using `-DLIB_GFF_PATH` or `-DGFF_ROOT`. ; ; * Add the ""CellRanger"" standard tags, `CB:Z` and `UR:Z` tags to the alignment records reported by _alevin_ if the user passes the `--writeMappings` flag when running alevin. * Moved from (deprecated) `tbb::atomic<double>` to `std::atomic<double>` throughout the codebase, including accounting for the lack of a `compare_and_swap` method on the latter. * Changed the default gap-open penalty to 6 (from 4). This makes any gap less preferred compared to a mismatch. **Note**: How to properly set the default scoring scheme, as well as how to set an ideal alignment quality threshold (i.e. what is the lowest quality alignment one should allow) is not a straightforward question. This change in default accords with our belief that gaps should be penalized more in typical data. However, the ideal settings for such parameters i",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:6849,Integrability,message,message,6849,"compare_and_swap` method on the latter. * Changed the default gap-open penalty to 6 (from 4). This makes any gap less preferred compared to a mismatch. **Note**: How to properly set the default scoring scheme, as well as how to set an ideal alignment quality threshold (i.e. what is the lowest quality alignment one should allow) is not a straightforward question. This change in default accords with our belief that gaps should be penalized more in typical data. However, the ideal settings for such parameters is certainly worthy of more in-depth study, and we are looking into both empirical and theoretical mechanisms for determining how these parameters can be best determined. To obtain the old (pre 1.3.0) scoring scheme, simply pass `--go 4` on the command line. You can also experiment with even more stringent gap penalties by increasing `--go` for gap open (current default `6`) and `--ge` for gap extend (current default `2`). * Changed warning message color from yellow to magenta to make it readable on both light and dark background (address #541). * Emojis in release notes :smiley:. ### :bug: Bug fixes. * Improved selective-alignment speed in pathological case involving isolated homopolymer MEM chains. Thanks to [@red-plant](https://github.com/red-plant) for raising the issue (with reproducible data) in [527](https://github.com/COMBINE-lab/salmon/issues/527). * Custom barcode lengths for the `--citeseq` mode was disabled. It has been fixed in https://github.com/COMBINE-lab/salmon/issues/531 and `--citeseq` single-cell protocol can be used along with `--end --barcodeLength --umiLength` triplets. Thanks @rfarouni for reporting this. * The variance estimates reported by `--numCellBootstraps` command in alevin were not corrected for bias. It has been corrected to reported unbiased estimates by multiplying the variance matrix by `(n/n-1)`. * Fixed linking order issue that could, on rare custom compiles of salmon, cause memory to be allocated by TBB and freed by jemalloc (",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:7436,Integrability,protocol,protocol,7436,"udy, and we are looking into both empirical and theoretical mechanisms for determining how these parameters can be best determined. To obtain the old (pre 1.3.0) scoring scheme, simply pass `--go 4` on the command line. You can also experiment with even more stringent gap penalties by increasing `--go` for gap open (current default `6`) and `--ge` for gap extend (current default `2`). * Changed warning message color from yellow to magenta to make it readable on both light and dark background (address #541). * Emojis in release notes :smiley:. ### :bug: Bug fixes. * Improved selective-alignment speed in pathological case involving isolated homopolymer MEM chains. Thanks to [@red-plant](https://github.com/red-plant) for raising the issue (with reproducible data) in [527](https://github.com/COMBINE-lab/salmon/issues/527). * Custom barcode lengths for the `--citeseq` mode was disabled. It has been fixed in https://github.com/COMBINE-lab/salmon/issues/531 and `--citeseq` single-cell protocol can be used along with `--end --barcodeLength --umiLength` triplets. Thanks @rfarouni for reporting this. * The variance estimates reported by `--numCellBootstraps` command in alevin were not corrected for bias. It has been corrected to reported unbiased estimates by multiplying the variance matrix by `(n/n-1)`. * Fixed linking order issue that could, on rare custom compiles of salmon, cause memory to be allocated by TBB and freed by jemalloc (resulting in a segfault). Thanks to @mathog and davidtgoldblatt for helping to track down and resolve this one!. * Fixed an error (_regression_) that could cause an overhanging read in a read pair to be improperly not marked as a dovetail (when it is). This could result in assignment preference for transcripts where the dovetailing read overhangs the transcript start. * Fixed a bug that could occur in certain cases of between-mem alignment where too high of an alignment score could be attributed to a mapping. This could occur when there were _ov",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:6801,Modifiability,extend,extend,6801,"alevin. * Moved from (deprecated) `tbb::atomic<double>` to `std::atomic<double>` throughout the codebase, including accounting for the lack of a `compare_and_swap` method on the latter. * Changed the default gap-open penalty to 6 (from 4). This makes any gap less preferred compared to a mismatch. **Note**: How to properly set the default scoring scheme, as well as how to set an ideal alignment quality threshold (i.e. what is the lowest quality alignment one should allow) is not a straightforward question. This change in default accords with our belief that gaps should be penalized more in typical data. However, the ideal settings for such parameters is certainly worthy of more in-depth study, and we are looking into both empirical and theoretical mechanisms for determining how these parameters can be best determined. To obtain the old (pre 1.3.0) scoring scheme, simply pass `--go 4` on the command line. You can also experiment with even more stringent gap penalties by increasing `--go` for gap open (current default `6`) and `--ge` for gap extend (current default `2`). * Changed warning message color from yellow to magenta to make it readable on both light and dark background (address #541). * Emojis in release notes :smiley:. ### :bug: Bug fixes. * Improved selective-alignment speed in pathological case involving isolated homopolymer MEM chains. Thanks to [@red-plant](https://github.com/red-plant) for raising the issue (with reproducible data) in [527](https://github.com/COMBINE-lab/salmon/issues/527). * Custom barcode lengths for the `--citeseq` mode was disabled. It has been fixed in https://github.com/COMBINE-lab/salmon/issues/531 and `--citeseq` single-cell protocol can be used along with `--end --barcodeLength --umiLength` triplets. Thanks @rfarouni for reporting this. * The variance estimates reported by `--numCellBootstraps` command in alevin were not corrected for bias. It has been corrected to reported unbiased estimates by multiplying the variance matrix b",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:1918,Performance,perform,perform,1918,", they will not appear in the output SAM file.; 3) If decoy alignments are written (condition 1 is satisfied), then all equally-best decoy alignments are written to file (i.e. a decoy fragment can still multi-map). . * In the SAM file produced with the `--writeMappings` option, the header lines now include tags to designate each reference sequence as being a decoy or not. Sequence lines (`@SQ` lines) that correspond to valid targets contain the tag `DS:T`, while those corresponding to decoys contain the tag `DS:D`. **Note**: In alignment-based mode, salmon will not process SAM/BAM files with decoy entries (to avoid usage errors, since decoy alignment is not intended for quantification). So, if, for some reason you are using a salmon-generated SAM file containing decoy sequences and alignment records, you must remove them before quantifying using alignment-based mode (i.e. removing all headers with `DS:D` and all alignment records with`XT:A:D`). Details about how to perform that transformation can be found [here](https://github.com/COMBINE-lab/SalmonTools#salmon-in-alignment-mode-w-decoy-bam). * This release enables some considerable improvements to speed in the case of aligning poor quality reads. Specifically, this is enabled due to upstream changes in pufferfish implemented by @mohsenzakeri. Now, the aligner can exit early if it becomes clear at any point during alignment that a valid score cannot be obtained. This reduces the computation used to evaluate poor alignments that will not pass subsequent filtering (addresses #527 adn #537). * Homopolymer seeds are now skipped during mapping and alignment. In pathological datasets, this could cause unnecessarily slow mapping without any improvements to the actual mapping rate (i.e. it could generate many poor mappings that would fail alignment). This change can speed up mapping in such datasets (addresses #527 adn #537). * Three new filtering flags have been added to both improve sensitivity and speed. They determine ho",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:9088,Performance,cache,cache,9088,"BINE-lab/salmon/issues/531 and `--citeseq` single-cell protocol can be used along with `--end --barcodeLength --umiLength` triplets. Thanks @rfarouni for reporting this. * The variance estimates reported by `--numCellBootstraps` command in alevin were not corrected for bias. It has been corrected to reported unbiased estimates by multiplying the variance matrix by `(n/n-1)`. * Fixed linking order issue that could, on rare custom compiles of salmon, cause memory to be allocated by TBB and freed by jemalloc (resulting in a segfault). Thanks to @mathog and davidtgoldblatt for helping to track down and resolve this one!. * Fixed an error (_regression_) that could cause an overhanging read in a read pair to be improperly not marked as a dovetail (when it is). This could result in assignment preference for transcripts where the dovetailing read overhangs the transcript start. * Fixed a bug that could occur in certain cases of between-mem alignment where too high of an alignment score could be attributed to a mapping. This could occur when there were _overlapping_ MEMs in the chain on the reference (a bit uncommon), and when the size of the overlap was different on the read and reference. This bug has been fixed by properly adjusting the score in all cases. * The dynamic and asynchronous update of the fragment length distribution could cause the fluctuations in fragment-level conditional probabilities _within the set of alignments for a given fragment_. For duplicate transcripts this could lead to an unexpected result where sequence-duplicate transcripts could be inferred to have unequal abundance. The current release addresses this behavior by employing a fragment length distribution cache to ensure there are no fluctuation in conditional fragment length probabilities among the set of alignments for a given fragment. *Note:* This behavior is expected only to have affected atypical salmon usage, as duplicate transcripts are collapsed / discarded by default during indexing.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:1555,Safety,avoid,avoid,1555,"for a decoy mapping to be written to the file are as follows:; ; 1) There is no valid mapping to a non-decoy target. That is, all mappings to valid (non-decoy) targets must have alignment score < `decoyThreshold` * bestDecoyScore.; 2) Only best-scoring decoy alignments are written to file. Thus, if there are sub-optimal decoy alignments that are still better than alignments to valid targets, they will not appear in the output SAM file.; 3) If decoy alignments are written (condition 1 is satisfied), then all equally-best decoy alignments are written to file (i.e. a decoy fragment can still multi-map). . * In the SAM file produced with the `--writeMappings` option, the header lines now include tags to designate each reference sequence as being a decoy or not. Sequence lines (`@SQ` lines) that correspond to valid targets contain the tag `DS:T`, while those corresponding to decoys contain the tag `DS:D`. **Note**: In alignment-based mode, salmon will not process SAM/BAM files with decoy entries (to avoid usage errors, since decoy alignment is not intended for quantification). So, if, for some reason you are using a salmon-generated SAM file containing decoy sequences and alignment records, you must remove them before quantifying using alignment-based mode (i.e. removing all headers with `DS:D` and all alignment records with`XT:A:D`). Details about how to perform that transformation can be found [here](https://github.com/COMBINE-lab/SalmonTools#salmon-in-alignment-mode-w-decoy-bam). * This release enables some considerable improvements to speed in the case of aligning poor quality reads. Specifically, this is enabled due to upstream changes in pufferfish implemented by @mohsenzakeri. Now, the aligner can exit early if it becomes clear at any point during alignment that a valid score cannot be obtained. This reduces the computation used to evaluate poor alignments that will not pass subsequent filtering (addresses #527 adn #537). * Homopolymer seeds are now skipped during ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:2299,Usability,clear,clear,2299," Sequence lines (`@SQ` lines) that correspond to valid targets contain the tag `DS:T`, while those corresponding to decoys contain the tag `DS:D`. **Note**: In alignment-based mode, salmon will not process SAM/BAM files with decoy entries (to avoid usage errors, since decoy alignment is not intended for quantification). So, if, for some reason you are using a salmon-generated SAM file containing decoy sequences and alignment records, you must remove them before quantifying using alignment-based mode (i.e. removing all headers with `DS:D` and all alignment records with`XT:A:D`). Details about how to perform that transformation can be found [here](https://github.com/COMBINE-lab/SalmonTools#salmon-in-alignment-mode-w-decoy-bam). * This release enables some considerable improvements to speed in the case of aligning poor quality reads. Specifically, this is enabled due to upstream changes in pufferfish implemented by @mohsenzakeri. Now, the aligner can exit early if it becomes clear at any point during alignment that a valid score cannot be obtained. This reduces the computation used to evaluate poor alignments that will not pass subsequent filtering (addresses #527 adn #537). * Homopolymer seeds are now skipped during mapping and alignment. In pathological datasets, this could cause unnecessarily slow mapping without any improvements to the actual mapping rate (i.e. it could generate many poor mappings that would fail alignment). This change can speed up mapping in such datasets (addresses #527 adn #537). * Three new filtering flags have been added to both improve sensitivity and speed. They determine how mappings are filtered at different stages. The previous behavior (that of salmon v1.0.0 — 1.2.1) can be obtained by setting `--preMergeChainSubThresh 1.0`, `--postMergeChainSubThresh x`, `--orphanChainSubThresh x` where x is (1.0 - `--consensusSlack`) — by default this corresponds to x = 0.65.; ; * `--perMergeChainSubThresh` : The threshold of sub-optimal chains, compar",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:5072,Usability,simpl,simply,5072,"e this is applied to pairs of chains (from the ends of paired-end reads) after merging (i.e. after checking concordancy constraints etc.). Specifically, if the best chain pair to target t has score X_t, then all chain pairs for this read pair with score >= X_t * postMergeChainSubThresh will be retained and passed to subsequent mapping phases. This value must be in the range [0, 1]. The default value for this parameter is 0.9. **Note**: This option is only meaningful for paired-end libraries, and is ignored for single-end libraries.; * `--orphanChainSubThresh` : This threshold sets a global sub-optimality threshold for chains corresponding to orphan mappings. That is, if the merging procedure results in no concordant mappings then only orphan mappings with a chain score >= orphanChainSubThresh * bestChainScore will be retained and passed to subsequent mapping phases. This value must be in the range [0, 1]. Unlike the `--preMergeChainSubThresh` and `--postMergeChainSubThresh` options, this threshold is global with respect to _all_ orphan chains (not simply per-target). From that perspective, you can view it as overriding the value of `--consensusSlack` in the case of orphan mappings. **Note**: This option is only meaningful for paired-end libraries, and is ignored for single-end libraries.; ; * The default `--mismatchSeedSkip` was changed from 5 to 3. ; ; * Updated the required LibGFF dependency to v2.0.0. If you already have this installed on your system, you can pass the hint to the location to `cmake` using `-DLIB_GFF_PATH` or `-DGFF_ROOT`. ; ; * Add the ""CellRanger"" standard tags, `CB:Z` and `UR:Z` tags to the alignment records reported by _alevin_ if the user passes the `--writeMappings` flag when running alevin. * Moved from (deprecated) `tbb::atomic<double>` to `std::atomic<double>` throughout the codebase, including accounting for the lack of a `compare_and_swap` method on the latter. * Changed the default gap-open penalty to 6 (from 4). This makes any gap less",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0:6621,Usability,simpl,simply,6621,":Z` tags to the alignment records reported by _alevin_ if the user passes the `--writeMappings` flag when running alevin. * Moved from (deprecated) `tbb::atomic<double>` to `std::atomic<double>` throughout the codebase, including accounting for the lack of a `compare_and_swap` method on the latter. * Changed the default gap-open penalty to 6 (from 4). This makes any gap less preferred compared to a mismatch. **Note**: How to properly set the default scoring scheme, as well as how to set an ideal alignment quality threshold (i.e. what is the lowest quality alignment one should allow) is not a straightforward question. This change in default accords with our belief that gaps should be penalized more in typical data. However, the ideal settings for such parameters is certainly worthy of more in-depth study, and we are looking into both empirical and theoretical mechanisms for determining how these parameters can be best determined. To obtain the old (pre 1.3.0) scoring scheme, simply pass `--go 4` on the command line. You can also experiment with even more stringent gap penalties by increasing `--go` for gap open (current default `6`) and `--ge` for gap extend (current default `2`). * Changed warning message color from yellow to magenta to make it readable on both light and dark background (address #541). * Emojis in release notes :smiley:. ### :bug: Bug fixes. * Improved selective-alignment speed in pathological case involving isolated homopolymer MEM chains. Thanks to [@red-plant](https://github.com/red-plant) for raising the issue (with reproducible data) in [527](https://github.com/COMBINE-lab/salmon/issues/527). * Custom barcode lengths for the `--citeseq` mode was disabled. It has been fixed in https://github.com/COMBINE-lab/salmon/issues/531 and `--citeseq` single-cell protocol can be used along with `--end --barcodeLength --umiLength` triplets. Thanks @rfarouni for reporting this. * The variance estimates reported by `--numCellBootstraps` command in alevin were",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.3.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:809,Availability,error,error,809,"This is a minor release, but it nonetheless adds a few important features and fixes an outstanding bug. This release incorporates all of the improvements and additions of 1.2.0, which are significant and which are covered in detail [here](https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0). ## New features:. * salmon learned a new command line option `--mismatchSeedSkip`. This option can be used to tune seeding sensitivity for selective-alignment . The default value is 5, and should work well in most cases, but this can be tuned if the user wants. After a k-mer hit is extended to a uni-MEM, the uni-MEM extension can terminate for one of 3 reasons; the end of the read, the end of the unitig, or a mismatch. If the extension ends because of a mismatch, this is likely the result of a sequencing error. To avoid looking up many k-mers that will likely fail to be located in the index, the search procedure skips by a factor of mismatchSeedSkip until it either (1) finds another match or (2) is k-bases past the mismatch position. This value controls that skip length. A smaller value can increase sensitivity, while a larger value can speed up seeding. * salmon learned about the environment variable `SALMON_NO_VERSION_CHECK`. If this environment variable is set (to either `1` or `TRUE`) then salmon will skip checking for an updated version, regardless of whether or not it is passed the `--no-version-check` flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the d",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:16,Deployability,release,release,16,"This is a minor release, but it nonetheless adds a few important features and fixes an outstanding bug. This release incorporates all of the improvements and additions of 1.2.0, which are significant and which are covered in detail [here](https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0). ## New features:. * salmon learned a new command line option `--mismatchSeedSkip`. This option can be used to tune seeding sensitivity for selective-alignment . The default value is 5, and should work well in most cases, but this can be tuned if the user wants. After a k-mer hit is extended to a uni-MEM, the uni-MEM extension can terminate for one of 3 reasons; the end of the read, the end of the unitig, or a mismatch. If the extension ends because of a mismatch, this is likely the result of a sequencing error. To avoid looking up many k-mers that will likely fail to be located in the index, the search procedure skips by a factor of mismatchSeedSkip until it either (1) finds another match or (2) is k-bases past the mismatch position. This value controls that skip length. A smaller value can increase sensitivity, while a larger value can speed up seeding. * salmon learned about the environment variable `SALMON_NO_VERSION_CHECK`. If this environment variable is set (to either `1` or `TRUE`) then salmon will skip checking for an updated version, regardless of whether or not it is passed the `--no-version-check` flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the d",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:109,Deployability,release,release,109,"This is a minor release, but it nonetheless adds a few important features and fixes an outstanding bug. This release incorporates all of the improvements and additions of 1.2.0, which are significant and which are covered in detail [here](https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0). ## New features:. * salmon learned a new command line option `--mismatchSeedSkip`. This option can be used to tune seeding sensitivity for selective-alignment . The default value is 5, and should work well in most cases, but this can be tuned if the user wants. After a k-mer hit is extended to a uni-MEM, the uni-MEM extension can terminate for one of 3 reasons; the end of the read, the end of the unitig, or a mismatch. If the extension ends because of a mismatch, this is likely the result of a sequencing error. To avoid looking up many k-mers that will likely fail to be located in the index, the search procedure skips by a factor of mismatchSeedSkip until it either (1) finds another match or (2) is k-bases past the mismatch position. This value controls that skip length. A smaller value can increase sensitivity, while a larger value can speed up seeding. * salmon learned about the environment variable `SALMON_NO_VERSION_CHECK`. If this environment variable is set (to either `1` or `TRUE`) then salmon will skip checking for an updated version, regardless of whether or not it is passed the `--no-version-check` flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the d",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:277,Deployability,release,releases,277,"This is a minor release, but it nonetheless adds a few important features and fixes an outstanding bug. This release incorporates all of the improvements and additions of 1.2.0, which are significant and which are covered in detail [here](https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0). ## New features:. * salmon learned a new command line option `--mismatchSeedSkip`. This option can be used to tune seeding sensitivity for selective-alignment . The default value is 5, and should work well in most cases, but this can be tuned if the user wants. After a k-mer hit is extended to a uni-MEM, the uni-MEM extension can terminate for one of 3 reasons; the end of the read, the end of the unitig, or a mismatch. If the extension ends because of a mismatch, this is likely the result of a sequencing error. To avoid looking up many k-mers that will likely fail to be located in the index, the search procedure skips by a factor of mismatchSeedSkip until it either (1) finds another match or (2) is k-bases past the mismatch position. This value controls that skip length. A smaller value can increase sensitivity, while a larger value can speed up seeding. * salmon learned about the environment variable `SALMON_NO_VERSION_CHECK`. If this environment variable is set (to either `1` or `TRUE`) then salmon will skip checking for an updated version, regardless of whether or not it is passed the `--no-version-check` flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the d",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:1341,Deployability,update,updated,1341,"nd line option `--mismatchSeedSkip`. This option can be used to tune seeding sensitivity for selective-alignment . The default value is 5, and should work well in most cases, but this can be tuned if the user wants. After a k-mer hit is extended to a uni-MEM, the uni-MEM extension can terminate for one of 3 reasons; the end of the read, the end of the unitig, or a mismatch. If the extension ends because of a mismatch, this is likely the result of a sequencing error. To avoid looking up many k-mers that will likely fail to be located in the index, the search procedure skips by a factor of mismatchSeedSkip until it either (1) finds another match or (2) is k-bases past the mismatch position. This value controls that skip length. A smaller value can increase sensitivity, while a larger value can speed up seeding. * salmon learned about the environment variable `SALMON_NO_VERSION_CHECK`. If this environment variable is set (to either `1` or `TRUE`) then salmon will skip checking for an updated version, regardless of whether or not it is passed the `--no-version-check` flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the duplicate decoys were removed. Since indexing duplicate sequences does not make any sense, we have decided that duplicate decoy sequences will _always_ be discarded (regardless of the status of the `--keepDuplicates` flag). This lifts the burden on the user of having to ensure that the decoy sequences are free of duplicates. The behavior can n",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:582,Modifiability,extend,extended,582,"This is a minor release, but it nonetheless adds a few important features and fixes an outstanding bug. This release incorporates all of the improvements and additions of 1.2.0, which are significant and which are covered in detail [here](https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0). ## New features:. * salmon learned a new command line option `--mismatchSeedSkip`. This option can be used to tune seeding sensitivity for selective-alignment . The default value is 5, and should work well in most cases, but this can be tuned if the user wants. After a k-mer hit is extended to a uni-MEM, the uni-MEM extension can terminate for one of 3 reasons; the end of the read, the end of the unitig, or a mismatch. If the extension ends because of a mismatch, this is likely the result of a sequencing error. To avoid looking up many k-mers that will likely fail to be located in the index, the search procedure skips by a factor of mismatchSeedSkip until it either (1) finds another match or (2) is k-bases past the mismatch position. This value controls that skip length. A smaller value can increase sensitivity, while a larger value can speed up seeding. * salmon learned about the environment variable `SALMON_NO_VERSION_CHECK`. If this environment variable is set (to either `1` or `TRUE`) then salmon will skip checking for an updated version, regardless of whether or not it is passed the `--no-version-check` flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the d",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:1205,Modifiability,variab,variable,1205,"d which are covered in detail [here](https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0). ## New features:. * salmon learned a new command line option `--mismatchSeedSkip`. This option can be used to tune seeding sensitivity for selective-alignment . The default value is 5, and should work well in most cases, but this can be tuned if the user wants. After a k-mer hit is extended to a uni-MEM, the uni-MEM extension can terminate for one of 3 reasons; the end of the read, the end of the unitig, or a mismatch. If the extension ends because of a mismatch, this is likely the result of a sequencing error. To avoid looking up many k-mers that will likely fail to be located in the index, the search procedure skips by a factor of mismatchSeedSkip until it either (1) finds another match or (2) is k-bases past the mismatch position. This value controls that skip length. A smaller value can increase sensitivity, while a larger value can speed up seeding. * salmon learned about the environment variable `SALMON_NO_VERSION_CHECK`. If this environment variable is set (to either `1` or `TRUE`) then salmon will skip checking for an updated version, regardless of whether or not it is passed the `--no-version-check` flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the duplicate decoys were removed. Since indexing duplicate sequences does not make any sense, we have decided that duplicate decoy sequences will _always_ be discarded (regardless of the status of the `--ke",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:1261,Modifiability,variab,variable,1261,"nd line option `--mismatchSeedSkip`. This option can be used to tune seeding sensitivity for selective-alignment . The default value is 5, and should work well in most cases, but this can be tuned if the user wants. After a k-mer hit is extended to a uni-MEM, the uni-MEM extension can terminate for one of 3 reasons; the end of the read, the end of the unitig, or a mismatch. If the extension ends because of a mismatch, this is likely the result of a sequencing error. To avoid looking up many k-mers that will likely fail to be located in the index, the search procedure skips by a factor of mismatchSeedSkip until it either (1) finds another match or (2) is k-bases past the mismatch position. This value controls that skip length. A smaller value can increase sensitivity, while a larger value can speed up seeding. * salmon learned about the environment variable `SALMON_NO_VERSION_CHECK`. If this environment variable is set (to either `1` or `TRUE`) then salmon will skip checking for an updated version, regardless of whether or not it is passed the `--no-version-check` flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the duplicate decoys were removed. Since indexing duplicate sequences does not make any sense, we have decided that duplicate decoy sequences will _always_ be discarded (regardless of the status of the `--keepDuplicates` flag). This lifts the burden on the user of having to ensure that the decoy sequences are free of duplicates. The behavior can n",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:1498,Modifiability,variab,variable,1498,"t this can be tuned if the user wants. After a k-mer hit is extended to a uni-MEM, the uni-MEM extension can terminate for one of 3 reasons; the end of the read, the end of the unitig, or a mismatch. If the extension ends because of a mismatch, this is likely the result of a sequencing error. To avoid looking up many k-mers that will likely fail to be located in the index, the search procedure skips by a factor of mismatchSeedSkip until it either (1) finds another match or (2) is k-bases past the mismatch position. This value controls that skip length. A smaller value can increase sensitivity, while a larger value can speed up seeding. * salmon learned about the environment variable `SALMON_NO_VERSION_CHECK`. If this environment variable is set (to either `1` or `TRUE`) then salmon will skip checking for an updated version, regardless of whether or not it is passed the `--no-version-check` flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the duplicate decoys were removed. Since indexing duplicate sequences does not make any sense, we have decided that duplicate decoy sequences will _always_ be discarded (regardless of the status of the `--keepDuplicates` flag). This lifts the burden on the user of having to ensure that the decoy sequences are free of duplicates. The behavior can now be described as: ""If a decoy sequence is a duplicate of any previously-observed sequence, it is discarded, regardless of the status of the --keepDuplicates flag."" This applie",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:3382,Modifiability,variab,variable,3382,"flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the duplicate decoys were removed. Since indexing duplicate sequences does not make any sense, we have decided that duplicate decoy sequences will _always_ be discarded (regardless of the status of the `--keepDuplicates` flag). This lifts the burden on the user of having to ensure that the decoy sequences are free of duplicates. The behavior can now be described as: ""If a decoy sequence is a duplicate of any previously-observed sequence, it is discarded, regardless of the status of the --keepDuplicates flag."" This applies equally well if the decoy is a duplicate of a previously-observed decoy or if it is a duplicate of a _non-decoy_ target sequence. Essentially, any decoy sequence that is a duplicate of a previously-observed sequence (decoy or not) will be discarded. The number of observed duplicate decoys (if > 0) will be reported to the log. Thanks to @tamuanand for raising the issue that led to this improvement. * During the build process, salmon (and pufferfish) now check directly if `std::numeric_limits<_int128>` is defined or not, and set the pre-processor flags accordingly. This should address an issue that was reported building under clang on OSX 10.15 (seemingly, earlier versions of the compiler turned on vendor-specific extensions under the `-std=c++14` flag, while the newer version does not). ## Bug fixes:. * Addressed / fixed a possibly un-initialized variable (`sopt.noSA`) in argument parsing.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:409,Performance,tune,tune,409,"This is a minor release, but it nonetheless adds a few important features and fixes an outstanding bug. This release incorporates all of the improvements and additions of 1.2.0, which are significant and which are covered in detail [here](https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0). ## New features:. * salmon learned a new command line option `--mismatchSeedSkip`. This option can be used to tune seeding sensitivity for selective-alignment . The default value is 5, and should work well in most cases, but this can be tuned if the user wants. After a k-mer hit is extended to a uni-MEM, the uni-MEM extension can terminate for one of 3 reasons; the end of the read, the end of the unitig, or a mismatch. If the extension ends because of a mismatch, this is likely the result of a sequencing error. To avoid looking up many k-mers that will likely fail to be located in the index, the search procedure skips by a factor of mismatchSeedSkip until it either (1) finds another match or (2) is k-bases past the mismatch position. This value controls that skip length. A smaller value can increase sensitivity, while a larger value can speed up seeding. * salmon learned about the environment variable `SALMON_NO_VERSION_CHECK`. If this environment variable is set (to either `1` or `TRUE`) then salmon will skip checking for an updated version, regardless of whether or not it is passed the `--no-version-check` flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the d",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:536,Performance,tune,tuned,536,"This is a minor release, but it nonetheless adds a few important features and fixes an outstanding bug. This release incorporates all of the improvements and additions of 1.2.0, which are significant and which are covered in detail [here](https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0). ## New features:. * salmon learned a new command line option `--mismatchSeedSkip`. This option can be used to tune seeding sensitivity for selective-alignment . The default value is 5, and should work well in most cases, but this can be tuned if the user wants. After a k-mer hit is extended to a uni-MEM, the uni-MEM extension can terminate for one of 3 reasons; the end of the read, the end of the unitig, or a mismatch. If the extension ends because of a mismatch, this is likely the result of a sequencing error. To avoid looking up many k-mers that will likely fail to be located in the index, the search procedure skips by a factor of mismatchSeedSkip until it either (1) finds another match or (2) is k-bases past the mismatch position. This value controls that skip length. A smaller value can increase sensitivity, while a larger value can speed up seeding. * salmon learned about the environment variable `SALMON_NO_VERSION_CHECK`. If this environment variable is set (to either `1` or `TRUE`) then salmon will skip checking for an updated version, regardless of whether or not it is passed the `--no-version-check` flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the d",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:819,Safety,avoid,avoid,819,"This is a minor release, but it nonetheless adds a few important features and fixes an outstanding bug. This release incorporates all of the improvements and additions of 1.2.0, which are significant and which are covered in detail [here](https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0). ## New features:. * salmon learned a new command line option `--mismatchSeedSkip`. This option can be used to tune seeding sensitivity for selective-alignment . The default value is 5, and should work well in most cases, but this can be tuned if the user wants. After a k-mer hit is extended to a uni-MEM, the uni-MEM extension can terminate for one of 3 reasons; the end of the read, the end of the unitig, or a mismatch. If the extension ends because of a mismatch, this is likely the result of a sequencing error. To avoid looking up many k-mers that will likely fail to be located in the index, the search procedure skips by a factor of mismatchSeedSkip until it either (1) finds another match or (2) is k-bases past the mismatch position. This value controls that skip length. A smaller value can increase sensitivity, while a larger value can speed up seeding. * salmon learned about the environment variable `SALMON_NO_VERSION_CHECK`. If this environment variable is set (to either `1` or `TRUE`) then salmon will skip checking for an updated version, regardless of whether or not it is passed the `--no-version-check` flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the d",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:2847,Testability,log,log,2847,"flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the duplicate decoys were removed. Since indexing duplicate sequences does not make any sense, we have decided that duplicate decoy sequences will _always_ be discarded (regardless of the status of the `--keepDuplicates` flag). This lifts the burden on the user of having to ensure that the decoy sequences are free of duplicates. The behavior can now be described as: ""If a decoy sequence is a duplicate of any previously-observed sequence, it is discarded, regardless of the status of the --keepDuplicates flag."" This applies equally well if the decoy is a duplicate of a previously-observed decoy or if it is a duplicate of a _non-decoy_ target sequence. Essentially, any decoy sequence that is a duplicate of a previously-observed sequence (decoy or not) will be discarded. The number of observed duplicate decoys (if > 0) will be reported to the log. Thanks to @tamuanand for raising the issue that led to this improvement. * During the build process, salmon (and pufferfish) now check directly if `std::numeric_limits<_int128>` is defined or not, and set the pre-processor flags accordingly. This should address an issue that was reported building under clang on OSX 10.15 (seemingly, earlier versions of the compiler turned on vendor-specific extensions under the `-std=c++14` flag, while the newer version does not). ## Bug fixes:. * Addressed / fixed a possibly un-initialized variable (`sopt.noSA`) in argument parsing.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:326,Usability,learn,learned,326,"This is a minor release, but it nonetheless adds a few important features and fixes an outstanding bug. This release incorporates all of the improvements and additions of 1.2.0, which are significant and which are covered in detail [here](https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0). ## New features:. * salmon learned a new command line option `--mismatchSeedSkip`. This option can be used to tune seeding sensitivity for selective-alignment . The default value is 5, and should work well in most cases, but this can be tuned if the user wants. After a k-mer hit is extended to a uni-MEM, the uni-MEM extension can terminate for one of 3 reasons; the end of the read, the end of the unitig, or a mismatch. If the extension ends because of a mismatch, this is likely the result of a sequencing error. To avoid looking up many k-mers that will likely fail to be located in the index, the search procedure skips by a factor of mismatchSeedSkip until it either (1) finds another match or (2) is k-bases past the mismatch position. This value controls that skip length. A smaller value can increase sensitivity, while a larger value can speed up seeding. * salmon learned about the environment variable `SALMON_NO_VERSION_CHECK`. If this environment variable is set (to either `1` or `TRUE`) then salmon will skip checking for an updated version, regardless of whether or not it is passed the `--no-version-check` flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the d",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1:1175,Usability,learn,learned,1175,"d which are covered in detail [here](https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0). ## New features:. * salmon learned a new command line option `--mismatchSeedSkip`. This option can be used to tune seeding sensitivity for selective-alignment . The default value is 5, and should work well in most cases, but this can be tuned if the user wants. After a k-mer hit is extended to a uni-MEM, the uni-MEM extension can terminate for one of 3 reasons; the end of the read, the end of the unitig, or a mismatch. If the extension ends because of a mismatch, this is likely the result of a sequencing error. To avoid looking up many k-mers that will likely fail to be located in the index, the search procedure skips by a factor of mismatchSeedSkip until it either (1) finds another match or (2) is k-bases past the mismatch position. This value controls that skip length. A smaller value can increase sensitivity, while a larger value can speed up seeding. * salmon learned about the environment variable `SALMON_NO_VERSION_CHECK`. If this environment variable is set (to either `1` or `TRUE`) then salmon will skip checking for an updated version, regardless of whether or not it is passed the `--no-version-check` flag on the command line. This makes it easy to e.g. set the environment variable to control this behavior for instances running on a cluster. This addresses [issue 486](https://github.com/COMBINE-lab/salmon/issues/486), and we thank @cihanerkut for the suggestion. ## Improvements:. * This is a change in default behavior: As raised in [issue 505](https://github.com/COMBINE-lab/salmon/issues/505), salmon would not index sequence with _duplicate_ decoy entries, unless the `--keepDuplicates` flag was passed. Instead, salmon would refuse to index these sequences until the duplicate decoys were removed. Since indexing duplicate sequences does not make any sense, we have decided that duplicate decoy sequences will _always_ be discarded (regardless of the status of the `--ke",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.1
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:9913,Availability,down,down,9913,"hilampoon for raising this issue. * Fixed an issue where the computed alignment score could be wrong (too high) when there were MEMs in the highest-scoring chain that overlapped in the query and the reference by different amounts. This was relatively infrequent, but has now been fixed. Thanks to @cdarby for reporting the issue and providing a test case to fix it!. * Fixed an issue where, in rare situations, usage of the alignment cache could cause non-determinism the the score for certain alignments, which could result in small fluctuations in the number of assigned fragments. The fix involves both addressing a bug in ksw2 where an incorrect alignment score for global alignment could be returned in certain rare situations depending on how the bandwidth parameter is set, and also by being more stringent in what alignments are inserted into the alignment cache and which mappings are searched for in the alignment cache. Many thanks to @csoneson for raising this issue and finding a dataset containing enough of the corner cases to track down and fix the issue. Thanks to @mohsenzakeri for isolating the underlying cases and figuring out how to fix them. . ### alevin; * The big feature hash generated when `--dumpBfh` is set, creates a reverse UMI sequences than those present originally. This was a legacy bug, introduced when shifting from jellyfish based 2-bit encoding to the `AlevinKmer` class based 2-bit encoding. This has been fixed in the this release. * Fixed an issue where the `--writeUnmappedNames` did not work properly with _alevin_. This addresses [issue 501](https://github.com/COMBINE-lab/salmon/issues/501). ## Other notes. * As raised in [issue 500](https://github.com/COMBINE-lab/salmon/issues/500), the salmon executable, since v1.0.0, assumes the [SSE4 instruction set](https://en.wikipedia.org/wiki/SSE4). While this feature has been standard on processors for a long time, some older hardware may not have this feature set. This compile flag was removed from the pu",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:1277,Deployability,release,release,1277,"BG) addressing the issue [here](https://github.com/medvedevgroup/TwoPaCo/issues/23). This means that for larger references or references with many ""contigs"" (transcripts), the intermediate disk space requrements are reduced by **up to 2 orders of magnitude**!. * Reduction in the memory required for indexing, especially when indexing with a small value of `k`. This improvement comes from (1) fixing a bug that was resulting in an unnecessarily-large allocation when ""pufferizing"" the output of TwoPaCo and (2) improving the storage of some intermediate data structures used during index construction. These improvements should help reduce the burden of constructing a decoy-aware index with small values of `k`. The issue of reducing the number of intermediate files created (which can hurt performance on NFS-mounted drives) is being worked on upstream, but is not yet resolved. . ### alevin. * This release introduces support for the quantification of CITE-seq / feature barcoding based single-cell protocols! A full, end-to-end tutorial is soon-to-follow on the [alevin-tutorial](https://combine-lab.github.io/alevin-tutorial/) website. ### New flags and options:; ----. * Salmon learned a new option (currently Beta) `--softclip` : This flag allows soft-clipping at the beginning and end of reads when they are scored with selective-alignment. If used in conjunction with the `--writeMappings` flag, then the CIGAR strings in the resulting SAM output will designate any soft-clipping that occurs at the beginning or end of the read. *Note:* To pass the selective-alignment filter, the read must still obtain a score of at least `maximum achievable score * minScoreFraction`, but softclipping allows omitting a poor quality sub-alignment at the beginning or end of the read with no change to the resulting score for the rest of the alignment (rather than forcing a negative score for these sub-alignments). * Salmon learned a new option `--decoyThreshold <thresh>`: For an alignemnt to an annota",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:7234,Deployability,release,release,7234,"know the exact salmon version that was used to build the index. . ### alevin. * A couple of new flags has been added to support the feature barcoding based quantification in the alevin framework. ; * **index** command; * `--features`: Performs indexing on a `tsv` file instead of a regular `FASTA` reference file. The `tsv` file should contain the name of the features, tab separated by the nucleotide sequence identifiers.; * **alevin** command; * `--featureStart`: The start index (0 based) of the feature barcode in the R2 read file. (Typically 0 for CITE-seq and 10 for 10x feature barcoding).; * `--featureLength`: The length of the feature barcode in the R2 read file. (Typically 15 for both CITE-seq and 10x feature barcoding).; * `--citeseq`: The command is used for quantifying the feature barcoded data where the alignment of the barcodes (with 1-edit distance) is done instead of the mRNA reads.; * No `--tgMap` is needed when using `--citeseq` single-cell protocol. * `--end 3` has been enabled in this release. It is useful for protocols where UMI comes before the Cellular Barcode (CB). *Note:* `--end 3` does _not_ start subsequencing from the 3' end of the R1 file. Instead, _alevin_ still starts counting the subsequence from the 5' end. However, we first sample the UMI instead of the CB. The idea here is, `--end 5` represents CB+UMI while `--end 3` represents UMI+CB and all the sequences beyond the |CB| + |UMI| length are ignored, no matter what value is set for the flag `--end`. Bug fixes; =========. * Fixed an issue (upstream in pufferfish), that is actually arising from [bbhash](https://github.com/rizkg/BBHash). Specifically, the issue was unexpected behavior of bbhash during minimum perfect hash construction. It may create temporary files during MPHF construction, and it was using the current working directory to do this, with no option to override this behavior. We have fixed this in our copy of the bbhash code, and the salmon `index` command will now use the pro",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:8675,Deployability,pipeline,pipelines,8675," flag `--end`. Bug fixes; =========. * Fixed an issue (upstream in pufferfish), that is actually arising from [bbhash](https://github.com/rizkg/BBHash). Specifically, the issue was unexpected behavior of bbhash during minimum perfect hash construction. It may create temporary files during MPHF construction, and it was using the current working directory to do this, with no option to override this behavior. We have fixed this in our copy of the bbhash code, and the salmon `index` command will now use the provided output directory as temporary working space for bbhash. This issue has been reported upstream in bbhash as [issue 19](https://github.com/rizkg/BBHash/issues/19). * Fixed an issue with long target names (raised in issue [451](https://github.com/COMBINE-lab/salmon/issues/451)) not being allowed in the index. Previously, in the pufferfish-based index, target names of length > 255 were clipped to 255 characters. While this is not normally a problem, pipelines that attempt to encode significant metadata in the target name may be affected by this limit. With this release, target names of up to 65,536 characters are supported. Thanks to @chilampoon for raising this issue. * Fixed an issue where the computed alignment score could be wrong (too high) when there were MEMs in the highest-scoring chain that overlapped in the query and the reference by different amounts. This was relatively infrequent, but has now been fixed. Thanks to @cdarby for reporting the issue and providing a test case to fix it!. * Fixed an issue where, in rare situations, usage of the alignment cache could cause non-determinism the the score for certain alignments, which could result in small fluctuations in the number of assigned fragments. The fix involves both addressing a bug in ksw2 where an incorrect alignment score for global alignment could be returned in certain rare situations depending on how the bandwidth parameter is set, and also by being more stringent in what alignments are inser",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:8789,Deployability,release,release,8789,"m [bbhash](https://github.com/rizkg/BBHash). Specifically, the issue was unexpected behavior of bbhash during minimum perfect hash construction. It may create temporary files during MPHF construction, and it was using the current working directory to do this, with no option to override this behavior. We have fixed this in our copy of the bbhash code, and the salmon `index` command will now use the provided output directory as temporary working space for bbhash. This issue has been reported upstream in bbhash as [issue 19](https://github.com/rizkg/BBHash/issues/19). * Fixed an issue with long target names (raised in issue [451](https://github.com/COMBINE-lab/salmon/issues/451)) not being allowed in the index. Previously, in the pufferfish-based index, target names of length > 255 were clipped to 255 characters. While this is not normally a problem, pipelines that attempt to encode significant metadata in the target name may be affected by this limit. With this release, target names of up to 65,536 characters are supported. Thanks to @chilampoon for raising this issue. * Fixed an issue where the computed alignment score could be wrong (too high) when there were MEMs in the highest-scoring chain that overlapped in the query and the reference by different amounts. This was relatively infrequent, but has now been fixed. Thanks to @cdarby for reporting the issue and providing a test case to fix it!. * Fixed an issue where, in rare situations, usage of the alignment cache could cause non-determinism the the score for certain alignments, which could result in small fluctuations in the number of assigned fragments. The fix involves both addressing a bug in ksw2 where an incorrect alignment score for global alignment could be returned in certain rare situations depending on how the bandwidth parameter is set, and also by being more stringent in what alignments are inserted into the alignment cache and which mappings are searched for in the alignment cache. Many thanks to @cso",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:10329,Deployability,release,release,10329,"query and the reference by different amounts. This was relatively infrequent, but has now been fixed. Thanks to @cdarby for reporting the issue and providing a test case to fix it!. * Fixed an issue where, in rare situations, usage of the alignment cache could cause non-determinism the the score for certain alignments, which could result in small fluctuations in the number of assigned fragments. The fix involves both addressing a bug in ksw2 where an incorrect alignment score for global alignment could be returned in certain rare situations depending on how the bandwidth parameter is set, and also by being more stringent in what alignments are inserted into the alignment cache and which mappings are searched for in the alignment cache. Many thanks to @csoneson for raising this issue and finding a dataset containing enough of the corner cases to track down and fix the issue. Thanks to @mohsenzakeri for isolating the underlying cases and figuring out how to fix them. . ### alevin; * The big feature hash generated when `--dumpBfh` is set, creates a reverse UMI sequences than those present originally. This was a legacy bug, introduced when shifting from jellyfish based 2-bit encoding to the `AlevinKmer` class based 2-bit encoding. This has been fixed in the this release. * Fixed an issue where the `--writeUnmappedNames` did not work properly with _alevin_. This addresses [issue 501](https://github.com/COMBINE-lab/salmon/issues/501). ## Other notes. * As raised in [issue 500](https://github.com/COMBINE-lab/salmon/issues/500), the salmon executable, since v1.0.0, assumes the [SSE4 instruction set](https://en.wikipedia.org/wiki/SSE4). While this feature has been standard on processors for a long time, some older hardware may not have this feature set. This compile flag was removed from the pufferfish build in this release, as we noticed no speed regressions in its absence. However, please let us know if you notice any non-trivial speed regressions (which we do not expect).",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:10889,Deployability,release,release,10889,"query and the reference by different amounts. This was relatively infrequent, but has now been fixed. Thanks to @cdarby for reporting the issue and providing a test case to fix it!. * Fixed an issue where, in rare situations, usage of the alignment cache could cause non-determinism the the score for certain alignments, which could result in small fluctuations in the number of assigned fragments. The fix involves both addressing a bug in ksw2 where an incorrect alignment score for global alignment could be returned in certain rare situations depending on how the bandwidth parameter is set, and also by being more stringent in what alignments are inserted into the alignment cache and which mappings are searched for in the alignment cache. Many thanks to @csoneson for raising this issue and finding a dataset containing enough of the corner cases to track down and fix the issue. Thanks to @mohsenzakeri for isolating the underlying cases and figuring out how to fix them. . ### alevin; * The big feature hash generated when `--dumpBfh` is set, creates a reverse UMI sequences than those present originally. This was a legacy bug, introduced when shifting from jellyfish based 2-bit encoding to the `AlevinKmer` class based 2-bit encoding. This has been fixed in the this release. * Fixed an issue where the `--writeUnmappedNames` did not work properly with _alevin_. This addresses [issue 501](https://github.com/COMBINE-lab/salmon/issues/501). ## Other notes. * As raised in [issue 500](https://github.com/COMBINE-lab/salmon/issues/500), the salmon executable, since v1.0.0, assumes the [SSE4 instruction set](https://en.wikipedia.org/wiki/SSE4). While this feature has been standard on processors for a long time, some older hardware may not have this feature set. This compile flag was removed from the pufferfish build in this release, as we noticed no speed regressions in its absence. However, please let us know if you notice any non-trivial speed regressions (which we do not expect).",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:590,Energy Efficiency,reduce,reduced,590,"Improvements and changes; ========================. ### Improvements; ----. * Extreme reduction in the required intermediate disk space used when building the salmon index. This improvement is due to the changes implemented by @iminkin in [TwoPaCo](https://github.com/medvedevgroup/TwoPaCo) (which pufferfish, and hence salmon, uses for constructing the colored, compacted dBG) addressing the issue [here](https://github.com/medvedevgroup/TwoPaCo/issues/23). This means that for larger references or references with many ""contigs"" (transcripts), the intermediate disk space requrements are reduced by **up to 2 orders of magnitude**!. * Reduction in the memory required for indexing, especially when indexing with a small value of `k`. This improvement comes from (1) fixing a bug that was resulting in an unnecessarily-large allocation when ""pufferizing"" the output of TwoPaCo and (2) improving the storage of some intermediate data structures used during index construction. These improvements should help reduce the burden of constructing a decoy-aware index with small values of `k`. The issue of reducing the number of intermediate files created (which can hurt performance on NFS-mounted drives) is being worked on upstream, but is not yet resolved. . ### alevin. * This release introduces support for the quantification of CITE-seq / feature barcoding based single-cell protocols! A full, end-to-end tutorial is soon-to-follow on the [alevin-tutorial](https://combine-lab.github.io/alevin-tutorial/) website. ### New flags and options:; ----. * Salmon learned a new option (currently Beta) `--softclip` : This flag allows soft-clipping at the beginning and end of reads when they are scored with selective-alignment. If used in conjunction with the `--writeMappings` flag, then the CIGAR strings in the resulting SAM output will designate any soft-clipping that occurs at the beginning or end of the read. *Note:* To pass the selective-alignment filter, the read must still obtain a score of at",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:1008,Energy Efficiency,reduce,reduce,1008,"===================. ### Improvements; ----. * Extreme reduction in the required intermediate disk space used when building the salmon index. This improvement is due to the changes implemented by @iminkin in [TwoPaCo](https://github.com/medvedevgroup/TwoPaCo) (which pufferfish, and hence salmon, uses for constructing the colored, compacted dBG) addressing the issue [here](https://github.com/medvedevgroup/TwoPaCo/issues/23). This means that for larger references or references with many ""contigs"" (transcripts), the intermediate disk space requrements are reduced by **up to 2 orders of magnitude**!. * Reduction in the memory required for indexing, especially when indexing with a small value of `k`. This improvement comes from (1) fixing a bug that was resulting in an unnecessarily-large allocation when ""pufferizing"" the output of TwoPaCo and (2) improving the storage of some intermediate data structures used during index construction. These improvements should help reduce the burden of constructing a decoy-aware index with small values of `k`. The issue of reducing the number of intermediate files created (which can hurt performance on NFS-mounted drives) is being worked on upstream, but is not yet resolved. . ### alevin. * This release introduces support for the quantification of CITE-seq / feature barcoding based single-cell protocols! A full, end-to-end tutorial is soon-to-follow on the [alevin-tutorial](https://combine-lab.github.io/alevin-tutorial/) website. ### New flags and options:; ----. * Salmon learned a new option (currently Beta) `--softclip` : This flag allows soft-clipping at the beginning and end of reads when they are scored with selective-alignment. If used in conjunction with the `--writeMappings` flag, then the CIGAR strings in the resulting SAM output will designate any soft-clipping that occurs at the beginning or end of the read. *Note:* To pass the selective-alignment filter, the read must still obtain a score of at least `maximum achievable scor",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:2645,Energy Efficiency,allocate,allocated,2645,"d of reads when they are scored with selective-alignment. If used in conjunction with the `--writeMappings` flag, then the CIGAR strings in the resulting SAM output will designate any soft-clipping that occurs at the beginning or end of the read. *Note:* To pass the selective-alignment filter, the read must still obtain a score of at least `maximum achievable score * minScoreFraction`, but softclipping allows omitting a poor quality sub-alignment at the beginning or end of the read with no change to the resulting score for the rest of the alignment (rather than forcing a negative score for these sub-alignments). * Salmon learned a new option `--decoyThreshold <thresh>`: For an alignemnt to an annotated transcript to be considered invalid, it must have an alignment score `s` such that `s < (decoyThreshold * bestDecoyScore)`. A value of 1.0 means that any alignment strictly worse than the best decoy alignment will be discarded. A smaller value will allow reads to be allocated to transcripts even if they strictly align better to the decoy sequence. The previous behavior of salmon was to discard any mappings to annotated transcripts that were _strictly worse_ than the best decoy alignment. This is equivalent to setting `--decoyThreshold 1.0`, which is the default behavior. * Salmon learned a new option `--minAlnProb <prob>` (default ): When selective alignment is carried out on a read, each alignment A is assigned a probability given by $e^{-(scoreExp * (bestScore - score(A)))}$, where the default `scoreExp` is just 1.0. Depending on how much worse a given alignment is compared to the best alignment for a read, this can result in an exceedingly small alignment probability. The `--minAlnProb` option lets one set the alignment probability below which an alignment's probability will be truncated to 0. This allows skipping the alignments for a fragment that are unlikely to be true (and which could increase the difficulty of inference in some cases). The default value is `1e",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:1377,Integrability,protocol,protocols,1377,"BG) addressing the issue [here](https://github.com/medvedevgroup/TwoPaCo/issues/23). This means that for larger references or references with many ""contigs"" (transcripts), the intermediate disk space requrements are reduced by **up to 2 orders of magnitude**!. * Reduction in the memory required for indexing, especially when indexing with a small value of `k`. This improvement comes from (1) fixing a bug that was resulting in an unnecessarily-large allocation when ""pufferizing"" the output of TwoPaCo and (2) improving the storage of some intermediate data structures used during index construction. These improvements should help reduce the burden of constructing a decoy-aware index with small values of `k`. The issue of reducing the number of intermediate files created (which can hurt performance on NFS-mounted drives) is being worked on upstream, but is not yet resolved. . ### alevin. * This release introduces support for the quantification of CITE-seq / feature barcoding based single-cell protocols! A full, end-to-end tutorial is soon-to-follow on the [alevin-tutorial](https://combine-lab.github.io/alevin-tutorial/) website. ### New flags and options:; ----. * Salmon learned a new option (currently Beta) `--softclip` : This flag allows soft-clipping at the beginning and end of reads when they are scored with selective-alignment. If used in conjunction with the `--writeMappings` flag, then the CIGAR strings in the resulting SAM output will designate any soft-clipping that occurs at the beginning or end of the read. *Note:* To pass the selective-alignment filter, the read must still obtain a score of at least `maximum achievable score * minScoreFraction`, but softclipping allows omitting a poor quality sub-alignment at the beginning or end of the read with no change to the resulting score for the rest of the alignment (rather than forcing a negative score for these sub-alignments). * Salmon learned a new option `--decoyThreshold <thresh>`: For an alignemnt to an annota",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:7187,Integrability,protocol,protocol,7187,"incompatible way. However, the new field will allow one to know the exact salmon version that was used to build the index. . ### alevin. * A couple of new flags has been added to support the feature barcoding based quantification in the alevin framework. ; * **index** command; * `--features`: Performs indexing on a `tsv` file instead of a regular `FASTA` reference file. The `tsv` file should contain the name of the features, tab separated by the nucleotide sequence identifiers.; * **alevin** command; * `--featureStart`: The start index (0 based) of the feature barcode in the R2 read file. (Typically 0 for CITE-seq and 10 for 10x feature barcoding).; * `--featureLength`: The length of the feature barcode in the R2 read file. (Typically 15 for both CITE-seq and 10x feature barcoding).; * `--citeseq`: The command is used for quantifying the feature barcoded data where the alignment of the barcodes (with 1-edit distance) is done instead of the mRNA reads.; * No `--tgMap` is needed when using `--citeseq` single-cell protocol. * `--end 3` has been enabled in this release. It is useful for protocols where UMI comes before the Cellular Barcode (CB). *Note:* `--end 3` does _not_ start subsequencing from the 3' end of the R1 file. Instead, _alevin_ still starts counting the subsequence from the 5' end. However, we first sample the UMI instead of the CB. The idea here is, `--end 5` represents CB+UMI while `--end 3` represents UMI+CB and all the sequences beyond the |CB| + |UMI| length are ignored, no matter what value is set for the flag `--end`. Bug fixes; =========. * Fixed an issue (upstream in pufferfish), that is actually arising from [bbhash](https://github.com/rizkg/BBHash). Specifically, the issue was unexpected behavior of bbhash during minimum perfect hash construction. It may create temporary files during MPHF construction, and it was using the current working directory to do this, with no option to override this behavior. We have fixed this in our copy of the bbhash",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:7260,Integrability,protocol,protocols,7260,"x. . ### alevin. * A couple of new flags has been added to support the feature barcoding based quantification in the alevin framework. ; * **index** command; * `--features`: Performs indexing on a `tsv` file instead of a regular `FASTA` reference file. The `tsv` file should contain the name of the features, tab separated by the nucleotide sequence identifiers.; * **alevin** command; * `--featureStart`: The start index (0 based) of the feature barcode in the R2 read file. (Typically 0 for CITE-seq and 10 for 10x feature barcoding).; * `--featureLength`: The length of the feature barcode in the R2 read file. (Typically 15 for both CITE-seq and 10x feature barcoding).; * `--citeseq`: The command is used for quantifying the feature barcoded data where the alignment of the barcodes (with 1-edit distance) is done instead of the mRNA reads.; * No `--tgMap` is needed when using `--citeseq` single-cell protocol. * `--end 3` has been enabled in this release. It is useful for protocols where UMI comes before the Cellular Barcode (CB). *Note:* `--end 3` does _not_ start subsequencing from the 3' end of the R1 file. Instead, _alevin_ still starts counting the subsequence from the 5' end. However, we first sample the UMI instead of the CB. The idea here is, `--end 5` represents CB+UMI while `--end 3` represents UMI+CB and all the sequences beyond the |CB| + |UMI| length are ignored, no matter what value is set for the flag `--end`. Bug fixes; =========. * Fixed an issue (upstream in pufferfish), that is actually arising from [bbhash](https://github.com/rizkg/BBHash). Specifically, the issue was unexpected behavior of bbhash during minimum perfect hash construction. It may create temporary files during MPHF construction, and it was using the current working directory to do this, with no option to override this behavior. We have fixed this in our copy of the bbhash code, and the salmon `index` command will now use the provided output directory as temporary working space for bbhash. ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:9597,Integrability,depend,depending,9597,"255 characters. While this is not normally a problem, pipelines that attempt to encode significant metadata in the target name may be affected by this limit. With this release, target names of up to 65,536 characters are supported. Thanks to @chilampoon for raising this issue. * Fixed an issue where the computed alignment score could be wrong (too high) when there were MEMs in the highest-scoring chain that overlapped in the query and the reference by different amounts. This was relatively infrequent, but has now been fixed. Thanks to @cdarby for reporting the issue and providing a test case to fix it!. * Fixed an issue where, in rare situations, usage of the alignment cache could cause non-determinism the the score for certain alignments, which could result in small fluctuations in the number of assigned fragments. The fix involves both addressing a bug in ksw2 where an incorrect alignment score for global alignment could be returned in certain rare situations depending on how the bandwidth parameter is set, and also by being more stringent in what alignments are inserted into the alignment cache and which mappings are searched for in the alignment cache. Many thanks to @csoneson for raising this issue and finding a dataset containing enough of the corner cases to track down and fix the issue. Thanks to @mohsenzakeri for isolating the underlying cases and figuring out how to fix them. . ### alevin; * The big feature hash generated when `--dumpBfh` is set, creates a reverse UMI sequences than those present originally. This was a legacy bug, introduced when shifting from jellyfish based 2-bit encoding to the `AlevinKmer` class based 2-bit encoding. This has been fixed in the this release. * Fixed an issue where the `--writeUnmappedNames` did not work properly with _alevin_. This addresses [issue 501](https://github.com/COMBINE-lab/salmon/issues/501). ## Other notes. * As raised in [issue 500](https://github.com/COMBINE-lab/salmon/issues/500), the salmon executable, si",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:1167,Performance,perform,performance,1167,". This improvement is due to the changes implemented by @iminkin in [TwoPaCo](https://github.com/medvedevgroup/TwoPaCo) (which pufferfish, and hence salmon, uses for constructing the colored, compacted dBG) addressing the issue [here](https://github.com/medvedevgroup/TwoPaCo/issues/23). This means that for larger references or references with many ""contigs"" (transcripts), the intermediate disk space requrements are reduced by **up to 2 orders of magnitude**!. * Reduction in the memory required for indexing, especially when indexing with a small value of `k`. This improvement comes from (1) fixing a bug that was resulting in an unnecessarily-large allocation when ""pufferizing"" the output of TwoPaCo and (2) improving the storage of some intermediate data structures used during index construction. These improvements should help reduce the burden of constructing a decoy-aware index with small values of `k`. The issue of reducing the number of intermediate files created (which can hurt performance on NFS-mounted drives) is being worked on upstream, but is not yet resolved. . ### alevin. * This release introduces support for the quantification of CITE-seq / feature barcoding based single-cell protocols! A full, end-to-end tutorial is soon-to-follow on the [alevin-tutorial](https://combine-lab.github.io/alevin-tutorial/) website. ### New flags and options:; ----. * Salmon learned a new option (currently Beta) `--softclip` : This flag allows soft-clipping at the beginning and end of reads when they are scored with selective-alignment. If used in conjunction with the `--writeMappings` flag, then the CIGAR strings in the resulting SAM output will designate any soft-clipping that occurs at the beginning or end of the read. *Note:* To pass the selective-alignment filter, the read must still obtain a score of at least `maximum achievable score * minScoreFraction`, but softclipping allows omitting a poor quality sub-alignment at the beginning or end of the read with no change to ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:9299,Performance,cache,cache,9299,"19](https://github.com/rizkg/BBHash/issues/19). * Fixed an issue with long target names (raised in issue [451](https://github.com/COMBINE-lab/salmon/issues/451)) not being allowed in the index. Previously, in the pufferfish-based index, target names of length > 255 were clipped to 255 characters. While this is not normally a problem, pipelines that attempt to encode significant metadata in the target name may be affected by this limit. With this release, target names of up to 65,536 characters are supported. Thanks to @chilampoon for raising this issue. * Fixed an issue where the computed alignment score could be wrong (too high) when there were MEMs in the highest-scoring chain that overlapped in the query and the reference by different amounts. This was relatively infrequent, but has now been fixed. Thanks to @cdarby for reporting the issue and providing a test case to fix it!. * Fixed an issue where, in rare situations, usage of the alignment cache could cause non-determinism the the score for certain alignments, which could result in small fluctuations in the number of assigned fragments. The fix involves both addressing a bug in ksw2 where an incorrect alignment score for global alignment could be returned in certain rare situations depending on how the bandwidth parameter is set, and also by being more stringent in what alignments are inserted into the alignment cache and which mappings are searched for in the alignment cache. Many thanks to @csoneson for raising this issue and finding a dataset containing enough of the corner cases to track down and fix the issue. Thanks to @mohsenzakeri for isolating the underlying cases and figuring out how to fix them. . ### alevin; * The big feature hash generated when `--dumpBfh` is set, creates a reverse UMI sequences than those present originally. This was a legacy bug, introduced when shifting from jellyfish based 2-bit encoding to the `AlevinKmer` class based 2-bit encoding. This has been fixed in the this release. * ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:9730,Performance,cache,cache,9730,"255 characters. While this is not normally a problem, pipelines that attempt to encode significant metadata in the target name may be affected by this limit. With this release, target names of up to 65,536 characters are supported. Thanks to @chilampoon for raising this issue. * Fixed an issue where the computed alignment score could be wrong (too high) when there were MEMs in the highest-scoring chain that overlapped in the query and the reference by different amounts. This was relatively infrequent, but has now been fixed. Thanks to @cdarby for reporting the issue and providing a test case to fix it!. * Fixed an issue where, in rare situations, usage of the alignment cache could cause non-determinism the the score for certain alignments, which could result in small fluctuations in the number of assigned fragments. The fix involves both addressing a bug in ksw2 where an incorrect alignment score for global alignment could be returned in certain rare situations depending on how the bandwidth parameter is set, and also by being more stringent in what alignments are inserted into the alignment cache and which mappings are searched for in the alignment cache. Many thanks to @csoneson for raising this issue and finding a dataset containing enough of the corner cases to track down and fix the issue. Thanks to @mohsenzakeri for isolating the underlying cases and figuring out how to fix them. . ### alevin; * The big feature hash generated when `--dumpBfh` is set, creates a reverse UMI sequences than those present originally. This was a legacy bug, introduced when shifting from jellyfish based 2-bit encoding to the `AlevinKmer` class based 2-bit encoding. This has been fixed in the this release. * Fixed an issue where the `--writeUnmappedNames` did not work properly with _alevin_. This addresses [issue 501](https://github.com/COMBINE-lab/salmon/issues/501). ## Other notes. * As raised in [issue 500](https://github.com/COMBINE-lab/salmon/issues/500), the salmon executable, si",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:9789,Performance,cache,cache,9789,"255 characters. While this is not normally a problem, pipelines that attempt to encode significant metadata in the target name may be affected by this limit. With this release, target names of up to 65,536 characters are supported. Thanks to @chilampoon for raising this issue. * Fixed an issue where the computed alignment score could be wrong (too high) when there were MEMs in the highest-scoring chain that overlapped in the query and the reference by different amounts. This was relatively infrequent, but has now been fixed. Thanks to @cdarby for reporting the issue and providing a test case to fix it!. * Fixed an issue where, in rare situations, usage of the alignment cache could cause non-determinism the the score for certain alignments, which could result in small fluctuations in the number of assigned fragments. The fix involves both addressing a bug in ksw2 where an incorrect alignment score for global alignment could be returned in certain rare situations depending on how the bandwidth parameter is set, and also by being more stringent in what alignments are inserted into the alignment cache and which mappings are searched for in the alignment cache. Many thanks to @csoneson for raising this issue and finding a dataset containing enough of the corner cases to track down and fix the issue. Thanks to @mohsenzakeri for isolating the underlying cases and figuring out how to fix them. . ### alevin; * The big feature hash generated when `--dumpBfh` is set, creates a reverse UMI sequences than those present originally. This was a legacy bug, introduced when shifting from jellyfish based 2-bit encoding to the `AlevinKmer` class based 2-bit encoding. This has been fixed in the this release. * Fixed an issue where the `--writeUnmappedNames` did not work properly with _alevin_. This addresses [issue 501](https://github.com/COMBINE-lab/salmon/issues/501). ## Other notes. * As raised in [issue 500](https://github.com/COMBINE-lab/salmon/issues/500), the salmon executable, si",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:5275,Safety,detect,detect,5275," against in the provided BAM file) for which auxliliary models (sequence-specific, fragment-GC, and position-specific bias correction) _should not_ be applied. The format of this file is to provide one target name per-line, in a newline separated file. Unlike decoy sequences, this list of sequences is provided to the `quant` command, and can be different between different runs if so-desired. Also, unlike decoy sequences, the auxiliary targets _will_ be quantified (e.g. they will have entries in `quant.sf` and can have reads assigned to them). To aid in metadata tracking of targets marked as auxiliary, the `aux_info` directory contains a new file `aux_target_ids.json`, which contains a json file listing the indices of targets that were treated as ""auxiliary"" targets in the current run. * The equivalence class output is now gzipped when written (and written to `aux_info/eq_classes.txt.gz` rather than `aux_info/eq_classes.txt`). To detect this behavior, an extra property `gzipped` is written to the `eq_class_properties` entry of `aux_info/meta_info.json`. Apart from being gzipped to save space, however, the format is unchanged. So, you can simply read the file using a gzip stream, or, alternatively, simply unzip the file before reading it. * Added special handling for reading SAM files that were, themselves, produced by `salmon`. Specifically, when reading SAM files produced by salmon, the `AS` tag will be used to assign appropriate conditional probabilities to different mappings for a fragment (rather than looking for a CIGAR string, which is not computed). * The `versionInfo.json` file generated during indexing now remember the specific version of salmon that was used to build the index. The `indexVersion` field is already a version identifier that is incremented when the index changes in a binary-incompatible way. However, the new field will allow one to know the exact salmon version that was used to build the index. . ### alevin. * A couple of new flags has been add",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:7941,Security,hash,hash,7941,"or both CITE-seq and 10x feature barcoding).; * `--citeseq`: The command is used for quantifying the feature barcoded data where the alignment of the barcodes (with 1-edit distance) is done instead of the mRNA reads.; * No `--tgMap` is needed when using `--citeseq` single-cell protocol. * `--end 3` has been enabled in this release. It is useful for protocols where UMI comes before the Cellular Barcode (CB). *Note:* `--end 3` does _not_ start subsequencing from the 3' end of the R1 file. Instead, _alevin_ still starts counting the subsequence from the 5' end. However, we first sample the UMI instead of the CB. The idea here is, `--end 5` represents CB+UMI while `--end 3` represents UMI+CB and all the sequences beyond the |CB| + |UMI| length are ignored, no matter what value is set for the flag `--end`. Bug fixes; =========. * Fixed an issue (upstream in pufferfish), that is actually arising from [bbhash](https://github.com/rizkg/BBHash). Specifically, the issue was unexpected behavior of bbhash during minimum perfect hash construction. It may create temporary files during MPHF construction, and it was using the current working directory to do this, with no option to override this behavior. We have fixed this in our copy of the bbhash code, and the salmon `index` command will now use the provided output directory as temporary working space for bbhash. This issue has been reported upstream in bbhash as [issue 19](https://github.com/rizkg/BBHash/issues/19). * Fixed an issue with long target names (raised in issue [451](https://github.com/COMBINE-lab/salmon/issues/451)) not being allowed in the index. Previously, in the pufferfish-based index, target names of length > 255 were clipped to 255 characters. While this is not normally a problem, pipelines that attempt to encode significant metadata in the target name may be affected by this limit. With this release, target names of up to 65,536 characters are supported. Thanks to @chilampoon for raising this issue. * Fixed an",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:10062,Security,hash,hash,10062,"query and the reference by different amounts. This was relatively infrequent, but has now been fixed. Thanks to @cdarby for reporting the issue and providing a test case to fix it!. * Fixed an issue where, in rare situations, usage of the alignment cache could cause non-determinism the the score for certain alignments, which could result in small fluctuations in the number of assigned fragments. The fix involves both addressing a bug in ksw2 where an incorrect alignment score for global alignment could be returned in certain rare situations depending on how the bandwidth parameter is set, and also by being more stringent in what alignments are inserted into the alignment cache and which mappings are searched for in the alignment cache. Many thanks to @csoneson for raising this issue and finding a dataset containing enough of the corner cases to track down and fix the issue. Thanks to @mohsenzakeri for isolating the underlying cases and figuring out how to fix them. . ### alevin; * The big feature hash generated when `--dumpBfh` is set, creates a reverse UMI sequences than those present originally. This was a legacy bug, introduced when shifting from jellyfish based 2-bit encoding to the `AlevinKmer` class based 2-bit encoding. This has been fixed in the this release. * Fixed an issue where the `--writeUnmappedNames` did not work properly with _alevin_. This addresses [issue 501](https://github.com/COMBINE-lab/salmon/issues/501). ## Other notes. * As raised in [issue 500](https://github.com/COMBINE-lab/salmon/issues/500), the salmon executable, since v1.0.0, assumes the [SSE4 instruction set](https://en.wikipedia.org/wiki/SSE4). While this feature has been standard on processors for a long time, some older hardware may not have this feature set. This compile flag was removed from the pufferfish build in this release, as we noticed no speed regressions in its absence. However, please let us know if you notice any non-trivial speed regressions (which we do not expect).",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:9210,Testability,test,test,9210,"command will now use the provided output directory as temporary working space for bbhash. This issue has been reported upstream in bbhash as [issue 19](https://github.com/rizkg/BBHash/issues/19). * Fixed an issue with long target names (raised in issue [451](https://github.com/COMBINE-lab/salmon/issues/451)) not being allowed in the index. Previously, in the pufferfish-based index, target names of length > 255 were clipped to 255 characters. While this is not normally a problem, pipelines that attempt to encode significant metadata in the target name may be affected by this limit. With this release, target names of up to 65,536 characters are supported. Thanks to @chilampoon for raising this issue. * Fixed an issue where the computed alignment score could be wrong (too high) when there were MEMs in the highest-scoring chain that overlapped in the query and the reference by different amounts. This was relatively infrequent, but has now been fixed. Thanks to @cdarby for reporting the issue and providing a test case to fix it!. * Fixed an issue where, in rare situations, usage of the alignment cache could cause non-determinism the the score for certain alignments, which could result in small fluctuations in the number of assigned fragments. The fix involves both addressing a bug in ksw2 where an incorrect alignment score for global alignment could be returned in certain rare situations depending on how the bandwidth parameter is set, and also by being more stringent in what alignments are inserted into the alignment cache and which mappings are searched for in the alignment cache. Many thanks to @csoneson for raising this issue and finding a dataset containing enough of the corner cases to track down and fix the issue. Thanks to @mohsenzakeri for isolating the underlying cases and figuring out how to fix them. . ### alevin; * The big feature hash generated when `--dumpBfh` is set, creates a reverse UMI sequences than those present originally. This was a legacy bug, int",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:1559,Usability,learn,learned,1559," Reduction in the memory required for indexing, especially when indexing with a small value of `k`. This improvement comes from (1) fixing a bug that was resulting in an unnecessarily-large allocation when ""pufferizing"" the output of TwoPaCo and (2) improving the storage of some intermediate data structures used during index construction. These improvements should help reduce the burden of constructing a decoy-aware index with small values of `k`. The issue of reducing the number of intermediate files created (which can hurt performance on NFS-mounted drives) is being worked on upstream, but is not yet resolved. . ### alevin. * This release introduces support for the quantification of CITE-seq / feature barcoding based single-cell protocols! A full, end-to-end tutorial is soon-to-follow on the [alevin-tutorial](https://combine-lab.github.io/alevin-tutorial/) website. ### New flags and options:; ----. * Salmon learned a new option (currently Beta) `--softclip` : This flag allows soft-clipping at the beginning and end of reads when they are scored with selective-alignment. If used in conjunction with the `--writeMappings` flag, then the CIGAR strings in the resulting SAM output will designate any soft-clipping that occurs at the beginning or end of the read. *Note:* To pass the selective-alignment filter, the read must still obtain a score of at least `maximum achievable score * minScoreFraction`, but softclipping allows omitting a poor quality sub-alignment at the beginning or end of the read with no change to the resulting score for the rest of the alignment (rather than forcing a negative score for these sub-alignments). * Salmon learned a new option `--decoyThreshold <thresh>`: For an alignemnt to an annotated transcript to be considered invalid, it must have an alignment score `s` such that `s < (decoyThreshold * bestDecoyScore)`. A value of 1.0 means that any alignment strictly worse than the best decoy alignment will be discarded. A smaller value will allow rea",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:2295,Usability,learn,learned,2295,"l, end-to-end tutorial is soon-to-follow on the [alevin-tutorial](https://combine-lab.github.io/alevin-tutorial/) website. ### New flags and options:; ----. * Salmon learned a new option (currently Beta) `--softclip` : This flag allows soft-clipping at the beginning and end of reads when they are scored with selective-alignment. If used in conjunction with the `--writeMappings` flag, then the CIGAR strings in the resulting SAM output will designate any soft-clipping that occurs at the beginning or end of the read. *Note:* To pass the selective-alignment filter, the read must still obtain a score of at least `maximum achievable score * minScoreFraction`, but softclipping allows omitting a poor quality sub-alignment at the beginning or end of the read with no change to the resulting score for the rest of the alignment (rather than forcing a negative score for these sub-alignments). * Salmon learned a new option `--decoyThreshold <thresh>`: For an alignemnt to an annotated transcript to be considered invalid, it must have an alignment score `s` such that `s < (decoyThreshold * bestDecoyScore)`. A value of 1.0 means that any alignment strictly worse than the best decoy alignment will be discarded. A smaller value will allow reads to be allocated to transcripts even if they strictly align better to the decoy sequence. The previous behavior of salmon was to discard any mappings to annotated transcripts that were _strictly worse_ than the best decoy alignment. This is equivalent to setting `--decoyThreshold 1.0`, which is the default behavior. * Salmon learned a new option `--minAlnProb <prob>` (default ): When selective alignment is carried out on a read, each alignment A is assigned a probability given by $e^{-(scoreExp * (bestScore - score(A)))}$, where the default `scoreExp` is just 1.0. Depending on how much worse a given alignment is compared to the best alignment for a read, this can result in an exceedingly small alignment probability. The `--minAlnProb` option let",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:2965,Usability,learn,learned,2965,"mitting a poor quality sub-alignment at the beginning or end of the read with no change to the resulting score for the rest of the alignment (rather than forcing a negative score for these sub-alignments). * Salmon learned a new option `--decoyThreshold <thresh>`: For an alignemnt to an annotated transcript to be considered invalid, it must have an alignment score `s` such that `s < (decoyThreshold * bestDecoyScore)`. A value of 1.0 means that any alignment strictly worse than the best decoy alignment will be discarded. A smaller value will allow reads to be allocated to transcripts even if they strictly align better to the decoy sequence. The previous behavior of salmon was to discard any mappings to annotated transcripts that were _strictly worse_ than the best decoy alignment. This is equivalent to setting `--decoyThreshold 1.0`, which is the default behavior. * Salmon learned a new option `--minAlnProb <prob>` (default ): When selective alignment is carried out on a read, each alignment A is assigned a probability given by $e^{-(scoreExp * (bestScore - score(A)))}$, where the default `scoreExp` is just 1.0. Depending on how much worse a given alignment is compared to the best alignment for a read, this can result in an exceedingly small alignment probability. The `--minAlnProb` option lets one set the alignment probability below which an alignment's probability will be truncated to 0. This allows skipping the alignments for a fragment that are unlikely to be true (and which could increase the difficulty of inference in some cases). The default value is `1e-5`. * Salmon learned a new flag `--disableChainingHeuristic`: Passing this flag will turn off the heuristic of Li 2018 that is used to speed up the MEM chaining step, where the inner loop of the chaining algorithm is terminated after a small number of previous pointers for a given MEM have been found. Passing this flag can improve the sensitivity of alignment to sequences that are highly repetitive (especially ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:3680,Usability,learn,learned,3680,"ere _strictly worse_ than the best decoy alignment. This is equivalent to setting `--decoyThreshold 1.0`, which is the default behavior. * Salmon learned a new option `--minAlnProb <prob>` (default ): When selective alignment is carried out on a read, each alignment A is assigned a probability given by $e^{-(scoreExp * (bestScore - score(A)))}$, where the default `scoreExp` is just 1.0. Depending on how much worse a given alignment is compared to the best alignment for a read, this can result in an exceedingly small alignment probability. The `--minAlnProb` option lets one set the alignment probability below which an alignment's probability will be truncated to 0. This allows skipping the alignments for a fragment that are unlikely to be true (and which could increase the difficulty of inference in some cases). The default value is `1e-5`. * Salmon learned a new flag `--disableChainingHeuristic`: Passing this flag will turn off the heuristic of Li 2018 that is used to speed up the MEM chaining step, where the inner loop of the chaining algorithm is terminated after a small number of previous pointers for a given MEM have been found. Passing this flag can improve the sensitivity of alignment to sequences that are highly repetitive (especially those with overlapping repetition), but it can make the chaining step somewhat slower. * Salmon learned a new flag `--auxTargetFile <file>`. The file passed to this option should be a list of targets (i.e. sequences indexed during indexing, or aligned against in the provided BAM file) for which auxliliary models (sequence-specific, fragment-GC, and position-specific bias correction) _should not_ be applied. The format of this file is to provide one target name per-line, in a newline separated file. Unlike decoy sequences, this list of sequences is provided to the `quant` command, and can be different between different runs if so-desired. Also, unlike decoy sequences, the auxiliary targets _will_ be quantified (e.g. they will have",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:4177,Usability,learn,learned,4177,"` is just 1.0. Depending on how much worse a given alignment is compared to the best alignment for a read, this can result in an exceedingly small alignment probability. The `--minAlnProb` option lets one set the alignment probability below which an alignment's probability will be truncated to 0. This allows skipping the alignments for a fragment that are unlikely to be true (and which could increase the difficulty of inference in some cases). The default value is `1e-5`. * Salmon learned a new flag `--disableChainingHeuristic`: Passing this flag will turn off the heuristic of Li 2018 that is used to speed up the MEM chaining step, where the inner loop of the chaining algorithm is terminated after a small number of previous pointers for a given MEM have been found. Passing this flag can improve the sensitivity of alignment to sequences that are highly repetitive (especially those with overlapping repetition), but it can make the chaining step somewhat slower. * Salmon learned a new flag `--auxTargetFile <file>`. The file passed to this option should be a list of targets (i.e. sequences indexed during indexing, or aligned against in the provided BAM file) for which auxliliary models (sequence-specific, fragment-GC, and position-specific bias correction) _should not_ be applied. The format of this file is to provide one target name per-line, in a newline separated file. Unlike decoy sequences, this list of sequences is provided to the `quant` command, and can be different between different runs if so-desired. Also, unlike decoy sequences, the auxiliary targets _will_ be quantified (e.g. they will have entries in `quant.sf` and can have reads assigned to them). To aid in metadata tracking of targets marked as auxiliary, the `aux_info` directory contains a new file `aux_target_ids.json`, which contains a json file listing the indices of targets that were treated as ""auxiliary"" targets in the current run. * The equivalence class output is now gzipped when written (and wr",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:5487,Usability,simpl,simply,5487,"ne target name per-line, in a newline separated file. Unlike decoy sequences, this list of sequences is provided to the `quant` command, and can be different between different runs if so-desired. Also, unlike decoy sequences, the auxiliary targets _will_ be quantified (e.g. they will have entries in `quant.sf` and can have reads assigned to them). To aid in metadata tracking of targets marked as auxiliary, the `aux_info` directory contains a new file `aux_target_ids.json`, which contains a json file listing the indices of targets that were treated as ""auxiliary"" targets in the current run. * The equivalence class output is now gzipped when written (and written to `aux_info/eq_classes.txt.gz` rather than `aux_info/eq_classes.txt`). To detect this behavior, an extra property `gzipped` is written to the `eq_class_properties` entry of `aux_info/meta_info.json`. Apart from being gzipped to save space, however, the format is unchanged. So, you can simply read the file using a gzip stream, or, alternatively, simply unzip the file before reading it. * Added special handling for reading SAM files that were, themselves, produced by `salmon`. Specifically, when reading SAM files produced by salmon, the `AS` tag will be used to assign appropriate conditional probabilities to different mappings for a fragment (rather than looking for a CIGAR string, which is not computed). * The `versionInfo.json` file generated during indexing now remember the specific version of salmon that was used to build the index. The `indexVersion` field is already a version identifier that is incremented when the index changes in a binary-incompatible way. However, the new field will allow one to know the exact salmon version that was used to build the index. . ### alevin. * A couple of new flags has been added to support the feature barcoding based quantification in the alevin framework. ; * **index** command; * `--features`: Performs indexing on a `tsv` file instead of a regular `FASTA` reference file",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0:5548,Usability,simpl,simply,5548,"ne target name per-line, in a newline separated file. Unlike decoy sequences, this list of sequences is provided to the `quant` command, and can be different between different runs if so-desired. Also, unlike decoy sequences, the auxiliary targets _will_ be quantified (e.g. they will have entries in `quant.sf` and can have reads assigned to them). To aid in metadata tracking of targets marked as auxiliary, the `aux_info` directory contains a new file `aux_target_ids.json`, which contains a json file listing the indices of targets that were treated as ""auxiliary"" targets in the current run. * The equivalence class output is now gzipped when written (and written to `aux_info/eq_classes.txt.gz` rather than `aux_info/eq_classes.txt`). To detect this behavior, an extra property `gzipped` is written to the `eq_class_properties` entry of `aux_info/meta_info.json`. Apart from being gzipped to save space, however, the format is unchanged. So, you can simply read the file using a gzip stream, or, alternatively, simply unzip the file before reading it. * Added special handling for reading SAM files that were, themselves, produced by `salmon`. Specifically, when reading SAM files produced by salmon, the `AS` tag will be used to assign appropriate conditional probabilities to different mappings for a fragment (rather than looking for a CIGAR string, which is not computed). * The `versionInfo.json` file generated during indexing now remember the specific version of salmon that was used to build the index. The `indexVersion` field is already a version identifier that is incremented when the index changes in a binary-incompatible way. However, the new field will allow one to know the exact salmon version that was used to build the index. . ### alevin. * A couple of new flags has been added to support the feature barcoding based quantification in the alevin framework. ; * **index** command; * `--features`: Performs indexing on a `tsv` file instead of a regular `FASTA` reference file",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:1005,Availability,avail,available,1005,"# salmon 1.1.0 release notes. **Note** : This version contains some important fixes, please see below for detailed information. **Note** : On our testing machines, this version of salmon was _index_-compatible with version 1.0.0. That is, it is likely that you need not re-build your index from what you built with 1.0.0. However, it is not clear that this compatibility is guaranteed by the cereal library. If you encounter difficulty loading a previously-built index, please consider re-building with the latest version before filing a bug report. **Note** : If you want to build from source and use a version of the (header-only) cereal library already installed on your system, please make sure it is cereal v1.3.0. The current `findCereal.cmake` file does not support version restrictions, and we are working to improve this for proper automatic detection and enforcement of this constraint in future releases. *As always*, a pre-compiled linux executable is included below and the latest release is available via Bioconda. ## Improvements. * SHA512 sums are now properly propagated forward to `meta_info.json`. * Bumped the included version of the [cereal](https://github.com/USCiLab/cereal) serialization library. The components used by salmon _should_ be backward compatible in terms of reading output from the previous version (i.e. should not require index re-building). * The flag `--keepFixedFasta` was added to the `index` command. If this flag is passed, then a ""fixed"" version of the fasta file will be retained in the index directory. This file is created during indexing, but is normally deleted when indexing is complete. It contains the input fasta without duplicate sequences (unless `--keepDuplicates` was used), with the headers as understood by salmon, with `N` nucleotides replaced, etc. * Introduced a few small optimizations upstream (in pufferfish) to speed up selective-alignment; more are on the way (thanks to @mohsenzakeri). ## Bug fixes. * The bug described directly be",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:3196,Availability,down,down,3196,"e used for bias correction to be incorrect. The code was assuming zero-initalization of memory which was not necessarily occuring. **Note**: This bug affects runs performed under mapping-based mode (i.e. when the input was not coming from a BAM file) and when `--seqBias` or `--gcBias` flags (or both) were used. Depending upon the initialization of the underlying memory, the bug _may_ lead to unexpected results and diminished accuracy. The bug was present in versions 0.99.0 beta 1 through 1.0.0 (inclusive), and if you processed data using these versions in mapping-based mode with the flags mentioned above, _we encourage you to reprocess this data with the newest version, just in case_. We apologize for any inconvenience. * Fixed a bug that would occur when the input fasta file contained short sequences (<= length k) near the end of the file and bias correction (sequence-specific or fragment-GC) was enabled. This is particularly acute when the short sequence was immediately preceded by a very long target and would cause *inordinate* warning message printing to the log (hugely slowing down index loading). This printing to the log could slow the index loading considerably. Furthermore, this would provide sequence copies to short transcripts and decoy sequences even though they are not needed, which would result in unnecessary memory waste. The bug was due to a missing parenthesization to enforce the desired operator precedence. This fix should speed up index loading and reduce memory usage when using the `--seqBias` or `--gcBias` flags. *Huge* thanks to @mdshw5 for finding an input that would trigger this behavior (which didn't show up in testing), and for helping to track down the cause. * Fixed a bug that could occur in computing the Beta function component of the chaining score with *very* long queries. This should not have shown up at all with Illumina-length reads, but nonetheless the adjustment conceptually corrects the scoring for all cases. Thanks @mohsenzakeri.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:3795,Availability,down,down,3795,"e used for bias correction to be incorrect. The code was assuming zero-initalization of memory which was not necessarily occuring. **Note**: This bug affects runs performed under mapping-based mode (i.e. when the input was not coming from a BAM file) and when `--seqBias` or `--gcBias` flags (or both) were used. Depending upon the initialization of the underlying memory, the bug _may_ lead to unexpected results and diminished accuracy. The bug was present in versions 0.99.0 beta 1 through 1.0.0 (inclusive), and if you processed data using these versions in mapping-based mode with the flags mentioned above, _we encourage you to reprocess this data with the newest version, just in case_. We apologize for any inconvenience. * Fixed a bug that would occur when the input fasta file contained short sequences (<= length k) near the end of the file and bias correction (sequence-specific or fragment-GC) was enabled. This is particularly acute when the short sequence was immediately preceded by a very long target and would cause *inordinate* warning message printing to the log (hugely slowing down index loading). This printing to the log could slow the index loading considerably. Furthermore, this would provide sequence copies to short transcripts and decoy sequences even though they are not needed, which would result in unnecessary memory waste. The bug was due to a missing parenthesization to enforce the desired operator precedence. This fix should speed up index loading and reduce memory usage when using the `--seqBias` or `--gcBias` flags. *Huge* thanks to @mdshw5 for finding an input that would trigger this behavior (which didn't show up in testing), and for helping to track down the cause. * Fixed a bug that could occur in computing the Beta function component of the chaining score with *very* long queries. This should not have shown up at all with Illumina-length reads, but nonetheless the adjustment conceptually corrects the scoring for all cases. Thanks @mohsenzakeri.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:15,Deployability,release,release,15,"# salmon 1.1.0 release notes. **Note** : This version contains some important fixes, please see below for detailed information. **Note** : On our testing machines, this version of salmon was _index_-compatible with version 1.0.0. That is, it is likely that you need not re-build your index from what you built with 1.0.0. However, it is not clear that this compatibility is guaranteed by the cereal library. If you encounter difficulty loading a previously-built index, please consider re-building with the latest version before filing a bug report. **Note** : If you want to build from source and use a version of the (header-only) cereal library already installed on your system, please make sure it is cereal v1.3.0. The current `findCereal.cmake` file does not support version restrictions, and we are working to improve this for proper automatic detection and enforcement of this constraint in future releases. *As always*, a pre-compiled linux executable is included below and the latest release is available via Bioconda. ## Improvements. * SHA512 sums are now properly propagated forward to `meta_info.json`. * Bumped the included version of the [cereal](https://github.com/USCiLab/cereal) serialization library. The components used by salmon _should_ be backward compatible in terms of reading output from the previous version (i.e. should not require index re-building). * The flag `--keepFixedFasta` was added to the `index` command. If this flag is passed, then a ""fixed"" version of the fasta file will be retained in the index directory. This file is created during indexing, but is normally deleted when indexing is complete. It contains the input fasta without duplicate sequences (unless `--keepDuplicates` was used), with the headers as understood by salmon, with `N` nucleotides replaced, etc. * Introduced a few small optimizations upstream (in pufferfish) to speed up selective-alignment; more are on the way (thanks to @mohsenzakeri). ## Bug fixes. * The bug described directly be",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:656,Deployability,install,installed,656,"# salmon 1.1.0 release notes. **Note** : This version contains some important fixes, please see below for detailed information. **Note** : On our testing machines, this version of salmon was _index_-compatible with version 1.0.0. That is, it is likely that you need not re-build your index from what you built with 1.0.0. However, it is not clear that this compatibility is guaranteed by the cereal library. If you encounter difficulty loading a previously-built index, please consider re-building with the latest version before filing a bug report. **Note** : If you want to build from source and use a version of the (header-only) cereal library already installed on your system, please make sure it is cereal v1.3.0. The current `findCereal.cmake` file does not support version restrictions, and we are working to improve this for proper automatic detection and enforcement of this constraint in future releases. *As always*, a pre-compiled linux executable is included below and the latest release is available via Bioconda. ## Improvements. * SHA512 sums are now properly propagated forward to `meta_info.json`. * Bumped the included version of the [cereal](https://github.com/USCiLab/cereal) serialization library. The components used by salmon _should_ be backward compatible in terms of reading output from the previous version (i.e. should not require index re-building). * The flag `--keepFixedFasta` was added to the `index` command. If this flag is passed, then a ""fixed"" version of the fasta file will be retained in the index directory. This file is created during indexing, but is normally deleted when indexing is complete. It contains the input fasta without duplicate sequences (unless `--keepDuplicates` was used), with the headers as understood by salmon, with `N` nucleotides replaced, etc. * Introduced a few small optimizations upstream (in pufferfish) to speed up selective-alignment; more are on the way (thanks to @mohsenzakeri). ## Bug fixes. * The bug described directly be",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:906,Deployability,release,releases,906,"# salmon 1.1.0 release notes. **Note** : This version contains some important fixes, please see below for detailed information. **Note** : On our testing machines, this version of salmon was _index_-compatible with version 1.0.0. That is, it is likely that you need not re-build your index from what you built with 1.0.0. However, it is not clear that this compatibility is guaranteed by the cereal library. If you encounter difficulty loading a previously-built index, please consider re-building with the latest version before filing a bug report. **Note** : If you want to build from source and use a version of the (header-only) cereal library already installed on your system, please make sure it is cereal v1.3.0. The current `findCereal.cmake` file does not support version restrictions, and we are working to improve this for proper automatic detection and enforcement of this constraint in future releases. *As always*, a pre-compiled linux executable is included below and the latest release is available via Bioconda. ## Improvements. * SHA512 sums are now properly propagated forward to `meta_info.json`. * Bumped the included version of the [cereal](https://github.com/USCiLab/cereal) serialization library. The components used by salmon _should_ be backward compatible in terms of reading output from the previous version (i.e. should not require index re-building). * The flag `--keepFixedFasta` was added to the `index` command. If this flag is passed, then a ""fixed"" version of the fasta file will be retained in the index directory. This file is created during indexing, but is normally deleted when indexing is complete. It contains the input fasta without duplicate sequences (unless `--keepDuplicates` was used), with the headers as understood by salmon, with `N` nucleotides replaced, etc. * Introduced a few small optimizations upstream (in pufferfish) to speed up selective-alignment; more are on the way (thanks to @mohsenzakeri). ## Bug fixes. * The bug described directly be",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:994,Deployability,release,release,994,"# salmon 1.1.0 release notes. **Note** : This version contains some important fixes, please see below for detailed information. **Note** : On our testing machines, this version of salmon was _index_-compatible with version 1.0.0. That is, it is likely that you need not re-build your index from what you built with 1.0.0. However, it is not clear that this compatibility is guaranteed by the cereal library. If you encounter difficulty loading a previously-built index, please consider re-building with the latest version before filing a bug report. **Note** : If you want to build from source and use a version of the (header-only) cereal library already installed on your system, please make sure it is cereal v1.3.0. The current `findCereal.cmake` file does not support version restrictions, and we are working to improve this for proper automatic detection and enforcement of this constraint in future releases. *As always*, a pre-compiled linux executable is included below and the latest release is available via Bioconda. ## Improvements. * SHA512 sums are now properly propagated forward to `meta_info.json`. * Bumped the included version of the [cereal](https://github.com/USCiLab/cereal) serialization library. The components used by salmon _should_ be backward compatible in terms of reading output from the previous version (i.e. should not require index re-building). * The flag `--keepFixedFasta` was added to the `index` command. If this flag is passed, then a ""fixed"" version of the fasta file will be retained in the index directory. This file is created during indexing, but is normally deleted when indexing is complete. It contains the input fasta without duplicate sequences (unless `--keepDuplicates` was used), with the headers as understood by salmon, with `N` nucleotides replaced, etc. * Introduced a few small optimizations upstream (in pufferfish) to speed up selective-alignment; more are on the way (thanks to @mohsenzakeri). ## Bug fixes. * The bug described directly be",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:3588,Energy Efficiency,reduce,reduce,3588,"e used for bias correction to be incorrect. The code was assuming zero-initalization of memory which was not necessarily occuring. **Note**: This bug affects runs performed under mapping-based mode (i.e. when the input was not coming from a BAM file) and when `--seqBias` or `--gcBias` flags (or both) were used. Depending upon the initialization of the underlying memory, the bug _may_ lead to unexpected results and diminished accuracy. The bug was present in versions 0.99.0 beta 1 through 1.0.0 (inclusive), and if you processed data using these versions in mapping-based mode with the flags mentioned above, _we encourage you to reprocess this data with the newest version, just in case_. We apologize for any inconvenience. * Fixed a bug that would occur when the input fasta file contained short sequences (<= length k) near the end of the file and bias correction (sequence-specific or fragment-GC) was enabled. This is particularly acute when the short sequence was immediately preceded by a very long target and would cause *inordinate* warning message printing to the log (hugely slowing down index loading). This printing to the log could slow the index loading considerably. Furthermore, this would provide sequence copies to short transcripts and decoy sequences even though they are not needed, which would result in unnecessary memory waste. The bug was due to a missing parenthesization to enforce the desired operator precedence. This fix should speed up index loading and reduce memory usage when using the `--seqBias` or `--gcBias` flags. *Huge* thanks to @mdshw5 for finding an input that would trigger this behavior (which didn't show up in testing), and for helping to track down the cause. * Fixed a bug that could occur in computing the Beta function component of the chaining score with *very* long queries. This should not have shown up at all with Illumina-length reads, but nonetheless the adjustment conceptually corrects the scoring for all cases. Thanks @mohsenzakeri.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:3152,Integrability,message,message,3152,"e used for bias correction to be incorrect. The code was assuming zero-initalization of memory which was not necessarily occuring. **Note**: This bug affects runs performed under mapping-based mode (i.e. when the input was not coming from a BAM file) and when `--seqBias` or `--gcBias` flags (or both) were used. Depending upon the initialization of the underlying memory, the bug _may_ lead to unexpected results and diminished accuracy. The bug was present in versions 0.99.0 beta 1 through 1.0.0 (inclusive), and if you processed data using these versions in mapping-based mode with the flags mentioned above, _we encourage you to reprocess this data with the newest version, just in case_. We apologize for any inconvenience. * Fixed a bug that would occur when the input fasta file contained short sequences (<= length k) near the end of the file and bias correction (sequence-specific or fragment-GC) was enabled. This is particularly acute when the short sequence was immediately preceded by a very long target and would cause *inordinate* warning message printing to the log (hugely slowing down index loading). This printing to the log could slow the index loading considerably. Furthermore, this would provide sequence copies to short transcripts and decoy sequences even though they are not needed, which would result in unnecessary memory waste. The bug was due to a missing parenthesization to enforce the desired operator precedence. This fix should speed up index loading and reduce memory usage when using the `--seqBias` or `--gcBias` flags. *Huge* thanks to @mdshw5 for finding an input that would trigger this behavior (which didn't show up in testing), and for helping to track down the cause. * Fixed a bug that could occur in computing the Beta function component of the chaining score with *very* long queries. This should not have shown up at all with Illumina-length reads, but nonetheless the adjustment conceptually corrects the scoring for all cases. Thanks @mohsenzakeri.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:436,Performance,load,loading,436,"# salmon 1.1.0 release notes. **Note** : This version contains some important fixes, please see below for detailed information. **Note** : On our testing machines, this version of salmon was _index_-compatible with version 1.0.0. That is, it is likely that you need not re-build your index from what you built with 1.0.0. However, it is not clear that this compatibility is guaranteed by the cereal library. If you encounter difficulty loading a previously-built index, please consider re-building with the latest version before filing a bug report. **Note** : If you want to build from source and use a version of the (header-only) cereal library already installed on your system, please make sure it is cereal v1.3.0. The current `findCereal.cmake` file does not support version restrictions, and we are working to improve this for proper automatic detection and enforcement of this constraint in future releases. *As always*, a pre-compiled linux executable is included below and the latest release is available via Bioconda. ## Improvements. * SHA512 sums are now properly propagated forward to `meta_info.json`. * Bumped the included version of the [cereal](https://github.com/USCiLab/cereal) serialization library. The components used by salmon _should_ be backward compatible in terms of reading output from the previous version (i.e. should not require index re-building). * The flag `--keepFixedFasta` was added to the `index` command. If this flag is passed, then a ""fixed"" version of the fasta file will be retained in the index directory. This file is created during indexing, but is normally deleted when indexing is complete. It contains the input fasta without duplicate sequences (unless `--keepDuplicates` was used), with the headers as understood by salmon, with `N` nucleotides replaced, etc. * Introduced a few small optimizations upstream (in pufferfish) to speed up selective-alignment; more are on the way (thanks to @mohsenzakeri). ## Bug fixes. * The bug described directly be",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:1837,Performance,optimiz,optimizations,1837,"s constraint in future releases. *As always*, a pre-compiled linux executable is included below and the latest release is available via Bioconda. ## Improvements. * SHA512 sums are now properly propagated forward to `meta_info.json`. * Bumped the included version of the [cereal](https://github.com/USCiLab/cereal) serialization library. The components used by salmon _should_ be backward compatible in terms of reading output from the previous version (i.e. should not require index re-building). * The flag `--keepFixedFasta` was added to the `index` command. If this flag is passed, then a ""fixed"" version of the fasta file will be retained in the index directory. This file is created during indexing, but is normally deleted when indexing is complete. It contains the input fasta without duplicate sequences (unless `--keepDuplicates` was used), with the headers as understood by salmon, with `N` nucleotides replaced, etc. * Introduced a few small optimizations upstream (in pufferfish) to speed up selective-alignment; more are on the way (thanks to @mohsenzakeri). ## Bug fixes. * The bug described directly below led to the discovery of a _different_ but related bug that could cause the extracted sequence used for bias correction to be incorrect. The code was assuming zero-initalization of memory which was not necessarily occuring. **Note**: This bug affects runs performed under mapping-based mode (i.e. when the input was not coming from a BAM file) and when `--seqBias` or `--gcBias` flags (or both) were used. Depending upon the initialization of the underlying memory, the bug _may_ lead to unexpected results and diminished accuracy. The bug was present in versions 0.99.0 beta 1 through 1.0.0 (inclusive), and if you processed data using these versions in mapping-based mode with the flags mentioned above, _we encourage you to reprocess this data with the newest version, just in case_. We apologize for any inconvenience. * Fixed a bug that would occur when the input fasta file",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:2260,Performance,perform,performed,2260," backward compatible in terms of reading output from the previous version (i.e. should not require index re-building). * The flag `--keepFixedFasta` was added to the `index` command. If this flag is passed, then a ""fixed"" version of the fasta file will be retained in the index directory. This file is created during indexing, but is normally deleted when indexing is complete. It contains the input fasta without duplicate sequences (unless `--keepDuplicates` was used), with the headers as understood by salmon, with `N` nucleotides replaced, etc. * Introduced a few small optimizations upstream (in pufferfish) to speed up selective-alignment; more are on the way (thanks to @mohsenzakeri). ## Bug fixes. * The bug described directly below led to the discovery of a _different_ but related bug that could cause the extracted sequence used for bias correction to be incorrect. The code was assuming zero-initalization of memory which was not necessarily occuring. **Note**: This bug affects runs performed under mapping-based mode (i.e. when the input was not coming from a BAM file) and when `--seqBias` or `--gcBias` flags (or both) were used. Depending upon the initialization of the underlying memory, the bug _may_ lead to unexpected results and diminished accuracy. The bug was present in versions 0.99.0 beta 1 through 1.0.0 (inclusive), and if you processed data using these versions in mapping-based mode with the flags mentioned above, _we encourage you to reprocess this data with the newest version, just in case_. We apologize for any inconvenience. * Fixed a bug that would occur when the input fasta file contained short sequences (<= length k) near the end of the file and bias correction (sequence-specific or fragment-GC) was enabled. This is particularly acute when the short sequence was immediately preceded by a very long target and would cause *inordinate* warning message printing to the log (hugely slowing down index loading). This printing to the log could slow the index ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:3207,Performance,load,loading,3207,"e used for bias correction to be incorrect. The code was assuming zero-initalization of memory which was not necessarily occuring. **Note**: This bug affects runs performed under mapping-based mode (i.e. when the input was not coming from a BAM file) and when `--seqBias` or `--gcBias` flags (or both) were used. Depending upon the initialization of the underlying memory, the bug _may_ lead to unexpected results and diminished accuracy. The bug was present in versions 0.99.0 beta 1 through 1.0.0 (inclusive), and if you processed data using these versions in mapping-based mode with the flags mentioned above, _we encourage you to reprocess this data with the newest version, just in case_. We apologize for any inconvenience. * Fixed a bug that would occur when the input fasta file contained short sequences (<= length k) near the end of the file and bias correction (sequence-specific or fragment-GC) was enabled. This is particularly acute when the short sequence was immediately preceded by a very long target and would cause *inordinate* warning message printing to the log (hugely slowing down index loading). This printing to the log could slow the index loading considerably. Furthermore, this would provide sequence copies to short transcripts and decoy sequences even though they are not needed, which would result in unnecessary memory waste. The bug was due to a missing parenthesization to enforce the desired operator precedence. This fix should speed up index loading and reduce memory usage when using the `--seqBias` or `--gcBias` flags. *Huge* thanks to @mdshw5 for finding an input that would trigger this behavior (which didn't show up in testing), and for helping to track down the cause. * Fixed a bug that could occur in computing the Beta function component of the chaining score with *very* long queries. This should not have shown up at all with Illumina-length reads, but nonetheless the adjustment conceptually corrects the scoring for all cases. Thanks @mohsenzakeri.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:3263,Performance,load,loading,3263,"e used for bias correction to be incorrect. The code was assuming zero-initalization of memory which was not necessarily occuring. **Note**: This bug affects runs performed under mapping-based mode (i.e. when the input was not coming from a BAM file) and when `--seqBias` or `--gcBias` flags (or both) were used. Depending upon the initialization of the underlying memory, the bug _may_ lead to unexpected results and diminished accuracy. The bug was present in versions 0.99.0 beta 1 through 1.0.0 (inclusive), and if you processed data using these versions in mapping-based mode with the flags mentioned above, _we encourage you to reprocess this data with the newest version, just in case_. We apologize for any inconvenience. * Fixed a bug that would occur when the input fasta file contained short sequences (<= length k) near the end of the file and bias correction (sequence-specific or fragment-GC) was enabled. This is particularly acute when the short sequence was immediately preceded by a very long target and would cause *inordinate* warning message printing to the log (hugely slowing down index loading). This printing to the log could slow the index loading considerably. Furthermore, this would provide sequence copies to short transcripts and decoy sequences even though they are not needed, which would result in unnecessary memory waste. The bug was due to a missing parenthesization to enforce the desired operator precedence. This fix should speed up index loading and reduce memory usage when using the `--seqBias` or `--gcBias` flags. *Huge* thanks to @mdshw5 for finding an input that would trigger this behavior (which didn't show up in testing), and for helping to track down the cause. * Fixed a bug that could occur in computing the Beta function component of the chaining score with *very* long queries. This should not have shown up at all with Illumina-length reads, but nonetheless the adjustment conceptually corrects the scoring for all cases. Thanks @mohsenzakeri.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:3576,Performance,load,loading,3576,"e used for bias correction to be incorrect. The code was assuming zero-initalization of memory which was not necessarily occuring. **Note**: This bug affects runs performed under mapping-based mode (i.e. when the input was not coming from a BAM file) and when `--seqBias` or `--gcBias` flags (or both) were used. Depending upon the initialization of the underlying memory, the bug _may_ lead to unexpected results and diminished accuracy. The bug was present in versions 0.99.0 beta 1 through 1.0.0 (inclusive), and if you processed data using these versions in mapping-based mode with the flags mentioned above, _we encourage you to reprocess this data with the newest version, just in case_. We apologize for any inconvenience. * Fixed a bug that would occur when the input fasta file contained short sequences (<= length k) near the end of the file and bias correction (sequence-specific or fragment-GC) was enabled. This is particularly acute when the short sequence was immediately preceded by a very long target and would cause *inordinate* warning message printing to the log (hugely slowing down index loading). This printing to the log could slow the index loading considerably. Furthermore, this would provide sequence copies to short transcripts and decoy sequences even though they are not needed, which would result in unnecessary memory waste. The bug was due to a missing parenthesization to enforce the desired operator precedence. This fix should speed up index loading and reduce memory usage when using the `--seqBias` or `--gcBias` flags. *Huge* thanks to @mdshw5 for finding an input that would trigger this behavior (which didn't show up in testing), and for helping to track down the cause. * Fixed a bug that could occur in computing the Beta function component of the chaining score with *very* long queries. This should not have shown up at all with Illumina-length reads, but nonetheless the adjustment conceptually corrects the scoring for all cases. Thanks @mohsenzakeri.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:851,Safety,detect,detection,851,"# salmon 1.1.0 release notes. **Note** : This version contains some important fixes, please see below for detailed information. **Note** : On our testing machines, this version of salmon was _index_-compatible with version 1.0.0. That is, it is likely that you need not re-build your index from what you built with 1.0.0. However, it is not clear that this compatibility is guaranteed by the cereal library. If you encounter difficulty loading a previously-built index, please consider re-building with the latest version before filing a bug report. **Note** : If you want to build from source and use a version of the (header-only) cereal library already installed on your system, please make sure it is cereal v1.3.0. The current `findCereal.cmake` file does not support version restrictions, and we are working to improve this for proper automatic detection and enforcement of this constraint in future releases. *As always*, a pre-compiled linux executable is included below and the latest release is available via Bioconda. ## Improvements. * SHA512 sums are now properly propagated forward to `meta_info.json`. * Bumped the included version of the [cereal](https://github.com/USCiLab/cereal) serialization library. The components used by salmon _should_ be backward compatible in terms of reading output from the previous version (i.e. should not require index re-building). * The flag `--keepFixedFasta` was added to the `index` command. If this flag is passed, then a ""fixed"" version of the fasta file will be retained in the index directory. This file is created during indexing, but is normally deleted when indexing is complete. It contains the input fasta without duplicate sequences (unless `--keepDuplicates` was used), with the headers as understood by salmon, with `N` nucleotides replaced, etc. * Introduced a few small optimizations upstream (in pufferfish) to speed up selective-alignment; more are on the way (thanks to @mohsenzakeri). ## Bug fixes. * The bug described directly be",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:146,Testability,test,testing,146,"# salmon 1.1.0 release notes. **Note** : This version contains some important fixes, please see below for detailed information. **Note** : On our testing machines, this version of salmon was _index_-compatible with version 1.0.0. That is, it is likely that you need not re-build your index from what you built with 1.0.0. However, it is not clear that this compatibility is guaranteed by the cereal library. If you encounter difficulty loading a previously-built index, please consider re-building with the latest version before filing a bug report. **Note** : If you want to build from source and use a version of the (header-only) cereal library already installed on your system, please make sure it is cereal v1.3.0. The current `findCereal.cmake` file does not support version restrictions, and we are working to improve this for proper automatic detection and enforcement of this constraint in future releases. *As always*, a pre-compiled linux executable is included below and the latest release is available via Bioconda. ## Improvements. * SHA512 sums are now properly propagated forward to `meta_info.json`. * Bumped the included version of the [cereal](https://github.com/USCiLab/cereal) serialization library. The components used by salmon _should_ be backward compatible in terms of reading output from the previous version (i.e. should not require index re-building). * The flag `--keepFixedFasta` was added to the `index` command. If this flag is passed, then a ""fixed"" version of the fasta file will be retained in the index directory. This file is created during indexing, but is normally deleted when indexing is complete. It contains the input fasta without duplicate sequences (unless `--keepDuplicates` was used), with the headers as understood by salmon, with `N` nucleotides replaced, etc. * Introduced a few small optimizations upstream (in pufferfish) to speed up selective-alignment; more are on the way (thanks to @mohsenzakeri). ## Bug fixes. * The bug described directly be",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:3176,Testability,log,log,3176,"e used for bias correction to be incorrect. The code was assuming zero-initalization of memory which was not necessarily occuring. **Note**: This bug affects runs performed under mapping-based mode (i.e. when the input was not coming from a BAM file) and when `--seqBias` or `--gcBias` flags (or both) were used. Depending upon the initialization of the underlying memory, the bug _may_ lead to unexpected results and diminished accuracy. The bug was present in versions 0.99.0 beta 1 through 1.0.0 (inclusive), and if you processed data using these versions in mapping-based mode with the flags mentioned above, _we encourage you to reprocess this data with the newest version, just in case_. We apologize for any inconvenience. * Fixed a bug that would occur when the input fasta file contained short sequences (<= length k) near the end of the file and bias correction (sequence-specific or fragment-GC) was enabled. This is particularly acute when the short sequence was immediately preceded by a very long target and would cause *inordinate* warning message printing to the log (hugely slowing down index loading). This printing to the log could slow the index loading considerably. Furthermore, this would provide sequence copies to short transcripts and decoy sequences even though they are not needed, which would result in unnecessary memory waste. The bug was due to a missing parenthesization to enforce the desired operator precedence. This fix should speed up index loading and reduce memory usage when using the `--seqBias` or `--gcBias` flags. *Huge* thanks to @mdshw5 for finding an input that would trigger this behavior (which didn't show up in testing), and for helping to track down the cause. * Fixed a bug that could occur in computing the Beta function component of the chaining score with *very* long queries. This should not have shown up at all with Illumina-length reads, but nonetheless the adjustment conceptually corrects the scoring for all cases. Thanks @mohsenzakeri.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:3238,Testability,log,log,3238,"e used for bias correction to be incorrect. The code was assuming zero-initalization of memory which was not necessarily occuring. **Note**: This bug affects runs performed under mapping-based mode (i.e. when the input was not coming from a BAM file) and when `--seqBias` or `--gcBias` flags (or both) were used. Depending upon the initialization of the underlying memory, the bug _may_ lead to unexpected results and diminished accuracy. The bug was present in versions 0.99.0 beta 1 through 1.0.0 (inclusive), and if you processed data using these versions in mapping-based mode with the flags mentioned above, _we encourage you to reprocess this data with the newest version, just in case_. We apologize for any inconvenience. * Fixed a bug that would occur when the input fasta file contained short sequences (<= length k) near the end of the file and bias correction (sequence-specific or fragment-GC) was enabled. This is particularly acute when the short sequence was immediately preceded by a very long target and would cause *inordinate* warning message printing to the log (hugely slowing down index loading). This printing to the log could slow the index loading considerably. Furthermore, this would provide sequence copies to short transcripts and decoy sequences even though they are not needed, which would result in unnecessary memory waste. The bug was due to a missing parenthesization to enforce the desired operator precedence. This fix should speed up index loading and reduce memory usage when using the `--seqBias` or `--gcBias` flags. *Huge* thanks to @mdshw5 for finding an input that would trigger this behavior (which didn't show up in testing), and for helping to track down the cause. * Fixed a bug that could occur in computing the Beta function component of the chaining score with *very* long queries. This should not have shown up at all with Illumina-length reads, but nonetheless the adjustment conceptually corrects the scoring for all cases. Thanks @mohsenzakeri.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:3760,Testability,test,testing,3760,"e used for bias correction to be incorrect. The code was assuming zero-initalization of memory which was not necessarily occuring. **Note**: This bug affects runs performed under mapping-based mode (i.e. when the input was not coming from a BAM file) and when `--seqBias` or `--gcBias` flags (or both) were used. Depending upon the initialization of the underlying memory, the bug _may_ lead to unexpected results and diminished accuracy. The bug was present in versions 0.99.0 beta 1 through 1.0.0 (inclusive), and if you processed data using these versions in mapping-based mode with the flags mentioned above, _we encourage you to reprocess this data with the newest version, just in case_. We apologize for any inconvenience. * Fixed a bug that would occur when the input fasta file contained short sequences (<= length k) near the end of the file and bias correction (sequence-specific or fragment-GC) was enabled. This is particularly acute when the short sequence was immediately preceded by a very long target and would cause *inordinate* warning message printing to the log (hugely slowing down index loading). This printing to the log could slow the index loading considerably. Furthermore, this would provide sequence copies to short transcripts and decoy sequences even though they are not needed, which would result in unnecessary memory waste. The bug was due to a missing parenthesization to enforce the desired operator precedence. This fix should speed up index loading and reduce memory usage when using the `--seqBias` or `--gcBias` flags. *Huge* thanks to @mdshw5 for finding an input that would trigger this behavior (which didn't show up in testing), and for helping to track down the cause. * Fixed a bug that could occur in computing the Beta function component of the chaining score with *very* long queries. This should not have shown up at all with Illumina-length reads, but nonetheless the adjustment conceptually corrects the scoring for all cases. Thanks @mohsenzakeri.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0:341,Usability,clear,clear,341,"# salmon 1.1.0 release notes. **Note** : This version contains some important fixes, please see below for detailed information. **Note** : On our testing machines, this version of salmon was _index_-compatible with version 1.0.0. That is, it is likely that you need not re-build your index from what you built with 1.0.0. However, it is not clear that this compatibility is guaranteed by the cereal library. If you encounter difficulty loading a previously-built index, please consider re-building with the latest version before filing a bug report. **Note** : If you want to build from source and use a version of the (header-only) cereal library already installed on your system, please make sure it is cereal v1.3.0. The current `findCereal.cmake` file does not support version restrictions, and we are working to improve this for proper automatic detection and enforcement of this constraint in future releases. *As always*, a pre-compiled linux executable is included below and the latest release is available via Bioconda. ## Improvements. * SHA512 sums are now properly propagated forward to `meta_info.json`. * Bumped the included version of the [cereal](https://github.com/USCiLab/cereal) serialization library. The components used by salmon _should_ be backward compatible in terms of reading output from the previous version (i.e. should not require index re-building). * The flag `--keepFixedFasta` was added to the `index` command. If this flag is passed, then a ""fixed"" version of the fasta file will be retained in the index directory. This file is created during indexing, but is normally deleted when indexing is complete. It contains the input fasta without duplicate sequences (unless `--keepDuplicates` was used), with the headers as understood by salmon, with `N` nucleotides replaced, etc. * Introduced a few small optimizations upstream (in pufferfish) to speed up selective-alignment; more are on the way (thanks to @mohsenzakeri). ## Bug fixes. * The bug described directly be",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.1.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0:23,Deployability,release,release,23,"This is a major stable release of salmon and brings a lot of exciting new features with extensive benchmarking in the latest [preprint](https://www.biorxiv.org/content/10.1101/657874v2). This new version of salmon is based on a fundamentally different indexing data structure ([pufferfish](http://bit.ly/2m1OSr3)) than the previous version. It also adopts a different mapping algorithm; a variant of selective-alignment. The new indexing data structure makes it possible to index the transcriptome as well as a large amount of ""decoy"" sequence in small memory. It also makes it possible to index the _entire transcriptome_ **and** _the entire genome_ in ""reasonable"" memory (currently ~18G in `dense` mode and ~14G in `sparse` mode, though these sizes may improve in the future), which provides a much more comprehensive set of potential decoy sequences. In the new index, the transcriptome and genome are on ""equal footing"", which helps to avoid bias toward either the transcriptome or the genome during mapping. **Note** : To construct the ccDBG from the reference sequence, which is subsequently indexed with pufferfish, salmon makes use of (a _very slightly modified_ version of) the [TwoPaCo software](https://github.com/medvedevgroup/TwoPaCo). TwoPaCo implements a very efficient algorithm for building a ccDBG from a collection of reference sequences. One of the key parameters of TwoPaCo is the size of the Bloom filter used to record and filter possible junction k-mers. To ease the indexing procedure, salmon will attempt to automatically set a reasonable estimate for the Bloom filter size, based on an estimate of the number of distinct k-mers in the reference and using a default FPR of 0.1% over TwoPaCo's default 5 filters. To quickly obtain an estimate of the number of distinct k-mers, salmon makes use of (a _very slightly modified_ version of) the [ntCard software](https://github.com/bcgsc/ntCard); specifically the `nthll` implementation. . ## Changes since v0.99.0 beta2; A bug r",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0:2257,Deployability,release,release,2257,".com/medvedevgroup/TwoPaCo). TwoPaCo implements a very efficient algorithm for building a ccDBG from a collection of reference sequences. One of the key parameters of TwoPaCo is the size of the Bloom filter used to record and filter possible junction k-mers. To ease the indexing procedure, salmon will attempt to automatically set a reasonable estimate for the Bloom filter size, based on an estimate of the number of distinct k-mers in the reference and using a default FPR of 0.1% over TwoPaCo's default 5 filters. To quickly obtain an estimate of the number of distinct k-mers, salmon makes use of (a _very slightly modified_ version of) the [ntCard software](https://github.com/bcgsc/ntCard); specifically the `nthll` implementation. . ## Changes since v0.99.0 beta2; A bug related to alevin index parsing is fixed. Specifically, if the length of any one decoy target is less than the kmer length then alevin was dumping gene counts for decoy targets. Thanks @csoneson for reporting this and it has been fixed in the latest stable release. ## Changes since v0.99.0 beta1; Allow passing of explicit filter size to the indexing command via the -f parameter (default is to estimate required filter size using nthll). Fix bug that prevented dumping SAM output, if requested, in alevin mode. Correctly enabled strictFilter mode in alevin, improving single-cell mapping quality. ## Changes since v0.14.1; The indexing methodology of salmon is now based on pufferfish. Thus, any previous indices need to be re-built. However, the new indexing methodology is considerably faster and more parallelizable than the previous approach, so providing multiple threads to the index command shoule make relatively short work of this task. The new version of salmon adopts a new and modified selective-alignment algorithm that is, nonetheless, very similar to the selective-alignment algorithm described in Alignment and mapping methodology influence transcript abundance estimation. In this release of salmon, se",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0:3200,Deployability,release,release,3200,"elease. ## Changes since v0.99.0 beta1; Allow passing of explicit filter size to the indexing command via the -f parameter (default is to estimate required filter size using nthll). Fix bug that prevented dumping SAM output, if requested, in alevin mode. Correctly enabled strictFilter mode in alevin, improving single-cell mapping quality. ## Changes since v0.14.1; The indexing methodology of salmon is now based on pufferfish. Thus, any previous indices need to be re-built. However, the new indexing methodology is considerably faster and more parallelizable than the previous approach, so providing multiple threads to the index command shoule make relatively short work of this task. The new version of salmon adopts a new and modified selective-alignment algorithm that is, nonetheless, very similar to the selective-alignment algorithm described in Alignment and mapping methodology influence transcript abundance estimation. In this release of salmon, selective-alignment is enabled by default (and, in fact, mapping without selective-alignemnt is disabled). We may explore, in the future, ways to allow disabling selecive-alignment under the new mapping approach, but at this point, it is always enabled. As a consequence of the above, range factorization is enabled by default. There is a new command-line flag --softclipOverhangs which allows reads that overhang the end of transcripts to be softclipped. The softclipped region will neither add to nor detract from the match score. This is more permissive than the default strategy which would require the overhaning bases of the read to be scored as a deletion under the alignment. There is a new command-line flag --hitFilterPolicy which determines the policy by which hits or chains of hits are filtered in selective alignment, prior to alignment scoring. Filtering hits after chaining (the default) is more sensitive, but more computationally intensive, because it performs the chaining dynamic program for all hits. Filtering before ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0:6572,Deployability,release,release,6572,"and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. The -d/--dumpEqWeights flag now dumps the information associated with whichever type of factorization is being used for quantification (the default now is range-factorized equivalence classes). The --dumpEq flag now always dumps simple equivalence classes. This means that no associated conditional probabilities are written to the file, and if range-factorization is being used, then all of the range-factorized equivalence classes that correspond to the same transcript set are collapsed into a simple equivalence class label and the corresponding counts are summed. There has been a change to the default behavior of the VB prior. The default VB prior is now evaluated on a per-transcript rather than per-nucleotide basis. The previous behavior is enabled enabled by passing --perNucleotidePrior option to the quant command. Considerable improvments have been made to fragment length modeling in the case of single-end samples. Alevin now contains a flag --quartzseq2 to support the Quartz-Seq2 protocol (thanks @dritoshi). bug fix: Alevin when provided with --dumpFeatures flag dumps featureDump.txt. The column header of the file was inconsistent with the values and has been fixed i.e. ArborescenceCount field should occur as the last column now. bug fix: The mtx format overflows the total number of genes boundary when the total number of genes are exactly a multiple of 8. It has been fixed to be consistent in the latest release. The following command-line flags have been removed (since, given the new index, they no longer serve a useful function): --allowOrphansFMD, --consistentHits, --quasiCoverage.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0:1276,Energy Efficiency,efficient,efficient,1276,"/2m1OSr3)) than the previous version. It also adopts a different mapping algorithm; a variant of selective-alignment. The new indexing data structure makes it possible to index the transcriptome as well as a large amount of ""decoy"" sequence in small memory. It also makes it possible to index the _entire transcriptome_ **and** _the entire genome_ in ""reasonable"" memory (currently ~18G in `dense` mode and ~14G in `sparse` mode, though these sizes may improve in the future), which provides a much more comprehensive set of potential decoy sequences. In the new index, the transcriptome and genome are on ""equal footing"", which helps to avoid bias toward either the transcriptome or the genome during mapping. **Note** : To construct the ccDBG from the reference sequence, which is subsequently indexed with pufferfish, salmon makes use of (a _very slightly modified_ version of) the [TwoPaCo software](https://github.com/medvedevgroup/TwoPaCo). TwoPaCo implements a very efficient algorithm for building a ccDBG from a collection of reference sequences. One of the key parameters of TwoPaCo is the size of the Bloom filter used to record and filter possible junction k-mers. To ease the indexing procedure, salmon will attempt to automatically set a reasonable estimate for the Bloom filter size, based on an estimate of the number of distinct k-mers in the reference and using a default FPR of 0.1% over TwoPaCo's default 5 filters. To quickly obtain an estimate of the number of distinct k-mers, salmon makes use of (a _very slightly modified_ version of) the [ntCard software](https://github.com/bcgsc/ntCard); specifically the `nthll` implementation. . ## Changes since v0.99.0 beta2; A bug related to alevin index parsing is fixed. Specifically, if the length of any one decoy target is less than the kmer length then alevin was dumping gene counts for decoy targets. Thanks @csoneson for reporting this and it has been fixed in the latest stable release. ## Changes since v0.99.0 beta1; Allow ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0:6139,Integrability,protocol,protocol,6139,"and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. The -d/--dumpEqWeights flag now dumps the information associated with whichever type of factorization is being used for quantification (the default now is range-factorized equivalence classes). The --dumpEq flag now always dumps simple equivalence classes. This means that no associated conditional probabilities are written to the file, and if range-factorization is being used, then all of the range-factorized equivalence classes that correspond to the same transcript set are collapsed into a simple equivalence class label and the corresponding counts are summed. There has been a change to the default behavior of the VB prior. The default VB prior is now evaluated on a per-transcript rather than per-nucleotide basis. The previous behavior is enabled enabled by passing --perNucleotidePrior option to the quant command. Considerable improvments have been made to fragment length modeling in the case of single-end samples. Alevin now contains a flag --quartzseq2 to support the Quartz-Seq2 protocol (thanks @dritoshi). bug fix: Alevin when provided with --dumpFeatures flag dumps featureDump.txt. The column header of the file was inconsistent with the values and has been fixed i.e. ArborescenceCount field should occur as the last column now. bug fix: The mtx format overflows the total number of genes boundary when the total number of genes are exactly a multiple of 8. It has been fixed to be consistent in the latest release. The following command-line flags have been removed (since, given the new index, they no longer serve a useful function): --allowOrphansFMD, --consistentHits, --quasiCoverage.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0:4189,Performance,perform,performs,4189,"transcript abundance estimation. In this release of salmon, selective-alignment is enabled by default (and, in fact, mapping without selective-alignemnt is disabled). We may explore, in the future, ways to allow disabling selecive-alignment under the new mapping approach, but at this point, it is always enabled. As a consequence of the above, range factorization is enabled by default. There is a new command-line flag --softclipOverhangs which allows reads that overhang the end of transcripts to be softclipped. The softclipped region will neither add to nor detract from the match score. This is more permissive than the default strategy which would require the overhaning bases of the read to be scored as a deletion under the alignment. There is a new command-line flag --hitFilterPolicy which determines the policy by which hits or chains of hits are filtered in selective alignment, prior to alignment scoring. Filtering hits after chaining (the default) is more sensitive, but more computationally intensive, because it performs the chaining dynamic program for all hits. Filtering before chaining is faster, but some true hits may be missed. The NONE option is not recommended, but is the most sensitive. It does not filter any chains based on score, though all methods only retain the highest-scoring chains per transcript for subsequent alignment score. The options are BEFORE, AFTER, BOTH and NONE. There is a new command-line flag --fullLengthAlignment, which performs selective-alignment over the full length of the read, beginning from the (approximate) initial mapping location and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. The -d/--dumpEqWei",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0:4634,Performance,perform,performs,4634," softclipped region will neither add to nor detract from the match score. This is more permissive than the default strategy which would require the overhaning bases of the read to be scored as a deletion under the alignment. There is a new command-line flag --hitFilterPolicy which determines the policy by which hits or chains of hits are filtered in selective alignment, prior to alignment scoring. Filtering hits after chaining (the default) is more sensitive, but more computationally intensive, because it performs the chaining dynamic program for all hits. Filtering before chaining is faster, but some true hits may be missed. The NONE option is not recommended, but is the most sensitive. It does not filter any chains based on score, though all methods only retain the highest-scoring chains per transcript for subsequent alignment score. The options are BEFORE, AFTER, BOTH and NONE. There is a new command-line flag --fullLengthAlignment, which performs selective-alignment over the full length of the read, beginning from the (approximate) initial mapping location and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. The -d/--dumpEqWeights flag now dumps the information associated with whichever type of factorization is being used for quantification (the default now is range-factorized equivalence classes). The --dumpEq flag now always dumps simple equivalence classes. This means that no associated conditional probabilities are written to the file, and if range-factorization is being used, then all of the range-factorized equivalence classes that correspond to the same transcript set are collapsed into a simple equivalence class label and the c",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0:4849,Performance,perform,perform,4849,"letion under the alignment. There is a new command-line flag --hitFilterPolicy which determines the policy by which hits or chains of hits are filtered in selective alignment, prior to alignment scoring. Filtering hits after chaining (the default) is more sensitive, but more computationally intensive, because it performs the chaining dynamic program for all hits. Filtering before chaining is faster, but some true hits may be missed. The NONE option is not recommended, but is the most sensitive. It does not filter any chains based on score, though all methods only retain the highest-scoring chains per transcript for subsequent alignment score. The options are BEFORE, AFTER, BOTH and NONE. There is a new command-line flag --fullLengthAlignment, which performs selective-alignment over the full length of the read, beginning from the (approximate) initial mapping location and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. The -d/--dumpEqWeights flag now dumps the information associated with whichever type of factorization is being used for quantification (the default now is range-factorized equivalence classes). The --dumpEq flag now always dumps simple equivalence classes. This means that no associated conditional probabilities are written to the file, and if range-factorization is being used, then all of the range-factorized equivalence classes that correspond to the same transcript set are collapsed into a simple equivalence class label and the corresponding counts are summed. There has been a change to the default behavior of the VB prior. The default VB prior is now evaluated on a per-transcript rather than per-nucleotide basis. The prev",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0:941,Safety,avoid,avoid,941,"This is a major stable release of salmon and brings a lot of exciting new features with extensive benchmarking in the latest [preprint](https://www.biorxiv.org/content/10.1101/657874v2). This new version of salmon is based on a fundamentally different indexing data structure ([pufferfish](http://bit.ly/2m1OSr3)) than the previous version. It also adopts a different mapping algorithm; a variant of selective-alignment. The new indexing data structure makes it possible to index the transcriptome as well as a large amount of ""decoy"" sequence in small memory. It also makes it possible to index the _entire transcriptome_ **and** _the entire genome_ in ""reasonable"" memory (currently ~18G in `dense` mode and ~14G in `sparse` mode, though these sizes may improve in the future), which provides a much more comprehensive set of potential decoy sequences. In the new index, the transcriptome and genome are on ""equal footing"", which helps to avoid bias toward either the transcriptome or the genome during mapping. **Note** : To construct the ccDBG from the reference sequence, which is subsequently indexed with pufferfish, salmon makes use of (a _very slightly modified_ version of) the [TwoPaCo software](https://github.com/medvedevgroup/TwoPaCo). TwoPaCo implements a very efficient algorithm for building a ccDBG from a collection of reference sequences. One of the key parameters of TwoPaCo is the size of the Bloom filter used to record and filter possible junction k-mers. To ease the indexing procedure, salmon will attempt to automatically set a reasonable estimate for the Bloom filter size, based on an estimate of the number of distinct k-mers in the reference and using a default FPR of 0.1% over TwoPaCo's default 5 filters. To quickly obtain an estimate of the number of distinct k-mers, salmon makes use of (a _very slightly modified_ version of) the [ntCard software](https://github.com/bcgsc/ntCard); specifically the `nthll` implementation. . ## Changes since v0.99.0 beta2; A bug r",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0:98,Testability,benchmark,benchmarking,98,"This is a major stable release of salmon and brings a lot of exciting new features with extensive benchmarking in the latest [preprint](https://www.biorxiv.org/content/10.1101/657874v2). This new version of salmon is based on a fundamentally different indexing data structure ([pufferfish](http://bit.ly/2m1OSr3)) than the previous version. It also adopts a different mapping algorithm; a variant of selective-alignment. The new indexing data structure makes it possible to index the transcriptome as well as a large amount of ""decoy"" sequence in small memory. It also makes it possible to index the _entire transcriptome_ **and** _the entire genome_ in ""reasonable"" memory (currently ~18G in `dense` mode and ~14G in `sparse` mode, though these sizes may improve in the future), which provides a much more comprehensive set of potential decoy sequences. In the new index, the transcriptome and genome are on ""equal footing"", which helps to avoid bias toward either the transcriptome or the genome during mapping. **Note** : To construct the ccDBG from the reference sequence, which is subsequently indexed with pufferfish, salmon makes use of (a _very slightly modified_ version of) the [TwoPaCo software](https://github.com/medvedevgroup/TwoPaCo). TwoPaCo implements a very efficient algorithm for building a ccDBG from a collection of reference sequences. One of the key parameters of TwoPaCo is the size of the Bloom filter used to record and filter possible junction k-mers. To ease the indexing procedure, salmon will attempt to automatically set a reasonable estimate for the Bloom filter size, based on an estimate of the number of distinct k-mers in the reference and using a default FPR of 0.1% over TwoPaCo's default 5 filters. To quickly obtain an estimate of the number of distinct k-mers, salmon makes use of (a _very slightly modified_ version of) the [ntCard software](https://github.com/bcgsc/ntCard); specifically the `nthll` implementation. . ## Changes since v0.99.0 beta2; A bug r",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0:5370,Usability,simpl,simple,5370,"ensitive. It does not filter any chains based on score, though all methods only retain the highest-scoring chains per transcript for subsequent alignment score. The options are BEFORE, AFTER, BOTH and NONE. There is a new command-line flag --fullLengthAlignment, which performs selective-alignment over the full length of the read, beginning from the (approximate) initial mapping location and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. The -d/--dumpEqWeights flag now dumps the information associated with whichever type of factorization is being used for quantification (the default now is range-factorized equivalence classes). The --dumpEq flag now always dumps simple equivalence classes. This means that no associated conditional probabilities are written to the file, and if range-factorization is being used, then all of the range-factorized equivalence classes that correspond to the same transcript set are collapsed into a simple equivalence class label and the corresponding counts are summed. There has been a change to the default behavior of the VB prior. The default VB prior is now evaluated on a per-transcript rather than per-nucleotide basis. The previous behavior is enabled enabled by passing --perNucleotidePrior option to the quant command. Considerable improvments have been made to fragment length modeling in the case of single-end samples. Alevin now contains a flag --quartzseq2 to support the Quartz-Seq2 protocol (thanks @dritoshi). bug fix: Alevin when provided with --dumpFeatures flag dumps featureDump.txt. The column header of the file was inconsistent with the values and has been fixed i.e. ArborescenceCount field should oc",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0
https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0:5638,Usability,simpl,simple,5638,"ER, BOTH and NONE. There is a new command-line flag --fullLengthAlignment, which performs selective-alignment over the full length of the read, beginning from the (approximate) initial mapping location and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. The -d/--dumpEqWeights flag now dumps the information associated with whichever type of factorization is being used for quantification (the default now is range-factorized equivalence classes). The --dumpEq flag now always dumps simple equivalence classes. This means that no associated conditional probabilities are written to the file, and if range-factorization is being used, then all of the range-factorized equivalence classes that correspond to the same transcript set are collapsed into a simple equivalence class label and the corresponding counts are summed. There has been a change to the default behavior of the VB prior. The default VB prior is now evaluated on a per-transcript rather than per-nucleotide basis. The previous behavior is enabled enabled by passing --perNucleotidePrior option to the quant command. Considerable improvments have been made to fragment length modeling in the case of single-end samples. Alevin now contains a flag --quartzseq2 to support the Quartz-Seq2 protocol (thanks @dritoshi). bug fix: Alevin when provided with --dumpFeatures flag dumps featureDump.txt. The column header of the file was inconsistent with the values and has been fixed i.e. ArborescenceCount field should occur as the last column now. bug fix: The mtx format overflows the total number of genes boundary when the total number of genes are exactly a multiple of 8. It has been fixed to be consis",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v1.0.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2:50,Deployability,release,release,50,"This is the second beta version of the next major release of salmon. This new version of salmon is based on a fundamentally different indexing data structure ([pufferfish](http://bit.ly/2m1OSr3)) than the previous version. It also adopts a different mapping algorithm; a variant of selective-alignment. The new indexing data structure makes it possible to index the transcriptome as well as a large amount of ""decoy"" sequence in small memory. It also makes it possible to index the _entire transcriptome_ **and** _the entire genome_ in ""reasonable"" memory (currently ~18G in `dense` mode and ~14G in `sparse` mode, though these sizes may improve in the future), which provides a much more comprehensive set of potential decoy sequences. In the new index, the transcriptome and genome are on ""equal footing"", which helps to avoid bias toward either the transcriptome or the genome during mapping. Since it constitutes such a major change (and advancement) in the indexing and alignment methodology, we are releasing beta versions of this new realease of salmon to give users the ability to try it out and to provide feedback before it becomes the ""default"" version you get via e.g. Bioconda. Since it is not currently possible to have both releases and ""betas"" in Bioconda, you can get the pre-compiled executables below, or build this version directly from the `develop` [branch](https://github.com/COMBINE-lab/salmon/tree/develop) of the salmon repository. . **Note** : To construct the ccDBG from the reference sequence, which is subsequently indexed with pufferfish, salmon makes use of (a _very slightly modified_ version of) the [TwoPaCo software](https://github.com/medvedevgroup/TwoPaCo). TwoPaCo implements a very efficient algorithm for building a ccDBG from a collection of reference sequences. One of the key parameters of TwoPaCo is the size of the Bloom filter used to record and filter possible junction k-mers. To ease the indexing procedure, salmon will attempt to automatically set a ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2:1239,Deployability,release,releases,1239,"alignment. The new indexing data structure makes it possible to index the transcriptome as well as a large amount of ""decoy"" sequence in small memory. It also makes it possible to index the _entire transcriptome_ **and** _the entire genome_ in ""reasonable"" memory (currently ~18G in `dense` mode and ~14G in `sparse` mode, though these sizes may improve in the future), which provides a much more comprehensive set of potential decoy sequences. In the new index, the transcriptome and genome are on ""equal footing"", which helps to avoid bias toward either the transcriptome or the genome during mapping. Since it constitutes such a major change (and advancement) in the indexing and alignment methodology, we are releasing beta versions of this new realease of salmon to give users the ability to try it out and to provide feedback before it becomes the ""default"" version you get via e.g. Bioconda. Since it is not currently possible to have both releases and ""betas"" in Bioconda, you can get the pre-compiled executables below, or build this version directly from the `develop` [branch](https://github.com/COMBINE-lab/salmon/tree/develop) of the salmon repository. . **Note** : To construct the ccDBG from the reference sequence, which is subsequently indexed with pufferfish, salmon makes use of (a _very slightly modified_ version of) the [TwoPaCo software](https://github.com/medvedevgroup/TwoPaCo). TwoPaCo implements a very efficient algorithm for building a ccDBG from a collection of reference sequences. One of the key parameters of TwoPaCo is the size of the Bloom filter used to record and filter possible junction k-mers. To ease the indexing procedure, salmon will attempt to automatically set a reasonable estimate for the Bloom filter size, based on an estimate of the number of distinct k-mers in the reference and using a default FPR of 0.1% over TwoPaCo's default 5 filters. To quickly obtain an estimate of the number of distinct k-mers, salmon makes use of (a _very slightly modifi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2:3413,Deployability,release,release,3413,"lter size to the indexing command via the `-f` parameter (default is to estimate required filter size using nthll). * Fix bug that prevented dumping SAM output, if requested, in alevin mode. * Correctly enabled `strictFilter` mode in alevin, improving single-cell mapping quality. ## Changes since v0.14.1. * The indexing methodology of salmon is now based on pufferfish. Thus, any previous indices need to be re-built. However, the new indexing methodology is considerably faster and more parallelizable than the previous approach, so providing multiple threads to the `index` command shoule make relatively short work of this task. ; * The new version of salmon adopts a new and modified selective-alignment algorithm that is, nonetheless, very similar to the selective-alignment algorithm described in [Alignment and mapping methodology influence transcript abundance estimation](https://www.biorxiv.org/content/10.1101/657874v1). In this release of salmon, selective-alignment is enabled by default (and, in fact, mapping without selective-alignemnt is disabled). We may explore, in the future, ways to allow disabling selecive-alignment under the new mapping approach, but at this point, it is always enabled.; ; * As a consequence of the above, range factorization is enabled by default. * There is a new command-line flag `--softclipOverhangs` which allows reads that overhang the end of transcripts to be softclipped. The softclipped region will neither add to nor detract from the match score. This is more permissive than the default strategy which would require the overhaning bases of the read to be scored as a deletion under the alignment. * There is a new command-line flag `--hitFilterPolicy` which determines the policy by which hits or chains of hits are filtered in selective alignment, prior to alignment scoring. Filtering hits after chaining (the default) is more sensitive, but more computationally intensive, because it performs the chaining dynamic program for all hits. Filt",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2:6832,Deployability,release,release,6832," in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. * The `-d/--dumpEqWeights` flag now dumps the information associated with whichever type of factorization is being used for quantification (the default now is range-factorized equivalence classes). The `--dumpEq` flag now always dumps _simple_ equivalence classes. This means that no associated conditional probabilities are written to the file, and if range-factorization is being used, then all of the range-factorized equivalence classes that correspond to the same transcript set are collapsed into a simple equivalence class label and the corresponding counts are summed. * There has been a change to the default behavior of the VB prior. The default VB prior is now evaluated on a per-transcript rather than per-nucleotide basis. The previous behavior is enabled enabled by passing `--perNucleotidePrior` option to the `quant` command. * Considerable improvments have been made to fragment length modeling in the case of single-end samples. * Alevin now contains a flag `--quartzseq2` to support the Quartz-Seq2 protocol (thanks @dritoshi). * bug fix: Alevin when provided with `--dumpFeatures` flag dumps `featureDump.txt`. The column header of the file was inconsistent with the values and has been fixed i.e. `ArborescenceCount` field should occur as the last column now. * bug fix: The mtx format overflows the total number of genes boundary when the total number of genes are exactly a multiple of 8. It has been fixed to be consistent in the latest release. * The following command-line flags have been removed (since, given the new index, they no longer serve a useful function): `--allowOrphansFMD`, `--consistentHits`, `--quasiCoverage`.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2:1722,Energy Efficiency,efficient,efficient,1722,"ndex, the transcriptome and genome are on ""equal footing"", which helps to avoid bias toward either the transcriptome or the genome during mapping. Since it constitutes such a major change (and advancement) in the indexing and alignment methodology, we are releasing beta versions of this new realease of salmon to give users the ability to try it out and to provide feedback before it becomes the ""default"" version you get via e.g. Bioconda. Since it is not currently possible to have both releases and ""betas"" in Bioconda, you can get the pre-compiled executables below, or build this version directly from the `develop` [branch](https://github.com/COMBINE-lab/salmon/tree/develop) of the salmon repository. . **Note** : To construct the ccDBG from the reference sequence, which is subsequently indexed with pufferfish, salmon makes use of (a _very slightly modified_ version of) the [TwoPaCo software](https://github.com/medvedevgroup/TwoPaCo). TwoPaCo implements a very efficient algorithm for building a ccDBG from a collection of reference sequences. One of the key parameters of TwoPaCo is the size of the Bloom filter used to record and filter possible junction k-mers. To ease the indexing procedure, salmon will attempt to automatically set a reasonable estimate for the Bloom filter size, based on an estimate of the number of distinct k-mers in the reference and using a default FPR of 0.1% over TwoPaCo's default 5 filters. To quickly obtain an estimate of the number of distinct k-mers, salmon makes use of (a _very slightly modified_ version of) the [ntCard software](https://github.com/bcgsc/ntCard); specifically the `nthill` implementation. . ## Changes since v0.99.0 beta1. * Allow passing of explicit filter size to the indexing command via the `-f` parameter (default is to estimate required filter size using nthll). * Fix bug that prevented dumping SAM output, if requested, in alevin mode. * Correctly enabled `strictFilter` mode in alevin, improving single-cell mapping quality",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2:6389,Integrability,protocol,protocol,6389," in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. * The `-d/--dumpEqWeights` flag now dumps the information associated with whichever type of factorization is being used for quantification (the default now is range-factorized equivalence classes). The `--dumpEq` flag now always dumps _simple_ equivalence classes. This means that no associated conditional probabilities are written to the file, and if range-factorization is being used, then all of the range-factorized equivalence classes that correspond to the same transcript set are collapsed into a simple equivalence class label and the corresponding counts are summed. * There has been a change to the default behavior of the VB prior. The default VB prior is now evaluated on a per-transcript rather than per-nucleotide basis. The previous behavior is enabled enabled by passing `--perNucleotidePrior` option to the `quant` command. * Considerable improvments have been made to fragment length modeling in the case of single-end samples. * Alevin now contains a flag `--quartzseq2` to support the Quartz-Seq2 protocol (thanks @dritoshi). * bug fix: Alevin when provided with `--dumpFeatures` flag dumps `featureDump.txt`. The column header of the file was inconsistent with the values and has been fixed i.e. `ArborescenceCount` field should occur as the last column now. * bug fix: The mtx format overflows the total number of genes boundary when the total number of genes are exactly a multiple of 8. It has been fixed to be consistent in the latest release. * The following command-line flags have been removed (since, given the new index, they no longer serve a useful function): `--allowOrphansFMD`, `--consistentHits`, `--quasiCoverage`.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2:4415,Performance,perform,performs,4415,"/10.1101/657874v1). In this release of salmon, selective-alignment is enabled by default (and, in fact, mapping without selective-alignemnt is disabled). We may explore, in the future, ways to allow disabling selecive-alignment under the new mapping approach, but at this point, it is always enabled.; ; * As a consequence of the above, range factorization is enabled by default. * There is a new command-line flag `--softclipOverhangs` which allows reads that overhang the end of transcripts to be softclipped. The softclipped region will neither add to nor detract from the match score. This is more permissive than the default strategy which would require the overhaning bases of the read to be scored as a deletion under the alignment. * There is a new command-line flag `--hitFilterPolicy` which determines the policy by which hits or chains of hits are filtered in selective alignment, prior to alignment scoring. Filtering hits after chaining (the default) is more sensitive, but more computationally intensive, because it performs the chaining dynamic program for all hits. Filtering before chaining is faster, but some true hits may be missed. The NONE option is not recommended, but is the most sensitive. It does not filter any chains based on score, though all methods only retain the highest-scoring chains per transcript for subsequent alignment score. The options are BEFORE, AFTER, BOTH and NONE. * There is a new command-line flag `--fullLengthAlignment`, which performs selective-alignment over the full length of the read, beginning from the (approximate) initial mapping location and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. * The `-d/--du",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2:4864,Performance,perform,performs,4864,"lipped region will neither add to nor detract from the match score. This is more permissive than the default strategy which would require the overhaning bases of the read to be scored as a deletion under the alignment. * There is a new command-line flag `--hitFilterPolicy` which determines the policy by which hits or chains of hits are filtered in selective alignment, prior to alignment scoring. Filtering hits after chaining (the default) is more sensitive, but more computationally intensive, because it performs the chaining dynamic program for all hits. Filtering before chaining is faster, but some true hits may be missed. The NONE option is not recommended, but is the most sensitive. It does not filter any chains based on score, though all methods only retain the highest-scoring chains per transcript for subsequent alignment score. The options are BEFORE, AFTER, BOTH and NONE. * There is a new command-line flag `--fullLengthAlignment`, which performs selective-alignment over the full length of the read, beginning from the (approximate) initial mapping location and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. * The `-d/--dumpEqWeights` flag now dumps the information associated with whichever type of factorization is being used for quantification (the default now is range-factorized equivalence classes). The `--dumpEq` flag now always dumps _simple_ equivalence classes. This means that no associated conditional probabilities are written to the file, and if range-factorization is being used, then all of the range-factorized equivalence classes that correspond to the same transcript set are collapsed into a simple equivalence class label",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2:5079,Performance,perform,perform,5079,"nder the alignment. * There is a new command-line flag `--hitFilterPolicy` which determines the policy by which hits or chains of hits are filtered in selective alignment, prior to alignment scoring. Filtering hits after chaining (the default) is more sensitive, but more computationally intensive, because it performs the chaining dynamic program for all hits. Filtering before chaining is faster, but some true hits may be missed. The NONE option is not recommended, but is the most sensitive. It does not filter any chains based on score, though all methods only retain the highest-scoring chains per transcript for subsequent alignment score. The options are BEFORE, AFTER, BOTH and NONE. * There is a new command-line flag `--fullLengthAlignment`, which performs selective-alignment over the full length of the read, beginning from the (approximate) initial mapping location and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. * The `-d/--dumpEqWeights` flag now dumps the information associated with whichever type of factorization is being used for quantification (the default now is range-factorized equivalence classes). The `--dumpEq` flag now always dumps _simple_ equivalence classes. This means that no associated conditional probabilities are written to the file, and if range-factorization is being used, then all of the range-factorized equivalence classes that correspond to the same transcript set are collapsed into a simple equivalence class label and the corresponding counts are summed. * There has been a change to the default behavior of the VB prior. The default VB prior is now evaluated on a per-transcript rather than per-nucleotide basis",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2:823,Safety,avoid,avoid,823,"This is the second beta version of the next major release of salmon. This new version of salmon is based on a fundamentally different indexing data structure ([pufferfish](http://bit.ly/2m1OSr3)) than the previous version. It also adopts a different mapping algorithm; a variant of selective-alignment. The new indexing data structure makes it possible to index the transcriptome as well as a large amount of ""decoy"" sequence in small memory. It also makes it possible to index the _entire transcriptome_ **and** _the entire genome_ in ""reasonable"" memory (currently ~18G in `dense` mode and ~14G in `sparse` mode, though these sizes may improve in the future), which provides a much more comprehensive set of potential decoy sequences. In the new index, the transcriptome and genome are on ""equal footing"", which helps to avoid bias toward either the transcriptome or the genome during mapping. Since it constitutes such a major change (and advancement) in the indexing and alignment methodology, we are releasing beta versions of this new realease of salmon to give users the ability to try it out and to provide feedback before it becomes the ""default"" version you get via e.g. Bioconda. Since it is not currently possible to have both releases and ""betas"" in Bioconda, you can get the pre-compiled executables below, or build this version directly from the `develop` [branch](https://github.com/COMBINE-lab/salmon/tree/develop) of the salmon repository. . **Note** : To construct the ccDBG from the reference sequence, which is subsequently indexed with pufferfish, salmon makes use of (a _very slightly modified_ version of) the [TwoPaCo software](https://github.com/medvedevgroup/TwoPaCo). TwoPaCo implements a very efficient algorithm for building a ccDBG from a collection of reference sequences. One of the key parameters of TwoPaCo is the size of the Bloom filter used to record and filter possible junction k-mers. To ease the indexing procedure, salmon will attempt to automatically set a ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2:1115,Usability,feedback,feedback,1115,"he next major release of salmon. This new version of salmon is based on a fundamentally different indexing data structure ([pufferfish](http://bit.ly/2m1OSr3)) than the previous version. It also adopts a different mapping algorithm; a variant of selective-alignment. The new indexing data structure makes it possible to index the transcriptome as well as a large amount of ""decoy"" sequence in small memory. It also makes it possible to index the _entire transcriptome_ **and** _the entire genome_ in ""reasonable"" memory (currently ~18G in `dense` mode and ~14G in `sparse` mode, though these sizes may improve in the future), which provides a much more comprehensive set of potential decoy sequences. In the new index, the transcriptome and genome are on ""equal footing"", which helps to avoid bias toward either the transcriptome or the genome during mapping. Since it constitutes such a major change (and advancement) in the indexing and alignment methodology, we are releasing beta versions of this new realease of salmon to give users the ability to try it out and to provide feedback before it becomes the ""default"" version you get via e.g. Bioconda. Since it is not currently possible to have both releases and ""betas"" in Bioconda, you can get the pre-compiled executables below, or build this version directly from the `develop` [branch](https://github.com/COMBINE-lab/salmon/tree/develop) of the salmon repository. . **Note** : To construct the ccDBG from the reference sequence, which is subsequently indexed with pufferfish, salmon makes use of (a _very slightly modified_ version of) the [TwoPaCo software](https://github.com/medvedevgroup/TwoPaCo). TwoPaCo implements a very efficient algorithm for building a ccDBG from a collection of reference sequences. One of the key parameters of TwoPaCo is the size of the Bloom filter used to record and filter possible junction k-mers. To ease the indexing procedure, salmon will attempt to automatically set a reasonable estimate for the Bloom fi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2:5876,Usability,simpl,simple,5876," NONE. * There is a new command-line flag `--fullLengthAlignment`, which performs selective-alignment over the full length of the read, beginning from the (approximate) initial mapping location and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. * The `-d/--dumpEqWeights` flag now dumps the information associated with whichever type of factorization is being used for quantification (the default now is range-factorized equivalence classes). The `--dumpEq` flag now always dumps _simple_ equivalence classes. This means that no associated conditional probabilities are written to the file, and if range-factorization is being used, then all of the range-factorized equivalence classes that correspond to the same transcript set are collapsed into a simple equivalence class label and the corresponding counts are summed. * There has been a change to the default behavior of the VB prior. The default VB prior is now evaluated on a per-transcript rather than per-nucleotide basis. The previous behavior is enabled enabled by passing `--perNucleotidePrior` option to the `quant` command. * Considerable improvments have been made to fragment length modeling in the case of single-end samples. * Alevin now contains a flag `--quartzseq2` to support the Quartz-Seq2 protocol (thanks @dritoshi). * bug fix: Alevin when provided with `--dumpFeatures` flag dumps `featureDump.txt`. The column header of the file was inconsistent with the values and has been fixed i.e. `ArborescenceCount` field should occur as the last column now. * bug fix: The mtx format overflows the total number of genes boundary when the total number of genes are exactly a multiple of 8. It has b",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1:49,Deployability,release,release,49,"This is the first beta version of the next major release of salmon. This new version of salmon is based on a fundamentally different indexing data structure ([pufferfish](http://bit.ly/2m1OSr3)) than the previous version. It also adopts a different mapping algorithm; a variant of selective-alignment. The new indexing data structure makes it possible to index the transcriptome as well as a large amount of ""decoy"" sequence in small memory. It also makes it possible to index the _entire transcriptome_ **and** _the entire genome_ in ""reasonable"" memory (currently ~18G in `dense` mode and ~14G in `sparse` mode, though these sizes may improve in the future), which provides a much more comprehensive set of potential decoy sequences. In the new index, the transcriptome and genome are on ""equal footing"", which helps to avoid bias toward either the transcriptome or the genome during mapping. Since it constitutes such a major change (and advancement) in the indexing and alignment methodology, we are releasing beta versions of this new realease of salmon to give users the ability to try it out and to provide feedback before it becomes the ""default"" version you get via e.g. Bioconda. Since it is not currently possible to have both releases and ""betas"" in Bioconda, you can get the pre-compiled executables below, or build this version directly from the `develop` [branch](https://github.com/COMBINE-lab/salmon/tree/develop) of the salmon repository. . **Note** : To construct the ccDBG from the reference sequence, which is subsequently indexed with pufferfish, salmon makes use of (a _very slightly modified_ version of) the [TwoPaCo software](https://github.com/medvedevgroup/TwoPaCo). TwoPaCo implements a very efficient algorithm for building a ccDBG from a collection of reference sequences. One of the key parameters of TwoPaCo is the size of the Bloom filter used to record and filter possible junction k-mers. To ease the indexing procedure, salmon will attempt to automatically set a r",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1:1238,Deployability,release,releases,1238,"alignment. The new indexing data structure makes it possible to index the transcriptome as well as a large amount of ""decoy"" sequence in small memory. It also makes it possible to index the _entire transcriptome_ **and** _the entire genome_ in ""reasonable"" memory (currently ~18G in `dense` mode and ~14G in `sparse` mode, though these sizes may improve in the future), which provides a much more comprehensive set of potential decoy sequences. In the new index, the transcriptome and genome are on ""equal footing"", which helps to avoid bias toward either the transcriptome or the genome during mapping. Since it constitutes such a major change (and advancement) in the indexing and alignment methodology, we are releasing beta versions of this new realease of salmon to give users the ability to try it out and to provide feedback before it becomes the ""default"" version you get via e.g. Bioconda. Since it is not currently possible to have both releases and ""betas"" in Bioconda, you can get the pre-compiled executables below, or build this version directly from the `develop` [branch](https://github.com/COMBINE-lab/salmon/tree/develop) of the salmon repository. . **Note** : To construct the ccDBG from the reference sequence, which is subsequently indexed with pufferfish, salmon makes use of (a _very slightly modified_ version of) the [TwoPaCo software](https://github.com/medvedevgroup/TwoPaCo). TwoPaCo implements a very efficient algorithm for building a ccDBG from a collection of reference sequences. One of the key parameters of TwoPaCo is the size of the Bloom filter used to record and filter possible junction k-mers. To ease the indexing procedure, salmon will attempt to automatically set a reasonable estimate for the Bloom filter size, based on an estimate of the number of distinct k-mers in the reference and using a default FPR of 0.1% over TwoPaCo's default 5 filters. To quickly obtain an estimate of the number of distinct k-mers, salmon makes use of (a _very slightly modifi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1:3069,Deployability,release,release,3069," a default FPR of 0.1% over TwoPaCo's default 5 filters. To quickly obtain an estimate of the number of distinct k-mers, salmon makes use of (a _very slightly modified_ version of) the [ntCard software](https://github.com/bcgsc/ntCard); specifically the `nthill` implementation. . ## Changes since v0.14.1. * The indexing methodology of salmon is now based on pufferfish. Thus, any previous indices need to be re-built. However, the new indexing methodology is considerably faster and more parallelizable than the previous approach, so providing multiple threads to the `index` command shoule make relatively short work of this task. ; * The new version of salmon adopts a new and modified selective-alignment algorithm that is, nonetheless, very similar to the selective-alignment algorithm described in [Alignment and mapping methodology influence transcript abundance estimation](https://www.biorxiv.org/content/10.1101/657874v1). In this release of salmon, selective-alignment is enabled by default (and, in fact, mapping without selective-alignemnt is disabled). We may explore, in the future, ways to allow disabling selecive-alignment under the new mapping approach, but at this point, it is always enabled.; ; * As a consequence of the above, range factorization is enabled by default. * There is a new command-line flag `--softclipOverhangs` which allows reads that overhang the end of transcripts to be softclipped. The softclipped region will neither add to nor detract from the match score. This is more permissive than the default strategy which would require the overhaning bases of the read to be scored as a deletion under the alignment. * There is a new command-line flag `--hitFilterPolicy` which determines the policy by which hits or chains of hits are filtered in selective alignment, prior to alignment scoring. Filtering hits after chaining (the default) is more sensitive, but more computationally intensive, because it performs the chaining dynamic program for all hits. Filt",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1:1721,Energy Efficiency,efficient,efficient,1721,"ndex, the transcriptome and genome are on ""equal footing"", which helps to avoid bias toward either the transcriptome or the genome during mapping. Since it constitutes such a major change (and advancement) in the indexing and alignment methodology, we are releasing beta versions of this new realease of salmon to give users the ability to try it out and to provide feedback before it becomes the ""default"" version you get via e.g. Bioconda. Since it is not currently possible to have both releases and ""betas"" in Bioconda, you can get the pre-compiled executables below, or build this version directly from the `develop` [branch](https://github.com/COMBINE-lab/salmon/tree/develop) of the salmon repository. . **Note** : To construct the ccDBG from the reference sequence, which is subsequently indexed with pufferfish, salmon makes use of (a _very slightly modified_ version of) the [TwoPaCo software](https://github.com/medvedevgroup/TwoPaCo). TwoPaCo implements a very efficient algorithm for building a ccDBG from a collection of reference sequences. One of the key parameters of TwoPaCo is the size of the Bloom filter used to record and filter possible junction k-mers. To ease the indexing procedure, salmon will attempt to automatically set a reasonable estimate for the Bloom filter size, based on an estimate of the number of distinct k-mers in the reference and using a default FPR of 0.1% over TwoPaCo's default 5 filters. To quickly obtain an estimate of the number of distinct k-mers, salmon makes use of (a _very slightly modified_ version of) the [ntCard software](https://github.com/bcgsc/ntCard); specifically the `nthill` implementation. . ## Changes since v0.14.1. * The indexing methodology of salmon is now based on pufferfish. Thus, any previous indices need to be re-built. However, the new indexing methodology is considerably faster and more parallelizable than the previous approach, so providing multiple threads to the `index` command shoule make relatively short work of",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1:6045,Integrability,protocol,protocol,6045,"--fullLengthAlignment`, which performs selective-alignment over the full length of the read, beginning from the (approximate) initial mapping location and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. * The `-d/--dumpEqWeights` flag now dumps the information associated with whichever type of factorization is being used for quantification (the default now is range-factorized equivalence classes). The `--dumpEq` flag now always dumps _simple_ equivalence classes. This means that no associated conditional probabilities are written to the file, and if range-factorization is being used, then all of the range-factorized equivalence classes that correspond to the same transcript set are collapsed into a simple equivalence class label and the corresponding counts are summed. * There has been a change to the default behavior of the VB prior. The default VB prior is now evaluated on a per-transcript rather than per-nucleotide basis. The previous behavior is enabled enabled by passing `--perNucleotidePrior` option to the `quant` command. * Considerable improvments have been made to fragment length modeling in the case of single-end samples. * Alevin now contains a flag `--quartzseq2` to support the Quartz-Seq2 protocol (thanks @dritoshi). * bug fix: Alevin when provided with `--dumpFeatures` flag dumps `featureDump.txt`. The column header of the file was inconsistent with the values and has been fixed i.e. `ArborescenceCount` field should occur as the last column now. * The following command-line flags have been removed (since, given the new index, they no longer serve a useful function): `--allowOrphansFMD`, `--consistentHits`, `--quasiCoverage`.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1:4071,Performance,perform,performs,4071,"/10.1101/657874v1). In this release of salmon, selective-alignment is enabled by default (and, in fact, mapping without selective-alignemnt is disabled). We may explore, in the future, ways to allow disabling selecive-alignment under the new mapping approach, but at this point, it is always enabled.; ; * As a consequence of the above, range factorization is enabled by default. * There is a new command-line flag `--softclipOverhangs` which allows reads that overhang the end of transcripts to be softclipped. The softclipped region will neither add to nor detract from the match score. This is more permissive than the default strategy which would require the overhaning bases of the read to be scored as a deletion under the alignment. * There is a new command-line flag `--hitFilterPolicy` which determines the policy by which hits or chains of hits are filtered in selective alignment, prior to alignment scoring. Filtering hits after chaining (the default) is more sensitive, but more computationally intensive, because it performs the chaining dynamic program for all hits. Filtering before chaining is faster, but some true hits may be missed. The NONE option is not recommended, but is the most sensitive. It does not filter any chains based on score, though all methods only retain the highest-scoring chains per transcript for subsequent alignment score. The options are BEFORE, AFTER, BOTH and NONE. * There is a new command-line flag `--fullLengthAlignment`, which performs selective-alignment over the full length of the read, beginning from the (approximate) initial mapping location and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. * The `-d/--du",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1:4520,Performance,perform,performs,4520,"lipped region will neither add to nor detract from the match score. This is more permissive than the default strategy which would require the overhaning bases of the read to be scored as a deletion under the alignment. * There is a new command-line flag `--hitFilterPolicy` which determines the policy by which hits or chains of hits are filtered in selective alignment, prior to alignment scoring. Filtering hits after chaining (the default) is more sensitive, but more computationally intensive, because it performs the chaining dynamic program for all hits. Filtering before chaining is faster, but some true hits may be missed. The NONE option is not recommended, but is the most sensitive. It does not filter any chains based on score, though all methods only retain the highest-scoring chains per transcript for subsequent alignment score. The options are BEFORE, AFTER, BOTH and NONE. * There is a new command-line flag `--fullLengthAlignment`, which performs selective-alignment over the full length of the read, beginning from the (approximate) initial mapping location and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. * The `-d/--dumpEqWeights` flag now dumps the information associated with whichever type of factorization is being used for quantification (the default now is range-factorized equivalence classes). The `--dumpEq` flag now always dumps _simple_ equivalence classes. This means that no associated conditional probabilities are written to the file, and if range-factorization is being used, then all of the range-factorized equivalence classes that correspond to the same transcript set are collapsed into a simple equivalence class label",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1:4735,Performance,perform,perform,4735,"nder the alignment. * There is a new command-line flag `--hitFilterPolicy` which determines the policy by which hits or chains of hits are filtered in selective alignment, prior to alignment scoring. Filtering hits after chaining (the default) is more sensitive, but more computationally intensive, because it performs the chaining dynamic program for all hits. Filtering before chaining is faster, but some true hits may be missed. The NONE option is not recommended, but is the most sensitive. It does not filter any chains based on score, though all methods only retain the highest-scoring chains per transcript for subsequent alignment score. The options are BEFORE, AFTER, BOTH and NONE. * There is a new command-line flag `--fullLengthAlignment`, which performs selective-alignment over the full length of the read, beginning from the (approximate) initial mapping location and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. * The `-d/--dumpEqWeights` flag now dumps the information associated with whichever type of factorization is being used for quantification (the default now is range-factorized equivalence classes). The `--dumpEq` flag now always dumps _simple_ equivalence classes. This means that no associated conditional probabilities are written to the file, and if range-factorization is being used, then all of the range-factorized equivalence classes that correspond to the same transcript set are collapsed into a simple equivalence class label and the corresponding counts are summed. * There has been a change to the default behavior of the VB prior. The default VB prior is now evaluated on a per-transcript rather than per-nucleotide basis",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1:822,Safety,avoid,avoid,822,"This is the first beta version of the next major release of salmon. This new version of salmon is based on a fundamentally different indexing data structure ([pufferfish](http://bit.ly/2m1OSr3)) than the previous version. It also adopts a different mapping algorithm; a variant of selective-alignment. The new indexing data structure makes it possible to index the transcriptome as well as a large amount of ""decoy"" sequence in small memory. It also makes it possible to index the _entire transcriptome_ **and** _the entire genome_ in ""reasonable"" memory (currently ~18G in `dense` mode and ~14G in `sparse` mode, though these sizes may improve in the future), which provides a much more comprehensive set of potential decoy sequences. In the new index, the transcriptome and genome are on ""equal footing"", which helps to avoid bias toward either the transcriptome or the genome during mapping. Since it constitutes such a major change (and advancement) in the indexing and alignment methodology, we are releasing beta versions of this new realease of salmon to give users the ability to try it out and to provide feedback before it becomes the ""default"" version you get via e.g. Bioconda. Since it is not currently possible to have both releases and ""betas"" in Bioconda, you can get the pre-compiled executables below, or build this version directly from the `develop` [branch](https://github.com/COMBINE-lab/salmon/tree/develop) of the salmon repository. . **Note** : To construct the ccDBG from the reference sequence, which is subsequently indexed with pufferfish, salmon makes use of (a _very slightly modified_ version of) the [TwoPaCo software](https://github.com/medvedevgroup/TwoPaCo). TwoPaCo implements a very efficient algorithm for building a ccDBG from a collection of reference sequences. One of the key parameters of TwoPaCo is the size of the Bloom filter used to record and filter possible junction k-mers. To ease the indexing procedure, salmon will attempt to automatically set a r",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1:1114,Usability,feedback,feedback,1114,"he next major release of salmon. This new version of salmon is based on a fundamentally different indexing data structure ([pufferfish](http://bit.ly/2m1OSr3)) than the previous version. It also adopts a different mapping algorithm; a variant of selective-alignment. The new indexing data structure makes it possible to index the transcriptome as well as a large amount of ""decoy"" sequence in small memory. It also makes it possible to index the _entire transcriptome_ **and** _the entire genome_ in ""reasonable"" memory (currently ~18G in `dense` mode and ~14G in `sparse` mode, though these sizes may improve in the future), which provides a much more comprehensive set of potential decoy sequences. In the new index, the transcriptome and genome are on ""equal footing"", which helps to avoid bias toward either the transcriptome or the genome during mapping. Since it constitutes such a major change (and advancement) in the indexing and alignment methodology, we are releasing beta versions of this new realease of salmon to give users the ability to try it out and to provide feedback before it becomes the ""default"" version you get via e.g. Bioconda. Since it is not currently possible to have both releases and ""betas"" in Bioconda, you can get the pre-compiled executables below, or build this version directly from the `develop` [branch](https://github.com/COMBINE-lab/salmon/tree/develop) of the salmon repository. . **Note** : To construct the ccDBG from the reference sequence, which is subsequently indexed with pufferfish, salmon makes use of (a _very slightly modified_ version of) the [TwoPaCo software](https://github.com/medvedevgroup/TwoPaCo). TwoPaCo implements a very efficient algorithm for building a ccDBG from a collection of reference sequences. One of the key parameters of TwoPaCo is the size of the Bloom filter used to record and filter possible junction k-mers. To ease the indexing procedure, salmon will attempt to automatically set a reasonable estimate for the Bloom fi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1:5532,Usability,simpl,simple,5532," NONE. * There is a new command-line flag `--fullLengthAlignment`, which performs selective-alignment over the full length of the read, beginning from the (approximate) initial mapping location and using extension alignment. This is in contrast with the default behavior which is to only perform alignment between the MEMs in the optimal chain (and before the first and after the last MEM if applicable). The default strategy forces the MEMs to belong to the alignment, but has the benefit that it can discover indels prior to the first hit shared between the read and reference. * The `-d/--dumpEqWeights` flag now dumps the information associated with whichever type of factorization is being used for quantification (the default now is range-factorized equivalence classes). The `--dumpEq` flag now always dumps _simple_ equivalence classes. This means that no associated conditional probabilities are written to the file, and if range-factorization is being used, then all of the range-factorized equivalence classes that correspond to the same transcript set are collapsed into a simple equivalence class label and the corresponding counts are summed. * There has been a change to the default behavior of the VB prior. The default VB prior is now evaluated on a per-transcript rather than per-nucleotide basis. The previous behavior is enabled enabled by passing `--perNucleotidePrior` option to the `quant` command. * Considerable improvments have been made to fragment length modeling in the case of single-end samples. * Alevin now contains a flag `--quartzseq2` to support the Quartz-Seq2 protocol (thanks @dritoshi). * bug fix: Alevin when provided with `--dumpFeatures` flag dumps `featureDump.txt`. The column header of the file was inconsistent with the values and has been fixed i.e. `ArborescenceCount` field should occur as the last column now. * The following command-line flags have been removed (since, given the new index, they no longer serve a useful function): `--allowOrphansF",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:4612,Availability,error,error,4612,"put to stdout. **NOTE**: If you are having difficulty using the `-z`/`--writeMappings` flag to write output to a file (e.g using `-z <file.sam>` or `--writeMappings <file.sam>`), try using `-z=<file.sam>` or `--writeMappings=<file.sam>` instead --- this appears to be an issue with Boost's argument parsing library for flags that have implicit as well as default values. * Salmon now automatically detects, during indexing, if it believes that the transcriptome being indexed is in GENCODE format and the `--gencode` flag has not been passed. In this case, it issues a warning, since we generally recommend to use this flag when indexing GENCODE transcriptomes (to avoid the very long transcript names in the output). This implements feature request [366](https://github.com/COMBINE-lab/salmon/issues/366); thanks @alexvpickering. * The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. * The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. suffix array intervals) that a mapping may miss and still be consdered valid for chaining. ## Improvements and new flags for bulk mode. When writing out mappings in conjunction with . The flags below are either new, or only present since v0.13.0 and are therefore highlighted again below for completeness:. * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and selective alignment to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:6208,Availability,recover,recoverOrphans,6208,"e either new, or only present since v0.13.0 and are therefore highlighted again below for completeness:. * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and selective alignment to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and selective alignment to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with selective alignment), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with selective alignment) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuan",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:6545,Availability,down,downstream,6545,"mic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and selective alignment to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with selective alignment), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with selective alignment) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with selective alignment), sets the bandwidth",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:6739,Availability,down,downstream,6739,"ts the parameters related to mapping and selective alignment to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with selective alignment), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with selective alignment) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with selective alignment), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with selectiv",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:8539,Availability,avail,available,8539,"ignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with selective alignment) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. Through broad benchmarking across many samples, we have worked to considerably improve the selective-alignment algorithm and its sensitivity. **We note** that it is likely selective alignment will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it.; Along with the default selective alignment (enabled via `--validateMappings`), there are two ""meta"" flags that enable selective alignment parameters meant to mimic configurations in which users might be interested. . ### New information available in meta_info.json. * The following fields have been added to `meta_info.json`:; * `num_valid_targets`: The number of non-decoy targets in the index used for mapping.; * `num_decoy_targets`: The number of decoy targets in the index used for mapping (only meaningful in mapping-based mode).; * `num_decoy_fragments`: The number of fragments that were discarded from quantification because they best-aligned to a decoy target rather than a valid transcript.; * `num_dovetail_fragments` : which denotes the number of fragments that have _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without selective alignment).; * `num_fragments_filtered_vm` : which denotes the number of fragments that had a mapping to the transcriptome, but which were discarded because _none_ of the mappings for the frag",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:11708,Availability,error,errors,11708,"; * Deduplication rate i.e. 1 - (#deduplicated reads / #mapped reads); * Mean / Max of the expressed gene quantification estimates.; * Number of expressed genes.; * Number of genes with the count estimates more than the mean.; * Average Number of Reads deduplicated in each Arboresnce; * Command line flag `--dumpUmiGraph`, along with the per cell level UMI graphs also dumps the frequency of the number of reads used for deduplicating an arborescence. It is added to the last column of the `featureDump.txt` as `#Reads:#arborescence` pairs separated by tab.; * The binary output format of alevin, `quants_mat.gz`, has been changed into a sparse single precision format. In pratice we saw the file size reduced to as big as half the size of the original file.; * New command line flag `--dumpMtx` is added to dump the quants in matrix-market-exchange(mtx) sparse format.; * In case of encountered errors in different stages of the alevin pipeline, instead of default error-code of 1, following four categories of error-codes will be reported by alevin for automated debugging:; * 1: Error while mapping reads and/or generic errors.; * 64: Error in knee estimation / Cellular Barcode sequence correction.; * 74: Error while deduplicating UMI and/or EM optimization.; * 84: Error while intelligent whitelisting. ## Bug fixes, deprecations and removals. * A bug in the `quantmerge` command (issue [356](https://github.com/COMBINE-lab/salmon/issues/356)) that could cause the output of `quantmerge` to be truncated was fixed (the bug was first introduced in v0.13.0). * Added missing explicit initialization for variable that could affect the initialization condition of the optimization; thank @come-raczy. * Following developer(hidden) flags have been deprecated:; * --dumpUmitoolsMap (permanently disabled); * --noSoftMap (Always assumed True); * --dumpBarcodeMap (permanently disabled); * --noBarcode (Always assumed False); * Following user flags have been deprecated:; * --debug (Always assumed True",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:11778,Availability,error,error-code,11778,"; * Deduplication rate i.e. 1 - (#deduplicated reads / #mapped reads); * Mean / Max of the expressed gene quantification estimates.; * Number of expressed genes.; * Number of genes with the count estimates more than the mean.; * Average Number of Reads deduplicated in each Arboresnce; * Command line flag `--dumpUmiGraph`, along with the per cell level UMI graphs also dumps the frequency of the number of reads used for deduplicating an arborescence. It is added to the last column of the `featureDump.txt` as `#Reads:#arborescence` pairs separated by tab.; * The binary output format of alevin, `quants_mat.gz`, has been changed into a sparse single precision format. In pratice we saw the file size reduced to as big as half the size of the original file.; * New command line flag `--dumpMtx` is added to dump the quants in matrix-market-exchange(mtx) sparse format.; * In case of encountered errors in different stages of the alevin pipeline, instead of default error-code of 1, following four categories of error-codes will be reported by alevin for automated debugging:; * 1: Error while mapping reads and/or generic errors.; * 64: Error in knee estimation / Cellular Barcode sequence correction.; * 74: Error while deduplicating UMI and/or EM optimization.; * 84: Error while intelligent whitelisting. ## Bug fixes, deprecations and removals. * A bug in the `quantmerge` command (issue [356](https://github.com/COMBINE-lab/salmon/issues/356)) that could cause the output of `quantmerge` to be truncated was fixed (the bug was first introduced in v0.13.0). * Added missing explicit initialization for variable that could affect the initialization condition of the optimization; thank @come-raczy. * Following developer(hidden) flags have been deprecated:; * --dumpUmitoolsMap (permanently disabled); * --noSoftMap (Always assumed True); * --dumpBarcodeMap (permanently disabled); * --noBarcode (Always assumed False); * Following user flags have been deprecated:; * --debug (Always assumed True",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:11824,Availability,error,error-codes,11824,"; * Deduplication rate i.e. 1 - (#deduplicated reads / #mapped reads); * Mean / Max of the expressed gene quantification estimates.; * Number of expressed genes.; * Number of genes with the count estimates more than the mean.; * Average Number of Reads deduplicated in each Arboresnce; * Command line flag `--dumpUmiGraph`, along with the per cell level UMI graphs also dumps the frequency of the number of reads used for deduplicating an arborescence. It is added to the last column of the `featureDump.txt` as `#Reads:#arborescence` pairs separated by tab.; * The binary output format of alevin, `quants_mat.gz`, has been changed into a sparse single precision format. In pratice we saw the file size reduced to as big as half the size of the original file.; * New command line flag `--dumpMtx` is added to dump the quants in matrix-market-exchange(mtx) sparse format.; * In case of encountered errors in different stages of the alevin pipeline, instead of default error-code of 1, following four categories of error-codes will be reported by alevin for automated debugging:; * 1: Error while mapping reads and/or generic errors.; * 64: Error in knee estimation / Cellular Barcode sequence correction.; * 74: Error while deduplicating UMI and/or EM optimization.; * 84: Error while intelligent whitelisting. ## Bug fixes, deprecations and removals. * A bug in the `quantmerge` command (issue [356](https://github.com/COMBINE-lab/salmon/issues/356)) that could cause the output of `quantmerge` to be truncated was fixed (the bug was first introduced in v0.13.0). * Added missing explicit initialization for variable that could affect the initialization condition of the optimization; thank @come-raczy. * Following developer(hidden) flags have been deprecated:; * --dumpUmitoolsMap (permanently disabled); * --noSoftMap (Always assumed True); * --dumpBarcodeMap (permanently disabled); * --noBarcode (Always assumed False); * Following user flags have been deprecated:; * --debug (Always assumed True",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:11935,Availability,error,errors,11935,"; * Deduplication rate i.e. 1 - (#deduplicated reads / #mapped reads); * Mean / Max of the expressed gene quantification estimates.; * Number of expressed genes.; * Number of genes with the count estimates more than the mean.; * Average Number of Reads deduplicated in each Arboresnce; * Command line flag `--dumpUmiGraph`, along with the per cell level UMI graphs also dumps the frequency of the number of reads used for deduplicating an arborescence. It is added to the last column of the `featureDump.txt` as `#Reads:#arborescence` pairs separated by tab.; * The binary output format of alevin, `quants_mat.gz`, has been changed into a sparse single precision format. In pratice we saw the file size reduced to as big as half the size of the original file.; * New command line flag `--dumpMtx` is added to dump the quants in matrix-market-exchange(mtx) sparse format.; * In case of encountered errors in different stages of the alevin pipeline, instead of default error-code of 1, following four categories of error-codes will be reported by alevin for automated debugging:; * 1: Error while mapping reads and/or generic errors.; * 64: Error in knee estimation / Cellular Barcode sequence correction.; * 74: Error while deduplicating UMI and/or EM optimization.; * 84: Error while intelligent whitelisting. ## Bug fixes, deprecations and removals. * A bug in the `quantmerge` command (issue [356](https://github.com/COMBINE-lab/salmon/issues/356)) that could cause the output of `quantmerge` to be truncated was fixed (the bug was first introduced in v0.13.0). * Added missing explicit initialization for variable that could affect the initialization condition of the optimization; thank @come-raczy. * Following developer(hidden) flags have been deprecated:; * --dumpUmitoolsMap (permanently disabled); * --noSoftMap (Always assumed True); * --dumpBarcodeMap (permanently disabled); * --noBarcode (Always assumed False); * Following user flags have been deprecated:; * --debug (Always assumed True",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:16,Deployability,release,release,16,"# Salmon 0.14.0 release notes. In addition to the changes and enhancements listed below, this release of salmon implements the decoy-aware selective-alignment strategy described in the manuscript [<ins>Alignment and mapping methodology influence transcript abundance estimation</ins>](http://bit.ly/2Z2Z9kT). For reasons explored in depth in the manuscript, we recommend making use of this decoy-aware selective alignment strategy when not providing pre-aligned reads to salmon. Because of the changes required to implement this indexing strategy, _salmon v0.14.0 is not compatible with the indices of previous versions, and so you must re-build the index for this version of salmon_ (which must be done anyway, if one is adding decoy sequence). ### Adding decoy sequence to the salmon index. . Adding decoy sequence to the salmon index is simple, but salmon is specific about the manner in which the sequence is added. To ease this process, we have created a script that allows the automated creation of a decoy-enhanced transcriptome from a genome FASTA, transcriptome FASTA, and annotation GTF file. The script, as well as detailed instructions on how to run it an use its output, is provided [in the SalmonTools repository](https://github.com/COMBINE-lab/SalmonTools/blob/master/scripts/generateDecoyTranscriptome.sh). **Note**: Because making effective use of the decoy sequence requires having accurate mapping scores, the decoys are only used when salmon is run with selective alignment (i.e. with the flags `--validateMappings`, `--mimicBT2` or `--mimicStrictBT2`). #### Detailed description of decoy requirements. It is not necessary to use the script we provide to extract decoy sequences, and if you'd like to add your own decoys to the file you wish to index, the process is fairly straightforward. All records for decoy sequence must come at the _end_ of the FASTA file being indexed, and you must provide a file with all of the names (one name per line) of the records that should be tre",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:94,Deployability,release,release,94,"# Salmon 0.14.0 release notes. In addition to the changes and enhancements listed below, this release of salmon implements the decoy-aware selective-alignment strategy described in the manuscript [<ins>Alignment and mapping methodology influence transcript abundance estimation</ins>](http://bit.ly/2Z2Z9kT). For reasons explored in depth in the manuscript, we recommend making use of this decoy-aware selective alignment strategy when not providing pre-aligned reads to salmon. Because of the changes required to implement this indexing strategy, _salmon v0.14.0 is not compatible with the indices of previous versions, and so you must re-build the index for this version of salmon_ (which must be done anyway, if one is adding decoy sequence). ### Adding decoy sequence to the salmon index. . Adding decoy sequence to the salmon index is simple, but salmon is specific about the manner in which the sequence is added. To ease this process, we have created a script that allows the automated creation of a decoy-enhanced transcriptome from a genome FASTA, transcriptome FASTA, and annotation GTF file. The script, as well as detailed instructions on how to run it an use its output, is provided [in the SalmonTools repository](https://github.com/COMBINE-lab/SalmonTools/blob/master/scripts/generateDecoyTranscriptome.sh). **Note**: Because making effective use of the decoy sequence requires having accurate mapping scores, the decoys are only used when salmon is run with selective alignment (i.e. with the flags `--validateMappings`, `--mimicBT2` or `--mimicStrictBT2`). #### Detailed description of decoy requirements. It is not necessary to use the script we provide to extract decoy sequences, and if you'd like to add your own decoys to the file you wish to index, the process is fairly straightforward. All records for decoy sequence must come at the _end_ of the FASTA file being indexed, and you must provide a file with all of the names (one name per line) of the records that should be tre",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:8189,Deployability,release,releases,8189,"uivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with selective alignment), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with selective alignment) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. Through broad benchmarking across many samples, we have worked to considerably improve the selective-alignment algorithm and its sensitivity. **We note** that it is likely selective alignment will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it.; Along with the default selective alignment (enabled via `--validateMappings`), there are two ""meta"" flags that enable selective alignment parameters meant to mimic configurations in which users might be interested. . ### New information available in meta_info.json. * The following fields have been added to `meta_info.json`:; * `num_valid_targets`: The number of non-decoy targets in the index used for mapping.; * `num_decoy_targets`: The number of decoy targets in the index used for mapping (only meaningful in mapping-based mode).; * `num_decoy_fragments`: The number of fragments that were discarded from quantification because they best-aligned to a decoy target rather than a valid transcript.; * `num_dovetail_fragments` : which denotes the number of fragments that have _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherw",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:8466,Deployability,configurat,configurations,8466,"which is only meaningful in conjunction with selective alignment), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with selective alignment) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. Through broad benchmarking across many samples, we have worked to considerably improve the selective-alignment algorithm and its sensitivity. **We note** that it is likely selective alignment will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it.; Along with the default selective alignment (enabled via `--validateMappings`), there are two ""meta"" flags that enable selective alignment parameters meant to mimic configurations in which users might be interested. . ### New information available in meta_info.json. * The following fields have been added to `meta_info.json`:; * `num_valid_targets`: The number of non-decoy targets in the index used for mapping.; * `num_decoy_targets`: The number of decoy targets in the index used for mapping (only meaningful in mapping-based mode).; * `num_decoy_fragments`: The number of fragments that were discarded from quantification because they best-aligned to a decoy target rather than a valid transcript.; * `num_dovetail_fragments` : which denotes the number of fragments that have _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without selective alignment).; * `num_fragments_filtered_vm` : which denotes t",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:10195,Deployability,release,release,10195,"d toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without selective alignment).; * `num_fragments_filtered_vm` : which denotes the number of fragments that had a mapping to the transcriptome, but which were discarded because _none_ of the mappings for the fragments exceeded the minimum selective alignment score. This field only has a meaningful value in conjunction with selective alignment (otherwise it is 0).; * `num_alignments_below_threshold_for_mapped_fragments_vm` : which denotes the number of _mappings_ discarded because they failed to reach the minimum selective alignment score, but for which the corresponding fragment had at least a single valid mapping. This field only has a meaningful value in conjunction with selective alignment (otherwise it is 0). ## Improvements in single cell mode; * Alevin supports decoy genomic alignments. NOTE: If you have a previous version of salmon index, with the release of 0.14, you will have to update to the latest salmon index. * The data of the file `filtered_cb_frequency.txt`, along with other features, will be dumped in the file `featureDump.txt` by default i.e. you don't need `--dumpFeature` flag to get CB level features except the `raw_cb_frequency.txt`. The list of the features in the features file is as follows:; * Cellular Barcode (CB) Sequence; * Number of sequence corrected reads assigned to the CB; * Number of mapped reads assigned to the CB; * Number of deduplicated reads assigned to the CB ; * Mapping rate i.e. #mapped reads / #sequence corrected reads; * Deduplication rate i.e. 1 - (#deduplicated reads / #mapped reads); * Mean / Max of the expressed gene quantification estimates.; * Number of expressed genes.; * Number of genes with the count estimates more than the mean.; * Average Number of Reads deduplicated in each Arboresnce; * Command line flag `--dumpUmiGraph`, along with the per cell level UMI g",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:10229,Deployability,update,update,10229,"mber is still reported). This field only has a meaningful value in quasi-mapping mode (with or without selective alignment).; * `num_fragments_filtered_vm` : which denotes the number of fragments that had a mapping to the transcriptome, but which were discarded because _none_ of the mappings for the fragments exceeded the minimum selective alignment score. This field only has a meaningful value in conjunction with selective alignment (otherwise it is 0).; * `num_alignments_below_threshold_for_mapped_fragments_vm` : which denotes the number of _mappings_ discarded because they failed to reach the minimum selective alignment score, but for which the corresponding fragment had at least a single valid mapping. This field only has a meaningful value in conjunction with selective alignment (otherwise it is 0). ## Improvements in single cell mode; * Alevin supports decoy genomic alignments. NOTE: If you have a previous version of salmon index, with the release of 0.14, you will have to update to the latest salmon index. * The data of the file `filtered_cb_frequency.txt`, along with other features, will be dumped in the file `featureDump.txt` by default i.e. you don't need `--dumpFeature` flag to get CB level features except the `raw_cb_frequency.txt`. The list of the features in the features file is as follows:; * Cellular Barcode (CB) Sequence; * Number of sequence corrected reads assigned to the CB; * Number of mapped reads assigned to the CB; * Number of deduplicated reads assigned to the CB ; * Mapping rate i.e. #mapped reads / #sequence corrected reads; * Deduplication rate i.e. 1 - (#deduplicated reads / #mapped reads); * Mean / Max of the expressed gene quantification estimates.; * Number of expressed genes.; * Number of genes with the count estimates more than the mean.; * Average Number of Reads deduplicated in each Arboresnce; * Command line flag `--dumpUmiGraph`, along with the per cell level UMI graphs also dumps the frequency of the number of reads used for ded",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:11749,Deployability,pipeline,pipeline,11749,"; * Deduplication rate i.e. 1 - (#deduplicated reads / #mapped reads); * Mean / Max of the expressed gene quantification estimates.; * Number of expressed genes.; * Number of genes with the count estimates more than the mean.; * Average Number of Reads deduplicated in each Arboresnce; * Command line flag `--dumpUmiGraph`, along with the per cell level UMI graphs also dumps the frequency of the number of reads used for deduplicating an arborescence. It is added to the last column of the `featureDump.txt` as `#Reads:#arborescence` pairs separated by tab.; * The binary output format of alevin, `quants_mat.gz`, has been changed into a sparse single precision format. In pratice we saw the file size reduced to as big as half the size of the original file.; * New command line flag `--dumpMtx` is added to dump the quants in matrix-market-exchange(mtx) sparse format.; * In case of encountered errors in different stages of the alevin pipeline, instead of default error-code of 1, following four categories of error-codes will be reported by alevin for automated debugging:; * 1: Error while mapping reads and/or generic errors.; * 64: Error in knee estimation / Cellular Barcode sequence correction.; * 74: Error while deduplicating UMI and/or EM optimization.; * 84: Error while intelligent whitelisting. ## Bug fixes, deprecations and removals. * A bug in the `quantmerge` command (issue [356](https://github.com/COMBINE-lab/salmon/issues/356)) that could cause the output of `quantmerge` to be truncated was fixed (the bug was first introduced in v0.13.0). * Added missing explicit initialization for variable that could affect the initialization condition of the optimization; thank @come-raczy. * Following developer(hidden) flags have been deprecated:; * --dumpUmitoolsMap (permanently disabled); * --noSoftMap (Always assumed True); * --dumpBarcodeMap (permanently disabled); * --noBarcode (Always assumed False); * Following user flags have been deprecated:; * --debug (Always assumed True",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:11514,Energy Efficiency,reduce,reduced,11514,"in the features file is as follows:; * Cellular Barcode (CB) Sequence; * Number of sequence corrected reads assigned to the CB; * Number of mapped reads assigned to the CB; * Number of deduplicated reads assigned to the CB ; * Mapping rate i.e. #mapped reads / #sequence corrected reads; * Deduplication rate i.e. 1 - (#deduplicated reads / #mapped reads); * Mean / Max of the expressed gene quantification estimates.; * Number of expressed genes.; * Number of genes with the count estimates more than the mean.; * Average Number of Reads deduplicated in each Arboresnce; * Command line flag `--dumpUmiGraph`, along with the per cell level UMI graphs also dumps the frequency of the number of reads used for deduplicating an arborescence. It is added to the last column of the `featureDump.txt` as `#Reads:#arborescence` pairs separated by tab.; * The binary output format of alevin, `quants_mat.gz`, has been changed into a sparse single precision format. In pratice we saw the file size reduced to as big as half the size of the original file.; * New command line flag `--dumpMtx` is added to dump the quants in matrix-market-exchange(mtx) sparse format.; * In case of encountered errors in different stages of the alevin pipeline, instead of default error-code of 1, following four categories of error-codes will be reported by alevin for automated debugging:; * 1: Error while mapping reads and/or generic errors.; * 64: Error in knee estimation / Cellular Barcode sequence correction.; * 74: Error while deduplicating UMI and/or EM optimization.; * 84: Error while intelligent whitelisting. ## Bug fixes, deprecations and removals. * A bug in the `quantmerge` command (issue [356](https://github.com/COMBINE-lab/salmon/issues/356)) that could cause the output of `quantmerge` to be truncated was fixed (the bug was first introduced in v0.13.0). * Added missing explicit initialization for variable that could affect the initialization condition of the optimization; thank @come-raczy. * Following",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:62,Modifiability,enhance,enhancements,62,"# Salmon 0.14.0 release notes. In addition to the changes and enhancements listed below, this release of salmon implements the decoy-aware selective-alignment strategy described in the manuscript [<ins>Alignment and mapping methodology influence transcript abundance estimation</ins>](http://bit.ly/2Z2Z9kT). For reasons explored in depth in the manuscript, we recommend making use of this decoy-aware selective alignment strategy when not providing pre-aligned reads to salmon. Because of the changes required to implement this indexing strategy, _salmon v0.14.0 is not compatible with the indices of previous versions, and so you must re-build the index for this version of salmon_ (which must be done anyway, if one is adding decoy sequence). ### Adding decoy sequence to the salmon index. . Adding decoy sequence to the salmon index is simple, but salmon is specific about the manner in which the sequence is added. To ease this process, we have created a script that allows the automated creation of a decoy-enhanced transcriptome from a genome FASTA, transcriptome FASTA, and annotation GTF file. The script, as well as detailed instructions on how to run it an use its output, is provided [in the SalmonTools repository](https://github.com/COMBINE-lab/SalmonTools/blob/master/scripts/generateDecoyTranscriptome.sh). **Note**: Because making effective use of the decoy sequence requires having accurate mapping scores, the decoys are only used when salmon is run with selective alignment (i.e. with the flags `--validateMappings`, `--mimicBT2` or `--mimicStrictBT2`). #### Detailed description of decoy requirements. It is not necessary to use the script we provide to extract decoy sequences, and if you'd like to add your own decoys to the file you wish to index, the process is fairly straightforward. All records for decoy sequence must come at the _end_ of the FASTA file being indexed, and you must provide a file with all of the names (one name per line) of the records that should be tre",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:1013,Modifiability,enhance,enhanced,1013,".14.0 release notes. In addition to the changes and enhancements listed below, this release of salmon implements the decoy-aware selective-alignment strategy described in the manuscript [<ins>Alignment and mapping methodology influence transcript abundance estimation</ins>](http://bit.ly/2Z2Z9kT). For reasons explored in depth in the manuscript, we recommend making use of this decoy-aware selective alignment strategy when not providing pre-aligned reads to salmon. Because of the changes required to implement this indexing strategy, _salmon v0.14.0 is not compatible with the indices of previous versions, and so you must re-build the index for this version of salmon_ (which must be done anyway, if one is adding decoy sequence). ### Adding decoy sequence to the salmon index. . Adding decoy sequence to the salmon index is simple, but salmon is specific about the manner in which the sequence is added. To ease this process, we have created a script that allows the automated creation of a decoy-enhanced transcriptome from a genome FASTA, transcriptome FASTA, and annotation GTF file. The script, as well as detailed instructions on how to run it an use its output, is provided [in the SalmonTools repository](https://github.com/COMBINE-lab/SalmonTools/blob/master/scripts/generateDecoyTranscriptome.sh). **Note**: Because making effective use of the decoy sequence requires having accurate mapping scores, the decoys are only used when salmon is run with selective alignment (i.e. with the flags `--validateMappings`, `--mimicBT2` or `--mimicStrictBT2`). #### Detailed description of decoy requirements. It is not necessary to use the script we provide to extract decoy sequences, and if you'd like to add your own decoys to the file you wish to index, the process is fairly straightforward. All records for decoy sequence must come at the _end_ of the FASTA file being indexed, and you must provide a file with all of the names (one name per line) of the records that should be treated as de",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:7799,Modifiability,extend,extended,7799,"he anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with selective alignment) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with selective alignment), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with selective alignment) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. Through broad benchmarking across many samples, we have worked to considerably improve the selective-alignment algorithm and its sensitivity. **We note** that it is likely selective alignment will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it.; Along with the default selective alignment (enabled via `--validateMappings`), there are two ""meta"" flags that enable selective alignment parameters meant to mimic configurations in which users might be interested. . ### New information available in meta_info.json. * The following fields have been added to `meta_info.json`:; * `num_valid_targets`: The number of non-decoy targets in the index used for mapping.; * `num_decoy_targets`: The number of de",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:8466,Modifiability,config,configurations,8466,"which is only meaningful in conjunction with selective alignment), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with selective alignment) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. Through broad benchmarking across many samples, we have worked to considerably improve the selective-alignment algorithm and its sensitivity. **We note** that it is likely selective alignment will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it.; Along with the default selective alignment (enabled via `--validateMappings`), there are two ""meta"" flags that enable selective alignment parameters meant to mimic configurations in which users might be interested. . ### New information available in meta_info.json. * The following fields have been added to `meta_info.json`:; * `num_valid_targets`: The number of non-decoy targets in the index used for mapping.; * `num_decoy_targets`: The number of decoy targets in the index used for mapping (only meaningful in mapping-based mode).; * `num_decoy_fragments`: The number of fragments that were discarded from quantification because they best-aligned to a decoy target rather than a valid transcript.; * `num_dovetail_fragments` : which denotes the number of fragments that have _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without selective alignment).; * `num_fragments_filtered_vm` : which denotes t",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:12419,Modifiability,variab,variable,12419,"cation estimates.; * Number of expressed genes.; * Number of genes with the count estimates more than the mean.; * Average Number of Reads deduplicated in each Arboresnce; * Command line flag `--dumpUmiGraph`, along with the per cell level UMI graphs also dumps the frequency of the number of reads used for deduplicating an arborescence. It is added to the last column of the `featureDump.txt` as `#Reads:#arborescence` pairs separated by tab.; * The binary output format of alevin, `quants_mat.gz`, has been changed into a sparse single precision format. In pratice we saw the file size reduced to as big as half the size of the original file.; * New command line flag `--dumpMtx` is added to dump the quants in matrix-market-exchange(mtx) sparse format.; * In case of encountered errors in different stages of the alevin pipeline, instead of default error-code of 1, following four categories of error-codes will be reported by alevin for automated debugging:; * 1: Error while mapping reads and/or generic errors.; * 64: Error in knee estimation / Cellular Barcode sequence correction.; * 74: Error while deduplicating UMI and/or EM optimization.; * 84: Error while intelligent whitelisting. ## Bug fixes, deprecations and removals. * A bug in the `quantmerge` command (issue [356](https://github.com/COMBINE-lab/salmon/issues/356)) that could cause the output of `quantmerge` to be truncated was fixed (the bug was first introduced in v0.13.0). * Added missing explicit initialization for variable that could affect the initialization condition of the optimization; thank @come-raczy. * Following developer(hidden) flags have been deprecated:; * --dumpUmitoolsMap (permanently disabled); * --noSoftMap (Always assumed True); * --dumpBarcodeMap (permanently disabled); * --noBarcode (Always assumed False); * Following user flags have been deprecated:; * --debug (Always assumed True); * --useCorrelation (permanently disabled); * --dumpCsvCounts (swapped in favor of mtx with the flag --dumpMtx)",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:6305,Performance,perform,performs,6305,"e either new, or only present since v0.13.0 and are therefore highlighted again below for completeness:. * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and selective alignment to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and selective alignment to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with selective alignment), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with selective alignment) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuan",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:6663,Performance,perform,performing,6663,"ts the parameters related to mapping and selective alignment to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with selective alignment), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with selective alignment) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with selective alignment), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with selectiv",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:12062,Performance,optimiz,optimization,12062,"cation estimates.; * Number of expressed genes.; * Number of genes with the count estimates more than the mean.; * Average Number of Reads deduplicated in each Arboresnce; * Command line flag `--dumpUmiGraph`, along with the per cell level UMI graphs also dumps the frequency of the number of reads used for deduplicating an arborescence. It is added to the last column of the `featureDump.txt` as `#Reads:#arborescence` pairs separated by tab.; * The binary output format of alevin, `quants_mat.gz`, has been changed into a sparse single precision format. In pratice we saw the file size reduced to as big as half the size of the original file.; * New command line flag `--dumpMtx` is added to dump the quants in matrix-market-exchange(mtx) sparse format.; * In case of encountered errors in different stages of the alevin pipeline, instead of default error-code of 1, following four categories of error-codes will be reported by alevin for automated debugging:; * 1: Error while mapping reads and/or generic errors.; * 64: Error in knee estimation / Cellular Barcode sequence correction.; * 74: Error while deduplicating UMI and/or EM optimization.; * 84: Error while intelligent whitelisting. ## Bug fixes, deprecations and removals. * A bug in the `quantmerge` command (issue [356](https://github.com/COMBINE-lab/salmon/issues/356)) that could cause the output of `quantmerge` to be truncated was fixed (the bug was first introduced in v0.13.0). * Added missing explicit initialization for variable that could affect the initialization condition of the optimization; thank @come-raczy. * Following developer(hidden) flags have been deprecated:; * --dumpUmitoolsMap (permanently disabled); * --noSoftMap (Always assumed True); * --dumpBarcodeMap (permanently disabled); * --noBarcode (Always assumed False); * Following user flags have been deprecated:; * --debug (Always assumed True); * --useCorrelation (permanently disabled); * --dumpCsvCounts (swapped in favor of mtx with the flag --dumpMtx)",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:12482,Performance,optimiz,optimization,12482,"cation estimates.; * Number of expressed genes.; * Number of genes with the count estimates more than the mean.; * Average Number of Reads deduplicated in each Arboresnce; * Command line flag `--dumpUmiGraph`, along with the per cell level UMI graphs also dumps the frequency of the number of reads used for deduplicating an arborescence. It is added to the last column of the `featureDump.txt` as `#Reads:#arborescence` pairs separated by tab.; * The binary output format of alevin, `quants_mat.gz`, has been changed into a sparse single precision format. In pratice we saw the file size reduced to as big as half the size of the original file.; * New command line flag `--dumpMtx` is added to dump the quants in matrix-market-exchange(mtx) sparse format.; * In case of encountered errors in different stages of the alevin pipeline, instead of default error-code of 1, following four categories of error-codes will be reported by alevin for automated debugging:; * 1: Error while mapping reads and/or generic errors.; * 64: Error in knee estimation / Cellular Barcode sequence correction.; * 74: Error while deduplicating UMI and/or EM optimization.; * 84: Error while intelligent whitelisting. ## Bug fixes, deprecations and removals. * A bug in the `quantmerge` command (issue [356](https://github.com/COMBINE-lab/salmon/issues/356)) that could cause the output of `quantmerge` to be truncated was fixed (the bug was first introduced in v0.13.0). * Added missing explicit initialization for variable that could affect the initialization condition of the optimization; thank @come-raczy. * Following developer(hidden) flags have been deprecated:; * --dumpUmitoolsMap (permanently disabled); * --noSoftMap (Always assumed True); * --dumpBarcodeMap (permanently disabled); * --noBarcode (Always assumed False); * Following user flags have been deprecated:; * --debug (Always assumed True); * --useCorrelation (permanently disabled); * --dumpCsvCounts (swapped in favor of mtx with the flag --dumpMtx)",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:4011,Safety,detect,detects,4011,"**If you wish to consider dovetailing mappings as concordant (the previous behavior)**, you can do so by passing the `--allowDovetail` flag to `salmon quant`. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. * The version check information is now written to stderr rather than stdout. This enables directly redirecting the SAM output, when using the `-z`/`--writeMappings` flag with the implicit argument that writes that output to stdout. **NOTE**: If you are having difficulty using the `-z`/`--writeMappings` flag to write output to a file (e.g using `-z <file.sam>` or `--writeMappings <file.sam>`), try using `-z=<file.sam>` or `--writeMappings=<file.sam>` instead --- this appears to be an issue with Boost's argument parsing library for flags that have implicit as well as default values. * Salmon now automatically detects, during indexing, if it believes that the transcriptome being indexed is in GENCODE format and the `--gencode` flag has not been passed. In this case, it issues a warning, since we generally recommend to use this flag when indexing GENCODE transcriptomes (to avoid the very long transcript names in the output). This implements feature request [366](https://github.com/COMBINE-lab/salmon/issues/366); thanks @alexvpickering. * The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. * The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:4278,Safety,avoid,avoid,4278," types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. * The version check information is now written to stderr rather than stdout. This enables directly redirecting the SAM output, when using the `-z`/`--writeMappings` flag with the implicit argument that writes that output to stdout. **NOTE**: If you are having difficulty using the `-z`/`--writeMappings` flag to write output to a file (e.g using `-z <file.sam>` or `--writeMappings <file.sam>`), try using `-z=<file.sam>` or `--writeMappings=<file.sam>` instead --- this appears to be an issue with Boost's argument parsing library for flags that have implicit as well as default values. * Salmon now automatically detects, during indexing, if it believes that the transcriptome being indexed is in GENCODE format and the `--gencode` flag has not been passed. In this case, it issues a warning, since we generally recommend to use this flag when indexing GENCODE transcriptomes (to avoid the very long transcript names in the output). This implements feature request [366](https://github.com/COMBINE-lab/salmon/issues/366); thanks @alexvpickering. * The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. * The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. suffix array intervals) that a mapping may miss and still be consdered valid for chaining. ## Improvements and new flags for bulk mode. When writing out mappings in conjuncti",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:6208,Safety,recover,recoverOrphans,6208,"e either new, or only present since v0.13.0 and are therefore highlighted again below for completeness:. * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and selective alignment to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and selective alignment to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with selective alignment), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with selective alignment) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuan",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:1518,Security,validat,validateMappings,1518,"g strategy, _salmon v0.14.0 is not compatible with the indices of previous versions, and so you must re-build the index for this version of salmon_ (which must be done anyway, if one is adding decoy sequence). ### Adding decoy sequence to the salmon index. . Adding decoy sequence to the salmon index is simple, but salmon is specific about the manner in which the sequence is added. To ease this process, we have created a script that allows the automated creation of a decoy-enhanced transcriptome from a genome FASTA, transcriptome FASTA, and annotation GTF file. The script, as well as detailed instructions on how to run it an use its output, is provided [in the SalmonTools repository](https://github.com/COMBINE-lab/SalmonTools/blob/master/scripts/generateDecoyTranscriptome.sh). **Note**: Because making effective use of the decoy sequence requires having accurate mapping scores, the decoys are only used when salmon is run with selective alignment (i.e. with the flags `--validateMappings`, `--mimicBT2` or `--mimicStrictBT2`). #### Detailed description of decoy requirements. It is not necessary to use the script we provide to extract decoy sequences, and if you'd like to add your own decoys to the file you wish to index, the process is fairly straightforward. All records for decoy sequence must come at the _end_ of the FASTA file being indexed, and you must provide a file with all of the names (one name per line) of the records that should be treated as decoys (they need not be in the same order as in the FASTA file). Consider that you have the files `txome.fa` and `decoys.fa`, where `decoys.fa` are the decoy sequences you want to add to your index. Also, assume that `decoys.txt` is the file containing the names of the decoy records. You can create a valid input files as:. `$ grep ""^>"" decoys.fa | cut -d "">"" -f2 > decoys.txt`; `$ cat txome.fa decoys.fa > txome_combined.fa`; ; Now, you can build the decoy-aware salmon index using the command:; ; `$ salmon index -t txome_c",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:8361,Security,validat,validateMappings,8361,"which is only meaningful in conjunction with selective alignment), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with selective alignment) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. Through broad benchmarking across many samples, we have worked to considerably improve the selective-alignment algorithm and its sensitivity. **We note** that it is likely selective alignment will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it.; Along with the default selective alignment (enabled via `--validateMappings`), there are two ""meta"" flags that enable selective alignment parameters meant to mimic configurations in which users might be interested. . ### New information available in meta_info.json. * The following fields have been added to `meta_info.json`:; * `num_valid_targets`: The number of non-decoy targets in the index used for mapping.; * `num_decoy_targets`: The number of decoy targets in the index used for mapping (only meaningful in mapping-based mode).; * `num_decoy_fragments`: The number of fragments that were discarded from quantification because they best-aligned to a decoy target rather than a valid transcript.; * `num_dovetail_fragments` : which denotes the number of fragments that have _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without selective alignment).; * `num_fragments_filtered_vm` : which denotes t",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:7973,Testability,benchmark,benchmarking,7973,"from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with selective alignment), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with selective alignment) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. Through broad benchmarking across many samples, we have worked to considerably improve the selective-alignment algorithm and its sensitivity. **We note** that it is likely selective alignment will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it.; Along with the default selective alignment (enabled via `--validateMappings`), there are two ""meta"" flags that enable selective alignment parameters meant to mimic configurations in which users might be interested. . ### New information available in meta_info.json. * The following fields have been added to `meta_info.json`:; * `num_valid_targets`: The number of non-decoy targets in the index used for mapping.; * `num_decoy_targets`: The number of decoy targets in the index used for mapping (only meaningful in mapping-based mode).; * `num_decoy_fragments`: The number of fragments that were discarded from quantification because they best-aligned to a decoy target rather than a valid transcript.; * `num_dovetail_fragment",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:840,Usability,simpl,simple,840,"# Salmon 0.14.0 release notes. In addition to the changes and enhancements listed below, this release of salmon implements the decoy-aware selective-alignment strategy described in the manuscript [<ins>Alignment and mapping methodology influence transcript abundance estimation</ins>](http://bit.ly/2Z2Z9kT). For reasons explored in depth in the manuscript, we recommend making use of this decoy-aware selective alignment strategy when not providing pre-aligned reads to salmon. Because of the changes required to implement this indexing strategy, _salmon v0.14.0 is not compatible with the indices of previous versions, and so you must re-build the index for this version of salmon_ (which must be done anyway, if one is adding decoy sequence). ### Adding decoy sequence to the salmon index. . Adding decoy sequence to the salmon index is simple, but salmon is specific about the manner in which the sequence is added. To ease this process, we have created a script that allows the automated creation of a decoy-enhanced transcriptome from a genome FASTA, transcriptome FASTA, and annotation GTF file. The script, as well as detailed instructions on how to run it an use its output, is provided [in the SalmonTools repository](https://github.com/COMBINE-lab/SalmonTools/blob/master/scripts/generateDecoyTranscriptome.sh). **Note**: Because making effective use of the decoy sequence requires having accurate mapping scores, the decoys are only used when salmon is run with selective alignment (i.e. with the flags `--validateMappings`, `--mimicBT2` or `--mimicStrictBT2`). #### Detailed description of decoy requirements. It is not necessary to use the script we provide to extract decoy sequences, and if you'd like to add your own decoys to the file you wish to index, the process is fairly straightforward. All records for decoy sequence must come at the _end_ of the FASTA file being indexed, and you must provide a file with all of the names (one name per line) of the records that should be tre",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0:4543,Usability,simpl,simply,4543,"put to stdout. **NOTE**: If you are having difficulty using the `-z`/`--writeMappings` flag to write output to a file (e.g using `-z <file.sam>` or `--writeMappings <file.sam>`), try using `-z=<file.sam>` or `--writeMappings=<file.sam>` instead --- this appears to be an issue with Boost's argument parsing library for flags that have implicit as well as default values. * Salmon now automatically detects, during indexing, if it believes that the transcriptome being indexed is in GENCODE format and the `--gencode` flag has not been passed. In this case, it issues a warning, since we generally recommend to use this flag when indexing GENCODE transcriptomes (to avoid the very long transcript names in the output). This implements feature request [366](https://github.com/COMBINE-lab/salmon/issues/366); thanks @alexvpickering. * The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. * The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. suffix array intervals) that a mapping may miss and still be consdered valid for chaining. ## Improvements and new flags for bulk mode. When writing out mappings in conjunction with . The flags below are either new, or only present since v0.13.0 and are therefore highlighted again below for completeness:. * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and selective alignment to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.14.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:3857,Availability,recover,recoverOrphans,3857,"at enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant`",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:4193,Availability,down,downstream,4193,"mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth p",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:4387,Availability,down,downstream,4387,"sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping va",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:5770,Availability,error,error,5770,"e default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping validation) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. suffix array intervals) that a mapping may miss and still be consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summary statistics of a single cell experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (de",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:16,Deployability,release,release,16,"# Salmon 0.13.1 release notes. Version 0.13.1 is a patch to 0.13.0. We describe the contents of the patch here, and repeat the v0.13.0 release notes again below for simplicity. * This version fixes a non-determinism bug introduced in v0.13.0 that could cause the mapping rate of _orphaned_ mappings to fluctuate slightly between runs. * This version adds the `--allowDovetail` flag which overrides the newly-default behavior of discarding dovetail mappings of paired-end reads. If passed this flag, salmon will not consider dovetailing mappings as discordant, and will consider them. . * The following fields have been added to `meta_info.json`:; * `num_dovetail_fragments` : which denotes the number of fragments that have _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without mapping validation).; * `num_fragments_filtered_vm` : which denotes the number of fragments that had a mapping to the transcriptome, but which were discarded because _none_ of the mappings for the fragments exceeded the minimum mapping validation score. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0).; * `num_alignments_below_threshold_for_mapped_fragments_vm` : which denotes the number of _mappings_ discarded because they failed to reach the minimum mapping validation score, but for which the corresponding fragment had at least a single valid mapping. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0). ## Previous Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default usi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:51,Deployability,patch,patch,51,"# Salmon 0.13.1 release notes. Version 0.13.1 is a patch to 0.13.0. We describe the contents of the patch here, and repeat the v0.13.0 release notes again below for simplicity. * This version fixes a non-determinism bug introduced in v0.13.0 that could cause the mapping rate of _orphaned_ mappings to fluctuate slightly between runs. * This version adds the `--allowDovetail` flag which overrides the newly-default behavior of discarding dovetail mappings of paired-end reads. If passed this flag, salmon will not consider dovetailing mappings as discordant, and will consider them. . * The following fields have been added to `meta_info.json`:; * `num_dovetail_fragments` : which denotes the number of fragments that have _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without mapping validation).; * `num_fragments_filtered_vm` : which denotes the number of fragments that had a mapping to the transcriptome, but which were discarded because _none_ of the mappings for the fragments exceeded the minimum mapping validation score. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0).; * `num_alignments_below_threshold_for_mapped_fragments_vm` : which denotes the number of _mappings_ discarded because they failed to reach the minimum mapping validation score, but for which the corresponding fragment had at least a single valid mapping. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0). ## Previous Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default usi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:100,Deployability,patch,patch,100,"# Salmon 0.13.1 release notes. Version 0.13.1 is a patch to 0.13.0. We describe the contents of the patch here, and repeat the v0.13.0 release notes again below for simplicity. * This version fixes a non-determinism bug introduced in v0.13.0 that could cause the mapping rate of _orphaned_ mappings to fluctuate slightly between runs. * This version adds the `--allowDovetail` flag which overrides the newly-default behavior of discarding dovetail mappings of paired-end reads. If passed this flag, salmon will not consider dovetailing mappings as discordant, and will consider them. . * The following fields have been added to `meta_info.json`:; * `num_dovetail_fragments` : which denotes the number of fragments that have _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without mapping validation).; * `num_fragments_filtered_vm` : which denotes the number of fragments that had a mapping to the transcriptome, but which were discarded because _none_ of the mappings for the fragments exceeded the minimum mapping validation score. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0).; * `num_alignments_below_threshold_for_mapped_fragments_vm` : which denotes the number of _mappings_ discarded because they failed to reach the minimum mapping validation score, but for which the corresponding fragment had at least a single valid mapping. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0). ## Previous Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default usi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:135,Deployability,release,release,135,"# Salmon 0.13.1 release notes. Version 0.13.1 is a patch to 0.13.0. We describe the contents of the patch here, and repeat the v0.13.0 release notes again below for simplicity. * This version fixes a non-determinism bug introduced in v0.13.0 that could cause the mapping rate of _orphaned_ mappings to fluctuate slightly between runs. * This version adds the `--allowDovetail` flag which overrides the newly-default behavior of discarding dovetail mappings of paired-end reads. If passed this flag, salmon will not consider dovetailing mappings as discordant, and will consider them. . * The following fields have been added to `meta_info.json`:; * `num_dovetail_fragments` : which denotes the number of fragments that have _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without mapping validation).; * `num_fragments_filtered_vm` : which denotes the number of fragments that had a mapping to the transcriptome, but which were discarded because _none_ of the mappings for the fragments exceeded the minimum mapping validation score. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0).; * `num_alignments_below_threshold_for_mapped_fragments_vm` : which denotes the number of _mappings_ discarded because they failed to reach the minimum mapping validation score, but for which the corresponding fragment had at least a single valid mapping. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0). ## Previous Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default usi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:1714,Deployability,release,release,1714,"ave _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without mapping validation).; * `num_fragments_filtered_vm` : which denotes the number of fragments that had a mapping to the transcriptome, but which were discarded because _none_ of the mappings for the fragments exceeded the minimum mapping validation score. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0).; * `num_alignments_below_threshold_for_mapped_fragments_vm` : which denotes the number of _mappings_ discarded because they failed to reach the minimum mapping validation score, but for which the corresponding fragment had at least a single valid mapping. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0). ## Previous Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we str",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:2700,Deployability,release,releases,2700,"13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels i",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:2974,Deployability,configurat,configurations,2974,"contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in con",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:6367,Deployability,release,release,6367,"le prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. suffix array intervals) that a mapping may miss and still be consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summary statistics of a single cell experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (default false) it initialized the EM step with a uniform prior instead of with a unique equivalence class evidence. * Alevin can directly consume `bfh` file format generated using `--dumpBfh`. It provides an independant entry point into alevin's UMI deduplication step instead of the raw `FASTQ` files. * A bug in UMI deduplication step has been fixed. Previously the vertices in the maximum connected components of an arborescence were not being removed. * The `custom` mode of the single cell protocol for alevin, does not need explicit protocol specific command line flag. Although the full triplet `--umiLength --barcodeLength --end` comman",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:8404,Deployability,release,releases,8404," experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (default false) it initialized the EM step with a uniform prior instead of with a unique equivalence class evidence. * Alevin can directly consume `bfh` file format generated using `--dumpBfh`. It provides an independant entry point into alevin's UMI deduplication step instead of the raw `FASTQ` files. * A bug in UMI deduplication step has been fixed. Previously the vertices in the maximum connected components of an arborescence were not being removed. * The `custom` mode of the single cell protocol for alevin, does not need explicit protocol specific command line flag. Although the full triplet `--umiLength --barcodeLength --end` command line options has to be specified to enable the `custom` mode. * Maximum allowable length of a barcode and/or the UMI has been set to 20 for the `custom` mode of a single cell experiment. * A new command line option `--keepCBFraction` has been added, which expects a value in the range (0, 1]. This parameter forces `alevin` to use the specified fraction of all the observed Cellular barcode in the input reads _after_ sequence correction. ## Bug fixes, deprecations and removals. * Fixed a rare bug that could cause salmon and alevin to ""hang"" when many read files were provided as input at the number of records in the read file were a divisor of the mini-batch size. Thanks to @rbenel for finding a dataset that triggers this bug and reporting it in #329. * The `--strictIntersect` flag led to unnecessary complexity in the codebase, and it seems, was not really used by anyone, so it was removed to simplify and streamline the code. * The `--useFSPD` flag has been deprecated for many releases and was removed.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:6638,Energy Efficiency,reduce,reduce,6638,"me. The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. suffix array intervals) that a mapping may miss and still be consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summary statistics of a single cell experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (default false) it initialized the EM step with a uniform prior instead of with a unique equivalence class evidence. * Alevin can directly consume `bfh` file format generated using `--dumpBfh`. It provides an independant entry point into alevin's UMI deduplication step instead of the raw `FASTQ` files. * A bug in UMI deduplication step has been fixed. Previously the vertices in the maximum connected components of an arborescence were not being removed. * The `custom` mode of the single cell protocol for alevin, does not need explicit protocol specific command line flag. Although the full triplet `--umiLength --barcodeLength --end` command line options has to be specified to enable the `custom` mode. * Maximum allowable length of a barcode and/or the UMI has been set to 20 for the `custom` mode of a single cell experimen",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:7265,Integrability,protocol,protocol,7265," consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summary statistics of a single cell experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (default false) it initialized the EM step with a uniform prior instead of with a unique equivalence class evidence. * Alevin can directly consume `bfh` file format generated using `--dumpBfh`. It provides an independant entry point into alevin's UMI deduplication step instead of the raw `FASTQ` files. * A bug in UMI deduplication step has been fixed. Previously the vertices in the maximum connected components of an arborescence were not being removed. * The `custom` mode of the single cell protocol for alevin, does not need explicit protocol specific command line flag. Although the full triplet `--umiLength --barcodeLength --end` command line options has to be specified to enable the `custom` mode. * Maximum allowable length of a barcode and/or the UMI has been set to 20 for the `custom` mode of a single cell experiment. * A new command line option `--keepCBFraction` has been added, which expects a value in the range (0, 1]. This parameter forces `alevin` to use the specified fraction of all the observed Cellular barcode in the input reads _after_ sequence correction. ## Bug fixes, deprecations and removals. * Fixed a rare bug that could cause salmon and alevin to ""hang"" when many read files were provided as input at the number of records in the read file were a divisor of the mini-batch size. Thanks to @rbenel for finding a dataset that triggers this bug and reporting it in #329. * The `--strictIntersect` flag led to unnecessary complexity in the codebase, and it seems, was not really used",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:7309,Integrability,protocol,protocol,7309," consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summary statistics of a single cell experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (default false) it initialized the EM step with a uniform prior instead of with a unique equivalence class evidence. * Alevin can directly consume `bfh` file format generated using `--dumpBfh`. It provides an independant entry point into alevin's UMI deduplication step instead of the raw `FASTQ` files. * A bug in UMI deduplication step has been fixed. Previously the vertices in the maximum connected components of an arborescence were not being removed. * The `custom` mode of the single cell protocol for alevin, does not need explicit protocol specific command line flag. Although the full triplet `--umiLength --barcodeLength --end` command line options has to be specified to enable the `custom` mode. * Maximum allowable length of a barcode and/or the UMI has been set to 20 for the `custom` mode of a single cell experiment. * A new command line option `--keepCBFraction` has been added, which expects a value in the range (0, 1]. This parameter forces `alevin` to use the specified fraction of all the observed Cellular barcode in the input reads _after_ sequence correction. ## Bug fixes, deprecations and removals. * Fixed a rare bug that could cause salmon and alevin to ""hang"" when many read files were provided as input at the number of records in the read file were a divisor of the mini-batch size. Thanks to @rbenel for finding a dataset that triggers this bug and reporting it in #329. * The `--strictIntersect` flag led to unnecessary complexity in the codebase, and it seems, was not really used",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:2974,Modifiability,config,configurations,2974,"contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in con",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:5444,Modifiability,extend,extended,5444," the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping validation) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. suffix array intervals) that a mapping may miss and still be consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summar",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:3953,Performance,perform,performs,3953,"at enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant`",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:4311,Performance,perform,performing,4311,"sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping va",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:3857,Safety,recover,recoverOrphans,3857,"at enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant`",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:988,Security,validat,validation,988,"# Salmon 0.13.1 release notes. Version 0.13.1 is a patch to 0.13.0. We describe the contents of the patch here, and repeat the v0.13.0 release notes again below for simplicity. * This version fixes a non-determinism bug introduced in v0.13.0 that could cause the mapping rate of _orphaned_ mappings to fluctuate slightly between runs. * This version adds the `--allowDovetail` flag which overrides the newly-default behavior of discarding dovetail mappings of paired-end reads. If passed this flag, salmon will not consider dovetailing mappings as discordant, and will consider them. . * The following fields have been added to `meta_info.json`:; * `num_dovetail_fragments` : which denotes the number of fragments that have _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without mapping validation).; * `num_fragments_filtered_vm` : which denotes the number of fragments that had a mapping to the transcriptome, but which were discarded because _none_ of the mappings for the fragments exceeded the minimum mapping validation score. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0).; * `num_alignments_below_threshold_for_mapped_fragments_vm` : which denotes the number of _mappings_ discarded because they failed to reach the minimum mapping validation score, but for which the corresponding fragment had at least a single valid mapping. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0). ## Previous Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default usi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:1216,Security,validat,validation,1216,"repeat the v0.13.0 release notes again below for simplicity. * This version fixes a non-determinism bug introduced in v0.13.0 that could cause the mapping rate of _orphaned_ mappings to fluctuate slightly between runs. * This version adds the `--allowDovetail` flag which overrides the newly-default behavior of discarding dovetail mappings of paired-end reads. If passed this flag, salmon will not consider dovetailing mappings as discordant, and will consider them. . * The following fields have been added to `meta_info.json`:; * `num_dovetail_fragments` : which denotes the number of fragments that have _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without mapping validation).; * `num_fragments_filtered_vm` : which denotes the number of fragments that had a mapping to the transcriptome, but which were discarded because _none_ of the mappings for the fragments exceeded the minimum mapping validation score. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0).; * `num_alignments_below_threshold_for_mapped_fragments_vm` : which denotes the number of _mappings_ discarded because they failed to reach the minimum mapping validation score, but for which the corresponding fragment had at least a single valid mapping. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0). ## Previous Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:1301,Security,validat,validation,1301,"phaned_ mappings to fluctuate slightly between runs. * This version adds the `--allowDovetail` flag which overrides the newly-default behavior of discarding dovetail mappings of paired-end reads. If passed this flag, salmon will not consider dovetailing mappings as discordant, and will consider them. . * The following fields have been added to `meta_info.json`:; * `num_dovetail_fragments` : which denotes the number of fragments that have _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without mapping validation).; * `num_fragments_filtered_vm` : which denotes the number of fragments that had a mapping to the transcriptome, but which were discarded because _none_ of the mappings for the fragments exceeded the minimum mapping validation score. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0).; * `num_alignments_below_threshold_for_mapped_fragments_vm` : which denotes the number of _mappings_ discarded because they failed to reach the minimum mapping validation score, but for which the corresponding fragment had at least a single valid mapping. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0). ## Previous Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:1493,Security,validat,validation,1493,"paired-end reads. If passed this flag, salmon will not consider dovetailing mappings as discordant, and will consider them. . * The following fields have been added to `meta_info.json`:; * `num_dovetail_fragments` : which denotes the number of fragments that have _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without mapping validation).; * `num_fragments_filtered_vm` : which denotes the number of fragments that had a mapping to the transcriptome, but which were discarded because _none_ of the mappings for the fragments exceeded the minimum mapping validation score. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0).; * `num_alignments_below_threshold_for_mapped_fragments_vm` : which denotes the number of _mappings_ discarded because they failed to reach the minimum mapping validation score, but for which the corresponding fragment had at least a single valid mapping. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0). ## Previous Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvemen",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:1656,Security,validat,validation,1656,"o.json`:; * `num_dovetail_fragments` : which denotes the number of fragments that have _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without mapping validation).; * `num_fragments_filtered_vm` : which denotes the number of fragments that had a mapping to the transcriptome, but which were discarded because _none_ of the mappings for the fragments exceeded the minimum mapping validation score. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0).; * `num_alignments_below_threshold_for_mapped_fragments_vm` : which denotes the number of _mappings_ discarded because they failed to reach the minimum mapping validation score, but for which the corresponding fragment had at least a single valid mapping. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0). ## Previous Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:2045,Security,validat,validateMappings,2045,"t mapping validation).; * `num_fragments_filtered_vm` : which denotes the number of fragments that had a mapping to the transcriptome, but which were discarded because _none_ of the mappings for the fragments exceeded the minimum mapping validation score. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0).; * `num_alignments_below_threshold_for_mapped_fragments_vm` : which denotes the number of _mappings_ discarded because they failed to reach the minimum mapping validation score, but for which the corresponding fragment had at least a single valid mapping. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0). ## Previous Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic confi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:2474,Security,validat,validation,2474,"use they failed to reach the minimum mapping validation score, but for which the corresponding fragment had at least a single valid mapping. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0). ## Previous Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignme",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:2651,Security,validat,validation,2651,"13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels i",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:2843,Security,validat,validation,2843,"contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in con",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:2870,Security,validat,validateMappings,2870,"contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in con",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:2937,Security,validat,validation,2937,"contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in con",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:3127,Security,validat,validation,3127,"0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmo",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:3422,Security,validat,validation,3422,"in, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mappi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:3940,Security,validat,validation,3940,"at enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant`",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:4540,Security,validat,validation,4540,"oring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping validation) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run t",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:5108,Security,validat,validation,5108,"l on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping validation) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. The definition of `--consensusSlack` has changed. Instead of bei",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:5370,Security,validat,validation,5370," the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping validation) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. suffix array intervals) that a mapping may miss and still be consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summar",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:2500,Testability,benchmark,benchmarking,2500,"gment had at least a single valid mapping. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0). ## Previous Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-c",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:165,Usability,simpl,simplicity,165,"# Salmon 0.13.1 release notes. Version 0.13.1 is a patch to 0.13.0. We describe the contents of the patch here, and repeat the v0.13.0 release notes again below for simplicity. * This version fixes a non-determinism bug introduced in v0.13.0 that could cause the mapping rate of _orphaned_ mappings to fluctuate slightly between runs. * This version adds the `--allowDovetail` flag which overrides the newly-default behavior of discarding dovetail mappings of paired-end reads. If passed this flag, salmon will not consider dovetailing mappings as discordant, and will consider them. . * The following fields have been added to `meta_info.json`:; * `num_dovetail_fragments` : which denotes the number of fragments that have _only_ dovetailing mappings. If the `--allowDovetail` flag was passed, these are counted toward quantification, otherwise they are discarded (but this number is still reported). This field only has a meaningful value in quasi-mapping mode (with or without mapping validation).; * `num_fragments_filtered_vm` : which denotes the number of fragments that had a mapping to the transcriptome, but which were discarded because _none_ of the mappings for the fragments exceeded the minimum mapping validation score. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0).; * `num_alignments_below_threshold_for_mapped_fragments_vm` : which denotes the number of _mappings_ discarded because they failed to reach the minimum mapping validation score, but for which the corresponding fragment had at least a single valid mapping. This field only has a meaningful value in conjunction with mapping validation (otherwise it is 0). ## Previous Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default usi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:5701,Usability,simpl,simply,5701,"e default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping validation) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. suffix array intervals) that a mapping may miss and still be consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summary statistics of a single cell experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (de",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1:8318,Usability,simpl,simplify,8318," experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (default false) it initialized the EM step with a uniform prior instead of with a unique equivalence class evidence. * Alevin can directly consume `bfh` file format generated using `--dumpBfh`. It provides an independant entry point into alevin's UMI deduplication step instead of the raw `FASTQ` files. * A bug in UMI deduplication step has been fixed. Previously the vertices in the maximum connected components of an arborescence were not being removed. * The `custom` mode of the single cell protocol for alevin, does not need explicit protocol specific command line flag. Although the full triplet `--umiLength --barcodeLength --end` command line options has to be specified to enable the `custom` mode. * Maximum allowable length of a barcode and/or the UMI has been set to 20 for the `custom` mode of a single cell experiment. * A new command line option `--keepCBFraction` has been added, which expects a value in the range (0, 1]. This parameter forces `alevin` to use the specified fraction of all the observed Cellular barcode in the input reads _after_ sequence correction. ## Bug fixes, deprecations and removals. * Fixed a rare bug that could cause salmon and alevin to ""hang"" when many read files were provided as input at the number of records in the read file were a divisor of the mini-batch size. Thanks to @rbenel for finding a dataset that triggers this bug and reporting it in #329. * The `--strictIntersect` flag led to unnecessary complexity in the codebase, and it seems, was not really used by anyone, so it was removed to simplify and streamline the code. * The `--useFSPD` flag has been deprecated for many releases and was removed.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:2159,Availability,recover,recoverOrphans,2159,"at enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant`",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:2495,Availability,down,downstream,2495,"mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth p",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:2689,Availability,down,downstream,2689,"sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping va",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:4072,Availability,error,error,4072,"e default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping validation) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. suffix array intervals) that a mapping may miss and still be consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summary statistics of a single cell experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (de",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:16,Deployability,release,release,16,"# Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallo",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:1002,Deployability,release,releases,1002,"13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels i",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:1276,Deployability,configurat,configurations,1276,"contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in con",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:4669,Deployability,release,release,4669,"le prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. suffix array intervals) that a mapping may miss and still be consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summary statistics of a single cell experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (default false) it initialized the EM step with a uniform prior instead of with a unique equivalence class evidence. * Alevin can directly consume `bfh` file format generated using `--dumpBfh`. It provides an independant entry point into alevin's UMI deduplication step instead of the raw `FASTQ` files. * A bug in UMI deduplication step has been fixed. Previously the vertices in the maximum connected components of an arborescence were not being removed. * The `custom` mode of the single cell protocol for alevin, does not need explicit protocol specific command line flag. Although the full triplet `--umiLength --barcodeLength --end` comman",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:6706,Deployability,release,releases,6706," experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (default false) it initialized the EM step with a uniform prior instead of with a unique equivalence class evidence. * Alevin can directly consume `bfh` file format generated using `--dumpBfh`. It provides an independant entry point into alevin's UMI deduplication step instead of the raw `FASTQ` files. * A bug in UMI deduplication step has been fixed. Previously the vertices in the maximum connected components of an arborescence were not being removed. * The `custom` mode of the single cell protocol for alevin, does not need explicit protocol specific command line flag. Although the full triplet `--umiLength --barcodeLength --end` command line options has to be specified to enable the `custom` mode. * Maximum allowable length of a barcode and/or the UMI has been set to 20 for the `custom` mode of a single cell experiment. * A new command line option `--keepCBFraction` has been added, which expects a value in the range (0, 1]. This parameter forces `alevin` to use the specified fraction of all the observed Cellular barcode in the input reads _after_ sequence correction. ## Bug fixes, deprecations and removals. * Fixed a rare bug that could cause salmon and alevin to ""hang"" when many read files were provided as input at the number of records in the read file were a divisor of the mini-batch size. Thanks to @rbenel for finding a dataset that triggers this bug and reporting it in #329. * The `--strictIntersect` flag led to unnecessary complexity in the codebase, and it seems, was not really used by anyone, so it was removed to simplify and streamline the code. * The `--useFSPD` flag has been deprecated for many releases and was removed.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:4940,Energy Efficiency,reduce,reduce,4940,"me. The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. suffix array intervals) that a mapping may miss and still be consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summary statistics of a single cell experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (default false) it initialized the EM step with a uniform prior instead of with a unique equivalence class evidence. * Alevin can directly consume `bfh` file format generated using `--dumpBfh`. It provides an independant entry point into alevin's UMI deduplication step instead of the raw `FASTQ` files. * A bug in UMI deduplication step has been fixed. Previously the vertices in the maximum connected components of an arborescence were not being removed. * The `custom` mode of the single cell protocol for alevin, does not need explicit protocol specific command line flag. Although the full triplet `--umiLength --barcodeLength --end` command line options has to be specified to enable the `custom` mode. * Maximum allowable length of a barcode and/or the UMI has been set to 20 for the `custom` mode of a single cell experimen",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:5567,Integrability,protocol,protocol,5567," consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summary statistics of a single cell experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (default false) it initialized the EM step with a uniform prior instead of with a unique equivalence class evidence. * Alevin can directly consume `bfh` file format generated using `--dumpBfh`. It provides an independant entry point into alevin's UMI deduplication step instead of the raw `FASTQ` files. * A bug in UMI deduplication step has been fixed. Previously the vertices in the maximum connected components of an arborescence were not being removed. * The `custom` mode of the single cell protocol for alevin, does not need explicit protocol specific command line flag. Although the full triplet `--umiLength --barcodeLength --end` command line options has to be specified to enable the `custom` mode. * Maximum allowable length of a barcode and/or the UMI has been set to 20 for the `custom` mode of a single cell experiment. * A new command line option `--keepCBFraction` has been added, which expects a value in the range (0, 1]. This parameter forces `alevin` to use the specified fraction of all the observed Cellular barcode in the input reads _after_ sequence correction. ## Bug fixes, deprecations and removals. * Fixed a rare bug that could cause salmon and alevin to ""hang"" when many read files were provided as input at the number of records in the read file were a divisor of the mini-batch size. Thanks to @rbenel for finding a dataset that triggers this bug and reporting it in #329. * The `--strictIntersect` flag led to unnecessary complexity in the codebase, and it seems, was not really used",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:5611,Integrability,protocol,protocol,5611," consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summary statistics of a single cell experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (default false) it initialized the EM step with a uniform prior instead of with a unique equivalence class evidence. * Alevin can directly consume `bfh` file format generated using `--dumpBfh`. It provides an independant entry point into alevin's UMI deduplication step instead of the raw `FASTQ` files. * A bug in UMI deduplication step has been fixed. Previously the vertices in the maximum connected components of an arborescence were not being removed. * The `custom` mode of the single cell protocol for alevin, does not need explicit protocol specific command line flag. Although the full triplet `--umiLength --barcodeLength --end` command line options has to be specified to enable the `custom` mode. * Maximum allowable length of a barcode and/or the UMI has been set to 20 for the `custom` mode of a single cell experiment. * A new command line option `--keepCBFraction` has been added, which expects a value in the range (0, 1]. This parameter forces `alevin` to use the specified fraction of all the observed Cellular barcode in the input reads _after_ sequence correction. ## Bug fixes, deprecations and removals. * Fixed a rare bug that could cause salmon and alevin to ""hang"" when many read files were provided as input at the number of records in the read file were a divisor of the mini-batch size. Thanks to @rbenel for finding a dataset that triggers this bug and reporting it in #329. * The `--strictIntersect` flag led to unnecessary complexity in the codebase, and it seems, was not really used",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:1276,Modifiability,config,configurations,1276,"contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in con",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:3746,Modifiability,extend,extended,3746," the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping validation) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. suffix array intervals) that a mapping may miss and still be consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summar",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:2255,Performance,perform,performs,2255,"at enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant`",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:2613,Performance,perform,performing,2613,"sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping va",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:2159,Safety,recover,recoverOrphans,2159,"at enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant`",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:347,Security,validat,validateMappings,347,"# Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallo",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:776,Security,validat,validation,776,"# Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallo",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:953,Security,validat,validation,953,"13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels i",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:1145,Security,validat,validation,1145,"contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in con",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:1172,Security,validat,validateMappings,1172,"contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in con",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:1239,Security,validat,validation,1239,"contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in con",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:1429,Security,validat,validation,1429,"0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmo",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:1724,Security,validat,validation,1724,"in, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mappi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:2242,Security,validat,validation,2242,"at enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant`",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:2842,Security,validat,validation,2842,"oring scheme and allowing both mismatches and indels in alignments. These setting essentially disallow indels in the resulting alignments. In addition to these ""meta-flags"", a few other flags have been introduced that can alter the behavior of mapping:. * `--recoverOrphans` : This flag (which should only be used in conjunction with mapping validation), performs orphan ""rescue"" for reads. That is, if mappings are discovered for only one end of a fragment, or if the mappings for the ends of the fragment don't fall on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping validation) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run t",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:3410,Security,validat,validation,3410,"l on the same transcript, then this flag will cause salmon to look upstream or downstream of the discovered mapping (anchor) for a match for the opposite end of the given fragment. This is done by performing ""infix"" alignment within the maximum fragment length upstream of downstream of the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping validation) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. The definition of `--consensusSlack` has changed. Instead of bei",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:3672,Security,validat,validation,3672," the anchor mapping using [edlib](https://github.com/Martinsos/edlib). * `--hardFilter` : This flag (which should only be used with mapping validation) turns off soft filtering and range-factorized equivalence classes, and removes all but the equally highest scoring mappings from the equivalence class label for each fragment. While we recommend using soft filtering (the default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping validation) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. suffix array intervals) that a mapping may miss and still be consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summar",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:802,Testability,benchmark,benchmarking,802,"# Salmon 0.13.0 release notes. ## Change to default behavior. Starting from this version of salmon, dovetailed mappings (see the [Bowtie2 manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#mates-can-overlap-contain-or-dovetail-each-other) for a description) are _not_ accepted by default using the built-in mapping (with or without `--validateMappings`). Moreover v0.13.0 has no flag to allow dovetail mappings. The `--allowDovetail` option has been added to v0.13.1 to enable this behavior, if desired. Exotic library types (e.g. MU, MSF, MSR) are no longer supported. If you need support for such a library type, please submit a feature request describing the use-case. ## Improvements and new flags. Again, there have been _significant_ improvements to mapping validation. Through broad benchmarking across many samples, we have worked to considerably improve the algorithm and its sensitivity. **We note** that it is likely that mapping validation will turned on by _default_ in future releases, and we strongly encourage all users to make use of this feature and report their experiences with it. Along with the default mapping validation (enabled via `--validateMappings`), there are two ""meta"" flags that enable mapping validation parameters meant to mimic configurations in which users might be interested. . * `--mimicBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags `--no-discordant` and `--no-mixed`), but using the default scoring scheme and allowing both mismatches and indels in alignments. * `--mimicStrictBT2` : This flag is a ""meta-flag"" that sets the parameters related to mapping and mapping validation to mimic alignment using Bowtie2 (with the flags suggested by [RSEM](http://deweylab.biostat.wisc.edu/rsem/rsem-calculate-expression.html)), but using the default scoring scheme and allowing both mismatches and indels in alignments. These setting essentially disallo",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:4003,Usability,simpl,simply,4003,"e default) for quantification, this flag can produce easier-to-understand equivalence classes if that is the primary object of study. * `--skipQuant` : Related to the above, this flag will stop execution before the actual quantification algorithm is run. * `--bandwidth` : This flag (which is only meaningful in conjunction with mapping validation), sets the bandwidth parameter of the relevant calls to `ksw2`'s alignment function. This determines how wide an area around the diagonal in the DP matrix should be calculated. * `--maxMMPExtension` : This flag (which should only be used with mapping validation) limits the length that a mappable prefix of a fragment may be extended before another search along the fragment is started. Smaller values for this flag can improve the sensitivity of mapping, but could increase run time. The default setting for `--numPreAuxModelSamples` has been lowered from 1,000,000 to 5,000. This simply means that the basic models (and cruically the read alignment error model) will start being applied much earlier on in the online algorithm. This has very little effect on samples with a decent number of fragments, but can considerably improve estimates (especially in alignment-based mode) for samples with only a small number of fragments. The definition of `--consensusSlack` has changed. Instead of being an absolute number, it is now a fractional value (between 0 and 1) the describes the number of ""hits"" (i.e. suffix array intervals) that a mapping may miss and still be consdered valid for chaining. ## Improvements and changes to alevin. * With this release alevin will dump a summary statistics of a single cell experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (de",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0:6620,Usability,simpl,simplify,6620," experiment into the file `alevin_meta_info.json` inside the aux folder of the output directory. * `EquivalenceClassBuilder` object will now have a single cell `SCRGValue` templaization, which will marginally reduce the memory used by the object. * Salmon's `--initUniform` flag has been linked with alevin, if enabled through command line (default false) it initialized the EM step with a uniform prior instead of with a unique equivalence class evidence. * Alevin can directly consume `bfh` file format generated using `--dumpBfh`. It provides an independant entry point into alevin's UMI deduplication step instead of the raw `FASTQ` files. * A bug in UMI deduplication step has been fixed. Previously the vertices in the maximum connected components of an arborescence were not being removed. * The `custom` mode of the single cell protocol for alevin, does not need explicit protocol specific command line flag. Although the full triplet `--umiLength --barcodeLength --end` command line options has to be specified to enable the `custom` mode. * Maximum allowable length of a barcode and/or the UMI has been set to 20 for the `custom` mode of a single cell experiment. * A new command line option `--keepCBFraction` has been added, which expects a value in the range (0, 1]. This parameter forces `alevin` to use the specified fraction of all the observed Cellular barcode in the input reads _after_ sequence correction. ## Bug fixes, deprecations and removals. * Fixed a rare bug that could cause salmon and alevin to ""hang"" when many read files were provided as input at the number of records in the read file were a divisor of the mini-batch size. Thanks to @rbenel for finding a dataset that triggers this bug and reporting it in #329. * The `--strictIntersect` flag led to unnecessary complexity in the codebase, and it seems, was not really used by anyone, so it was removed to simplify and streamline the code. * The `--useFSPD` flag has been deprecated for many releases and was removed.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.13.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:576,Availability,robust,robust,576,"Release Notes; ================. Major Release (including major updates to Alevin and improvements to mapping validation); ------------. We are very excited to release a major upgrade to the single-cell framework of the Salmon tool --- Alevin. Alevin is a droplet based single-cell RNA-seq data quantification tool which currently supports the following protocols:. 1. Drop-seq; 2. 10x-Chromium v2 (v1 via wrapper); 3. 10x-Chromimum v3; 4. CEL-Seq2. With the latest release, the UMI deduplication step has been completely changed, and it is now driven by a new, efficient and robust algorithm. The latest algorithm, instead of discarding gene-ambiguous reads, utilizes the UMI networks generated by transcript level equivalence classes to better deduplicate the UMIs; while still correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This signif",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:1379,Availability,robust,robustly,1379,"n tool which currently supports the following protocols:. 1. Drop-seq; 2. 10x-Chromium v2 (v1 via wrapper); 3. 10x-Chromimum v3; 4. CEL-Seq2. With the latest release, the UMI deduplication step has been completely changed, and it is now driven by a new, efficient and robust algorithm. The latest algorithm, instead of discarding gene-ambiguous reads, utilizes the UMI networks generated by transcript level equivalence classes to better deduplicate the UMIs; while still correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This significantly improves the mapping rate of the algorithm while providing a good tradeoff between senstivity and specificity. * By default, Alevin now dumps the gene-tiers categorization matrix with the name `quants_tier_mat.gz`, where the row and column order stays the same as `quants_mat.gz`. * `--forceCells X` ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:3406,Availability,down,downstream,3406," the 10x approach of selecting the whitelist barcodes, putting an upper bound on the total number of expected cells -- skipping the knee method. In brief, it only allows CBs with frequency more than 1/10th of the top 1% of the CBs as the initial whitelist. * A new command line flag`--numCellBootstraps X` has been added to perform multiple rounds of optimization by bootstrapping the number of mapped reads in the equivalence classes. Alevin dumps the mean and the variance of each entry in the Cell-Gene count matrix within two files `quants_mean_mat.gz` and `quants_var_mat.gz`. *Note:* The syntax for parsing the generated binary files stays the same as `quants_mat.gz`, but the order of the rows in the mean/variance matrix is stored in a different file with the name `quants_boot_rows.txt`, where column order stays the same as `quants_mat.gz`. * Alevin peforms intelligent whitelisting downstream of the quantification pipeline and has to make some assumptions like choosing a fraction of reads to learn low confidence CBs and in turn might erroneously exit, if the data results in no mapped or deduplicated reads to a CB in low confidence CBs. The problem doesn't happen when provided with external whitelist but if there is an error and the user is confident about it being just a warning, the error can be skipped by running Alevin with `--debug` flag. * `raw_cb_frequency.txt` now includes the frequency of all the observed Cellular Barcodes instead of only the whitelisted ones. * Alevin no longer supports the `--naive` command line flag. * By default the Command line flag `--debug` has been set True. *NOTE* the pipeline will not exit when observed Cellular Barcodes from High Confidence Region have relatively less (mapped)reads instead will continue with a warning. It's user's responsibility to keep notice of the warning generated by the pipeline. New Flags and Features for Salmon:; -----------. * **Note : Mapping validation (`--validateMappings`) is a recommended flag, and may b",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:3749,Availability,error,error,3749," * A new command line flag`--numCellBootstraps X` has been added to perform multiple rounds of optimization by bootstrapping the number of mapped reads in the equivalence classes. Alevin dumps the mean and the variance of each entry in the Cell-Gene count matrix within two files `quants_mean_mat.gz` and `quants_var_mat.gz`. *Note:* The syntax for parsing the generated binary files stays the same as `quants_mat.gz`, but the order of the rows in the mean/variance matrix is stored in a different file with the name `quants_boot_rows.txt`, where column order stays the same as `quants_mat.gz`. * Alevin peforms intelligent whitelisting downstream of the quantification pipeline and has to make some assumptions like choosing a fraction of reads to learn low confidence CBs and in turn might erroneously exit, if the data results in no mapped or deduplicated reads to a CB in low confidence CBs. The problem doesn't happen when provided with external whitelist but if there is an error and the user is confident about it being just a warning, the error can be skipped by running Alevin with `--debug` flag. * `raw_cb_frequency.txt` now includes the frequency of all the observed Cellular Barcodes instead of only the whitelisted ones. * Alevin no longer supports the `--naive` command line flag. * By default the Command line flag `--debug` has been set True. *NOTE* the pipeline will not exit when observed Cellular Barcodes from High Confidence Region have relatively less (mapped)reads instead will continue with a warning. It's user's responsibility to keep notice of the warning generated by the pipeline. New Flags and Features for Salmon:; -----------. * **Note : Mapping validation (`--validateMappings`) is a recommended flag, and may become a default in future releases**. Considerable improvements to mapping validation have been implemented. For paired-end reads, mapping validation will now consider multiple equally-best chains when scoring chains of MMPs. When reads map to multiple pos",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:3816,Availability,error,error,3816," * A new command line flag`--numCellBootstraps X` has been added to perform multiple rounds of optimization by bootstrapping the number of mapped reads in the equivalence classes. Alevin dumps the mean and the variance of each entry in the Cell-Gene count matrix within two files `quants_mean_mat.gz` and `quants_var_mat.gz`. *Note:* The syntax for parsing the generated binary files stays the same as `quants_mat.gz`, but the order of the rows in the mean/variance matrix is stored in a different file with the name `quants_boot_rows.txt`, where column order stays the same as `quants_mat.gz`. * Alevin peforms intelligent whitelisting downstream of the quantification pipeline and has to make some assumptions like choosing a fraction of reads to learn low confidence CBs and in turn might erroneously exit, if the data results in no mapped or deduplicated reads to a CB in low confidence CBs. The problem doesn't happen when provided with external whitelist but if there is an error and the user is confident about it being just a warning, the error can be skipped by running Alevin with `--debug` flag. * `raw_cb_frequency.txt` now includes the frequency of all the observed Cellular Barcodes instead of only the whitelisted ones. * Alevin no longer supports the `--naive` command line flag. * By default the Command line flag `--debug` has been set True. *NOTE* the pipeline will not exit when observed Cellular Barcodes from High Confidence Region have relatively less (mapped)reads instead will continue with a warning. It's user's responsibility to keep notice of the warning generated by the pipeline. New Flags and Features for Salmon:; -----------. * **Note : Mapping validation (`--validateMappings`) is a recommended flag, and may become a default in future releases**. Considerable improvements to mapping validation have been implemented. For paired-end reads, mapping validation will now consider multiple equally-best chains when scoring chains of MMPs. When reads map to multiple pos",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:64,Deployability,update,updates,64,"Release Notes; ================. Major Release (including major updates to Alevin and improvements to mapping validation); ------------. We are very excited to release a major upgrade to the single-cell framework of the Salmon tool --- Alevin. Alevin is a droplet based single-cell RNA-seq data quantification tool which currently supports the following protocols:. 1. Drop-seq; 2. 10x-Chromium v2 (v1 via wrapper); 3. 10x-Chromimum v3; 4. CEL-Seq2. With the latest release, the UMI deduplication step has been completely changed, and it is now driven by a new, efficient and robust algorithm. The latest algorithm, instead of discarding gene-ambiguous reads, utilizes the UMI networks generated by transcript level equivalence classes to better deduplicate the UMIs; while still correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This signif",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:160,Deployability,release,release,160,"Release Notes; ================. Major Release (including major updates to Alevin and improvements to mapping validation); ------------. We are very excited to release a major upgrade to the single-cell framework of the Salmon tool --- Alevin. Alevin is a droplet based single-cell RNA-seq data quantification tool which currently supports the following protocols:. 1. Drop-seq; 2. 10x-Chromium v2 (v1 via wrapper); 3. 10x-Chromimum v3; 4. CEL-Seq2. With the latest release, the UMI deduplication step has been completely changed, and it is now driven by a new, efficient and robust algorithm. The latest algorithm, instead of discarding gene-ambiguous reads, utilizes the UMI networks generated by transcript level equivalence classes to better deduplicate the UMIs; while still correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This signif",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:176,Deployability,upgrade,upgrade,176,"Release Notes; ================. Major Release (including major updates to Alevin and improvements to mapping validation); ------------. We are very excited to release a major upgrade to the single-cell framework of the Salmon tool --- Alevin. Alevin is a droplet based single-cell RNA-seq data quantification tool which currently supports the following protocols:. 1. Drop-seq; 2. 10x-Chromium v2 (v1 via wrapper); 3. 10x-Chromimum v3; 4. CEL-Seq2. With the latest release, the UMI deduplication step has been completely changed, and it is now driven by a new, efficient and robust algorithm. The latest algorithm, instead of discarding gene-ambiguous reads, utilizes the UMI networks generated by transcript level equivalence classes to better deduplicate the UMIs; while still correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This signif",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:466,Deployability,release,release,466,"Release Notes; ================. Major Release (including major updates to Alevin and improvements to mapping validation); ------------. We are very excited to release a major upgrade to the single-cell framework of the Salmon tool --- Alevin. Alevin is a droplet based single-cell RNA-seq data quantification tool which currently supports the following protocols:. 1. Drop-seq; 2. 10x-Chromium v2 (v1 via wrapper); 3. 10x-Chromimum v3; 4. CEL-Seq2. With the latest release, the UMI deduplication step has been completely changed, and it is now driven by a new, efficient and robust algorithm. The latest algorithm, instead of discarding gene-ambiguous reads, utilizes the UMI networks generated by transcript level equivalence classes to better deduplicate the UMIs; while still correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This signif",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:1280,Deployability,release,release,1280,"n tool which currently supports the following protocols:. 1. Drop-seq; 2. 10x-Chromium v2 (v1 via wrapper); 3. 10x-Chromimum v3; 4. CEL-Seq2. With the latest release, the UMI deduplication step has been completely changed, and it is now driven by a new, efficient and robust algorithm. The latest algorithm, instead of discarding gene-ambiguous reads, utilizes the UMI networks generated by transcript level equivalence classes to better deduplicate the UMIs; while still correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This significantly improves the mapping rate of the algorithm while providing a good tradeoff between senstivity and specificity. * By default, Alevin now dumps the gene-tiers categorization matrix with the name `quants_tier_mat.gz`, where the row and column order stays the same as `quants_mat.gz`. * `--forceCells X` ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:1365,Deployability,pipeline,pipeline,1365,"n tool which currently supports the following protocols:. 1. Drop-seq; 2. 10x-Chromium v2 (v1 via wrapper); 3. 10x-Chromimum v3; 4. CEL-Seq2. With the latest release, the UMI deduplication step has been completely changed, and it is now driven by a new, efficient and robust algorithm. The latest algorithm, instead of discarding gene-ambiguous reads, utilizes the UMI networks generated by transcript level equivalence classes to better deduplicate the UMIs; while still correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This significantly improves the mapping rate of the algorithm while providing a good tradeoff between senstivity and specificity. * By default, Alevin now dumps the gene-tiers categorization matrix with the name `quants_tier_mat.gz`, where the row and column order stays the same as `quants_mat.gz`. * `--forceCells X` ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:1586,Deployability,configurat,configuration,1586,"ly changed, and it is now driven by a new, efficient and robust algorithm. The latest algorithm, instead of discarding gene-ambiguous reads, utilizes the UMI networks generated by transcript level equivalence classes to better deduplicate the UMIs; while still correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This significantly improves the mapping rate of the algorithm while providing a good tradeoff between senstivity and specificity. * By default, Alevin now dumps the gene-tiers categorization matrix with the name `quants_tier_mat.gz`, where the row and column order stays the same as `quants_mat.gz`. * `--forceCells X` command line flag forces the Alevin pipeline to use top `X` number of Cellular Barcodes in initial whitelisting part of the pipeline -- skipping the knee method. * `--expectCells X` command line flag uses the 1",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:1850,Deployability,release,release,1850,"lyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This significantly improves the mapping rate of the algorithm while providing a good tradeoff between senstivity and specificity. * By default, Alevin now dumps the gene-tiers categorization matrix with the name `quants_tier_mat.gz`, where the row and column order stays the same as `quants_mat.gz`. * `--forceCells X` command line flag forces the Alevin pipeline to use top `X` number of Cellular Barcodes in initial whitelisting part of the pipeline -- skipping the knee method. * `--expectCells X` command line flag uses the 10x approach of selecting the whitelist barcodes, putting an upper bound on the total number of expected cells -- skipping the knee method. In brief, it only allows CBs with frequency more than 1/10th of the top 1% of the CBs as the initial whitelist. * A new command line flag`--numCellBootstraps X` has been added to perform multiple rounds of optimization ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:2345,Deployability,pipeline,pipeline,2345,"robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This significantly improves the mapping rate of the algorithm while providing a good tradeoff between senstivity and specificity. * By default, Alevin now dumps the gene-tiers categorization matrix with the name `quants_tier_mat.gz`, where the row and column order stays the same as `quants_mat.gz`. * `--forceCells X` command line flag forces the Alevin pipeline to use top `X` number of Cellular Barcodes in initial whitelisting part of the pipeline -- skipping the knee method. * `--expectCells X` command line flag uses the 10x approach of selecting the whitelist barcodes, putting an upper bound on the total number of expected cells -- skipping the knee method. In brief, it only allows CBs with frequency more than 1/10th of the top 1% of the CBs as the initial whitelist. * A new command line flag`--numCellBootstraps X` has been added to perform multiple rounds of optimization by bootstrapping the number of mapped reads in the equivalence classes. Alevin dumps the mean and the variance of each entry in the Cell-Gene count matrix within two files `quants_mean_mat.gz` and `quants_var_mat.gz`. *Note:* The syntax for parsing the generated binary files stays the same as `quants_mat.gz`, but the order of the rows in the mean/variance matrix is stored in a different file with the name `quants_boot_rows.txt`, where column order stays the same as `quants_mat.gz`. * Alevin peforms",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:2433,Deployability,pipeline,pipeline,2433,"robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This significantly improves the mapping rate of the algorithm while providing a good tradeoff between senstivity and specificity. * By default, Alevin now dumps the gene-tiers categorization matrix with the name `quants_tier_mat.gz`, where the row and column order stays the same as `quants_mat.gz`. * `--forceCells X` command line flag forces the Alevin pipeline to use top `X` number of Cellular Barcodes in initial whitelisting part of the pipeline -- skipping the knee method. * `--expectCells X` command line flag uses the 10x approach of selecting the whitelist barcodes, putting an upper bound on the total number of expected cells -- skipping the knee method. In brief, it only allows CBs with frequency more than 1/10th of the top 1% of the CBs as the initial whitelist. * A new command line flag`--numCellBootstraps X` has been added to perform multiple rounds of optimization by bootstrapping the number of mapped reads in the equivalence classes. Alevin dumps the mean and the variance of each entry in the Cell-Gene count matrix within two files `quants_mean_mat.gz` and `quants_var_mat.gz`. *Note:* The syntax for parsing the generated binary files stays the same as `quants_mat.gz`, but the order of the rows in the mean/variance matrix is stored in a different file with the name `quants_boot_rows.txt`, where column order stays the same as `quants_mat.gz`. * Alevin peforms",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:3439,Deployability,pipeline,pipeline,3439," the 10x approach of selecting the whitelist barcodes, putting an upper bound on the total number of expected cells -- skipping the knee method. In brief, it only allows CBs with frequency more than 1/10th of the top 1% of the CBs as the initial whitelist. * A new command line flag`--numCellBootstraps X` has been added to perform multiple rounds of optimization by bootstrapping the number of mapped reads in the equivalence classes. Alevin dumps the mean and the variance of each entry in the Cell-Gene count matrix within two files `quants_mean_mat.gz` and `quants_var_mat.gz`. *Note:* The syntax for parsing the generated binary files stays the same as `quants_mat.gz`, but the order of the rows in the mean/variance matrix is stored in a different file with the name `quants_boot_rows.txt`, where column order stays the same as `quants_mat.gz`. * Alevin peforms intelligent whitelisting downstream of the quantification pipeline and has to make some assumptions like choosing a fraction of reads to learn low confidence CBs and in turn might erroneously exit, if the data results in no mapped or deduplicated reads to a CB in low confidence CBs. The problem doesn't happen when provided with external whitelist but if there is an error and the user is confident about it being just a warning, the error can be skipped by running Alevin with `--debug` flag. * `raw_cb_frequency.txt` now includes the frequency of all the observed Cellular Barcodes instead of only the whitelisted ones. * Alevin no longer supports the `--naive` command line flag. * By default the Command line flag `--debug` has been set True. *NOTE* the pipeline will not exit when observed Cellular Barcodes from High Confidence Region have relatively less (mapped)reads instead will continue with a warning. It's user's responsibility to keep notice of the warning generated by the pipeline. New Flags and Features for Salmon:; -----------. * **Note : Mapping validation (`--validateMappings`) is a recommended flag, and may b",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:4140,Deployability,pipeline,pipeline,4140,"ws in the mean/variance matrix is stored in a different file with the name `quants_boot_rows.txt`, where column order stays the same as `quants_mat.gz`. * Alevin peforms intelligent whitelisting downstream of the quantification pipeline and has to make some assumptions like choosing a fraction of reads to learn low confidence CBs and in turn might erroneously exit, if the data results in no mapped or deduplicated reads to a CB in low confidence CBs. The problem doesn't happen when provided with external whitelist but if there is an error and the user is confident about it being just a warning, the error can be skipped by running Alevin with `--debug` flag. * `raw_cb_frequency.txt` now includes the frequency of all the observed Cellular Barcodes instead of only the whitelisted ones. * Alevin no longer supports the `--naive` command line flag. * By default the Command line flag `--debug` has been set True. *NOTE* the pipeline will not exit when observed Cellular Barcodes from High Confidence Region have relatively less (mapped)reads instead will continue with a warning. It's user's responsibility to keep notice of the warning generated by the pipeline. New Flags and Features for Salmon:; -----------. * **Note : Mapping validation (`--validateMappings`) is a recommended flag, and may become a default in future releases**. Considerable improvements to mapping validation have been implemented. For paired-end reads, mapping validation will now consider multiple equally-best chains when scoring chains of MMPs. When reads map to multiple positions on a single transcript, this allows for improved mapping, since multiple positions for the individual reads will be propagated to the algorithm that selects the best mapping for the pair (which can take into account the expected pairing constraints). * Added new flag in mapping validation mode `--maxMMPExtension` (default value of 7). This flag limits the length of the MMP by which a match between the suffix array and read can be e",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:4370,Deployability,pipeline,pipeline,4370,"e same as `quants_mat.gz`. * Alevin peforms intelligent whitelisting downstream of the quantification pipeline and has to make some assumptions like choosing a fraction of reads to learn low confidence CBs and in turn might erroneously exit, if the data results in no mapped or deduplicated reads to a CB in low confidence CBs. The problem doesn't happen when provided with external whitelist but if there is an error and the user is confident about it being just a warning, the error can be skipped by running Alevin with `--debug` flag. * `raw_cb_frequency.txt` now includes the frequency of all the observed Cellular Barcodes instead of only the whitelisted ones. * Alevin no longer supports the `--naive` command line flag. * By default the Command line flag `--debug` has been set True. *NOTE* the pipeline will not exit when observed Cellular Barcodes from High Confidence Region have relatively less (mapped)reads instead will continue with a warning. It's user's responsibility to keep notice of the warning generated by the pipeline. New Flags and Features for Salmon:; -----------. * **Note : Mapping validation (`--validateMappings`) is a recommended flag, and may become a default in future releases**. Considerable improvements to mapping validation have been implemented. For paired-end reads, mapping validation will now consider multiple equally-best chains when scoring chains of MMPs. When reads map to multiple positions on a single transcript, this allows for improved mapping, since multiple positions for the individual reads will be propagated to the algorithm that selects the best mapping for the pair (which can take into account the expected pairing constraints). * Added new flag in mapping validation mode `--maxMMPExtension` (default value of 7). This flag limits the length of the MMP by which a match between the suffix array and read can be extended. Smaller values for this parameter can potentially increase the mapping sensitivity at the cost of requiring more suf",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:4540,Deployability,release,releases,4540,"osing a fraction of reads to learn low confidence CBs and in turn might erroneously exit, if the data results in no mapped or deduplicated reads to a CB in low confidence CBs. The problem doesn't happen when provided with external whitelist but if there is an error and the user is confident about it being just a warning, the error can be skipped by running Alevin with `--debug` flag. * `raw_cb_frequency.txt` now includes the frequency of all the observed Cellular Barcodes instead of only the whitelisted ones. * Alevin no longer supports the `--naive` command line flag. * By default the Command line flag `--debug` has been set True. *NOTE* the pipeline will not exit when observed Cellular Barcodes from High Confidence Region have relatively less (mapped)reads instead will continue with a warning. It's user's responsibility to keep notice of the warning generated by the pipeline. New Flags and Features for Salmon:; -----------. * **Note : Mapping validation (`--validateMappings`) is a recommended flag, and may become a default in future releases**. Considerable improvements to mapping validation have been implemented. For paired-end reads, mapping validation will now consider multiple equally-best chains when scoring chains of MMPs. When reads map to multiple positions on a single transcript, this allows for improved mapping, since multiple positions for the individual reads will be propagated to the algorithm that selects the best mapping for the pair (which can take into account the expected pairing constraints). * Added new flag in mapping validation mode `--maxMMPExtension` (default value of 7). This flag limits the length of the MMP by which a match between the suffix array and read can be extended. Smaller values for this parameter can potentially increase the mapping sensitivity at the cost of requiring more suffix array lookups. The default value should generally work well, and increases the sensitivity with respect to unconstrained mapping validation with litt",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:8111,Deployability,release,release,8111,"xpense. * Added a new flag in mapping validation mode `--mimicStrictBT2`. This flag attempts to mimic the *very* strict mapping parameters with which Bowtie2 is invoked when it is used with RSEM. Specifically, it disallows orphans, indels in alignments, and dovetailing reads. It also sets the minimum score fraction (`--minScoreFraction`) to 0.8. We do *not* generally recommend using this flag, as these parameters tend to be overly strict and can eliminate many valid mappings / alignments. However, if one wishes to attempt to mimic that behavior with mapping validation, this ""meta-flag"" sets the relevant corresponding parameters. We are still optimizing details of the parameters set by this meta-flag, but it already obtains the desired effect across a large variety of datasets. . * Salmon now supports a flag `--discardOrphans` in alignment-based mode. If run with this flag in alignment mode, salmon will simply ignore orphaned alignments for the purposes of quantification (matching the behavior of other tools like RSEM and eXpress). * Salmon now only waits 1 second for version information before timing out. Bug Fixes:; ----------. * Fixed two small bugs (caught by @fataltes) in the MMP chaining algorithm. This can improve the predicted mapping locations in some difficult corner cases. * Fixed a bug that made it difficult to set the alignment scoring parameters (match score, mismatch cost, gap open cost and gap extension cost) in mapping validation mode. Previously, these were parsed as `int8_t` type variables, now they are parsed as `int16_t` and then they are explicitly checked to adhere to the required bounds. * **Fixed the bioconda-based OSX build**: In v0.11.3, the binary created via bioconda for OSX would segfault. This was the result of a bug that only seemed to affect the C++ compiler in older versions of OSX (like that used in bioconda). This has been addressed in the current release, and you should be able to obtain a working bioconda build of 0.12.0 for OSX.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:562,Energy Efficiency,efficient,efficient,562,"Release Notes; ================. Major Release (including major updates to Alevin and improvements to mapping validation); ------------. We are very excited to release a major upgrade to the single-cell framework of the Salmon tool --- Alevin. Alevin is a droplet based single-cell RNA-seq data quantification tool which currently supports the following protocols:. 1. Drop-seq; 2. 10x-Chromium v2 (v1 via wrapper); 3. 10x-Chromimum v3; 4. CEL-Seq2. With the latest release, the UMI deduplication step has been completely changed, and it is now driven by a new, efficient and robust algorithm. The latest algorithm, instead of discarding gene-ambiguous reads, utilizes the UMI networks generated by transcript level equivalence classes to better deduplicate the UMIs; while still correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This signif",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:354,Integrability,protocol,protocols,354,"Release Notes; ================. Major Release (including major updates to Alevin and improvements to mapping validation); ------------. We are very excited to release a major upgrade to the single-cell framework of the Salmon tool --- Alevin. Alevin is a droplet based single-cell RNA-seq data quantification tool which currently supports the following protocols:. 1. Drop-seq; 2. 10x-Chromium v2 (v1 via wrapper); 3. 10x-Chromimum v3; 4. CEL-Seq2. With the latest release, the UMI deduplication step has been completely changed, and it is now driven by a new, efficient and robust algorithm. The latest algorithm, instead of discarding gene-ambiguous reads, utilizes the UMI networks generated by transcript level equivalence classes to better deduplicate the UMIs; while still correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This signif",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:406,Integrability,wrap,wrapper,406,"Release Notes; ================. Major Release (including major updates to Alevin and improvements to mapping validation); ------------. We are very excited to release a major upgrade to the single-cell framework of the Salmon tool --- Alevin. Alevin is a droplet based single-cell RNA-seq data quantification tool which currently supports the following protocols:. 1. Drop-seq; 2. 10x-Chromium v2 (v1 via wrapper); 3. 10x-Chromimum v3; 4. CEL-Seq2. With the latest release, the UMI deduplication step has been completely changed, and it is now driven by a new, efficient and robust algorithm. The latest algorithm, instead of discarding gene-ambiguous reads, utilizes the UMI networks generated by transcript level equivalence classes to better deduplicate the UMIs; while still correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This signif",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:1559,Integrability,protocol,protocols,1559,"ly changed, and it is now driven by a new, efficient and robust algorithm. The latest algorithm, instead of discarding gene-ambiguous reads, utilizes the UMI networks generated by transcript level equivalence classes to better deduplicate the UMIs; while still correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This significantly improves the mapping rate of the algorithm while providing a good tradeoff between senstivity and specificity. * By default, Alevin now dumps the gene-tiers categorization matrix with the name `quants_tier_mat.gz`, where the row and column order stays the same as `quants_mat.gz`. * `--forceCells X` command line flag forces the Alevin pipeline to use top `X` number of Cellular Barcodes in initial whitelisting part of the pipeline -- skipping the knee method. * `--expectCells X` command line flag uses the 1",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:1586,Modifiability,config,configuration,1586,"ly changed, and it is now driven by a new, efficient and robust algorithm. The latest algorithm, instead of discarding gene-ambiguous reads, utilizes the UMI networks generated by transcript level equivalence classes to better deduplicate the UMIs; while still correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This significantly improves the mapping rate of the algorithm while providing a good tradeoff between senstivity and specificity. * By default, Alevin now dumps the gene-tiers categorization matrix with the name `quants_tier_mat.gz`, where the row and column order stays the same as `quants_mat.gz`. * `--forceCells X` command line flag forces the Alevin pipeline to use top `X` number of Cellular Barcodes in initial whitelisting part of the pipeline -- skipping the knee method. * `--expectCells X` command line flag uses the 1",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:1807,Modifiability,config,configured,1807,"till correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This significantly improves the mapping rate of the algorithm while providing a good tradeoff between senstivity and specificity. * By default, Alevin now dumps the gene-tiers categorization matrix with the name `quants_tier_mat.gz`, where the row and column order stays the same as `quants_mat.gz`. * `--forceCells X` command line flag forces the Alevin pipeline to use top `X` number of Cellular Barcodes in initial whitelisting part of the pipeline -- skipping the knee method. * `--expectCells X` command line flag uses the 10x approach of selecting the whitelist barcodes, putting an upper bound on the total number of expected cells -- skipping the knee method. In brief, it only allows CBs with frequency more than 1/10th of the top 1% of the CBs as the initial whitelist. * A ne",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:5211,Modifiability,extend,extended,5211,"n observed Cellular Barcodes from High Confidence Region have relatively less (mapped)reads instead will continue with a warning. It's user's responsibility to keep notice of the warning generated by the pipeline. New Flags and Features for Salmon:; -----------. * **Note : Mapping validation (`--validateMappings`) is a recommended flag, and may become a default in future releases**. Considerable improvements to mapping validation have been implemented. For paired-end reads, mapping validation will now consider multiple equally-best chains when scoring chains of MMPs. When reads map to multiple positions on a single transcript, this allows for improved mapping, since multiple positions for the individual reads will be propagated to the algorithm that selects the best mapping for the pair (which can take into account the expected pairing constraints). * Added new flag in mapping validation mode `--maxMMPExtension` (default value of 7). This flag limits the length of the MMP by which a match between the suffix array and read can be extended. Smaller values for this parameter can potentially increase the mapping sensitivity at the cost of requiring more suffix array lookups. The default value should generally work well, and increases the sensitivity with respect to unconstrained mapping validation with little impact on runtime. This heursitic is meant to approximate some of the ideas from [selective alignment](https://dl.acm.org/citation.cfm?id=3233589&dl=ACM&coll=DL). Note that this flag can be used in conjunction with `--consensusSlack` to increase the sensitivity of mapping in mapping validation mode (which is safe from the perspective of specificity as these mappings will be score anyway). For example, setting `--maxMMPExtension 5 --consensusSlack 7` would shorten maximum extensions even more, and consider many more _potential_ loci when chaining, which could lead to more sensitivity. However, the default values have been tuned to provide fairly high sensitivity for ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:7719,Modifiability,variab,variables,7719,"xpense. * Added a new flag in mapping validation mode `--mimicStrictBT2`. This flag attempts to mimic the *very* strict mapping parameters with which Bowtie2 is invoked when it is used with RSEM. Specifically, it disallows orphans, indels in alignments, and dovetailing reads. It also sets the minimum score fraction (`--minScoreFraction`) to 0.8. We do *not* generally recommend using this flag, as these parameters tend to be overly strict and can eliminate many valid mappings / alignments. However, if one wishes to attempt to mimic that behavior with mapping validation, this ""meta-flag"" sets the relevant corresponding parameters. We are still optimizing details of the parameters set by this meta-flag, but it already obtains the desired effect across a large variety of datasets. . * Salmon now supports a flag `--discardOrphans` in alignment-based mode. If run with this flag in alignment mode, salmon will simply ignore orphaned alignments for the purposes of quantification (matching the behavior of other tools like RSEM and eXpress). * Salmon now only waits 1 second for version information before timing out. Bug Fixes:; ----------. * Fixed two small bugs (caught by @fataltes) in the MMP chaining algorithm. This can improve the predicted mapping locations in some difficult corner cases. * Fixed a bug that made it difficult to set the alignment scoring parameters (match score, mismatch cost, gap open cost and gap extension cost) in mapping validation mode. Previously, these were parsed as `int8_t` type variables, now they are parsed as `int16_t` and then they are explicitly checked to adhere to the required bounds. * **Fixed the bioconda-based OSX build**: In v0.11.3, the binary created via bioconda for OSX would segfault. This was the result of a bug that only seemed to affect the C++ compiler in older versions of OSX (like that used in bioconda). This has been addressed in the current release, and you should be able to obtain a working bioconda build of 0.12.0 for OSX.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:2837,Performance,perform,perform,2837," would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This significantly improves the mapping rate of the algorithm while providing a good tradeoff between senstivity and specificity. * By default, Alevin now dumps the gene-tiers categorization matrix with the name `quants_tier_mat.gz`, where the row and column order stays the same as `quants_mat.gz`. * `--forceCells X` command line flag forces the Alevin pipeline to use top `X` number of Cellular Barcodes in initial whitelisting part of the pipeline -- skipping the knee method. * `--expectCells X` command line flag uses the 10x approach of selecting the whitelist barcodes, putting an upper bound on the total number of expected cells -- skipping the knee method. In brief, it only allows CBs with frequency more than 1/10th of the top 1% of the CBs as the initial whitelist. * A new command line flag`--numCellBootstraps X` has been added to perform multiple rounds of optimization by bootstrapping the number of mapped reads in the equivalence classes. Alevin dumps the mean and the variance of each entry in the Cell-Gene count matrix within two files `quants_mean_mat.gz` and `quants_var_mat.gz`. *Note:* The syntax for parsing the generated binary files stays the same as `quants_mat.gz`, but the order of the rows in the mean/variance matrix is stored in a different file with the name `quants_boot_rows.txt`, where column order stays the same as `quants_mat.gz`. * Alevin peforms intelligent whitelisting downstream of the quantification pipeline and has to make some assumptions like choosing a fraction of reads to learn low confidence CBs and in turn might erroneously exit, if the data results in no mapped or deduplicated reads to a CB in low confidence CBs. The problem doesn't happen when provided with external whitelist but if there is an error and the user is confident about it being just a warning, the error can be skipped by running Alevin with",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:2864,Performance,optimiz,optimization,2864," would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This significantly improves the mapping rate of the algorithm while providing a good tradeoff between senstivity and specificity. * By default, Alevin now dumps the gene-tiers categorization matrix with the name `quants_tier_mat.gz`, where the row and column order stays the same as `quants_mat.gz`. * `--forceCells X` command line flag forces the Alevin pipeline to use top `X` number of Cellular Barcodes in initial whitelisting part of the pipeline -- skipping the knee method. * `--expectCells X` command line flag uses the 10x approach of selecting the whitelist barcodes, putting an upper bound on the total number of expected cells -- skipping the knee method. In brief, it only allows CBs with frequency more than 1/10th of the top 1% of the CBs as the initial whitelist. * A new command line flag`--numCellBootstraps X` has been added to perform multiple rounds of optimization by bootstrapping the number of mapped reads in the equivalence classes. Alevin dumps the mean and the variance of each entry in the Cell-Gene count matrix within two files `quants_mean_mat.gz` and `quants_var_mat.gz`. *Note:* The syntax for parsing the generated binary files stays the same as `quants_mat.gz`, but the order of the rows in the mean/variance matrix is stored in a different file with the name `quants_boot_rows.txt`, where column order stays the same as `quants_mat.gz`. * Alevin peforms intelligent whitelisting downstream of the quantification pipeline and has to make some assumptions like choosing a fraction of reads to learn low confidence CBs and in turn might erroneously exit, if the data results in no mapped or deduplicated reads to a CB in low confidence CBs. The problem doesn't happen when provided with external whitelist but if there is an error and the user is confident about it being just a warning, the error can be skipped by running Alevin with",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:6122,Performance,tune,tuned,6122,"f the MMP by which a match between the suffix array and read can be extended. Smaller values for this parameter can potentially increase the mapping sensitivity at the cost of requiring more suffix array lookups. The default value should generally work well, and increases the sensitivity with respect to unconstrained mapping validation with little impact on runtime. This heursitic is meant to approximate some of the ideas from [selective alignment](https://dl.acm.org/citation.cfm?id=3233589&dl=ACM&coll=DL). Note that this flag can be used in conjunction with `--consensusSlack` to increase the sensitivity of mapping in mapping validation mode (which is safe from the perspective of specificity as these mappings will be score anyway). For example, setting `--maxMMPExtension 5 --consensusSlack 7` would shorten maximum extensions even more, and consider many more _potential_ loci when chaining, which could lead to more sensitivity. However, the default values have been tuned to provide fairly high sensitivity for minimal extra computational expense. * Added a new flag in mapping validation mode `--mimicStrictBT2`. This flag attempts to mimic the *very* strict mapping parameters with which Bowtie2 is invoked when it is used with RSEM. Specifically, it disallows orphans, indels in alignments, and dovetailing reads. It also sets the minimum score fraction (`--minScoreFraction`) to 0.8. We do *not* generally recommend using this flag, as these parameters tend to be overly strict and can eliminate many valid mappings / alignments. However, if one wishes to attempt to mimic that behavior with mapping validation, this ""meta-flag"" sets the relevant corresponding parameters. We are still optimizing details of the parameters set by this meta-flag, but it already obtains the desired effect across a large variety of datasets. . * Salmon now supports a flag `--discardOrphans` in alignment-based mode. If run with this flag in alignment mode, salmon will simply ignore orphaned alignmen",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:6846,Performance,optimiz,optimizing,6846,"--maxMMPExtension 5 --consensusSlack 7` would shorten maximum extensions even more, and consider many more _potential_ loci when chaining, which could lead to more sensitivity. However, the default values have been tuned to provide fairly high sensitivity for minimal extra computational expense. * Added a new flag in mapping validation mode `--mimicStrictBT2`. This flag attempts to mimic the *very* strict mapping parameters with which Bowtie2 is invoked when it is used with RSEM. Specifically, it disallows orphans, indels in alignments, and dovetailing reads. It also sets the minimum score fraction (`--minScoreFraction`) to 0.8. We do *not* generally recommend using this flag, as these parameters tend to be overly strict and can eliminate many valid mappings / alignments. However, if one wishes to attempt to mimic that behavior with mapping validation, this ""meta-flag"" sets the relevant corresponding parameters. We are still optimizing details of the parameters set by this meta-flag, but it already obtains the desired effect across a large variety of datasets. . * Salmon now supports a flag `--discardOrphans` in alignment-based mode. If run with this flag in alignment mode, salmon will simply ignore orphaned alignments for the purposes of quantification (matching the behavior of other tools like RSEM and eXpress). * Salmon now only waits 1 second for version information before timing out. Bug Fixes:; ----------. * Fixed two small bugs (caught by @fataltes) in the MMP chaining algorithm. This can improve the predicted mapping locations in some difficult corner cases. * Fixed a bug that made it difficult to set the alignment scoring parameters (match score, mismatch cost, gap open cost and gap extension cost) in mapping validation mode. Previously, these were parsed as `int8_t` type variables, now they are parsed as `int16_t` and then they are explicitly checked to adhere to the required bounds. * **Fixed the bioconda-based OSX build**: In v0.11.3, the binary created v",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:5803,Safety,safe,safe,5803,"sitions on a single transcript, this allows for improved mapping, since multiple positions for the individual reads will be propagated to the algorithm that selects the best mapping for the pair (which can take into account the expected pairing constraints). * Added new flag in mapping validation mode `--maxMMPExtension` (default value of 7). This flag limits the length of the MMP by which a match between the suffix array and read can be extended. Smaller values for this parameter can potentially increase the mapping sensitivity at the cost of requiring more suffix array lookups. The default value should generally work well, and increases the sensitivity with respect to unconstrained mapping validation with little impact on runtime. This heursitic is meant to approximate some of the ideas from [selective alignment](https://dl.acm.org/citation.cfm?id=3233589&dl=ACM&coll=DL). Note that this flag can be used in conjunction with `--consensusSlack` to increase the sensitivity of mapping in mapping validation mode (which is safe from the perspective of specificity as these mappings will be score anyway). For example, setting `--maxMMPExtension 5 --consensusSlack 7` would shorten maximum extensions even more, and consider many more _potential_ loci when chaining, which could lead to more sensitivity. However, the default values have been tuned to provide fairly high sensitivity for minimal extra computational expense. * Added a new flag in mapping validation mode `--mimicStrictBT2`. This flag attempts to mimic the *very* strict mapping parameters with which Bowtie2 is invoked when it is used with RSEM. Specifically, it disallows orphans, indels in alignments, and dovetailing reads. It also sets the minimum score fraction (`--minScoreFraction`) to 0.8. We do *not* generally recommend using this flag, as these parameters tend to be overly strict and can eliminate many valid mappings / alignments. However, if one wishes to attempt to mimic that behavior with mapping validation",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:7440,Safety,predict,predicted,7440,"xpense. * Added a new flag in mapping validation mode `--mimicStrictBT2`. This flag attempts to mimic the *very* strict mapping parameters with which Bowtie2 is invoked when it is used with RSEM. Specifically, it disallows orphans, indels in alignments, and dovetailing reads. It also sets the minimum score fraction (`--minScoreFraction`) to 0.8. We do *not* generally recommend using this flag, as these parameters tend to be overly strict and can eliminate many valid mappings / alignments. However, if one wishes to attempt to mimic that behavior with mapping validation, this ""meta-flag"" sets the relevant corresponding parameters. We are still optimizing details of the parameters set by this meta-flag, but it already obtains the desired effect across a large variety of datasets. . * Salmon now supports a flag `--discardOrphans` in alignment-based mode. If run with this flag in alignment mode, salmon will simply ignore orphaned alignments for the purposes of quantification (matching the behavior of other tools like RSEM and eXpress). * Salmon now only waits 1 second for version information before timing out. Bug Fixes:; ----------. * Fixed two small bugs (caught by @fataltes) in the MMP chaining algorithm. This can improve the predicted mapping locations in some difficult corner cases. * Fixed a bug that made it difficult to set the alignment scoring parameters (match score, mismatch cost, gap open cost and gap extension cost) in mapping validation mode. Previously, these were parsed as `int8_t` type variables, now they are parsed as `int16_t` and then they are explicitly checked to adhere to the required bounds. * **Fixed the bioconda-based OSX build**: In v0.11.3, the binary created via bioconda for OSX would segfault. This was the result of a bug that only seemed to affect the C++ compiler in older versions of OSX (like that used in bioconda). This has been addressed in the current release, and you should be able to obtain a working bioconda build of 0.12.0 for OSX.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:110,Security,validat,validation,110,"Release Notes; ================. Major Release (including major updates to Alevin and improvements to mapping validation); ------------. We are very excited to release a major upgrade to the single-cell framework of the Salmon tool --- Alevin. Alevin is a droplet based single-cell RNA-seq data quantification tool which currently supports the following protocols:. 1. Drop-seq; 2. 10x-Chromium v2 (v1 via wrapper); 3. 10x-Chromimum v3; 4. CEL-Seq2. With the latest release, the UMI deduplication step has been completely changed, and it is now driven by a new, efficient and robust algorithm. The latest algorithm, instead of discarding gene-ambiguous reads, utilizes the UMI networks generated by transcript level equivalence classes to better deduplicate the UMIs; while still correcting for UMI collisions. We also show that including the gene ambiguous reads into the analyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This signif",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:1877,Security,validat,validateMapping,1877,"lyses significantly improves the accuracy of the quantification of the gene count matrix in our latest [preprint](https://www.biorxiv.org/content/early/2018/10/24/335000). Moreover, Alevin introduces a new categorization of the genes into informative tiers, allowing concise assessment of the quality of evidence that led to each UMI count in each cell. Along with many other minor bug fixes, the latest release adds two more ways of selecting an initial whitelist for starting the Alevin pipeline more robustly. New Flags and Features for Alevin:; ------------. * Along with already present customizable CB and UMI length command line flags, Alevin now support two more single-cell protocols without explicit configuration. `--chromiumV3` for v3 chemistry of 10x data, works same as v2 chemistry except the UMI length has been increased from 10 to 12. `--celseq2` for CelSeq2 data where both CB and UMI length by default has been configured to 6. * Alevin, with the latest release, would be using `--validateMapping` and `--minScoreFraction` w/ value 0.8 as the default (although tweakble), mapping based option. This significantly improves the mapping rate of the algorithm while providing a good tradeoff between senstivity and specificity. * By default, Alevin now dumps the gene-tiers categorization matrix with the name `quants_tier_mat.gz`, where the row and column order stays the same as `quants_mat.gz`. * `--forceCells X` command line flag forces the Alevin pipeline to use top `X` number of Cellular Barcodes in initial whitelisting part of the pipeline -- skipping the knee method. * `--expectCells X` command line flag uses the 10x approach of selecting the whitelist barcodes, putting an upper bound on the total number of expected cells -- skipping the knee method. In brief, it only allows CBs with frequency more than 1/10th of the top 1% of the CBs as the initial whitelist. * A new command line flag`--numCellBootstraps X` has been added to perform multiple rounds of optimization ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:4448,Security,validat,validation,4448,"osing a fraction of reads to learn low confidence CBs and in turn might erroneously exit, if the data results in no mapped or deduplicated reads to a CB in low confidence CBs. The problem doesn't happen when provided with external whitelist but if there is an error and the user is confident about it being just a warning, the error can be skipped by running Alevin with `--debug` flag. * `raw_cb_frequency.txt` now includes the frequency of all the observed Cellular Barcodes instead of only the whitelisted ones. * Alevin no longer supports the `--naive` command line flag. * By default the Command line flag `--debug` has been set True. *NOTE* the pipeline will not exit when observed Cellular Barcodes from High Confidence Region have relatively less (mapped)reads instead will continue with a warning. It's user's responsibility to keep notice of the warning generated by the pipeline. New Flags and Features for Salmon:; -----------. * **Note : Mapping validation (`--validateMappings`) is a recommended flag, and may become a default in future releases**. Considerable improvements to mapping validation have been implemented. For paired-end reads, mapping validation will now consider multiple equally-best chains when scoring chains of MMPs. When reads map to multiple positions on a single transcript, this allows for improved mapping, since multiple positions for the individual reads will be propagated to the algorithm that selects the best mapping for the pair (which can take into account the expected pairing constraints). * Added new flag in mapping validation mode `--maxMMPExtension` (default value of 7). This flag limits the length of the MMP by which a match between the suffix array and read can be extended. Smaller values for this parameter can potentially increase the mapping sensitivity at the cost of requiring more suffix array lookups. The default value should generally work well, and increases the sensitivity with respect to unconstrained mapping validation with litt",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:4463,Security,validat,validateMappings,4463,"osing a fraction of reads to learn low confidence CBs and in turn might erroneously exit, if the data results in no mapped or deduplicated reads to a CB in low confidence CBs. The problem doesn't happen when provided with external whitelist but if there is an error and the user is confident about it being just a warning, the error can be skipped by running Alevin with `--debug` flag. * `raw_cb_frequency.txt` now includes the frequency of all the observed Cellular Barcodes instead of only the whitelisted ones. * Alevin no longer supports the `--naive` command line flag. * By default the Command line flag `--debug` has been set True. *NOTE* the pipeline will not exit when observed Cellular Barcodes from High Confidence Region have relatively less (mapped)reads instead will continue with a warning. It's user's responsibility to keep notice of the warning generated by the pipeline. New Flags and Features for Salmon:; -----------. * **Note : Mapping validation (`--validateMappings`) is a recommended flag, and may become a default in future releases**. Considerable improvements to mapping validation have been implemented. For paired-end reads, mapping validation will now consider multiple equally-best chains when scoring chains of MMPs. When reads map to multiple positions on a single transcript, this allows for improved mapping, since multiple positions for the individual reads will be propagated to the algorithm that selects the best mapping for the pair (which can take into account the expected pairing constraints). * Added new flag in mapping validation mode `--maxMMPExtension` (default value of 7). This flag limits the length of the MMP by which a match between the suffix array and read can be extended. Smaller values for this parameter can potentially increase the mapping sensitivity at the cost of requiring more suffix array lookups. The default value should generally work well, and increases the sensitivity with respect to unconstrained mapping validation with litt",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:4589,Security,validat,validation,4589,"data results in no mapped or deduplicated reads to a CB in low confidence CBs. The problem doesn't happen when provided with external whitelist but if there is an error and the user is confident about it being just a warning, the error can be skipped by running Alevin with `--debug` flag. * `raw_cb_frequency.txt` now includes the frequency of all the observed Cellular Barcodes instead of only the whitelisted ones. * Alevin no longer supports the `--naive` command line flag. * By default the Command line flag `--debug` has been set True. *NOTE* the pipeline will not exit when observed Cellular Barcodes from High Confidence Region have relatively less (mapped)reads instead will continue with a warning. It's user's responsibility to keep notice of the warning generated by the pipeline. New Flags and Features for Salmon:; -----------. * **Note : Mapping validation (`--validateMappings`) is a recommended flag, and may become a default in future releases**. Considerable improvements to mapping validation have been implemented. For paired-end reads, mapping validation will now consider multiple equally-best chains when scoring chains of MMPs. When reads map to multiple positions on a single transcript, this allows for improved mapping, since multiple positions for the individual reads will be propagated to the algorithm that selects the best mapping for the pair (which can take into account the expected pairing constraints). * Added new flag in mapping validation mode `--maxMMPExtension` (default value of 7). This flag limits the length of the MMP by which a match between the suffix array and read can be extended. Smaller values for this parameter can potentially increase the mapping sensitivity at the cost of requiring more suffix array lookups. The default value should generally work well, and increases the sensitivity with respect to unconstrained mapping validation with little impact on runtime. This heursitic is meant to approximate some of the ideas from [selective al",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:4653,Security,validat,validation,4653,"sn't happen when provided with external whitelist but if there is an error and the user is confident about it being just a warning, the error can be skipped by running Alevin with `--debug` flag. * `raw_cb_frequency.txt` now includes the frequency of all the observed Cellular Barcodes instead of only the whitelisted ones. * Alevin no longer supports the `--naive` command line flag. * By default the Command line flag `--debug` has been set True. *NOTE* the pipeline will not exit when observed Cellular Barcodes from High Confidence Region have relatively less (mapped)reads instead will continue with a warning. It's user's responsibility to keep notice of the warning generated by the pipeline. New Flags and Features for Salmon:; -----------. * **Note : Mapping validation (`--validateMappings`) is a recommended flag, and may become a default in future releases**. Considerable improvements to mapping validation have been implemented. For paired-end reads, mapping validation will now consider multiple equally-best chains when scoring chains of MMPs. When reads map to multiple positions on a single transcript, this allows for improved mapping, since multiple positions for the individual reads will be propagated to the algorithm that selects the best mapping for the pair (which can take into account the expected pairing constraints). * Added new flag in mapping validation mode `--maxMMPExtension` (default value of 7). This flag limits the length of the MMP by which a match between the suffix array and read can be extended. Smaller values for this parameter can potentially increase the mapping sensitivity at the cost of requiring more suffix array lookups. The default value should generally work well, and increases the sensitivity with respect to unconstrained mapping validation with little impact on runtime. This heursitic is meant to approximate some of the ideas from [selective alignment](https://dl.acm.org/citation.cfm?id=3233589&dl=ACM&coll=DL). Note that this flag can b",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:5056,Security,validat,validation,5056,"default the Command line flag `--debug` has been set True. *NOTE* the pipeline will not exit when observed Cellular Barcodes from High Confidence Region have relatively less (mapped)reads instead will continue with a warning. It's user's responsibility to keep notice of the warning generated by the pipeline. New Flags and Features for Salmon:; -----------. * **Note : Mapping validation (`--validateMappings`) is a recommended flag, and may become a default in future releases**. Considerable improvements to mapping validation have been implemented. For paired-end reads, mapping validation will now consider multiple equally-best chains when scoring chains of MMPs. When reads map to multiple positions on a single transcript, this allows for improved mapping, since multiple positions for the individual reads will be propagated to the algorithm that selects the best mapping for the pair (which can take into account the expected pairing constraints). * Added new flag in mapping validation mode `--maxMMPExtension` (default value of 7). This flag limits the length of the MMP by which a match between the suffix array and read can be extended. Smaller values for this parameter can potentially increase the mapping sensitivity at the cost of requiring more suffix array lookups. The default value should generally work well, and increases the sensitivity with respect to unconstrained mapping validation with little impact on runtime. This heursitic is meant to approximate some of the ideas from [selective alignment](https://dl.acm.org/citation.cfm?id=3233589&dl=ACM&coll=DL). Note that this flag can be used in conjunction with `--consensusSlack` to increase the sensitivity of mapping in mapping validation mode (which is safe from the perspective of specificity as these mappings will be score anyway). For example, setting `--maxMMPExtension 5 --consensusSlack 7` would shorten maximum extensions even more, and consider many more _potential_ loci when chaining, which could lead to more",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:5470,Security,validat,validation,5470,"Note : Mapping validation (`--validateMappings`) is a recommended flag, and may become a default in future releases**. Considerable improvements to mapping validation have been implemented. For paired-end reads, mapping validation will now consider multiple equally-best chains when scoring chains of MMPs. When reads map to multiple positions on a single transcript, this allows for improved mapping, since multiple positions for the individual reads will be propagated to the algorithm that selects the best mapping for the pair (which can take into account the expected pairing constraints). * Added new flag in mapping validation mode `--maxMMPExtension` (default value of 7). This flag limits the length of the MMP by which a match between the suffix array and read can be extended. Smaller values for this parameter can potentially increase the mapping sensitivity at the cost of requiring more suffix array lookups. The default value should generally work well, and increases the sensitivity with respect to unconstrained mapping validation with little impact on runtime. This heursitic is meant to approximate some of the ideas from [selective alignment](https://dl.acm.org/citation.cfm?id=3233589&dl=ACM&coll=DL). Note that this flag can be used in conjunction with `--consensusSlack` to increase the sensitivity of mapping in mapping validation mode (which is safe from the perspective of specificity as these mappings will be score anyway). For example, setting `--maxMMPExtension 5 --consensusSlack 7` would shorten maximum extensions even more, and consider many more _potential_ loci when chaining, which could lead to more sensitivity. However, the default values have been tuned to provide fairly high sensitivity for minimal extra computational expense. * Added a new flag in mapping validation mode `--mimicStrictBT2`. This flag attempts to mimic the *very* strict mapping parameters with which Bowtie2 is invoked when it is used with RSEM. Specifically, it disallows orphans, indel",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:5777,Security,validat,validation,5777,"sitions on a single transcript, this allows for improved mapping, since multiple positions for the individual reads will be propagated to the algorithm that selects the best mapping for the pair (which can take into account the expected pairing constraints). * Added new flag in mapping validation mode `--maxMMPExtension` (default value of 7). This flag limits the length of the MMP by which a match between the suffix array and read can be extended. Smaller values for this parameter can potentially increase the mapping sensitivity at the cost of requiring more suffix array lookups. The default value should generally work well, and increases the sensitivity with respect to unconstrained mapping validation with little impact on runtime. This heursitic is meant to approximate some of the ideas from [selective alignment](https://dl.acm.org/citation.cfm?id=3233589&dl=ACM&coll=DL). Note that this flag can be used in conjunction with `--consensusSlack` to increase the sensitivity of mapping in mapping validation mode (which is safe from the perspective of specificity as these mappings will be score anyway). For example, setting `--maxMMPExtension 5 --consensusSlack 7` would shorten maximum extensions even more, and consider many more _potential_ loci when chaining, which could lead to more sensitivity. However, the default values have been tuned to provide fairly high sensitivity for minimal extra computational expense. * Added a new flag in mapping validation mode `--mimicStrictBT2`. This flag attempts to mimic the *very* strict mapping parameters with which Bowtie2 is invoked when it is used with RSEM. Specifically, it disallows orphans, indels in alignments, and dovetailing reads. It also sets the minimum score fraction (`--minScoreFraction`) to 0.8. We do *not* generally recommend using this flag, as these parameters tend to be overly strict and can eliminate many valid mappings / alignments. However, if one wishes to attempt to mimic that behavior with mapping validation",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:6234,Security,validat,validation,6234,"for this parameter can potentially increase the mapping sensitivity at the cost of requiring more suffix array lookups. The default value should generally work well, and increases the sensitivity with respect to unconstrained mapping validation with little impact on runtime. This heursitic is meant to approximate some of the ideas from [selective alignment](https://dl.acm.org/citation.cfm?id=3233589&dl=ACM&coll=DL). Note that this flag can be used in conjunction with `--consensusSlack` to increase the sensitivity of mapping in mapping validation mode (which is safe from the perspective of specificity as these mappings will be score anyway). For example, setting `--maxMMPExtension 5 --consensusSlack 7` would shorten maximum extensions even more, and consider many more _potential_ loci when chaining, which could lead to more sensitivity. However, the default values have been tuned to provide fairly high sensitivity for minimal extra computational expense. * Added a new flag in mapping validation mode `--mimicStrictBT2`. This flag attempts to mimic the *very* strict mapping parameters with which Bowtie2 is invoked when it is used with RSEM. Specifically, it disallows orphans, indels in alignments, and dovetailing reads. It also sets the minimum score fraction (`--minScoreFraction`) to 0.8. We do *not* generally recommend using this flag, as these parameters tend to be overly strict and can eliminate many valid mappings / alignments. However, if one wishes to attempt to mimic that behavior with mapping validation, this ""meta-flag"" sets the relevant corresponding parameters. We are still optimizing details of the parameters set by this meta-flag, but it already obtains the desired effect across a large variety of datasets. . * Salmon now supports a flag `--discardOrphans` in alignment-based mode. If run with this flag in alignment mode, salmon will simply ignore orphaned alignments for the purposes of quantification (matching the behavior of other tools like RSEM and eXp",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:6760,Security,validat,validation,6760,"pping in mapping validation mode (which is safe from the perspective of specificity as these mappings will be score anyway). For example, setting `--maxMMPExtension 5 --consensusSlack 7` would shorten maximum extensions even more, and consider many more _potential_ loci when chaining, which could lead to more sensitivity. However, the default values have been tuned to provide fairly high sensitivity for minimal extra computational expense. * Added a new flag in mapping validation mode `--mimicStrictBT2`. This flag attempts to mimic the *very* strict mapping parameters with which Bowtie2 is invoked when it is used with RSEM. Specifically, it disallows orphans, indels in alignments, and dovetailing reads. It also sets the minimum score fraction (`--minScoreFraction`) to 0.8. We do *not* generally recommend using this flag, as these parameters tend to be overly strict and can eliminate many valid mappings / alignments. However, if one wishes to attempt to mimic that behavior with mapping validation, this ""meta-flag"" sets the relevant corresponding parameters. We are still optimizing details of the parameters set by this meta-flag, but it already obtains the desired effect across a large variety of datasets. . * Salmon now supports a flag `--discardOrphans` in alignment-based mode. If run with this flag in alignment mode, salmon will simply ignore orphaned alignments for the purposes of quantification (matching the behavior of other tools like RSEM and eXpress). * Salmon now only waits 1 second for version information before timing out. Bug Fixes:; ----------. * Fixed two small bugs (caught by @fataltes) in the MMP chaining algorithm. This can improve the predicted mapping locations in some difficult corner cases. * Fixed a bug that made it difficult to set the alignment scoring parameters (match score, mismatch cost, gap open cost and gap extension cost) in mapping validation mode. Previously, these were parsed as `int8_t` type variables, now they are parsed as `int16_t",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:7655,Security,validat,validation,7655,"xpense. * Added a new flag in mapping validation mode `--mimicStrictBT2`. This flag attempts to mimic the *very* strict mapping parameters with which Bowtie2 is invoked when it is used with RSEM. Specifically, it disallows orphans, indels in alignments, and dovetailing reads. It also sets the minimum score fraction (`--minScoreFraction`) to 0.8. We do *not* generally recommend using this flag, as these parameters tend to be overly strict and can eliminate many valid mappings / alignments. However, if one wishes to attempt to mimic that behavior with mapping validation, this ""meta-flag"" sets the relevant corresponding parameters. We are still optimizing details of the parameters set by this meta-flag, but it already obtains the desired effect across a large variety of datasets. . * Salmon now supports a flag `--discardOrphans` in alignment-based mode. If run with this flag in alignment mode, salmon will simply ignore orphaned alignments for the purposes of quantification (matching the behavior of other tools like RSEM and eXpress). * Salmon now only waits 1 second for version information before timing out. Bug Fixes:; ----------. * Fixed two small bugs (caught by @fataltes) in the MMP chaining algorithm. This can improve the predicted mapping locations in some difficult corner cases. * Fixed a bug that made it difficult to set the alignment scoring parameters (match score, mismatch cost, gap open cost and gap extension cost) in mapping validation mode. Previously, these were parsed as `int8_t` type variables, now they are parsed as `int16_t` and then they are explicitly checked to adhere to the required bounds. * **Fixed the bioconda-based OSX build**: In v0.11.3, the binary created via bioconda for OSX would segfault. This was the result of a bug that only seemed to affect the C++ compiler in older versions of OSX (like that used in bioconda). This has been addressed in the current release, and you should be able to obtain a working bioconda build of 0.12.0 for OSX.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:3518,Usability,learn,learn,3518," the 10x approach of selecting the whitelist barcodes, putting an upper bound on the total number of expected cells -- skipping the knee method. In brief, it only allows CBs with frequency more than 1/10th of the top 1% of the CBs as the initial whitelist. * A new command line flag`--numCellBootstraps X` has been added to perform multiple rounds of optimization by bootstrapping the number of mapped reads in the equivalence classes. Alevin dumps the mean and the variance of each entry in the Cell-Gene count matrix within two files `quants_mean_mat.gz` and `quants_var_mat.gz`. *Note:* The syntax for parsing the generated binary files stays the same as `quants_mat.gz`, but the order of the rows in the mean/variance matrix is stored in a different file with the name `quants_boot_rows.txt`, where column order stays the same as `quants_mat.gz`. * Alevin peforms intelligent whitelisting downstream of the quantification pipeline and has to make some assumptions like choosing a fraction of reads to learn low confidence CBs and in turn might erroneously exit, if the data results in no mapped or deduplicated reads to a CB in low confidence CBs. The problem doesn't happen when provided with external whitelist but if there is an error and the user is confident about it being just a warning, the error can be skipped by running Alevin with `--debug` flag. * `raw_cb_frequency.txt` now includes the frequency of all the observed Cellular Barcodes instead of only the whitelisted ones. * Alevin no longer supports the `--naive` command line flag. * By default the Command line flag `--debug` has been set True. *NOTE* the pipeline will not exit when observed Cellular Barcodes from High Confidence Region have relatively less (mapped)reads instead will continue with a warning. It's user's responsibility to keep notice of the warning generated by the pipeline. New Flags and Features for Salmon:; -----------. * **Note : Mapping validation (`--validateMappings`) is a recommended flag, and may b",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0:7112,Usability,simpl,simply,7112," sensitivity for minimal extra computational expense. * Added a new flag in mapping validation mode `--mimicStrictBT2`. This flag attempts to mimic the *very* strict mapping parameters with which Bowtie2 is invoked when it is used with RSEM. Specifically, it disallows orphans, indels in alignments, and dovetailing reads. It also sets the minimum score fraction (`--minScoreFraction`) to 0.8. We do *not* generally recommend using this flag, as these parameters tend to be overly strict and can eliminate many valid mappings / alignments. However, if one wishes to attempt to mimic that behavior with mapping validation, this ""meta-flag"" sets the relevant corresponding parameters. We are still optimizing details of the parameters set by this meta-flag, but it already obtains the desired effect across a large variety of datasets. . * Salmon now supports a flag `--discardOrphans` in alignment-based mode. If run with this flag in alignment mode, salmon will simply ignore orphaned alignments for the purposes of quantification (matching the behavior of other tools like RSEM and eXpress). * Salmon now only waits 1 second for version information before timing out. Bug Fixes:; ----------. * Fixed two small bugs (caught by @fataltes) in the MMP chaining algorithm. This can improve the predicted mapping locations in some difficult corner cases. * Fixed a bug that made it difficult to set the alignment scoring parameters (match score, mismatch cost, gap open cost and gap extension cost) in mapping validation mode. Previously, these were parsed as `int8_t` type variables, now they are parsed as `int16_t` and then they are explicitly checked to adhere to the required bounds. * **Fixed the bioconda-based OSX build**: In v0.11.3, the binary created via bioconda for OSX would segfault. This was the result of a bug that only seemed to affect the C++ compiler in older versions of OSX (like that used in bioconda). This has been addressed in the current release, and you should be able to obta",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:4822,Availability,redundant,redundant,4822,"taining fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:5373,Availability,down,down-weight,5373,"GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with r",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:5884,Availability,error,error,5884,"n aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:6184,Availability,error,error,6184,"t support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:6259,Availability,error,error,6259," that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:6437,Availability,error,error,6437,"ub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--inco",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:21,Deployability,release,release,21,"v0.10.2 is a bug-fix release following closely behind v0.10.1. It introduces no new features, but addresses issue #232 which can pop up in rare circumstances in alignment mode. Thanks to @francicco for helping discover and provide test cases for this issue. The v0.10.1 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:270,Deployability,release,release,270,"v0.10.2 is a bug-fix release following closely behind v0.10.1. It introduces no new features, but addresses issue #232 which can pop up in rare circumstances in alignment mode. Thanks to @francicco for helping discover and provide test cases for this issue. The v0.10.1 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:515,Deployability,release,release,515,"v0.10.2 is a bug-fix release following closely behind v0.10.1. It introduces no new features, but addresses issue #232 which can pop up in rare circumstances in alignment mode. Thanks to @francicco for helping discover and provide test cases for this issue. The v0.10.1 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:690,Deployability,upgrade,upgrade,690,"v0.10.2 is a bug-fix release following closely behind v0.10.1. It introduces no new features, but addresses issue #232 which can pop up in rare circumstances in alignment mode. Thanks to @francicco for helping discover and provide test cases for this issue. The v0.10.1 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:6882,Deployability,release,release,6882,"now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward ori",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:8804,Deployability,release,release,8804,"sing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixes. This version addresses issues #228 and #229. The first issue could result in a segfault under OSX when running salmon with the new `--validateMappings` flag, and was the result of an errant `<=` in place of a `<` in a sorting comparator. Issue #229 likely predates v0.10.0 considerably, and could occur in VBOpt mode when the normalizer of a rich equivalence class had too small a numeric value. To address this, the numeric cutoffs have been adjusted so that both the normalizer _and its inverse_ can be properly represented.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:4554,Energy Efficiency,efficient,efficient,4554,"ult, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores u",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:4621,Energy Efficiency,efficient,efficient,4621,"umpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative a",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:8033,Energy Efficiency,reduce,reduce,8033,"n (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixe",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:1504,Integrability,protocol,protocols,1504,"eature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:1554,Integrability,wrap,wrapper,1554,"eature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:641,Modifiability,enhance,enhancements,641,"v0.10.2 is a bug-fix release following closely behind v0.10.1. It introduces no new features, but addresses issue #232 which can pop up in rare circumstances in alignment mode. Thanks to @francicco for helping discover and provide test cases for this issue. The v0.10.1 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:562,Performance,perform,perform,562,"v0.10.2 is a bug-fix release following closely behind v0.10.1. It introduces no new features, but addresses issue #232 which can pop up in rare circumstances in alignment mode. Thanks to @francicco for helping discover and provide test cases for this issue. The v0.10.1 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:629,Performance,perform,performance,629,"v0.10.2 is a bug-fix release following closely behind v0.10.1. It introduces no new features, but addresses issue #232 which can pop up in rare circumstances in alignment mode. Thanks to @francicco for helping discover and provide test cases for this issue. The v0.10.1 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:1139,Performance,perform,perform,1139,"n rare circumstances in alignment mode. Thanks to @francicco for helping discover and provide test cases for this issue. The v0.10.1 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is gi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:1602,Performance,perform,performs,1602,"lso a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to avo",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:3288,Performance,perform,performed,3288,"`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to avoid over-collapsing UMI counts), but also accounts for the fact that collisions between UMIs within a gene are expected to be very rare (i.e. if UMIs arise within different equivalence classes of a gene, they are most likely to derive from different positions in the same underlying molecule). To use a _baseline_ (i.e. simple gene-level) UMI deduplication algorthm, alevin can be used with `--naive` to disable its collision correction. * _CB classification_: Alevin uses various features in a machine-learning-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when report",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:3915,Performance,perform,perform,3915,"lecule). To use a _baseline_ (i.e. simple gene-level) UMI deduplication algorthm, alevin can be used with `--naive` to disable its collision correction. * _CB classification_: Alevin uses various features in a machine-learning-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottle",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:4876,Performance,bottleneck,bottleneck,4876,"taining fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:6664,Performance,optimiz,optimization,6664," score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mapp",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:7028,Performance,optimiz,optimization,7028," behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilit",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:8577,Performance,perform,performance,8577,"sing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixes. This version addresses issues #228 and #229. The first issue could result in a segfault under OSX when running salmon with the new `--validateMappings` flag, and was the result of an errant `<=` in place of a `<` in a sorting comparator. Issue #229 likely predates v0.10.0 considerably, and could occur in VBOpt mode when the normalizer of a rich equivalence class had too small a numeric value. To address this, the numeric cutoffs have been adjusted so that both the normalizer _and its inverse_ can be properly represented.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:8649,Performance,perform,performance,8649,"sing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixes. This version addresses issues #228 and #229. The first issue could result in a segfault under OSX when running salmon with the new `--validateMappings` flag, and was the result of an errant `<=` in place of a `<` in a sorting comparator. Issue #229 likely predates v0.10.0 considerably, and could occur in VBOpt mode when the normalizer of a rich equivalence class had too small a numeric value. To address this, the numeric cutoffs have been adjusted so that both the normalizer _and its inverse_ can be properly represented.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:2595,Safety,avoid,avoid,2595," and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to avoid over-collapsing UMI counts), but also accounts for the fact that collisions between UMIs within a gene are expected to be very rare (i.e. if UMIs arise within different equivalence classes of a gene, they are most likely to derive from different positions in the same underlying molecule). To use a _baseline_ (i.e. simple gene-level) UMI deduplication algorthm, alevin can be used with `--naive` to disable its collision correction. * _CB classification_: Alevin uses various features in a machine-learning-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-g",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:4775,Safety,avoid,avoids,4775,"taining fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:4822,Safety,redund,redundant,4822,"taining fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:771,Security,hash,hash,771,"v0.10.2 is a bug-fix release following closely behind v0.10.1. It introduces no new features, but addresses issue #232 which can pop up in rare circumstances in alignment mode. Thanks to @francicco for helping discover and provide test cases for this issue. The v0.10.1 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:4322,Security,validat,validation,4322,"hov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:4342,Security,validat,validation,4342,"of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, sa",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:4392,Security,validat,validate,4392,"of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, sa",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:4511,Security,validat,validateMappings,4511,"of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, sa",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:4535,Security,validat,validation,4535,"ult, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores u",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:4944,Security,validat,validateMappings,4944,"h` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useError",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:8180,Security,hash,hashes,8180," simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixes. This version addresses issues #228 and #229. The first issue could result in a segfault under OSX when running salmon with the new `--validateMappings` flag, and was",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:8348,Security,hash,hashes,8348,"lent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixes. This version addresses issues #228 and #229. The first issue could result in a segfault under OSX when running salmon with the new `--validateMappings` flag, and was the result of an errant `<=` in place of a `<` in a sorting comparator. Issue #229 likely predates v0.10.0 considerably, a",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:9194,Security,validat,validateMappings,9194,"sing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixes. This version addresses issues #228 and #229. The first issue could result in a segfault under OSX when running salmon with the new `--validateMappings` flag, and was the result of an errant `<=` in place of a `<` in a sorting comparator. Issue #229 likely predates v0.10.0 considerably, and could occur in VBOpt mode when the normalizer of a rich equivalence class had too small a numeric value. To address this, the numeric cutoffs have been adjusted so that both the normalizer _and its inverse_ can be properly represented.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:231,Testability,test,test,231,"v0.10.2 is a bug-fix release following closely behind v0.10.1. It introduces no new features, but addresses issue #232 which can pop up in rare circumstances in alignment mode. Thanks to @francicco for helping discover and provide test cases for this issue. The v0.10.1 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:6616,Testability,test,testing,6616," score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mapp",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:8605,Testability,test,testing,8605,"sing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixes. This version addresses issues #228 and #229. The first issue could result in a segfault under OSX when running salmon with the new `--validateMappings` flag, and was the result of an errant `<=` in place of a `<` in a sorting comparator. Issue #229 likely predates v0.10.0 considerably, and could occur in VBOpt mode when the normalizer of a rich equivalence class had too small a numeric value. To address this, the numeric cutoffs have been adjusted so that both the normalizer _and its inverse_ can be properly represented.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:2917,Usability,simpl,simple,2917,"orrection of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to avoid over-collapsing UMI counts), but also accounts for the fact that collisions between UMIs within a gene are expected to be very rare (i.e. if UMIs arise within different equivalence classes of a gene, they are most likely to derive from different positions in the same underlying molecule). To use a _baseline_ (i.e. simple gene-level) UMI deduplication algorthm, alevin can be used with `--naive` to disable its collision correction. * _CB classification_: Alevin uses various features in a machine-learning-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps th",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:3100,Usability,learn,learning-based,3100,"ference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to avoid over-collapsing UMI counts), but also accounts for the fact that collisions between UMIs within a gene are expected to be very rare (i.e. if UMIs arise within different equivalence classes of a gene, they are most likely to derive from different positions in the same underlying molecule). To use a _baseline_ (i.e. simple gene-level) UMI deduplication algorthm, alevin can be used with `--naive` to disable its collision correction. * _CB classification_: Alevin uses various features in a machine-learning-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and ex",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:4138,Usability,feedback,feedback,4138,"ing-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings suppo",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2:7226,Usability,simpl,simply,7226,"nt-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:4816,Availability,redundant,redundant,4816,"taining fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:5367,Availability,down,down-weight,5367,"GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with r",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:5878,Availability,error,error,5878,"n aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:6178,Availability,error,error,6178,"t support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:6253,Availability,error,error,6253," that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:6431,Availability,error,error,6431,"ub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--inco",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:21,Deployability,release,release,21,"v0.10.1 is a bug-fix release following closely behind v0.10.0. It introduces no new features, but addresses the issues mentioned [below](#version-0.10.1-fixes). Thanks to @knokknok for discovering and helping to resolve these issues. For this purpose, the v0.10.0 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the w",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:264,Deployability,release,release,264,"v0.10.1 is a bug-fix release following closely behind v0.10.0. It introduces no new features, but addresses the issues mentioned [below](#version-0.10.1-fixes). Thanks to @knokknok for discovering and helping to resolve these issues. For this purpose, the v0.10.0 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the w",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:509,Deployability,release,release,509,"v0.10.1 is a bug-fix release following closely behind v0.10.0. It introduces no new features, but addresses the issues mentioned [below](#version-0.10.1-fixes). Thanks to @knokknok for discovering and helping to resolve these issues. For this purpose, the v0.10.0 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the w",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:684,Deployability,upgrade,upgrade,684,"v0.10.1 is a bug-fix release following closely behind v0.10.0. It introduces no new features, but addresses the issues mentioned [below](#version-0.10.1-fixes). Thanks to @knokknok for discovering and helping to resolve these issues. For this purpose, the v0.10.0 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the w",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:6876,Deployability,release,release,6876,"now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward ori",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:8798,Deployability,release,release,8798,"sing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixes. This version addresses issues #228 and #229. The first issue could result in a segfault under OSX when running salmon with the new `--validateMappings` flag, and was the result of an errant `<=` in place of a `<` in a sorting comparator. Issue #229 likely predates v0.10.0 considerably, and could occur in VBOpt mode when the normalizer of a rich equivalence class had too small a numeric value. To address this, the numeric cutoffs have been adjusted so that both the normalizer _and its inverse_ can be properly represented.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:4548,Energy Efficiency,efficient,efficient,4548,"ult, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores u",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:4615,Energy Efficiency,efficient,efficient,4615,"umpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative a",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:8027,Energy Efficiency,reduce,reduce,8027,"n (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixe",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:1498,Integrability,protocol,protocols,1498,"eature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:1548,Integrability,wrap,wrapper,1548,"eature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:635,Modifiability,enhance,enhancements,635,"v0.10.1 is a bug-fix release following closely behind v0.10.0. It introduces no new features, but addresses the issues mentioned [below](#version-0.10.1-fixes). Thanks to @knokknok for discovering and helping to resolve these issues. For this purpose, the v0.10.0 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the w",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:556,Performance,perform,perform,556,"v0.10.1 is a bug-fix release following closely behind v0.10.0. It introduces no new features, but addresses the issues mentioned [below](#version-0.10.1-fixes). Thanks to @knokknok for discovering and helping to resolve these issues. For this purpose, the v0.10.0 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the w",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:623,Performance,perform,performance,623,"v0.10.1 is a bug-fix release following closely behind v0.10.0. It introduces no new features, but addresses the issues mentioned [below](#version-0.10.1-fixes). Thanks to @knokknok for discovering and helping to resolve these issues. For this purpose, the v0.10.0 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the w",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:1133,Performance,perform,perform,1133,"elow](#version-0.10.1-fixes). Thanks to @knokknok for discovering and helping to resolve these issues. For this purpose, the v0.10.0 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is gi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:1596,Performance,perform,performs,1596,"lso a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to avo",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:3282,Performance,perform,performed,3282,"`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to avoid over-collapsing UMI counts), but also accounts for the fact that collisions between UMIs within a gene are expected to be very rare (i.e. if UMIs arise within different equivalence classes of a gene, they are most likely to derive from different positions in the same underlying molecule). To use a _baseline_ (i.e. simple gene-level) UMI deduplication algorthm, alevin can be used with `--naive` to disable its collision correction. * _CB classification_: Alevin uses various features in a machine-learning-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when report",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:3909,Performance,perform,perform,3909,"lecule). To use a _baseline_ (i.e. simple gene-level) UMI deduplication algorthm, alevin can be used with `--naive` to disable its collision correction. * _CB classification_: Alevin uses various features in a machine-learning-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottle",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:4870,Performance,bottleneck,bottleneck,4870,"taining fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:6658,Performance,optimiz,optimization,6658," score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mapp",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:7022,Performance,optimiz,optimization,7022," behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilit",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:8571,Performance,perform,performance,8571,"sing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixes. This version addresses issues #228 and #229. The first issue could result in a segfault under OSX when running salmon with the new `--validateMappings` flag, and was the result of an errant `<=` in place of a `<` in a sorting comparator. Issue #229 likely predates v0.10.0 considerably, and could occur in VBOpt mode when the normalizer of a rich equivalence class had too small a numeric value. To address this, the numeric cutoffs have been adjusted so that both the normalizer _and its inverse_ can be properly represented.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:8643,Performance,perform,performance,8643,"sing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixes. This version addresses issues #228 and #229. The first issue could result in a segfault under OSX when running salmon with the new `--validateMappings` flag, and was the result of an errant `<=` in place of a `<` in a sorting comparator. Issue #229 likely predates v0.10.0 considerably, and could occur in VBOpt mode when the normalizer of a rich equivalence class had too small a numeric value. To address this, the numeric cutoffs have been adjusted so that both the normalizer _and its inverse_ can be properly represented.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:2589,Safety,avoid,avoid,2589," and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to avoid over-collapsing UMI counts), but also accounts for the fact that collisions between UMIs within a gene are expected to be very rare (i.e. if UMIs arise within different equivalence classes of a gene, they are most likely to derive from different positions in the same underlying molecule). To use a _baseline_ (i.e. simple gene-level) UMI deduplication algorthm, alevin can be used with `--naive` to disable its collision correction. * _CB classification_: Alevin uses various features in a machine-learning-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-g",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:4769,Safety,avoid,avoids,4769,"taining fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:4816,Safety,redund,redundant,4816,"taining fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:765,Security,hash,hash,765,"v0.10.1 is a bug-fix release following closely behind v0.10.0. It introduces no new features, but addresses the issues mentioned [below](#version-0.10.1-fixes). Thanks to @knokknok for discovering and helping to resolve these issues. For this purpose, the v0.10.0 release notes are repeated below. Please either build the latest version from source, or grab a pre-built binary for your operating system via [bioconda](https://bioconda.github.io/recipes/salmon/README.html). Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; You can find a tutorial describing how to use alevin [here](https://combine-lab.github.io/alevin-tutorial/#blog). Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the w",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:4316,Security,validat,validation,4316,"hov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:4336,Security,validat,validation,4336,"of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, sa",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:4386,Security,validat,validate,4386,"of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, sa",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:4505,Security,validat,validateMappings,4505,"of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, sa",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:4529,Security,validat,validation,4529,"ult, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores u",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:4938,Security,validat,validateMappings,4938,"h` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useError",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:8174,Security,hash,hashes,8174," simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixes. This version addresses issues #228 and #229. The first issue could result in a segfault under OSX when running salmon with the new `--validateMappings` flag, and was",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:8342,Security,hash,hashes,8342,"lent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixes. This version addresses issues #228 and #229. The first issue could result in a segfault under OSX when running salmon with the new `--validateMappings` flag, and was the result of an errant `<=` in place of a `<` in a sorting comparator. Issue #229 likely predates v0.10.0 considerably, a",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:9188,Security,validat,validateMappings,9188,"sing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixes. This version addresses issues #228 and #229. The first issue could result in a segfault under OSX when running salmon with the new `--validateMappings` flag, and was the result of an errant `<=` in place of a `<` in a sorting comparator. Issue #229 likely predates v0.10.0 considerably, and could occur in VBOpt mode when the normalizer of a rich equivalence class had too small a numeric value. To address this, the numeric cutoffs have been adjusted so that both the normalizer _and its inverse_ can be properly represented.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:6610,Testability,test,testing,6610," score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mapp",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:8599,Testability,test,testing,8599,"sing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code. ## version 0.10.1 fixes. This version addresses issues #228 and #229. The first issue could result in a segfault under OSX when running salmon with the new `--validateMappings` flag, and was the result of an errant `<=` in place of a `<` in a sorting comparator. Issue #229 likely predates v0.10.0 considerably, and could occur in VBOpt mode when the normalizer of a rich equivalence class had too small a numeric value. To address this, the numeric cutoffs have been adjusted so that both the normalizer _and its inverse_ can be properly represented.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:2911,Usability,simpl,simple,2911,"orrection of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to avoid over-collapsing UMI counts), but also accounts for the fact that collisions between UMIs within a gene are expected to be very rare (i.e. if UMIs arise within different equivalence classes of a gene, they are most likely to derive from different positions in the same underlying molecule). To use a _baseline_ (i.e. simple gene-level) UMI deduplication algorthm, alevin can be used with `--naive` to disable its collision correction. * _CB classification_: Alevin uses various features in a machine-learning-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps th",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:3094,Usability,learn,learning-based,3094,"ference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to avoid over-collapsing UMI counts), but also accounts for the fact that collisions between UMIs within a gene are expected to be very rare (i.e. if UMIs arise within different equivalence classes of a gene, they are most likely to derive from different positions in the same underlying molecule). To use a _baseline_ (i.e. simple gene-level) UMI deduplication algorthm, alevin can be used with `--naive` to disable its collision correction. * _CB classification_: Alevin uses various features in a machine-learning-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and ex",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:4132,Usability,feedback,feedback,4132,"ing-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings suppo",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1:7220,Usability,simpl,simply,7220,"nt-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:4228,Availability,redundant,redundant,4228,"taining fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:4779,Availability,down,down-weight,4779,"GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with r",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:5290,Availability,error,error,5290,"n aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:5590,Availability,error,error,5590,"t support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:5665,Availability,error,error,5665," that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:5843,Availability,error,error,5843,"ub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--inco",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:35,Deployability,release,release,35,"Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:210,Deployability,upgrade,upgrade,210,"Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:6288,Deployability,release,release,6288,"now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward ori",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:8210,Deployability,release,release,8210,"zation feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:3960,Energy Efficiency,efficient,efficient,3960,"ult, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores u",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:4027,Energy Efficiency,efficient,efficient,4027,"umpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative a",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:7439,Energy Efficiency,reduce,reduce,7439,"zation feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:910,Integrability,protocol,protocols,910,"Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:960,Integrability,wrap,wrapper,960,"Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:161,Modifiability,enhance,enhancements,161,"Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:82,Performance,perform,perform,82,"Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:149,Performance,perform,performance,149,"Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:545,Performance,perform,perform,545,"Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:1008,Performance,perform,performs,1008,"mon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to avo",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:2694,Performance,perform,performed,2694,"`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to avoid over-collapsing UMI counts), but also accounts for the fact that collisions between UMIs within a gene are expected to be very rare (i.e. if UMIs arise within different equivalence classes of a gene, they are most likely to derive from different positions in the same underlying molecule). To use a _baseline_ (i.e. simple gene-level) UMI deduplication algorthm, alevin can be used with `--naive` to disable its collision correction. * _CB classification_: Alevin uses various features in a machine-learning-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when report",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:3321,Performance,perform,perform,3321,"lecule). To use a _baseline_ (i.e. simple gene-level) UMI deduplication algorthm, alevin can be used with `--naive` to disable its collision correction. * _CB classification_: Alevin uses various features in a machine-learning-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottle",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:4282,Performance,bottleneck,bottleneck,4282,"taining fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:6070,Performance,optimiz,optimization,6070," score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mapp",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:6434,Performance,optimiz,optimization,6434," behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilit",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:7983,Performance,perform,performance,7983,"zation feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:8055,Performance,perform,performance,8055,"zation feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:2001,Safety,avoid,avoid,2001," and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to avoid over-collapsing UMI counts), but also accounts for the fact that collisions between UMIs within a gene are expected to be very rare (i.e. if UMIs arise within different equivalence classes of a gene, they are most likely to derive from different positions in the same underlying molecule). To use a _baseline_ (i.e. simple gene-level) UMI deduplication algorthm, alevin can be used with `--naive` to disable its collision correction. * _CB classification_: Alevin uses various features in a machine-learning-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-g",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:4181,Safety,avoid,avoids,4181,"taining fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:4228,Safety,redund,redundant,4228,"taining fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:291,Security,hash,hash,291,"Salmon 0.10.0 is a _major feature_ release. It includes a family of algorithms to perform single cell analysis, but also a number of new feature and performance enhancements. We highly-recommend that all users upgrade when they have the chance. . _Note_ : Due to the inclusion of the SHA512 hash in the salmon index (see in [other changes](#other-changes) below), existing salmon indices should be rebuilt. ## alevin. _Welcome alevin to the salmon family !_; ; Working under the salmon engine, alevin brings new algorithms and infrastructure to perform single-cell quantification and analysis based on 3' tagged-end sequencing. The alevin mode is activated by using the `alevin` command, and currently supports quantification of [Drop-seq](https://www.sciencedirect.com/science/article/pii/S0092867415005498) (`--dropseq`) and [10x v1/2](https://www.nature.com/articles/ncomms14049) (`--chromium`) single-cell protocols (v1 chemistry requires use of a special wrapper). Alevin works on raw-FASTA/Q files and performs the following tasks:. * _Intial Whitelisting_: If not given `--whitelist` (an already known set of whitelisted barcodes e.g. as produced by Cell Ranger), alevin finds a rough estimate for the set of the whitelisted CB (Cellular Barcodes) based on their frequency. * _Barcode Correction_: In the first pass over the CB file, alevin constructs a dictionary for the correction of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:3728,Security,validat,validation,3728,"hov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:3748,Security,validat,validation,3748,"of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, sa",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:3798,Security,validat,validate,3798,"of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, sa",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:3917,Security,validat,validateMappings,3917,"of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, sa",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:3941,Security,validat,validation,3941,"ult, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores u",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:4350,Security,validat,validateMappings,4350,"h` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings supported by only a few MMPs but which nonetheless would not support a high-quality read alignment). Second, this will help assign more appropriate mapping scores to reads that map to similar (but not identical) reference sequences --- essentially helping to appropriately down-weight sub-optimal mappings. Along with this flag, salmon introduces flags to set the match score (`--ma`), mismatch penalty (`--mp`), and gap open (`--go`) and extension (`--ge`) scores used when computing the alignment. It also allows the user to specify the minimum relative alignment score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useError",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:7586,Security,hash,hashes,7586,"zation feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:7754,Security,hash,hashes,7754,"zation feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:6022,Testability,test,testing,6022," score that will be considered as a valid mapping (`--minScoreFraction`). While these can all be customized, the defaults should be reasonable for typical use cases. ## other changes. * Salmon now enables the alignment error model _by default_ in alignment-based mode. This means that the `--useErrorModel` flag is no longer valid, since its behavior is now the default. This flag has been removed, and a new flag added in its place. Passing alignment-based salmon the `--noErrorModel` flag will turn off the alignment error model in alignment-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mapp",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:8011,Testability,test,testing,8011,"zation feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index : When indexing salmon now computes both SHA256 and SHA512 indices for the reference. This is done to allow future-compatibility with GA4GH hashes (which will use a truncated variant of SHA512). * The default k-mer class (used for certain operations within salmon) has been migrated from the jellyfish implementation to a custom implementation. This results in a small performance increase on our testing systems under linux, and a moderate performance increase under OSX. * Salmon is now compiled in `C++14` mode (i.e. `--std=c++14`) by default rather than `C++11` mode. This is the last salmon release that will support `C++11` (by compiling with `-DCONDA_BUILD=TRUE`). Moving forward, `C++14` compliance will be considered the minimum requirement to compile salmon from source and `C++14` features will be used in new code.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:2323,Usability,simpl,simple,2323,"orrection of CB (if not on the whitelist) by correcting CB within 1-edit distance of the whitelisted CB. In case of multiple whitelist candidates, preference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to avoid over-collapsing UMI counts), but also accounts for the fact that collisions between UMIs within a gene are expected to be very rare (i.e. if UMIs arise within different equivalence classes of a gene, they are most likely to derive from different positions in the same underlying molecule). To use a _baseline_ (i.e. simple gene-level) UMI deduplication algorthm, alevin can be used with `--naive` to disable its collision correction. * _CB classification_: Alevin uses various features in a machine-learning-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps th",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:2506,Usability,learn,learning-based,2506,"ference is given to `SNP` over `indels`. Optionally, a probabilistic model can be used to soft-assign barcodes, although that behavior is disabled by default. (`--noSoftMap` is `true` ). * _UMI Correction & Deduplication_: alevin introduces a novel method for deduplicating the UMIs (Unique Molecule identifiers) present in a sample. Alevin's algorithm uses equivalence-class-level information to infer when the same UMI must arise from different isoforms of a gene (to avoid over-collapsing UMI counts), but also accounts for the fact that collisions between UMIs within a gene are expected to be very rare (i.e. if UMIs arise within different equivalence classes of a gene, they are most likely to derive from different positions in the same underlying molecule). To use a _baseline_ (i.e. simple gene-level) UMI deduplication algorthm, alevin can be used with `--naive` to disable its collision correction. * _CB classification_: Alevin uses various features in a machine-learning-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and ex",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:3544,Usability,feedback,feedback,3544,"ing-based framework to classify the set of observed CBs that are likely to derive from valid captured cells (i.e. final whitelisting). This approach to CB classification is like that performed by the method of [Petukhov et al.](https://www.biorxiv.org/content/early/2017/09/13/171496). Alevin uses features like the abundance of mitochndrial genes (`--mrna`), ribosomal geness (`--rrna`) and others, to for classification.; ; * _Cell-Gene count Matrix_: By default, alevin outputs a cell-by-gene matrix out in a compressed binary format. However, `--dumpCsvCounts` can be used to dump a human-readable count matrix. * _other features_: `--dumpfq` does fast concatentation of corrected CB to the read names of the sequence containing fastq file; `--dumpFeatures` dumps the features and counts used by alevin to perform the ML-based CB classification; `--dumpBfh` dumps the full CB-Eqclass-UMI-Count data-structure used internally by alevin. **Note** : We are actively developing and improving alevin, and are happy and excited to get feedback from the community. If you encounter an issue when using alevin, please be sure to tag your GitHub issue with the `alevin` tag when reporting the issue via GitHub. ## mapping validation. Mapping validation is a new feature that allows salmon to validate its mappings via a traditional (affine-gap penalty) alignment procedure; it is enabled by passing the flag `--validateMappings`. This validation is made efficient (and fast) through a combination of : . - using the very-efficient and highly-vectorized alignment implementation of @lh3's [ksw2](https://github.com/lh3/ksw2) library. - devising a novel caching heuristic that avoids re-aligning reads when sub-problems are redundant (this turns out to be a major computational bottleneck when aligning against the transcriptome). . Using the `--validateMappings` flag has two main potential benefits. First, this will help prevent salmon from considering potentially spurious mappings (i.e., mappings suppo",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0:6632,Usability,simpl,simply,6632,"nt-based mode. * Related to the above; the alignment error model works best in conjunction with range factorization. Thus, the default behavior is now to turn on range-based factorization in alignment mode (in conjunction with the error model). * New default VB prior : The default _per-nucleotide_ VB prior has been changed to 1e-5. While this is _still_ an ongoing area of research, a considerable amount of testing is suggesting that variational Bayesian optimization with a sparsity inducing prior regularly leads to more accurate abundance estimates than the default EM algorithm. While we are leaving the EM algorithm as the default for the offline-phase in the current release, this may change in future versions. We encourage users who may not already be doing so to explore the variational Bayesian-based offline optimization feature of salmon (enabled with `--useVBOpt`). * The library type compatibility is now enforced _strictly_. Previously mapping that disagreed with the inferred or provided library type simply had their probability decreased. Now, the default behavior is to discard such mappings. The new behavior is equivalent to running with the option `--incompatPrior 0`. The older behavior can be obtained by setting `--incompatPrior` to a small non-zero value. * The library format count statistics are now computed in a different (and hopefully less confusing) manner. Specifically, rather than being computed over the number of _mappings_ of each type, the statistics are computed over the number of fragments that have at least one mapping of that type. This means that, e.g., if a fragment maps to 2 places in the forward orientation and 1 place in the reverse-complement orientation, this will now contribute only 1 count to the forward and reverse-complement compatibilites each. This should help reduce any reference bias when computing these summary statistics. * The default value of `--gcSpeedSamp` has been set to 5. * Inclusion of SHA512 hashes for the salmon index",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:2079,Availability,error,error,2079,"econd column lists the name of a discarded duplicate transcript (i.e., a transcript with identical sequence to the retained transcript, but which was discarded). **Note**: If you wish to retain multiple identical transcripts in the input (the prior behavior), this can be achieved by passing the Salmon indexing command the `--keepDuplicates` flag. * This is not a new feature, _per se_, but brings further parity between the alignment and mapping-based modes. It is now possible to dump the equivalence class files `--dumpEq` when using Salmon in alignment-based mode.; ; * The [range-factorization](https://academic.oup.com/bioinformatics/article/33/14/i142/3953977) has been merged into the master branch. This allows using the data-driven likelihood factorization, which can improve quantification accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most considerable improvements) when using alignment-based mode and when enabling error modeling `--useErrorModel`, though it can yield improvements in the mapping-based mode as well. This feature will also interact constructively with selective-alignment, which should land in the next (non-bug fix) release. * Added the `quantmerge` command. This allows producing a multi-sample TSV file with aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:3739,Availability,down,down,3739,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:3872,Availability,error,error,3872,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:148,Deployability,update,updated,148,"# Salmon 0.9.1 Release Notes. **Note**: Version 0.9.1 fixes a warning with the indexer that was introduced by an API change that occurred due to an updated Fasta/q parser. The warning does not affect the indexing process, but nonetheless, the proper API should be obeyed. Also, v0.9.1 fixes a very small but long-standing indexing bug that would cause a single k-mer (the lexicographically largest) to not be indexed properly. The Salmon v0.9.0 release notes are recapitulated below for the convenience of those upgrading directly from v0.8.2. As always, the newest release is easily installable via [bioconda](https://anaconda.org/bioconda/salmon) and [Docker](https://hub.docker.com/r/combinelab/salmon/). ## New features. * During indexing, Salmon will now discard duplicate transcripts (i.e., transcripts with _exactly the same sequence_) by default. The information about the duplicate transcripts is written to a file in the index directory called `duplicate_clusters.tsv`. This is a two-column TSV file where the first column lists the name of a retained transcript and the second column lists the name of a discarded duplicate transcript (i.e., a transcript with identical sequence to the retained transcript, but which was discarded). **Note**: If you wish to retain multiple identical transcripts in the input (the prior behavior), this can be achieved by passing the Salmon indexing command the `--keepDuplicates` flag. * This is not a new feature, _per se_, but brings further parity between the alignment and mapping-based modes. It is now possible to dump the equivalence class files `--dumpEq` when using Salmon in alignment-based mode.; ; * The [range-factorization](https://academic.oup.com/bioinformatics/article/33/14/i142/3953977) has been merged into the master branch. This allows using the data-driven likelihood factorization, which can improve quantification accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:445,Deployability,release,release,445,"# Salmon 0.9.1 Release Notes. **Note**: Version 0.9.1 fixes a warning with the indexer that was introduced by an API change that occurred due to an updated Fasta/q parser. The warning does not affect the indexing process, but nonetheless, the proper API should be obeyed. Also, v0.9.1 fixes a very small but long-standing indexing bug that would cause a single k-mer (the lexicographically largest) to not be indexed properly. The Salmon v0.9.0 release notes are recapitulated below for the convenience of those upgrading directly from v0.8.2. As always, the newest release is easily installable via [bioconda](https://anaconda.org/bioconda/salmon) and [Docker](https://hub.docker.com/r/combinelab/salmon/). ## New features. * During indexing, Salmon will now discard duplicate transcripts (i.e., transcripts with _exactly the same sequence_) by default. The information about the duplicate transcripts is written to a file in the index directory called `duplicate_clusters.tsv`. This is a two-column TSV file where the first column lists the name of a retained transcript and the second column lists the name of a discarded duplicate transcript (i.e., a transcript with identical sequence to the retained transcript, but which was discarded). **Note**: If you wish to retain multiple identical transcripts in the input (the prior behavior), this can be achieved by passing the Salmon indexing command the `--keepDuplicates` flag. * This is not a new feature, _per se_, but brings further parity between the alignment and mapping-based modes. It is now possible to dump the equivalence class files `--dumpEq` when using Salmon in alignment-based mode.; ; * The [range-factorization](https://academic.oup.com/bioinformatics/article/33/14/i142/3953977) has been merged into the master branch. This allows using the data-driven likelihood factorization, which can improve quantification accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:566,Deployability,release,release,566,"# Salmon 0.9.1 Release Notes. **Note**: Version 0.9.1 fixes a warning with the indexer that was introduced by an API change that occurred due to an updated Fasta/q parser. The warning does not affect the indexing process, but nonetheless, the proper API should be obeyed. Also, v0.9.1 fixes a very small but long-standing indexing bug that would cause a single k-mer (the lexicographically largest) to not be indexed properly. The Salmon v0.9.0 release notes are recapitulated below for the convenience of those upgrading directly from v0.8.2. As always, the newest release is easily installable via [bioconda](https://anaconda.org/bioconda/salmon) and [Docker](https://hub.docker.com/r/combinelab/salmon/). ## New features. * During indexing, Salmon will now discard duplicate transcripts (i.e., transcripts with _exactly the same sequence_) by default. The information about the duplicate transcripts is written to a file in the index directory called `duplicate_clusters.tsv`. This is a two-column TSV file where the first column lists the name of a retained transcript and the second column lists the name of a discarded duplicate transcript (i.e., a transcript with identical sequence to the retained transcript, but which was discarded). **Note**: If you wish to retain multiple identical transcripts in the input (the prior behavior), this can be achieved by passing the Salmon indexing command the `--keepDuplicates` flag. * This is not a new feature, _per se_, but brings further parity between the alignment and mapping-based modes. It is now possible to dump the equivalence class files `--dumpEq` when using Salmon in alignment-based mode.; ; * The [range-factorization](https://academic.oup.com/bioinformatics/article/33/14/i142/3953977) has been merged into the master branch. This allows using the data-driven likelihood factorization, which can improve quantification accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:584,Deployability,install,installable,584,"# Salmon 0.9.1 Release Notes. **Note**: Version 0.9.1 fixes a warning with the indexer that was introduced by an API change that occurred due to an updated Fasta/q parser. The warning does not affect the indexing process, but nonetheless, the proper API should be obeyed. Also, v0.9.1 fixes a very small but long-standing indexing bug that would cause a single k-mer (the lexicographically largest) to not be indexed properly. The Salmon v0.9.0 release notes are recapitulated below for the convenience of those upgrading directly from v0.8.2. As always, the newest release is easily installable via [bioconda](https://anaconda.org/bioconda/salmon) and [Docker](https://hub.docker.com/r/combinelab/salmon/). ## New features. * During indexing, Salmon will now discard duplicate transcripts (i.e., transcripts with _exactly the same sequence_) by default. The information about the duplicate transcripts is written to a file in the index directory called `duplicate_clusters.tsv`. This is a two-column TSV file where the first column lists the name of a retained transcript and the second column lists the name of a discarded duplicate transcript (i.e., a transcript with identical sequence to the retained transcript, but which was discarded). **Note**: If you wish to retain multiple identical transcripts in the input (the prior behavior), this can be achieved by passing the Salmon indexing command the `--keepDuplicates` flag. * This is not a new feature, _per se_, but brings further parity between the alignment and mapping-based modes. It is now possible to dump the equivalence class files `--dumpEq` when using Salmon in alignment-based mode.; ; * The [range-factorization](https://academic.oup.com/bioinformatics/article/33/14/i142/3953977) has been merged into the master branch. This allows using the data-driven likelihood factorization, which can improve quantification accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:2298,Deployability,release,release,2298," **Note**: If you wish to retain multiple identical transcripts in the input (the prior behavior), this can be achieved by passing the Salmon indexing command the `--keepDuplicates` flag. * This is not a new feature, _per se_, but brings further parity between the alignment and mapping-based modes. It is now possible to dump the equivalence class files `--dumpEq` when using Salmon in alignment-based mode.; ; * The [range-factorization](https://academic.oup.com/bioinformatics/article/33/14/i142/3953977) has been merged into the master branch. This allows using the data-driven likelihood factorization, which can improve quantification accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most considerable improvements) when using alignment-based mode and when enabling error modeling `--useErrorModel`, though it can yield improvements in the mapping-based mode as well. This feature will also interact constructively with selective-alignment, which should land in the next (non-bug fix) release. * Added the `quantmerge` command. This allows producing a multi-sample TSV file with aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:2760,Deployability,update,updated,2760,"to the master branch. This allows using the data-driven likelihood factorization, which can improve quantification accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most considerable improvements) when using alignment-based mode and when enabling error modeling `--useErrorModel`, though it can yield improvements in the mapping-based mode as well. This feature will also interact constructively with selective-alignment, which should land in the next (non-bug fix) release. * Added the `quantmerge` command. This allows producing a multi-sample TSV file with aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:4520,Deployability,release,releases,4520,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:3495,Integrability,message,messages,3495," can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:3878,Integrability,message,message,3878,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:4084,Integrability,wrap,wraps,4084,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:4134,Integrability,message,message,4134,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:2673,Performance,multi-thread,multi-threaded,2673,"c.oup.com/bioinformatics/article/33/14/i142/3953977) has been merged into the master branch. This allows using the data-driven likelihood factorization, which can improve quantification accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most considerable improvements) when using alignment-based mode and when enabling error modeling `--useErrorModel`, though it can yield improvements in the mapping-based mode as well. This feature will also interact constructively with selective-alignment, which should land in the next (non-bug fix) release. * Added the `quantmerge` command. This allows producing a multi-sample TSV file with aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creati",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:2836,Performance,queue,queue,2836,"ion accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most considerable improvements) when using alignment-based mode and when enabling error modeling `--useErrorModel`, though it can yield improvements in the mapping-based mode as well. This feature will also interact constructively with selective-alignment, which should land in the next (non-bug fix) release. * Added the `quantmerge` command. This allows producing a multi-sample TSV file with aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error me",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:3164,Performance,perform,performance,3164,"ve-alignment, which should land in the next (non-bug fix) release. * Added the `quantmerge` command. This allows producing a multi-sample TSV file with aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` fl",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:3407,Performance,throughput,throughput,3407,"th aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obviou",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:3913,Safety,detect,detected,3913,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:4095,Safety,detect,detection,4095,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:3488,Testability,log,logger,3488," can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:3707,Testability,log,log,3707,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1:4489,Usability,simpl,simplify,4489,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.1
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:1565,Availability,error,error,1565,"econd column lists the name of a discarded duplicate transcript (i.e., a transcript with identical sequence to the retained transcript, but which was discarded). **Note**: If you wish to retain multiple identical transcripts in the input (the prior behavior), this can be achieved by passing the Salmon indexing command the `--keepDuplicates` flag. * This is not a new feature, _per se_, but brings further parity between the alignment and mapping-based modes. It is now possible to dump the equivalence class files `--dumpEq` when using Salmon in alignment-based mode.; ; * The [range-factorization](https://academic.oup.com/bioinformatics/article/33/14/i142/3953977) has been merged into the master branch. This allows using the data-driven likelihood factorization, which can improve quantification accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most considerable improvements) when using alignment-based mode and when enabling error modeling `--useErrorModel`, though it can yield improvements in the mapping-based mode as well. This feature will also interact constructively with selective-alignment, which should land in the next (non-bug fix) release. * Added the `quantmerge` command. This allows producing a multi-sample TSV file with aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:3225,Availability,down,down,3225,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:3358,Availability,error,error,3358,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:52,Deployability,release,release,52,"# Salmon 0.9.0 Release Notes. As always, the newest release is easily installable via [bioconda](https://anaconda.org/bioconda/salmon) and [Docker](https://hub.docker.com/r/combinelab/salmon/). ## New features. * During indexing, Salmon will now discard duplicate transcripts (i.e., transcripts with _exactly the same sequence_) by default. The information about the duplicate transcripts is written to a file in the index directory called `duplicate_clusters.tsv`. This is a two-column TSV file where the first column lists the name of a retained transcript and the second column lists the name of a discarded duplicate transcript (i.e., a transcript with identical sequence to the retained transcript, but which was discarded). **Note**: If you wish to retain multiple identical transcripts in the input (the prior behavior), this can be achieved by passing the Salmon indexing command the `--keepDuplicates` flag. * This is not a new feature, _per se_, but brings further parity between the alignment and mapping-based modes. It is now possible to dump the equivalence class files `--dumpEq` when using Salmon in alignment-based mode.; ; * The [range-factorization](https://academic.oup.com/bioinformatics/article/33/14/i142/3953977) has been merged into the master branch. This allows using the data-driven likelihood factorization, which can improve quantification accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most considerable improvements) when using alignment-based mode and when enabling error modeling `--useErrorModel`, though it can yield improvements in the mapping-based mode as well. This feature will also interact constructively with selective-alignment, which should land in the next (non-bug fix) release. * Added the `quantmerge` command. This allows producing a multi-sample TSV file with aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploadin",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:70,Deployability,install,installable,70,"# Salmon 0.9.0 Release Notes. As always, the newest release is easily installable via [bioconda](https://anaconda.org/bioconda/salmon) and [Docker](https://hub.docker.com/r/combinelab/salmon/). ## New features. * During indexing, Salmon will now discard duplicate transcripts (i.e., transcripts with _exactly the same sequence_) by default. The information about the duplicate transcripts is written to a file in the index directory called `duplicate_clusters.tsv`. This is a two-column TSV file where the first column lists the name of a retained transcript and the second column lists the name of a discarded duplicate transcript (i.e., a transcript with identical sequence to the retained transcript, but which was discarded). **Note**: If you wish to retain multiple identical transcripts in the input (the prior behavior), this can be achieved by passing the Salmon indexing command the `--keepDuplicates` flag. * This is not a new feature, _per se_, but brings further parity between the alignment and mapping-based modes. It is now possible to dump the equivalence class files `--dumpEq` when using Salmon in alignment-based mode.; ; * The [range-factorization](https://academic.oup.com/bioinformatics/article/33/14/i142/3953977) has been merged into the master branch. This allows using the data-driven likelihood factorization, which can improve quantification accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most considerable improvements) when using alignment-based mode and when enabling error modeling `--useErrorModel`, though it can yield improvements in the mapping-based mode as well. This feature will also interact constructively with selective-alignment, which should land in the next (non-bug fix) release. * Added the `quantmerge` command. This allows producing a multi-sample TSV file with aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploadin",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:1784,Deployability,release,release,1784," **Note**: If you wish to retain multiple identical transcripts in the input (the prior behavior), this can be achieved by passing the Salmon indexing command the `--keepDuplicates` flag. * This is not a new feature, _per se_, but brings further parity between the alignment and mapping-based modes. It is now possible to dump the equivalence class files `--dumpEq` when using Salmon in alignment-based mode.; ; * The [range-factorization](https://academic.oup.com/bioinformatics/article/33/14/i142/3953977) has been merged into the master branch. This allows using the data-driven likelihood factorization, which can improve quantification accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most considerable improvements) when using alignment-based mode and when enabling error modeling `--useErrorModel`, though it can yield improvements in the mapping-based mode as well. This feature will also interact constructively with selective-alignment, which should land in the next (non-bug fix) release. * Added the `quantmerge` command. This allows producing a multi-sample TSV file with aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:2246,Deployability,update,updated,2246,"to the master branch. This allows using the data-driven likelihood factorization, which can improve quantification accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most considerable improvements) when using alignment-based mode and when enabling error modeling `--useErrorModel`, though it can yield improvements in the mapping-based mode as well. This feature will also interact constructively with selective-alignment, which should land in the next (non-bug fix) release. * Added the `quantmerge` command. This allows producing a multi-sample TSV file with aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:4006,Deployability,release,releases,4006,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:2981,Integrability,message,messages,2981," can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:3364,Integrability,message,message,3364,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:3570,Integrability,wrap,wraps,3570,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:3620,Integrability,message,message,3620,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:2159,Performance,multi-thread,multi-threaded,2159,"c.oup.com/bioinformatics/article/33/14/i142/3953977) has been merged into the master branch. This allows using the data-driven likelihood factorization, which can improve quantification accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most considerable improvements) when using alignment-based mode and when enabling error modeling `--useErrorModel`, though it can yield improvements in the mapping-based mode as well. This feature will also interact constructively with selective-alignment, which should land in the next (non-bug fix) release. * Added the `quantmerge` command. This allows producing a multi-sample TSV file with aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creati",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:2322,Performance,queue,queue,2322,"ion accuracy on certain classes of ""difficult"" transcripts. Currently, this feature interacts best (i.e., yields the most considerable improvements) when using alignment-based mode and when enabling error modeling `--useErrorModel`, though it can yield improvements in the mapping-based mode as well. This feature will also interact constructively with selective-alignment, which should land in the next (non-bug fix) release. * Added the `quantmerge` command. This allows producing a multi-sample TSV file with aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error me",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:2650,Performance,perform,performance,2650,"ve-alignment, which should land in the next (non-bug fix) release. * Added the `quantmerge` command. This allows producing a multi-sample TSV file with aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` fl",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:2893,Performance,throughput,throughput,2893,"th aggregated abundance metrics over samples from many different quantification runs. This can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obviou",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:3399,Safety,detect,detected,3399,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:3581,Safety,detect,detection,3581,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:2974,Testability,log,logger,2974," can be useful to ease e.g. uploading of quantified data to certain online analysis tools like [Degust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:3193,Testability,log,log,3193,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0:3975,Usability,simpl,simplify,3975,"egust](http://degust.erc.monash.edu/). ; Other improvements, features and changes; -----. * The [multi-threaded read parser used by Salmon](https://github.com/rob-p/FQFeeder) has been updated to considerably improve CPU utilization. Specifically, the previous queue management strategy (busy waiting) has been replaced by an intelligent, bounded, exponential-backoff strategy. Many improvements (and much of the code) comes from [this series of blog posts](https://geidav.wordpress.com/2016/03/12/important-properties-of-spinlocks/) by David Geier. Basically, what this means is that the performance will be the same as the prior implementation if your disks can feed reads to Salmon quickly enough, but if they can't, considerably less CPU time will be wasted waiting on input (i.e. processing speed will be better matched to I/O throughput).; ; * In addition to the improved parser behavior, some of the noisy logger messages in the parser have been eliminated. In ""pathological"" situations with very fast disks and slow CPUs (or vice-versa), the previous parser may have generated an inordinate amount of output, creating large log files and otherwise slowing down processing. This should no longer happen. * Salmon will now terminate early (with a non-zero exit code) and report a meaningful error message if a corrupt input file is detected. Previously, corrupted compressed input files could have caused the parser to hang indefinitely. This behavior was fixed upstream in kseq, and the current parser wraps this detection with a descriptive exception message. * Renamed the `--allowOrphans` flag to `--allowOrphansFMD`, and added a `--discardOrphansQuasi` flag. This is a bit messy currently (the default in FMD mapping is to discard orphans and in quasi-mapping is to keep them). These flags to the obvious things and are docuemented more in the command line help. We are considering how best to clean-up simplify these flags in future releases. * Many other small improvements and bug fixes.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.9.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:870,Energy Efficiency,efficient,efficient,870,"# Bug Fixes; - Fixed a bug in `.gtf`-based gene aggregation output that could cause a transcript to be attributed to the wrong gene if the transcript was not present in the `gtf` file.; - Fixed bug that required a qualified path be provided when writing the quasi-mapping file (i.e., `.sam`).; - Fixed a bug that could cause the `SAM` header to fail to be written when writing quasi-mappings to stdout.; - Fixed behavior of `--numPreAuxModelSamples` so that it is consistent between quasi-mapping and alignment-based mode (and has an effect in both).; - Fixed a ""short style"" option collision.; - Fixed a bug that would cause bias correction not to be run if _only_ the `--posBias` flag was passed. # Minor changes & improvements; - Bumped to the latest version of [spdlog](https://github.com/gabime/spdlog).; - Bumped included version of [libcuckoo](https://github.com/efficient/libcuckoo).; - Bumped included version of [sparsepp](https://github.com/greg7mdp/sparsepp) (via RapMap).; - Bumped included version of [RapMap](https://github.com/COMBINE-lab/RapMap).; - `meta_info.json` now contains more information about the length classes used for positional bias correction when enabled (these length classes are now data driven.); - `meta_info.json` now records if equivalence classes were dumped, and if so, what properties were dumped as well (e.g. rich weights).; - `meta_info.json` now includes the end as well as beginning time of each run.; - Improvements to fragment-GC bias modeling for fragments that fall very close to the beginning or end of transcripts.; - Added `.gff` and `.gff3` (and capitalized variants of all) as recognized file formats for gene aggregation mode.; - Changed the default prior mean and standard deviation of the fragment length distribution to better match more recent protocols and libraries.; - Made slight improvements to the computation of the conditional fragment probabilities (i.e., P(f | t) in the model). Now the probability of a fragment length is conditi",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:2819,Energy Efficiency,reduce,reduces,2819,"ter match more recent protocols and libraries.; - Made slight improvements to the computation of the conditional fragment probabilities (i.e., P(f | t) in the model). Now the probability of a fragment length is conditioned on the transcript length, and the probability of a start position takes that length into account. # New features; - Some important new indexing improvements due to improvements in RapMap; read more [below](#rapmap-features).; - Substantial overhaul and improvements to the posterior Gibbs sampler. The methodology now generally follows that of [mmseq](https://github.com/eturro/mmseq)<sup>[1](#mmseq)</sup>. Specifically, the new (uncollapsed) sampler improves estimates of sampling variance (and uses the same methodology as before to account for inferential uncertainty).; - Added `--thinningFactor` flag that lets the user specify how many Gibbs samples should be skipped between saved samples. Increasing this causes the Gibbs chain to run longer to generate a given number of target samples (but potentially reduces the autocorrelation between samples). The default is 16.; - Added `--meta` flag, that automatically selects internal options optimized for metagenomic & microbiomic quantification. ; - Added `--dumpEqWeights` option that includes the rich equivalence class weights in the output file when equivalence classes are written to file.; - Added _experimental_ `--noLengthCorrection` option. This is intended to be used when quantifying based on protocols (e.g., Lexogen Quantseq) where the number of sequenced fragments / tags deriving from a target are assumed to be independent of that target's length. (This feature is still experimental, and requires more testing, so please provide feedback if you use it).; - Added new `--quasiCoverage` option. This is analogous to the `--coverage` option, but the latter applies only to mapping under the FMD-based index (which is no longer recommended). This option enforces that a certain fraction of the _read_ is cover",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:4025,Energy Efficiency,reduce,reduce,4025," metagenomic & microbiomic quantification. ; - Added `--dumpEqWeights` option that includes the rich equivalence class weights in the output file when equivalence classes are written to file.; - Added _experimental_ `--noLengthCorrection` option. This is intended to be used when quantifying based on protocols (e.g., Lexogen Quantseq) where the number of sequenced fragments / tags deriving from a target are assumed to be independent of that target's length. (This feature is still experimental, and requires more testing, so please provide feedback if you use it).; - Added new `--quasiCoverage` option. This is analogous to the `--coverage` option, but the latter applies only to mapping under the FMD-based index (which is no longer recommended). This option enforces that a certain fraction of the _read_ is covered by exact matches (specifically, maximum mappable prefixes) in order to consider a mapping as valid. The value is expressed as a number between 0 and 1; a larger value is more stringent, and less likely to allow spurious mappings, but can reduce sensitivity.; ; ## [New features due to changes and improvements in RapMap](#rapmap-features); - New hash map for default index - The default `quasiindex` command now uses the [sparsepp](https://github.com/greg7mdp/sparsepp) sparse hash map. While providing very similar lookup performance to the prior hash map implementation, sparsepp provides a number of benefits. Specifically, it uses _substantially_ less memory (typically ~50% less) and, crucially, the memory usage grows gradually with the number of keys. A big problem with the previous implementation being used (Google's dense hash map) is that, on resize, the map would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage th",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:6179,Energy Efficiency,reduce,reduced-memory,6179,"7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well). Also, for large references, the size of the index on disk is ~40% smaller. The cost of this substantial size reduction is that the _frugal_ perfect-hash-based index takes 2-2.5 times longer to build, and lookups are slower. This slower lookup speed can, conceivably, reduce quasi-mapping speed a bit, but the speed hit (if there is one) is dataset dependent. This new indexing scheme should allow the construction of `quasi` indices on substantially larger references for a fixed RAM budget, and also reduces the memory required to retain the index in memory during mapping as well. _Note_: This type of index is specifically recommended if you need to build an index on a large set of targets (e.g., for metagenomic or microbiomic use). # References. <a name=""mmseq"">[1]</a> Haplotype and isoform specific expression estimation using multi-mapping RNA-seq reads. Turro E, Su S-Y, ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:6575,Energy Efficiency,reduce,reduce,6575,"the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well). Also, for large references, the size of the index on disk is ~40% smaller. The cost of this substantial size reduction is that the _frugal_ perfect-hash-based index takes 2-2.5 times longer to build, and lookups are slower. This slower lookup speed can, conceivably, reduce quasi-mapping speed a bit, but the speed hit (if there is one) is dataset dependent. This new indexing scheme should allow the construction of `quasi` indices on substantially larger references for a fixed RAM budget, and also reduces the memory required to retain the index in memory during mapping as well. _Note_: This type of index is specifically recommended if you need to build an index on a large set of targets (e.g., for metagenomic or microbiomic use). # References. <a name=""mmseq"">[1]</a> Haplotype and isoform specific expression estimation using multi-mapping RNA-seq reads. Turro E, Su S-Y, Goncalves A, Coin L, Richardson S and Lewin A. Genome Biology, 2011 Feb; 12:R13. doi: 10.1186/gb-2011-12-2-r13.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:6809,Energy Efficiency,reduce,reduces,6809,"the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well). Also, for large references, the size of the index on disk is ~40% smaller. The cost of this substantial size reduction is that the _frugal_ perfect-hash-based index takes 2-2.5 times longer to build, and lookups are slower. This slower lookup speed can, conceivably, reduce quasi-mapping speed a bit, but the speed hit (if there is one) is dataset dependent. This new indexing scheme should allow the construction of `quasi` indices on substantially larger references for a fixed RAM budget, and also reduces the memory required to retain the index in memory during mapping as well. _Note_: This type of index is specifically recommended if you need to build an index on a large set of targets (e.g., for metagenomic or microbiomic use). # References. <a name=""mmseq"">[1]</a> Haplotype and isoform specific expression estimation using multi-mapping RNA-seq reads. Turro E, Su S-Y, Goncalves A, Coin L, Richardson S and Lewin A. Genome Biology, 2011 Feb; 12:R13. doi: 10.1186/gb-2011-12-2-r13.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:1805,Integrability,protocol,protocols,1805,"rsion of [spdlog](https://github.com/gabime/spdlog).; - Bumped included version of [libcuckoo](https://github.com/efficient/libcuckoo).; - Bumped included version of [sparsepp](https://github.com/greg7mdp/sparsepp) (via RapMap).; - Bumped included version of [RapMap](https://github.com/COMBINE-lab/RapMap).; - `meta_info.json` now contains more information about the length classes used for positional bias correction when enabled (these length classes are now data driven.); - `meta_info.json` now records if equivalence classes were dumped, and if so, what properties were dumped as well (e.g. rich weights).; - `meta_info.json` now includes the end as well as beginning time of each run.; - Improvements to fragment-GC bias modeling for fragments that fall very close to the beginning or end of transcripts.; - Added `.gff` and `.gff3` (and capitalized variants of all) as recognized file formats for gene aggregation mode.; - Changed the default prior mean and standard deviation of the fragment length distribution to better match more recent protocols and libraries.; - Made slight improvements to the computation of the conditional fragment probabilities (i.e., P(f | t) in the model). Now the probability of a fragment length is conditioned on the transcript length, and the probability of a start position takes that length into account. # New features; - Some important new indexing improvements due to improvements in RapMap; read more [below](#rapmap-features).; - Substantial overhaul and improvements to the posterior Gibbs sampler. The methodology now generally follows that of [mmseq](https://github.com/eturro/mmseq)<sup>[1](#mmseq)</sup>. Specifically, the new (uncollapsed) sampler improves estimates of sampling variance (and uses the same methodology as before to account for inferential uncertainty).; - Added `--thinningFactor` flag that lets the user specify how many Gibbs samples should be skipped between saved samples. Increasing this causes the Gibbs chain to run longer",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:3266,Integrability,protocol,protocols,3266," overhaul and improvements to the posterior Gibbs sampler. The methodology now generally follows that of [mmseq](https://github.com/eturro/mmseq)<sup>[1](#mmseq)</sup>. Specifically, the new (uncollapsed) sampler improves estimates of sampling variance (and uses the same methodology as before to account for inferential uncertainty).; - Added `--thinningFactor` flag that lets the user specify how many Gibbs samples should be skipped between saved samples. Increasing this causes the Gibbs chain to run longer to generate a given number of target samples (but potentially reduces the autocorrelation between samples). The default is 16.; - Added `--meta` flag, that automatically selects internal options optimized for metagenomic & microbiomic quantification. ; - Added `--dumpEqWeights` option that includes the rich equivalence class weights in the output file when equivalence classes are written to file.; - Added _experimental_ `--noLengthCorrection` option. This is intended to be used when quantifying based on protocols (e.g., Lexogen Quantseq) where the number of sequenced fragments / tags deriving from a target are assumed to be independent of that target's length. (This feature is still experimental, and requires more testing, so please provide feedback if you use it).; - Added new `--quasiCoverage` option. This is analogous to the `--coverage` option, but the latter applies only to mapping under the FMD-based index (which is no longer recommended). This option enforces that a certain fraction of the _read_ is covered by exact matches (specifically, maximum mappable prefixes) in order to consider a mapping as valid. The value is expressed as a number between 0 and 1; a larger value is more stringent, and less likely to allow spurious mappings, but can reduce sensitivity.; ; ## [New features due to changes and improvements in RapMap](#rapmap-features); - New hash map for default index - The default `quasiindex` command now uses the [sparsepp](https://github.com/greg7md",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:6656,Integrability,depend,dependent,6656,"the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well). Also, for large references, the size of the index on disk is ~40% smaller. The cost of this substantial size reduction is that the _frugal_ perfect-hash-based index takes 2-2.5 times longer to build, and lookups are slower. This slower lookup speed can, conceivably, reduce quasi-mapping speed a bit, but the speed hit (if there is one) is dataset dependent. This new indexing scheme should allow the construction of `quasi` indices on substantially larger references for a fixed RAM budget, and also reduces the memory required to retain the index in memory during mapping as well. _Note_: This type of index is specifically recommended if you need to build an index on a large set of targets (e.g., for metagenomic or microbiomic use). # References. <a name=""mmseq"">[1]</a> Haplotype and isoform specific expression estimation using multi-mapping RNA-seq reads. Turro E, Su S-Y, Goncalves A, Coin L, Richardson S and Lewin A. Genome Biology, 2011 Feb; 12:R13. doi: 10.1186/gb-2011-12-2-r13.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:2952,Performance,optimiz,optimized,2952,"el). Now the probability of a fragment length is conditioned on the transcript length, and the probability of a start position takes that length into account. # New features; - Some important new indexing improvements due to improvements in RapMap; read more [below](#rapmap-features).; - Substantial overhaul and improvements to the posterior Gibbs sampler. The methodology now generally follows that of [mmseq](https://github.com/eturro/mmseq)<sup>[1](#mmseq)</sup>. Specifically, the new (uncollapsed) sampler improves estimates of sampling variance (and uses the same methodology as before to account for inferential uncertainty).; - Added `--thinningFactor` flag that lets the user specify how many Gibbs samples should be skipped between saved samples. Increasing this causes the Gibbs chain to run longer to generate a given number of target samples (but potentially reduces the autocorrelation between samples). The default is 16.; - Added `--meta` flag, that automatically selects internal options optimized for metagenomic & microbiomic quantification. ; - Added `--dumpEqWeights` option that includes the rich equivalence class weights in the output file when equivalence classes are written to file.; - Added _experimental_ `--noLengthCorrection` option. This is intended to be used when quantifying based on protocols (e.g., Lexogen Quantseq) where the number of sequenced fragments / tags deriving from a target are assumed to be independent of that target's length. (This feature is still experimental, and requires more testing, so please provide feedback if you use it).; - Added new `--quasiCoverage` option. This is analogous to the `--coverage` option, but the latter applies only to mapping under the FMD-based index (which is no longer recommended). This option enforces that a certain fraction of the _read_ is covered by exact matches (specifically, maximum mappable prefixes) in order to consider a mapping as valid. The value is expressed as a number between 0 and 1; a larg",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:4310,Performance,perform,performance,4310,"ents / tags deriving from a target are assumed to be independent of that target's length. (This feature is still experimental, and requires more testing, so please provide feedback if you use it).; - Added new `--quasiCoverage` option. This is analogous to the `--coverage` option, but the latter applies only to mapping under the FMD-based index (which is no longer recommended). This option enforces that a certain fraction of the _read_ is covered by exact matches (specifically, maximum mappable prefixes) in order to consider a mapping as valid. The value is expressed as a number between 0 and 1; a larger value is more stringent, and less likely to allow spurious mappings, but can reduce sensitivity.; ; ## [New features due to changes and improvements in RapMap](#rapmap-features); - New hash map for default index - The default `quasiindex` command now uses the [sparsepp](https://github.com/greg7mdp/sparsepp) sparse hash map. While providing very similar lookup performance to the prior hash map implementation, sparsepp provides a number of benefits. Specifically, it uses _substantially_ less memory (typically ~50% less) and, crucially, the memory usage grows gradually with the number of keys. A big problem with the previous implementation being used (Google's dense hash map) is that, on resize, the map would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essent",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:5052,Performance,perform,performance,5052,"Map](#rapmap-features); - New hash map for default index - The default `quasiindex` command now uses the [sparsepp](https://github.com/greg7mdp/sparsepp) sparse hash map. While providing very similar lookup performance to the prior hash map implementation, sparsepp provides a number of benefits. Specifically, it uses _substantially_ less memory (typically ~50% less) and, crucially, the memory usage grows gradually with the number of keys. A big problem with the previous implementation being used (Google's dense hash map) is that, on resize, the map would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _fr",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:4133,Security,hash,hash,4133," written to file.; - Added _experimental_ `--noLengthCorrection` option. This is intended to be used when quantifying based on protocols (e.g., Lexogen Quantseq) where the number of sequenced fragments / tags deriving from a target are assumed to be independent of that target's length. (This feature is still experimental, and requires more testing, so please provide feedback if you use it).; - Added new `--quasiCoverage` option. This is analogous to the `--coverage` option, but the latter applies only to mapping under the FMD-based index (which is no longer recommended). This option enforces that a certain fraction of the _read_ is covered by exact matches (specifically, maximum mappable prefixes) in order to consider a mapping as valid. The value is expressed as a number between 0 and 1; a larger value is more stringent, and less likely to allow spurious mappings, but can reduce sensitivity.; ; ## [New features due to changes and improvements in RapMap](#rapmap-features); - New hash map for default index - The default `quasiindex` command now uses the [sparsepp](https://github.com/greg7mdp/sparsepp) sparse hash map. While providing very similar lookup performance to the prior hash map implementation, sparsepp provides a number of benefits. Specifically, it uses _substantially_ less memory (typically ~50% less) and, crucially, the memory usage grows gradually with the number of keys. A big problem with the previous implementation being used (Google's dense hash map) is that, on resize, the map would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the s",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:4264,Security,hash,hash,4264,"ing based on protocols (e.g., Lexogen Quantseq) where the number of sequenced fragments / tags deriving from a target are assumed to be independent of that target's length. (This feature is still experimental, and requires more testing, so please provide feedback if you use it).; - Added new `--quasiCoverage` option. This is analogous to the `--coverage` option, but the latter applies only to mapping under the FMD-based index (which is no longer recommended). This option enforces that a certain fraction of the _read_ is covered by exact matches (specifically, maximum mappable prefixes) in order to consider a mapping as valid. The value is expressed as a number between 0 and 1; a larger value is more stringent, and less likely to allow spurious mappings, but can reduce sensitivity.; ; ## [New features due to changes and improvements in RapMap](#rapmap-features); - New hash map for default index - The default `quasiindex` command now uses the [sparsepp](https://github.com/greg7mdp/sparsepp) sparse hash map. While providing very similar lookup performance to the prior hash map implementation, sparsepp provides a number of benefits. Specifically, it uses _substantially_ less memory (typically ~50% less) and, crucially, the memory usage grows gradually with the number of keys. A big problem with the previous implementation being used (Google's dense hash map) is that, on resize, the map would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect has",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:4335,Security,hash,hash,4335,"ents / tags deriving from a target are assumed to be independent of that target's length. (This feature is still experimental, and requires more testing, so please provide feedback if you use it).; - Added new `--quasiCoverage` option. This is analogous to the `--coverage` option, but the latter applies only to mapping under the FMD-based index (which is no longer recommended). This option enforces that a certain fraction of the _read_ is covered by exact matches (specifically, maximum mappable prefixes) in order to consider a mapping as valid. The value is expressed as a number between 0 and 1; a larger value is more stringent, and less likely to allow spurious mappings, but can reduce sensitivity.; ; ## [New features due to changes and improvements in RapMap](#rapmap-features); - New hash map for default index - The default `quasiindex` command now uses the [sparsepp](https://github.com/greg7mdp/sparsepp) sparse hash map. While providing very similar lookup performance to the prior hash map implementation, sparsepp provides a number of benefits. Specifically, it uses _substantially_ less memory (typically ~50% less) and, crucially, the memory usage grows gradually with the number of keys. A big problem with the previous implementation being used (Google's dense hash map) is that, on resize, the map would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essent",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:4620,Security,hash,hash,4620," index (which is no longer recommended). This option enforces that a certain fraction of the _read_ is covered by exact matches (specifically, maximum mappable prefixes) in order to consider a mapping as valid. The value is expressed as a number between 0 and 1; a larger value is more stringent, and less likely to allow spurious mappings, but can reduce sensitivity.; ; ## [New features due to changes and improvements in RapMap](#rapmap-features); - New hash map for default index - The default `quasiindex` command now uses the [sparsepp](https://github.com/greg7mdp/sparsepp) sparse hash map. While providing very similar lookup performance to the prior hash map implementation, sparsepp provides a number of benefits. Specifically, it uses _substantially_ less memory (typically ~50% less) and, crucially, the memory usage grows gradually with the number of keys. A big problem with the previous implementation being used (Google's dense hash map) is that, on resize, the map would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:5099,Security,hash,hash,5099,"Map](#rapmap-features); - New hash map for default index - The default `quasiindex` command now uses the [sparsepp](https://github.com/greg7mdp/sparsepp) sparse hash map. While providing very similar lookup performance to the prior hash map implementation, sparsepp provides a number of benefits. Specifically, it uses _substantially_ less memory (typically ~50% less) and, crucially, the memory usage grows gradually with the number of keys. A big problem with the previous implementation being used (Google's dense hash map) is that, on resize, the map would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _fr",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:5251,Security,hash,hash,5251,"kup performance to the prior hash map implementation, sparsepp provides a number of benefits. Specifically, it uses _substantially_ less memory (typically ~50% less) and, crucially, the memory usage grows gradually with the number of keys. A big problem with the previous implementation being used (Google's dense hash map) is that, on resize, the map would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well).",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:5372,Security,hash,hash-based,5372,"kup performance to the prior hash map implementation, sparsepp provides a number of benefits. Specifically, it uses _substantially_ less memory (typically ~50% less) and, crucially, the memory usage grows gradually with the number of keys. A big problem with the previous implementation being used (Google's dense hash map) is that, on resize, the map would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well).",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:5423,Security,hash,hash,5423,"sage grows gradually with the number of keys. A big problem with the previous implementation being used (Google's dense hash map) is that, on resize, the map would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well). Also, for large references, the size of the index on disk is ~40% smaller. The cost of this substantial size reduction is that the _frugal_ perfect-hash-based index takes 2-2.5 times longer to",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:5453,Security,validat,validate,5453,"sage grows gradually with the number of keys. A big problem with the previous implementation being used (Google's dense hash map) is that, on resize, the map would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well). Also, for large references, the size of the index on disk is ~40% smaller. The cost of this substantial size reduction is that the _frugal_ perfect-hash-based index takes 2-2.5 times longer to",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:5509,Security,hash,hash,5509,"sage grows gradually with the number of keys. A big problem with the previous implementation being used (Google's dense hash map) is that, on resize, the map would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well). Also, for large references, the size of the index on disk is ~40% smaller. The cost of this substantial size reduction is that the _frugal_ perfect-hash-based index takes 2-2.5 times longer to",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:5689,Security,hash,hash-based,5689,"would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well). Also, for large references, the size of the index on disk is ~40% smaller. The cost of this substantial size reduction is that the _frugal_ perfect-hash-based index takes 2-2.5 times longer to build, and lookups are slower. This slower lookup speed can, conceivably, reduce quasi-mapping speed a bit, but the speed hit (if there is one) is dataset dep",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:5739,Security,hash,hash-based,5739,"to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well). Also, for large references, the size of the index on disk is ~40% smaller. The cost of this substantial size reduction is that the _frugal_ perfect-hash-based index takes 2-2.5 times longer to build, and lookups are slower. This slower lookup speed can, conceivably, reduce quasi-mapping speed a bit, but the speed hit (if there is one) is dataset dependent. This new indexing scheme should allow the construction of `quasi` indices on substantially larger references for a fixed RA",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:5857,Security,hash,hash-based,5857,"to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well). Also, for large references, the size of the index on disk is ~40% smaller. The cost of this substantial size reduction is that the _frugal_ perfect-hash-based index takes 2-2.5 times longer to build, and lookups are slower. This slower lookup speed can, conceivably, reduce quasi-mapping speed a bit, but the speed hit (if there is one) is dataset dependent. This new indexing scheme should allow the construction of `quasi` indices on substantially larger references for a fixed RA",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:6118,Security,hash,hash-based,6118,"7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well). Also, for large references, the size of the index on disk is ~40% smaller. The cost of this substantial size reduction is that the _frugal_ perfect-hash-based index takes 2-2.5 times longer to build, and lookups are slower. This slower lookup speed can, conceivably, reduce quasi-mapping speed a bit, but the speed hit (if there is one) is dataset dependent. This new indexing scheme should allow the construction of `quasi` indices on substantially larger references for a fixed RAM budget, and also reduces the memory required to retain the index in memory during mapping as well. _Note_: This type of index is specifically recommended if you need to build an index on a large set of targets (e.g., for metagenomic or microbiomic use). # References. <a name=""mmseq"">[1]</a> Haplotype and isoform specific expression estimation using multi-mapping RNA-seq reads. Turro E, Su S-Y, ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:6281,Security,hash,hash-based,6281,"7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well). Also, for large references, the size of the index on disk is ~40% smaller. The cost of this substantial size reduction is that the _frugal_ perfect-hash-based index takes 2-2.5 times longer to build, and lookups are slower. This slower lookup speed can, conceivably, reduce quasi-mapping speed a bit, but the speed hit (if there is one) is dataset dependent. This new indexing scheme should allow the construction of `quasi` indices on substantially larger references for a fixed RAM budget, and also reduces the memory required to retain the index in memory during mapping as well. _Note_: This type of index is specifically recommended if you need to build an index on a large set of targets (e.g., for metagenomic or microbiomic use). # References. <a name=""mmseq"">[1]</a> Haplotype and isoform specific expression estimation using multi-mapping RNA-seq reads. Turro E, Su S-Y, ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:6456,Security,hash,hash-based,6456,"the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well). Also, for large references, the size of the index on disk is ~40% smaller. The cost of this substantial size reduction is that the _frugal_ perfect-hash-based index takes 2-2.5 times longer to build, and lookups are slower. This slower lookup speed can, conceivably, reduce quasi-mapping speed a bit, but the speed hit (if there is one) is dataset dependent. This new indexing scheme should allow the construction of `quasi` indices on substantially larger references for a fixed RAM budget, and also reduces the memory required to retain the index in memory during mapping as well. _Note_: This type of index is specifically recommended if you need to build an index on a large set of targets (e.g., for metagenomic or microbiomic use). # References. <a name=""mmseq"">[1]</a> Haplotype and isoform specific expression estimation using multi-mapping RNA-seq reads. Turro E, Su S-Y, Goncalves A, Coin L, Richardson S and Lewin A. Genome Biology, 2011 Feb; 12:R13. doi: 10.1186/gb-2011-12-2-r13.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:3481,Testability,test,testing,3481,"f sampling variance (and uses the same methodology as before to account for inferential uncertainty).; - Added `--thinningFactor` flag that lets the user specify how many Gibbs samples should be skipped between saved samples. Increasing this causes the Gibbs chain to run longer to generate a given number of target samples (but potentially reduces the autocorrelation between samples). The default is 16.; - Added `--meta` flag, that automatically selects internal options optimized for metagenomic & microbiomic quantification. ; - Added `--dumpEqWeights` option that includes the rich equivalence class weights in the output file when equivalence classes are written to file.; - Added _experimental_ `--noLengthCorrection` option. This is intended to be used when quantifying based on protocols (e.g., Lexogen Quantseq) where the number of sequenced fragments / tags deriving from a target are assumed to be independent of that target's length. (This feature is still experimental, and requires more testing, so please provide feedback if you use it).; - Added new `--quasiCoverage` option. This is analogous to the `--coverage` option, but the latter applies only to mapping under the FMD-based index (which is no longer recommended). This option enforces that a certain fraction of the _read_ is covered by exact matches (specifically, maximum mappable prefixes) in order to consider a mapping as valid. The value is expressed as a number between 0 and 1; a larger value is more stringent, and less likely to allow spurious mappings, but can reduce sensitivity.; ; ## [New features due to changes and improvements in RapMap](#rapmap-features); - New hash map for default index - The default `quasiindex` command now uses the [sparsepp](https://github.com/greg7mdp/sparsepp) sparse hash map. While providing very similar lookup performance to the prior hash map implementation, sparsepp provides a number of benefits. Specifically, it uses _substantially_ less memory (typically ~50% less) and, cr",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:5147,Testability,benchmark,benchmarks,5147,"Map](#rapmap-features); - New hash map for default index - The default `quasiindex` command now uses the [sparsepp](https://github.com/greg7mdp/sparsepp) sparse hash map. While providing very similar lookup performance to the prior hash map implementation, sparsepp provides a number of benefits. Specifically, it uses _substantially_ less memory (typically ~50% less) and, crucially, the memory usage grows gradually with the number of keys. A big problem with the previous implementation being used (Google's dense hash map) is that, on resize, the map would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _fr",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:3508,Usability,feedback,feedback,3508,"f sampling variance (and uses the same methodology as before to account for inferential uncertainty).; - Added `--thinningFactor` flag that lets the user specify how many Gibbs samples should be skipped between saved samples. Increasing this causes the Gibbs chain to run longer to generate a given number of target samples (but potentially reduces the autocorrelation between samples). The default is 16.; - Added `--meta` flag, that automatically selects internal options optimized for metagenomic & microbiomic quantification. ; - Added `--dumpEqWeights` option that includes the rich equivalence class weights in the output file when equivalence classes are written to file.; - Added _experimental_ `--noLengthCorrection` option. This is intended to be used when quantifying based on protocols (e.g., Lexogen Quantseq) where the number of sequenced fragments / tags deriving from a target are assumed to be independent of that target's length. (This feature is still experimental, and requires more testing, so please provide feedback if you use it).; - Added new `--quasiCoverage` option. This is analogous to the `--coverage` option, but the latter applies only to mapping under the FMD-based index (which is no longer recommended). This option enforces that a certain fraction of the _read_ is covered by exact matches (specifically, maximum mappable prefixes) in order to consider a mapping as valid. The value is expressed as a number between 0 and 1; a larger value is more stringent, and less likely to allow spurious mappings, but can reduce sensitivity.; ; ## [New features due to changes and improvements in RapMap](#rapmap-features); - New hash map for default index - The default `quasiindex` command now uses the [sparsepp](https://github.com/greg7mdp/sparsepp) sparse hash map. While providing very similar lookup performance to the prior hash map implementation, sparsepp provides a number of benefits. Specifically, it uses _substantially_ less memory (typically ~50% less) and, cr",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0:5574,Usability,simpl,simply,5574,"sage grows gradually with the number of keys. A big problem with the previous implementation being used (Google's dense hash map) is that, on resize, the map would double and memory usage would jump by a factor of 3 (a new map of twice the size as the old, plus the original map from which to copy the keys). This means that even if you had enough memory to hold the final map, you might not be able to build it. Sparsepp, on the other hand exhibits memory usage that scales almost linearly with the number of items in the map. For more details on the performance characteristics of the new default hash used in the index, please see the sparsepp benchmarks [here](https://github.com/greg7mdp/sparsepp/blob/master/bench.md).; - New **frugal** perfect hash index - The vastly improved memory usage of the new default `quasi index` essentially obviates the previous perfect-hash-based index. Specifically, since that perfect hash also stored the keys (to validate queries from outside the universe on which the hash was built), the size of the resulting index was similar, it simply required less memory to build. However, sparsepp achieves very similar memory usage to the previous perfect-hash-based index. Instead of removing the perfect-hash-based index entirely, the `-p/--perfectHash` flag now tells the `quasiindex` command to build a _frugal_ perfect-hash-based index. This index uses a number of aggressive space-saving techniques which results in a much smaller memory footprint (but it is also slower to construct and has slower lookups than the default index). For large references, the new _frugal_ perfect-hash-based index exhibits a memory reduction (_over the new, reduced-memory, default index_) of 40-50% (hence, it shows close to this savings over the old perfect-hash-based index as well). Also, for large references, the size of the index on disk is ~40% smaller. The cost of this substantial size reduction is that the _frugal_ perfect-hash-based index takes 2-2.5 times longer to",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0:1579,Availability,failure,failure,1579,"he line:. ```; export DYLD_FALLBACK_LIBRARY_PATH=<PATH_TO_SALMON>/lib <PATH_TO_SALMON>/bin/salmon:$DYLD_FALLBACK_LIBRARY_PATH; ```. in your `~/.profile` file. ## Major Changes; - Default index --- The quasi index has been made the default type. This means that it is no longer necessary to provide the `--type` option to the `index` command. The `fmd` index remains enabled, but may be removed in a future version. We urge you to move over to the `quasi` index if you are not already using it.; - Sequence-specific bias correction --- The old bias correction methodology has been removed from Salmon and replaced with a new sequence-specific bias correction model. Bias correction is enabled with the `--biasCorrect` flag. The new model has numerous benefits over the old. First, it should more accurately correct for sequence specific biases, leading to better estimates in biased samples. Second, it should not suffer from the same pathological ""over-correction"" failure cases of the old model --- if there is no substantial bias in the sample, it should have only a minimal effect on quantification results.; - New output format --- The new output format adds another column, `EffectiveLength`, to the output which records the effective length of each transcript. This is the third column, and the `TPM` and `NumReads` columns have both been shifted by 1. Also, the `quant.sf` output file has been simplified and now contains no comment lines. The first row in the file is an (un-commented) header that lists the column names, and the subsequent rows are the quantification estimates.; - Information about the command used --- Since the comment lines have been removed from the `quant.sf` file, this information (and more), which can sometimes be useful, has been output to other locations. There is a JSON formatted file in the top-level output directory called `cmd_info.json`. This contains a JSON structure with the relevant command line parameters (which used to appear in the `quant.sf` comm",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0:27,Deployability,release,release,27,"This is a fairly major new release of Salmon (thus the major version bump). It includes some new features and makes minor but backward-incompatible changes to the output format. Many of these changes track the latest changes to Sailfish. ## Note for OSX binary:. If you receive a message that a library cannot be found (i.e. if you run into an `@rpath` issue), try running Salmon using the following command:. ```; $ DYLD_FALLBACK_LIBRARY_PATH=<PATH_TO_SALMON>/lib <PATH_TO_SALMON>/bin/salmon; ```. If this works, you can add the library path to the `DYLD_FALLBACK_LIBRARY_PATH` variable automatically by placing the line:. ```; export DYLD_FALLBACK_LIBRARY_PATH=<PATH_TO_SALMON>/lib <PATH_TO_SALMON>/bin/salmon:$DYLD_FALLBACK_LIBRARY_PATH; ```. in your `~/.profile` file. ## Major Changes; - Default index --- The quasi index has been made the default type. This means that it is no longer necessary to provide the `--type` option to the `index` command. The `fmd` index remains enabled, but may be removed in a future version. We urge you to move over to the `quasi` index if you are not already using it.; - Sequence-specific bias correction --- The old bias correction methodology has been removed from Salmon and replaced with a new sequence-specific bias correction model. Bias correction is enabled with the `--biasCorrect` flag. The new model has numerous benefits over the old. First, it should more accurately correct for sequence specific biases, leading to better estimates in biased samples. Second, it should not suffer from the same pathological ""over-correction"" failure cases of the old model --- if there is no substantial bias in the sample, it should have only a minimal effect on quantification results.; - New output format --- The new output format adds another column, `EffectiveLength`, to the output which records the effective length of each transcript. This is the third column, and the `TPM` and `NumReads` columns have both been shifted by 1. Also, the `quant.sf` output ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0:3669,Deployability,release,release,3669,"nfo.json` under the main quantification directory. This records information such as the number of reads processed, the number mapped, the percentage mapped, which type of posterior sampling (e.g. Gibbs / bootstrap), if any, was performed.; - Auxiliary parameters from the run --- In addition to the `meta_info.json` file, the `aux/` directory of the main quantification directory contains other useful files. Specifically, it contains gzipped, binary, data for any bootstrap or Gibbs samples that were generated, and gzipped binary data about the fragment length distribution and bias parameters (the latter is only meaningful if bias-correction was performed). ## Minor Changes; - Position specific start distribution --- Modeling of the position-specific start distribution has been improved, and the way that it is enabled / disabled has been changed. This model is _off_ by default, but is enabled with the `--useFSPD`. ## Bug Fixes; - This release fixes a bug where the mapping location of a fragment may have been miscalculated by a small number of bases in certain cases. This in turn could lead to a small shift in the fragment length distribution and in the resulting quantification estimates. #### Acknowledgements; - Special thanks go to Ayush Sengupta for helping out with the implementation of sequence-specific bias correction.; - Special thanks go to Mike Love for testing the effectiveness of the sequence-specific bias correction implementation (in Sailfish, but this uses the same model) on some experimental (GEUVADIS) data!. #### Note. As you may note, there are two DebianSqueeze binaries listed below. The binary called `SalmonBeta-0.6.0_DebianSqueeze.tar.gz` is the ""standard"" binary, which is built to use the JEMalloc memory allocator. In certain situations (involving files on NFS) this allocator has been observed to segfault upon program termination. This doesn't seem to affect the results, which have already been written by the time this occurs. However, if you encounte",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0:280,Integrability,message,message,280,"This is a fairly major new release of Salmon (thus the major version bump). It includes some new features and makes minor but backward-incompatible changes to the output format. Many of these changes track the latest changes to Sailfish. ## Note for OSX binary:. If you receive a message that a library cannot be found (i.e. if you run into an `@rpath` issue), try running Salmon using the following command:. ```; $ DYLD_FALLBACK_LIBRARY_PATH=<PATH_TO_SALMON>/lib <PATH_TO_SALMON>/bin/salmon; ```. If this works, you can add the library path to the `DYLD_FALLBACK_LIBRARY_PATH` variable automatically by placing the line:. ```; export DYLD_FALLBACK_LIBRARY_PATH=<PATH_TO_SALMON>/lib <PATH_TO_SALMON>/bin/salmon:$DYLD_FALLBACK_LIBRARY_PATH; ```. in your `~/.profile` file. ## Major Changes; - Default index --- The quasi index has been made the default type. This means that it is no longer necessary to provide the `--type` option to the `index` command. The `fmd` index remains enabled, but may be removed in a future version. We urge you to move over to the `quasi` index if you are not already using it.; - Sequence-specific bias correction --- The old bias correction methodology has been removed from Salmon and replaced with a new sequence-specific bias correction model. Bias correction is enabled with the `--biasCorrect` flag. The new model has numerous benefits over the old. First, it should more accurately correct for sequence specific biases, leading to better estimates in biased samples. Second, it should not suffer from the same pathological ""over-correction"" failure cases of the old model --- if there is no substantial bias in the sample, it should have only a minimal effect on quantification results.; - New output format --- The new output format adds another column, `EffectiveLength`, to the output which records the effective length of each transcript. This is the third column, and the `TPM` and `NumReads` columns have both been shifted by 1. Also, the `quant.sf` output ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0:579,Modifiability,variab,variable,579,"This is a fairly major new release of Salmon (thus the major version bump). It includes some new features and makes minor but backward-incompatible changes to the output format. Many of these changes track the latest changes to Sailfish. ## Note for OSX binary:. If you receive a message that a library cannot be found (i.e. if you run into an `@rpath` issue), try running Salmon using the following command:. ```; $ DYLD_FALLBACK_LIBRARY_PATH=<PATH_TO_SALMON>/lib <PATH_TO_SALMON>/bin/salmon; ```. If this works, you can add the library path to the `DYLD_FALLBACK_LIBRARY_PATH` variable automatically by placing the line:. ```; export DYLD_FALLBACK_LIBRARY_PATH=<PATH_TO_SALMON>/lib <PATH_TO_SALMON>/bin/salmon:$DYLD_FALLBACK_LIBRARY_PATH; ```. in your `~/.profile` file. ## Major Changes; - Default index --- The quasi index has been made the default type. This means that it is no longer necessary to provide the `--type` option to the `index` command. The `fmd` index remains enabled, but may be removed in a future version. We urge you to move over to the `quasi` index if you are not already using it.; - Sequence-specific bias correction --- The old bias correction methodology has been removed from Salmon and replaced with a new sequence-specific bias correction model. Bias correction is enabled with the `--biasCorrect` flag. The new model has numerous benefits over the old. First, it should more accurately correct for sequence specific biases, leading to better estimates in biased samples. Second, it should not suffer from the same pathological ""over-correction"" failure cases of the old model --- if there is no substantial bias in the sample, it should have only a minimal effect on quantification results.; - New output format --- The new output format adds another column, `EffectiveLength`, to the output which records the effective length of each transcript. This is the third column, and the `TPM` and `NumReads` columns have both been shifted by 1. Also, the `quant.sf` output ",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0:2952,Performance,perform,performed,2952,"mns have both been shifted by 1. Also, the `quant.sf` output file has been simplified and now contains no comment lines. The first row in the file is an (un-commented) header that lists the column names, and the subsequent rows are the quantification estimates.; - Information about the command used --- Since the comment lines have been removed from the `quant.sf` file, this information (and more), which can sometimes be useful, has been output to other locations. There is a JSON formatted file in the top-level output directory called `cmd_info.json`. This contains a JSON structure with the relevant command line parameters (which used to appear in the `quant.sf` comments).; - Meta-information about the run --- Quite a bit of useful information appears in the file `aux/meta_info.json` under the main quantification directory. This records information such as the number of reads processed, the number mapped, the percentage mapped, which type of posterior sampling (e.g. Gibbs / bootstrap), if any, was performed.; - Auxiliary parameters from the run --- In addition to the `meta_info.json` file, the `aux/` directory of the main quantification directory contains other useful files. Specifically, it contains gzipped, binary, data for any bootstrap or Gibbs samples that were generated, and gzipped binary data about the fragment length distribution and bias parameters (the latter is only meaningful if bias-correction was performed). ## Minor Changes; - Position specific start distribution --- Modeling of the position-specific start distribution has been improved, and the way that it is enabled / disabled has been changed. This model is _off_ by default, but is enabled with the `--useFSPD`. ## Bug Fixes; - This release fixes a bug where the mapping location of a fragment may have been miscalculated by a small number of bases in certain cases. This in turn could lead to a small shift in the fragment length distribution and in the resulting quantification estimates. #### Acknowled",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0:3374,Performance,perform,performed,3374,"ent lines have been removed from the `quant.sf` file, this information (and more), which can sometimes be useful, has been output to other locations. There is a JSON formatted file in the top-level output directory called `cmd_info.json`. This contains a JSON structure with the relevant command line parameters (which used to appear in the `quant.sf` comments).; - Meta-information about the run --- Quite a bit of useful information appears in the file `aux/meta_info.json` under the main quantification directory. This records information such as the number of reads processed, the number mapped, the percentage mapped, which type of posterior sampling (e.g. Gibbs / bootstrap), if any, was performed.; - Auxiliary parameters from the run --- In addition to the `meta_info.json` file, the `aux/` directory of the main quantification directory contains other useful files. Specifically, it contains gzipped, binary, data for any bootstrap or Gibbs samples that were generated, and gzipped binary data about the fragment length distribution and bias parameters (the latter is only meaningful if bias-correction was performed). ## Minor Changes; - Position specific start distribution --- Modeling of the position-specific start distribution has been improved, and the way that it is enabled / disabled has been changed. This model is _off_ by default, but is enabled with the `--useFSPD`. ## Bug Fixes; - This release fixes a bug where the mapping location of a fragment may have been miscalculated by a small number of bases in certain cases. This in turn could lead to a small shift in the fragment length distribution and in the resulting quantification estimates. #### Acknowledgements; - Special thanks go to Ayush Sengupta for helping out with the implementation of sequence-specific bias correction.; - Special thanks go to Mike Love for testing the effectiveness of the sequence-specific bias correction implementation (in Sailfish, but this uses the same model) on some experimental (GEUVADI",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0:4104,Testability,test,testing,4104,"(e.g. Gibbs / bootstrap), if any, was performed.; - Auxiliary parameters from the run --- In addition to the `meta_info.json` file, the `aux/` directory of the main quantification directory contains other useful files. Specifically, it contains gzipped, binary, data for any bootstrap or Gibbs samples that were generated, and gzipped binary data about the fragment length distribution and bias parameters (the latter is only meaningful if bias-correction was performed). ## Minor Changes; - Position specific start distribution --- Modeling of the position-specific start distribution has been improved, and the way that it is enabled / disabled has been changed. This model is _off_ by default, but is enabled with the `--useFSPD`. ## Bug Fixes; - This release fixes a bug where the mapping location of a fragment may have been miscalculated by a small number of bases in certain cases. This in turn could lead to a small shift in the fragment length distribution and in the resulting quantification estimates. #### Acknowledgements; - Special thanks go to Ayush Sengupta for helping out with the implementation of sequence-specific bias correction.; - Special thanks go to Mike Love for testing the effectiveness of the sequence-specific bias correction implementation (in Sailfish, but this uses the same model) on some experimental (GEUVADIS) data!. #### Note. As you may note, there are two DebianSqueeze binaries listed below. The binary called `SalmonBeta-0.6.0_DebianSqueeze.tar.gz` is the ""standard"" binary, which is built to use the JEMalloc memory allocator. In certain situations (involving files on NFS) this allocator has been observed to segfault upon program termination. This doesn't seem to affect the results, which have already been written by the time this occurs. However, if you encounter this problem, you can try `SalmonBeta-0.6.0_DebianSqueeze_tcmalloc.tar.gz`, which is built to use the TCMalloc memory allocator instead; which doesn't seem to suffer from this same issue.",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0:2015,Usability,simpl,simplified,2015,"on. We urge you to move over to the `quasi` index if you are not already using it.; - Sequence-specific bias correction --- The old bias correction methodology has been removed from Salmon and replaced with a new sequence-specific bias correction model. Bias correction is enabled with the `--biasCorrect` flag. The new model has numerous benefits over the old. First, it should more accurately correct for sequence specific biases, leading to better estimates in biased samples. Second, it should not suffer from the same pathological ""over-correction"" failure cases of the old model --- if there is no substantial bias in the sample, it should have only a minimal effect on quantification results.; - New output format --- The new output format adds another column, `EffectiveLength`, to the output which records the effective length of each transcript. This is the third column, and the `TPM` and `NumReads` columns have both been shifted by 1. Also, the `quant.sf` output file has been simplified and now contains no comment lines. The first row in the file is an (un-commented) header that lists the column names, and the subsequent rows are the quantification estimates.; - Information about the command used --- Since the comment lines have been removed from the `quant.sf` file, this information (and more), which can sometimes be useful, has been output to other locations. There is a JSON formatted file in the top-level output directory called `cmd_info.json`. This contains a JSON structure with the relevant command line parameters (which used to appear in the `quant.sf` comments).; - Meta-information about the run --- Quite a bit of useful information appears in the file `aux/meta_info.json` under the main quantification directory. This records information such as the number of reads processed, the number mapped, the percentage mapped, which type of posterior sampling (e.g. Gibbs / bootstrap), if any, was performed.; - Auxiliary parameters from the run --- In addition to the `m",MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0
https://github.com/COMBINE-lab/salmon/releases/tag/v0.3.2:14,Deployability,release,release,14,# New in this release; - Faster lightweight-alignment (requires rebuilding the index); - The index is now a _dense_ rather than _sparse_ suffix array-based index. This improves; lightweight mapping speed 30 -- 50%.; - Modeling of non-uniform fragment start distribution; - Salmon now learns (by default) a fragment position start distribution to account for systematic ; non-uniformity in transcript coverage. This should improve accuracy in datasets exhibiting this ; type of behavior. This feature is still experimental and can be disabled with the `--noFragStartPosDist` flag.,MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.3.2
https://github.com/COMBINE-lab/salmon/releases/tag/v0.3.2:284,Usability,learn,learns,284,# New in this release; - Faster lightweight-alignment (requires rebuilding the index); - The index is now a _dense_ rather than _sparse_ suffix array-based index. This improves; lightweight mapping speed 30 -- 50%.; - Modeling of non-uniform fragment start distribution; - Salmon now learns (by default) a fragment position start distribution to account for systematic ; non-uniformity in transcript coverage. This should improve accuracy in datasets exhibiting this ; type of behavior. This feature is still experimental and can be disabled with the `--noFragStartPosDist` flag.,MatchSource.RELEASES,COMBINE-lab,salmon,v1.10.1,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/releases/tag/v0.3.2
