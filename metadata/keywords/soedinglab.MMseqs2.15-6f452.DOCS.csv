quality_attribute,keyword,matched_word,sentence,source,filename,author,repo,version,wiki,url
Availability,mask,masks,"o; use, which is precisely where it is most unacceptable. Therefore, we; have designed this version of the GPL to prohibit the practice for those; products. If such problems arise substantially in other domains, we; stand ready to extend this provision to those domains in future versions; of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents.; States should not allow patents to restrict development and use of; software on general-purpose computers, but in those that do, we wish to; avoid the special danger that patents applied to a free program could; make it effectively proprietary. To prevent this, the GPL assures that; patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and; modification follow. TERMS AND CONDITIONS. 0. Definitions. ""This License"" refers to version 3 of the GNU General Public License. ""Copyright"" also means copyright-like laws that apply to other kinds of; works, such as semiconductor masks. ""The Program"" refers to any copyrightable work licensed under this; License. Each licensee is addressed as ""you"". ""Licensees"" and; ""recipients"" may be individuals or organizations. To ""modify"" a work means to copy from or adapt all or part of the work; in a fashion requiring copyright permission, other than the making of an; exact copy. The resulting work is called a ""modified version"" of the; earlier work or a work ""based on"" the earlier work. A ""covered work"" means either the unmodified Program or a work based; on the Program. To ""propagate"" a work means to do anything with it that, without; permission, would make you directly or secondarily liable for; infringement under applicable copyright law, except executing it on a; computer or modifying a private copy. Propagation includes copying,; distribution (with or without modification), making available to the; public, and in some countries other activities as well. To ""convey"" a w",MatchSource.DOCS,LICENSE.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/LICENSE.md
Deployability,release,released," GNU GENERAL PUBLIC LICENSE; Version 3, 29 June 2007. Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. Preamble. The GNU General Public License is a free, copyleft license for; software and other kinds of works. The licenses for most software and other practical works are designed; to take away your freedom to share and change the works. By contrast,; the GNU General Public License is intended to guarantee your freedom to; share and change all versions of a program--to make sure it remains free; software for all its users. We, the Free Software Foundation, use the; GNU General Public License for most of our software; it applies also to; any other work released this way by its authors. You can apply it to; your programs, too. When we speak of free software, we are referring to freedom, not; price. Our General Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; them if you wish), that you receive source code or can get it if you; want it, that you can change the software or use pieces of it in new; free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you; these rights or asking you to surrender the rights. Therefore, you have; certain responsibilities if you distribute copies of the software, or if; you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must pass on to the recipients the same; freedoms that you received. You must make sure that they, too, receive; or can get the source code. And you must show them these terms so they; know their rights. Developers that use the GNU GPL protect your rights with two steps:; (1) assert copyright on the software, and (2) offer you this License; givi",MatchSource.DOCS,LICENSE.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/LICENSE.md
Energy Efficiency,charge,charge,"f.org/>; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. Preamble. The GNU General Public License is a free, copyleft license for; software and other kinds of works. The licenses for most software and other practical works are designed; to take away your freedom to share and change the works. By contrast,; the GNU General Public License is intended to guarantee your freedom to; share and change all versions of a program--to make sure it remains free; software for all its users. We, the Free Software Foundation, use the; GNU General Public License for most of our software; it applies also to; any other work released this way by its authors. You can apply it to; your programs, too. When we speak of free software, we are referring to freedom, not; price. Our General Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; them if you wish), that you receive source code or can get it if you; want it, that you can change the software or use pieces of it in new; free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you; these rights or asking you to surrender the rights. Therefore, you have; certain responsibilities if you distribute copies of the software, or if; you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must pass on to the recipients the same; freedoms that you received. You must make sure that they, too, receive; or can get the source code. And you must show them these terms so they; know their rights. Developers that use the GNU GPL protect your rights with two steps:; (1) assert copyright on the software, and (2) offer you this License; giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GP",MatchSource.DOCS,LICENSE.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/LICENSE.md
Integrability,interface,interface,"e resulting work is called a ""modified version"" of the; earlier work or a work ""based on"" the earlier work. A ""covered work"" means either the unmodified Program or a work based; on the Program. To ""propagate"" a work means to do anything with it that, without; permission, would make you directly or secondarily liable for; infringement under applicable copyright law, except executing it on a; computer or modifying a private copy. Propagation includes copying,; distribution (with or without modification), making available to the; public, and in some countries other activities as well. To ""convey"" a work means any kind of propagation that enables other; parties to make or receive copies. Mere interaction with a user through; a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays ""Appropriate Legal Notices""; to the extent that it includes a convenient and prominently visible; feature that (1) displays an appropriate copyright notice, and (2); tells the user that there is no warranty for the work (except to the; extent that warranties are provided), that licensees may convey the; work under this License, and how to view a copy of this License. If; the interface presents a list of user commands or options, such as a; menu, a prominent item in the list meets this criterion. 1. Source Code. The ""source code"" for a work means the preferred form of the work; for making modifications to it. ""Object code"" means any non-source; form of a work. A ""Standard Interface"" means an interface that either is an official; standard defined by a recognized standards body, or, in the case of; interfaces specified for a particular programming language, one that; is widely used among developers working in that language. The ""System Libraries"" of an executable work include anything, other; than the work as a whole, that (a) is included in the normal form of; packaging a Major Component, but which is not part of that Major; Component, and (b) serve",MatchSource.DOCS,LICENSE.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/LICENSE.md
Modifiability,extend,extend," and (2) offer you this License; giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains; that there is no warranty for this free software. For both users' and; authors' sake, the GPL requires that modified versions be marked as; changed, so that their problems will not be attributed erroneously to; authors of previous versions. Some devices are designed to deny users access to install or run; modified versions of the software inside them, although the manufacturer; can do so. This is fundamentally incompatible with the aim of; protecting users' freedom to change the software. The systematic; pattern of such abuse occurs in the area of products for individuals to; use, which is precisely where it is most unacceptable. Therefore, we; have designed this version of the GPL to prohibit the practice for those; products. If such problems arise substantially in other domains, we; stand ready to extend this provision to those domains in future versions; of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents.; States should not allow patents to restrict development and use of; software on general-purpose computers, but in those that do, we wish to; avoid the special danger that patents applied to a free program could; make it effectively proprietary. To prevent this, the GPL assures that; patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and; modification follow. TERMS AND CONDITIONS. 0. Definitions. ""This License"" refers to version 3 of the GNU General Public License. ""Copyright"" also means copyright-like laws that apply to other kinds of; works, such as semiconductor masks. ""The Program"" refers to any copyrightable work licensed under this; License. Each licensee is addressed as ""you"". ""Licensees"" and; ""recipients"" may be individuals or organizations. To ""modify"" a",MatchSource.DOCS,LICENSE.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/LICENSE.md
Performance,perform,performing," of an executable work include anything, other; than the work as a whole, that (a) is included in the normal form of; packaging a Major Component, but which is not part of that Major; Component, and (b) serves only to enable use of the work with that; Major Component, or to implement a Standard Interface for which an; implementation is available to the public in source code form. A; ""Major Component"", in this context, means a major essential component; (kernel, window system, and so on) of the specific operating system; (if any) on which the executable work runs, or a compiler used to; produce the work, or an object code interpreter used to run it. The ""Corresponding Source"" for a work in object code form means all; the source code needed to generate, install, and (for an executable; work) run the object code and to modify the work, including scripts to; control those activities. However, it does not include the work's; System Libraries, or general-purpose tools or generally available free; programs which are used unmodified in performing those activities but; which are not part of the work. For example, Corresponding Source; includes interface definition files associated with source files for; the work, and the source code for shared libraries and dynamically; linked subprograms that the work is specifically designed to require,; such as by intimate data communication or control flow between those; subprograms and other parts of the work. The Corresponding Source need not include anything that users; can regenerate automatically from other parts of the Corresponding; Source. The Corresponding Source for a work in source code form is that; same work. 2. Basic Permissions. All rights granted under this License are granted for the term of; copyright on the Program, and are irrevocable provided the stated; conditions are met. This License explicitly affirms your unlimited; permission to run the unmodified Program. The output from running a; covered work is covered by t",MatchSource.DOCS,LICENSE.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/LICENSE.md
Safety,avoid,avoid," versions be marked as; changed, so that their problems will not be attributed erroneously to; authors of previous versions. Some devices are designed to deny users access to install or run; modified versions of the software inside them, although the manufacturer; can do so. This is fundamentally incompatible with the aim of; protecting users' freedom to change the software. The systematic; pattern of such abuse occurs in the area of products for individuals to; use, which is precisely where it is most unacceptable. Therefore, we; have designed this version of the GPL to prohibit the practice for those; products. If such problems arise substantially in other domains, we; stand ready to extend this provision to those domains in future versions; of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents.; States should not allow patents to restrict development and use of; software on general-purpose computers, but in those that do, we wish to; avoid the special danger that patents applied to a free program could; make it effectively proprietary. To prevent this, the GPL assures that; patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and; modification follow. TERMS AND CONDITIONS. 0. Definitions. ""This License"" refers to version 3 of the GNU General Public License. ""Copyright"" also means copyright-like laws that apply to other kinds of; works, such as semiconductor masks. ""The Program"" refers to any copyrightable work licensed under this; License. Each licensee is addressed as ""you"". ""Licensees"" and; ""recipients"" may be individuals or organizations. To ""modify"" a work means to copy from or adapt all or part of the work; in a fashion requiring copyright permission, other than the making of an; exact copy. The resulting work is called a ""modified version"" of the; earlier work or a work ""based on"" the earlier work. A ""covered work"" means either t",MatchSource.DOCS,LICENSE.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/LICENSE.md
Security,access,access,"f you distribute copies of the software, or if; you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must pass on to the recipients the same; freedoms that you received. You must make sure that they, too, receive; or can get the source code. And you must show them these terms so they; know their rights. Developers that use the GNU GPL protect your rights with two steps:; (1) assert copyright on the software, and (2) offer you this License; giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains; that there is no warranty for this free software. For both users' and; authors' sake, the GPL requires that modified versions be marked as; changed, so that their problems will not be attributed erroneously to; authors of previous versions. Some devices are designed to deny users access to install or run; modified versions of the software inside them, although the manufacturer; can do so. This is fundamentally incompatible with the aim of; protecting users' freedom to change the software. The systematic; pattern of such abuse occurs in the area of products for individuals to; use, which is precisely where it is most unacceptable. Therefore, we; have designed this version of the GPL to prohibit the practice for those; products. If such problems arise substantially in other domains, we; stand ready to extend this provision to those domains in future versions; of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents.; States should not allow patents to restrict development and use of; software on general-purpose computers, but in those that do, we wish to; avoid the special danger that patents applied to a free program could; make it effectively proprietary. To prevent this, the GPL assures that; patents cannot be used to render the ",MatchSource.DOCS,LICENSE.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/LICENSE.md
Testability,assert,assert," Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; them if you wish), that you receive source code or can get it if you; want it, that you can change the software or use pieces of it in new; free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you; these rights or asking you to surrender the rights. Therefore, you have; certain responsibilities if you distribute copies of the software, or if; you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must pass on to the recipients the same; freedoms that you received. You must make sure that they, too, receive; or can get the source code. And you must show them these terms so they; know their rights. Developers that use the GNU GPL protect your rights with two steps:; (1) assert copyright on the software, and (2) offer you this License; giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains; that there is no warranty for this free software. For both users' and; authors' sake, the GPL requires that modified versions be marked as; changed, so that their problems will not be attributed erroneously to; authors of previous versions. Some devices are designed to deny users access to install or run; modified versions of the software inside them, although the manufacturer; can do so. This is fundamentally incompatible with the aim of; protecting users' freedom to change the software. The systematic; pattern of such abuse occurs in the area of products for individuals to; use, which is precisely where it is most unacceptable. Therefore, we; have designed this version of the GPL to prohibit the practice for those; products. If such problems arise substantially in other domains, we; stand ready to extend this pro",MatchSource.DOCS,LICENSE.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/LICENSE.md
Usability,clear,clearly,"urce code or can get it if you; want it, that you can change the software or use pieces of it in new; free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you; these rights or asking you to surrender the rights. Therefore, you have; certain responsibilities if you distribute copies of the software, or if; you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must pass on to the recipients the same; freedoms that you received. You must make sure that they, too, receive; or can get the source code. And you must show them these terms so they; know their rights. Developers that use the GNU GPL protect your rights with two steps:; (1) assert copyright on the software, and (2) offer you this License; giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains; that there is no warranty for this free software. For both users' and; authors' sake, the GPL requires that modified versions be marked as; changed, so that their problems will not be attributed erroneously to; authors of previous versions. Some devices are designed to deny users access to install or run; modified versions of the software inside them, although the manufacturer; can do so. This is fundamentally incompatible with the aim of; protecting users' freedom to change the software. The systematic; pattern of such abuse occurs in the area of products for individuals to; use, which is precisely where it is most unacceptable. Therefore, we; have designed this version of the GPL to prohibit the practice for those; products. If such problems arise substantially in other domains, we; stand ready to extend this provision to those domains in future versions; of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software pate",MatchSource.DOCS,LICENSE.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/LICENSE.md
Availability,down,downloads,"Nature Biotechnology, doi: 10.1038/nbt.3988 (2017)](https://www.nature.com/articles/nbt.3988). [Steinegger M and Soeding J. Clustering huge protein sequence sets in linear time. Nature Communications, doi: 10.1038/s41467-018-04964-5 (2018)](https://www.nature.com/articles/s41467-018-04964-5). [Mirdita M, Steinegger M and Soeding J. MMseqs2 desktop and local web server app for fast, interactive sequence searches. Bioinformatics, doi: 10.1093/bioinformatics/bty1057 (2019)](https://academic.oup.com/bioinformatics/article/35/16/2856/5280135). [Mirdita M, Steinegger M, Breitwieser F, Soding J, Levy Karin E: Fast and sensitive taxonomic assignment to metagenomic contigs. Bioinformatics, doi: 10.1093/bioinformatics/btab184 (2021)](https://doi.org/10.1093/bioinformatics/btab184). [![BioConda Install](https://img.shields.io/conda/dn/bioconda/mmseqs2.svg?style=flag&label=BioConda%20install)](https://anaconda.org/bioconda/mmseqs2) [![Github All Releases](https://img.shields.io/github/downloads/soedinglab/mmseqs2/total.svg)](https://github.com/soedinglab/mmseqs2/releases/latest) [![Biocontainer Pulls](https://img.shields.io/endpoint?url=https%3A%2F%2Fmmseqs.com%2Fbiocontainer.php%3Fcontainer%3Dmmseqs2)](https://biocontainers.pro/#/tools/mmseqs2) [![Build Status](https://dev.azure.com/themartinsteinegger/mmseqs2/_apis/build/status/soedinglab.MMseqs2?branchName=master)](https://dev.azure.com/themartinsteinegger/mmseqs2/_build/latest?definitionId=2&branchName=master) <a href=""https://chat.mmseqs.com/""><img src=""https://chat.mmseqs.com/api/v1/shield.svg?type=online&name=chat&icon=false"" /></a>. <p align=""center""><img src=""https://raw.githubusercontent.com/soedinglab/mmseqs2/master/.github/mmseqs2_logo.png"" height=""256"" /></p>. ## Documentation; The MMseqs2 user guide is available in our [GitHub Wiki](https://github.com/soedinglab/mmseqs2/wiki) or as a [PDF file](https://mmseqs.com/latest/userguide.pdf) (Thanks to [pandoc](https://github.com/jgm/pandoc)!). The wiki also contains [tut",MatchSource.DOCS,README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/README.md
Deployability,release,releases,"es/nbt.3988). [Steinegger M and Soeding J. Clustering huge protein sequence sets in linear time. Nature Communications, doi: 10.1038/s41467-018-04964-5 (2018)](https://www.nature.com/articles/s41467-018-04964-5). [Mirdita M, Steinegger M and Soeding J. MMseqs2 desktop and local web server app for fast, interactive sequence searches. Bioinformatics, doi: 10.1093/bioinformatics/bty1057 (2019)](https://academic.oup.com/bioinformatics/article/35/16/2856/5280135). [Mirdita M, Steinegger M, Breitwieser F, Soding J, Levy Karin E: Fast and sensitive taxonomic assignment to metagenomic contigs. Bioinformatics, doi: 10.1093/bioinformatics/btab184 (2021)](https://doi.org/10.1093/bioinformatics/btab184). [![BioConda Install](https://img.shields.io/conda/dn/bioconda/mmseqs2.svg?style=flag&label=BioConda%20install)](https://anaconda.org/bioconda/mmseqs2) [![Github All Releases](https://img.shields.io/github/downloads/soedinglab/mmseqs2/total.svg)](https://github.com/soedinglab/mmseqs2/releases/latest) [![Biocontainer Pulls](https://img.shields.io/endpoint?url=https%3A%2F%2Fmmseqs.com%2Fbiocontainer.php%3Fcontainer%3Dmmseqs2)](https://biocontainers.pro/#/tools/mmseqs2) [![Build Status](https://dev.azure.com/themartinsteinegger/mmseqs2/_apis/build/status/soedinglab.MMseqs2?branchName=master)](https://dev.azure.com/themartinsteinegger/mmseqs2/_build/latest?definitionId=2&branchName=master) <a href=""https://chat.mmseqs.com/""><img src=""https://chat.mmseqs.com/api/v1/shield.svg?type=online&name=chat&icon=false"" /></a>. <p align=""center""><img src=""https://raw.githubusercontent.com/soedinglab/mmseqs2/master/.github/mmseqs2_logo.png"" height=""256"" /></p>. ## Documentation; The MMseqs2 user guide is available in our [GitHub Wiki](https://github.com/soedinglab/mmseqs2/wiki) or as a [PDF file](https://mmseqs.com/latest/userguide.pdf) (Thanks to [pandoc](https://github.com/jgm/pandoc)!). The wiki also contains [tutorials](https://github.com/soedinglab/MMseqs2/wiki/Tutorials) to learn how to use",MatchSource.DOCS,README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/README.md
Energy Efficiency,reduce,reduces,"orithm.; ; mmseqs easy-cluster examples/DB.fasta clusterRes tmp --min-seq-id 0.5 -c 0.8 --cov-mode 1; ; `easy-linclust` clusters the entries of a FASTA/FASTQ file. The runtime scales linearly with input size. This mode is recommended for huge datasets.; ; mmseqs easy-linclust examples/DB.fasta clusterRes tmp; ; Read more about the [clustering format](https://github.com/soedinglab/mmseqs2/wiki#clustering-format) in our user guide.; ; Please adjust the [clustering criteria](https://github.com/soedinglab/MMseqs2/wiki#clustering-criteria) and check if temporary directory provides enough free space. For disk space requirements, see the user guide. ### Search; ; The `easy-search` workflow searches directly with a FASTA/FASTQ files against either another FASTA/FASTQ file or an already existing MMseqs2 database.; ; mmseqs easy-search examples/QUERY.fasta examples/DB.fasta alnRes.m8 tmp; ; It is also possible to pre-compute the index for the target database. This reduces overhead when searching repeatedly against the same database. mmseqs createdb examples/DB.fasta targetDB; mmseqs createindex targetDB tmp; mmseqs easy-search examples/QUERY.fasta targetDB alnRes.m8 tmp; ; The `databases` workflow provides download and setup procedures for many public reference databases, such as the Uniref, NR, NT, PFAM and many more (see [Downloading databases](https://github.com/soedinglab/mmseqs2/wiki#downloading-databases)). For example, to download and search against a database containing the Swiss-Prot reference proteins run: . mmseqs databases UniProtKB/Swiss-Prot swissprot tmp; mmseqs easy-search examples/QUERY.fasta swissprot alnRes.m8 tmp; ; The speed and sensitivity of the `search` can be adjusted with `-s` parameter and should be adapted based on your use case (see [setting sensitivity -s parameter](https://github.com/soedinglab/mmseqs2/wiki#set-sensitivity--s-parameter)). A very fast search would use a sensitivity of `-s 1.0`, while a very sensitive search would use a sensitivity",MatchSource.DOCS,README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/README.md
Integrability,interface,interface,"`--num-iterations` parameter; * [Translated searches](https://github.com/soedinglab/MMseqs2/wiki#translated-sequence-searching) of nucleotides against proteins (blastx), proteins against nucleotides (tblastn) or nucleotide against nucleotide (tblastx); * [Iterative increasing sensitivity searches](https://github.com/soedinglab/MMseqs2/wiki#how-to-find-the-best-hit-the-fastest-way) to find only the best hits faster; * [Taxonomic assignment](https://github.com/soedinglab/MMseqs2/wiki#taxonomy-assignment-using-mmseqs-taxonomy) using 2bLCA or LCA; * Fast ungapped alignment searches to find [very similar sequence matches](https://github.com/soedinglab/MMseqs2/wiki#mapping-very-similar-sequences-using-mmseqs-map); * Very fast and sensitive searches against [profile databases such as the PFAM](https://github.com/soedinglab/MMseqs2/wiki#how-to-create-a-target-profile-database-from-pfam); * [Reciprocal best hits search](https://github.com/soedinglab/MMseqs2/wiki#reciprocal-best-hit-using-mmseqs-rbh); * [Web search API and user interface](https://github.com/soedinglab/MMseqs2-App). Many modes can also be combined. You can, for example, do a translated nucleotide against protein profile search. ### Memory requirements; MMseqs2 minimum memory requirements for `cluster` or `linclust` is 1 byte per sequence residue, `search` needs 1 byte per target residue. Sequence databases can be compressed using the `--compress` flag, DNA sequences can be reduced by a factor of `~3.5` and proteins by `~1.7`.; ; MMseqs2 checks the available system memory and automatically divides the target database in parts that fit into memory. Splitting the database will increase the runtime slightly. It is possible to control the memory usage using `--split-memory-limit`. ### How to run MMseqs2 on multiple servers using MPI; MMseqs2 can run on multiple cores and servers using OpenMP and Message Passing Interface (MPI).; MPI assigns database splits to each compute node, which are then computed with multiple",MatchSource.DOCS,README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/README.md
Modifiability,adapt,adapted,"inst either another FASTA/FASTQ file or an already existing MMseqs2 database.; ; mmseqs easy-search examples/QUERY.fasta examples/DB.fasta alnRes.m8 tmp; ; It is also possible to pre-compute the index for the target database. This reduces overhead when searching repeatedly against the same database. mmseqs createdb examples/DB.fasta targetDB; mmseqs createindex targetDB tmp; mmseqs easy-search examples/QUERY.fasta targetDB alnRes.m8 tmp; ; The `databases` workflow provides download and setup procedures for many public reference databases, such as the Uniref, NR, NT, PFAM and many more (see [Downloading databases](https://github.com/soedinglab/mmseqs2/wiki#downloading-databases)). For example, to download and search against a database containing the Swiss-Prot reference proteins run: . mmseqs databases UniProtKB/Swiss-Prot swissprot tmp; mmseqs easy-search examples/QUERY.fasta swissprot alnRes.m8 tmp; ; The speed and sensitivity of the `search` can be adjusted with `-s` parameter and should be adapted based on your use case (see [setting sensitivity -s parameter](https://github.com/soedinglab/mmseqs2/wiki#set-sensitivity--s-parameter)). A very fast search would use a sensitivity of `-s 1.0`, while a very sensitive search would use a sensitivity of up to `-s 7.0`. A detailed guide how to speed up searches is [here](https://github.com/soedinglab/MMseqs2/wiki#how-to-control-the-speed-of-the-search). The output can be customized with the `--format-output` option e.g. `--format-output ""query,target,qaln,taln""` returns the query and target accession and the pairwise alignments in tab separated format. You can choose many different [output columns](https://github.com/soedinglab/mmseqs2/wiki#custom-alignment-format-with-convertalis). :exclamation: `easy-search` in default computes the sequence identity by dividing the number of identical residues by the alignment length (`numIdentical/alnLen`). However, `search` [estimates](https://github.com/soedinglab/MMseqs2/wiki#how-does",MatchSource.DOCS,README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/README.md
Performance,scalab,scalability,"# MMseqs2: ultra fast and sensitive sequence search and clustering suite; MMseqs2 (Many-against-Many sequence searching) is a software suite to search and cluster huge protein and nucleotide sequence sets. MMseqs2 is open source GPL-licensed software implemented in C++ for Linux, MacOS, and (as beta version, via cygwin) Windows. The software is designed to run on multiple cores and servers and exhibits very good scalability. MMseqs2 can run 10000 times faster than BLAST. At 100 times its speed it achieves almost the same sensitivity. It can perform profile searches with the same sensitivity as PSI-BLAST at over 400 times its speed. ## Publications. [Steinegger M and Soeding J. MMseqs2 enables sensitive protein sequence searching for the analysis of massive data sets. Nature Biotechnology, doi: 10.1038/nbt.3988 (2017)](https://www.nature.com/articles/nbt.3988). [Steinegger M and Soeding J. Clustering huge protein sequence sets in linear time. Nature Communications, doi: 10.1038/s41467-018-04964-5 (2018)](https://www.nature.com/articles/s41467-018-04964-5). [Mirdita M, Steinegger M and Soeding J. MMseqs2 desktop and local web server app for fast, interactive sequence searches. Bioinformatics, doi: 10.1093/bioinformatics/bty1057 (2019)](https://academic.oup.com/bioinformatics/article/35/16/2856/5280135). [Mirdita M, Steinegger M, Breitwieser F, Soding J, Levy Karin E: Fast and sensitive taxonomic assignment to metagenomic contigs. Bioinformatics, doi: 10.1093/bioinformatics/btab184 (2021)](https://doi.org/10.1093/bioinformatics/btab184). [![BioConda Install](https://img.shields.io/conda/dn/bioconda/mmseqs2.svg?style=flag&label=BioConda%20install)](https://anaconda.org/bioconda/mmseqs2) [![Github All Releases](https://img.shields.io/github/downloads/soedinglab/mmseqs2/total.svg)](https://github.com/soedinglab/mmseqs2/releases/latest) [![Biocontainer Pulls](https://img.shields.io/endpoint?url=https%3A%2F%2Fmmseqs.com%2Fbiocontainer.php%3Fcontainer%3Dmmseqs2)](https://bioc",MatchSource.DOCS,README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/README.md
Security,access,accession,"the Uniref, NR, NT, PFAM and many more (see [Downloading databases](https://github.com/soedinglab/mmseqs2/wiki#downloading-databases)). For example, to download and search against a database containing the Swiss-Prot reference proteins run: . mmseqs databases UniProtKB/Swiss-Prot swissprot tmp; mmseqs easy-search examples/QUERY.fasta swissprot alnRes.m8 tmp; ; The speed and sensitivity of the `search` can be adjusted with `-s` parameter and should be adapted based on your use case (see [setting sensitivity -s parameter](https://github.com/soedinglab/mmseqs2/wiki#set-sensitivity--s-parameter)). A very fast search would use a sensitivity of `-s 1.0`, while a very sensitive search would use a sensitivity of up to `-s 7.0`. A detailed guide how to speed up searches is [here](https://github.com/soedinglab/MMseqs2/wiki#how-to-control-the-speed-of-the-search). The output can be customized with the `--format-output` option e.g. `--format-output ""query,target,qaln,taln""` returns the query and target accession and the pairwise alignments in tab separated format. You can choose many different [output columns](https://github.com/soedinglab/mmseqs2/wiki#custom-alignment-format-with-convertalis). :exclamation: `easy-search` in default computes the sequence identity by dividing the number of identical residues by the alignment length (`numIdentical/alnLen`). However, `search` [estimates](https://github.com/soedinglab/MMseqs2/wiki#how-does-mmseqs2-compute-the-sequence-identity) the identity in default. To output real sequence identity use `--alignment-mode 3` or `-a`. ### Taxonomy; The `easy-taxonomy` workflow can be used to assign sequences taxonomical labels. It performs a search against a sequence database with taxonomy information (seqTaxDb), chooses the most representative sets of aligned target sequences according to different strategies (according to `--lca-mode`) and computes the lowest common ancestor among those. mmseqs createdb examples/DB.fasta targetDB; mmseqs createtax",MatchSource.DOCS,README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/README.md
Usability,guid,guide,"[BioConda Install](https://img.shields.io/conda/dn/bioconda/mmseqs2.svg?style=flag&label=BioConda%20install)](https://anaconda.org/bioconda/mmseqs2) [![Github All Releases](https://img.shields.io/github/downloads/soedinglab/mmseqs2/total.svg)](https://github.com/soedinglab/mmseqs2/releases/latest) [![Biocontainer Pulls](https://img.shields.io/endpoint?url=https%3A%2F%2Fmmseqs.com%2Fbiocontainer.php%3Fcontainer%3Dmmseqs2)](https://biocontainers.pro/#/tools/mmseqs2) [![Build Status](https://dev.azure.com/themartinsteinegger/mmseqs2/_apis/build/status/soedinglab.MMseqs2?branchName=master)](https://dev.azure.com/themartinsteinegger/mmseqs2/_build/latest?definitionId=2&branchName=master) <a href=""https://chat.mmseqs.com/""><img src=""https://chat.mmseqs.com/api/v1/shield.svg?type=online&name=chat&icon=false"" /></a>. <p align=""center""><img src=""https://raw.githubusercontent.com/soedinglab/mmseqs2/master/.github/mmseqs2_logo.png"" height=""256"" /></p>. ## Documentation; The MMseqs2 user guide is available in our [GitHub Wiki](https://github.com/soedinglab/mmseqs2/wiki) or as a [PDF file](https://mmseqs.com/latest/userguide.pdf) (Thanks to [pandoc](https://github.com/jgm/pandoc)!). The wiki also contains [tutorials](https://github.com/soedinglab/MMseqs2/wiki/Tutorials) to learn how to use MMseqs2 with real data. For questions please open an issue on [GitHub](https://github.com/soedinglab/MMseqs2/issues) or ask in our [chat](https://chat.mmseqs.com). ; Keep posted about MMseqs2/Linclust updates by following Martin on [Twitter](https://twitter.com/thesteinegger). ## Installation; MMseqs2 can be used by [compiling from source](https://github.com/soedinglab/MMseqs2/wiki#installation), downloading a statically compiled binary, using [Homebrew](https://github.com/Homebrew/brew), [conda](https://github.com/conda/conda) or [Docker](https://github.com/moby/moby).; ; # install by brew; brew install mmseqs2; # install via conda; conda install -c conda-forge -c bioconda mmseqs2; # install d",MatchSource.DOCS,README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/README.md
Testability,test,test,"NibbleAndAHalf; ==============. ""Nibble And A Half"" is an ANSI C library that provides fast base64 encoding and decoding, all in a single header file. Wed Apr 17 6:13p; - All test related functions moved to testbase64.h. To use, only need #include ""base64.h"":; https://github.com/superwills/NibbleAndAHalf/blob/master/NibbleAndAHalf/base64.h; ",MatchSource.DOCS,lib/base64/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/base64/README.md
Availability,avail,available,"ll as an extensive experimental performance evaluation.; Here's the abstract:. > We present a sorting algorithm that works in-place, executes in parallel, is; > cache-efficient, avoids branch-mispredictions, and performs work O(n log n) for; > arbitrary inputs with high probability. The main algorithmic contributions are; > new ways to make distribution-based algorithms in-place: On the practical side,; > by using coarse-grained block-based permutations, and on the theoretical side,; > we show how to eliminate the recursion stack. Extensive experiments show that; > our algorithm IPS⁴o scales well on a variety of multi-core machines. We; > outperform our closest in-place competitor by a factor of up to 3. Even as; > a sequential algorithm, we are up to 1.5 times faster than the closest; > sequential competitor, BlockQuicksort. ## Usage. ```C++; #include ""ips4o.hpp"". // sort sequentially; ips4o::sort(begin, end[, comparator]). // sort in parallel (uses OpenMP if available, std::thread otherwise); ips4o::parallel::sort(begin, end[, comparator]); ```. Make sure to compile with C++14 support. Currently, the code does not compile on Windows. For the parallel algorithm, you need to enable either OpenMP (`-fopenmp`) or C++ threads (e.g., `-pthread`).; You also need a CPU that supports 16-byte compare-and-exchange instructions.; If you get undefined references to `__atomic_fetch_add_16`, either set your CPU correctly (e.g., `-march=native`),; enable the instructions explicitly (`-mcx16`), or try linking against GCC's libatomic (`-latomic`). ## Licensing. IPS⁴o is free software provided under the BSD 2-Clause License described in the [LICENSE file](LICENSE). If you use IPS⁴o in an academic setting please cite the [eponymous paper](https://arxiv.org/abs/1705.02257) using the BibTeX entry. ```bibtex ; @InProceedings{axtmann2017,; author =	{Michael Axtmann and; Sascha Witt and; Daniel Ferizovic and; Peter Sanders},; title =	{{In-Place Parallel Super Scalar Samplesort (IPSSSSo)}},",MatchSource.DOCS,lib/ips4o/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/ips4o/README.md
Energy Efficiency,efficient,efficient,"# In-place Parallel Super Scalar Samplesort (IPS⁴o). This is the implementation of the algorithm presented in the [eponymous paper](https://arxiv.org/abs/1705.02257),; which contains an in-depth description of its inner workings, as well as an extensive experimental performance evaluation.; Here's the abstract:. > We present a sorting algorithm that works in-place, executes in parallel, is; > cache-efficient, avoids branch-mispredictions, and performs work O(n log n) for; > arbitrary inputs with high probability. The main algorithmic contributions are; > new ways to make distribution-based algorithms in-place: On the practical side,; > by using coarse-grained block-based permutations, and on the theoretical side,; > we show how to eliminate the recursion stack. Extensive experiments show that; > our algorithm IPS⁴o scales well on a variety of multi-core machines. We; > outperform our closest in-place competitor by a factor of up to 3. Even as; > a sequential algorithm, we are up to 1.5 times faster than the closest; > sequential competitor, BlockQuicksort. ## Usage. ```C++; #include ""ips4o.hpp"". // sort sequentially; ips4o::sort(begin, end[, comparator]). // sort in parallel (uses OpenMP if available, std::thread otherwise); ips4o::parallel::sort(begin, end[, comparator]); ```. Make sure to compile with C++14 support. Currently, the code does not compile on Windows. For the parallel algorithm, you need to enable either OpenMP (`-fopenmp`) or C++ threads (e.g., `-pthread`).; You also need a CPU that supports 16-byte compare-and-exchange instructions.; If you get undefined references to `__atomic_fetch_add_16`, either set your CPU correctly (e.g., `-march=native`),; enable the instructions explicitly (`-mcx16`), or try linking against GCC's libatomic (`-latomic`). ## Licensing. IPS⁴o is free software provided under the BSD 2-Clause License described in the [LICENSE file](LICENSE). If you use IPS⁴o in an academic setting please cite the [eponymous paper](https://arxiv.o",MatchSource.DOCS,lib/ips4o/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/ips4o/README.md
Performance,perform,performance,"# In-place Parallel Super Scalar Samplesort (IPS⁴o). This is the implementation of the algorithm presented in the [eponymous paper](https://arxiv.org/abs/1705.02257),; which contains an in-depth description of its inner workings, as well as an extensive experimental performance evaluation.; Here's the abstract:. > We present a sorting algorithm that works in-place, executes in parallel, is; > cache-efficient, avoids branch-mispredictions, and performs work O(n log n) for; > arbitrary inputs with high probability. The main algorithmic contributions are; > new ways to make distribution-based algorithms in-place: On the practical side,; > by using coarse-grained block-based permutations, and on the theoretical side,; > we show how to eliminate the recursion stack. Extensive experiments show that; > our algorithm IPS⁴o scales well on a variety of multi-core machines. We; > outperform our closest in-place competitor by a factor of up to 3. Even as; > a sequential algorithm, we are up to 1.5 times faster than the closest; > sequential competitor, BlockQuicksort. ## Usage. ```C++; #include ""ips4o.hpp"". // sort sequentially; ips4o::sort(begin, end[, comparator]). // sort in parallel (uses OpenMP if available, std::thread otherwise); ips4o::parallel::sort(begin, end[, comparator]); ```. Make sure to compile with C++14 support. Currently, the code does not compile on Windows. For the parallel algorithm, you need to enable either OpenMP (`-fopenmp`) or C++ threads (e.g., `-pthread`).; You also need a CPU that supports 16-byte compare-and-exchange instructions.; If you get undefined references to `__atomic_fetch_add_16`, either set your CPU correctly (e.g., `-march=native`),; enable the instructions explicitly (`-mcx16`), or try linking against GCC's libatomic (`-latomic`). ## Licensing. IPS⁴o is free software provided under the BSD 2-Clause License described in the [LICENSE file](LICENSE). If you use IPS⁴o in an academic setting please cite the [eponymous paper](https://arxiv.o",MatchSource.DOCS,lib/ips4o/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/ips4o/README.md
Safety,avoid,avoids,"# In-place Parallel Super Scalar Samplesort (IPS⁴o). This is the implementation of the algorithm presented in the [eponymous paper](https://arxiv.org/abs/1705.02257),; which contains an in-depth description of its inner workings, as well as an extensive experimental performance evaluation.; Here's the abstract:. > We present a sorting algorithm that works in-place, executes in parallel, is; > cache-efficient, avoids branch-mispredictions, and performs work O(n log n) for; > arbitrary inputs with high probability. The main algorithmic contributions are; > new ways to make distribution-based algorithms in-place: On the practical side,; > by using coarse-grained block-based permutations, and on the theoretical side,; > we show how to eliminate the recursion stack. Extensive experiments show that; > our algorithm IPS⁴o scales well on a variety of multi-core machines. We; > outperform our closest in-place competitor by a factor of up to 3. Even as; > a sequential algorithm, we are up to 1.5 times faster than the closest; > sequential competitor, BlockQuicksort. ## Usage. ```C++; #include ""ips4o.hpp"". // sort sequentially; ips4o::sort(begin, end[, comparator]). // sort in parallel (uses OpenMP if available, std::thread otherwise); ips4o::parallel::sort(begin, end[, comparator]); ```. Make sure to compile with C++14 support. Currently, the code does not compile on Windows. For the parallel algorithm, you need to enable either OpenMP (`-fopenmp`) or C++ threads (e.g., `-pthread`).; You also need a CPU that supports 16-byte compare-and-exchange instructions.; If you get undefined references to `__atomic_fetch_add_16`, either set your CPU correctly (e.g., `-march=native`),; enable the instructions explicitly (`-mcx16`), or try linking against GCC's libatomic (`-latomic`). ## Licensing. IPS⁴o is free software provided under the BSD 2-Clause License described in the [LICENSE file](LICENSE). If you use IPS⁴o in an academic setting please cite the [eponymous paper](https://arxiv.o",MatchSource.DOCS,lib/ips4o/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/ips4o/README.md
Testability,log,log,"# In-place Parallel Super Scalar Samplesort (IPS⁴o). This is the implementation of the algorithm presented in the [eponymous paper](https://arxiv.org/abs/1705.02257),; which contains an in-depth description of its inner workings, as well as an extensive experimental performance evaluation.; Here's the abstract:. > We present a sorting algorithm that works in-place, executes in parallel, is; > cache-efficient, avoids branch-mispredictions, and performs work O(n log n) for; > arbitrary inputs with high probability. The main algorithmic contributions are; > new ways to make distribution-based algorithms in-place: On the practical side,; > by using coarse-grained block-based permutations, and on the theoretical side,; > we show how to eliminate the recursion stack. Extensive experiments show that; > our algorithm IPS⁴o scales well on a variety of multi-core machines. We; > outperform our closest in-place competitor by a factor of up to 3. Even as; > a sequential algorithm, we are up to 1.5 times faster than the closest; > sequential competitor, BlockQuicksort. ## Usage. ```C++; #include ""ips4o.hpp"". // sort sequentially; ips4o::sort(begin, end[, comparator]). // sort in parallel (uses OpenMP if available, std::thread otherwise); ips4o::parallel::sort(begin, end[, comparator]); ```. Make sure to compile with C++14 support. Currently, the code does not compile on Windows. For the parallel algorithm, you need to enable either OpenMP (`-fopenmp`) or C++ threads (e.g., `-pthread`).; You also need a CPU that supports 16-byte compare-and-exchange instructions.; If you get undefined references to `__atomic_fetch_add_16`, either set your CPU correctly (e.g., `-march=native`),; enable the instructions explicitly (`-mcx16`), or try linking against GCC's libatomic (`-latomic`). ## Licensing. IPS⁴o is free software provided under the BSD 2-Clause License described in the [LICENSE file](LICENSE). If you use IPS⁴o in an academic setting please cite the [eponymous paper](https://arxiv.o",MatchSource.DOCS,lib/ips4o/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/ips4o/README.md
Availability,avail,available," * [ksw2_extz2_sse.c](ksw2_extz2_sse.c): global and extension with SSE intrinsics; Suzuki's; * [ksw2_extd.c](ksw2_extd.c): global and extension alignment, dual gap cost; Green's formulation; * [ksw2_extd2_sse.c](ksw2_extd2_sse.c): global and extension, dual gap cost, with SSE intrinsics; Suzuki's. Users are encouraged to copy the header file `ksw2.h` and relevant; `ksw2_*.c` file to their own source code trees. On x86 CPUs with SSE2; intrinsics, `ksw2_extz2_sse.c` is recommended in general. It supports global; alignment, alignment extension with Z-drop, score-only alignment, global-only; alignment and right-aligned CIGARs. `ksw2_gg*.c` are mostly for demonstration; and comparison purposes. They are annotated with more comments and easier to; understand than `ksw2_ext*.c`. Header file [ksw2.h](ksw2.h) contains brief; documentations. TeX file [ksw2.tex](tex/ksw2.tex) gives brief derivation. To compile the test program `ksw-test`, just type `make`. It takes the; advantage of SSE4.1 when available. To compile with SSE2 only, use `make; sse2=1` instead. If you have installed [parasail][para], use `make; parasail=prefix`, where `prefix` points to the parasail install directory (e.g.; `/usr/local`). The following shows a complete example about how to use the library.; ```c; #include <string.h>; #include <stdio.h>; #include ""ksw2.h"". void align(const char *tseq, const char *qseq, int sc_mch, int sc_mis, int gapo, int gape); {; 	int i, a = sc_mch, b = sc_mis < 0? sc_mis : -sc_mis; // a>0 and b<0; 	int8_t mat[25] = { a,b,b,b,0, b,a,b,b,0, b,b,a,b,0, b,b,b,a,0, 0,0,0,0,0 };; 	int tl = strlen(tseq), ql = strlen(qseq);; 	uint8_t *ts, *qs, c[256];; 	ksw_extz_t ez;. 	memset(&ez, 0, sizeof(ksw_extz_t));; 	memset(c, 4, 256);; 	c['A'] = c['a'] = 0; c['C'] = c['c'] = 1;; 	c['G'] = c['g'] = 2; c['T'] = c['t'] = 3; // build the encoding table; 	ts = (uint8_t*)malloc(tl);; 	qs = (uint8_t*)malloc(ql);; 	for (i = 0; i < tl; ++i) ts[i] = c[(uint8_t)tseq[i]]; // encode to 0/1/2/3; 	for (i = 0",MatchSource.DOCS,lib/ksw2/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/ksw2/README.md
Deployability,install,installed,"l and extension alignment, dual gap cost; Green's formulation; * [ksw2_extd2_sse.c](ksw2_extd2_sse.c): global and extension, dual gap cost, with SSE intrinsics; Suzuki's. Users are encouraged to copy the header file `ksw2.h` and relevant; `ksw2_*.c` file to their own source code trees. On x86 CPUs with SSE2; intrinsics, `ksw2_extz2_sse.c` is recommended in general. It supports global; alignment, alignment extension with Z-drop, score-only alignment, global-only; alignment and right-aligned CIGARs. `ksw2_gg*.c` are mostly for demonstration; and comparison purposes. They are annotated with more comments and easier to; understand than `ksw2_ext*.c`. Header file [ksw2.h](ksw2.h) contains brief; documentations. TeX file [ksw2.tex](tex/ksw2.tex) gives brief derivation. To compile the test program `ksw-test`, just type `make`. It takes the; advantage of SSE4.1 when available. To compile with SSE2 only, use `make; sse2=1` instead. If you have installed [parasail][para], use `make; parasail=prefix`, where `prefix` points to the parasail install directory (e.g.; `/usr/local`). The following shows a complete example about how to use the library.; ```c; #include <string.h>; #include <stdio.h>; #include ""ksw2.h"". void align(const char *tseq, const char *qseq, int sc_mch, int sc_mis, int gapo, int gape); {; 	int i, a = sc_mch, b = sc_mis < 0? sc_mis : -sc_mis; // a>0 and b<0; 	int8_t mat[25] = { a,b,b,b,0, b,a,b,b,0, b,b,a,b,0, b,b,b,a,0, 0,0,0,0,0 };; 	int tl = strlen(tseq), ql = strlen(qseq);; 	uint8_t *ts, *qs, c[256];; 	ksw_extz_t ez;. 	memset(&ez, 0, sizeof(ksw_extz_t));; 	memset(c, 4, 256);; 	c['A'] = c['a'] = 0; c['C'] = c['c'] = 1;; 	c['G'] = c['g'] = 2; c['T'] = c['t'] = 3; // build the encoding table; 	ts = (uint8_t*)malloc(tl);; 	qs = (uint8_t*)malloc(ql);; 	for (i = 0; i < tl; ++i) ts[i] = c[(uint8_t)tseq[i]]; // encode to 0/1/2/3; 	for (i = 0; i < ql; ++i) qs[i] = c[(uint8_t)qseq[i]];; 	ksw_extz(0, ql, qs, tl, ts, 5, mat, gapo, gape, -1, -1, 0, &ez);; 	for (i = 0; i <",MatchSource.DOCS,lib/ksw2/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/ksw2/README.md
Energy Efficiency,reduce,reduces,"parasail|; | |-t ps\_nw\_diag\_32 |3.0 |N |N |SSE4|parasail|; | |-t ps\_nw\_scan\_32 |3.0 |N |N |SSE4|parasail|; | |-t extz2\_sse -sg |0.96 |N |N |SSE2|ksw2 |; | |-t extz2\_sse -sg |0.84 |N |N |SSE4|ksw2 |; | |-t extz2\_sse -s |3.0 |N |Y |SSE2|ksw2 |; | |-t extz2\_sse -s |2.7 |N |Y |SSE4|ksw2 |; |16.5k |-t gg -s |0.84 |N |N |N |ksw2 |; | |-t gg |1.6 |Y |N |N |ksw2 |; | |-t gg2 |3.3 |Y |N |N |ksw2 |; | |-t extz |2.0 |Y |Y |N |ksw2 |; | |-t extz2\_sse |0.40 |Y |Y |SSE4|ksw2 |; | |-t extz2\_sse -g |0.18 |Y |N |SSE4|ksw2 |. The standard DP formulation is about twice as fast as Suzuki's diagonal; formulation (`-tgg` vs `-tgg2`), but SSE-based diagonal formulation; is several times faster than the standard DP. If we only want to compute one; global alignment score, we can use 16-way parallelization in the entire inner; loop. For extension alignment, though, we need to keep an array of 32-bit; scores and have to use 4-way parallelization for part of the inner loop. This; significantly reduces performance (`-sg` vs `-s`). KSW2 is faster than; parasail partly because the former uses one score for all matches and another; score for all mismatches. For diagonal formulations, vectorization is more; complex given a generic scoring matrix. It is possible to further accelerate global alignment with dynamic banding as; is implemented in [edlib][edlib]. However, it is not as effective for extension; alignment. Another idea is [adaptive banding][adap-band], which might be worth; trying at some point. ## Alternative Libraries. |Library |CIGAR|Intra-seq|Affine-gap|Local |Global |Glocal |Extension|; |:---------------|:---:|:-------:|:--------:|:-------:|:-------:|:-------:|:-------:|; |[edlib][edlib] |Yes |Yes |No |Very fast|Very fast|Very fast|N/A |; |[KSW][klib] |Yes |Yes |Yes |Fast |Slow |N/A |Slow |; |KSW2 |Yes |Yes |Yes/dual |N/A |Fast |N/A |Fast |; |[libgaba][gaba] |Yes |Yes |Yes |N/A? |N/A? |N/A? |Fast |; |[libssa][ssa] |No |No? |Yes |Fast |Fast |N/A |N/A |; |[Opal][opal] |No |No ",MatchSource.DOCS,lib/ksw2/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/ksw2/README.md
Modifiability,adapt,adaptive,"Y |Y |SSE4|ksw2 |; | |-t extz2\_sse -g |0.18 |Y |N |SSE4|ksw2 |. The standard DP formulation is about twice as fast as Suzuki's diagonal; formulation (`-tgg` vs `-tgg2`), but SSE-based diagonal formulation; is several times faster than the standard DP. If we only want to compute one; global alignment score, we can use 16-way parallelization in the entire inner; loop. For extension alignment, though, we need to keep an array of 32-bit; scores and have to use 4-way parallelization for part of the inner loop. This; significantly reduces performance (`-sg` vs `-s`). KSW2 is faster than; parasail partly because the former uses one score for all matches and another; score for all mismatches. For diagonal formulations, vectorization is more; complex given a generic scoring matrix. It is possible to further accelerate global alignment with dynamic banding as; is implemented in [edlib][edlib]. However, it is not as effective for extension; alignment. Another idea is [adaptive banding][adap-band], which might be worth; trying at some point. ## Alternative Libraries. |Library |CIGAR|Intra-seq|Affine-gap|Local |Global |Glocal |Extension|; |:---------------|:---:|:-------:|:--------:|:-------:|:-------:|:-------:|:-------:|; |[edlib][edlib] |Yes |Yes |No |Very fast|Very fast|Very fast|N/A |; |[KSW][klib] |Yes |Yes |Yes |Fast |Slow |N/A |Slow |; |KSW2 |Yes |Yes |Yes/dual |N/A |Fast |N/A |Fast |; |[libgaba][gaba] |Yes |Yes |Yes |N/A? |N/A? |N/A? |Fast |; |[libssa][ssa] |No |No? |Yes |Fast |Fast |N/A |N/A |; |[Opal][opal] |No |No |Yes |Fast |Fast |Fast |N/A |; |[Parasail][para]|No |Yes |Yes |Fast |Fast |Fast |N/A |; |[SeqAn][seqan] |Yes |Yes |Yes |Slow |Slow |Slow |N/A |; |[SSW][ssw] |Yes |Yes |Yes |Fast |N/A |N/A |N/A |; |[SWIPE][swipe] |Yes |No |Yes |Fast |N/A? |N/A? |N/A |; |[SWPS3][swps3] |No |Yes |Yes |Fast |N/A? |N/A |N/A |. [hs]: https://github.com/ocxtal; [hs-eq]: https://github.com/ocxtal/diffbench; [edlib]: https://github.com/Martinsos/edlib; [klib]: https://github.com/att",MatchSource.DOCS,lib/ksw2/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/ksw2/README.md
Performance,perform,performance,"parasail|; | |-t ps\_nw\_diag\_32 |3.0 |N |N |SSE4|parasail|; | |-t ps\_nw\_scan\_32 |3.0 |N |N |SSE4|parasail|; | |-t extz2\_sse -sg |0.96 |N |N |SSE2|ksw2 |; | |-t extz2\_sse -sg |0.84 |N |N |SSE4|ksw2 |; | |-t extz2\_sse -s |3.0 |N |Y |SSE2|ksw2 |; | |-t extz2\_sse -s |2.7 |N |Y |SSE4|ksw2 |; |16.5k |-t gg -s |0.84 |N |N |N |ksw2 |; | |-t gg |1.6 |Y |N |N |ksw2 |; | |-t gg2 |3.3 |Y |N |N |ksw2 |; | |-t extz |2.0 |Y |Y |N |ksw2 |; | |-t extz2\_sse |0.40 |Y |Y |SSE4|ksw2 |; | |-t extz2\_sse -g |0.18 |Y |N |SSE4|ksw2 |. The standard DP formulation is about twice as fast as Suzuki's diagonal; formulation (`-tgg` vs `-tgg2`), but SSE-based diagonal formulation; is several times faster than the standard DP. If we only want to compute one; global alignment score, we can use 16-way parallelization in the entire inner; loop. For extension alignment, though, we need to keep an array of 32-bit; scores and have to use 4-way parallelization for part of the inner loop. This; significantly reduces performance (`-sg` vs `-s`). KSW2 is faster than; parasail partly because the former uses one score for all matches and another; score for all mismatches. For diagonal formulations, vectorization is more; complex given a generic scoring matrix. It is possible to further accelerate global alignment with dynamic banding as; is implemented in [edlib][edlib]. However, it is not as effective for extension; alignment. Another idea is [adaptive banding][adap-band], which might be worth; trying at some point. ## Alternative Libraries. |Library |CIGAR|Intra-seq|Affine-gap|Local |Global |Glocal |Extension|; |:---------------|:---:|:-------:|:--------:|:-------:|:-------:|:-------:|:-------:|; |[edlib][edlib] |Yes |Yes |No |Very fast|Very fast|Very fast|N/A |; |[KSW][klib] |Yes |Yes |Yes |Fast |Slow |N/A |Slow |; |KSW2 |Yes |Yes |Yes/dual |N/A |Fast |N/A |Fast |; |[libgaba][gaba] |Yes |Yes |Yes |N/A? |N/A? |N/A? |Fast |; |[libssa][ssa] |No |No? |Yes |Fast |Fast |N/A |N/A |; |[Opal][opal] |No |No ",MatchSource.DOCS,lib/ksw2/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/ksw2/README.md
Testability,test,test,".c](ksw2_extz.c): global and extension alignment; Green's formulation; * [ksw2_extz2_sse.c](ksw2_extz2_sse.c): global and extension with SSE intrinsics; Suzuki's; * [ksw2_extd.c](ksw2_extd.c): global and extension alignment, dual gap cost; Green's formulation; * [ksw2_extd2_sse.c](ksw2_extd2_sse.c): global and extension, dual gap cost, with SSE intrinsics; Suzuki's. Users are encouraged to copy the header file `ksw2.h` and relevant; `ksw2_*.c` file to their own source code trees. On x86 CPUs with SSE2; intrinsics, `ksw2_extz2_sse.c` is recommended in general. It supports global; alignment, alignment extension with Z-drop, score-only alignment, global-only; alignment and right-aligned CIGARs. `ksw2_gg*.c` are mostly for demonstration; and comparison purposes. They are annotated with more comments and easier to; understand than `ksw2_ext*.c`. Header file [ksw2.h](ksw2.h) contains brief; documentations. TeX file [ksw2.tex](tex/ksw2.tex) gives brief derivation. To compile the test program `ksw-test`, just type `make`. It takes the; advantage of SSE4.1 when available. To compile with SSE2 only, use `make; sse2=1` instead. If you have installed [parasail][para], use `make; parasail=prefix`, where `prefix` points to the parasail install directory (e.g.; `/usr/local`). The following shows a complete example about how to use the library.; ```c; #include <string.h>; #include <stdio.h>; #include ""ksw2.h"". void align(const char *tseq, const char *qseq, int sc_mch, int sc_mis, int gapo, int gape); {; 	int i, a = sc_mch, b = sc_mis < 0? sc_mis : -sc_mis; // a>0 and b<0; 	int8_t mat[25] = { a,b,b,b,0, b,a,b,b,0, b,b,a,b,0, b,b,b,a,0, 0,0,0,0,0 };; 	int tl = strlen(tseq), ql = strlen(qseq);; 	uint8_t *ts, *qs, c[256];; 	ksw_extz_t ez;. 	memset(&ez, 0, sizeof(ksw_extz_t));; 	memset(c, 4, 256);; 	c['A'] = c['a'] = 0; c['C'] = c['c'] = 1;; 	c['G'] = c['g'] = 2; c['T'] = c['t'] = 3; // build the encoding table; 	ts = (uint8_t*)malloc(tl);; 	qs = (uint8_t*)malloc(ql);; 	for (i = 0; i < ",MatchSource.DOCS,lib/ksw2/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/ksw2/README.md
Energy Efficiency,adapt,adapted,# microtar; A lightweight tar library written in ANSI C. This library was adapted from the original microtar (https://github.com/rxi/microtar) ; to be read-only and support fast seeking. ## License; This library is free software; you can redistribute it and/or modify it under; the terms of the MIT license. See [LICENSE](LICENSE) for details.; ,MatchSource.DOCS,lib/microtar/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/microtar/README.md
Modifiability,adapt,adapted,# microtar; A lightweight tar library written in ANSI C. This library was adapted from the original microtar (https://github.com/rxi/microtar) ; to be read-only and support fast seeking. ## License; This library is free software; you can redistribute it and/or modify it under; the terms of the MIT license. See [LICENSE](LICENSE) for details.; ,MatchSource.DOCS,lib/microtar/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/microtar/README.md
Availability,error,error,"the standard C math functions and runtime binding of variables. ## Features. - **ANSI C with no dependencies**.; - Single source file and header file.; - Simple and fast.; - Implements standard operators precedence.; - Exposes standard C math functions (sin, sqrt, ln, etc.).; - Can add custom functions and variables easily.; - Can bind variables at eval-time.; - Released under the zlib license - free for nearly any use.; - Easy to use and integrate with your code; - Thread-safe, provided that your *malloc* is. ## Building. TinyExpr is self-contained in two files: `tinyexpr.c` and `tinyexpr.h`. To use; TinyExpr, simply add those two files to your project. ## Short Example. Here is a minimal example to evaluate an expression at runtime. ```C; #include ""tinyexpr.h""; printf(""%f\n"", te_interp(""5*5"", 0)); /* Prints 25. */; ```. ## Usage. TinyExpr defines only four functions:. ```C; double te_interp(const char *expression, int *error);; te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error);; double te_eval(const te_expr *expr);; void te_free(te_expr *expr);; ```. ## te_interp; ```C; double te_interp(const char *expression, int *error);; ```. `te_interp()` takes an expression and immediately returns the result of it. If there; is a parse error, `te_interp()` returns NaN. If the `error` pointer argument is not 0, then `te_interp()` will set `*error` to the position; of the parse error on failure, and set `*error` to 0 on success. **example usage:**. ```C; int error;. double a = te_interp(""(5+5)"", 0); /* Returns 10. */; double b = te_interp(""(5+5)"", &error); /* Returns 10, error is set to 0. */; double c = te_interp(""(5+5"", &error); /* Returns NaN, error is set to 4. */; ```. ## te_compile, te_eval, te_free; ```C; te_expr *te_compile(const char *expression, const te_variable *lookup, int lookup_len, int *error);; double te_eval(const te_expr *n);; void te_free(te_expr *n);; ```. Give `te_compile()` an expression with unbound varia",MatchSource.DOCS,lib/tinyexpr/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/tinyexpr/README.md
Deployability,integrat,integrate,"](https://travis-ci.org/codeplea/tinyexpr.svg?branch=master)](https://travis-ci.org/codeplea/tinyexpr). <img alt=""TinyExpr logo"" src=""https://codeplea.com/public/content/tinyexpr_logo.png"" align=""right""/>. # TinyExpr. TinyExpr is a very small recursive descent parser and evaluation engine for; math expressions. It's handy when you want to add the ability to evaluation; math expressions at runtime without adding a bunch of cruft to you project. In addition to the standard math operators and precedence, TinyExpr also supports; the standard C math functions and runtime binding of variables. ## Features. - **ANSI C with no dependencies**.; - Single source file and header file.; - Simple and fast.; - Implements standard operators precedence.; - Exposes standard C math functions (sin, sqrt, ln, etc.).; - Can add custom functions and variables easily.; - Can bind variables at eval-time.; - Released under the zlib license - free for nearly any use.; - Easy to use and integrate with your code; - Thread-safe, provided that your *malloc* is. ## Building. TinyExpr is self-contained in two files: `tinyexpr.c` and `tinyexpr.h`. To use; TinyExpr, simply add those two files to your project. ## Short Example. Here is a minimal example to evaluate an expression at runtime. ```C; #include ""tinyexpr.h""; printf(""%f\n"", te_interp(""5*5"", 0)); /* Prints 25. */; ```. ## Usage. TinyExpr defines only four functions:. ```C; double te_interp(const char *expression, int *error);; te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error);; double te_eval(const te_expr *expr);; void te_free(te_expr *expr);; ```. ## te_interp; ```C; double te_interp(const char *expression, int *error);; ```. `te_interp()` takes an expression and immediately returns the result of it. If there; is a parse error, `te_interp()` returns NaN. If the `error` pointer argument is not 0, then `te_interp()` will set `*error` to the position; of the parse error on failure, and set `*e",MatchSource.DOCS,lib/tinyexpr/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/tinyexpr/README.md
Energy Efficiency,efficient,efficient,"s 5. */. x = 5; y = 12;; const double h2 = te_eval(expr); /* Returns 13. */. te_free(expr);; } else {; printf(""Parse error at %d\n"", err);; }. ```. ## Longer Example. Here is a complete example that will evaluate an expression passed in from the command; line. It also does error checking and binds the variables `x` and `y` to *3* and *4*, respectively. ```C; #include ""tinyexpr.h""; #include <stdio.h>. int main(int argc, char *argv[]); {; if (argc < 2) {; printf(""Usage: example2 \""expression\""\n"");; return 0;; }. const char *expression = argv[1];; printf(""Evaluating:\n\t%s\n"", expression);. /* This shows an example where the variables; * x and y are bound at eval-time. */; double x, y;; te_variable vars[] = {{""x"", &x}, {""y"", &y}};. /* This will compile the expression and check for errors. */; int err;; te_expr *n = te_compile(expression, vars, 2, &err);. if (n) {; /* The variables can be changed here, and eval can be called as many; * times as you like. This is fairly efficient because the parsing has; * already been done. */; x = 3; y = 4;; const double r = te_eval(n); printf(""Result:\n\t%f\n"", r);; te_free(n);; } else {; /* Show the user where the error is at. */; printf(""\t%*s^\nError near here"", err-1, """");; }. return 0;; }; ```. This produces the output:. $ example2 ""sqrt(x^2+y2)""; Evaluating:; sqrt(x^2+y2); ^; Error near here. $ example2 ""sqrt(x^2+y^2)""; Evaluating:; sqrt(x^2+y^2); Result:; 5.000000. ## Binding to Custom Functions. TinyExpr can also call to custom functions implemented in C. Here is a short example:. ```C; double my_sum(double a, double b) {; /* Example C function that adds two numbers together. */; return a + b;; }. te_variable vars[] = {; {""mysum"", my_sum, TE_FUNCTION2} /* TE_FUNCTION2 used because my_sum takes two arguments. */; };. te_expr *n = te_compile(""mysum(5, 6)"", vars, 1, 0);. ```. ## How it works. `te_compile()` uses a simple recursive descent parser to compile your; expression into a syntax tree. For example, the expression `""sin x +",MatchSource.DOCS,lib/tinyexpr/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/tinyexpr/README.md
Integrability,depend,dependencies,"[![Build Status](https://travis-ci.org/codeplea/tinyexpr.svg?branch=master)](https://travis-ci.org/codeplea/tinyexpr). <img alt=""TinyExpr logo"" src=""https://codeplea.com/public/content/tinyexpr_logo.png"" align=""right""/>. # TinyExpr. TinyExpr is a very small recursive descent parser and evaluation engine for; math expressions. It's handy when you want to add the ability to evaluation; math expressions at runtime without adding a bunch of cruft to you project. In addition to the standard math operators and precedence, TinyExpr also supports; the standard C math functions and runtime binding of variables. ## Features. - **ANSI C with no dependencies**.; - Single source file and header file.; - Simple and fast.; - Implements standard operators precedence.; - Exposes standard C math functions (sin, sqrt, ln, etc.).; - Can add custom functions and variables easily.; - Can bind variables at eval-time.; - Released under the zlib license - free for nearly any use.; - Easy to use and integrate with your code; - Thread-safe, provided that your *malloc* is. ## Building. TinyExpr is self-contained in two files: `tinyexpr.c` and `tinyexpr.h`. To use; TinyExpr, simply add those two files to your project. ## Short Example. Here is a minimal example to evaluate an expression at runtime. ```C; #include ""tinyexpr.h""; printf(""%f\n"", te_interp(""5*5"", 0)); /* Prints 25. */; ```. ## Usage. TinyExpr defines only four functions:. ```C; double te_interp(const char *expression, int *error);; te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error);; double te_eval(const te_expr *expr);; void te_free(te_expr *expr);; ```. ## te_interp; ```C; double te_interp(const char *expression, int *error);; ```. `te_interp()` takes an expression and immediately returns the result of it. If there; is a parse error, `te_interp()` returns NaN. If the `error` pointer argument is not 0, then `te_interp()` will set `*error` to the position; of the parse error on failur",MatchSource.DOCS,lib/tinyexpr/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/tinyexpr/README.md
Modifiability,variab,variables,"[![Build Status](https://travis-ci.org/codeplea/tinyexpr.svg?branch=master)](https://travis-ci.org/codeplea/tinyexpr). <img alt=""TinyExpr logo"" src=""https://codeplea.com/public/content/tinyexpr_logo.png"" align=""right""/>. # TinyExpr. TinyExpr is a very small recursive descent parser and evaluation engine for; math expressions. It's handy when you want to add the ability to evaluation; math expressions at runtime without adding a bunch of cruft to you project. In addition to the standard math operators and precedence, TinyExpr also supports; the standard C math functions and runtime binding of variables. ## Features. - **ANSI C with no dependencies**.; - Single source file and header file.; - Simple and fast.; - Implements standard operators precedence.; - Exposes standard C math functions (sin, sqrt, ln, etc.).; - Can add custom functions and variables easily.; - Can bind variables at eval-time.; - Released under the zlib license - free for nearly any use.; - Easy to use and integrate with your code; - Thread-safe, provided that your *malloc* is. ## Building. TinyExpr is self-contained in two files: `tinyexpr.c` and `tinyexpr.h`. To use; TinyExpr, simply add those two files to your project. ## Short Example. Here is a minimal example to evaluate an expression at runtime. ```C; #include ""tinyexpr.h""; printf(""%f\n"", te_interp(""5*5"", 0)); /* Prints 25. */; ```. ## Usage. TinyExpr defines only four functions:. ```C; double te_interp(const char *expression, int *error);; te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error);; double te_eval(const te_expr *expr);; void te_free(te_expr *expr);; ```. ## te_interp; ```C; double te_interp(const char *expression, int *error);; ```. `te_interp()` takes an expression and immediately returns the result of it. If there; is a parse error, `te_interp()` returns NaN. If the `error` pointer argument is not 0, then `te_interp()` will set `*error` to the position; of the parse error on failur",MatchSource.DOCS,lib/tinyexpr/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/tinyexpr/README.md
Performance,load,load,"sqrt(x^2+y2); ^; Error near here. $ example2 ""sqrt(x^2+y^2)""; Evaluating:; sqrt(x^2+y^2); Result:; 5.000000. ## Binding to Custom Functions. TinyExpr can also call to custom functions implemented in C. Here is a short example:. ```C; double my_sum(double a, double b) {; /* Example C function that adds two numbers together. */; return a + b;; }. te_variable vars[] = {; {""mysum"", my_sum, TE_FUNCTION2} /* TE_FUNCTION2 used because my_sum takes two arguments. */; };. te_expr *n = te_compile(""mysum(5, 6)"", vars, 1, 0);. ```. ## How it works. `te_compile()` uses a simple recursive descent parser to compile your; expression into a syntax tree. For example, the expression `""sin x + 1/4""`; parses as:. ![example syntax tree](doc/e1.png?raw=true). `te_compile()` also automatically prunes constant branches. In this example,; the compiled expression returned by `te_compile()` would become:. ![example syntax tree](doc/e2.png?raw=true). `te_eval()` will automatically load in any variables by their pointer, and then evaluate; and return the result of the expression. `te_free()` should always be called when you're done with the compiled expression. ## Speed. TinyExpr is pretty fast compared to C when the expression is short, when the; expression does hard calculations (e.g. exponentiation), and when some of the; work can be simplified by `te_compile()`. TinyExpr is slow compared to C when the; expression is long and involves only basic arithmetic. Here is some example performance numbers taken from the included; **benchmark.c** program:. | Expression | te_eval time | native C time | slowdown |; | :------------- |-------------:| -----:|----:|; | sqrt(a^1.5+a^2.5) | 15,641 ms | 14,478 ms | 8% slower |; | a+5 | 765 ms | 563 ms | 36% slower |; | a+(5*2) | 765 ms | 563 ms | 36% slower |; | (a+5)*2 | 1422 ms | 563 ms | 153% slower |; | (1/(a+1)+2/(a+2)+3/(a+3)) | 5,516 ms | 1,266 ms | 336% slower |. ## Grammar. TinyExpr parses the following grammar:. <list> = <expr> {"","" <expr>}; <expr> = ",MatchSource.DOCS,lib/tinyexpr/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/tinyexpr/README.md
Safety,safe,safe,"](https://travis-ci.org/codeplea/tinyexpr.svg?branch=master)](https://travis-ci.org/codeplea/tinyexpr). <img alt=""TinyExpr logo"" src=""https://codeplea.com/public/content/tinyexpr_logo.png"" align=""right""/>. # TinyExpr. TinyExpr is a very small recursive descent parser and evaluation engine for; math expressions. It's handy when you want to add the ability to evaluation; math expressions at runtime without adding a bunch of cruft to you project. In addition to the standard math operators and precedence, TinyExpr also supports; the standard C math functions and runtime binding of variables. ## Features. - **ANSI C with no dependencies**.; - Single source file and header file.; - Simple and fast.; - Implements standard operators precedence.; - Exposes standard C math functions (sin, sqrt, ln, etc.).; - Can add custom functions and variables easily.; - Can bind variables at eval-time.; - Released under the zlib license - free for nearly any use.; - Easy to use and integrate with your code; - Thread-safe, provided that your *malloc* is. ## Building. TinyExpr is self-contained in two files: `tinyexpr.c` and `tinyexpr.h`. To use; TinyExpr, simply add those two files to your project. ## Short Example. Here is a minimal example to evaluate an expression at runtime. ```C; #include ""tinyexpr.h""; printf(""%f\n"", te_interp(""5*5"", 0)); /* Prints 25. */; ```. ## Usage. TinyExpr defines only four functions:. ```C; double te_interp(const char *expression, int *error);; te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error);; double te_eval(const te_expr *expr);; void te_free(te_expr *expr);; ```. ## te_interp; ```C; double te_interp(const char *expression, int *error);; ```. `te_interp()` takes an expression and immediately returns the result of it. If there; is a parse error, `te_interp()` returns NaN. If the `error` pointer argument is not 0, then `te_interp()` will set `*error` to the position; of the parse error on failure, and set `*e",MatchSource.DOCS,lib/tinyexpr/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/tinyexpr/README.md
Testability,log,logo,"[![Build Status](https://travis-ci.org/codeplea/tinyexpr.svg?branch=master)](https://travis-ci.org/codeplea/tinyexpr). <img alt=""TinyExpr logo"" src=""https://codeplea.com/public/content/tinyexpr_logo.png"" align=""right""/>. # TinyExpr. TinyExpr is a very small recursive descent parser and evaluation engine for; math expressions. It's handy when you want to add the ability to evaluation; math expressions at runtime without adding a bunch of cruft to you project. In addition to the standard math operators and precedence, TinyExpr also supports; the standard C math functions and runtime binding of variables. ## Features. - **ANSI C with no dependencies**.; - Single source file and header file.; - Simple and fast.; - Implements standard operators precedence.; - Exposes standard C math functions (sin, sqrt, ln, etc.).; - Can add custom functions and variables easily.; - Can bind variables at eval-time.; - Released under the zlib license - free for nearly any use.; - Easy to use and integrate with your code; - Thread-safe, provided that your *malloc* is. ## Building. TinyExpr is self-contained in two files: `tinyexpr.c` and `tinyexpr.h`. To use; TinyExpr, simply add those two files to your project. ## Short Example. Here is a minimal example to evaluate an expression at runtime. ```C; #include ""tinyexpr.h""; printf(""%f\n"", te_interp(""5*5"", 0)); /* Prints 25. */; ```. ## Usage. TinyExpr defines only four functions:. ```C; double te_interp(const char *expression, int *error);; te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error);; double te_eval(const te_expr *expr);; void te_free(te_expr *expr);; ```. ## te_interp; ```C; double te_interp(const char *expression, int *error);; ```. `te_interp()` takes an expression and immediately returns the result of it. If there; is a parse error, `te_interp()` returns NaN. If the `error` pointer argument is not 0, then `te_interp()` will set `*error` to the position; of the parse error on failur",MatchSource.DOCS,lib/tinyexpr/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/tinyexpr/README.md
Usability,simpl,simply,"content/tinyexpr_logo.png"" align=""right""/>. # TinyExpr. TinyExpr is a very small recursive descent parser and evaluation engine for; math expressions. It's handy when you want to add the ability to evaluation; math expressions at runtime without adding a bunch of cruft to you project. In addition to the standard math operators and precedence, TinyExpr also supports; the standard C math functions and runtime binding of variables. ## Features. - **ANSI C with no dependencies**.; - Single source file and header file.; - Simple and fast.; - Implements standard operators precedence.; - Exposes standard C math functions (sin, sqrt, ln, etc.).; - Can add custom functions and variables easily.; - Can bind variables at eval-time.; - Released under the zlib license - free for nearly any use.; - Easy to use and integrate with your code; - Thread-safe, provided that your *malloc* is. ## Building. TinyExpr is self-contained in two files: `tinyexpr.c` and `tinyexpr.h`. To use; TinyExpr, simply add those two files to your project. ## Short Example. Here is a minimal example to evaluate an expression at runtime. ```C; #include ""tinyexpr.h""; printf(""%f\n"", te_interp(""5*5"", 0)); /* Prints 25. */; ```. ## Usage. TinyExpr defines only four functions:. ```C; double te_interp(const char *expression, int *error);; te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error);; double te_eval(const te_expr *expr);; void te_free(te_expr *expr);; ```. ## te_interp; ```C; double te_interp(const char *expression, int *error);; ```. `te_interp()` takes an expression and immediately returns the result of it. If there; is a parse error, `te_interp()` returns NaN. If the `error` pointer argument is not 0, then `te_interp()` will set `*error` to the position; of the parse error on failure, and set `*error` to 0 on success. **example usage:**. ```C; int error;. double a = te_interp(""(5+5)"", 0); /* Returns 10. */; double b = te_interp(""(5+5)"", &error); /* Return",MatchSource.DOCS,lib/tinyexpr/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/tinyexpr/README.md
Availability,toler,tolerated,# Code of Conduct. Facebook has adopted a Code of Conduct that we expect project participants to adhere to.; Please read the [full text](https://code.fb.com/codeofconduct/); so that you can understand what actions will and will not be tolerated.; ,MatchSource.DOCS,lib/zstd/CODE_OF_CONDUCT.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/CODE_OF_CONDUCT.md
Deployability,release,release,"# Contributing to Zstandard; We want to make contributing to this project as easy and transparent as; possible. ## Our Development Process; New versions are being developed in the ""dev"" branch,; or in their own feature branch.; When they are deemed ready for a release, they are merged into ""master"". As a consequences, all contributions must stage first through ""dev""; or their own feature branch. ## Pull Requests; We actively welcome your pull requests. 1. Fork the repo and create your branch from `dev`.; 2. If you've added code that should be tested, add tests.; 3. If you've changed APIs, update the documentation.; 4. Ensure the test suite passes.; 5. Make sure your code lints.; 6. If you haven't already, complete the Contributor License Agreement (""CLA""). ## Contributor License Agreement (""CLA""); In order to accept your pull request, we need you to submit a CLA. You only need; to do this once to work on any of Facebook's open source projects. Complete your CLA here: <https://code.facebook.com/cla>. ## Issues; We use GitHub issues to track public bugs. Please ensure your description is; clear and has sufficient instructions to be able to reproduce the issue. Facebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe; disclosure of security bugs. In those cases, please go through the process; outlined on that page and do not file a public issue. ## Coding Style ; * 4 spaces for indentation rather than tabs. ## License; By contributing to Zstandard, you agree that your contributions will be licensed; under both the [LICENSE](LICENSE) file and the [COPYING](COPYING) file in the root directory of this source tree.; ",MatchSource.DOCS,lib/zstd/CONTRIBUTING.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/CONTRIBUTING.md
Safety,safe,safe,"# Contributing to Zstandard; We want to make contributing to this project as easy and transparent as; possible. ## Our Development Process; New versions are being developed in the ""dev"" branch,; or in their own feature branch.; When they are deemed ready for a release, they are merged into ""master"". As a consequences, all contributions must stage first through ""dev""; or their own feature branch. ## Pull Requests; We actively welcome your pull requests. 1. Fork the repo and create your branch from `dev`.; 2. If you've added code that should be tested, add tests.; 3. If you've changed APIs, update the documentation.; 4. Ensure the test suite passes.; 5. Make sure your code lints.; 6. If you haven't already, complete the Contributor License Agreement (""CLA""). ## Contributor License Agreement (""CLA""); In order to accept your pull request, we need you to submit a CLA. You only need; to do this once to work on any of Facebook's open source projects. Complete your CLA here: <https://code.facebook.com/cla>. ## Issues; We use GitHub issues to track public bugs. Please ensure your description is; clear and has sufficient instructions to be able to reproduce the issue. Facebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe; disclosure of security bugs. In those cases, please go through the process; outlined on that page and do not file a public issue. ## Coding Style ; * 4 spaces for indentation rather than tabs. ## License; By contributing to Zstandard, you agree that your contributions will be licensed; under both the [LICENSE](LICENSE) file and the [COPYING](COPYING) file in the root directory of this source tree.; ",MatchSource.DOCS,lib/zstd/CONTRIBUTING.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/CONTRIBUTING.md
Security,secur,security,"# Contributing to Zstandard; We want to make contributing to this project as easy and transparent as; possible. ## Our Development Process; New versions are being developed in the ""dev"" branch,; or in their own feature branch.; When they are deemed ready for a release, they are merged into ""master"". As a consequences, all contributions must stage first through ""dev""; or their own feature branch. ## Pull Requests; We actively welcome your pull requests. 1. Fork the repo and create your branch from `dev`.; 2. If you've added code that should be tested, add tests.; 3. If you've changed APIs, update the documentation.; 4. Ensure the test suite passes.; 5. Make sure your code lints.; 6. If you haven't already, complete the Contributor License Agreement (""CLA""). ## Contributor License Agreement (""CLA""); In order to accept your pull request, we need you to submit a CLA. You only need; to do this once to work on any of Facebook's open source projects. Complete your CLA here: <https://code.facebook.com/cla>. ## Issues; We use GitHub issues to track public bugs. Please ensure your description is; clear and has sufficient instructions to be able to reproduce the issue. Facebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe; disclosure of security bugs. In those cases, please go through the process; outlined on that page and do not file a public issue. ## Coding Style ; * 4 spaces for indentation rather than tabs. ## License; By contributing to Zstandard, you agree that your contributions will be licensed; under both the [LICENSE](LICENSE) file and the [COPYING](COPYING) file in the root directory of this source tree.; ",MatchSource.DOCS,lib/zstd/CONTRIBUTING.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/CONTRIBUTING.md
Testability,test,tested,"# Contributing to Zstandard; We want to make contributing to this project as easy and transparent as; possible. ## Our Development Process; New versions are being developed in the ""dev"" branch,; or in their own feature branch.; When they are deemed ready for a release, they are merged into ""master"". As a consequences, all contributions must stage first through ""dev""; or their own feature branch. ## Pull Requests; We actively welcome your pull requests. 1. Fork the repo and create your branch from `dev`.; 2. If you've added code that should be tested, add tests.; 3. If you've changed APIs, update the documentation.; 4. Ensure the test suite passes.; 5. Make sure your code lints.; 6. If you haven't already, complete the Contributor License Agreement (""CLA""). ## Contributor License Agreement (""CLA""); In order to accept your pull request, we need you to submit a CLA. You only need; to do this once to work on any of Facebook's open source projects. Complete your CLA here: <https://code.facebook.com/cla>. ## Issues; We use GitHub issues to track public bugs. Please ensure your description is; clear and has sufficient instructions to be able to reproduce the issue. Facebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe; disclosure of security bugs. In those cases, please go through the process; outlined on that page and do not file a public issue. ## Coding Style ; * 4 spaces for indentation rather than tabs. ## License; By contributing to Zstandard, you agree that your contributions will be licensed; under both the [LICENSE](LICENSE) file and the [COPYING](COPYING) file in the root directory of this source tree.; ",MatchSource.DOCS,lib/zstd/CONTRIBUTING.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/CONTRIBUTING.md
Usability,clear,clear,"# Contributing to Zstandard; We want to make contributing to this project as easy and transparent as; possible. ## Our Development Process; New versions are being developed in the ""dev"" branch,; or in their own feature branch.; When they are deemed ready for a release, they are merged into ""master"". As a consequences, all contributions must stage first through ""dev""; or their own feature branch. ## Pull Requests; We actively welcome your pull requests. 1. Fork the repo and create your branch from `dev`.; 2. If you've added code that should be tested, add tests.; 3. If you've changed APIs, update the documentation.; 4. Ensure the test suite passes.; 5. Make sure your code lints.; 6. If you haven't already, complete the Contributor License Agreement (""CLA""). ## Contributor License Agreement (""CLA""); In order to accept your pull request, we need you to submit a CLA. You only need; to do this once to work on any of Facebook's open source projects. Complete your CLA here: <https://code.facebook.com/cla>. ## Issues; We use GitHub issues to track public bugs. Please ensure your description is; clear and has sufficient instructions to be able to reproduce the issue. Facebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe; disclosure of security bugs. In those cases, please go through the process; outlined on that page and do not file a public issue. ## Coding Style ; * 4 spaces for indentation rather than tabs. ## License; By contributing to Zstandard, you agree that your contributions will be licensed; under both the [LICENSE](LICENSE) file and the [COPYING](COPYING) file in the root directory of this source tree.; ",MatchSource.DOCS,lib/zstd/CONTRIBUTING.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/CONTRIBUTING.md
Availability,avail,available,"ecompression speeds. Training works if there is some correlation in a family of small data samples. The more data-specific a dictionary is, the more efficient it is (there is no _universal dictionary_).; Hence, deploying one dictionary per type of data will provide the greatest benefits.; Dictionary gains are mostly effective in the first few KB. Then, the compression algorithm will gradually use previously decoded content to better compress the rest of the file. #### Dictionary compression How To:. 1) Create the dictionary. `zstd --train FullPathToTrainingSet/* -o dictionaryName`. 2) Compress with dictionary. `zstd -D dictionaryName FILE`. 3) Decompress with dictionary. `zstd -D dictionaryName --decompress FILE.zst`. ### Build instructions. #### Makefile. If your system is compatible with standard `make` (or `gmake`),; invoking `make` in root directory will generate `zstd` cli in root directory. Other available options include:; - `make install` : create and install zstd cli, library and man pages; - `make check` : create and run `zstd`, tests its behavior on local platform. #### cmake. A `cmake` project generator is provided within `build/cmake`.; It can generate Makefiles or other build scripts; to create `zstd` binary, and `libzstd` dynamic and static libraries. By default, `CMAKE_BUILD_TYPE` is set to `Release`. #### Meson. A Meson project is provided within `build/meson`. #### Visual Studio (Windows). Going into `build` directory, you will find additional possibilities:; - Projects for Visual Studio 2005, 2008 and 2010.; + VS2010 project is compatible with VS2012, VS2013, VS2015 and VS2017.; - Automated build scripts for Visual compiler by [@KrzysFR](https://github.com/KrzysFR), in `build/VS_scripts`,; which will build `zstd` cli and `libzstd` library without any need to open Visual Studio solution. ### Status. Zstandard is currently deployed within Facebook. It is used continuously to compress large amounts of data in multiple formats and use cases.; Zstandard",MatchSource.DOCS,lib/zstd/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/README.md
Deployability,release,releases,"ase for Small Data compression. Previous charts provide results applicable to typical file and stream scenarios (several MB). Small data comes with different perspectives. The smaller the amount of data to compress, the more difficult it is to compress. This problem is common to all compression algorithms, and reason is, compression algorithms learn from past data how to compress future data. But at the beginning of a new data set, there is no ""past"" to build upon. To solve this situation, Zstd offers a __training mode__, which can be used to tune the algorithm for a selected type of data.; Training Zstandard is achieved by providing it with a few samples (one file per sample). The result of this training is stored in a file called ""dictionary"", which must be loaded before compression and decompression.; Using this dictionary, the compression ratio achievable on small data improves dramatically. The following example uses the `github-users` [sample set](https://github.com/facebook/zstd/releases/tag/v1.1.3), created from [github public API](https://developer.github.com/v3/users/#get-all-users).; It consists of roughly 10K records weighing about 1KB each. Compression Ratio | Compression Speed | Decompression Speed; ------------------|-------------------|--------------------; ![Compression Ratio](doc/images/dict-cr.png ""Compression Ratio"") | ![Compression Speed](doc/images/dict-cs.png ""Compression Speed"") | ![Decompression Speed](doc/images/dict-ds.png ""Decompression Speed""). These compression gains are achieved while simultaneously providing _faster_ compression and decompression speeds. Training works if there is some correlation in a family of small data samples. The more data-specific a dictionary is, the more efficient it is (there is no _universal dictionary_).; Hence, deploying one dictionary per type of data will provide the greatest benefits.; Dictionary gains are mostly effective in the first few KB. Then, the compression algorithm will gradually use previous",MatchSource.DOCS,lib/zstd/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/README.md
Energy Efficiency,efficient,efficient,"""dictionary"", which must be loaded before compression and decompression.; Using this dictionary, the compression ratio achievable on small data improves dramatically. The following example uses the `github-users` [sample set](https://github.com/facebook/zstd/releases/tag/v1.1.3), created from [github public API](https://developer.github.com/v3/users/#get-all-users).; It consists of roughly 10K records weighing about 1KB each. Compression Ratio | Compression Speed | Decompression Speed; ------------------|-------------------|--------------------; ![Compression Ratio](doc/images/dict-cr.png ""Compression Ratio"") | ![Compression Speed](doc/images/dict-cs.png ""Compression Speed"") | ![Decompression Speed](doc/images/dict-ds.png ""Decompression Speed""). These compression gains are achieved while simultaneously providing _faster_ compression and decompression speeds. Training works if there is some correlation in a family of small data samples. The more data-specific a dictionary is, the more efficient it is (there is no _universal dictionary_).; Hence, deploying one dictionary per type of data will provide the greatest benefits.; Dictionary gains are mostly effective in the first few KB. Then, the compression algorithm will gradually use previously decoded content to better compress the rest of the file. #### Dictionary compression How To:. 1) Create the dictionary. `zstd --train FullPathToTrainingSet/* -o dictionaryName`. 2) Compress with dictionary. `zstd -D dictionaryName FILE`. 3) Decompress with dictionary. `zstd -D dictionaryName --decompress FILE.zst`. ### Build instructions. #### Makefile. If your system is compatible with standard `make` (or `gmake`),; invoking `make` in root directory will generate `zstd` cli in root directory. Other available options include:; - `make install` : create and install zstd cli, library and man pages; - `make check` : create and run `zstd`, tests its behavior on local platform. #### cmake. A `cmake` project generator is provided within",MatchSource.DOCS,lib/zstd/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/README.md
Modifiability,config,configurable," a Core i7-6700K CPU @ 4.0GHz,; using [lzbench], an open-source in-memory benchmark by @inikep; compiled with [gcc] 7.3.0,; on the [Silesia compression corpus]. [lzbench]: https://github.com/inikep/lzbench; [Silesia compression corpus]: http://sun.aei.polsl.pl/~sdeor/index.php?page=silesia; [gcc]: https://gcc.gnu.org/. | Compressor name | Ratio | Compression| Decompress.|; | --------------- | ------| -----------| ---------- |; | **zstd 1.3.4 -1** | 2.877 | 470 MB/s | 1380 MB/s |; | zlib 1.2.11 -1 | 2.743 | 110 MB/s | 400 MB/s |; | brotli 1.0.2 -0 | 2.701 | 410 MB/s | 430 MB/s |; | quicklz 1.5.0 -1 | 2.238 | 550 MB/s | 710 MB/s |; | lzo1x 2.09 -1 | 2.108 | 650 MB/s | 830 MB/s |; | lz4 1.8.1 | 2.101 | 750 MB/s | 3700 MB/s |; | snappy 1.1.4 | 2.091 | 530 MB/s | 1800 MB/s |; | lzf 3.6 -1 | 2.077 | 400 MB/s | 860 MB/s |. [zlib]:http://www.zlib.net/; [LZ4]: http://www.lz4.org/. Zstd can also offer stronger compression ratios at the cost of compression speed.; Speed vs Compression trade-off is configurable by small increments.; Decompression speed is preserved and remains roughly the same at all settings,; a property shared by most LZ compression algorithms, such as [zlib] or lzma. The following tests were run; on a server running Linux Debian (`Linux version 4.14.0-3-amd64`); with a Core i7-6700K CPU @ 4.0GHz,; using [lzbench], an open-source in-memory benchmark by @inikep; compiled with [gcc] 7.3.0,; on the [Silesia compression corpus]. Compression Speed vs Ratio | Decompression Speed; ---------------------------|--------------------; ![Compression Speed vs Ratio](doc/images/CSpeed2.png ""Compression Speed vs Ratio"") | ![Decompression Speed](doc/images/DSpeed3.png ""Decompression Speed""). A few other algorithms can produce higher compression ratios at slower speeds, falling outside of the graph.; For a larger picture including slow modes, [click on this link](doc/images/DCspeed5.png). ### The case for Small Data compression. Previous charts provide results applicable to typ",MatchSource.DOCS,lib/zstd/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/README.md
Performance,tune,tune,"s]. Compression Speed vs Ratio | Decompression Speed; ---------------------------|--------------------; ![Compression Speed vs Ratio](doc/images/CSpeed2.png ""Compression Speed vs Ratio"") | ![Decompression Speed](doc/images/DSpeed3.png ""Decompression Speed""). A few other algorithms can produce higher compression ratios at slower speeds, falling outside of the graph.; For a larger picture including slow modes, [click on this link](doc/images/DCspeed5.png). ### The case for Small Data compression. Previous charts provide results applicable to typical file and stream scenarios (several MB). Small data comes with different perspectives. The smaller the amount of data to compress, the more difficult it is to compress. This problem is common to all compression algorithms, and reason is, compression algorithms learn from past data how to compress future data. But at the beginning of a new data set, there is no ""past"" to build upon. To solve this situation, Zstd offers a __training mode__, which can be used to tune the algorithm for a selected type of data.; Training Zstandard is achieved by providing it with a few samples (one file per sample). The result of this training is stored in a file called ""dictionary"", which must be loaded before compression and decompression.; Using this dictionary, the compression ratio achievable on small data improves dramatically. The following example uses the `github-users` [sample set](https://github.com/facebook/zstd/releases/tag/v1.1.3), created from [github public API](https://developer.github.com/v3/users/#get-all-users).; It consists of roughly 10K records weighing about 1KB each. Compression Ratio | Compression Speed | Decompression Speed; ------------------|-------------------|--------------------; ![Compression Ratio](doc/images/dict-cr.png ""Compression Ratio"") | ![Compression Speed](doc/images/dict-cs.png ""Compression Speed"") | ![Decompression Speed](doc/images/dict-ds.png ""Decompression Speed""). These compression gains are achieve",MatchSource.DOCS,lib/zstd/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/README.md
Safety,safe,safe,"st of the file. #### Dictionary compression How To:. 1) Create the dictionary. `zstd --train FullPathToTrainingSet/* -o dictionaryName`. 2) Compress with dictionary. `zstd -D dictionaryName FILE`. 3) Decompress with dictionary. `zstd -D dictionaryName --decompress FILE.zst`. ### Build instructions. #### Makefile. If your system is compatible with standard `make` (or `gmake`),; invoking `make` in root directory will generate `zstd` cli in root directory. Other available options include:; - `make install` : create and install zstd cli, library and man pages; - `make check` : create and run `zstd`, tests its behavior on local platform. #### cmake. A `cmake` project generator is provided within `build/cmake`.; It can generate Makefiles or other build scripts; to create `zstd` binary, and `libzstd` dynamic and static libraries. By default, `CMAKE_BUILD_TYPE` is set to `Release`. #### Meson. A Meson project is provided within `build/meson`. #### Visual Studio (Windows). Going into `build` directory, you will find additional possibilities:; - Projects for Visual Studio 2005, 2008 and 2010.; + VS2010 project is compatible with VS2012, VS2013, VS2015 and VS2017.; - Automated build scripts for Visual compiler by [@KrzysFR](https://github.com/KrzysFR), in `build/VS_scripts`,; which will build `zstd` cli and `libzstd` library without any need to open Visual Studio solution. ### Status. Zstandard is currently deployed within Facebook. It is used continuously to compress large amounts of data in multiple formats and use cases.; Zstandard is considered safe for production environments. ### License. Zstandard is dual-licensed under [BSD](LICENSE) and [GPLv2](COPYING). ### Contributing. The ""dev"" branch is the one where all contributions are merged before reaching ""master"".; If you plan to propose a patch, please commit into the ""dev"" branch, or its own feature branch.; Direct commit to ""master"" are not permitted.; For more information, please read [CONTRIBUTING](CONTRIBUTING.md).; ",MatchSource.DOCS,lib/zstd/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/README.md
Testability,test,test,"ebook/zstd/dev/doc/images/zstd_logo86.png"" alt=""Zstandard""></p>. __Zstandard__, or `zstd` as short version, is a fast lossless compression algorithm,; targeting real-time compression scenarios at zlib-level and better compression ratios.; It's backed by a very fast entropy stage, provided by [Huff0 and FSE library](https://github.com/Cyan4973/FiniteStateEntropy). The project is provided as an open-source dual [BSD](LICENSE) and [GPLv2](COPYING) licensed **C** library,; and a command line utility producing and decoding `.zst`, `.gz`, `.xz` and `.lz4` files.; Should your project require another programming language,; a list of known ports and bindings is provided on [Zstandard homepage](http://www.zstd.net/#other-languages). Development branch status : [![Build Status][travisDevBadge]][travisLink] [![Build status][AppveyorDevBadge]][AppveyorLink] [![Build status][CircleDevBadge]][CircleLink]. [travisDevBadge]: https://travis-ci.org/facebook/zstd.svg?branch=dev ""Continuous Integration test suite""; [travisLink]: https://travis-ci.org/facebook/zstd; [AppveyorDevBadge]: https://ci.appveyor.com/api/projects/status/xt38wbdxjk5mrbem/branch/dev?svg=true ""Windows test suite""; [AppveyorLink]: https://ci.appveyor.com/project/YannCollet/zstd-p0yf0; [CircleDevBadge]: https://circleci.com/gh/facebook/zstd/tree/dev.svg?style=shield ""Short test suite""; [CircleLink]: https://circleci.com/gh/facebook/zstd. ### Benchmarks. For reference, several fast compression algorithms were tested and compared; on a server running Linux Debian (`Linux version 4.14.0-3-amd64`),; with a Core i7-6700K CPU @ 4.0GHz,; using [lzbench], an open-source in-memory benchmark by @inikep; compiled with [gcc] 7.3.0,; on the [Silesia compression corpus]. [lzbench]: https://github.com/inikep/lzbench; [Silesia compression corpus]: http://sun.aei.polsl.pl/~sdeor/index.php?page=silesia; [gcc]: https://gcc.gnu.org/. | Compressor name | Ratio | Compression| Decompress.|; | --------------- | ------| -----------| --------",MatchSource.DOCS,lib/zstd/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/README.md
Usability,learn,learn,"Linux Debian (`Linux version 4.14.0-3-amd64`); with a Core i7-6700K CPU @ 4.0GHz,; using [lzbench], an open-source in-memory benchmark by @inikep; compiled with [gcc] 7.3.0,; on the [Silesia compression corpus]. Compression Speed vs Ratio | Decompression Speed; ---------------------------|--------------------; ![Compression Speed vs Ratio](doc/images/CSpeed2.png ""Compression Speed vs Ratio"") | ![Decompression Speed](doc/images/DSpeed3.png ""Decompression Speed""). A few other algorithms can produce higher compression ratios at slower speeds, falling outside of the graph.; For a larger picture including slow modes, [click on this link](doc/images/DCspeed5.png). ### The case for Small Data compression. Previous charts provide results applicable to typical file and stream scenarios (several MB). Small data comes with different perspectives. The smaller the amount of data to compress, the more difficult it is to compress. This problem is common to all compression algorithms, and reason is, compression algorithms learn from past data how to compress future data. But at the beginning of a new data set, there is no ""past"" to build upon. To solve this situation, Zstd offers a __training mode__, which can be used to tune the algorithm for a selected type of data.; Training Zstandard is achieved by providing it with a few samples (one file per sample). The result of this training is stored in a file called ""dictionary"", which must be loaded before compression and decompression.; Using this dictionary, the compression ratio achievable on small data improves dramatically. The following example uses the `github-users` [sample set](https://github.com/facebook/zstd/releases/tag/v1.1.3), created from [github public API](https://developer.github.com/v3/users/#get-all-users).; It consists of roughly 10K records weighing about 1KB each. Compression Ratio | Compression Speed | Decompression Speed; ------------------|-------------------|--------------------; ![Compression Ratio](doc/image",MatchSource.DOCS,lib/zstd/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/README.md
Deployability,install,install,"Testing; =======. Zstandard CI testing is split up into three sections:; short, medium, and long tests. Short Tests; -----------; Short tests run on CircleCI for new commits on every branch and pull request.; They consist of the following tests:; - Compilation on all supported targets (x86, x86_64, ARM, AArch64, PowerPC, and PowerPC64); - Compilation on various versions of gcc, clang, and g++; - `tests/playTests.sh` on x86_64, without the tests on long data (CLI tests); - Small tests (`tests/legacy.c`, `tests/longmatch.c`, `tests/symbols.c`) on x64_64. Medium Tests; ------------; Medium tests run on every commit and pull request to `dev` branch, on TravisCI.; They consist of the following tests:; - The following tests run with UBsan and Asan on x86_64 and x86, as well as with; Msan on x86_64; - `tests/playTests.sh --test-long-data`; - Fuzzer tests: `tests/fuzzer.c`, `tests/zstreamtest.c`, and `tests/decodecorpus.c`; - `tests/zstreamtest.c` under Tsan (streaming mode, including multithreaded mode); - Valgrind Test (`make -C tests valgrindTest`) (testing CLI and fuzzer under valgrind); - Fuzzer tests (see above) on ARM, AArch64, PowerPC, and PowerPC64. Long Tests; ----------; Long tests run on all commits to `master` branch,; and once a day on the current version of `dev` branch,; on TravisCI.; They consist of the following tests:; - Entire test suite (including fuzzers and some other specialized tests) on:; - x86_64 and x86 with UBsan and Asan; - x86_64 with Msan; - ARM, AArch64, PowerPC, and PowerPC64; - Streaming mode fuzzer with Tsan (for the `zstdmt` testing); - ZlibWrapper tests, including under valgrind; - Versions test (ensuring `zstd` can decode files from all previous versions); - `pzstd` with asan and tsan, as well as in 32-bits mode; - Testing `zstd` with legacy mode off; - Testing `zbuff` (old streaming API); - Entire test suite and make install on macOS; ",MatchSource.DOCS,lib/zstd/TESTING.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/TESTING.md
Testability,test,testing,"Testing; =======. Zstandard CI testing is split up into three sections:; short, medium, and long tests. Short Tests; -----------; Short tests run on CircleCI for new commits on every branch and pull request.; They consist of the following tests:; - Compilation on all supported targets (x86, x86_64, ARM, AArch64, PowerPC, and PowerPC64); - Compilation on various versions of gcc, clang, and g++; - `tests/playTests.sh` on x86_64, without the tests on long data (CLI tests); - Small tests (`tests/legacy.c`, `tests/longmatch.c`, `tests/symbols.c`) on x64_64. Medium Tests; ------------; Medium tests run on every commit and pull request to `dev` branch, on TravisCI.; They consist of the following tests:; - The following tests run with UBsan and Asan on x86_64 and x86, as well as with; Msan on x86_64; - `tests/playTests.sh --test-long-data`; - Fuzzer tests: `tests/fuzzer.c`, `tests/zstreamtest.c`, and `tests/decodecorpus.c`; - `tests/zstreamtest.c` under Tsan (streaming mode, including multithreaded mode); - Valgrind Test (`make -C tests valgrindTest`) (testing CLI and fuzzer under valgrind); - Fuzzer tests (see above) on ARM, AArch64, PowerPC, and PowerPC64. Long Tests; ----------; Long tests run on all commits to `master` branch,; and once a day on the current version of `dev` branch,; on TravisCI.; They consist of the following tests:; - Entire test suite (including fuzzers and some other specialized tests) on:; - x86_64 and x86 with UBsan and Asan; - x86_64 with Msan; - ARM, AArch64, PowerPC, and PowerPC64; - Streaming mode fuzzer with Tsan (for the `zstdmt` testing); - ZlibWrapper tests, including under valgrind; - Versions test (ensuring `zstd` can decode files from all previous versions); - `pzstd` with asan and tsan, as well as in 32-bits mode; - Testing `zstd` with legacy mode off; - Testing `zbuff` (old streaming API); - Entire test suite and make install on macOS; ",MatchSource.DOCS,lib/zstd/TESTING.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/TESTING.md
Testability,test,test,"# SIMDe Without Test Cases. This repository contains only the core of; [SIMDe](https://github.com/simd-everywhere/simde).; It is generated automatically for every commit to master, and is; intended to be used as a submodule in projects which don't want to; include the (rather large) test cases. All development work happens in the main repository, please do not; file issues or create pull requests against this repository.; ",MatchSource.DOCS,lib/simde/simde/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/simde/simde/README.md
Availability,avail,available," contrib directory and will no longer be supported); - `VS2008` - Visual Studio 2008 project; - `VS2010` - Visual Studio 2010 project (which also works well with Visual Studio 2012, 2013, 2015); - `VS_scripts` - command line scripts prepared for Visual Studio compilation without IDE. #### How to compile zstd with Visual Studio. 1. Install Visual Studio e.g. VS 2015 Community Edition (it's free).; 2. Download the latest version of zstd from https://github.com/facebook/zstd/releases; 3. Decompress ZIP archive.; 4. Go to decompressed directory then to `projects` then `VS2010` and open `zstd.sln`; 5. Visual Studio will ask about converting VS2010 project to VS2015 and you should agree.; 6. Change `Debug` to `Release` and if you have 64-bit Windows change also `Win32` to `x64`.; 7. Press F7 on keyboard or select `BUILD` from the menu bar and choose `Build Solution`.; 8. If compilation will be fine a compiled executable will be in `projects\VS2010\bin\x64\Release\zstd.exe`. #### Projects available within zstd.sln. The Visual Studio solution file `visual\VS2010\zstd.sln` contains many projects that will be compiled to the; `visual\VS2010\bin\$(Platform)_$(Configuration)` directory. For example `zstd` set to `x64` and; `Release` will be compiled to `visual\VS2010\bin\x64_Release\zstd.exe`. The solution file contains the; following projects:. - `zstd` : Command Line Utility, supporting gzip-like arguments; - `datagen` : Synthetic and parametrable data generator, for tests; - `fullbench` : Precisely measure speed for each zstd inner functions; - `fuzzer` : Test tool, to check zstd integrity on target platform ; - `libzstd` : A static ZSTD library compiled to `libzstd_static.lib`; - `libzstd-dll` : A dynamic ZSTD library (DLL) compiled to `libzstd.dll` with the import library `libzstd.lib`; - `fullbench-dll` : The fullbench program compiled with the import library; the executable requires ZSTD DLL. #### Using ZSTD DLL with Microsoft Visual C++ project. The header file `lib\zstd",MatchSource.DOCS,lib/zstd/build/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/README.md
Deployability,integrat,integrated,"Projects for various integrated development environments (IDE); ==============================================================. #### Included projects. The following projects are included with the zstd distribution:; - `cmake` - CMake project contributed by Artyom Dymchenko; - `VS2005` - Visual Studio 2005 Project (this project has been moved to the contrib directory and will no longer be supported); - `VS2008` - Visual Studio 2008 project; - `VS2010` - Visual Studio 2010 project (which also works well with Visual Studio 2012, 2013, 2015); - `VS_scripts` - command line scripts prepared for Visual Studio compilation without IDE. #### How to compile zstd with Visual Studio. 1. Install Visual Studio e.g. VS 2015 Community Edition (it's free).; 2. Download the latest version of zstd from https://github.com/facebook/zstd/releases; 3. Decompress ZIP archive.; 4. Go to decompressed directory then to `projects` then `VS2010` and open `zstd.sln`; 5. Visual Studio will ask about converting VS2010 project to VS2015 and you should agree.; 6. Change `Debug` to `Release` and if you have 64-bit Windows change also `Win32` to `x64`.; 7. Press F7 on keyboard or select `BUILD` from the menu bar and choose `Build Solution`.; 8. If compilation will be fine a compiled executable will be in `projects\VS2010\bin\x64\Release\zstd.exe`. #### Projects available within zstd.sln. The Visual Studio solution file `visual\VS2010\zstd.sln` contains many projects that will be compiled to the; `visual\VS2010\bin\$(Platform)_$(Configuration)` directory. For example `zstd` set to `x64` and; `Release` will be compiled to `visual\VS2010\bin\x64_Release\zstd.exe`. The solution file contains the; following projects:. - `zstd` : Command Line Utility, supporting gzip-like arguments; - `datagen` : Synthetic and parametrable data generator, for tests; - `fullbench` : Precisely measure speed for each zstd inner functions; - `fuzzer` : Test tool, to check zstd integrity on target platform ; - `libzstd` : A stati",MatchSource.DOCS,lib/zstd/build/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/README.md
Integrability,integrat,integrated,"Projects for various integrated development environments (IDE); ==============================================================. #### Included projects. The following projects are included with the zstd distribution:; - `cmake` - CMake project contributed by Artyom Dymchenko; - `VS2005` - Visual Studio 2005 Project (this project has been moved to the contrib directory and will no longer be supported); - `VS2008` - Visual Studio 2008 project; - `VS2010` - Visual Studio 2010 project (which also works well with Visual Studio 2012, 2013, 2015); - `VS_scripts` - command line scripts prepared for Visual Studio compilation without IDE. #### How to compile zstd with Visual Studio. 1. Install Visual Studio e.g. VS 2015 Community Edition (it's free).; 2. Download the latest version of zstd from https://github.com/facebook/zstd/releases; 3. Decompress ZIP archive.; 4. Go to decompressed directory then to `projects` then `VS2010` and open `zstd.sln`; 5. Visual Studio will ask about converting VS2010 project to VS2015 and you should agree.; 6. Change `Debug` to `Release` and if you have 64-bit Windows change also `Win32` to `x64`.; 7. Press F7 on keyboard or select `BUILD` from the menu bar and choose `Build Solution`.; 8. If compilation will be fine a compiled executable will be in `projects\VS2010\bin\x64\Release\zstd.exe`. #### Projects available within zstd.sln. The Visual Studio solution file `visual\VS2010\zstd.sln` contains many projects that will be compiled to the; `visual\VS2010\bin\$(Platform)_$(Configuration)` directory. For example `zstd` set to `x64` and; `Release` will be compiled to `visual\VS2010\bin\x64_Release\zstd.exe`. The solution file contains the; following projects:. - `zstd` : Command Line Utility, supporting gzip-like arguments; - `datagen` : Synthetic and parametrable data generator, for tests; - `fullbench` : Precisely measure speed for each zstd inner functions; - `fuzzer` : Test tool, to check zstd integrity on target platform ; - `libzstd` : A stati",MatchSource.DOCS,lib/zstd/build/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/README.md
Security,integrity,integrity,"decompressed directory then to `projects` then `VS2010` and open `zstd.sln`; 5. Visual Studio will ask about converting VS2010 project to VS2015 and you should agree.; 6. Change `Debug` to `Release` and if you have 64-bit Windows change also `Win32` to `x64`.; 7. Press F7 on keyboard or select `BUILD` from the menu bar and choose `Build Solution`.; 8. If compilation will be fine a compiled executable will be in `projects\VS2010\bin\x64\Release\zstd.exe`. #### Projects available within zstd.sln. The Visual Studio solution file `visual\VS2010\zstd.sln` contains many projects that will be compiled to the; `visual\VS2010\bin\$(Platform)_$(Configuration)` directory. For example `zstd` set to `x64` and; `Release` will be compiled to `visual\VS2010\bin\x64_Release\zstd.exe`. The solution file contains the; following projects:. - `zstd` : Command Line Utility, supporting gzip-like arguments; - `datagen` : Synthetic and parametrable data generator, for tests; - `fullbench` : Precisely measure speed for each zstd inner functions; - `fuzzer` : Test tool, to check zstd integrity on target platform ; - `libzstd` : A static ZSTD library compiled to `libzstd_static.lib`; - `libzstd-dll` : A dynamic ZSTD library (DLL) compiled to `libzstd.dll` with the import library `libzstd.lib`; - `fullbench-dll` : The fullbench program compiled with the import library; the executable requires ZSTD DLL. #### Using ZSTD DLL with Microsoft Visual C++ project. The header file `lib\zstd.h` and the import library; `visual\VS2010\bin\$(Platform)_$(Configuration)\libzstd.lib` are required to compile; a project using Visual C++. 1. The path to header files should be added to `Additional Include Directories` that can; be found in Project Properties of Visual Studio IDE in the `C/C++` Property Pages on the `General` page.; 2. The import library has to be added to `Additional Dependencies` that can; be found in Project Properties in the `Linker` Property Pages on the `Input` page.; If one will provide only",MatchSource.DOCS,lib/zstd/build/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/README.md
Testability,test,tests,"decompressed directory then to `projects` then `VS2010` and open `zstd.sln`; 5. Visual Studio will ask about converting VS2010 project to VS2015 and you should agree.; 6. Change `Debug` to `Release` and if you have 64-bit Windows change also `Win32` to `x64`.; 7. Press F7 on keyboard or select `BUILD` from the menu bar and choose `Build Solution`.; 8. If compilation will be fine a compiled executable will be in `projects\VS2010\bin\x64\Release\zstd.exe`. #### Projects available within zstd.sln. The Visual Studio solution file `visual\VS2010\zstd.sln` contains many projects that will be compiled to the; `visual\VS2010\bin\$(Platform)_$(Configuration)` directory. For example `zstd` set to `x64` and; `Release` will be compiled to `visual\VS2010\bin\x64_Release\zstd.exe`. The solution file contains the; following projects:. - `zstd` : Command Line Utility, supporting gzip-like arguments; - `datagen` : Synthetic and parametrable data generator, for tests; - `fullbench` : Precisely measure speed for each zstd inner functions; - `fuzzer` : Test tool, to check zstd integrity on target platform ; - `libzstd` : A static ZSTD library compiled to `libzstd_static.lib`; - `libzstd-dll` : A dynamic ZSTD library (DLL) compiled to `libzstd.dll` with the import library `libzstd.lib`; - `fullbench-dll` : The fullbench program compiled with the import library; the executable requires ZSTD DLL. #### Using ZSTD DLL with Microsoft Visual C++ project. The header file `lib\zstd.h` and the import library; `visual\VS2010\bin\$(Platform)_$(Configuration)\libzstd.lib` are required to compile; a project using Visual C++. 1. The path to header files should be added to `Additional Include Directories` that can; be found in Project Properties of Visual Studio IDE in the `C/C++` Property Pages on the `General` page.; 2. The import library has to be added to `Additional Dependencies` that can; be found in Project Properties in the `Linker` Property Pages on the `Input` page.; If one will provide only",MatchSource.DOCS,lib/zstd/build/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/README.md
Deployability,release,release,"Zstandard Documentation; =======================. This directory contains material defining the Zstandard format,; as well as detailed instructions to use `zstd` library. __`zstd_manual.html`__ : Documentation of `zstd.h` API, in html format.; Click on this link: [http://zstd.net/zstd_manual.html](http://zstd.net/zstd_manual.html); to display documentation of latest release in readable format within a browser. __`zstd_compression_format.md`__ : This document defines the Zstandard compression format.; Compliant decoders must adhere to this document,; and compliant encoders must generate data that follows it. Should you look for ressources to develop your own port of Zstandard algorithm,; you may find the following ressources useful :. __`educational_decoder`__ : This directory contains an implementation of a Zstandard decoder,; compliant with the Zstandard compression format.; It can be used, for example, to better understand the format,; or as the basis for a separate implementation of Zstandard decoder. [__`decode_corpus`__](https://github.com/facebook/zstd/tree/dev/tests#decodecorpus---tool-to-generate-zstandard-frames-for-decoder-testing) :; This tool, stored in `/tests` directory, is able to generate random valid frames,; which is useful if you wish to test your decoder and verify it fully supports the specification.; ",MatchSource.DOCS,lib/zstd/doc/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/README.md
Testability,test,tests,"Zstandard Documentation; =======================. This directory contains material defining the Zstandard format,; as well as detailed instructions to use `zstd` library. __`zstd_manual.html`__ : Documentation of `zstd.h` API, in html format.; Click on this link: [http://zstd.net/zstd_manual.html](http://zstd.net/zstd_manual.html); to display documentation of latest release in readable format within a browser. __`zstd_compression_format.md`__ : This document defines the Zstandard compression format.; Compliant decoders must adhere to this document,; and compliant encoders must generate data that follows it. Should you look for ressources to develop your own port of Zstandard algorithm,; you may find the following ressources useful :. __`educational_decoder`__ : This directory contains an implementation of a Zstandard decoder,; compliant with the Zstandard compression format.; It can be used, for example, to better understand the format,; or as the basis for a separate implementation of Zstandard decoder. [__`decode_corpus`__](https://github.com/facebook/zstd/tree/dev/tests#decodecorpus---tool-to-generate-zstandard-frames-for-decoder-testing) :; This tool, stored in `/tests` directory, is able to generate random valid frames,; which is useful if you wish to test your decoder and verify it fully supports the specification.; ",MatchSource.DOCS,lib/zstd/doc/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/README.md
Availability,error,error,"nd other primitive data representations. The data can be produced or consumed,; even for an arbitrarily long sequentially presented input data stream,; using only an a priori bounded amount of intermediate storage,; and hence can be used in data communications.; The format uses the Zstandard compression method,; and optional [xxHash-64 checksum method](http://www.xxhash.org),; for detection of data corruption. The data format defined by this specification; does not attempt to allow random access to compressed data. Unless otherwise indicated below,; a compliant compressor must produce data sets; that conform to the specifications presented here.; It doesn’t need to support all options though. A compliant decompressor must be able to decompress; at least one working set of parameters; that conforms to the specifications presented here.; It may also ignore informative fields, such as checksum.; Whenever it does not support a parameter defined in the compressed stream,; it must produce a non-ambiguous error code and associated error message; explaining which parameter is unsupported. This specification is intended for use by implementers of software; to compress data into Zstandard format and/or decompress data from Zstandard format.; The Zstandard format is supported by an open source reference implementation,; written in portable C, and available at : https://github.com/facebook/zstd . ### Overall conventions; In this document:; - square brackets i.e. `[` and `]` are used to indicate optional fields or parameters.; - the naming convention for identifiers is `Mixed_Case_With_Underscores`. ### Definitions; Content compressed by Zstandard is transformed into a Zstandard __frame__.; Multiple frames can be appended into a single file or stream.; A frame is completely independent, has a defined beginning and end,; and a set of parameters which tells the decoder how to decompress it. A frame encapsulates one or multiple __blocks__.; Each block contains arbitrary content, whi",MatchSource.DOCS,lib/zstd/doc/zstd_compression_format.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_compression_format.md
Deployability,continuous,continuous,"-------- | ---------- |; | 7-6 | `Frame_Content_Size_flag` |; | 5 | `Single_Segment_flag` |; | 4 | `Unused_bit` |; | 3 | `Reserved_bit` |; | 2 | `Content_Checksum_flag` |; | 1-0 | `Dictionary_ID_flag` |. In this table, bit 7 is the highest bit, while bit 0 is the lowest one. __`Frame_Content_Size_flag`__. This is a 2-bits flag (`= Frame_Header_Descriptor >> 6`),; specifying if `Frame_Content_Size` (the decompressed data size); is provided within the header.; `Flag_Value` provides `FCS_Field_Size`,; which is the number of bytes used by `Frame_Content_Size`; according to the following table:. | `Flag_Value` | 0 | 1 | 2 | 3 |; | -------------- | ------ | --- | --- | --- |; |`FCS_Field_Size`| 0 or 1 | 2 | 4 | 8 |. When `Flag_Value` is `0`, `FCS_Field_Size` depends on `Single_Segment_flag` :; if `Single_Segment_flag` is set, `FCS_Field_Size` is 1.; Otherwise, `FCS_Field_Size` is 0 : `Frame_Content_Size` is not provided. __`Single_Segment_flag`__. If this flag is set,; data must be regenerated within a single continuous memory segment. In this case, `Window_Descriptor` byte is skipped,; but `Frame_Content_Size` is necessarily present.; As a consequence, the decoder must allocate a memory segment; of size equal or larger than `Frame_Content_Size`. In order to preserve the decoder from unreasonable memory requirements,; a decoder is allowed to reject a compressed frame; which requests a memory size beyond decoder's authorized range. For broader compatibility, decoders are recommended to support; memory sizes of at least 8 MB.; This is only a recommendation,; each decoder is free to support higher or lower limits,; depending on local limitations. __`Unused_bit`__. A decoder compliant with this specification version shall not interpret this bit.; It might be used in any future version,; to signal a property which is transparent to properly decode the frame.; An encoder compliant with this specification version must set this bit to zero. __`Reserved_bit`__. This bit is reserve",MatchSource.DOCS,lib/zstd/doc/zstd_compression_format.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_compression_format.md
Energy Efficiency,charge,charge,"Zstandard Compression Format; ============================. ### Notices. Copyright (c) 2016-present Yann Collet, Facebook, Inc. Permission is granted to copy and distribute this document; for any purpose and without charge,; including translations into other languages; and incorporation into compilations,; provided that the copyright notice and this notice are preserved,; and that any substantive changes or deletions from the original; are clearly marked.; Distribution of this document is unlimited. ### Version. 0.3.1 (25/10/18). Introduction; ------------. The purpose of this document is to define a lossless compressed data format,; that is independent of CPU type, operating system,; file system and character set, suitable for; file compression, pipe and streaming compression,; using the [Zstandard algorithm](http://www.zstandard.org).; The text of the specification assumes a basic background in programming; at the level of bits and other primitive data representations. The data can be produced or consumed,; even for an arbitrarily long sequentially presented input data stream,; using only an a priori bounded amount of intermediate storage,; and hence can be used in data communications.; The format uses the Zstandard compression method,; and optional [xxHash-64 checksum method](http://www.xxhash.org),; for detection of data corruption. The data format defined by this specification; does not attempt to allow random access to compressed data. Unless otherwise indicated below,; a compliant compressor must produce data sets; that conform to the specifications presented here.; It doesn’t need to support all options though. A compliant decompressor must be able to decompress; at least one working set of parameters; that conforms to the specifications presented here.; It may also ignore informative fields, such as checksum.; Whenever it does not support a parameter defined in the compressed stream,; it must produce a non-ambiguous error code and associated error message; e",MatchSource.DOCS,lib/zstd/doc/zstd_compression_format.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_compression_format.md
Integrability,message,message,"nd other primitive data representations. The data can be produced or consumed,; even for an arbitrarily long sequentially presented input data stream,; using only an a priori bounded amount of intermediate storage,; and hence can be used in data communications.; The format uses the Zstandard compression method,; and optional [xxHash-64 checksum method](http://www.xxhash.org),; for detection of data corruption. The data format defined by this specification; does not attempt to allow random access to compressed data. Unless otherwise indicated below,; a compliant compressor must produce data sets; that conform to the specifications presented here.; It doesn’t need to support all options though. A compliant decompressor must be able to decompress; at least one working set of parameters; that conforms to the specifications presented here.; It may also ignore informative fields, such as checksum.; Whenever it does not support a parameter defined in the compressed stream,; it must produce a non-ambiguous error code and associated error message; explaining which parameter is unsupported. This specification is intended for use by implementers of software; to compress data into Zstandard format and/or decompress data from Zstandard format.; The Zstandard format is supported by an open source reference implementation,; written in portable C, and available at : https://github.com/facebook/zstd . ### Overall conventions; In this document:; - square brackets i.e. `[` and `]` are used to indicate optional fields or parameters.; - the naming convention for identifiers is `Mixed_Case_With_Underscores`. ### Definitions; Content compressed by Zstandard is transformed into a Zstandard __frame__.; Multiple frames can be appended into a single file or stream.; A frame is completely independent, has a defined beginning and end,; and a set of parameters which tells the decoder how to decompress it. A frame encapsulates one or multiple __blocks__.; Each block contains arbitrary content, whi",MatchSource.DOCS,lib/zstd/doc/zstd_compression_format.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_compression_format.md
Modifiability,portab,portable,"ptional [xxHash-64 checksum method](http://www.xxhash.org),; for detection of data corruption. The data format defined by this specification; does not attempt to allow random access to compressed data. Unless otherwise indicated below,; a compliant compressor must produce data sets; that conform to the specifications presented here.; It doesn’t need to support all options though. A compliant decompressor must be able to decompress; at least one working set of parameters; that conforms to the specifications presented here.; It may also ignore informative fields, such as checksum.; Whenever it does not support a parameter defined in the compressed stream,; it must produce a non-ambiguous error code and associated error message; explaining which parameter is unsupported. This specification is intended for use by implementers of software; to compress data into Zstandard format and/or decompress data from Zstandard format.; The Zstandard format is supported by an open source reference implementation,; written in portable C, and available at : https://github.com/facebook/zstd . ### Overall conventions; In this document:; - square brackets i.e. `[` and `]` are used to indicate optional fields or parameters.; - the naming convention for identifiers is `Mixed_Case_With_Underscores`. ### Definitions; Content compressed by Zstandard is transformed into a Zstandard __frame__.; Multiple frames can be appended into a single file or stream.; A frame is completely independent, has a defined beginning and end,; and a set of parameters which tells the decoder how to decompress it. A frame encapsulates one or multiple __blocks__.; Each block contains arbitrary content, which is described by its header,; and has a guaranteed maximum content size, which depends on frame parameters.; Unlike frames, each block depends on previous blocks for proper decoding.; However, each block can be decompressed without waiting for its successor,; allowing streaming operations. Overview; ---------; - [F",MatchSource.DOCS,lib/zstd/doc/zstd_compression_format.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_compression_format.md
Performance,load,loaded,"epeat distribution mode for sequence decoding.; It's finally followed by 3 offset values, populating recent offsets (instead of using `{1,4,8}`),; stored in order, 4-bytes __little-endian__ each, for a total of 12 bytes.; Each recent offset must have a value < dictionary size. __`Content`__ : The rest of the dictionary is its content.; The content act as a ""past"" in front of data to compress or decompress,; so it can be referenced in sequence commands.; As long as the amount of data decoded from this frame is less than or; equal to `Window_Size`, sequence commands may specify offsets longer; than the total length of decoded output so far to reference back to the; dictionary, even parts of the dictionary with offsets larger than `Window_Size`. ; After the total output has surpassed `Window_Size` however,; this is no longer allowed and the dictionary is no longer accessible. [compressed blocks]: #the-format-of-compressed_block. If a dictionary is provided by an external source,; it should be loaded with great care, its content considered untrusted. Appendix A - Decoding tables for predefined codes; -------------------------------------------------. This appendix contains FSE decoding tables; for the predefined literal length, match length, and offset codes.; The tables have been constructed using the algorithm as given above in chapter; ""from normalized distribution to decoding tables"".; The tables here can be used as examples; to crosscheck that an implementation build its decoding tables correctly. #### Literal Length Code:. | State | Symbol | Number_Of_Bits | Base |; | ----- | ------ | -------------- | ---- |; | 0 | 0 | 4 | 0 |; | 1 | 0 | 4 | 16 |; | 2 | 1 | 5 | 32 |; | 3 | 3 | 5 | 0 |; | 4 | 4 | 5 | 0 |; | 5 | 6 | 5 | 0 |; | 6 | 7 | 5 | 0 |; | 7 | 9 | 5 | 0 |; | 8 | 10 | 5 | 0 |; | 9 | 12 | 5 | 0 |; | 10 | 14 | 6 | 0 |; | 11 | 16 | 5 | 0 |; | 12 | 18 | 5 | 0 |; | 13 | 19 | 5 | 0 |; | 14 | 21 | 5 | 0 |; | 15 | 22 | 5 | 0 |; | 16 | 24 | 5 | 0 |; | 17 | 25 | 5 | 32 |;",MatchSource.DOCS,lib/zstd/doc/zstd_compression_format.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_compression_format.md
Safety,detect,detection,"tice and this notice are preserved,; and that any substantive changes or deletions from the original; are clearly marked.; Distribution of this document is unlimited. ### Version. 0.3.1 (25/10/18). Introduction; ------------. The purpose of this document is to define a lossless compressed data format,; that is independent of CPU type, operating system,; file system and character set, suitable for; file compression, pipe and streaming compression,; using the [Zstandard algorithm](http://www.zstandard.org).; The text of the specification assumes a basic background in programming; at the level of bits and other primitive data representations. The data can be produced or consumed,; even for an arbitrarily long sequentially presented input data stream,; using only an a priori bounded amount of intermediate storage,; and hence can be used in data communications.; The format uses the Zstandard compression method,; and optional [xxHash-64 checksum method](http://www.xxhash.org),; for detection of data corruption. The data format defined by this specification; does not attempt to allow random access to compressed data. Unless otherwise indicated below,; a compliant compressor must produce data sets; that conform to the specifications presented here.; It doesn’t need to support all options though. A compliant decompressor must be able to decompress; at least one working set of parameters; that conforms to the specifications presented here.; It may also ignore informative fields, such as checksum.; Whenever it does not support a parameter defined in the compressed stream,; it must produce a non-ambiguous error code and associated error message; explaining which parameter is unsupported. This specification is intended for use by implementers of software; to compress data into Zstandard format and/or decompress data from Zstandard format.; The Zstandard format is supported by an open source reference implementation,; written in portable C, and available at : https://github.com/f",MatchSource.DOCS,lib/zstd/doc/zstd_compression_format.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_compression_format.md
Security,checksum,checksum," languages; and incorporation into compilations,; provided that the copyright notice and this notice are preserved,; and that any substantive changes or deletions from the original; are clearly marked.; Distribution of this document is unlimited. ### Version. 0.3.1 (25/10/18). Introduction; ------------. The purpose of this document is to define a lossless compressed data format,; that is independent of CPU type, operating system,; file system and character set, suitable for; file compression, pipe and streaming compression,; using the [Zstandard algorithm](http://www.zstandard.org).; The text of the specification assumes a basic background in programming; at the level of bits and other primitive data representations. The data can be produced or consumed,; even for an arbitrarily long sequentially presented input data stream,; using only an a priori bounded amount of intermediate storage,; and hence can be used in data communications.; The format uses the Zstandard compression method,; and optional [xxHash-64 checksum method](http://www.xxhash.org),; for detection of data corruption. The data format defined by this specification; does not attempt to allow random access to compressed data. Unless otherwise indicated below,; a compliant compressor must produce data sets; that conform to the specifications presented here.; It doesn’t need to support all options though. A compliant decompressor must be able to decompress; at least one working set of parameters; that conforms to the specifications presented here.; It may also ignore informative fields, such as checksum.; Whenever it does not support a parameter defined in the compressed stream,; it must produce a non-ambiguous error code and associated error message; explaining which parameter is unsupported. This specification is intended for use by implementers of software; to compress data into Zstandard format and/or decompress data from Zstandard format.; The Zstandard format is supported by an open source reference ",MatchSource.DOCS,lib/zstd/doc/zstd_compression_format.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_compression_format.md
Testability,log,log,"ls_Lengths_Mode`, `Offsets_Mode` and `Match_Lengths_Mode` define the `Compression_Mode` of; literals lengths, offsets, and match lengths symbols respectively. They follow the same enumeration :. | Value | 0 | 1 | 2 | 3 |; | ------------------ | ----------------- | ---------- | --------------------- | ------------- |; | `Compression_Mode` | `Predefined_Mode` | `RLE_Mode` | `FSE_Compressed_Mode` | `Repeat_Mode` |. - `Predefined_Mode` : A predefined FSE distribution table is used, defined in; [default distributions](#default-distributions).; No distribution table will be present.; - `RLE_Mode` : The table description consists of a single byte, which contains the symbol's value.; This symbol will be used for all sequences.; - `FSE_Compressed_Mode` : standard FSE compression.; A distribution table will be present.; The format of this distribution table is described in [FSE Table Description](#fse-table-description).; Note that the maximum allowed accuracy log for literals length and match length tables is 9,; and the maximum accuracy log for the offsets table is 8.; `FSE_Compressed_Mode` must not be used when only one symbol is present,; `RLE_Mode` should be used instead (although any other mode will work).; - `Repeat_Mode` : The table used in the previous `Compressed_Block` with `Number_of_Sequences > 0` will be used again,; or if this is the first block, table in the dictionary will be used.; Note that this includes `RLE_mode`, so if `Repeat_Mode` follows `RLE_Mode`, the same symbol will be repeated.; It also includes `Predefined_Mode`, in which case `Repeat_Mode` will have same outcome as `Predefined_Mode`.; No distribution table will be present.; If this mode is used without any previous sequence table in the frame; (nor [dictionary](#dictionary-format)) to repeat, this should be treated as corruption. #### The codes for literals lengths, match lengths, and offsets. Each symbol is a _code_ in its own context,; which specifies `Baseline` and `Number_of_Bits` to add.; ",MatchSource.DOCS,lib/zstd/doc/zstd_compression_format.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_compression_format.md
Usability,clear,clearly,"Zstandard Compression Format; ============================. ### Notices. Copyright (c) 2016-present Yann Collet, Facebook, Inc. Permission is granted to copy and distribute this document; for any purpose and without charge,; including translations into other languages; and incorporation into compilations,; provided that the copyright notice and this notice are preserved,; and that any substantive changes or deletions from the original; are clearly marked.; Distribution of this document is unlimited. ### Version. 0.3.1 (25/10/18). Introduction; ------------. The purpose of this document is to define a lossless compressed data format,; that is independent of CPU type, operating system,; file system and character set, suitable for; file compression, pipe and streaming compression,; using the [Zstandard algorithm](http://www.zstandard.org).; The text of the specification assumes a basic background in programming; at the level of bits and other primitive data representations. The data can be produced or consumed,; even for an arbitrarily long sequentially presented input data stream,; using only an a priori bounded amount of intermediate storage,; and hence can be used in data communications.; The format uses the Zstandard compression method,; and optional [xxHash-64 checksum method](http://www.xxhash.org),; for detection of data corruption. The data format defined by this specification; does not attempt to allow random access to compressed data. Unless otherwise indicated below,; a compliant compressor must produce data sets; that conform to the specifications presented here.; It doesn’t need to support all options though. A compliant decompressor must be able to decompress; at least one working set of parameters; that conforms to the specifications presented here.; It may also ignore informative fields, such as checksum.; Whenever it does not support a parameter defined in the compressed stream,; it must produce a non-ambiguous error code and associated error message; e",MatchSource.DOCS,lib/zstd/doc/zstd_compression_format.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_compression_format.md
Usability,simpl,simple,"Zstandard library : usage examples; ==================================. - [Simple compression](simple_compression.c) :; Compress a single file.; Introduces usage of : `ZSTD_compress()`. - [Simple decompression](simple_decompression.c) :; Decompress a single file.; Only compatible with simple compression.; Result remains in memory.; Introduces usage of : `ZSTD_decompress()`. - [Streaming memory usage](streaming_memory_usage.c) :; Provides amount of memory used by streaming context; Introduces usage of : `ZSTD_sizeof_CStream()`. - [Streaming compression](streaming_compression.c) :; Compress a single file.; Introduces usage of : `ZSTD_compressStream()`. - [Multiple Streaming compression](multiple_streaming_compression.c) :; Compress multiple files in a single command line.; Introduces memory usage preservation technique,; reducing impact of malloc()/free() and memset() by re-using existing resources. - [Streaming decompression](streaming_decompression.c) :; Decompress a single file compressed by zstd.; Compatible with both simple and streaming compression.; Result is sent to stdout.; Introduces usage of : `ZSTD_decompressStream()`. - [Dictionary compression](dictionary_compression.c) :; Compress multiple files using the same dictionary.; Introduces usage of : `ZSTD_createCDict()` and `ZSTD_compress_usingCDict()`. - [Dictionary decompression](dictionary_decompression.c) :; Decompress multiple files using the same dictionary.; Result remains in memory.; Introduces usage of : `ZSTD_createDDict()` and `ZSTD_decompress_usingDDict()`; ",MatchSource.DOCS,lib/zstd/examples/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/examples/README.md
Availability,error,error,"Zstandard library files; ================================. The __lib__ directory is split into several sub-directories,; in order to make it easier to select or exclude features. #### Building. `Makefile` script is provided, supporting all standard [Makefile conventions](https://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html#Makefile-Conventions),; including commands variables, staged install, directory variables and standard targets.; - `make` : generates both static and dynamic libraries; - `make install` : install libraries in default system directories. `libzstd` default scope includes compression, decompression, dictionary building,; and decoding support for legacy formats >= v0.5.0. #### API. Zstandard's stable API is exposed within [lib/zstd.h](zstd.h). #### Advanced API. Optional advanced features are exposed via :. - `lib/common/zstd_errors.h` : translates `size_t` function results; into an `ZSTD_ErrorCode`, for accurate error handling.; - `ZSTD_STATIC_LINKING_ONLY` : if this macro is defined _before_ including `zstd.h`,; it unlocks access to advanced experimental API,; exposed in second part of `zstd.h`.; These APIs are not ""stable"", their definition may change in the future.; As a consequence, it shall ___never be used with dynamic library___ !; Only static linking is allowed. #### Modular build. It's possible to compile only a limited set of features. - Directory `lib/common` is always required, for all variants.; - Compression source code lies in `lib/compress`; - Decompression source code lies in `lib/decompress`; - It's possible to include only `compress` or only `decompress`, they don't depend on each other.; - `lib/dictBuilder` : makes it possible to generate dictionaries from a set of samples.; The API is exposed in `lib/dictBuilder/zdict.h`.; This module depends on both `lib/common` and `lib/compress` .; - `lib/legacy` : source code to decompress legacy zstd formats, starting from `v0.1.0`.; This module depends on `lib/common` and `",MatchSource.DOCS,lib/zstd/lib/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/lib/README.md
Deployability,install,install,"Zstandard library files; ================================. The __lib__ directory is split into several sub-directories,; in order to make it easier to select or exclude features. #### Building. `Makefile` script is provided, supporting all standard [Makefile conventions](https://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html#Makefile-Conventions),; including commands variables, staged install, directory variables and standard targets.; - `make` : generates both static and dynamic libraries; - `make install` : install libraries in default system directories. `libzstd` default scope includes compression, decompression, dictionary building,; and decoding support for legacy formats >= v0.5.0. #### API. Zstandard's stable API is exposed within [lib/zstd.h](zstd.h). #### Advanced API. Optional advanced features are exposed via :. - `lib/common/zstd_errors.h` : translates `size_t` function results; into an `ZSTD_ErrorCode`, for accurate error handling.; - `ZSTD_STATIC_LINKING_ONLY` : if this macro is defined _before_ including `zstd.h`,; it unlocks access to advanced experimental API,; exposed in second part of `zstd.h`.; These APIs are not ""stable"", their definition may change in the future.; As a consequence, it shall ___never be used with dynamic library___ !; Only static linking is allowed. #### Modular build. It's possible to compile only a limited set of features. - Directory `lib/common` is always required, for all variants.; - Compression source code lies in `lib/compress`; - Decompression source code lies in `lib/decompress`; - It's possible to include only `compress` or only `decompress`, they don't depend on each other.; - `lib/dictBuilder` : makes it possible to generate dictionaries from a set of samples.; The API is exposed in `lib/dictBuilder/zdict.h`.; This module depends on both `lib/common` and `lib/compress` .; - `lib/legacy` : source code to decompress legacy zstd formats, starting from `v0.1.0`.; This module depends on `lib/common` and `",MatchSource.DOCS,lib/zstd/lib/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/lib/README.md
Integrability,depend,depend,"m directories. `libzstd` default scope includes compression, decompression, dictionary building,; and decoding support for legacy formats >= v0.5.0. #### API. Zstandard's stable API is exposed within [lib/zstd.h](zstd.h). #### Advanced API. Optional advanced features are exposed via :. - `lib/common/zstd_errors.h` : translates `size_t` function results; into an `ZSTD_ErrorCode`, for accurate error handling.; - `ZSTD_STATIC_LINKING_ONLY` : if this macro is defined _before_ including `zstd.h`,; it unlocks access to advanced experimental API,; exposed in second part of `zstd.h`.; These APIs are not ""stable"", their definition may change in the future.; As a consequence, it shall ___never be used with dynamic library___ !; Only static linking is allowed. #### Modular build. It's possible to compile only a limited set of features. - Directory `lib/common` is always required, for all variants.; - Compression source code lies in `lib/compress`; - Decompression source code lies in `lib/decompress`; - It's possible to include only `compress` or only `decompress`, they don't depend on each other.; - `lib/dictBuilder` : makes it possible to generate dictionaries from a set of samples.; The API is exposed in `lib/dictBuilder/zdict.h`.; This module depends on both `lib/common` and `lib/compress` .; - `lib/legacy` : source code to decompress legacy zstd formats, starting from `v0.1.0`.; This module depends on `lib/common` and `lib/decompress`.; To enable this feature, define `ZSTD_LEGACY_SUPPORT` during compilation.; Specifying a number limits versions supported to that version onward.; For example, `ZSTD_LEGACY_SUPPORT=2` means : ""support legacy formats >= v0.2.0"".; `ZSTD_LEGACY_SUPPORT=3` means : ""support legacy formats >= v0.3.0"", and so on.; Currently, the default library setting is `ZST_LEGACY_SUPPORT=5`.; It can be changed at build by any other value.; Note that any number >= 8 translates into ""do __not__ support legacy formats"",; since all versions of `zstd` >= v0.8 are comp",MatchSource.DOCS,lib/zstd/lib/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/lib/README.md
Modifiability,variab,variables,"Zstandard library files; ================================. The __lib__ directory is split into several sub-directories,; in order to make it easier to select or exclude features. #### Building. `Makefile` script is provided, supporting all standard [Makefile conventions](https://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html#Makefile-Conventions),; including commands variables, staged install, directory variables and standard targets.; - `make` : generates both static and dynamic libraries; - `make install` : install libraries in default system directories. `libzstd` default scope includes compression, decompression, dictionary building,; and decoding support for legacy formats >= v0.5.0. #### API. Zstandard's stable API is exposed within [lib/zstd.h](zstd.h). #### Advanced API. Optional advanced features are exposed via :. - `lib/common/zstd_errors.h` : translates `size_t` function results; into an `ZSTD_ErrorCode`, for accurate error handling.; - `ZSTD_STATIC_LINKING_ONLY` : if this macro is defined _before_ including `zstd.h`,; it unlocks access to advanced experimental API,; exposed in second part of `zstd.h`.; These APIs are not ""stable"", their definition may change in the future.; As a consequence, it shall ___never be used with dynamic library___ !; Only static linking is allowed. #### Modular build. It's possible to compile only a limited set of features. - Directory `lib/common` is always required, for all variants.; - Compression source code lies in `lib/compress`; - Decompression source code lies in `lib/decompress`; - It's possible to include only `compress` or only `decompress`, they don't depend on each other.; - `lib/dictBuilder` : makes it possible to generate dictionaries from a set of samples.; The API is exposed in `lib/dictBuilder/zdict.h`.; This module depends on both `lib/common` and `lib/compress` .; - `lib/legacy` : source code to decompress legacy zstd formats, starting from `v0.1.0`.; This module depends on `lib/common` and `",MatchSource.DOCS,lib/zstd/lib/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/lib/README.md
Security,expose,exposed,"Zstandard library files; ================================. The __lib__ directory is split into several sub-directories,; in order to make it easier to select or exclude features. #### Building. `Makefile` script is provided, supporting all standard [Makefile conventions](https://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html#Makefile-Conventions),; including commands variables, staged install, directory variables and standard targets.; - `make` : generates both static and dynamic libraries; - `make install` : install libraries in default system directories. `libzstd` default scope includes compression, decompression, dictionary building,; and decoding support for legacy formats >= v0.5.0. #### API. Zstandard's stable API is exposed within [lib/zstd.h](zstd.h). #### Advanced API. Optional advanced features are exposed via :. - `lib/common/zstd_errors.h` : translates `size_t` function results; into an `ZSTD_ErrorCode`, for accurate error handling.; - `ZSTD_STATIC_LINKING_ONLY` : if this macro is defined _before_ including `zstd.h`,; it unlocks access to advanced experimental API,; exposed in second part of `zstd.h`.; These APIs are not ""stable"", their definition may change in the future.; As a consequence, it shall ___never be used with dynamic library___ !; Only static linking is allowed. #### Modular build. It's possible to compile only a limited set of features. - Directory `lib/common` is always required, for all variants.; - Compression source code lies in `lib/compress`; - Decompression source code lies in `lib/decompress`; - It's possible to include only `compress` or only `decompress`, they don't depend on each other.; - `lib/dictBuilder` : makes it possible to generate dictionaries from a set of samples.; The API is exposed in `lib/dictBuilder/zdict.h`.; This module depends on both `lib/common` and `lib/compress` .; - `lib/legacy` : source code to decompress legacy zstd formats, starting from `v0.1.0`.; This module depends on `lib/common` and `",MatchSource.DOCS,lib/zstd/lib/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/lib/README.md
Testability,test,test-dll,"THREAD`; - on POSIX systems : compile with pthread (`-pthread` compilation flag for `gcc`). Both conditions are automatically triggered by invoking `make lib-mt` target.; Note that, when linking a POSIX program with a multithreaded version of `libzstd`,; it's necessary to trigger `-pthread` flag during link stage. Multithreading capabilities are exposed; via [advanced API `ZSTD_compress_generic()` defined in `lib/zstd.h`](https://github.com/facebook/zstd/blob/dev/lib/zstd.h#L919).; This API is still considered experimental,; but is expected to become ""stable"" at some point in the future. #### Windows : using MinGW+MSYS to create DLL. DLL can be created using MinGW+MSYS with the `make libzstd` command.; This command creates `dll\libzstd.dll` and the import library `dll\libzstd.lib`.; The import library is only required with Visual C++.; The header file `zstd.h` and the dynamic library `dll\libzstd.dll` are required to; compile a project using gcc/MinGW.; The dynamic library has to be added to linking options.; It means that if a project that uses ZSTD consists of a single `test-dll.c`; file it should be linked with `dll\libzstd.dll`. For example:; ```; gcc $(CFLAGS) -Iinclude/ test-dll.c -o test-dll dll\libzstd.dll; ```; The compiled executable will require ZSTD DLL which is available at `dll\libzstd.dll`. #### Deprecated API. Obsolete API on their way out are stored in directory `lib/deprecated`.; At this stage, it contains older streaming prototypes, in `lib/deprecated/zbuff.h`.; These prototypes will be removed in some future version.; Consider migrating code towards supported streaming API exposed in `zstd.h`. #### Miscellaneous. The other files are not source code. There are :. - `LICENSE` : contains the BSD license text; - `Makefile` : `make` script to build and install zstd library (static and dynamic); - `BUCK` : support for `buck` build system (https://buckbuild.com/); - `libzstd.pc.in` : for `pkg-config` (used in `make install`); - `README.md` : this file; ",MatchSource.DOCS,lib/zstd/lib/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/lib/README.md
Availability,degraded,degraded,"le : `make zstd HAVE_LZMA=0`; It's also possible to force compilation with lzma support, using `HAVE_LZMA=1`.; In which case, linking stage will fail if `lzma` library cannot be found.; This is useful to prevent silent feature disabling. - __HAVE_LZ4__ : `zstd` can compress and decompress files in `.lz4` formats.; This is ordered through commands `--format=lz4`.; Alternatively, symlinks named `lz4`, or `unlz4` will mimic intended behavior.; `.lz4` support is automatically enabled when `lz4` library is detected at build time.; It's possible to disable `.lz4` support, by setting `HAVE_LZ4=0` .; Example : `make zstd HAVE_LZ4=0`; It's also possible to force compilation with lz4 support, using `HAVE_LZ4=1`.; In which case, linking stage will fail if `lz4` library cannot be found.; This is useful to prevent silent feature disabling. - __BACKTRACE__ : `zstd` can display a stack backtrace when execution; generates a runtime exception. By default, this feature may be; degraded/disabled on some platforms unless additional compiler directives are; applied. When triaging a runtime issue, enabling this feature can provide; more context to determine the location of the fault.; Example : `make zstd BACKTRACE=1`. #### Aggregation of parameters; CLI supports aggregation of parameters i.e. `-b1`, `-e18`, and `-i1` can be joined into `-b1e18i1`. #### Symlink shortcuts; It's possible to invoke `zstd` through a symlink.; When the name of the symlink has a specific value, it triggers an associated behavior.; - `zstdmt` : compress using all cores available on local system.; - `zcat` : will decompress and output target file using any of the supported formats. `gzcat` and `zstdcat` are also equivalent.; - `gzip` : if zlib support is enabled, will mimic `gzip` by compressing file using `.gz` format, removing source file by default (use `--keep` to preserve). If zlib is not supported, triggers an error.; - `xz` : if lzma support is enabled, will mimic `xz` by compressing file using `.xz` forma",MatchSource.DOCS,lib/zstd/programs/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/README.md
Deployability,deploy,deploying,"will mimic `lz4` by compressing file using `.lz4` format. If lz4 is not supported, triggers an error.; - `unzstd` and `unlz4` will decompress any of the supported format.; - `ungz`, `unxz` and `unlzma` will do the same, and will also remove source file by default (use `--keep` to preserve). #### Dictionary builder in Command Line Interface; Zstd offers a training mode, which can be used to tune the algorithm for a selected; type of data, by providing it with a few samples. The result of the training is stored; in a file selected with the `-o` option (default name is `dictionary`),; which can be loaded before compression and decompression. Using a dictionary, the compression ratio achievable on small data improves dramatically.; These compression gains are achieved while simultaneously providing faster compression and decompression speeds.; Dictionary work if there is some correlation in a family of small data (there is no universal dictionary).; Hence, deploying one dictionary per type of data will provide the greater benefits.; Dictionary gains are mostly effective in the first few KB. Then, the compression algorithm; will rely more and more on previously decoded content to compress the rest of the file. Usage of the dictionary builder and created dictionaries with CLI:. 1. Create the dictionary : `zstd --train PathToTrainingSet/* -o dictionaryName`; 2. Compress with the dictionary: `zstd FILE -D dictionaryName`; 3. Decompress with the dictionary: `zstd --decompress FILE.zst -D dictionaryName`. #### Benchmark in Command Line Interface; CLI includes in-memory compression benchmark module for zstd.; The benchmark is conducted using given filenames. The files are read into memory and joined together.; It makes benchmark more precise as it eliminates I/O overhead.; Multiple filenames can be supplied, as multiple parameters, with wildcards,; or names of directories can be used as parameters with `-r` option. The benchmark measures ratio, compressed size, compression and ",MatchSource.DOCS,lib/zstd/programs/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/README.md
Integrability,depend,dependent," with selectivity (default: 9); -o file : `file` is dictionary name (default: dictionary); --maxdict=# : limit dictionary to specified size (default: 112640); --dictID=# : force dictionary ID to specified value (default: random). Benchmark arguments :; -b# : benchmark file(s), using # compression level (default: 3); -e# : test all compression levels from -bX to # (default: 1); -i# : minimum evaluation time in seconds (default: 3s); -B# : cut file into independent blocks of size # (default: no block); --priority=rt : set process priority to real-time; ```. #### Long distance matching mode; The long distance matching mode, enabled with `--long`, is designed to improve; the compression ratio for files with long matches at a large distance (up to the; maximum window size, `128 MiB`) while still maintaining compression speed. Enabling this mode sets the window size to `128 MiB` and thus increases the memory; usage for both the compressor and decompressor. Performance in terms of speed is; dependent on long matches being found. Compression speed may degrade if few long; matches are found. Decompression speed usually improves when there are many long; distance matches. Below are graphs comparing the compression speed, compression ratio, and; decompression speed with and without long distance matching on an ideal use; case: a tar of four versions of clang (versions `3.4.1`, `3.4.2`, `3.5.0`,; `3.5.1`) with a total size of `244889600 B`. This is an ideal use case as there; are many long distance matches within the maximum window size of `128 MiB` (each; version is less than `128 MiB`). Compression Speed vs Ratio | Decompression Speed; ---------------------------|---------------------; ![Compression Speed vs Ratio](https://raw.githubusercontent.com/facebook/zstd/v1.3.3/doc/images/ldmCspeed.png ""Compression Speed vs Ratio"") | ![Decompression Speed](https://raw.githubusercontent.com/facebook/zstd/v1.3.3/doc/images/ldmDspeed.png ""Decompression Speed""). | Method | Compression rati",MatchSource.DOCS,lib/zstd/programs/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/README.md
Modifiability,variab,variables,"Command Line Interface for Zstandard library; ============================================. Command Line Interface (CLI) can be created using the `make` command without any additional parameters.; There are however other Makefile targets that create different variations of CLI:; - `zstd` : default CLI supporting gzip-like arguments; includes dictionary builder, benchmark, and support for decompression of legacy zstd formats; - `zstd_nolegacy` : Same as `zstd` but without support for legacy zstd formats; - `zstd-small` : CLI optimized for minimal size; no dictionary builder, no benchmark, and no support for legacy zstd formats; - `zstd-compress` : version of CLI which can only compress into zstd format; - `zstd-decompress` : version of CLI which can only decompress zstd format. #### Compilation variables; `zstd` scope can be altered by modifying the following `make` variables :. - __HAVE_THREAD__ : multithreading is automatically enabled when `pthread` is detected.; It's possible to disable multithread support, by setting `HAVE_THREAD=0`.; Example : `make zstd HAVE_THREAD=0`; It's also possible to force multithread support, using `HAVE_THREAD=1`.; In which case, linking stage will fail if neither `pthread` nor `windows.h` library can be found.; This is useful to ensure this feature is not silently disabled. - __ZSTD_LEGACY_SUPPORT__ : `zstd` can decompress files compressed by older versions of `zstd`.; Starting v0.8.0, all versions of `zstd` produce frames compliant with the [specification](../doc/zstd_compression_format.md), and are therefore compatible.; But older versions (< v0.8.0) produced different, incompatible, frames.; By default, `zstd` supports decoding legacy formats >= v0.4.0 (`ZSTD_LEGACY_SUPPORT=4`).; This can be altered by modifying this compilation variable.; `ZSTD_LEGACY_SUPPORT=1` means ""support all formats >= v0.1.0"".; `ZSTD_LEGACY_SUPPORT=2` means ""support all formats >= v0.2.0"", and so on.; `ZSTD_LEGACY_SUPPORT=0` means _DO NOT_ support any legac",MatchSource.DOCS,lib/zstd/programs/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/README.md
Performance,optimiz,optimized,"Command Line Interface for Zstandard library; ============================================. Command Line Interface (CLI) can be created using the `make` command without any additional parameters.; There are however other Makefile targets that create different variations of CLI:; - `zstd` : default CLI supporting gzip-like arguments; includes dictionary builder, benchmark, and support for decompression of legacy zstd formats; - `zstd_nolegacy` : Same as `zstd` but without support for legacy zstd formats; - `zstd-small` : CLI optimized for minimal size; no dictionary builder, no benchmark, and no support for legacy zstd formats; - `zstd-compress` : version of CLI which can only compress into zstd format; - `zstd-decompress` : version of CLI which can only decompress zstd format. #### Compilation variables; `zstd` scope can be altered by modifying the following `make` variables :. - __HAVE_THREAD__ : multithreading is automatically enabled when `pthread` is detected.; It's possible to disable multithread support, by setting `HAVE_THREAD=0`.; Example : `make zstd HAVE_THREAD=0`; It's also possible to force multithread support, using `HAVE_THREAD=1`.; In which case, linking stage will fail if neither `pthread` nor `windows.h` library can be found.; This is useful to ensure this feature is not silently disabled. - __ZSTD_LEGACY_SUPPORT__ : `zstd` can decompress files compressed by older versions of `zstd`.; Starting v0.8.0, all versions of `zstd` produce frames compliant with the [specification](../doc/zstd_compression_format.md), and are therefore compatible.; But older versions (< v0.8.0) produced different, incompatible, frames.; By default, `zstd` supports decoding legacy formats >= v0.4.0 (`ZSTD_LEGACY_SUPPORT=4`).; This can be altered by modifying this compilation variable.; `ZSTD_LEGACY_SUPPORT=1` means ""support all formats >= v0.1.0"".; `ZSTD_LEGACY_SUPPORT=2` means ""support all formats >= v0.2.0"", and so on.; `ZSTD_LEGACY_SUPPORT=0` means _DO NOT_ support any legac",MatchSource.DOCS,lib/zstd/programs/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/README.md
Safety,detect,detected,"Command Line Interface for Zstandard library; ============================================. Command Line Interface (CLI) can be created using the `make` command without any additional parameters.; There are however other Makefile targets that create different variations of CLI:; - `zstd` : default CLI supporting gzip-like arguments; includes dictionary builder, benchmark, and support for decompression of legacy zstd formats; - `zstd_nolegacy` : Same as `zstd` but without support for legacy zstd formats; - `zstd-small` : CLI optimized for minimal size; no dictionary builder, no benchmark, and no support for legacy zstd formats; - `zstd-compress` : version of CLI which can only compress into zstd format; - `zstd-decompress` : version of CLI which can only decompress zstd format. #### Compilation variables; `zstd` scope can be altered by modifying the following `make` variables :. - __HAVE_THREAD__ : multithreading is automatically enabled when `pthread` is detected.; It's possible to disable multithread support, by setting `HAVE_THREAD=0`.; Example : `make zstd HAVE_THREAD=0`; It's also possible to force multithread support, using `HAVE_THREAD=1`.; In which case, linking stage will fail if neither `pthread` nor `windows.h` library can be found.; This is useful to ensure this feature is not silently disabled. - __ZSTD_LEGACY_SUPPORT__ : `zstd` can decompress files compressed by older versions of `zstd`.; Starting v0.8.0, all versions of `zstd` produce frames compliant with the [specification](../doc/zstd_compression_format.md), and are therefore compatible.; But older versions (< v0.8.0) produced different, incompatible, frames.; By default, `zstd` supports decoding legacy formats >= v0.4.0 (`ZSTD_LEGACY_SUPPORT=4`).; This can be altered by modifying this compilation variable.; `ZSTD_LEGACY_SUPPORT=1` means ""support all formats >= v0.1.0"".; `ZSTD_LEGACY_SUPPORT=2` means ""support all formats >= v0.2.0"", and so on.; `ZSTD_LEGACY_SUPPORT=0` means _DO NOT_ support any legac",MatchSource.DOCS,lib/zstd/programs/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/README.md
Security,integrity,integrity,"; The `-i` parameter selects minimal time used for each of tested levels. #### Usage of Command Line Interface; The full list of options can be obtained with `-h` or `-H` parameter:; ```; Usage :; zstd [args] [FILE(s)] [-o file]. FILE : a filename; with no FILE, or when FILE is - , read standard input; Arguments :; -# : # compression level (1-19, default: 3); -d : decompression; -D file: use `file` as Dictionary; -o file: result stored into `file` (only if 1 input file); -f : overwrite output without prompting and (de)compress links; --rm : remove source file(s) after successful de/compression; -k : preserve source file(s) (default); -h/-H : display help/long help and exit. Advanced arguments :; -V : display Version number and exit; -v : verbose mode; specify multiple times to increase verbosity; -q : suppress warnings; specify twice to suppress errors too; -c : force write to standard output, even if it is the console; -l : print information about zstd compressed files; --ultra : enable levels beyond 19, up to 22 (requires more memory); --long : enable long distance matching (requires more memory); --no-dictID : don't write dictID into header (dictionary compression); --[no-]check : integrity check (default: enabled); -r : operate recursively on directories; --format=gzip : compress files to the .gz format; --format=xz : compress files to the .xz format; --format=lzma : compress files to the .lzma format; --test : test compressed file integrity; --[no-]sparse : sparse mode (default: disabled); -M# : Set a memory usage limit for decompression; -- : All arguments after ""--"" are treated as files. Dictionary builder :; --train ## : create a dictionary from a training set of files; --train-cover[=k=#,d=#,steps=#,split=#] : use the cover algorithm with optional args; --train-fastcover[=k=#,d=#,f=#,steps=#,split=#,accel=#] : use the fastcover algorithm with optional args; --train-legacy[=s=#] : use the legacy algorithm with selectivity (default: 9); -o file : `file` is dic",MatchSource.DOCS,lib/zstd/programs/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/README.md
Testability,benchmark,benchmark,"Command Line Interface for Zstandard library; ============================================. Command Line Interface (CLI) can be created using the `make` command without any additional parameters.; There are however other Makefile targets that create different variations of CLI:; - `zstd` : default CLI supporting gzip-like arguments; includes dictionary builder, benchmark, and support for decompression of legacy zstd formats; - `zstd_nolegacy` : Same as `zstd` but without support for legacy zstd formats; - `zstd-small` : CLI optimized for minimal size; no dictionary builder, no benchmark, and no support for legacy zstd formats; - `zstd-compress` : version of CLI which can only compress into zstd format; - `zstd-decompress` : version of CLI which can only decompress zstd format. #### Compilation variables; `zstd` scope can be altered by modifying the following `make` variables :. - __HAVE_THREAD__ : multithreading is automatically enabled when `pthread` is detected.; It's possible to disable multithread support, by setting `HAVE_THREAD=0`.; Example : `make zstd HAVE_THREAD=0`; It's also possible to force multithread support, using `HAVE_THREAD=1`.; In which case, linking stage will fail if neither `pthread` nor `windows.h` library can be found.; This is useful to ensure this feature is not silently disabled. - __ZSTD_LEGACY_SUPPORT__ : `zstd` can decompress files compressed by older versions of `zstd`.; Starting v0.8.0, all versions of `zstd` produce frames compliant with the [specification](../doc/zstd_compression_format.md), and are therefore compatible.; But older versions (< v0.8.0) produced different, incompatible, frames.; By default, `zstd` supports decoding legacy formats >= v0.4.0 (`ZSTD_LEGACY_SUPPORT=4`).; This can be altered by modifying this compilation variable.; `ZSTD_LEGACY_SUPPORT=1` means ""support all formats >= v0.1.0"".; `ZSTD_LEGACY_SUPPORT=2` means ""support all formats >= v0.2.0"", and so on.; `ZSTD_LEGACY_SUPPORT=0` means _DO NOT_ support any legac",MatchSource.DOCS,lib/zstd/programs/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/README.md
Availability,error,error,"to `zstd -d`. `zstdcat` is equivalent to `zstd -dcf`. DESCRIPTION; -----------; `zstd` is a fast lossless compression algorithm and data compression tool,; with command line syntax similar to `gzip (1)` and `xz (1)`.; It is based on the **LZ77** family, with further FSE & huff0 entropy stages.; `zstd` offers highly configurable compression speed,; with fast modes at > 200 MB/s per core,; and strong modes nearing lzma compression ratios.; It also features a very fast decoder, with speeds > 500 MB/s per core. `zstd` command line syntax is generally similar to gzip,; but features the following differences :. - Source files are preserved by default.; It's possible to remove them automatically by using the `--rm` command.; - When compressing a single file, `zstd` displays progress notifications; and result summary by default.; Use `-q` to turn them off.; - `zstd` does not accept input from console,; but it properly accepts `stdin` when it's not the console.; - `zstd` displays a short help page when command line is an error.; Use `-q` to turn it off. `zstd` compresses or decompresses each _file_ according to the selected; operation mode.; If no _files_ are given or _file_ is `-`, `zstd` reads from standard input; and writes the processed data to standard output.; `zstd` will refuse to write compressed data to standard output; if it is a terminal : it will display an error message and skip the _file_.; Similarly, `zstd` will refuse to read compressed data from standard input; if it is a terminal. Unless `--stdout` or `-o` is specified, _files_ are written to a new file; whose name is derived from the source _file_ name:. * When compressing, the suffix `.zst` is appended to the source filename to; get the target filename.; * When decompressing, the `.zst` suffix is removed from the source filename to; get the target filename. ### Concatenation with .zst files; It is possible to concatenate `.zst` files as is.; `zstd` will decompress such files as if they were a single `.zst",MatchSource.DOCS,lib/zstd/programs/zstd.1.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/zstd.1.md
Energy Efficiency,adapt,adapt,"tio for files with; long matches at a large distance. Note: If `windowLog` is set to larger than 27, `--long=windowLog` or; `--memory=windowSize` needs to be passed to the decompressor.; * `-T#`, `--threads=#`:; Compress using `#` working threads (default: 1).; If `#` is 0, attempt to detect and use the number of physical CPU cores.; In all cases, the nb of threads is capped to ZSTDMT_NBTHREADS_MAX==200.; This modifier does nothing if `zstd` is compiled without multithread support.; * `--single-thread`:; Does not spawn a thread for compression, use a single thread for both I/O and compression.; In this mode, compression is serialized with I/O, which is slightly slower.; (This is different from `-T1`, which spawns 1 compression thread in parallel of I/O).; This mode is the only one available when multithread support is disabled.; Single-thread mode features lower memory usage.; Final compressed result is slightly different from `-T1`.; * `--adapt[=min=#,max=#]` :; `zstd` will dynamically adapt compression level to perceived I/O conditions.; Compression level adaptation can be observed live by using command `-v`.; Adaptation can be constrained between supplied `min` and `max` levels.; The feature works when combined with multi-threading and `--long` mode.; It does not work with `--single-thread`.; It sets window size to 8 MB by default (can be changed manually, see `wlog`).; Due to the chaotic nature of dynamic adaptation, compressed result is not reproducible.; _note_ : at the time of this writing, `--adapt` can remain stuck at low speed; when combined with multiple worker threads (>=2).; * `--rsyncable` :; `zstd` will periodically synchronize the compression state to make the; compressed file more rsync-friendly. There is a negligible impact to; compression ratio, and the faster compression levels will see a small; compression speed hit.; This feature does not work with `--single-thread`. You probably don't want; to use it with long range mode, since it will decrease",MatchSource.DOCS,lib/zstd/programs/zstd.1.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/zstd.1.md
Integrability,message,message,"d,; with fast modes at > 200 MB/s per core,; and strong modes nearing lzma compression ratios.; It also features a very fast decoder, with speeds > 500 MB/s per core. `zstd` command line syntax is generally similar to gzip,; but features the following differences :. - Source files are preserved by default.; It's possible to remove them automatically by using the `--rm` command.; - When compressing a single file, `zstd` displays progress notifications; and result summary by default.; Use `-q` to turn them off.; - `zstd` does not accept input from console,; but it properly accepts `stdin` when it's not the console.; - `zstd` displays a short help page when command line is an error.; Use `-q` to turn it off. `zstd` compresses or decompresses each _file_ according to the selected; operation mode.; If no _files_ are given or _file_ is `-`, `zstd` reads from standard input; and writes the processed data to standard output.; `zstd` will refuse to write compressed data to standard output; if it is a terminal : it will display an error message and skip the _file_.; Similarly, `zstd` will refuse to read compressed data from standard input; if it is a terminal. Unless `--stdout` or `-o` is specified, _files_ are written to a new file; whose name is derived from the source _file_ name:. * When compressing, the suffix `.zst` is appended to the source filename to; get the target filename.; * When decompressing, the `.zst` suffix is removed from the source filename to; get the target filename. ### Concatenation with .zst files; It is possible to concatenate `.zst` files as is.; `zstd` will decompress such files as if they were a single `.zst` file. OPTIONS; -------. ### Integer suffixes and special values; In most places where an integer argument is expected,; an optional suffix is supported to easily indicate large integers.; There must be no space between the integer and the suffix. * `KiB`:; Multiply the integer by 1,024 (2\^10).; `Ki`, `K`, and `KB` are accepted as synonyms for",MatchSource.DOCS,lib/zstd/programs/zstd.1.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/zstd.1.md
Modifiability,config,configurable,"zstd(1) -- zstd, zstdmt, unzstd, zstdcat - Compress or decompress .zst files; ============================================================================. SYNOPSIS; --------. `zstd` [*OPTIONS*] [-|_INPUT-FILE_] [-o _OUTPUT-FILE_]. `zstdmt` is equivalent to `zstd -T0`. `unzstd` is equivalent to `zstd -d`. `zstdcat` is equivalent to `zstd -dcf`. DESCRIPTION; -----------; `zstd` is a fast lossless compression algorithm and data compression tool,; with command line syntax similar to `gzip (1)` and `xz (1)`.; It is based on the **LZ77** family, with further FSE & huff0 entropy stages.; `zstd` offers highly configurable compression speed,; with fast modes at > 200 MB/s per core,; and strong modes nearing lzma compression ratios.; It also features a very fast decoder, with speeds > 500 MB/s per core. `zstd` command line syntax is generally similar to gzip,; but features the following differences :. - Source files are preserved by default.; It's possible to remove them automatically by using the `--rm` command.; - When compressing a single file, `zstd` displays progress notifications; and result summary by default.; Use `-q` to turn them off.; - `zstd` does not accept input from console,; but it properly accepts `stdin` when it's not the console.; - `zstd` displays a short help page when command line is an error.; Use `-q` to turn it off. `zstd` compresses or decompresses each _file_ according to the selected; operation mode.; If no _files_ are given or _file_ is `-`, `zstd` reads from standard input; and writes the processed data to standard output.; `zstd` will refuse to write compressed data to standard output; if it is a terminal : it will display an error message and skip the _file_.; Similarly, `zstd` will refuse to read compressed data from standard input; if it is a terminal. Unless `--stdout` or `-o` is specified, _files_ are written to a new file; whose name is derived from the source _file_ name:. * When compressing, the suffix `.zst` is appended to the source fi",MatchSource.DOCS,lib/zstd/programs/zstd.1.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/zstd.1.md
Performance,multi-thread,multi-threading,"ng threads (default: 1).; If `#` is 0, attempt to detect and use the number of physical CPU cores.; In all cases, the nb of threads is capped to ZSTDMT_NBTHREADS_MAX==200.; This modifier does nothing if `zstd` is compiled without multithread support.; * `--single-thread`:; Does not spawn a thread for compression, use a single thread for both I/O and compression.; In this mode, compression is serialized with I/O, which is slightly slower.; (This is different from `-T1`, which spawns 1 compression thread in parallel of I/O).; This mode is the only one available when multithread support is disabled.; Single-thread mode features lower memory usage.; Final compressed result is slightly different from `-T1`.; * `--adapt[=min=#,max=#]` :; `zstd` will dynamically adapt compression level to perceived I/O conditions.; Compression level adaptation can be observed live by using command `-v`.; Adaptation can be constrained between supplied `min` and `max` levels.; The feature works when combined with multi-threading and `--long` mode.; It does not work with `--single-thread`.; It sets window size to 8 MB by default (can be changed manually, see `wlog`).; Due to the chaotic nature of dynamic adaptation, compressed result is not reproducible.; _note_ : at the time of this writing, `--adapt` can remain stuck at low speed; when combined with multiple worker threads (>=2).; * `--rsyncable` :; `zstd` will periodically synchronize the compression state to make the; compressed file more rsync-friendly. There is a negligible impact to; compression ratio, and the faster compression levels will see a small; compression speed hit.; This feature does not work with `--single-thread`. You probably don't want; to use it with long range mode, since it will decrease the effectiveness of; the synchronization points, but your milage may vary.; * `-D file`:; use `file` as Dictionary to compress or decompress FILE(s); * `--no-dictID`:; do not store dictionary ID within frame header (dictionary compres",MatchSource.DOCS,lib/zstd/programs/zstd.1.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/zstd.1.md
Safety,detect,detect,"ts to `1`.; The higher the value, the faster the compression speed,; at the cost of some compression ratio.; This setting overwrites compression level if one was set previously.; Similarly, if a compression level is set after `--fast`, it overrides it.; * `--ultra`:; unlocks high compression levels 20+ (maximum 22), using a lot more memory.; Note that decompression will also require more memory when using these levels.; * `--long[=#]`:; enables long distance matching with `#` `windowLog`, if not `#` is not; present it defaults to `27`.; This increases the window size (`windowLog`) and memory usage for both the; compressor and decompressor.; This setting is designed to improve the compression ratio for files with; long matches at a large distance. Note: If `windowLog` is set to larger than 27, `--long=windowLog` or; `--memory=windowSize` needs to be passed to the decompressor.; * `-T#`, `--threads=#`:; Compress using `#` working threads (default: 1).; If `#` is 0, attempt to detect and use the number of physical CPU cores.; In all cases, the nb of threads is capped to ZSTDMT_NBTHREADS_MAX==200.; This modifier does nothing if `zstd` is compiled without multithread support.; * `--single-thread`:; Does not spawn a thread for compression, use a single thread for both I/O and compression.; In this mode, compression is serialized with I/O, which is slightly slower.; (This is different from `-T1`, which spawns 1 compression thread in parallel of I/O).; This mode is the only one available when multithread support is disabled.; Single-thread mode features lower memory usage.; Final compressed result is slightly different from `-T1`.; * `--adapt[=min=#,max=#]` :; `zstd` will dynamically adapt compression level to perceived I/O conditions.; Compression level adaptation can be observed live by using command `-v`.; Adaptation can be constrained between supplied `min` and `max` levels.; The feature works when combined with multi-threading and `--long` mode.; It does not work with ",MatchSource.DOCS,lib/zstd/programs/zstd.1.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/zstd.1.md
Security,integrity,integrity," with .zst files; It is possible to concatenate `.zst` files as is.; `zstd` will decompress such files as if they were a single `.zst` file. OPTIONS; -------. ### Integer suffixes and special values; In most places where an integer argument is expected,; an optional suffix is supported to easily indicate large integers.; There must be no space between the integer and the suffix. * `KiB`:; Multiply the integer by 1,024 (2\^10).; `Ki`, `K`, and `KB` are accepted as synonyms for `KiB`.; * `MiB`:; Multiply the integer by 1,048,576 (2\^20).; `Mi`, `M`, and `MB` are accepted as synonyms for `MiB`. ### Operation mode; If multiple operation mode options are given,; the last one takes effect. * `-z`, `--compress`:; Compress.; This is the default operation mode when no operation mode option is specified; and no other operation mode is implied from the command name; (for example, `unzstd` implies `--decompress`).; * `-d`, `--decompress`, `--uncompress`:; Decompress.; * `-t`, `--test`:; Test the integrity of compressed _files_.; This option is equivalent to `--decompress --stdout` except that the; decompressed data is discarded instead of being written to standard output.; No files are created or removed.; * `-b#`:; Benchmark file(s) using compression level #; * `--train FILEs`:; Use FILEs as a training set to create a dictionary.; The training set should contain a lot of small files (> 100).; * `-l`, `--list`:; Display information related to a zstd compressed file, such as size, ratio, and checksum.; Some of these fields may not be available.; This command can be augmented with the `-v` modifier. ### Operation modifiers. * `-#`:; `#` compression level \[1-19] (default: 3); * `--fast[=#]`:; switch to ultra-fast compression levels.; If `=#` is not present, it defaults to `1`.; The higher the value, the faster the compression speed,; at the cost of some compression ratio.; This setting overwrites compression level if one was set previously.; Similarly, if a compression level is s",MatchSource.DOCS,lib/zstd/programs/zstd.1.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/zstd.1.md
Testability,test,test," with .zst files; It is possible to concatenate `.zst` files as is.; `zstd` will decompress such files as if they were a single `.zst` file. OPTIONS; -------. ### Integer suffixes and special values; In most places where an integer argument is expected,; an optional suffix is supported to easily indicate large integers.; There must be no space between the integer and the suffix. * `KiB`:; Multiply the integer by 1,024 (2\^10).; `Ki`, `K`, and `KB` are accepted as synonyms for `KiB`.; * `MiB`:; Multiply the integer by 1,048,576 (2\^20).; `Mi`, `M`, and `MB` are accepted as synonyms for `MiB`. ### Operation mode; If multiple operation mode options are given,; the last one takes effect. * `-z`, `--compress`:; Compress.; This is the default operation mode when no operation mode option is specified; and no other operation mode is implied from the command name; (for example, `unzstd` implies `--decompress`).; * `-d`, `--decompress`, `--uncompress`:; Decompress.; * `-t`, `--test`:; Test the integrity of compressed _files_.; This option is equivalent to `--decompress --stdout` except that the; decompressed data is discarded instead of being written to standard output.; No files are created or removed.; * `-b#`:; Benchmark file(s) using compression level #; * `--train FILEs`:; Use FILEs as a training set to create a dictionary.; The training set should contain a lot of small files (> 100).; * `-l`, `--list`:; Display information related to a zstd compressed file, such as size, ratio, and checksum.; Some of these fields may not be available.; This command can be augmented with the `-v` modifier. ### Operation modifiers. * `-#`:; `#` compression level \[1-19] (default: 3); * `--fast[=#]`:; switch to ultra-fast compression levels.; If `=#` is not present, it defaults to `1`.; The higher the value, the faster the compression speed,; at the cost of some compression ratio.; This setting overwrites compression level if one was set previously.; Similarly, if a compression level is s",MatchSource.DOCS,lib/zstd/programs/zstd.1.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/programs/zstd.1.md
Availability,avail,available,"default 300 seconds) seconds the script checks repository for new commits.; If a new commit is found it is compiled and a speed benchmark for this commit is performed.; The results of the speed benchmark are compared to the previous results.; If compression or decompression speed for one of zstd levels is lower than `lowerLimit` (an optional parameter, default 0.98) the speed benchmark is restarted.; If second results are also lower than `lowerLimit` the warning e-mail is send to recipients from the list (the `emails` parameter). Additional remarks:; - To be sure that speed results are accurate the script should be run on a ""stable"" target system with no other jobs running in parallel; - Using the script with virtual machines can lead to large variations of speed results; - The speed benchmark is not performed until computers' load average is lower than `maxLoadAvg` (an optional parameter, default 0.75); - The script sends e-mails using `mutt`; if `mutt` is not available it sends e-mails without attachments using `mail`; if both are not available it only prints a warning. The example usage with two test files, one e-mail address, and with an additional message:; ```; ./test-zstd-speed.py ""silesia.tar calgary.tar"" ""email@gmail.com"" --message ""tested on my laptop"" --sleepTime 60; ``` . To run the script in background please use:; ```; nohup ./test-zstd-speed.py testFileNames emails &; ```. The full list of parameters:; ```; positional arguments:; testFileNames file names list for speed benchmark; emails list of e-mail addresses to send warnings. optional arguments:; -h, --help show this help message and exit; --message MESSAGE attach an additional message to e-mail; --lowerLimit LOWERLIMIT; send email if speed is lower than given limit; --maxLoadAvg MAXLOADAVG; maximum load average to start testing; --lastCLevel LASTCLEVEL; last compression level for testing; --sleepTime SLEEPTIME; frequency of repository checking in seconds; ```. #### `decodecorpus` - tool to generate",MatchSource.DOCS,lib/zstd/tests/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/README.md
Deployability,release,released,"=========. This directory contains the following programs and scripts:; - `datagen` : Synthetic and parametrable data generator, for tests; - `fullbench` : Precisely measure speed for each zstd inner functions; - `fuzzer` : Test tool, to check zstd integrity on target platform; - `paramgrill` : parameter tester for zstd; - `test-zstd-speed.py` : script for testing zstd speed difference between commits; - `test-zstd-versions.py` : compatibility test between zstd versions stored on Github (v0.1+); - `zbufftest` : Test tool to check ZBUFF (a buffered streaming API) integrity; - `zstreamtest` : Fuzzer test tool for zstd streaming API; - `legacy` : Test tool to test decoding of legacy zstd frames; - `decodecorpus` : Tool to generate valid Zstandard frames, for verifying decoder implementations. #### `test-zstd-versions.py` - script for testing zstd interoperability between versions. This script creates `versionsTest` directory to which zstd repository is cloned.; Then all tagged (released) versions of zstd are compiled.; In the following step interoperability between zstd versions is checked. #### `test-zstd-speed.py` - script for testing zstd speed difference between commits. This script creates `speedTest` directory to which zstd repository is cloned.; Then it compiles all branches of zstd and performs a speed benchmark for a given list of files (the `testFileNames` parameter).; After `sleepTime` (an optional parameter, default 300 seconds) seconds the script checks repository for new commits.; If a new commit is found it is compiled and a speed benchmark for this commit is performed.; The results of the speed benchmark are compared to the previous results.; If compression or decompression speed for one of zstd levels is lower than `lowerLimit` (an optional parameter, default 0.98) the speed benchmark is restarted.; If second results are also lower than `lowerLimit` the warning e-mail is send to recipients from the list (the `emails` parameter). Additional remarks:; - T",MatchSource.DOCS,lib/zstd/tests/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/README.md
Integrability,interoperab,interoperability,"Programs and scripts for automated testing of Zstandard; =======================================================. This directory contains the following programs and scripts:; - `datagen` : Synthetic and parametrable data generator, for tests; - `fullbench` : Precisely measure speed for each zstd inner functions; - `fuzzer` : Test tool, to check zstd integrity on target platform; - `paramgrill` : parameter tester for zstd; - `test-zstd-speed.py` : script for testing zstd speed difference between commits; - `test-zstd-versions.py` : compatibility test between zstd versions stored on Github (v0.1+); - `zbufftest` : Test tool to check ZBUFF (a buffered streaming API) integrity; - `zstreamtest` : Fuzzer test tool for zstd streaming API; - `legacy` : Test tool to test decoding of legacy zstd frames; - `decodecorpus` : Tool to generate valid Zstandard frames, for verifying decoder implementations. #### `test-zstd-versions.py` - script for testing zstd interoperability between versions. This script creates `versionsTest` directory to which zstd repository is cloned.; Then all tagged (released) versions of zstd are compiled.; In the following step interoperability between zstd versions is checked. #### `test-zstd-speed.py` - script for testing zstd speed difference between commits. This script creates `speedTest` directory to which zstd repository is cloned.; Then it compiles all branches of zstd and performs a speed benchmark for a given list of files (the `testFileNames` parameter).; After `sleepTime` (an optional parameter, default 300 seconds) seconds the script checks repository for new commits.; If a new commit is found it is compiled and a speed benchmark for this commit is performed.; The results of the speed benchmark are compared to the previous results.; If compression or decompression speed for one of zstd levels is lower than `lowerLimit` (an optional parameter, default 0.98) the speed benchmark is restarted.; If second results are also lower than `lowerLimit` th",MatchSource.DOCS,lib/zstd/tests/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/README.md
Performance,perform,performs,"std-speed.py` : script for testing zstd speed difference between commits; - `test-zstd-versions.py` : compatibility test between zstd versions stored on Github (v0.1+); - `zbufftest` : Test tool to check ZBUFF (a buffered streaming API) integrity; - `zstreamtest` : Fuzzer test tool for zstd streaming API; - `legacy` : Test tool to test decoding of legacy zstd frames; - `decodecorpus` : Tool to generate valid Zstandard frames, for verifying decoder implementations. #### `test-zstd-versions.py` - script for testing zstd interoperability between versions. This script creates `versionsTest` directory to which zstd repository is cloned.; Then all tagged (released) versions of zstd are compiled.; In the following step interoperability between zstd versions is checked. #### `test-zstd-speed.py` - script for testing zstd speed difference between commits. This script creates `speedTest` directory to which zstd repository is cloned.; Then it compiles all branches of zstd and performs a speed benchmark for a given list of files (the `testFileNames` parameter).; After `sleepTime` (an optional parameter, default 300 seconds) seconds the script checks repository for new commits.; If a new commit is found it is compiled and a speed benchmark for this commit is performed.; The results of the speed benchmark are compared to the previous results.; If compression or decompression speed for one of zstd levels is lower than `lowerLimit` (an optional parameter, default 0.98) the speed benchmark is restarted.; If second results are also lower than `lowerLimit` the warning e-mail is send to recipients from the list (the `emails` parameter). Additional remarks:; - To be sure that speed results are accurate the script should be run on a ""stable"" target system with no other jobs running in parallel; - Using the script with virtual machines can lead to large variations of speed results; - The speed benchmark is not performed until computers' load average is lower than `maxLoadAvg` (an optional ",MatchSource.DOCS,lib/zstd/tests/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/README.md
Security,integrity,integrity,"Programs and scripts for automated testing of Zstandard; =======================================================. This directory contains the following programs and scripts:; - `datagen` : Synthetic and parametrable data generator, for tests; - `fullbench` : Precisely measure speed for each zstd inner functions; - `fuzzer` : Test tool, to check zstd integrity on target platform; - `paramgrill` : parameter tester for zstd; - `test-zstd-speed.py` : script for testing zstd speed difference between commits; - `test-zstd-versions.py` : compatibility test between zstd versions stored on Github (v0.1+); - `zbufftest` : Test tool to check ZBUFF (a buffered streaming API) integrity; - `zstreamtest` : Fuzzer test tool for zstd streaming API; - `legacy` : Test tool to test decoding of legacy zstd frames; - `decodecorpus` : Tool to generate valid Zstandard frames, for verifying decoder implementations. #### `test-zstd-versions.py` - script for testing zstd interoperability between versions. This script creates `versionsTest` directory to which zstd repository is cloned.; Then all tagged (released) versions of zstd are compiled.; In the following step interoperability between zstd versions is checked. #### `test-zstd-speed.py` - script for testing zstd speed difference between commits. This script creates `speedTest` directory to which zstd repository is cloned.; Then it compiles all branches of zstd and performs a speed benchmark for a given list of files (the `testFileNames` parameter).; After `sleepTime` (an optional parameter, default 300 seconds) seconds the script checks repository for new commits.; If a new commit is found it is compiled and a speed benchmark for this commit is performed.; The results of the speed benchmark are compared to the previous results.; If compression or decompression speed for one of zstd levels is lower than `lowerLimit` (an optional parameter, default 0.98) the speed benchmark is restarted.; If second results are also lower than `lowerLimit` th",MatchSource.DOCS,lib/zstd/tests/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/README.md
Testability,test,testing,"Programs and scripts for automated testing of Zstandard; =======================================================. This directory contains the following programs and scripts:; - `datagen` : Synthetic and parametrable data generator, for tests; - `fullbench` : Precisely measure speed for each zstd inner functions; - `fuzzer` : Test tool, to check zstd integrity on target platform; - `paramgrill` : parameter tester for zstd; - `test-zstd-speed.py` : script for testing zstd speed difference between commits; - `test-zstd-versions.py` : compatibility test between zstd versions stored on Github (v0.1+); - `zbufftest` : Test tool to check ZBUFF (a buffered streaming API) integrity; - `zstreamtest` : Fuzzer test tool for zstd streaming API; - `legacy` : Test tool to test decoding of legacy zstd frames; - `decodecorpus` : Tool to generate valid Zstandard frames, for verifying decoder implementations. #### `test-zstd-versions.py` - script for testing zstd interoperability between versions. This script creates `versionsTest` directory to which zstd repository is cloned.; Then all tagged (released) versions of zstd are compiled.; In the following step interoperability between zstd versions is checked. #### `test-zstd-speed.py` - script for testing zstd speed difference between commits. This script creates `speedTest` directory to which zstd repository is cloned.; Then it compiles all branches of zstd and performs a speed benchmark for a given list of files (the `testFileNames` parameter).; After `sleepTime` (an optional parameter, default 300 seconds) seconds the script checks repository for new commits.; If a new commit is found it is compiled and a speed benchmark for this commit is performed.; The results of the speed benchmark are compared to the previous results.; If compression or decompression speed for one of zstd levels is lower than `lowerLimit` (an optional parameter, default 0.98) the speed benchmark is restarted.; If second results are also lower than `lowerLimit` th",MatchSource.DOCS,lib/zstd/tests/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/README.md
Usability,simpl,simple,"exit; --message MESSAGE attach an additional message to e-mail; --lowerLimit LOWERLIMIT; send email if speed is lower than given limit; --maxLoadAvg MAXLOADAVG; maximum load average to start testing; --lastCLevel LASTCLEVEL; last compression level for testing; --sleepTime SLEEPTIME; frequency of repository checking in seconds; ```. #### `decodecorpus` - tool to generate Zstandard frames for decoder testing; Command line tool to generate test .zst files. This tool will generate .zst files with checksums,; as well as optionally output the corresponding correct uncompressed data for; extra verfication. Example:; ```; ./decodecorpus -ptestfiles -otestfiles -n10000 -s5; ```; will generate 10,000 sample .zst files using a seed of 5 in the `testfiles` directory,; with the zstd checksum field set,; as well as the 10,000 original files for more detailed comparison of decompression results. ```; ./decodecorpus -t -T1mn; ```; will choose a random seed, and for 1 minute,; generate random test frames and ensure that the; zstd library correctly decompresses them in both simple and streaming modes. #### `paramgrill` - tool for generating compression table parameters and optimizing parameters on file given constraints. Full list of arguments; ```; -T# : set level 1 speed objective; -B# : cut input into blocks of size # (default : single block); -S : benchmarks a single run (example command: -Sl3w10h12); w# - windowLog; h# - hashLog; c# - chainLog; s# - searchLog; l# - searchLength; t# - targetLength; S# - strategy; L# - level; --zstd= : Single run, parameter selection syntax same as zstdcli with more parameters; (Added forceAttachDictionary / fadt) ; When invoked with --optimize, this represents the sample to exceed. ; --optimize= : find parameters to maximize compression ratio given parameters; Can use all --zstd= commands to constrain the type of solution found in addition to the following constraints; cSpeed= : Minimum compression speed; dSpeed= : Minimum decompression speed; cM",MatchSource.DOCS,lib/zstd/tests/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/README.md
Availability,down,downloaded," before `deflate()` or `deflateSetDictionary()`. The function is only helpful when data is compressed in blocks. There will be no change in case of `deflateInit()` or `deflateReset()` immediately followed by `deflate(strm, Z_FINISH)`; as this case is automatically detected. #### Reusing contexts. The ordinary zlib compression of two files/streams allocates two contexts:; - for the 1st file calls `deflateInit`, `deflate`, `...`, `deflate`, `defalateEnd`; - for the 2nd file calls `deflateInit`, `deflate`, `...`, `deflate`, `defalateEnd`. The speed of compression can be improved with reusing a single context with following steps:; - initialize the context with `deflateInit`; - for the 1st file call `deflate`, `...`, `deflate`; - for the 2nd file call `deflateReset`, `deflate`, `...`, `deflate`; - free the context with `deflateEnd`. To check the difference we made experiments using `zwrapbench -ri6b6` with zstd and zlib compression (both at level 6).; The input data was decompressed git repository downloaded from https://github.com/git/git/archive/master.zip which contains 2979 files.; The table below shows that reusing contexts has a minor influence on zlib but it gives improvement for zstd.; In our example (the last 2 lines) it gives 4% better compression speed and 5% better decompression speed. | Compression type | Compression | Decompress.| Compr. size | Ratio |; | ------------------------------------------------- | ------------| -----------| ----------- | ----- |; | zlib 1.2.8 | 30.51 MB/s | 219.3 MB/s | 6819783 | 3.459 |; | zlib 1.2.8 not reusing a context | 30.22 MB/s | 218.1 MB/s | 6819783 | 3.459 |; | zlib 1.2.8 with zlibWrapper and reusing a context | 30.40 MB/s | 218.9 MB/s | 6819783 | 3.459 |; | zlib 1.2.8 with zlibWrapper not reusing a context | 30.28 MB/s | 218.1 MB/s | 6819783 | 3.459 |; | zstd 1.1.0 using ZSTD_CCtx | 68.35 MB/s | 430.9 MB/s | 6868521 | 3.435 |; | zstd 1.1.0 using ZSTD_CStream | 66.63 MB/s | 422.3 MB/s | 6868521 | 3.435 |; | zstd 1.1.0 wi",MatchSource.DOCS,lib/zstd/zlibWrapper/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/zlibWrapper/README.md
Energy Efficiency,allocate,allocates,"reaming compression. During streaming compression the compressor never knows how big is data to compress.; Zstandard compression can be improved by providing size of source data to the compressor. By default streaming compressor assumes that data is bigger than 256 KB but it can hurt compression speed on smaller data. ; The zstd wrapper provides the `ZWRAP_setPledgedSrcSize()` function that allows to change a pledged source size for a given compression stream.; The function will change zstd compression parameters what may improve compression speed and/or ratio.; It should be called just after `deflateInit()`or `deflateReset()` and before `deflate()` or `deflateSetDictionary()`. The function is only helpful when data is compressed in blocks. There will be no change in case of `deflateInit()` or `deflateReset()` immediately followed by `deflate(strm, Z_FINISH)`; as this case is automatically detected. #### Reusing contexts. The ordinary zlib compression of two files/streams allocates two contexts:; - for the 1st file calls `deflateInit`, `deflate`, `...`, `deflate`, `defalateEnd`; - for the 2nd file calls `deflateInit`, `deflate`, `...`, `deflate`, `defalateEnd`. The speed of compression can be improved with reusing a single context with following steps:; - initialize the context with `deflateInit`; - for the 1st file call `deflate`, `...`, `deflate`; - for the 2nd file call `deflateReset`, `deflate`, `...`, `deflate`; - free the context with `deflateEnd`. To check the difference we made experiments using `zwrapbench -ri6b6` with zstd and zlib compression (both at level 6).; The input data was decompressed git repository downloaded from https://github.com/git/git/archive/master.zip which contains 2979 files.; The table below shows that reusing contexts has a minor influence on zlib but it gives improvement for zstd.; In our example (the last 2 lines) it gives 4% better compression speed and 5% better decompression speed. | Compression type | Compression | Decompress.|",MatchSource.DOCS,lib/zstd/zlibWrapper/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/zlibWrapper/README.md
Integrability,wrap,wrapper,"Zstandard wrapper for zlib; ================================. The main objective of creating a zstd wrapper for [zlib](http://zlib.net/) is to allow a quick and smooth transition to zstd for projects already using zlib. #### Required files. To build the zstd wrapper for zlib the following files are required:; - zlib.h; - a static or dynamic zlib library; - zlibWrapper/zstd_zlibwrapper.h; - zlibWrapper/zstd_zlibwrapper.c; - zlibWrapper/gz*.c files (gzclose.c, gzlib.c, gzread.c, gzwrite.c); - zlibWrapper/gz*.h files (gzcompatibility.h, gzguts.h); - a static or dynamic zstd library. The first two files are required by all projects using zlib and they are not included with the zstd distribution.; The further files are supplied with the zstd distribution. #### Embedding the zstd wrapper within your project. Let's assume that your project that uses zlib is compiled with:; ```gcc project.o -lz```. To compile the zstd wrapper with your project you have to do the following:; - change all references with `#include ""zlib.h""` to `#include ""zstd_zlibwrapper.h""`; - compile your project with `zstd_zlibwrapper.c`, `gz*.c` and a static or dynamic zstd library. The linking should be changed to:; ```gcc project.o zstd_zlibwrapper.o gz*.c -lz -lzstd```. #### Enabling zstd compression within your project. After embedding the zstd wrapper within your project the zstd library is turned off by default.; Your project should work as before with zlib. There are two options to enable zstd compression:; - compilation with `-DZWRAP_USE_ZSTD=1` (or using `#define ZWRAP_USE_ZSTD 1` before `#include ""zstd_zlibwrapper.h""`); - using the `void ZWRAP_useZSTDcompression(int turn_on)` function (declared in `#include ""zstd_zlibwrapper.h""`). During decompression zlib and zstd streams are automatically detected and decompressed using a proper library.; This behavior can be changed using `ZWRAP_setDecompressionType(ZWRAP_FORCE_ZLIB)` what will make zlib decompression slightly faster. #### Example; We have tak",MatchSource.DOCS,lib/zstd/zlibWrapper/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/zlibWrapper/README.md
Performance,perform,performace,"``; zlib version 1.2.8 = 0x1280, compile flags = 0x65; uncompress(): hello, hello!; gzread(): hello, hello!; gzgets() after gzseek: hello!; inflate(): hello, hello!; large_inflate(): OK; after inflateSync(): hello, hello!; inflate with dictionary: hello, hello!; ```; Then we have changed `#include ""zlib.h""` to `#include ""zstd_zlibwrapper.h""`, compiled the [example.c](examples/example.c) file; with `-DZWRAP_USE_ZSTD=1` and linked with additional `zstd_zlibwrapper.o gz*.c -lzstd`.; We were forced to turn off the following functions: `test_flush`, `test_sync` which use currently unsupported features.; After running it shows the following results:; ```; zlib version 1.2.8 = 0x1280, compile flags = 0x65; uncompress(): hello, hello!; gzread(): hello, hello!; gzgets() after gzseek: hello!; inflate(): hello, hello!; large_inflate(): OK; inflate with dictionary: hello, hello!; ```; The script used for compilation can be found at [zlibWrapper/Makefile](Makefile). #### The measurement of performace of Zstandard wrapper for zlib. The zstd distribution contains a tool called `zwrapbench` which can measure speed and ratio of zlib, zstd, and the wrapper.; The benchmark is conducted using given filenames or synthetic data if filenames are not provided.; The files are read into memory and processed independently.; It makes benchmark more precise as it eliminates I/O overhead. ; Many filenames can be supplied as multiple parameters, parameters with wildcards or names of directories can be used as parameters with the -r option.; One can select compression levels starting from `-b` and ending with `-e`. The `-i` parameter selects minimal time used for each of tested levels.; With `-B` option bigger files can be divided into smaller, independently compressed blocks. ; The benchmark tool can be compiled with `make zwrapbench` using [zlibWrapper/Makefile](Makefile). #### Improving speed of streaming compression. During streaming compression the compressor never knows how big is data to co",MatchSource.DOCS,lib/zstd/zlibWrapper/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/zlibWrapper/README.md
Safety,detect,detected,"wrapper within your project. Let's assume that your project that uses zlib is compiled with:; ```gcc project.o -lz```. To compile the zstd wrapper with your project you have to do the following:; - change all references with `#include ""zlib.h""` to `#include ""zstd_zlibwrapper.h""`; - compile your project with `zstd_zlibwrapper.c`, `gz*.c` and a static or dynamic zstd library. The linking should be changed to:; ```gcc project.o zstd_zlibwrapper.o gz*.c -lz -lzstd```. #### Enabling zstd compression within your project. After embedding the zstd wrapper within your project the zstd library is turned off by default.; Your project should work as before with zlib. There are two options to enable zstd compression:; - compilation with `-DZWRAP_USE_ZSTD=1` (or using `#define ZWRAP_USE_ZSTD 1` before `#include ""zstd_zlibwrapper.h""`); - using the `void ZWRAP_useZSTDcompression(int turn_on)` function (declared in `#include ""zstd_zlibwrapper.h""`). During decompression zlib and zstd streams are automatically detected and decompressed using a proper library.; This behavior can be changed using `ZWRAP_setDecompressionType(ZWRAP_FORCE_ZLIB)` what will make zlib decompression slightly faster. #### Example; We have take the file `test/example.c` from [the zlib library distribution](http://zlib.net/) and copied it to [zlibWrapper/examples/example.c](examples/example.c).; After compilation and execution it shows the following results: ; ```; zlib version 1.2.8 = 0x1280, compile flags = 0x65; uncompress(): hello, hello!; gzread(): hello, hello!; gzgets() after gzseek: hello!; inflate(): hello, hello!; large_inflate(): OK; after inflateSync(): hello, hello!; inflate with dictionary: hello, hello!; ```; Then we have changed `#include ""zlib.h""` to `#include ""zstd_zlibwrapper.h""`, compiled the [example.c](examples/example.c) file; with `-DZWRAP_USE_ZSTD=1` and linked with additional `zstd_zlibwrapper.o gz*.c -lzstd`.; We were forced to turn off the following functions: `test_flush`, `test_sync` ",MatchSource.DOCS,lib/zstd/zlibWrapper/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/zlibWrapper/README.md
Security,access,access,"/git/git/archive/master.zip which contains 2979 files.; The table below shows that reusing contexts has a minor influence on zlib but it gives improvement for zstd.; In our example (the last 2 lines) it gives 4% better compression speed and 5% better decompression speed. | Compression type | Compression | Decompress.| Compr. size | Ratio |; | ------------------------------------------------- | ------------| -----------| ----------- | ----- |; | zlib 1.2.8 | 30.51 MB/s | 219.3 MB/s | 6819783 | 3.459 |; | zlib 1.2.8 not reusing a context | 30.22 MB/s | 218.1 MB/s | 6819783 | 3.459 |; | zlib 1.2.8 with zlibWrapper and reusing a context | 30.40 MB/s | 218.9 MB/s | 6819783 | 3.459 |; | zlib 1.2.8 with zlibWrapper not reusing a context | 30.28 MB/s | 218.1 MB/s | 6819783 | 3.459 |; | zstd 1.1.0 using ZSTD_CCtx | 68.35 MB/s | 430.9 MB/s | 6868521 | 3.435 |; | zstd 1.1.0 using ZSTD_CStream | 66.63 MB/s | 422.3 MB/s | 6868521 | 3.435 |; | zstd 1.1.0 with zlibWrapper and reusing a context | 54.01 MB/s | 403.2 MB/s | 6763482 | 3.488 |; | zstd 1.1.0 with zlibWrapper not reusing a context | 51.59 MB/s | 383.7 MB/s | 6763482 | 3.488 |. #### Compatibility issues; After enabling zstd compression not all native zlib functions are supported. When calling unsupported methods they put error message into `strm->msg` and return Z_STREAM_ERROR. Supported methods:; - deflateInit; - deflate (with exception of Z_FULL_FLUSH, Z_BLOCK, and Z_TREES); - deflateSetDictionary; - deflateEnd; - deflateReset; - deflateBound; - inflateInit; - inflate; - inflateSetDictionary; - inflateReset; - inflateReset2; - compress; - compress2; - compressBound; - uncompress; - gzip file access functions. Ignored methods (they do nothing):; - deflateParams. Unsupported methods:; - deflateCopy; - deflateTune; - deflatePending; - deflatePrime; - deflateSetHeader; - inflateGetDictionary; - inflateCopy; - inflateSync; - inflatePrime; - inflateMark; - inflateGetHeader; - inflateBackInit; - inflateBack; - inflateBackEnd; ",MatchSource.DOCS,lib/zstd/zlibWrapper/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/zlibWrapper/README.md
Testability,test,test,"nces with `#include ""zlib.h""` to `#include ""zstd_zlibwrapper.h""`; - compile your project with `zstd_zlibwrapper.c`, `gz*.c` and a static or dynamic zstd library. The linking should be changed to:; ```gcc project.o zstd_zlibwrapper.o gz*.c -lz -lzstd```. #### Enabling zstd compression within your project. After embedding the zstd wrapper within your project the zstd library is turned off by default.; Your project should work as before with zlib. There are two options to enable zstd compression:; - compilation with `-DZWRAP_USE_ZSTD=1` (or using `#define ZWRAP_USE_ZSTD 1` before `#include ""zstd_zlibwrapper.h""`); - using the `void ZWRAP_useZSTDcompression(int turn_on)` function (declared in `#include ""zstd_zlibwrapper.h""`). During decompression zlib and zstd streams are automatically detected and decompressed using a proper library.; This behavior can be changed using `ZWRAP_setDecompressionType(ZWRAP_FORCE_ZLIB)` what will make zlib decompression slightly faster. #### Example; We have take the file `test/example.c` from [the zlib library distribution](http://zlib.net/) and copied it to [zlibWrapper/examples/example.c](examples/example.c).; After compilation and execution it shows the following results: ; ```; zlib version 1.2.8 = 0x1280, compile flags = 0x65; uncompress(): hello, hello!; gzread(): hello, hello!; gzgets() after gzseek: hello!; inflate(): hello, hello!; large_inflate(): OK; after inflateSync(): hello, hello!; inflate with dictionary: hello, hello!; ```; Then we have changed `#include ""zlib.h""` to `#include ""zstd_zlibwrapper.h""`, compiled the [example.c](examples/example.c) file; with `-DZWRAP_USE_ZSTD=1` and linked with additional `zstd_zlibwrapper.o gz*.c -lzstd`.; We were forced to turn off the following functions: `test_flush`, `test_sync` which use currently unsupported features.; After running it shows the following results:; ```; zlib version 1.2.8 = 0x1280, compile flags = 0x65; uncompress(): hello, hello!; gzread(): hello, hello!; gzgets() after ",MatchSource.DOCS,lib/zstd/zlibWrapper/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/zlibWrapper/README.md
Deployability,release,release,"Meson build system for zstandard; ================================. Meson is a build system designed to optimize programmer productivity.; It aims to do this by providing simple, out-of-the-box support for; modern software development tools and practices, such as unit tests,; coverage reports, Valgrind, CCache and the like. This Meson build system is provided with no guarantee and maintained; by Dima Krasner <dima@dimakrasner.com>. It outputs one `libzstd`, either shared or static, depending on; `default_library` option. ## How to build. `cd` to this meson directory (`build/meson`). ```sh; meson --buildtype=release -D with-contrib=true -D with-tests=true -D with-contrib=true builddir; cd builddir; ninja # to build; ninja install # to install; ```. You might want to install it in staging directory:. ```sh; DESTDIR=./staging ninja install; ```. To configure build options, use:. ```sh; meson configure; ```. See [man meson(1)](https://manpages.debian.org/testing/meson/meson.1.en.html).; ",MatchSource.DOCS,lib/zstd/build/meson/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/meson/README.md
Integrability,depend,depending,"Meson build system for zstandard; ================================. Meson is a build system designed to optimize programmer productivity.; It aims to do this by providing simple, out-of-the-box support for; modern software development tools and practices, such as unit tests,; coverage reports, Valgrind, CCache and the like. This Meson build system is provided with no guarantee and maintained; by Dima Krasner <dima@dimakrasner.com>. It outputs one `libzstd`, either shared or static, depending on; `default_library` option. ## How to build. `cd` to this meson directory (`build/meson`). ```sh; meson --buildtype=release -D with-contrib=true -D with-tests=true -D with-contrib=true builddir; cd builddir; ninja # to build; ninja install # to install; ```. You might want to install it in staging directory:. ```sh; DESTDIR=./staging ninja install; ```. To configure build options, use:. ```sh; meson configure; ```. See [man meson(1)](https://manpages.debian.org/testing/meson/meson.1.en.html).; ",MatchSource.DOCS,lib/zstd/build/meson/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/meson/README.md
Modifiability,config,configure,"Meson build system for zstandard; ================================. Meson is a build system designed to optimize programmer productivity.; It aims to do this by providing simple, out-of-the-box support for; modern software development tools and practices, such as unit tests,; coverage reports, Valgrind, CCache and the like. This Meson build system is provided with no guarantee and maintained; by Dima Krasner <dima@dimakrasner.com>. It outputs one `libzstd`, either shared or static, depending on; `default_library` option. ## How to build. `cd` to this meson directory (`build/meson`). ```sh; meson --buildtype=release -D with-contrib=true -D with-tests=true -D with-contrib=true builddir; cd builddir; ninja # to build; ninja install # to install; ```. You might want to install it in staging directory:. ```sh; DESTDIR=./staging ninja install; ```. To configure build options, use:. ```sh; meson configure; ```. See [man meson(1)](https://manpages.debian.org/testing/meson/meson.1.en.html).; ",MatchSource.DOCS,lib/zstd/build/meson/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/meson/README.md
Performance,optimiz,optimize,"Meson build system for zstandard; ================================. Meson is a build system designed to optimize programmer productivity.; It aims to do this by providing simple, out-of-the-box support for; modern software development tools and practices, such as unit tests,; coverage reports, Valgrind, CCache and the like. This Meson build system is provided with no guarantee and maintained; by Dima Krasner <dima@dimakrasner.com>. It outputs one `libzstd`, either shared or static, depending on; `default_library` option. ## How to build. `cd` to this meson directory (`build/meson`). ```sh; meson --buildtype=release -D with-contrib=true -D with-tests=true -D with-contrib=true builddir; cd builddir; ninja # to build; ninja install # to install; ```. You might want to install it in staging directory:. ```sh; DESTDIR=./staging ninja install; ```. To configure build options, use:. ```sh; meson configure; ```. See [man meson(1)](https://manpages.debian.org/testing/meson/meson.1.en.html).; ",MatchSource.DOCS,lib/zstd/build/meson/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/meson/README.md
Testability,test,tests,"Meson build system for zstandard; ================================. Meson is a build system designed to optimize programmer productivity.; It aims to do this by providing simple, out-of-the-box support for; modern software development tools and practices, such as unit tests,; coverage reports, Valgrind, CCache and the like. This Meson build system is provided with no guarantee and maintained; by Dima Krasner <dima@dimakrasner.com>. It outputs one `libzstd`, either shared or static, depending on; `default_library` option. ## How to build. `cd` to this meson directory (`build/meson`). ```sh; meson --buildtype=release -D with-contrib=true -D with-tests=true -D with-contrib=true builddir; cd builddir; ninja # to build; ninja install # to install; ```. You might want to install it in staging directory:. ```sh; DESTDIR=./staging ninja install; ```. To configure build options, use:. ```sh; meson configure; ```. See [man meson(1)](https://manpages.debian.org/testing/meson/meson.1.en.html).; ",MatchSource.DOCS,lib/zstd/build/meson/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/meson/README.md
Usability,simpl,simple,"Meson build system for zstandard; ================================. Meson is a build system designed to optimize programmer productivity.; It aims to do this by providing simple, out-of-the-box support for; modern software development tools and practices, such as unit tests,; coverage reports, Valgrind, CCache and the like. This Meson build system is provided with no guarantee and maintained; by Dima Krasner <dima@dimakrasner.com>. It outputs one `libzstd`, either shared or static, depending on; `default_library` option. ## How to build. `cd` to this meson directory (`build/meson`). ```sh; meson --buildtype=release -D with-contrib=true -D with-tests=true -D with-contrib=true builddir; cd builddir; ninja # to build; ninja install # to install; ```. You might want to install it in staging directory:. ```sh; DESTDIR=./staging ninja install; ```. To configure build options, use:. ```sh; meson configure; ```. See [man meson(1)](https://manpages.debian.org/testing/meson/meson.1.en.html).; ",MatchSource.DOCS,lib/zstd/build/meson/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/meson/README.md
Availability,avail,available,"### Summary. `adapt` is a new compression tool targeted at optimizing performance across network connections and pipelines. The tool is aimed at sensing network speeds and adapting compression level based on network or pipe speeds.; In situations where the compression level does not appropriately match the network/pipe speed, compression may be bottlenecking the entire pipeline or the files may not be compressed as much as they potentially could be, therefore losing efficiency. It also becomes quite impractical to manually measure and set an optimalcompression level (which could potentially change over time). . ### Using `adapt`. In order to build and use the tool, you can simply run `make adapt` in the `adaptive-compression` directory under `contrib`. This will generate an executable available for use. Another possible method of installation is running `make install`, which will create and install the binary as the command `zstd-adaptive`. Similar to many other compression utilities, `zstd-adaptive` can be invoked by using the following format:. `zstd-adaptive [options] [file(s)]`. Supported options for the above format are described below. . `zstd-adaptive` also supports reading from `stdin` and writing to `stdout`, which is potentially more useful. By default, if no files are given, `zstd-adaptive` reads from and writes to standard I/O. Therefore, you can simply insert it within a pipeline like so:. `cat FILE | zstd-adaptive | ssh ""cat - > tmp.zst""`. If a file is provided, it is also possible to force writing to stdout using the `-c` flag like so:. `zstd-adaptive -c FILE | ssh ""cat - > tmp.zst""`. Several options described below can be used to control the behavior of `zstd-adaptive`. More specifically, using the `-l#` and `-u#` flags will will set upper and lower bounds so that the compression level will always be within that range. The `-i#` flag can also be used to change the initial compression level. If an initial compression level is not provided, the initial ",MatchSource.DOCS,lib/zstd/contrib/adaptive-compression/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/adaptive-compression/README.md
Deployability,pipeline,pipelines,"### Summary. `adapt` is a new compression tool targeted at optimizing performance across network connections and pipelines. The tool is aimed at sensing network speeds and adapting compression level based on network or pipe speeds.; In situations where the compression level does not appropriately match the network/pipe speed, compression may be bottlenecking the entire pipeline or the files may not be compressed as much as they potentially could be, therefore losing efficiency. It also becomes quite impractical to manually measure and set an optimalcompression level (which could potentially change over time). . ### Using `adapt`. In order to build and use the tool, you can simply run `make adapt` in the `adaptive-compression` directory under `contrib`. This will generate an executable available for use. Another possible method of installation is running `make install`, which will create and install the binary as the command `zstd-adaptive`. Similar to many other compression utilities, `zstd-adaptive` can be invoked by using the following format:. `zstd-adaptive [options] [file(s)]`. Supported options for the above format are described below. . `zstd-adaptive` also supports reading from `stdin` and writing to `stdout`, which is potentially more useful. By default, if no files are given, `zstd-adaptive` reads from and writes to standard I/O. Therefore, you can simply insert it within a pipeline like so:. `cat FILE | zstd-adaptive | ssh ""cat - > tmp.zst""`. If a file is provided, it is also possible to force writing to stdout using the `-c` flag like so:. `zstd-adaptive -c FILE | ssh ""cat - > tmp.zst""`. Several options described below can be used to control the behavior of `zstd-adaptive`. More specifically, using the `-l#` and `-u#` flags will will set upper and lower bounds so that the compression level will always be within that range. The `-i#` flag can also be used to change the initial compression level. If an initial compression level is not provided, the initial ",MatchSource.DOCS,lib/zstd/contrib/adaptive-compression/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/adaptive-compression/README.md
Energy Efficiency,adapt,adapt,"### Summary. `adapt` is a new compression tool targeted at optimizing performance across network connections and pipelines. The tool is aimed at sensing network speeds and adapting compression level based on network or pipe speeds.; In situations where the compression level does not appropriately match the network/pipe speed, compression may be bottlenecking the entire pipeline or the files may not be compressed as much as they potentially could be, therefore losing efficiency. It also becomes quite impractical to manually measure and set an optimalcompression level (which could potentially change over time). . ### Using `adapt`. In order to build and use the tool, you can simply run `make adapt` in the `adaptive-compression` directory under `contrib`. This will generate an executable available for use. Another possible method of installation is running `make install`, which will create and install the binary as the command `zstd-adaptive`. Similar to many other compression utilities, `zstd-adaptive` can be invoked by using the following format:. `zstd-adaptive [options] [file(s)]`. Supported options for the above format are described below. . `zstd-adaptive` also supports reading from `stdin` and writing to `stdout`, which is potentially more useful. By default, if no files are given, `zstd-adaptive` reads from and writes to standard I/O. Therefore, you can simply insert it within a pipeline like so:. `cat FILE | zstd-adaptive | ssh ""cat - > tmp.zst""`. If a file is provided, it is also possible to force writing to stdout using the `-c` flag like so:. `zstd-adaptive -c FILE | ssh ""cat - > tmp.zst""`. Several options described below can be used to control the behavior of `zstd-adaptive`. More specifically, using the `-l#` and `-u#` flags will will set upper and lower bounds so that the compression level will always be within that range. The `-i#` flag can also be used to change the initial compression level. If an initial compression level is not provided, the initial ",MatchSource.DOCS,lib/zstd/contrib/adaptive-compression/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/adaptive-compression/README.md
Modifiability,adapt,adapt,"### Summary. `adapt` is a new compression tool targeted at optimizing performance across network connections and pipelines. The tool is aimed at sensing network speeds and adapting compression level based on network or pipe speeds.; In situations where the compression level does not appropriately match the network/pipe speed, compression may be bottlenecking the entire pipeline or the files may not be compressed as much as they potentially could be, therefore losing efficiency. It also becomes quite impractical to manually measure and set an optimalcompression level (which could potentially change over time). . ### Using `adapt`. In order to build and use the tool, you can simply run `make adapt` in the `adaptive-compression` directory under `contrib`. This will generate an executable available for use. Another possible method of installation is running `make install`, which will create and install the binary as the command `zstd-adaptive`. Similar to many other compression utilities, `zstd-adaptive` can be invoked by using the following format:. `zstd-adaptive [options] [file(s)]`. Supported options for the above format are described below. . `zstd-adaptive` also supports reading from `stdin` and writing to `stdout`, which is potentially more useful. By default, if no files are given, `zstd-adaptive` reads from and writes to standard I/O. Therefore, you can simply insert it within a pipeline like so:. `cat FILE | zstd-adaptive | ssh ""cat - > tmp.zst""`. If a file is provided, it is also possible to force writing to stdout using the `-c` flag like so:. `zstd-adaptive -c FILE | ssh ""cat - > tmp.zst""`. Several options described below can be used to control the behavior of `zstd-adaptive`. More specifically, using the `-l#` and `-u#` flags will will set upper and lower bounds so that the compression level will always be within that range. The `-i#` flag can also be used to change the initial compression level. If an initial compression level is not provided, the initial ",MatchSource.DOCS,lib/zstd/contrib/adaptive-compression/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/adaptive-compression/README.md
Performance,optimiz,optimizing,"### Summary. `adapt` is a new compression tool targeted at optimizing performance across network connections and pipelines. The tool is aimed at sensing network speeds and adapting compression level based on network or pipe speeds.; In situations where the compression level does not appropriately match the network/pipe speed, compression may be bottlenecking the entire pipeline or the files may not be compressed as much as they potentially could be, therefore losing efficiency. It also becomes quite impractical to manually measure and set an optimalcompression level (which could potentially change over time). . ### Using `adapt`. In order to build and use the tool, you can simply run `make adapt` in the `adaptive-compression` directory under `contrib`. This will generate an executable available for use. Another possible method of installation is running `make install`, which will create and install the binary as the command `zstd-adaptive`. Similar to many other compression utilities, `zstd-adaptive` can be invoked by using the following format:. `zstd-adaptive [options] [file(s)]`. Supported options for the above format are described below. . `zstd-adaptive` also supports reading from `stdin` and writing to `stdout`, which is potentially more useful. By default, if no files are given, `zstd-adaptive` reads from and writes to standard I/O. Therefore, you can simply insert it within a pipeline like so:. `cat FILE | zstd-adaptive | ssh ""cat - > tmp.zst""`. If a file is provided, it is also possible to force writing to stdout using the `-c` flag like so:. `zstd-adaptive -c FILE | ssh ""cat - > tmp.zst""`. Several options described below can be used to control the behavior of `zstd-adaptive`. More specifically, using the `-l#` and `-u#` flags will will set upper and lower bounds so that the compression level will always be within that range. The `-i#` flag can also be used to change the initial compression level. If an initial compression level is not provided, the initial ",MatchSource.DOCS,lib/zstd/contrib/adaptive-compression/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/adaptive-compression/README.md
Testability,test,tests,"e behavior of `zstd-adaptive`. More specifically, using the `-l#` and `-u#` flags will will set upper and lower bounds so that the compression level will always be within that range. The `-i#` flag can also be used to change the initial compression level. If an initial compression level is not provided, the initial compression level will be chosen such that it is within the appropriate range (it becomes equal to the lower bound). . ### Options; `-oFILE` : write output to `FILE`. `-i#` : provide initial compression level (must within the appropriate bounds). `-h` : display help/information. `-f` : force the compression level to stay constant. `-c` : force write to `stdout`. `-p` : hide progress bar. `-q` : quiet mode -- do not show progress bar or other information. `-l#` : set a lower bound on the compression level (default is 1). `-u#` : set an upper bound on the compression level (default is 22); ### Benchmarking / Test results; #### Artificial Tests; These artificial tests were run by using the `pv` command line utility in order to limit pipe speeds (25 MB/s read and 5 MB/s write limits were chosen to mimic severe throughput constraints). A 40 GB backup file was sent through a pipeline, compressed, and written out to a file. Compression time, size, and ratio were computed. Data for `zstd -15` was excluded from these tests because the test runs quite long. <table>; <tr><th> 25 MB/s read limit </th></tr>; <tr><td>. | Compressor Name | Ratio | Compressed Size | Compression Time |; |:----------------|------:|----------------:|-----------------:| ; | zstd -3 | 2.108 | 20.718 GB | 29m 48.530s |; | zstd-adaptive | 2.230 | 19.581 GB | 29m 48.798s |. </td><tr>; </table>. <table>; <tr><th> 5 MB/s write limit </th></tr>; <tr><td>. | Compressor Name | Ratio | Compressed Size | Compression Time |; |:----------------|------:|----------------:|-----------------:| ; | zstd -3 | 2.108 | 20.718 GB | 1h 10m 43.076s |; | zstd-adaptive | 2.249 | 19.412 GB | 1h 06m 15.577s |. </td></tr",MatchSource.DOCS,lib/zstd/contrib/adaptive-compression/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/adaptive-compression/README.md
Usability,simpl,simply,"### Summary. `adapt` is a new compression tool targeted at optimizing performance across network connections and pipelines. The tool is aimed at sensing network speeds and adapting compression level based on network or pipe speeds.; In situations where the compression level does not appropriately match the network/pipe speed, compression may be bottlenecking the entire pipeline or the files may not be compressed as much as they potentially could be, therefore losing efficiency. It also becomes quite impractical to manually measure and set an optimalcompression level (which could potentially change over time). . ### Using `adapt`. In order to build and use the tool, you can simply run `make adapt` in the `adaptive-compression` directory under `contrib`. This will generate an executable available for use. Another possible method of installation is running `make install`, which will create and install the binary as the command `zstd-adaptive`. Similar to many other compression utilities, `zstd-adaptive` can be invoked by using the following format:. `zstd-adaptive [options] [file(s)]`. Supported options for the above format are described below. . `zstd-adaptive` also supports reading from `stdin` and writing to `stdout`, which is potentially more useful. By default, if no files are given, `zstd-adaptive` reads from and writes to standard I/O. Therefore, you can simply insert it within a pipeline like so:. `cat FILE | zstd-adaptive | ssh ""cat - > tmp.zst""`. If a file is provided, it is also possible to force writing to stdout using the `-c` flag like so:. `zstd-adaptive -c FILE | ssh ""cat - > tmp.zst""`. Several options described below can be used to control the behavior of `zstd-adaptive`. More specifically, using the `-l#` and `-u#` flags will will set upper and lower bounds so that the compression level will always be within that range. The `-i#` flag can also be used to change the initial compression level. If an initial compression level is not provided, the initial ",MatchSource.DOCS,lib/zstd/contrib/adaptive-compression/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/adaptive-compression/README.md
Availability,avail,available,; ## Requirement. The `Dockerfile` script requires a version of `docker` >= 17.05. ## Installing docker. The officiel docker install docs use a ppa with a modern version available:; https://docs.docker.com/install/linux/docker-ce/ubuntu/. ## How to run. `docker build -t zstd .`. ## test. ```; echo foo | docker run -i --rm zstd | docker run -i --rm zstd zstdcat; foo; ```; ,MatchSource.DOCS,lib/zstd/contrib/docker/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/docker/README.md
Deployability,install,install,; ## Requirement. The `Dockerfile` script requires a version of `docker` >= 17.05. ## Installing docker. The officiel docker install docs use a ppa with a modern version available:; https://docs.docker.com/install/linux/docker-ce/ubuntu/. ## How to run. `docker build -t zstd .`. ## test. ```; echo foo | docker run -i --rm zstd | docker run -i --rm zstd zstdcat; foo; ```; ,MatchSource.DOCS,lib/zstd/contrib/docker/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/docker/README.md
Testability,test,test,; ## Requirement. The `Dockerfile` script requires a version of `docker` >= 17.05. ## Installing docker. The officiel docker install docs use a ppa with a modern version available:; https://docs.docker.com/install/linux/docker-ce/ubuntu/. ## How to run. `docker build -t zstd .`. ## test. ```; echo foo | docker run -i --rm zstd | docker run -i --rm zstd zstdcat; foo; ```; ,MatchSource.DOCS,lib/zstd/contrib/docker/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/docker/README.md
Safety,detect,detected,gen_html - a program for automatic generation of zstd manual ; ============================================================. #### Introduction. This simple C++ program generates a single-page HTML manual from `zstd.h`. The format of recognized comment blocks is following:; - comments of type `/*!` mean: this is a function declaration; switch comments with declarations; - comments of type `/**` and `/*-` mean: this is a comment; use a `<H2>` header for the first line; - comments of type `/*=` and `/**=` mean: use a `<H3>` header and show also all functions until first empty line; - comments of type `/*X` where `X` is different from above-mentioned are ignored. Moreover:; - `ZSTDLIB_API` is removed to improve readability; - `typedef` are detected and included even if uncommented; - comments of type `/**<` and `/*!<` are detected and only function declaration is highlighted (bold). #### Usage. The program requires 3 parameters:; ```; gen_html [zstd_version] [input_file] [output_html]; ```. To compile program and generate zstd manual we have used: ; ```; make; ./gen_html.exe 1.1.1 ../../lib/zstd.h zstd_manual.html; ```; ,MatchSource.DOCS,lib/zstd/contrib/gen_html/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/gen_html/README.md
Usability,simpl,simple,gen_html - a program for automatic generation of zstd manual ; ============================================================. #### Introduction. This simple C++ program generates a single-page HTML manual from `zstd.h`. The format of recognized comment blocks is following:; - comments of type `/*!` mean: this is a function declaration; switch comments with declarations; - comments of type `/**` and `/*-` mean: this is a comment; use a `<H2>` header for the first line; - comments of type `/*=` and `/**=` mean: use a `<H3>` header and show also all functions until first empty line; - comments of type `/*X` where `X` is different from above-mentioned are ignored. Moreover:; - `ZSTDLIB_API` is removed to improve readability; - `typedef` are detected and included even if uncommented; - comments of type `/**<` and `/*!<` are detected and only function declaration is highlighted (bold). #### Usage. The program requires 3 parameters:; ```; gen_html [zstd_version] [input_file] [output_html]; ```. To compile program and generate zstd manual we have used: ; ```; make; ./gen_html.exe 1.1.1 ../../lib/zstd.h zstd_manual.html; ```; ,MatchSource.DOCS,lib/zstd/contrib/gen_html/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/gen_html/README.md
Performance,latency,latency,"largeNbDicts; =====================. `largeNbDicts` is a benchmark test tool; dedicated to the specific scenario of; dictionary decompression using a very large number of dictionaries.; When dictionaries are constantly changing, they are always ""cold"",; suffering from increased latency due to cache misses. The tool is created in a bid to investigate performance for this scenario,; and experiment mitigation techniques. Command line :; ```; largeNbDicts [Options] filename(s). Options :; -r : recursively load all files in subdirectories (default: off); -B# : split input into blocks of size # (default: no split); -# : use compression level # (default: 3); -D # : use # as a dictionary (default: create one); -i# : nb benchmark rounds (default: 6); --nbDicts=# : set nb of dictionaries to # (default: one per block); -h : help (this text); ```; ",MatchSource.DOCS,lib/zstd/contrib/largeNbDicts/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/largeNbDicts/README.md
Testability,benchmark,benchmark,"largeNbDicts; =====================. `largeNbDicts` is a benchmark test tool; dedicated to the specific scenario of; dictionary decompression using a very large number of dictionaries.; When dictionaries are constantly changing, they are always ""cold"",; suffering from increased latency due to cache misses. The tool is created in a bid to investigate performance for this scenario,; and experiment mitigation techniques. Command line :; ```; largeNbDicts [Options] filename(s). Options :; -r : recursively load all files in subdirectories (default: off); -B# : split input into blocks of size # (default: no split); -# : use compression level # (default: 3); -D # : use # as a dictionary (default: create one); -i# : nb benchmark rounds (default: 6); --nbDicts=# : set nb of dictionaries to # (default: one per block); -h : help (this text); ```; ",MatchSource.DOCS,lib/zstd/contrib/largeNbDicts/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/largeNbDicts/README.md
Deployability,patch,patch,"# Linux Kernel Patch. There are four pieces, the `xxhash` kernel module, the `zstd_compress` and `zstd_decompress` kernel modules, the BtrFS patch, and the SquashFS patch.; The patches are based off of the linux kernel master branch. ## xxHash kernel module. * The patch is located in `xxhash.diff`.; * The header is in `include/linux/xxhash.h`.; * The source is in `lib/xxhash.c`.; * `test/XXHashUserLandTest.cpp` contains tests for the patch in userland by mocking the kernel headers.; I tested the tests by commenting a line of of each branch in `xxhash.c` one line at a time, and made sure the tests failed.; It can be run with the following commands:; ```; cd test && make googletest && make XXHashUserLandTest && ./XXHashUserLandTest; ```; * I also benchmarked the `xxhash` module against upstream xxHash, and made sure that they ran at the same speed. ## Zstd Kernel modules. * The (large) patch is located in `zstd.diff`, which depends on `xxhash.diff`.; * The header is in `include/linux/zstd.h`.; * It is split up into `zstd_compress` and `zstd_decompress`, which can be loaded independently.; * Source files are in `lib/zstd/`.; * `lib/Kconfig` and `lib/Makefile` need to be modified by applying `lib/Kconfig.diff` and `lib/Makefile.diff` respectively.; These changes are also included in the `zstd.diff`.; * `test/UserlandTest.cpp` contains tests for the patch in userland by mocking the kernel headers.; It can be run with the following commands:; ```; cd test && make googletest && make UserlandTest && ./UserlandTest; ```. ## BtrFS. * The patch is located in `btrfs.diff`.; * Additionally `fs/btrfs/zstd.c` is provided as a source for convenience.; * The patch seems to be working, it doesn't crash the kernel, and compresses at speeds and ratios that are expected.; It could still use some more testing for fringe features, like printing options. ### Benchmarks. Benchmarks run on a Ubuntu 14.04 with 2 cores and 4 GiB of RAM.; The VM is running on a Macbook Pro with a 3.1 GHz Intel C",MatchSource.DOCS,lib/zstd/contrib/linux-kernel/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/linux-kernel/README.md
Integrability,depend,depends,"# Linux Kernel Patch. There are four pieces, the `xxhash` kernel module, the `zstd_compress` and `zstd_decompress` kernel modules, the BtrFS patch, and the SquashFS patch.; The patches are based off of the linux kernel master branch. ## xxHash kernel module. * The patch is located in `xxhash.diff`.; * The header is in `include/linux/xxhash.h`.; * The source is in `lib/xxhash.c`.; * `test/XXHashUserLandTest.cpp` contains tests for the patch in userland by mocking the kernel headers.; I tested the tests by commenting a line of of each branch in `xxhash.c` one line at a time, and made sure the tests failed.; It can be run with the following commands:; ```; cd test && make googletest && make XXHashUserLandTest && ./XXHashUserLandTest; ```; * I also benchmarked the `xxhash` module against upstream xxHash, and made sure that they ran at the same speed. ## Zstd Kernel modules. * The (large) patch is located in `zstd.diff`, which depends on `xxhash.diff`.; * The header is in `include/linux/zstd.h`.; * It is split up into `zstd_compress` and `zstd_decompress`, which can be loaded independently.; * Source files are in `lib/zstd/`.; * `lib/Kconfig` and `lib/Makefile` need to be modified by applying `lib/Kconfig.diff` and `lib/Makefile.diff` respectively.; These changes are also included in the `zstd.diff`.; * `test/UserlandTest.cpp` contains tests for the patch in userland by mocking the kernel headers.; It can be run with the following commands:; ```; cd test && make googletest && make UserlandTest && ./UserlandTest; ```. ## BtrFS. * The patch is located in `btrfs.diff`.; * Additionally `fs/btrfs/zstd.c` is provided as a source for convenience.; * The patch seems to be working, it doesn't crash the kernel, and compresses at speeds and ratios that are expected.; It could still use some more testing for fringe features, like printing options. ### Benchmarks. Benchmarks run on a Ubuntu 14.04 with 2 cores and 4 GiB of RAM.; The VM is running on a Macbook Pro with a 3.1 GHz Intel C",MatchSource.DOCS,lib/zstd/contrib/linux-kernel/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/linux-kernel/README.md
Performance,load,loaded,"ash` kernel module, the `zstd_compress` and `zstd_decompress` kernel modules, the BtrFS patch, and the SquashFS patch.; The patches are based off of the linux kernel master branch. ## xxHash kernel module. * The patch is located in `xxhash.diff`.; * The header is in `include/linux/xxhash.h`.; * The source is in `lib/xxhash.c`.; * `test/XXHashUserLandTest.cpp` contains tests for the patch in userland by mocking the kernel headers.; I tested the tests by commenting a line of of each branch in `xxhash.c` one line at a time, and made sure the tests failed.; It can be run with the following commands:; ```; cd test && make googletest && make XXHashUserLandTest && ./XXHashUserLandTest; ```; * I also benchmarked the `xxhash` module against upstream xxHash, and made sure that they ran at the same speed. ## Zstd Kernel modules. * The (large) patch is located in `zstd.diff`, which depends on `xxhash.diff`.; * The header is in `include/linux/zstd.h`.; * It is split up into `zstd_compress` and `zstd_decompress`, which can be loaded independently.; * Source files are in `lib/zstd/`.; * `lib/Kconfig` and `lib/Makefile` need to be modified by applying `lib/Kconfig.diff` and `lib/Makefile.diff` respectively.; These changes are also included in the `zstd.diff`.; * `test/UserlandTest.cpp` contains tests for the patch in userland by mocking the kernel headers.; It can be run with the following commands:; ```; cd test && make googletest && make UserlandTest && ./UserlandTest; ```. ## BtrFS. * The patch is located in `btrfs.diff`.; * Additionally `fs/btrfs/zstd.c` is provided as a source for convenience.; * The patch seems to be working, it doesn't crash the kernel, and compresses at speeds and ratios that are expected.; It could still use some more testing for fringe features, like printing options. ### Benchmarks. Benchmarks run on a Ubuntu 14.04 with 2 cores and 4 GiB of RAM.; The VM is running on a Macbook Pro with a 3.1 GHz Intel Core i7 processor,; 16 GB of ram, and a SSD.; The kern",MatchSource.DOCS,lib/zstd/contrib/linux-kernel/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/linux-kernel/README.md
Testability,test,test,"# Linux Kernel Patch. There are four pieces, the `xxhash` kernel module, the `zstd_compress` and `zstd_decompress` kernel modules, the BtrFS patch, and the SquashFS patch.; The patches are based off of the linux kernel master branch. ## xxHash kernel module. * The patch is located in `xxhash.diff`.; * The header is in `include/linux/xxhash.h`.; * The source is in `lib/xxhash.c`.; * `test/XXHashUserLandTest.cpp` contains tests for the patch in userland by mocking the kernel headers.; I tested the tests by commenting a line of of each branch in `xxhash.c` one line at a time, and made sure the tests failed.; It can be run with the following commands:; ```; cd test && make googletest && make XXHashUserLandTest && ./XXHashUserLandTest; ```; * I also benchmarked the `xxhash` module against upstream xxHash, and made sure that they ran at the same speed. ## Zstd Kernel modules. * The (large) patch is located in `zstd.diff`, which depends on `xxhash.diff`.; * The header is in `include/linux/zstd.h`.; * It is split up into `zstd_compress` and `zstd_decompress`, which can be loaded independently.; * Source files are in `lib/zstd/`.; * `lib/Kconfig` and `lib/Makefile` need to be modified by applying `lib/Kconfig.diff` and `lib/Makefile.diff` respectively.; These changes are also included in the `zstd.diff`.; * `test/UserlandTest.cpp` contains tests for the patch in userland by mocking the kernel headers.; It can be run with the following commands:; ```; cd test && make googletest && make UserlandTest && ./UserlandTest; ```. ## BtrFS. * The patch is located in `btrfs.diff`.; * Additionally `fs/btrfs/zstd.c` is provided as a source for convenience.; * The patch seems to be working, it doesn't crash the kernel, and compresses at speeds and ratios that are expected.; It could still use some more testing for fringe features, like printing options. ### Benchmarks. Benchmarks run on a Ubuntu 14.04 with 2 cores and 4 GiB of RAM.; The VM is running on a Macbook Pro with a 3.1 GHz Intel C",MatchSource.DOCS,lib/zstd/contrib/linux-kernel/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/linux-kernel/README.md
Deployability,install,installed,"ion to specify the number of threads.; Dictionary mode is not currently supported. Basic usage. pzstd input-file -o output-file -p num-threads -# # Compression; pzstd -d input-file -o output-file -p num-threads # Decompression. PZstandard also supports piping and fifo pipes. cat input-file | pzstd -p num-threads -# -c > /dev/null. For more options. pzstd --help. PZstandard tries to pick a smart default number of threads if not specified (displayed in `pzstd --help`).; If this number is not suitable, during compilation you can define `PZSTD_NUM_THREADS` to the number of threads you prefer. ## Benchmarks. As a reference, PZstandard and Pigz were compared on an Intel Core i7 @ 3.1 GHz, each using 4 threads, with the [Silesia compression corpus](http://sun.aei.polsl.pl/~sdeor/index.php?page=silesia). Compression Speed vs Ratio with 4 Threads | Decompression Speed with 4 Threads; ------------------------------------------|-----------------------------------; ![Compression Speed vs Ratio](images/Cspeed.png ""Compression Speed vs Ratio"") | ![Decompression Speed](images/Dspeed.png ""Decompression Speed""). The test procedure was to run each of the following commands 2 times for each compression level, and take the minimum time. time pzstd -# -p 4 -c silesia.tar > silesia.tar.zst; time pzstd -d -p 4 -c silesia.tar.zst > /dev/null. time pigz -# -p 4 -k -c silesia.tar > silesia.tar.gz; time pigz -d -p 4 -k -c silesia.tar.gz > /dev/null. PZstandard was tested using compression levels 1-19, and Pigz was tested using compression levels 1-9.; Pigz cannot do parallel decompression, it simply does each of reading, decompression, and writing on separate threads. ## Tests. Tests require that you have [gtest](https://github.com/google/googletest) installed.; Set `GTEST_INC` and `GTEST_LIB` in `Makefile` to specify the location of the gtest headers and libraries.; Alternatively, run `make googletest`, which will clone googletest and build it.; Run `make tests && make check` to run tests.; ",MatchSource.DOCS,lib/zstd/contrib/pzstd/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/pzstd/README.md
Integrability,interface,interface,"# Parallel Zstandard (PZstandard). Parallel Zstandard is a Pigz-like tool for Zstandard.; It provides Zstandard format compatible compression and decompression that is able to utilize multiple cores.; It breaks the input up into equal sized chunks and compresses each chunk independently into a Zstandard frame.; It then concatenates the frames together to produce the final compressed output.; Pzstandard will write a 12 byte header for each frame that is a skippable frame in the Zstandard format, which tells PZstandard the size of the next compressed frame.; PZstandard supports parallel decompression of files compressed with PZstandard.; When decompressing files compressed with Zstandard, PZstandard does IO in one thread, and decompression in another. ## Usage. PZstandard supports the same command line interface as Zstandard, but also provides the `-p` option to specify the number of threads.; Dictionary mode is not currently supported. Basic usage. pzstd input-file -o output-file -p num-threads -# # Compression; pzstd -d input-file -o output-file -p num-threads # Decompression. PZstandard also supports piping and fifo pipes. cat input-file | pzstd -p num-threads -# -c > /dev/null. For more options. pzstd --help. PZstandard tries to pick a smart default number of threads if not specified (displayed in `pzstd --help`).; If this number is not suitable, during compilation you can define `PZSTD_NUM_THREADS` to the number of threads you prefer. ## Benchmarks. As a reference, PZstandard and Pigz were compared on an Intel Core i7 @ 3.1 GHz, each using 4 threads, with the [Silesia compression corpus](http://sun.aei.polsl.pl/~sdeor/index.php?page=silesia). Compression Speed vs Ratio with 4 Threads | Decompression Speed with 4 Threads; ------------------------------------------|-----------------------------------; ![Compression Speed vs Ratio](images/Cspeed.png ""Compression Speed vs Ratio"") | ![Decompression Speed](images/Dspeed.png ""Decompression Speed""). The test procedure was",MatchSource.DOCS,lib/zstd/contrib/pzstd/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/pzstd/README.md
Testability,test,test,"ion to specify the number of threads.; Dictionary mode is not currently supported. Basic usage. pzstd input-file -o output-file -p num-threads -# # Compression; pzstd -d input-file -o output-file -p num-threads # Decompression. PZstandard also supports piping and fifo pipes. cat input-file | pzstd -p num-threads -# -c > /dev/null. For more options. pzstd --help. PZstandard tries to pick a smart default number of threads if not specified (displayed in `pzstd --help`).; If this number is not suitable, during compilation you can define `PZSTD_NUM_THREADS` to the number of threads you prefer. ## Benchmarks. As a reference, PZstandard and Pigz were compared on an Intel Core i7 @ 3.1 GHz, each using 4 threads, with the [Silesia compression corpus](http://sun.aei.polsl.pl/~sdeor/index.php?page=silesia). Compression Speed vs Ratio with 4 Threads | Decompression Speed with 4 Threads; ------------------------------------------|-----------------------------------; ![Compression Speed vs Ratio](images/Cspeed.png ""Compression Speed vs Ratio"") | ![Decompression Speed](images/Dspeed.png ""Decompression Speed""). The test procedure was to run each of the following commands 2 times for each compression level, and take the minimum time. time pzstd -# -p 4 -c silesia.tar > silesia.tar.zst; time pzstd -d -p 4 -c silesia.tar.zst > /dev/null. time pigz -# -p 4 -k -c silesia.tar > silesia.tar.gz; time pigz -d -p 4 -k -c silesia.tar.gz > /dev/null. PZstandard was tested using compression levels 1-19, and Pigz was tested using compression levels 1-9.; Pigz cannot do parallel decompression, it simply does each of reading, decompression, and writing on separate threads. ## Tests. Tests require that you have [gtest](https://github.com/google/googletest) installed.; Set `GTEST_INC` and `GTEST_LIB` in `Makefile` to specify the location of the gtest headers and libraries.; Alternatively, run `make googletest`, which will clone googletest and build it.; Run `make tests && make check` to run tests.; ",MatchSource.DOCS,lib/zstd/contrib/pzstd/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/pzstd/README.md
Usability,simpl,simply,"ion to specify the number of threads.; Dictionary mode is not currently supported. Basic usage. pzstd input-file -o output-file -p num-threads -# # Compression; pzstd -d input-file -o output-file -p num-threads # Decompression. PZstandard also supports piping and fifo pipes. cat input-file | pzstd -p num-threads -# -c > /dev/null. For more options. pzstd --help. PZstandard tries to pick a smart default number of threads if not specified (displayed in `pzstd --help`).; If this number is not suitable, during compilation you can define `PZSTD_NUM_THREADS` to the number of threads you prefer. ## Benchmarks. As a reference, PZstandard and Pigz were compared on an Intel Core i7 @ 3.1 GHz, each using 4 threads, with the [Silesia compression corpus](http://sun.aei.polsl.pl/~sdeor/index.php?page=silesia). Compression Speed vs Ratio with 4 Threads | Decompression Speed with 4 Threads; ------------------------------------------|-----------------------------------; ![Compression Speed vs Ratio](images/Cspeed.png ""Compression Speed vs Ratio"") | ![Decompression Speed](images/Dspeed.png ""Decompression Speed""). The test procedure was to run each of the following commands 2 times for each compression level, and take the minimum time. time pzstd -# -p 4 -c silesia.tar > silesia.tar.zst; time pzstd -d -p 4 -c silesia.tar.zst > /dev/null. time pigz -# -p 4 -k -c silesia.tar > silesia.tar.gz; time pigz -d -p 4 -k -c silesia.tar.gz > /dev/null. PZstandard was tested using compression levels 1-19, and Pigz was tested using compression levels 1-9.; Pigz cannot do parallel decompression, it simply does each of reading, decompression, and writing on separate threads. ## Tests. Tests require that you have [gtest](https://github.com/google/googletest) installed.; Set `GTEST_INC` and `GTEST_LIB` in `Makefile` to specify the location of the gtest headers and libraries.; Alternatively, run `make googletest`, which will clone googletest and build it.; Run `make tests && make check` to run tests.; ",MatchSource.DOCS,lib/zstd/contrib/pzstd/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/pzstd/README.md
Energy Efficiency,charge,charge,"# Zstandard Seekable Format. ### Notices. Copyright (c) 2017-present Facebook, Inc. Permission is granted to copy and distribute this document; for any purpose and without charge,; including translations into other languages; and incorporation into compilations,; provided that the copyright notice and this notice are preserved,; and that any substantive changes or deletions from the original; are clearly marked.; Distribution of this document is unlimited. ### Version; 0.1.0 (11/04/17). ## Introduction; This document defines a format for compressed data to be stored so that subranges of the data can be efficiently decompressed without requiring the entire document to be decompressed.; This is done by splitting up the input data into frames,; each of which are compressed independently,; and so can be decompressed independently.; Decompression then takes advantage of a provided 'seek table', which allows the decompressor to immediately jump to the desired data. This is done in a way that is compatible with the original Zstandard format by placing the seek table in a Zstandard skippable frame. ### Overall conventions; In this document:; - square brackets i.e. `[` and `]` are used to indicate optional fields or parameters.; - the naming convention for identifiers is `Mixed_Case_With_Underscores`; - All numeric fields are little-endian unless specified otherwise. ## Format. The format consists of a number of frames (Zstandard compressed frames and skippable frames), followed by a final skippable frame at the end containing the seek table. ### Seek Table Format; The structure of the seek table frame is as follows:. |`Skippable_Magic_Number`|`Frame_Size`|`[Seek_Table_Entries]`|`Seek_Table_Footer`|; |------------------------|------------|----------------------|-------------------|; | 4 bytes | 4 bytes | 8-12 bytes each | 9 bytes |. __`Skippable_Magic_Number`__. Value : 0x184D2A5E.; This is for compatibility with [Zstandard skippable frames].; Since it is legal for other Zsta",MatchSource.DOCS,lib/zstd/contrib/seekable_format/zstd_seekable_compression_format.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/seekable_format/zstd_seekable_compression_format.md
Security,checksum,checksum,"ek_Table_Footer`; The seek table footer format is as follows:. |`Number_Of_Frames`|`Seek_Table_Descriptor`|`Seekable_Magic_Number`|; |------------------|-----------------------|-----------------------|; | 4 bytes | 1 byte | 4 bytes |. __`Seekable_Magic_Number`__. Value : 0x8F92EAB1.; This value must be the last bytes present in the compressed file so that decoders; can efficiently find it and determine if there is an actual seek table present. __`Number_Of_Frames`__. The number of stored frames in the data. __`Seek_Table_Descriptor`__. A bitfield describing the format of the seek table. | Bit number | Field name |; | ---------- | ---------- |; | 7 | `Checksum_Flag` |; | 6-2 | `Reserved_Bits` |; | 1-0 | `Unused_Bits` |. While only `Checksum_Flag` currently exists, there are 7 other bits in this field that can be used for future changes to the format,; for example the addition of inline dictionaries. __`Checksum_Flag`__. If the checksum flag is set, each of the seek table entries contains a 4 byte checksum of the uncompressed data contained in its frame. `Reserved_Bits` are not currently used but may be used in the future for breaking changes, so a compliant decoder should ensure they are set to 0. `Unused_Bits` may be used in the future for non-breaking changes, so a compliant decoder should not interpret these bits. #### __`Seek_Table_Entries`__. `Seek_Table_Entries` consists of `Number_Of_Frames` (one for each frame in the data, not including the seek table frame) entries of the following form, in sequence:. |`Compressed_Size`|`Decompressed_Size`|`[Checksum]`|; |-----------------|-------------------|------------|; | 4 bytes | 4 bytes | 4 bytes |. __`Compressed_Size`__. The compressed size of the frame.; The cumulative sum of the `Compressed_Size` fields of frames `0` to `i` gives the offset in the compressed file of frame `i+1`. __`Decompressed_Size`__. The size of the decompressed data contained in the frame. For skippable or otherwise empty frames, this value is ",MatchSource.DOCS,lib/zstd/contrib/seekable_format/zstd_seekable_compression_format.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/seekable_format/zstd_seekable_compression_format.md
Usability,clear,clearly,"# Zstandard Seekable Format. ### Notices. Copyright (c) 2017-present Facebook, Inc. Permission is granted to copy and distribute this document; for any purpose and without charge,; including translations into other languages; and incorporation into compilations,; provided that the copyright notice and this notice are preserved,; and that any substantive changes or deletions from the original; are clearly marked.; Distribution of this document is unlimited. ### Version; 0.1.0 (11/04/17). ## Introduction; This document defines a format for compressed data to be stored so that subranges of the data can be efficiently decompressed without requiring the entire document to be decompressed.; This is done by splitting up the input data into frames,; each of which are compressed independently,; and so can be decompressed independently.; Decompression then takes advantage of a provided 'seek table', which allows the decompressor to immediately jump to the desired data. This is done in a way that is compatible with the original Zstandard format by placing the seek table in a Zstandard skippable frame. ### Overall conventions; In this document:; - square brackets i.e. `[` and `]` are used to indicate optional fields or parameters.; - the naming convention for identifiers is `Mixed_Case_With_Underscores`; - All numeric fields are little-endian unless specified otherwise. ## Format. The format consists of a number of frames (Zstandard compressed frames and skippable frames), followed by a final skippable frame at the end containing the seek table. ### Seek Table Format; The structure of the seek table frame is as follows:. |`Skippable_Magic_Number`|`Frame_Size`|`[Seek_Table_Entries]`|`Seek_Table_Footer`|; |------------------------|------------|----------------------|-------------------|; | 4 bytes | 4 bytes | 8-12 bytes each | 9 bytes |. __`Skippable_Magic_Number`__. Value : 0x184D2A5E.; This is for compatibility with [Zstandard skippable frames].; Since it is legal for other Zsta",MatchSource.DOCS,lib/zstd/contrib/seekable_format/zstd_seekable_compression_format.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/seekable_format/zstd_seekable_compression_format.md
Performance,optimiz,optimize,"Benchmarking Dictionary Builder. ### Permitted Argument:; Input File/Directory (in=fileName): required; file/directory used to build dictionary; if directory, will operate recursively for files inside directory; can include multiple files/directories, each following ""in="". ###Running Test:; make test. ###Usage:; Benchmark given input files: make ARG= followed by permitted arguments. ### Examples:; make ARG=""in=../../../lib/dictBuilder in=../../../lib/compress"". ###Benchmarking Result:; - First Cover is optimize cover, second Cover uses optimized d and k from first one.; - For every f value of fastCover, the first one is optimize fastCover and the second one uses optimized d and k from first one. This is run for accel values from 1 to 10.; - Fourth column is chosen d and fifth column is chosen k. github:; NODICT 0.000004 2.999642 ; RANDOM 0.024560 8.791189 ; LEGACY 0.727109 8.173529 ; COVER 40.565676 10.652243 8 1298; COVER 3.608284 10.652243 8 1298; FAST f=15 a=1 4.181024 10.570882 8 1154; FAST f=15 a=1 0.040788 10.570882 8 1154; FAST f=15 a=2 3.548352 10.574287 6 1970; FAST f=15 a=2 0.035535 10.574287 6 1970; FAST f=15 a=3 3.287364 10.613950 6 1010; FAST f=15 a=3 0.032182 10.613950 6 1010; FAST f=15 a=4 3.184976 10.573883 6 1058; FAST f=15 a=4 0.029878 10.573883 6 1058; FAST f=15 a=5 3.045513 10.580640 8 1154; FAST f=15 a=5 0.022162 10.580640 8 1154; FAST f=15 a=6 3.003296 10.583677 6 1010; FAST f=15 a=6 0.028091 10.583677 6 1010; FAST f=15 a=7 2.952655 10.622551 6 1106; FAST f=15 a=7 0.02724 10.622551 6 1106; FAST f=15 a=8 2.945674 10.614657 6 1010; FAST f=15 a=8 0.027264 10.614657 6 1010; FAST f=15 a=9 3.153439 10.564018 8 1154; FAST f=15 a=9 0.020635 10.564018 8 1154; FAST f=15 a=10 2.950416 10.511454 6 1010; FAST f=15 a=10 0.026606 10.511454 6 1010; FAST f=16 a=1 3.970029 10.681035 8 1154; FAST f=16 a=1 0.038188 10.681035 8 1154; FAST f=16 a=2 3.422892 10.484978 6 1874; FAST f=16 a=2 0.034702 10.484978 6 1874; FAST f=16 a=3 3.215836 10.632631 8 1154; FAST f=16 a",MatchSource.DOCS,lib/zstd/contrib/experimental_dict_builders/benchmarkDictBuilder/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/experimental_dict_builders/benchmarkDictBuilder/README.md
Testability,test,test,"Benchmarking Dictionary Builder. ### Permitted Argument:; Input File/Directory (in=fileName): required; file/directory used to build dictionary; if directory, will operate recursively for files inside directory; can include multiple files/directories, each following ""in="". ###Running Test:; make test. ###Usage:; Benchmark given input files: make ARG= followed by permitted arguments. ### Examples:; make ARG=""in=../../../lib/dictBuilder in=../../../lib/compress"". ###Benchmarking Result:; - First Cover is optimize cover, second Cover uses optimized d and k from first one.; - For every f value of fastCover, the first one is optimize fastCover and the second one uses optimized d and k from first one. This is run for accel values from 1 to 10.; - Fourth column is chosen d and fifth column is chosen k. github:; NODICT 0.000004 2.999642 ; RANDOM 0.024560 8.791189 ; LEGACY 0.727109 8.173529 ; COVER 40.565676 10.652243 8 1298; COVER 3.608284 10.652243 8 1298; FAST f=15 a=1 4.181024 10.570882 8 1154; FAST f=15 a=1 0.040788 10.570882 8 1154; FAST f=15 a=2 3.548352 10.574287 6 1970; FAST f=15 a=2 0.035535 10.574287 6 1970; FAST f=15 a=3 3.287364 10.613950 6 1010; FAST f=15 a=3 0.032182 10.613950 6 1010; FAST f=15 a=4 3.184976 10.573883 6 1058; FAST f=15 a=4 0.029878 10.573883 6 1058; FAST f=15 a=5 3.045513 10.580640 8 1154; FAST f=15 a=5 0.022162 10.580640 8 1154; FAST f=15 a=6 3.003296 10.583677 6 1010; FAST f=15 a=6 0.028091 10.583677 6 1010; FAST f=15 a=7 2.952655 10.622551 6 1106; FAST f=15 a=7 0.02724 10.622551 6 1106; FAST f=15 a=8 2.945674 10.614657 6 1010; FAST f=15 a=8 0.027264 10.614657 6 1010; FAST f=15 a=9 3.153439 10.564018 8 1154; FAST f=15 a=9 0.020635 10.564018 8 1154; FAST f=15 a=10 2.950416 10.511454 6 1010; FAST f=15 a=10 0.026606 10.511454 6 1010; FAST f=16 a=1 3.970029 10.681035 8 1154; FAST f=16 a=1 0.038188 10.681035 8 1154; FAST f=16 a=2 3.422892 10.484978 6 1874; FAST f=16 a=2 0.034702 10.484978 6 1874; FAST f=16 a=3 3.215836 10.632631 8 1154; FAST f=16 a",MatchSource.DOCS,lib/zstd/contrib/experimental_dict_builders/benchmarkDictBuilder/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/experimental_dict_builders/benchmarkDictBuilder/README.md
Performance,optimiz,optimize,"FastCover Dictionary Builder. ### Permitted Arguments:; Input File/Directory (in=fileName): required; file/directory used to build dictionary; if directory, will operate recursively for files inside directory; can include multiple files/directories, each following ""in=""; Output Dictionary (out=dictName): if not provided, default to fastCoverDict; Dictionary ID (dictID=#): nonnegative number; if not provided, default to 0; Maximum Dictionary Size (maxdict=#): positive number; in bytes, if not provided, default to 110KB; Size of Selected Segment (k=#): positive number; in bytes; if not provided, default to 200; Size of Dmer (d=#): either 6 or 8; if not provided, default to 8; Number of steps (steps=#): positive number, if not provided, default to 32; Percentage of samples used for training(split=#): positive number; if not provided, default to 100. ###Running Test:; make test. ###Usage:; To build a FASTCOVER dictionary with the provided arguments: make ARG= followed by arguments; If k or d is not provided, the optimize version of FASTCOVER is run. ### Examples:; make ARG=""in=../../../lib/dictBuilder out=dict100 dictID=520""; make ARG=""in=../../../lib/dictBuilder in=../../../lib/compress""; ",MatchSource.DOCS,lib/zstd/contrib/experimental_dict_builders/fastCover/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/experimental_dict_builders/fastCover/README.md
Testability,test,test,"FastCover Dictionary Builder. ### Permitted Arguments:; Input File/Directory (in=fileName): required; file/directory used to build dictionary; if directory, will operate recursively for files inside directory; can include multiple files/directories, each following ""in=""; Output Dictionary (out=dictName): if not provided, default to fastCoverDict; Dictionary ID (dictID=#): nonnegative number; if not provided, default to 0; Maximum Dictionary Size (maxdict=#): positive number; in bytes, if not provided, default to 110KB; Size of Selected Segment (k=#): positive number; in bytes; if not provided, default to 200; Size of Dmer (d=#): either 6 or 8; if not provided, default to 8; Number of steps (steps=#): positive number, if not provided, default to 32; Percentage of samples used for training(split=#): positive number; if not provided, default to 100. ###Running Test:; make test. ###Usage:; To build a FASTCOVER dictionary with the provided arguments: make ARG= followed by arguments; If k or d is not provided, the optimize version of FASTCOVER is run. ### Examples:; make ARG=""in=../../../lib/dictBuilder out=dict100 dictID=520""; make ARG=""in=../../../lib/dictBuilder in=../../../lib/compress""; ",MatchSource.DOCS,lib/zstd/contrib/experimental_dict_builders/fastCover/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/experimental_dict_builders/fastCover/README.md
Testability,test,test,"Random Dictionary Builder. ### Permitted Arguments:; Input File/Directory (in=fileName): required; file/directory used to build dictionary; if directory, will operate recursively for files inside directory; can include multiple files/directories, each following ""in=""; Output Dictionary (out=dictName): if not provided, default to defaultDict; Dictionary ID (dictID=#): nonnegative number; if not provided, default to 0; Maximum Dictionary Size (maxdict=#): positive number; in bytes, if not provided, default to 110KB; Size of Randomly Selected Segment (k=#): positive number; in bytes; if not provided, default to 200. ###Running Test:; make test. ###Usage:; To build a random dictionary with the provided arguments: make ARG= followed by arguments. ### Examples:; make ARG=""in=../../../lib/dictBuilder out=dict100 dictID=520""; make ARG=""in=../../../lib/dictBuilder in=../../../lib/compress""; ",MatchSource.DOCS,lib/zstd/contrib/experimental_dict_builders/randomDictBuilder/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/contrib/experimental_dict_builders/randomDictBuilder/README.md
Security,checksum,checksums,"Educational Decoder; ===================. `zstd_decompress.c` is a self-contained implementation in C99 of a decoder,; according to the [Zstandard format specification].; While it does not implement as many features as the reference decoder,; such as the streaming API or content checksums, it is written to be easy to; follow and understand, to help understand how the Zstandard format works.; It's laid out to match the [format specification],; so it can be used to understand how complex segments could be implemented.; It also contains implementations of Huffman and FSE table decoding. [Zstandard format specification]: https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md; [format specification]: https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md. `harness.c` provides a simple test harness around the decoder:. harness <input-file> <output-file> [dictionary]. As an additional resource to be used with this decoder,; see the `decodecorpus` tool in the [tests] directory.; It generates valid Zstandard frames that can be used to verify; a Zstandard decoder implementation.; Note that to use the tool to verify this decoder implementation,; the --content-size flag should be set,; as this decoder does not handle streaming decoding,; and so it must know the decompressed size in advance. [tests]: https://github.com/facebook/zstd/blob/dev/tests/; ",MatchSource.DOCS,lib/zstd/doc/educational_decoder/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/educational_decoder/README.md
Testability,test,test,"Educational Decoder; ===================. `zstd_decompress.c` is a self-contained implementation in C99 of a decoder,; according to the [Zstandard format specification].; While it does not implement as many features as the reference decoder,; such as the streaming API or content checksums, it is written to be easy to; follow and understand, to help understand how the Zstandard format works.; It's laid out to match the [format specification],; so it can be used to understand how complex segments could be implemented.; It also contains implementations of Huffman and FSE table decoding. [Zstandard format specification]: https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md; [format specification]: https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md. `harness.c` provides a simple test harness around the decoder:. harness <input-file> <output-file> [dictionary]. As an additional resource to be used with this decoder,; see the `decodecorpus` tool in the [tests] directory.; It generates valid Zstandard frames that can be used to verify; a Zstandard decoder implementation.; Note that to use the tool to verify this decoder implementation,; the --content-size flag should be set,; as this decoder does not handle streaming decoding,; and so it must know the decompressed size in advance. [tests]: https://github.com/facebook/zstd/blob/dev/tests/; ",MatchSource.DOCS,lib/zstd/doc/educational_decoder/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/educational_decoder/README.md
Usability,simpl,simple,"Educational Decoder; ===================. `zstd_decompress.c` is a self-contained implementation in C99 of a decoder,; according to the [Zstandard format specification].; While it does not implement as many features as the reference decoder,; such as the streaming API or content checksums, it is written to be easy to; follow and understand, to help understand how the Zstandard format works.; It's laid out to match the [format specification],; so it can be used to understand how complex segments could be implemented.; It also contains implementations of Huffman and FSE table decoding. [Zstandard format specification]: https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md; [format specification]: https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md. `harness.c` provides a simple test harness around the decoder:. harness <input-file> <output-file> [dictionary]. As an additional resource to be used with this decoder,; see the `decodecorpus` tool in the [tests] directory.; It generates valid Zstandard frames that can be used to verify; a Zstandard decoder implementation.; Note that to use the tool to verify this decoder implementation,; the --content-size flag should be set,; as this decoder does not handle streaming decoding,; and so it must know the decompressed size in advance. [tests]: https://github.com/facebook/zstd/blob/dev/tests/; ",MatchSource.DOCS,lib/zstd/doc/educational_decoder/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/educational_decoder/README.md
Availability,avail,available,"y compression benchmark module with compression; levels starting from `-b` and ending with `-e` with iteration time of `-i` seconds.; CLI supports aggregation of parameters i.e. `-b1`, `-e18`, and `-i1` can be joined; into `-b1e18i1`. #### The example of usage of static and dynamic ZSTD libraries with gcc/MinGW. Use `cd example` and `make` to build `fullbench-dll` and `fullbench-lib`.; `fullbench-dll` uses a dynamic ZSTD library from the `dll` directory.; `fullbench-lib` uses a static ZSTD library from the `lib` directory. #### Using ZSTD DLL with gcc/MinGW. The header files from `include\` and the dynamic library `dll\libzstd.dll`; are required to compile a project using gcc/MinGW.; The dynamic library has to be added to linking options.; It means that if a project that uses ZSTD consists of a single `test-dll.c`; file it should be linked with `dll\libzstd.dll`. For example:; ```; gcc $(CFLAGS) -Iinclude\ test-dll.c -o test-dll dll\libzstd.dll; ```; The compiled executable will require ZSTD DLL which is available at `dll\libzstd.dll`. #### The example of usage of static and dynamic ZSTD libraries with Visual C++. Open `example\fullbench-dll.sln` to compile `fullbench-dll` that uses a; dynamic ZSTD library from the `dll` directory. The solution works with Visual C++; 2010 or newer. When one will open the solution with Visual C++ newer than 2010; then the solution will upgraded to the current version. #### Using ZSTD DLL with Visual C++. The header files from `include\` and the import library `dll\libzstd.lib`; are required to compile a project using Visual C++. 1. The path to header files should be added to `Additional Include Directories` that can; be found in project properties `C/C++` then `General`.; 2. The import library has to be added to `Additional Dependencies` that can; be found in project properties `Linker` then `Input`.; If one will provide only the name `libzstd.lib` without a full path to the library; the directory has to be added to `Linker\General\Ad",MatchSource.DOCS,lib/zstd/lib/dll/example/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/lib/dll/example/README.md
Deployability,upgrade,upgraded,"-i` seconds.; CLI supports aggregation of parameters i.e. `-b1`, `-e18`, and `-i1` can be joined; into `-b1e18i1`. #### The example of usage of static and dynamic ZSTD libraries with gcc/MinGW. Use `cd example` and `make` to build `fullbench-dll` and `fullbench-lib`.; `fullbench-dll` uses a dynamic ZSTD library from the `dll` directory.; `fullbench-lib` uses a static ZSTD library from the `lib` directory. #### Using ZSTD DLL with gcc/MinGW. The header files from `include\` and the dynamic library `dll\libzstd.dll`; are required to compile a project using gcc/MinGW.; The dynamic library has to be added to linking options.; It means that if a project that uses ZSTD consists of a single `test-dll.c`; file it should be linked with `dll\libzstd.dll`. For example:; ```; gcc $(CFLAGS) -Iinclude\ test-dll.c -o test-dll dll\libzstd.dll; ```; The compiled executable will require ZSTD DLL which is available at `dll\libzstd.dll`. #### The example of usage of static and dynamic ZSTD libraries with Visual C++. Open `example\fullbench-dll.sln` to compile `fullbench-dll` that uses a; dynamic ZSTD library from the `dll` directory. The solution works with Visual C++; 2010 or newer. When one will open the solution with Visual C++ newer than 2010; then the solution will upgraded to the current version. #### Using ZSTD DLL with Visual C++. The header files from `include\` and the import library `dll\libzstd.lib`; are required to compile a project using Visual C++. 1. The path to header files should be added to `Additional Include Directories` that can; be found in project properties `C/C++` then `General`.; 2. The import library has to be added to `Additional Dependencies` that can; be found in project properties `Linker` then `Input`.; If one will provide only the name `libzstd.lib` without a full path to the library; the directory has to be added to `Linker\General\Additional Library Directories`. The compiled executable will require ZSTD DLL which is available at `dll\libzstd.dll`.; ",MatchSource.DOCS,lib/zstd/lib/dll/example/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/lib/dll/example/README.md
Testability,benchmark,benchmark,"ZSTD Windows binary package; ====================================. #### The package contents. - `zstd.exe` : Command Line Utility, supporting gzip-like arguments; - `dll\libzstd.dll` : The ZSTD dynamic library (DLL); - `dll\libzstd.lib` : The import library of the ZSTD dynamic library (DLL) for Visual C++; - `example\` : The example of usage of the ZSTD library; - `include\` : Header files required by the ZSTD library; - `static\libzstd_static.lib` : The static ZSTD library (LIB). #### Usage of Command Line Interface. Command Line Interface (CLI) supports gzip-like arguments.; By default CLI takes an input file and compresses it to an output file:; ```; Usage: zstd [arg] [input] [output]; ```; The full list of commands for CLI can be obtained with `-h` or `-H`. The ratio can; be improved with commands from `-3` to `-16` but higher levels also have slower; compression. CLI includes in-memory compression benchmark module with compression; levels starting from `-b` and ending with `-e` with iteration time of `-i` seconds.; CLI supports aggregation of parameters i.e. `-b1`, `-e18`, and `-i1` can be joined; into `-b1e18i1`. #### The example of usage of static and dynamic ZSTD libraries with gcc/MinGW. Use `cd example` and `make` to build `fullbench-dll` and `fullbench-lib`.; `fullbench-dll` uses a dynamic ZSTD library from the `dll` directory.; `fullbench-lib` uses a static ZSTD library from the `lib` directory. #### Using ZSTD DLL with gcc/MinGW. The header files from `include\` and the dynamic library `dll\libzstd.dll`; are required to compile a project using gcc/MinGW.; The dynamic library has to be added to linking options.; It means that if a project that uses ZSTD consists of a single `test-dll.c`; file it should be linked with `dll\libzstd.dll`. For example:; ```; gcc $(CFLAGS) -Iinclude\ test-dll.c -o test-dll dll\libzstd.dll; ```; The compiled executable will require ZSTD DLL which is available at `dll\libzstd.dll`. #### The example of usage of static and dynamic",MatchSource.DOCS,lib/zstd/lib/dll/example/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/lib/dll/example/README.md
Availability,down,downloaded,"# Fuzzing. Each fuzzing target can be built with multiple engines.; Zstd provides a fuzz corpus for each target that can be downloaded with; the command:. ```; make corpora; ```. It will download each corpus into `./corpora/TARGET`. ## fuzz.py. `fuzz.py` is a helper script for building and running fuzzers.; Run `./fuzz.py -h` for the commands and run `./fuzz.py COMMAND -h` for; command specific help. ### Generating Data. `fuzz.py` provides a utility to generate seed data for each fuzzer. ```; make -C ../tests decodecorpus; ./fuzz.py gen TARGET; ```. By default it outputs 100 samples, each at most 8KB into `corpora/TARGET-seed`,; but that can be configured with the `--number`, `--max-size-log` and `--seed`; flags. ### Build; It respects the usual build environment variables `CC`, `CFLAGS`, etc.; The environment variables can be overridden with the corresponding flags; `--cc`, `--cflags`, etc.; The specific fuzzing engine is selected with `LIB_FUZZING_ENGINE` or; `--lib-fuzzing-engine`, the default is `libregression.a`.; It has flags that can easily set up sanitizers `--enable-{a,ub,m}san`, and; coverage instrumentation `--enable-coverage`.; It sets sane defaults which can be overriden with flags `--debug`,; `--enable-ubsan-pointer-overlow`, etc.; Run `./fuzz.py build -h` for help. ### Running Fuzzers. `./fuzz.py` can run `libfuzzer`, `afl`, and `regression` tests.; See the help of the relevant command for options.; Flags not parsed by `fuzz.py` are passed to the fuzzing engine.; The command used to run the fuzzer is printed for debugging. ## LibFuzzer. ```; # Build libfuzzer if necessary; make libFuzzer; # Build the fuzz targets; ./fuzz.py build all --enable-coverage --enable-asan --enable-ubsan --lib-fuzzing-engine Fuzzer/libFuzzer.a --cc clang --cxx clang++; # OR equivalently; CC=clang CXX=clang++ LIB_FUZZING_ENGINE=Fuzzer/libFuzzer.a ./fuzz.py build all --enable-coverage --enable-asan --enable-ubsan; # Run the fuzzer; ./fuzz.py libfuzzer TARGET -max_len=8192 -jobs=",MatchSource.DOCS,lib/zstd/tests/fuzz/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/fuzz/README.md
Modifiability,config,configured,"# Fuzzing. Each fuzzing target can be built with multiple engines.; Zstd provides a fuzz corpus for each target that can be downloaded with; the command:. ```; make corpora; ```. It will download each corpus into `./corpora/TARGET`. ## fuzz.py. `fuzz.py` is a helper script for building and running fuzzers.; Run `./fuzz.py -h` for the commands and run `./fuzz.py COMMAND -h` for; command specific help. ### Generating Data. `fuzz.py` provides a utility to generate seed data for each fuzzer. ```; make -C ../tests decodecorpus; ./fuzz.py gen TARGET; ```. By default it outputs 100 samples, each at most 8KB into `corpora/TARGET-seed`,; but that can be configured with the `--number`, `--max-size-log` and `--seed`; flags. ### Build; It respects the usual build environment variables `CC`, `CFLAGS`, etc.; The environment variables can be overridden with the corresponding flags; `--cc`, `--cflags`, etc.; The specific fuzzing engine is selected with `LIB_FUZZING_ENGINE` or; `--lib-fuzzing-engine`, the default is `libregression.a`.; It has flags that can easily set up sanitizers `--enable-{a,ub,m}san`, and; coverage instrumentation `--enable-coverage`.; It sets sane defaults which can be overriden with flags `--debug`,; `--enable-ubsan-pointer-overlow`, etc.; Run `./fuzz.py build -h` for help. ### Running Fuzzers. `./fuzz.py` can run `libfuzzer`, `afl`, and `regression` tests.; See the help of the relevant command for options.; Flags not parsed by `fuzz.py` are passed to the fuzzing engine.; The command used to run the fuzzer is printed for debugging. ## LibFuzzer. ```; # Build libfuzzer if necessary; make libFuzzer; # Build the fuzz targets; ./fuzz.py build all --enable-coverage --enable-asan --enable-ubsan --lib-fuzzing-engine Fuzzer/libFuzzer.a --cc clang --cxx clang++; # OR equivalently; CC=clang CXX=clang++ LIB_FUZZING_ENGINE=Fuzzer/libFuzzer.a ./fuzz.py build all --enable-coverage --enable-asan --enable-ubsan; # Run the fuzzer; ./fuzz.py libfuzzer TARGET -max_len=8192 -jobs=",MatchSource.DOCS,lib/zstd/tests/fuzz/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/fuzz/README.md
Security,sanitiz,sanitizers,"s for each target that can be downloaded with; the command:. ```; make corpora; ```. It will download each corpus into `./corpora/TARGET`. ## fuzz.py. `fuzz.py` is a helper script for building and running fuzzers.; Run `./fuzz.py -h` for the commands and run `./fuzz.py COMMAND -h` for; command specific help. ### Generating Data. `fuzz.py` provides a utility to generate seed data for each fuzzer. ```; make -C ../tests decodecorpus; ./fuzz.py gen TARGET; ```. By default it outputs 100 samples, each at most 8KB into `corpora/TARGET-seed`,; but that can be configured with the `--number`, `--max-size-log` and `--seed`; flags. ### Build; It respects the usual build environment variables `CC`, `CFLAGS`, etc.; The environment variables can be overridden with the corresponding flags; `--cc`, `--cflags`, etc.; The specific fuzzing engine is selected with `LIB_FUZZING_ENGINE` or; `--lib-fuzzing-engine`, the default is `libregression.a`.; It has flags that can easily set up sanitizers `--enable-{a,ub,m}san`, and; coverage instrumentation `--enable-coverage`.; It sets sane defaults which can be overriden with flags `--debug`,; `--enable-ubsan-pointer-overlow`, etc.; Run `./fuzz.py build -h` for help. ### Running Fuzzers. `./fuzz.py` can run `libfuzzer`, `afl`, and `regression` tests.; See the help of the relevant command for options.; Flags not parsed by `fuzz.py` are passed to the fuzzing engine.; The command used to run the fuzzer is printed for debugging. ## LibFuzzer. ```; # Build libfuzzer if necessary; make libFuzzer; # Build the fuzz targets; ./fuzz.py build all --enable-coverage --enable-asan --enable-ubsan --lib-fuzzing-engine Fuzzer/libFuzzer.a --cc clang --cxx clang++; # OR equivalently; CC=clang CXX=clang++ LIB_FUZZING_ENGINE=Fuzzer/libFuzzer.a ./fuzz.py build all --enable-coverage --enable-asan --enable-ubsan; # Run the fuzzer; ./fuzz.py libfuzzer TARGET -max_len=8192 -jobs=4; ```. where `TARGET` could be `simple_decompress`, `stream_round_trip`, etc. ### MSAN. Fuzzi",MatchSource.DOCS,lib/zstd/tests/fuzz/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/fuzz/README.md
Testability,test,tests,"# Fuzzing. Each fuzzing target can be built with multiple engines.; Zstd provides a fuzz corpus for each target that can be downloaded with; the command:. ```; make corpora; ```. It will download each corpus into `./corpora/TARGET`. ## fuzz.py. `fuzz.py` is a helper script for building and running fuzzers.; Run `./fuzz.py -h` for the commands and run `./fuzz.py COMMAND -h` for; command specific help. ### Generating Data. `fuzz.py` provides a utility to generate seed data for each fuzzer. ```; make -C ../tests decodecorpus; ./fuzz.py gen TARGET; ```. By default it outputs 100 samples, each at most 8KB into `corpora/TARGET-seed`,; but that can be configured with the `--number`, `--max-size-log` and `--seed`; flags. ### Build; It respects the usual build environment variables `CC`, `CFLAGS`, etc.; The environment variables can be overridden with the corresponding flags; `--cc`, `--cflags`, etc.; The specific fuzzing engine is selected with `LIB_FUZZING_ENGINE` or; `--lib-fuzzing-engine`, the default is `libregression.a`.; It has flags that can easily set up sanitizers `--enable-{a,ub,m}san`, and; coverage instrumentation `--enable-coverage`.; It sets sane defaults which can be overriden with flags `--debug`,; `--enable-ubsan-pointer-overlow`, etc.; Run `./fuzz.py build -h` for help. ### Running Fuzzers. `./fuzz.py` can run `libfuzzer`, `afl`, and `regression` tests.; See the help of the relevant command for options.; Flags not parsed by `fuzz.py` are passed to the fuzzing engine.; The command used to run the fuzzer is printed for debugging. ## LibFuzzer. ```; # Build libfuzzer if necessary; make libFuzzer; # Build the fuzz targets; ./fuzz.py build all --enable-coverage --enable-asan --enable-ubsan --lib-fuzzing-engine Fuzzer/libFuzzer.a --cc clang --cxx clang++; # OR equivalently; CC=clang CXX=clang++ LIB_FUZZING_ENGINE=Fuzzer/libFuzzer.a ./fuzz.py build all --enable-coverage --enable-asan --enable-ubsan; # Run the fuzzer; ./fuzz.py libfuzzer TARGET -max_len=8192 -jobs=",MatchSource.DOCS,lib/zstd/tests/fuzz/README.md,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/fuzz/README.md
Availability,error,errors," results in profile search; set(MMSEQS_CXX_FLAGS ""${MMSEQS_CXX_FLAGS} -fp-model precise""); endif (). # Apple specific features; if (APPLE); # macOS SDK started using _Atomic (in ucred.h) which g++ does not support; # __APPLE_API_STRICT_CONFORMANCE makes sysctl.h not include apis like ucred.h; # See: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89864; set(MMSEQS_CXX_FLAGS ""${MMSEQS_CXX_FLAGS} -D__APPLE_API_STRICT_CONFORMANCE""); endif (). if (CMAKE_SYSTEM_NAME STREQUAL ""FreeBSD""); set(MMSEQS_CXX_FLAGS ""${MMSEQS_CXX_FLAGS} -D_WITH_GETLINE""); endif (). if (CYGWIN); # default cygwin allocator (dlmalloc) locks on every allocation and destroys MT performance; add_subdirectory(lib/nedmalloc); # IPS4O seems to deadlock on cygwin; set(DISABLE_IPS4O 1); endif(). if ((CMAKE_CXX_COMPILER_ID STREQUAL ""Clang"" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS ""5.0.0""); OR (CMAKE_CXX_COMPILER_ID STREQUAL ""AppleClang"" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS ""9.1.0"")); # clang before v5 throws compile errors on ips4o; set(DISABLE_IPS4O 1); endif (). if (PPC64 OR SPARC OR ZARCH); # FIXME: investigate why on ppc the regression seems to fail randomly; set(DISABLE_IPS4O 1); endif (). set(MMSEQS_C_FLAGS ""${MMSEQS_CXX_FLAGS}""); set(MMSEQS_CXX_FLAGS ""${MMSEQS_CXX_FLAGS} -std=c++1y""); # Compiler-specific features; if (CMAKE_COMPILER_IS_CLANG AND (NOT EMSCRIPTEN)); set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD ""c++11""); set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY ""libc++""); set(MMSEQS_CXX_FLAGS ""${MMSEQS_CXX_FLAGS} -stdlib=libc++""); endif (). if (USE_SYSTEM_ZSTD); include(FindPackageHandleStandardArgs); find_path(ZSTD_INCLUDE_DIRS NAMES zstd.h REQUIRED); # We use ZSTD_findDecompressedSize which is only available with ZSTD_STATIC_LINKING_ONLY; find_library(ZSTD_LIBRARIES NAMES libzstd.a libzstd_static REQUIRED); find_package_handle_standard_args(ZSTD DEFAULT_MSG ZSTD_LIBRARIES ZSTD_INCLUDE_DIRS); mark_as_advanced(ZSTD_LIBRARIES ZSTD_INCLUDE_DIRS); include_directories(${ZSTD_INCLUDE_DIRS});",MatchSource.DOCS,CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/CMakeLists.txt
Integrability,message,message,"cmake_minimum_required(VERSION 2.8.12 FATAL_ERROR); project(MMseqs CXX C); message(""-- Source Directory: ${CMAKE_CURRENT_SOURCE_DIR}""); message(""-- Project Directory: ${PROJECT_SOURCE_DIR}""); set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""). set(FRAMEWORK_ONLY 0 CACHE BOOL ""Framework mode (don't create mmseqs executable)""); set(HAVE_SANITIZER 0 CACHE BOOL ""Have sanitizers""); set(INSTALL_UTIL 1 CACHE BOOL ""Install utility scripts""); set(VERSION_OVERRIDE """" CACHE STRING ""Override version string in help and usage messages""); set(DISABLE_IPS4O 0 CACHE BOOL ""Disabling IPS4O sorting library requiring 128-bit compare exchange operations""); set(HAVE_AVX2 0 CACHE BOOL ""Have CPU with AVX2""); set(HAVE_SSE4_1 0 CACHE BOOL ""Have CPU with SSE4.1""); set(HAVE_SSE2 0 CACHE BOOL ""Have CPU with SSE2""); set(HAVE_POWER9 0 CACHE BOOL ""Have POWER9 CPU""); set(HAVE_POWER8 0 CACHE BOOL ""Have POWER8 CPU""); set(HAVE_ARM8 0 CACHE BOOL ""Have ARMv8 CPU""); set(HAVE_S390X 0 CACHE BOOL ""Have s390x architecture""); set(NATIVE_ARCH 1 CACHE BOOL ""Assume native architecture for SIMD. Use one of the HAVE_* options or set CMAKE_CXX_FLAGS to the appropriate flags if you disable this.""); set(USE_SYSTEM_ZSTD 0 CACHE BOOL ""Use zstd provided by system instead of bundled version""). if (HAVE_SANITIZER); include(FindUBSan); include(FindASan); include(FindMSan); include(FindTSan); endif (). if (NOT CMAKE_BUILD_TYPE); set(CMAKE_BUILD_TYPE Release); endif (). # find compiler; if (CMAKE_CXX_COMPILER_ID MATCHES ""Clang""); message(""-- Compiler is clang(++)""); set(CMAKE_COMPILER_IS_CLANG 1); elseif (CMAKE_CXX_COMPILER_ID STREQUAL ""GNU""); message(""-- Compiler is GNU ""); if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS ""4.9.0""); message(FATAL_ERROR ""Insufficient gcc version""); endif (); elseif (CMAKE_CXX_COMPILER_ID MATCHES ""Intel""); message(""-- Compiler is icc(++)""); set(CMAKE_COMPILER_IS_ICC 1); endif (). # see https://wiki.debian.org/ArchitectureSpecificsMemo for char signedness; set(MMSEQS_CXX_F",MatchSource.DOCS,CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/CMakeLists.txt
Performance,perform,performance,"YSTEM_PROCESSOR MATCHES ""^(arm.*|ARM.*|aarch64.*|AARCH64.*)""); set(ARM 1 CACHE INTERNAL """"); elseif (CMAKE_SYSTEM_PROCESSOR MATCHES ""PPC64*|ppc64*|powerpc64*""); set(PPC64 1 CACHE INTERNAL """"); elseif (CMAKE_SYSTEM_PROCESSOR MATCHES ""amd64|AMD64""); set(X64 1 CACHE INTERNAL """"); elseif (CMAKE_SYSTEM_PROCESSOR MATCHES ""x86|X86""); set(X86 1 CACHE INTERNAL """"); elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^s390""); set(ZARCH 1 CACHE INTERNAL """"); elseif(CMAKE_SYSTEM_PROCESSOR MATCHES ""^sparc""); set(SPARC 1 CACHE INTERNAL """"); else (); message(WARNING ""CPU without native SIMD instructions. Performance will be bad.""); endif (); if (EMSCRIPTEN); set(MMSEQS_ARCH ""-msimd128 -s WASM=1 -s ASSERTIONS=1""); elseif (X86 OR X64); include(CheckSSEFeatures); if (NOT HAVE_SSE4_1_EXTENSIONS); if (NOT HAVE_SSE2_EXTENSIONS); message(FATAL_ERROR ""At least SSE2 is needed to compile""); endif (); message(WARNING ""At least SSE4.1 is needed for best performance""); endif (); # clang has a problem with march=native on travis; if (CMAKE_CXX_COMPILER_ID MATCHES ""Clang"" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS ""4.0.0""); set(MMSEQS_ARCH ""${SSE_FLAGS}""); else(); set(MMSEQS_ARCH ""-march=native""); endif(); elseif (PPC64 OR ARM); set(MMSEQS_ARCH ""-mcpu=native""); elseif (ZARCH); set(MMSEQS_ARCH ""-mcpu=native -mzvector""); else (); set(MMSEQS_ARCH ""-march=native""); endif (); endif (). if (NOT (MMSEQS_ARCH STREQUAL """")); set(MMSEQS_CXX_FLAGS ""${MMSEQS_CXX_FLAGS} ${MMSEQS_ARCH}""); endif (). if (CYGWIN OR ARM OR PPC64); set(MMSEQS_CXX_FLAGS ""${MMSEQS_CXX_FLAGS} -D_GNU_SOURCE=1""); endif (). if (CMAKE_COMPILER_IS_ICC); # default -fp-model results in inconsistent results in profile search; set(MMSEQS_CXX_FLAGS ""${MMSEQS_CXX_FLAGS} -fp-model precise""); endif (). # Apple specific features; if (APPLE); # macOS SDK started using _Atomic (in ucred.h) which g++ does not support; # __APPLE_API_STRICT_CONFORMANCE makes sysctl.h not include apis like ucred.h; # See: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89864; set(MMSE",MatchSource.DOCS,CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/CMakeLists.txt
Security,sanitiz,sanitizers,"cmake_minimum_required(VERSION 2.8.12 FATAL_ERROR); project(MMseqs CXX C); message(""-- Source Directory: ${CMAKE_CURRENT_SOURCE_DIR}""); message(""-- Project Directory: ${PROJECT_SOURCE_DIR}""); set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""). set(FRAMEWORK_ONLY 0 CACHE BOOL ""Framework mode (don't create mmseqs executable)""); set(HAVE_SANITIZER 0 CACHE BOOL ""Have sanitizers""); set(INSTALL_UTIL 1 CACHE BOOL ""Install utility scripts""); set(VERSION_OVERRIDE """" CACHE STRING ""Override version string in help and usage messages""); set(DISABLE_IPS4O 0 CACHE BOOL ""Disabling IPS4O sorting library requiring 128-bit compare exchange operations""); set(HAVE_AVX2 0 CACHE BOOL ""Have CPU with AVX2""); set(HAVE_SSE4_1 0 CACHE BOOL ""Have CPU with SSE4.1""); set(HAVE_SSE2 0 CACHE BOOL ""Have CPU with SSE2""); set(HAVE_POWER9 0 CACHE BOOL ""Have POWER9 CPU""); set(HAVE_POWER8 0 CACHE BOOL ""Have POWER8 CPU""); set(HAVE_ARM8 0 CACHE BOOL ""Have ARMv8 CPU""); set(HAVE_S390X 0 CACHE BOOL ""Have s390x architecture""); set(NATIVE_ARCH 1 CACHE BOOL ""Assume native architecture for SIMD. Use one of the HAVE_* options or set CMAKE_CXX_FLAGS to the appropriate flags if you disable this.""); set(USE_SYSTEM_ZSTD 0 CACHE BOOL ""Use zstd provided by system instead of bundled version""). if (HAVE_SANITIZER); include(FindUBSan); include(FindASan); include(FindMSan); include(FindTSan); endif (). if (NOT CMAKE_BUILD_TYPE); set(CMAKE_BUILD_TYPE Release); endif (). # find compiler; if (CMAKE_CXX_COMPILER_ID MATCHES ""Clang""); message(""-- Compiler is clang(++)""); set(CMAKE_COMPILER_IS_CLANG 1); elseif (CMAKE_CXX_COMPILER_ID STREQUAL ""GNU""); message(""-- Compiler is GNU ""); if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS ""4.9.0""); message(FATAL_ERROR ""Insufficient gcc version""); endif (); elseif (CMAKE_CXX_COMPILER_ID MATCHES ""Intel""); message(""-- Compiler is icc(++)""); set(CMAKE_COMPILER_IS_ICC 1); endif (). # see https://wiki.debian.org/ArchitectureSpecificsMemo for char signedness; set(MMSEQS_CXX_F",MatchSource.DOCS,CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/CMakeLists.txt
Availability,avail,availability,"set(HAVE_MPI 0 CACHE BOOL ""Have MPI""); set(HAVE_TESTS 0 CACHE BOOL ""Have Tests""); set(HAVE_SHELLCHECK 1 CACHE BOOL ""Have ShellCheck""); set(HAVE_GPROF 0 CACHE BOOL ""Have GPROF Profiler""); set(ENABLE_WERROR 0 CACHE BOOL ""Enable Warnings as Errors""); #set(DISABLE_LTO 0 CACHE BOOL ""Disable link-time optimization in non-debug builds""); set(REQUIRE_OPENMP 1 CACHE BOOL ""Require availability of OpenMP""). include(AppendTargetProperty). add_subdirectory(alignment); add_subdirectory(clustering); add_subdirectory(commons); add_subdirectory(linclust); add_subdirectory(multihit); add_subdirectory(prefiltering); add_subdirectory(taxonomy); add_subdirectory(util); add_subdirectory(workflow). add_library(mmseqs-framework; $<TARGET_OBJECTS:alp>; $<TARGET_OBJECTS:ksw2>; $<TARGET_OBJECTS:cacode>; ${alignment_header_files}; ${alignment_source_files}; ${clustering_header_files}; ${clustering_source_files}; ${commons_header_files}; ${commons_source_files}; ${prefiltering_header_files}; ${prefiltering_source_files}; ${multihit_header_files}; ${multihit_source_files}; ${taxonomy_header_files}; ${taxonomy_source_files}; ${linclust_source_files}; ${util_header_files}; ${util_source_files}; ${workflow_source_files}; CommandDeclarations.h; MMseqsBase.cpp; ). target_include_directories(mmseqs-framework PUBLIC ${CMAKE_BINARY_DIR}/generated); target_include_directories(mmseqs-framework PUBLIC ${PROJECT_BINARY_DIR}/generated); target_include_directories(mmseqs-framework PUBLIC alignment); target_include_directories(mmseqs-framework PUBLIC clustering); target_include_directories(mmseqs-framework PUBLIC commons); target_include_directories(mmseqs-framework PUBLIC multihit); target_include_directories(mmseqs-framework PUBLIC prefiltering); target_include_directories(mmseqs-framework PUBLIC linclust); target_include_directories(mmseqs-framework PUBLIC taxonomy); target_include_directories(mmseqs-framework PUBLIC util); target_include_directories(mmseqs-framework PUBLIC .). add_dependencies(mmseqs-framew",MatchSource.DOCS,src/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/src/CMakeLists.txt
Deployability,install,install," if (HAVE_MPI); find_package(MPI REQUIRED); if (MPI_FOUND); message(""-- Found MPI""); target_include_directories(mmseqs-framework PUBLIC ${MPI_INCLUDE_PATH}); #Hack (OMPI_SKIP_MPICXX=1): https://github.com/open-mpi/ompi/issues/5157#issuecomment-388495496; target_compile_definitions(mmseqs-framework PUBLIC -DHAVE_MPI=1 -DOMPI_SKIP_MPICXX=1); target_link_libraries(mmseqs-framework ${MPI_LIBRARIES}); append_target_property(mmseqs-framework COMPILE_FLAGS ${MPI_COMPILE_FLAGS}); append_target_property(mmseqs-framework LINK_FLAGS ${MPI_LINK_FLAGS}); endif (); endif (). find_package(OpenMP QUIET); if (OPENMP_FOUND); message(""-- Found OpenMP""); target_compile_definitions(mmseqs-framework PUBLIC -DOPENMP=1); # For GCC we dont want to do this since it breaks macOS static builds; # It will link libgomp.a internally (through -fopenmp I guess); # and also link libgomp.dylib thus breaking static builds; if (NOT ""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU""); target_link_libraries(mmseqs-framework ${OpenMP_CXX_LIBRARIES}); endif(); append_target_property(mmseqs-framework COMPILE_FLAGS ${OpenMP_CXX_FLAGS}); append_target_property(mmseqs-framework LINK_FLAGS ${OpenMP_CXX_FLAGS}); elseif (REQUIRE_OPENMP); message(FATAL_ERROR ""-- Could not find OpenMP. Skip check with -DREQUIRE_OPENMP=0.""); endif (). if (HAVE_GPROF); include(CheckCXXCompilerFlag); check_cxx_compiler_flag(-pg GPROF_FOUND); if (GPROF_FOUND); append_target_property(mmseqs-framework COMPILE_FLAGS -pg); append_target_property(mmseqs-framework LINK_FLAGS -pg); else (); message(FATAL_ERROR ""-- Could not find GPROF""); endif (); endif (). if (NOT FRAMEWORK_ONLY); include(MMseqsSetupDerivedTarget); add_subdirectory(version); set(mmseqs_source_files mmseqs.cpp). add_executable(mmseqs${EXE_SUFFIX} ${mmseqs_source_files}); mmseqs_setup_derived_target(mmseqs${EXE_SUFFIX}); target_link_libraries(mmseqs${EXE_SUFFIX} version); install(TARGETS mmseqs${EXE_SUFFIX} DESTINATION bin). if (HAVE_TESTS); add_subdirectory(test); endif (); endif (); ",MatchSource.DOCS,src/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/src/CMakeLists.txt
Integrability,message,message,"k_cxx_source_compiles(""; #include <stdlib.h>; #include <fcntl.h>; #include <stdio.h>. int main() {; FILE* tmpf = tmpfile();; int input_desc = fileno(tmpf);; int test = posix_fadvise(input_desc, 0, 0, POSIX_FADV_SEQUENTIAL);; fclose(tmpf);; return 0;; }""; HAVE_POSIX_FADVISE); if (HAVE_POSIX_FADVISE); target_compile_definitions(mmseqs-framework PUBLIC -DHAVE_POSIX_FADVISE=1); endif (). check_cxx_source_compiles(""; #include <stdlib.h>; #include <fcntl.h>; #include <stdio.h>; #include <sys/mman.h>. int main() {; FILE* tmpf = tmpfile();; void *tmp = mmap(NULL, 32, PROT_READ, MAP_SHARED, fileno(tmpf), 0);; int test = posix_madvise(tmp, 32, POSIX_MADV_SEQUENTIAL);; fclose(tmpf);; return 0;; }""; HAVE_POSIX_MADVISE); if (HAVE_POSIX_MADVISE); target_compile_definitions(mmseqs-framework PUBLIC -DHAVE_POSIX_MADVISE=1); endif (). if (NOT DISABLE_IPS4O); find_package(Atomic); if (ATOMIC_FOUND); target_link_libraries(mmseqs-framework ${ATOMIC_LIBRARIES}); target_compile_definitions(mmseqs-framework PUBLIC -DENABLE_IPS4O=1); message(""-- IPS4O sorting works""); else (); message(""-- OMPTL sorting fallback""); endif (); else (); message(""-- OMPTL sorting fallback""); endif (). target_link_libraries(mmseqs-framework tinyexpr ${ZSTD_LIBRARIES} microtar); if (CYGWIN); target_link_libraries(mmseqs-framework nedmalloc); endif (). if (EMSCRIPTEN); target_compile_definitions(mmseqs-framework PUBLIC -DHAVE_ZLIB=1 -DHAVE_BZLIB=1); append_target_property(mmseqs-framework COMPILE_FLAGS -s USE_ZLIB=1 -s USE_BZIP2=1); append_target_property(mmseqs-framework LINK_FLAGS -s USE_ZLIB=1 -s USE_BZIP2=1); else (); find_package(ZLIB QUIET); if (ZLIB_FOUND); message(""-- Found ZLIB""); set(OLD_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS}); set(OLD_CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}); set(OLD_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES}); set(CMAKE_REQUIRED_FLAGS -lz); set(CMAKE_REQUIRED_INCLUDES ${ZLIB_INCLUDE_DIRS}); set(CMAKE_REQUIRED_LIBRARIES ${ZLIB_LIBRARIES}); check_cxx_source_compi",MatchSource.DOCS,src/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/src/CMakeLists.txt
Performance,optimiz,optimization,"set(HAVE_MPI 0 CACHE BOOL ""Have MPI""); set(HAVE_TESTS 0 CACHE BOOL ""Have Tests""); set(HAVE_SHELLCHECK 1 CACHE BOOL ""Have ShellCheck""); set(HAVE_GPROF 0 CACHE BOOL ""Have GPROF Profiler""); set(ENABLE_WERROR 0 CACHE BOOL ""Enable Warnings as Errors""); #set(DISABLE_LTO 0 CACHE BOOL ""Disable link-time optimization in non-debug builds""); set(REQUIRE_OPENMP 1 CACHE BOOL ""Require availability of OpenMP""). include(AppendTargetProperty). add_subdirectory(alignment); add_subdirectory(clustering); add_subdirectory(commons); add_subdirectory(linclust); add_subdirectory(multihit); add_subdirectory(prefiltering); add_subdirectory(taxonomy); add_subdirectory(util); add_subdirectory(workflow). add_library(mmseqs-framework; $<TARGET_OBJECTS:alp>; $<TARGET_OBJECTS:ksw2>; $<TARGET_OBJECTS:cacode>; ${alignment_header_files}; ${alignment_source_files}; ${clustering_header_files}; ${clustering_source_files}; ${commons_header_files}; ${commons_source_files}; ${prefiltering_header_files}; ${prefiltering_source_files}; ${multihit_header_files}; ${multihit_source_files}; ${taxonomy_header_files}; ${taxonomy_source_files}; ${linclust_source_files}; ${util_header_files}; ${util_source_files}; ${workflow_source_files}; CommandDeclarations.h; MMseqsBase.cpp; ). target_include_directories(mmseqs-framework PUBLIC ${CMAKE_BINARY_DIR}/generated); target_include_directories(mmseqs-framework PUBLIC ${PROJECT_BINARY_DIR}/generated); target_include_directories(mmseqs-framework PUBLIC alignment); target_include_directories(mmseqs-framework PUBLIC clustering); target_include_directories(mmseqs-framework PUBLIC commons); target_include_directories(mmseqs-framework PUBLIC multihit); target_include_directories(mmseqs-framework PUBLIC prefiltering); target_include_directories(mmseqs-framework PUBLIC linclust); target_include_directories(mmseqs-framework PUBLIC taxonomy); target_include_directories(mmseqs-framework PUBLIC util); target_include_directories(mmseqs-framework PUBLIC .). add_dependencies(mmseqs-framew",MatchSource.DOCS,src/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/src/CMakeLists.txt
Testability,test,test,"RPROCEDURAL_OPTIMIZATION TRUE); # endif (); # endif (); #endif (). append_target_property(mmseqs-framework COMPILE_FLAGS ${MMSEQS_CXX_FLAGS} -pedantic -Wall -Wextra -Wdisabled-optimization); append_target_property(mmseqs-framework LINK_FLAGS ${MMSEQS_CXX_FLAGS} -pedantic -Wall -Wextra -Wdisabled-optimization); if (NOT EMSCRIPTEN); append_target_property(mmseqs-framework COMPILE_FLAGS -fno-exceptions); append_target_property(mmseqs-framework LINK_FLAGS -fno-exceptions); endif(). if (ENABLE_WERROR); append_target_property(mmseqs-framework COMPILE_FLAGS -Werror -Wno-unused-command-line-argument); append_target_property(mmseqs-framework LINK_FLAGS -Werror -Wno-unused-command-line-argument); endif(). # needed for concat.h; include(CheckCXXSourceCompiles); check_cxx_source_compiles(""; #include <stdlib.h>; #include <fcntl.h>; #include <stdio.h>. int main() {; FILE* tmpf = tmpfile();; int input_desc = fileno(tmpf);; int test = posix_fadvise(input_desc, 0, 0, POSIX_FADV_SEQUENTIAL);; fclose(tmpf);; return 0;; }""; HAVE_POSIX_FADVISE); if (HAVE_POSIX_FADVISE); target_compile_definitions(mmseqs-framework PUBLIC -DHAVE_POSIX_FADVISE=1); endif (). check_cxx_source_compiles(""; #include <stdlib.h>; #include <fcntl.h>; #include <stdio.h>; #include <sys/mman.h>. int main() {; FILE* tmpf = tmpfile();; void *tmp = mmap(NULL, 32, PROT_READ, MAP_SHARED, fileno(tmpf), 0);; int test = posix_madvise(tmp, 32, POSIX_MADV_SEQUENTIAL);; fclose(tmpf);; return 0;; }""; HAVE_POSIX_MADVISE); if (HAVE_POSIX_MADVISE); target_compile_definitions(mmseqs-framework PUBLIC -DHAVE_POSIX_MADVISE=1); endif (). if (NOT DISABLE_IPS4O); find_package(Atomic); if (ATOMIC_FOUND); target_link_libraries(mmseqs-framework ${ATOMIC_LIBRARIES}); target_compile_definitions(mmseqs-framework PUBLIC -DENABLE_IPS4O=1); message(""-- IPS4O sorting works""); else (); message(""-- OMPTL sorting fallback""); endif (); else (); message(""-- OMPTL sorting fallback""); endif (). target_link_libraries(mmseqs-framework tinyexpr ${ZSTD_LIBRARI",MatchSource.DOCS,src/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/src/CMakeLists.txt
Deployability,install,install,install(PROGRAMS; bash-completion.sh; DESTINATION util; ); ,MatchSource.DOCS,util/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/util/CMakeLists.txt
Deployability,install,installed,"This directory contains C++ library files related to calculation of the Gumbel parameters for pairwise sequence alignment. Usage with ""make"". One way to use this library is with the ""make"" command. The following assumes you have ""make"" and a C++ compiler suitably installed. If you use the command line to enter the ""cpp"" directory and type ""make"", it should create a library file called ""libalp.a"". How to use the library is shown in the example directory. If you enter this directory and type ""make"", it should compile the test program: this will work only if it can find the header and library files. In ""example/Makefile"", the -I flag to the C preprocessor adds a directory to search for headers (""sls_alignment_evaluer.hpp""), the -L flag to the linker adds a directory to search for libraries, and -lalp specifies linking to ""libalp"". Please see the URL; http://www.ncbi.nlm.nih.gov/CBBresearch/Spouge/html_ncbi/html/index/software.html#6; for further information.; ",MatchSource.DOCS,lib/alp/readme.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/alp/readme.txt
Testability,test,test,"This directory contains C++ library files related to calculation of the Gumbel parameters for pairwise sequence alignment. Usage with ""make"". One way to use this library is with the ""make"" command. The following assumes you have ""make"" and a C++ compiler suitably installed. If you use the command line to enter the ""cpp"" directory and type ""make"", it should create a library file called ""libalp.a"". How to use the library is shown in the example directory. If you enter this directory and type ""make"", it should compile the test program: this will work only if it can find the header and library files. In ""example/Makefile"", the -I flag to the C preprocessor adds a directory to search for headers (""sls_alignment_evaluer.hpp""), the -L flag to the linker adds a directory to search for libraries, and -lalp specifies linking to ""libalp"". Please see the URL; http://www.ncbi.nlm.nih.gov/CBBresearch/Spouge/html_ncbi/html/index/software.html#6; for further information.; ",MatchSource.DOCS,lib/alp/readme.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/alp/readme.txt
Energy Efficiency,charge,charge,"The MIT License. Copyright (c) 2018- Dana-Farber Cancer Institute; 2017-2018 Broad Institute, Inc. Permission is hereby granted, free of charge, to any person obtaining; a copy of this software and associated documentation files (the; ""Software""), to deal in the Software without restriction, including; without limitation the rights to use, copy, modify, merge, publish,; distribute, sublicense, and/or sell copies of the Software, and to; permit persons to whom the Software is furnished to do so, subject to; the following conditions:. The above copyright notice and this permission notice shall be; included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS; BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN; ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN; CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE; SOFTWARE.; ",MatchSource.DOCS,lib/ksw2/LICENSE.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/ksw2/LICENSE.txt
Energy Efficiency,charge,charge,"Boost Software License - Version 1.0 - August 17th, 2003. Permission is hereby granted, free of charge, to any person or organization; obtaining a copy of the software and accompanying documentation covered by; this license (the ""Software"") to use, reproduce, display, distribute,; execute, and transmit the Software, and to prepare derivative works of the; Software, and to permit third-parties to whom the Software is furnished to; do so, all subject to the following:. The copyright notices in the Software and this entire statement, including; the above license grant, this restriction and the following disclaimer,; must be included in all copies of the Software, in whole or in part, and; all derivative works of the Software, unless such copies or derivative; works are solely in the form of machine-executable object code generated by; a source language processor. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT; SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE; FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER; DEALINGS IN THE SOFTWARE.; ",MatchSource.DOCS,lib/nedmalloc/License.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/nedmalloc/License.txt
Availability,down,down,"createpool() to a fraction of the number of; threads which would normally be in a pool at once. This will reduce; bloating at the cost of an increase in lock contention. If allocated size; is less than THREADCACHEMAX, locking is avoided 90-99% of the time and; if most of your allocations are below this value, you can safely set; MAXTHREADSINPOOL to one. You will suffer memory leakage unless you call neddisablethreadcache(); per pool for every thread which exits. This is because nedalloc cannot; portably know when a thread exits and thus when its thread cache can; be returned for use by other code. Don't forget pool zero, the system pool. For C++ type allocation patterns (where the same sizes of memory are; regularly allocated and deallocated as objects are created and destroyed),; the threadcache always benefits performance. If however your allocation; patterns are different, searching the threadcache may significantly slow; down your code - as a rule of thumb, if cache utilisation is below 80%; (see the source for neddisablethreadcache() for how to enable debug; printing in release mode) then you should disable the thread cache for; that thread. You can compile out the threadcache code by setting; THREADCACHEMAX to zero. Speed comparisons:; -=-=-=-=-=-=-=-=-=; See Benchmarks.xls for details. The enclosed test.c can do two things: it can be a torture test or a speed; test. The speed test is designed to be a representative synthetic; memory allocator test. It works by randomly mixing allocations with frees; with half of the allocation sizes being a two power multiple less than; 512 bytes (to mimic C++ stack instantiated objects) and the other half; being a simple random value less than 16Kb. The real world code results are from Tn's TestIO benchmark. This is a; heavily multithreaded and memory intensive benchmark with a lot of branching; and other stuff modern processors don't like so much. As you'll note, the; test doesn't show the benefits of the threadcache mostly",MatchSource.DOCS,lib/nedmalloc/Readme.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/nedmalloc/Readme.txt
Deployability,release,release,"createpool() to a fraction of the number of; threads which would normally be in a pool at once. This will reduce; bloating at the cost of an increase in lock contention. If allocated size; is less than THREADCACHEMAX, locking is avoided 90-99% of the time and; if most of your allocations are below this value, you can safely set; MAXTHREADSINPOOL to one. You will suffer memory leakage unless you call neddisablethreadcache(); per pool for every thread which exits. This is because nedalloc cannot; portably know when a thread exits and thus when its thread cache can; be returned for use by other code. Don't forget pool zero, the system pool. For C++ type allocation patterns (where the same sizes of memory are; regularly allocated and deallocated as objects are created and destroyed),; the threadcache always benefits performance. If however your allocation; patterns are different, searching the threadcache may significantly slow; down your code - as a rule of thumb, if cache utilisation is below 80%; (see the source for neddisablethreadcache() for how to enable debug; printing in release mode) then you should disable the thread cache for; that thread. You can compile out the threadcache code by setting; THREADCACHEMAX to zero. Speed comparisons:; -=-=-=-=-=-=-=-=-=; See Benchmarks.xls for details. The enclosed test.c can do two things: it can be a torture test or a speed; test. The speed test is designed to be a representative synthetic; memory allocator test. It works by randomly mixing allocations with frees; with half of the allocation sizes being a two power multiple less than; 512 bytes (to mimic C++ stack instantiated objects) and the other half; being a simple random value less than 16Kb. The real world code results are from Tn's TestIO benchmark. This is a; heavily multithreaded and memory intensive benchmark with a lot of branching; and other stuff modern processors don't like so much. As you'll note, the; test doesn't show the benefits of the threadcache mostly",MatchSource.DOCS,lib/nedmalloc/Readme.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/nedmalloc/Readme.txt
Energy Efficiency,allocate,allocates,"the malloc.c.h; file which remains copyright to others. It has been tested on win32 (x86), win64 (x64), Linux (x64), FreeBSD (x64); and Apple MacOS X (x86). It works very well on all of these and is very; significantly faster than the system allocator on all of these platforms. By literally dropping in this allocator as a replacement for your system; allocator, you can see real world improvements of up to three times in normal; code!. To use:; -=-=-=-; Drop in nedmalloc.h, nedmalloc.c and malloc.c.h into your project.; Configure using the instructions in nedmalloc.h. Run and enjoy. To test, compile test.c. It will run a comparison between your system; allocator and nedalloc and tell you how much faster nedalloc is. It also; serves as an example of usage. Notes:; -=-=-=; If you want the very latest version of this allocator, get it from the; TnFOX SVN repository at svn://svn.berlios.de/viewcvs/tnfox/trunk/src/nedmalloc. Because of how nedalloc allocates an mspace per thread, it can cause; severe bloating of memory usage under certain allocation patterns.; You can substantially reduce this wastage by setting MAXTHREADSINPOOL; or the threads parameter to nedcreatepool() to a fraction of the number of; threads which would normally be in a pool at once. This will reduce; bloating at the cost of an increase in lock contention. If allocated size; is less than THREADCACHEMAX, locking is avoided 90-99% of the time and; if most of your allocations are below this value, you can safely set; MAXTHREADSINPOOL to one. You will suffer memory leakage unless you call neddisablethreadcache(); per pool for every thread which exits. This is because nedalloc cannot; portably know when a thread exits and thus when its thread cache can; be returned for use by other code. Don't forget pool zero, the system pool. For C++ type allocation patterns (where the same sizes of memory are; regularly allocated and deallocated as objects are created and destroyed),; the threadcache always benefits perf",MatchSource.DOCS,lib/nedmalloc/Readme.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/nedmalloc/Readme.txt
Modifiability,portab,portable,"nedalloc v1.05 15th June 2008:; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=. by Niall Douglas (http://www.nedprod.com/programs/portable/nedmalloc/). Enclosed is nedalloc, an alternative malloc implementation for multiple; threads without lock contention based on dlmalloc v2.8.4. It is more; or less a newer implementation of ptmalloc2, the standard allocator in; Linux (which is based on dlmalloc v2.7.0) but also contains a per-thread; cache for maximum CPU scalability. It is licensed under the Boost Software License which basically means; you can do anything you like with it. This does not apply to the malloc.c.h; file which remains copyright to others. It has been tested on win32 (x86), win64 (x64), Linux (x64), FreeBSD (x64); and Apple MacOS X (x86). It works very well on all of these and is very; significantly faster than the system allocator on all of these platforms. By literally dropping in this allocator as a replacement for your system; allocator, you can see real world improvements of up to three times in normal; code!. To use:; -=-=-=-; Drop in nedmalloc.h, nedmalloc.c and malloc.c.h into your project.; Configure using the instructions in nedmalloc.h. Run and enjoy. To test, compile test.c. It will run a comparison between your system; allocator and nedalloc and tell you how much faster nedalloc is. It also; serves as an example of usage. Notes:; -=-=-=; If you want the very latest version of this allocator, get it from the; TnFOX SVN repository at svn://svn.berlios.de/viewcvs/tnfox/trunk/src/nedmalloc. Because of how nedalloc allocates an mspace per thread, it can cause; severe bloating of memory usage under certain allocation patterns.; You can substantially reduce this wastage by setting MAXTHREADSINPOOL; or the threads parameter to nedcreatepool() to a fraction of the number of; threads which would normally be in a pool at once. This will reduce; bloating at the cost of an increase in lock contention. If allocated size; is less than THREADCACHEMAX, locking is avoided",MatchSource.DOCS,lib/nedmalloc/Readme.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/nedmalloc/Readme.txt
Performance,cache,cache,"nedalloc v1.05 15th June 2008:; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=. by Niall Douglas (http://www.nedprod.com/programs/portable/nedmalloc/). Enclosed is nedalloc, an alternative malloc implementation for multiple; threads without lock contention based on dlmalloc v2.8.4. It is more; or less a newer implementation of ptmalloc2, the standard allocator in; Linux (which is based on dlmalloc v2.7.0) but also contains a per-thread; cache for maximum CPU scalability. It is licensed under the Boost Software License which basically means; you can do anything you like with it. This does not apply to the malloc.c.h; file which remains copyright to others. It has been tested on win32 (x86), win64 (x64), Linux (x64), FreeBSD (x64); and Apple MacOS X (x86). It works very well on all of these and is very; significantly faster than the system allocator on all of these platforms. By literally dropping in this allocator as a replacement for your system; allocator, you can see real world improvements of up to three times in normal; code!. To use:; -=-=-=-; Drop in nedmalloc.h, nedmalloc.c and malloc.c.h into your project.; Configure using the instructions in nedmalloc.h. Run and enjoy. To test, compile test.c. It will run a comparison between your system; allocator and nedalloc and tell you how much faster nedalloc is. It also; serves as an example of usage. Notes:; -=-=-=; If you want the very latest version of this allocator, get it from the; TnFOX SVN repository at svn://svn.berlios.de/viewcvs/tnfox/trunk/src/nedmalloc. Because of how nedalloc allocates an mspace per thread, it can cause; severe bloating of memory usage under certain allocation patterns.; You can substantially reduce this wastage by setting MAXTHREADSINPOOL; or the threads parameter to nedcreatepool() to a fraction of the number of; threads which would normally be in a pool at once. This will reduce; bloating at the cost of an increase in lock contention. If allocated size; is less than THREADCACHEMAX, locking is avoided",MatchSource.DOCS,lib/nedmalloc/Readme.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/nedmalloc/Readme.txt
Safety,avoid,avoided,"e!. To use:; -=-=-=-; Drop in nedmalloc.h, nedmalloc.c and malloc.c.h into your project.; Configure using the instructions in nedmalloc.h. Run and enjoy. To test, compile test.c. It will run a comparison between your system; allocator and nedalloc and tell you how much faster nedalloc is. It also; serves as an example of usage. Notes:; -=-=-=; If you want the very latest version of this allocator, get it from the; TnFOX SVN repository at svn://svn.berlios.de/viewcvs/tnfox/trunk/src/nedmalloc. Because of how nedalloc allocates an mspace per thread, it can cause; severe bloating of memory usage under certain allocation patterns.; You can substantially reduce this wastage by setting MAXTHREADSINPOOL; or the threads parameter to nedcreatepool() to a fraction of the number of; threads which would normally be in a pool at once. This will reduce; bloating at the cost of an increase in lock contention. If allocated size; is less than THREADCACHEMAX, locking is avoided 90-99% of the time and; if most of your allocations are below this value, you can safely set; MAXTHREADSINPOOL to one. You will suffer memory leakage unless you call neddisablethreadcache(); per pool for every thread which exits. This is because nedalloc cannot; portably know when a thread exits and thus when its thread cache can; be returned for use by other code. Don't forget pool zero, the system pool. For C++ type allocation patterns (where the same sizes of memory are; regularly allocated and deallocated as objects are created and destroyed),; the threadcache always benefits performance. If however your allocation; patterns are different, searching the threadcache may significantly slow; down your code - as a rule of thumb, if cache utilisation is below 80%; (see the source for neddisablethreadcache() for how to enable debug; printing in release mode) then you should disable the thread cache for; that thread. You can compile out the threadcache code by setting; THREADCACHEMAX to zero. Speed comparisons:; ",MatchSource.DOCS,lib/nedmalloc/Readme.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/nedmalloc/Readme.txt
Testability,test,tested,"nedalloc v1.05 15th June 2008:; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=. by Niall Douglas (http://www.nedprod.com/programs/portable/nedmalloc/). Enclosed is nedalloc, an alternative malloc implementation for multiple; threads without lock contention based on dlmalloc v2.8.4. It is more; or less a newer implementation of ptmalloc2, the standard allocator in; Linux (which is based on dlmalloc v2.7.0) but also contains a per-thread; cache for maximum CPU scalability. It is licensed under the Boost Software License which basically means; you can do anything you like with it. This does not apply to the malloc.c.h; file which remains copyright to others. It has been tested on win32 (x86), win64 (x64), Linux (x64), FreeBSD (x64); and Apple MacOS X (x86). It works very well on all of these and is very; significantly faster than the system allocator on all of these platforms. By literally dropping in this allocator as a replacement for your system; allocator, you can see real world improvements of up to three times in normal; code!. To use:; -=-=-=-; Drop in nedmalloc.h, nedmalloc.c and malloc.c.h into your project.; Configure using the instructions in nedmalloc.h. Run and enjoy. To test, compile test.c. It will run a comparison between your system; allocator and nedalloc and tell you how much faster nedalloc is. It also; serves as an example of usage. Notes:; -=-=-=; If you want the very latest version of this allocator, get it from the; TnFOX SVN repository at svn://svn.berlios.de/viewcvs/tnfox/trunk/src/nedmalloc. Because of how nedalloc allocates an mspace per thread, it can cause; severe bloating of memory usage under certain allocation patterns.; You can substantially reduce this wastage by setting MAXTHREADSINPOOL; or the threads parameter to nedcreatepool() to a fraction of the number of; threads which would normally be in a pool at once. This will reduce; bloating at the cost of an increase in lock contention. If allocated size; is less than THREADCACHEMAX, locking is avoided",MatchSource.DOCS,lib/nedmalloc/Readme.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/nedmalloc/Readme.txt
Usability,simpl,simple,"code. Don't forget pool zero, the system pool. For C++ type allocation patterns (where the same sizes of memory are; regularly allocated and deallocated as objects are created and destroyed),; the threadcache always benefits performance. If however your allocation; patterns are different, searching the threadcache may significantly slow; down your code - as a rule of thumb, if cache utilisation is below 80%; (see the source for neddisablethreadcache() for how to enable debug; printing in release mode) then you should disable the thread cache for; that thread. You can compile out the threadcache code by setting; THREADCACHEMAX to zero. Speed comparisons:; -=-=-=-=-=-=-=-=-=; See Benchmarks.xls for details. The enclosed test.c can do two things: it can be a torture test or a speed; test. The speed test is designed to be a representative synthetic; memory allocator test. It works by randomly mixing allocations with frees; with half of the allocation sizes being a two power multiple less than; 512 bytes (to mimic C++ stack instantiated objects) and the other half; being a simple random value less than 16Kb. The real world code results are from Tn's TestIO benchmark. This is a; heavily multithreaded and memory intensive benchmark with a lot of branching; and other stuff modern processors don't like so much. As you'll note, the; test doesn't show the benefits of the threadcache mostly due to the saturation; of the memory bus being the limiting factor. ChangeLog:; -=-=-=-=-=; v1.05 15th June 2008:; * { 1042 } Added error check for TLSSET() and TLSFREE() macros. Thanks to; Markus Elfring for reporting this.; * { 1043 } Fixed a segfault when freeing memory allocated using; nedindependent_comalloc(). Thanks to Pavel Vozenilek for reporting this. v1.04 14th July 2007:; * Fixed a bug with the new optimised implementation that failed to lock; on a realloc under certain conditions.; * Fixed lack of thread synchronisation in InitPool() causing pool corruption; * Fixed a memory lea",MatchSource.DOCS,lib/nedmalloc/Readme.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/nedmalloc/Readme.txt
Deployability,release,released,"		 GNU LESSER GENERAL PUBLIC LICENSE; 		 Version 2.1, February 1999. Copyright (C) 1991, 1999 Free Software Foundation, Inc.; 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. [This is the first released version of the Lesser GPL. It also counts; as the successor of the GNU Library Public License, version 2, hence; the version number 2.1.]. 			 Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; Licenses are intended to guarantee your freedom to share and change; free software--to make sure the software is free for all its users. This license, the Lesser General Public License, applies to some; specially designated software packages--typically libraries--of the; Free Software Foundation and other authors who decide to use it. You; can use it too, but we suggest you first think carefully about whether; this license or the ordinary General Public License is the better; strategy to use in any particular case, based on the explanations below. When we speak of free software, we are referring to freedom of use,; not price. Our General Public Licenses are designed to make sure that; you have the freedom to distribute copies of free software (and charge; for this service if you wish); that you receive source code or can get; it if you want it; that you can change the software and use pieces of; it in new free programs; and that you are informed that you can do; these things. To protect your rights, we need to make restrictions that forbid; distributors to deny you these rights or to ask you to surrender these; rights. These restrictions translate to certain responsibilities for; you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis; or for a fee, you must give the recipients all the r",MatchSource.DOCS,lib/omptl/License.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/omptl/License.txt
Energy Efficiency,charge,charge,"ersion 2, hence; the version number 2.1.]. 			 Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; Licenses are intended to guarantee your freedom to share and change; free software--to make sure the software is free for all its users. This license, the Lesser General Public License, applies to some; specially designated software packages--typically libraries--of the; Free Software Foundation and other authors who decide to use it. You; can use it too, but we suggest you first think carefully about whether; this license or the ordinary General Public License is the better; strategy to use in any particular case, based on the explanations below. When we speak of free software, we are referring to freedom of use,; not price. Our General Public Licenses are designed to make sure that; you have the freedom to distribute copies of free software (and charge; for this service if you wish); that you receive source code or can get; it if you want it; that you can change the software and use pieces of; it in new free programs; and that you are informed that you can do; these things. To protect your rights, we need to make restrictions that forbid; distributors to deny you these rights or to ask you to surrender these; rights. These restrictions translate to certain responsibilities for; you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis; or for a fee, you must give the recipients all the rights that we gave; you. You must make sure that they, too, receive or can get the source; code. If you link other code with the library, you must provide; complete object files to the recipients, so that they can relink them; with the library after making changes to the library and recompiling; it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright",MatchSource.DOCS,lib/omptl/License.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/omptl/License.txt
Integrability,interface,interface,"buted under the terms of; this Lesser General Public License (also called ""this License"").; Each licensee is addressed as ""you"". A ""library"" means a collection of software functions and/or data; prepared so as to be conveniently linked with application programs; (which use some of those functions and data) to form executables. The ""Library"", below, refers to any such software library or work; which has been distributed under these terms. A ""work based on the; Library"" means either the Library or any derivative work under; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code for all modules it contains, plus any associated; interface definition files, plus the scripts used to control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does.; ; 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may char",MatchSource.DOCS,lib/omptl/License.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/omptl/License.txt
Modifiability,extend,extend,"at,; in the event an application does not supply such function or; table, the facility still operates, and performs whatever part of; its purpose remains meaningful. (For example, a function in a library to compute square roots has; a purpose that is entirely well-defined independent of the; application. Therefore, Subsection 2d requires that any; application-supplied function or table used by this function must; be optional: if the application does not supply it, the square; root function must still compute square roots.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Library,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Library, the distribution of the whole must be on the terms of; this License, whose permissions for other licensees extend to the; entire whole, and thus to each and every part regardless of who wrote; it. Thus, it is not the intent of this section to claim rights or contest; your rights to work written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Library. In addition, mere aggregation of another work not based on the Library; with the Library (or with a work based on the Library) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may opt to apply the terms of the ordinary GNU General Public; License instead of this License to a given copy of the Library. To do; this, you must alter all the notices that refer to this License, so; that they refer to the ordinary GNU General Public License, version 2,; instead of to this License. (If a newer version than version 2 of the; ordinary GN",MatchSource.DOCS,lib/omptl/License.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/omptl/License.txt
Performance,perform,performs,"rranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee.; ; 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no; charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a; table of data to be supplied by an application program that uses; the facility, other than as an argument passed when the facility; is invoked, then you must make a good faith effort to ensure that,; in the event an application does not supply such function or; table, the facility still operates, and performs whatever part of; its purpose remains meaningful. (For example, a function in a library to compute square roots has; a purpose that is entirely well-defined independent of the; application. Therefore, Subsection 2d requires that any; application-supplied function or table used by this function must; be optional: if the application does not supply it, the square; root function must still compute square roots.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Library,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Library",MatchSource.DOCS,lib/omptl/License.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/omptl/License.txt
Safety,safe,safest," YOU; FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR; CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE; LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING; RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A; FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF; SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH; DAMAGES. 		 END OF TERMS AND CONDITIONS; ; How to Apply These Terms to Your New Libraries. If you develop a new library, and you want it to be of the greatest; possible use to the public, we recommend making it free software that; everyone can redistribute and change. You can do so by permitting; redistribution under these terms (or, alternatively, under the terms of the; ordinary General Public License). To apply these terms, attach the following notices to the library. It is; safest to attach them to the start of each source file to most effectively; convey the exclusion of warranty; and each file should have at least the; ""copyright"" line and a pointer to where the full notice is found. <one line to give the library's name and a brief idea of what it does.>; Copyright (C) <year> <name of author>. This library is free software; you can redistribute it and/or; modify it under the terms of the GNU Lesser General Public; License as published by the Free Software Foundation; either; version 2.1 of the License, or (at your option) any later version. This library is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public; License along with this library; if not, write to the Free Software; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail.",MatchSource.DOCS,lib/omptl/License.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/omptl/License.txt
Security,threat,threat,"u must give the recipients all the rights that we gave; you. You must make sure that they, too, receive or can get the source; code. If you link other code with the library, you must provide; complete object files to the recipients, so that they can relink them; with the library after making changes to the library and recompiling; it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright the; library, and (2) we offer you this license, which gives you legal; permission to copy, distribute and/or modify the library. To protect each distributor, we want to make it very clear that; there is no warranty for the free library. Also, if the library is; modified by someone else and passed on, the recipients should know; that what they have is not the original version, so that the original; author's reputation will not be affected by problems that might be; introduced by others.; ; Finally, software patents pose a constant threat to the existence of; any free program. We wish to make sure that a company cannot; effectively restrict the users of a free program by obtaining a; restrictive license from a patent holder. Therefore, we insist that; any patent license obtained for a version of the library must be; consistent with the full freedom of use specified in this license. Most GNU software, including some libraries, is covered by the; ordinary GNU General Public License. This license, the GNU Lesser; General Public License, applies to certain designated libraries, and; is quite different from the ordinary General Public License. We use; this license for certain libraries in order to permit linking those; libraries into non-free programs. When a program is linked with a library, whether statically or using; a shared library, the combination of the two is legally speaking a; combined work, a derivative of the original library. The ordinary; General Public License therefore permits such linking only if th",MatchSource.DOCS,lib/omptl/License.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/omptl/License.txt
Usability,clear,clear,"otect your rights, we need to make restrictions that forbid; distributors to deny you these rights or to ask you to surrender these; rights. These restrictions translate to certain responsibilities for; you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis; or for a fee, you must give the recipients all the rights that we gave; you. You must make sure that they, too, receive or can get the source; code. If you link other code with the library, you must provide; complete object files to the recipients, so that they can relink them; with the library after making changes to the library and recompiling; it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright the; library, and (2) we offer you this license, which gives you legal; permission to copy, distribute and/or modify the library. To protect each distributor, we want to make it very clear that; there is no warranty for the free library. Also, if the library is; modified by someone else and passed on, the recipients should know; that what they have is not the original version, so that the original; author's reputation will not be affected by problems that might be; introduced by others.; ; Finally, software patents pose a constant threat to the existence of; any free program. We wish to make sure that a company cannot; effectively restrict the users of a free program by obtaining a; restrictive license from a patent holder. Therefore, we insist that; any patent license obtained for a version of the library must be; consistent with the full freedom of use specified in this license. Most GNU software, including some libraries, is covered by the; ordinary GNU General Public License. This license, the GNU Lesser; General Public License, applies to certain designated libraries, and; is quite different from the ordinary General Public License. We use; this license for c",MatchSource.DOCS,lib/omptl/License.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/omptl/License.txt
Deployability,install,install,"cmake_minimum_required(VERSION 2.8.12). project(tinyexpr). option(TE_POW_FROM_RIGHT ""Evaluate exponents from right to left."" OFF); option(TE_NAT_LOG ""Define the log function as natural logarithm."" OFF); option(build_tinyexpr_test ""Build TinyExpr tests."" OFF); option(build_tinyexpr_test_pr ""Build TinyExpr tests PR."" OFF); option(build_tinyexpr_bench ""Build TinyExpr benchmark."" OFF); option(build_tinyexpr_example ""Build TinyExpr example."" OFF); option(build_tinyexpr_example2 ""Build TinyExpr example 2."" OFF); option(build_tinyexpr_example3 ""Build TinyExpr example 3."" OFF). find_library(MATH_LIB m); if(NOT MATH_LIB); set(MATH_LIB """"); endif(). set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -ansi -Wall -Wshadow -fPIC -O3""). set(SOURCE_FILES; tinyexpr.c; tinyexpr.h; ). add_library(tinyexpr STATIC ${SOURCE_FILES}); set_target_properties(tinyexpr PROPERTIES COMPILE_FLAGS ""${MMSEQS_C_FLAGS}"" LINK_FLAGS ""${MMSEQS_C_FLAGS}""); if (TE_POW_FROM_RIGHT); target_compile_definitions(tinyexpr PRIVATE TE_POW_FROM_RIGHT); endif(); if (TE_NAT_LOG); target_compile_definitions(tinyexpr PRIVATE TE_NAT_LOG); endif(); target_link_libraries(tinyexpr ${MATH_LIB}); install(TARGETS tinyexpr ARCHIVE DESTINATION lib); install(FILES tinyexpr.h DESTINATION include COMPONENT Devel). if (build_tinyexpr_test); add_executable(tinyexpr_test test.c tinyexpr.c); target_link_libraries(tinyexpr_test ${MATH_LIB}); endif(). if (build_tinyexpr_test_pr); add_executable(tinyexpr_test_pr test.c tinyexpr.c); target_compile_definitions(tinyexpr_test_pr PRIVATE TE_POW_FROM_RIGHT TE_NAT_LOG); target_link_libraries(tinyexpr_test_pr ${MATH_LIB}); endif(). if (build_tinyexpr_bench); add_executable(tinyexpr_benchmark benchmark.c tinyexpr.c); target_link_libraries(tinyexpr_benchmark ${MATH_LIB}); endif(). if (build_tinyexpr_example); add_executable(tinyexpr_example example.c tinyexpr.c); target_link_libraries(tinyexpr_example ${MATH_LIB}); endif(). if (build_tinyexpr_example2); add_executable(tinyexpr_example2 example2.c tinyexpr.c); t",MatchSource.DOCS,lib/tinyexpr/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/tinyexpr/CMakeLists.txt
Testability,log,log,"cmake_minimum_required(VERSION 2.8.12). project(tinyexpr). option(TE_POW_FROM_RIGHT ""Evaluate exponents from right to left."" OFF); option(TE_NAT_LOG ""Define the log function as natural logarithm."" OFF); option(build_tinyexpr_test ""Build TinyExpr tests."" OFF); option(build_tinyexpr_test_pr ""Build TinyExpr tests PR."" OFF); option(build_tinyexpr_bench ""Build TinyExpr benchmark."" OFF); option(build_tinyexpr_example ""Build TinyExpr example."" OFF); option(build_tinyexpr_example2 ""Build TinyExpr example 2."" OFF); option(build_tinyexpr_example3 ""Build TinyExpr example 3."" OFF). find_library(MATH_LIB m); if(NOT MATH_LIB); set(MATH_LIB """"); endif(). set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -ansi -Wall -Wshadow -fPIC -O3""). set(SOURCE_FILES; tinyexpr.c; tinyexpr.h; ). add_library(tinyexpr STATIC ${SOURCE_FILES}); set_target_properties(tinyexpr PROPERTIES COMPILE_FLAGS ""${MMSEQS_C_FLAGS}"" LINK_FLAGS ""${MMSEQS_C_FLAGS}""); if (TE_POW_FROM_RIGHT); target_compile_definitions(tinyexpr PRIVATE TE_POW_FROM_RIGHT); endif(); if (TE_NAT_LOG); target_compile_definitions(tinyexpr PRIVATE TE_NAT_LOG); endif(); target_link_libraries(tinyexpr ${MATH_LIB}); install(TARGETS tinyexpr ARCHIVE DESTINATION lib); install(FILES tinyexpr.h DESTINATION include COMPONENT Devel). if (build_tinyexpr_test); add_executable(tinyexpr_test test.c tinyexpr.c); target_link_libraries(tinyexpr_test ${MATH_LIB}); endif(). if (build_tinyexpr_test_pr); add_executable(tinyexpr_test_pr test.c tinyexpr.c); target_compile_definitions(tinyexpr_test_pr PRIVATE TE_POW_FROM_RIGHT TE_NAT_LOG); target_link_libraries(tinyexpr_test_pr ${MATH_LIB}); endif(). if (build_tinyexpr_bench); add_executable(tinyexpr_benchmark benchmark.c tinyexpr.c); target_link_libraries(tinyexpr_benchmark ${MATH_LIB}); endif(). if (build_tinyexpr_example); add_executable(tinyexpr_example example.c tinyexpr.c); target_link_libraries(tinyexpr_example ${MATH_LIB}); endif(). if (build_tinyexpr_example2); add_executable(tinyexpr_example2 example2.c tinyexpr.c); t",MatchSource.DOCS,lib/tinyexpr/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/tinyexpr/CMakeLists.txt
Integrability,message,message,"# ################################################################; # Copyright (c) 2016-present, Yann Collet, Facebook, Inc.; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # ################################################################. CMAKE_MINIMUM_REQUIRED(VERSION 2.8.9). PROJECT(zstd); SET(ZSTD_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../..""). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(STATUS ""No build type selected, defaulting to Release""); set(CMAKE_BUILD_TYPE ""Release""); endif(). LIST(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules""); INCLUDE(GNUInstallDirs). #-----------------------------------------------------------------------------; # Add extra compilation flags; #-----------------------------------------------------------------------------; INCLUDE(AddZstdCompilationFlags); ADD_ZSTD_COMPILATION_FLAGS(). # Always hide XXHash symbols; ADD_DEFINITIONS(-DXXH_NAMESPACE=ZSTD_). #-----------------------------------------------------------------------------; # Installation variables; #-----------------------------------------------------------------------------; MESSAGE(STATUS ""CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}""); MESSAGE(STATUS ""CMAKE_INSTALL_LIBDIR: ${CMAKE_INSTALL_LIBDIR}""). #-----------------------------------------------------------------------------; # Options; #-----------------------------------------------------------------------------. # Legacy support; OPTION(ZSTD_LEGACY_SUPPORT ""LEGACY SUPPORT"" OFF). IF (ZSTD_LEGACY_SUPPORT); MESSAGE(STATUS ""ZSTD_LEGACY_SUPPORT defined!""); ADD_DEFINITIONS(-DZSTD_LEGACY_SUPPORT=4); ELSE (ZSTD_LEGACY_SUPPORT); MESSAGE(STATUS ""ZSTD_LEGACY_SUPPORT not defined!""); ADD_DEFINITIONS(-DZSTD_LEGACY_SUPPORT=0); ENDIF (ZSTD_LEGACY_SUPPORT). # Multi-threading support;",MatchSource.DOCS,lib/zstd/build/cmake/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/cmake/CMakeLists.txt
Modifiability,variab,variables,"d; # in the COPYING file in the root directory of this source tree).; # ################################################################. CMAKE_MINIMUM_REQUIRED(VERSION 2.8.9). PROJECT(zstd); SET(ZSTD_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../..""). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(STATUS ""No build type selected, defaulting to Release""); set(CMAKE_BUILD_TYPE ""Release""); endif(). LIST(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules""); INCLUDE(GNUInstallDirs). #-----------------------------------------------------------------------------; # Add extra compilation flags; #-----------------------------------------------------------------------------; INCLUDE(AddZstdCompilationFlags); ADD_ZSTD_COMPILATION_FLAGS(). # Always hide XXHash symbols; ADD_DEFINITIONS(-DXXH_NAMESPACE=ZSTD_). #-----------------------------------------------------------------------------; # Installation variables; #-----------------------------------------------------------------------------; MESSAGE(STATUS ""CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}""); MESSAGE(STATUS ""CMAKE_INSTALL_LIBDIR: ${CMAKE_INSTALL_LIBDIR}""). #-----------------------------------------------------------------------------; # Options; #-----------------------------------------------------------------------------. # Legacy support; OPTION(ZSTD_LEGACY_SUPPORT ""LEGACY SUPPORT"" OFF). IF (ZSTD_LEGACY_SUPPORT); MESSAGE(STATUS ""ZSTD_LEGACY_SUPPORT defined!""); ADD_DEFINITIONS(-DZSTD_LEGACY_SUPPORT=4); ELSE (ZSTD_LEGACY_SUPPORT); MESSAGE(STATUS ""ZSTD_LEGACY_SUPPORT not defined!""); ADD_DEFINITIONS(-DZSTD_LEGACY_SUPPORT=0); ENDIF (ZSTD_LEGACY_SUPPORT). # Multi-threading support; OPTION(ZSTD_MULTITHREAD_SUPPORT ""MULTITHREADING SUPPORT"" ON). IF (ZSTD_MULTITHREAD_SUPPORT); MESSAGE(STATUS ""ZSTD_MULTITHREAD_SUPPORT is enabled""); ELSE (ZSTD_MULTITHREAD_SUPPORT); MESSAGE(STATUS ""ZSTD_MULTITHREAD_SUPPORT is disabled""); ENDIF (ZSTD_MULTITHREAD_SUPPORT). OPTION(ZSTD_BUILD_PROGRAMS ""BUILD PRO",MatchSource.DOCS,lib/zstd/build/cmake/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/cmake/CMakeLists.txt
Testability,test,tests,"UPPORT ""MULTITHREADING SUPPORT"" ON). IF (ZSTD_MULTITHREAD_SUPPORT); MESSAGE(STATUS ""ZSTD_MULTITHREAD_SUPPORT is enabled""); ELSE (ZSTD_MULTITHREAD_SUPPORT); MESSAGE(STATUS ""ZSTD_MULTITHREAD_SUPPORT is disabled""); ENDIF (ZSTD_MULTITHREAD_SUPPORT). OPTION(ZSTD_BUILD_PROGRAMS ""BUILD PROGRAMS"" ON); OPTION(ZSTD_BUILD_CONTRIB ""BUILD CONTRIB"" OFF); OPTION(ZSTD_BUILD_TESTS ""BUILD TESTS"" OFF); if (MSVC); OPTION(ZSTD_USE_STATIC_RUNTIME ""LINK TO STATIC RUN-TIME LIBRARIES"" OFF); endif (). #-----------------------------------------------------------------------------; # External dependencies; #-----------------------------------------------------------------------------; IF (ZSTD_MULTITHREAD_SUPPORT AND UNIX); SET(THREADS_PREFER_PTHREAD_FLAG ON); FIND_PACKAGE(Threads REQUIRED); IF(CMAKE_USE_PTHREADS_INIT); SET(THREADS_LIBS ""${CMAKE_THREAD_LIBS_INIT}""); ELSE(); MESSAGE(SEND_ERROR ""ZSTD currently does not support thread libraries other than pthreads""); ENDIF(); ENDIF (ZSTD_MULTITHREAD_SUPPORT AND UNIX). #-----------------------------------------------------------------------------; # Add source directories; #-----------------------------------------------------------------------------; ADD_SUBDIRECTORY(lib). IF (ZSTD_BUILD_PROGRAMS); IF (NOT ZSTD_BUILD_STATIC); MESSAGE(SEND_ERROR ""You need to build static library to build zstd CLI""); ENDIF (NOT ZSTD_BUILD_STATIC). ADD_SUBDIRECTORY(programs); ENDIF (ZSTD_BUILD_PROGRAMS). IF (ZSTD_BUILD_TESTS); IF (NOT ZSTD_BUILD_STATIC); MESSAGE(SEND_ERROR ""You need to build static library to build tests""); ENDIF (NOT ZSTD_BUILD_STATIC). ADD_SUBDIRECTORY(tests); ENDIF (ZSTD_BUILD_TESTS). IF (ZSTD_BUILD_CONTRIB); ADD_SUBDIRECTORY(contrib); ENDIF (ZSTD_BUILD_CONTRIB). #-----------------------------------------------------------------------------; # Add clean-all target; #-----------------------------------------------------------------------------; ADD_CUSTOM_TARGET(clean-all; COMMAND ${CMAKE_BUILD_TOOL} clean; COMMAND rm -rf ${CMAKE_BINARY_DIR}/; ); ",MatchSource.DOCS,lib/zstd/build/cmake/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/cmake/CMakeLists.txt
Performance,multi-thread,multi-threading,"# #############################################################################; # Copyright (c) 2018-present Dima Krasner <dima@dimakrasner.com>; # lzutao <taolzu(at)gmail.com>; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # #############################################################################. # Read guidelines from https://wiki.gnome.org/Initiatives/GnomeGoals/MesonPorting. option('legacy_level', type: 'integer', min: 0, max: 7, value: '5',; description: 'Support any legacy format: 7 to 1 for v0.7+ to v0.1+'); option('debug_level', type: 'integer', min: 0, max: 9, value: 1,; description: 'Enable run-time debug. See lib/common/debug.h'); option('backtrace', type: 'boolean', value: false,; description: 'Display a stack backtrace when execution generates a runtime exception'); option('static_runtime', type: 'boolean', value: false,; description: 'Link to static run-time libraries on MSVC'). option('build_programs', type: 'boolean', value: true,; description: 'Enable programs build'); option('build_tests', type: 'boolean', value: false,; description: 'Enable tests build'); option('build_contrib', type: 'boolean', value: false,; description: 'Enable contrib build'). option('multi_thread', type: 'feature', value: 'enabled',; description: 'Enable multi-threading when pthread is detected'); option('zlib', type: 'feature', value: 'auto',; description: 'Enable zlib support'); option('lzma', type: 'feature', value: 'auto',; description: 'Enable lzma support'); option('lz4', type: 'feature', value: 'auto',; description: 'Enable lz4 support'); ",MatchSource.DOCS,lib/zstd/build/meson/meson_options.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/meson/meson_options.txt
Safety,detect,detected,"# #############################################################################; # Copyright (c) 2018-present Dima Krasner <dima@dimakrasner.com>; # lzutao <taolzu(at)gmail.com>; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # #############################################################################. # Read guidelines from https://wiki.gnome.org/Initiatives/GnomeGoals/MesonPorting. option('legacy_level', type: 'integer', min: 0, max: 7, value: '5',; description: 'Support any legacy format: 7 to 1 for v0.7+ to v0.1+'); option('debug_level', type: 'integer', min: 0, max: 9, value: 1,; description: 'Enable run-time debug. See lib/common/debug.h'); option('backtrace', type: 'boolean', value: false,; description: 'Display a stack backtrace when execution generates a runtime exception'); option('static_runtime', type: 'boolean', value: false,; description: 'Link to static run-time libraries on MSVC'). option('build_programs', type: 'boolean', value: true,; description: 'Enable programs build'); option('build_tests', type: 'boolean', value: false,; description: 'Enable tests build'); option('build_contrib', type: 'boolean', value: false,; description: 'Enable contrib build'). option('multi_thread', type: 'feature', value: 'enabled',; description: 'Enable multi-threading when pthread is detected'); option('zlib', type: 'feature', value: 'auto',; description: 'Enable zlib support'); option('lzma', type: 'feature', value: 'auto',; description: 'Enable lzma support'); option('lz4', type: 'feature', value: 'auto',; description: 'Enable lz4 support'); ",MatchSource.DOCS,lib/zstd/build/meson/meson_options.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/meson/meson_options.txt
Testability,test,tests,"# #############################################################################; # Copyright (c) 2018-present Dima Krasner <dima@dimakrasner.com>; # lzutao <taolzu(at)gmail.com>; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # #############################################################################. # Read guidelines from https://wiki.gnome.org/Initiatives/GnomeGoals/MesonPorting. option('legacy_level', type: 'integer', min: 0, max: 7, value: '5',; description: 'Support any legacy format: 7 to 1 for v0.7+ to v0.1+'); option('debug_level', type: 'integer', min: 0, max: 9, value: 1,; description: 'Enable run-time debug. See lib/common/debug.h'); option('backtrace', type: 'boolean', value: false,; description: 'Display a stack backtrace when execution generates a runtime exception'); option('static_runtime', type: 'boolean', value: false,; description: 'Link to static run-time libraries on MSVC'). option('build_programs', type: 'boolean', value: true,; description: 'Enable programs build'); option('build_tests', type: 'boolean', value: false,; description: 'Enable tests build'); option('build_contrib', type: 'boolean', value: false,; description: 'Enable contrib build'). option('multi_thread', type: 'feature', value: 'enabled',; description: 'Enable multi-threading when pthread is detected'); option('zlib', type: 'feature', value: 'auto',; description: 'Enable zlib support'); option('lzma', type: 'feature', value: 'auto',; description: 'Enable lzma support'); option('lz4', type: 'feature', value: 'auto',; description: 'Enable lz4 support'); ",MatchSource.DOCS,lib/zstd/build/meson/meson_options.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/meson/meson_options.txt
Usability,guid,guidelines,"# #############################################################################; # Copyright (c) 2018-present Dima Krasner <dima@dimakrasner.com>; # lzutao <taolzu(at)gmail.com>; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # #############################################################################. # Read guidelines from https://wiki.gnome.org/Initiatives/GnomeGoals/MesonPorting. option('legacy_level', type: 'integer', min: 0, max: 7, value: '5',; description: 'Support any legacy format: 7 to 1 for v0.7+ to v0.1+'); option('debug_level', type: 'integer', min: 0, max: 9, value: 1,; description: 'Enable run-time debug. See lib/common/debug.h'); option('backtrace', type: 'boolean', value: false,; description: 'Display a stack backtrace when execution generates a runtime exception'); option('static_runtime', type: 'boolean', value: false,; description: 'Link to static run-time libraries on MSVC'). option('build_programs', type: 'boolean', value: true,; description: 'Enable programs build'); option('build_tests', type: 'boolean', value: false,; description: 'Enable tests build'); option('build_contrib', type: 'boolean', value: false,; description: 'Enable contrib build'). option('multi_thread', type: 'feature', value: 'enabled',; description: 'Enable multi-threading when pthread is detected'); option('zlib', type: 'feature', value: 'auto',; description: 'Enable zlib support'); option('lzma', type: 'feature', value: 'auto',; description: 'Enable lzma support'); option('lz4', type: 'feature', value: 'auto',; description: 'Enable lz4 support'); ",MatchSource.DOCS,lib/zstd/build/meson/meson_options.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/meson/meson_options.txt
Deployability,install,install,"ibrary needs to be renamed to avoid conflict with import library; IF (MSVC); SET(STATIC_LIBRARY_BASE_NAME zstd_static); ELSE (); SET(STATIC_LIBRARY_BASE_NAME zstd); ENDIF (MSVC). # Define static and shared library names; IF (ZSTD_BUILD_SHARED); SET_TARGET_PROPERTIES(; libzstd_shared; PROPERTIES; OUTPUT_NAME zstd; SOVERSION ${LIBVER_MAJOR}.${LIBVER_MINOR}.${LIBVER_RELEASE}); ENDIF (ZSTD_BUILD_SHARED). IF (ZSTD_BUILD_STATIC); SET_TARGET_PROPERTIES(; libzstd_static; PROPERTIES; OUTPUT_NAME ${STATIC_LIBRARY_BASE_NAME}); ENDIF (ZSTD_BUILD_STATIC). IF (UNIX); # pkg-config; SET(PREFIX ""${CMAKE_INSTALL_PREFIX}""); SET(LIBDIR ""${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}""); SET(INCLUDEDIR ""${CMAKE_INSTALL_PREFIX}/include""); SET(VERSION ""${LIBVER_MAJOR}.${LIBVER_MINOR}.${LIBVER_RELEASE}""); ADD_CUSTOM_TARGET(libzstd.pc ALL; ${CMAKE_COMMAND} -DIN=""${LIBRARY_DIR}/libzstd.pc.in"" -DOUT=""libzstd.pc""; -DPREFIX=""${PREFIX}"" -DLIBDIR=""${LIBDIR}"" -DINCLUDEDIR=""${INCLUDEDIR}"" -DVERSION=""${VERSION}""; -P ""${CMAKE_CURRENT_SOURCE_DIR}/pkgconfig.cmake""; COMMENT ""Creating pkg-config file""). INSTALL(FILES ""${CMAKE_CURRENT_BINARY_DIR}/libzstd.pc"" DESTINATION ""${LIBDIR}/pkgconfig""); ENDIF (UNIX). # install target; INSTALL(FILES; ${LIBRARY_DIR}/zstd.h; ${LIBRARY_DIR}/deprecated/zbuff.h; ${LIBRARY_DIR}/dictBuilder/zdict.h; ${LIBRARY_DIR}/dictBuilder/cover.h; ${LIBRARY_DIR}/common/zstd_errors.h; DESTINATION ""include""). IF (ZSTD_BUILD_SHARED); INSTALL(TARGETS libzstd_shared RUNTIME DESTINATION ""bin""; LIBRARY DESTINATION ""${CMAKE_INSTALL_LIBDIR}""; ARCHIVE DESTINATION ""${CMAKE_INSTALL_LIBDIR}""); ENDIF(); IF (ZSTD_BUILD_STATIC); INSTALL(TARGETS libzstd_static ARCHIVE DESTINATION ""${CMAKE_INSTALL_LIBDIR}""); ENDIF (ZSTD_BUILD_STATIC). # uninstall target; CONFIGURE_FILE(; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in""; ""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""; IMMEDIATE @ONLY). ADD_CUSTOM_TARGET(uninstall; COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake); ",MatchSource.DOCS,lib/zstd/build/cmake/lib/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/cmake/lib/CMakeLists.txt
Modifiability,config,config,"ibzstd_shared APPEND PROPERTY COMPILE_DEFINITIONS ""ZSTD_DLL_EXPORT=1;ZSTD_HEAPMODE=0;_CONSOLE;_CRT_SECURE_NO_WARNINGS""); ENDIF (ZSTD_BUILD_SHARED); IF (ZSTD_BUILD_STATIC); SET_PROPERTY(TARGET libzstd_static APPEND PROPERTY COMPILE_DEFINITIONS ""ZSTD_HEAPMODE=0;_CRT_SECURE_NO_WARNINGS""); ENDIF (ZSTD_BUILD_STATIC); ENDIF (MSVC). # With MSVC static library needs to be renamed to avoid conflict with import library; IF (MSVC); SET(STATIC_LIBRARY_BASE_NAME zstd_static); ELSE (); SET(STATIC_LIBRARY_BASE_NAME zstd); ENDIF (MSVC). # Define static and shared library names; IF (ZSTD_BUILD_SHARED); SET_TARGET_PROPERTIES(; libzstd_shared; PROPERTIES; OUTPUT_NAME zstd; SOVERSION ${LIBVER_MAJOR}.${LIBVER_MINOR}.${LIBVER_RELEASE}); ENDIF (ZSTD_BUILD_SHARED). IF (ZSTD_BUILD_STATIC); SET_TARGET_PROPERTIES(; libzstd_static; PROPERTIES; OUTPUT_NAME ${STATIC_LIBRARY_BASE_NAME}); ENDIF (ZSTD_BUILD_STATIC). IF (UNIX); # pkg-config; SET(PREFIX ""${CMAKE_INSTALL_PREFIX}""); SET(LIBDIR ""${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}""); SET(INCLUDEDIR ""${CMAKE_INSTALL_PREFIX}/include""); SET(VERSION ""${LIBVER_MAJOR}.${LIBVER_MINOR}.${LIBVER_RELEASE}""); ADD_CUSTOM_TARGET(libzstd.pc ALL; ${CMAKE_COMMAND} -DIN=""${LIBRARY_DIR}/libzstd.pc.in"" -DOUT=""libzstd.pc""; -DPREFIX=""${PREFIX}"" -DLIBDIR=""${LIBDIR}"" -DINCLUDEDIR=""${INCLUDEDIR}"" -DVERSION=""${VERSION}""; -P ""${CMAKE_CURRENT_SOURCE_DIR}/pkgconfig.cmake""; COMMENT ""Creating pkg-config file""). INSTALL(FILES ""${CMAKE_CURRENT_BINARY_DIR}/libzstd.pc"" DESTINATION ""${LIBDIR}/pkgconfig""); ENDIF (UNIX). # install target; INSTALL(FILES; ${LIBRARY_DIR}/zstd.h; ${LIBRARY_DIR}/deprecated/zbuff.h; ${LIBRARY_DIR}/dictBuilder/zdict.h; ${LIBRARY_DIR}/dictBuilder/cover.h; ${LIBRARY_DIR}/common/zstd_errors.h; DESTINATION ""include""). IF (ZSTD_BUILD_SHARED); INSTALL(TARGETS libzstd_shared RUNTIME DESTINATION ""bin""; LIBRARY DESTINATION ""${CMAKE_INSTALL_LIBDIR}""; ARCHIVE DESTINATION ""${CMAKE_INSTALL_LIBDIR}""); ENDIF(); IF (ZSTD_BUILD_STATIC); INSTALL(TARGETS libzstd_static ",MatchSource.DOCS,lib/zstd/build/cmake/lib/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/cmake/lib/CMakeLists.txt
Safety,avoid,avoid,"E_DEFINITIONS ""ZSTD_MULTITHREAD""); IF (UNIX); TARGET_LINK_LIBRARIES(libzstd_shared ${THREADS_LIBS}); ENDIF (); ENDIF(); ENDIF (ZSTD_BUILD_SHARED); IF (ZSTD_BUILD_STATIC); ADD_LIBRARY(libzstd_static STATIC ${Sources} ${Headers}); IF (ZSTD_MULTITHREAD_SUPPORT); SET_PROPERTY(TARGET libzstd_static APPEND PROPERTY COMPILE_DEFINITIONS ""ZSTD_MULTITHREAD""); IF (UNIX); TARGET_LINK_LIBRARIES(libzstd_static ${THREADS_LIBS}); ENDIF (); ENDIF (); ENDIF (ZSTD_BUILD_STATIC). # Add specific compile definitions for MSVC project; IF (MSVC); IF (ZSTD_BUILD_SHARED); SET_PROPERTY(TARGET libzstd_shared APPEND PROPERTY COMPILE_DEFINITIONS ""ZSTD_DLL_EXPORT=1;ZSTD_HEAPMODE=0;_CONSOLE;_CRT_SECURE_NO_WARNINGS""); ENDIF (ZSTD_BUILD_SHARED); IF (ZSTD_BUILD_STATIC); SET_PROPERTY(TARGET libzstd_static APPEND PROPERTY COMPILE_DEFINITIONS ""ZSTD_HEAPMODE=0;_CRT_SECURE_NO_WARNINGS""); ENDIF (ZSTD_BUILD_STATIC); ENDIF (MSVC). # With MSVC static library needs to be renamed to avoid conflict with import library; IF (MSVC); SET(STATIC_LIBRARY_BASE_NAME zstd_static); ELSE (); SET(STATIC_LIBRARY_BASE_NAME zstd); ENDIF (MSVC). # Define static and shared library names; IF (ZSTD_BUILD_SHARED); SET_TARGET_PROPERTIES(; libzstd_shared; PROPERTIES; OUTPUT_NAME zstd; SOVERSION ${LIBVER_MAJOR}.${LIBVER_MINOR}.${LIBVER_RELEASE}); ENDIF (ZSTD_BUILD_SHARED). IF (ZSTD_BUILD_STATIC); SET_TARGET_PROPERTIES(; libzstd_static; PROPERTIES; OUTPUT_NAME ${STATIC_LIBRARY_BASE_NAME}); ENDIF (ZSTD_BUILD_STATIC). IF (UNIX); # pkg-config; SET(PREFIX ""${CMAKE_INSTALL_PREFIX}""); SET(LIBDIR ""${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}""); SET(INCLUDEDIR ""${CMAKE_INSTALL_PREFIX}/include""); SET(VERSION ""${LIBVER_MAJOR}.${LIBVER_MINOR}.${LIBVER_RELEASE}""); ADD_CUSTOM_TARGET(libzstd.pc ALL; ${CMAKE_COMMAND} -DIN=""${LIBRARY_DIR}/libzstd.pc.in"" -DOUT=""libzstd.pc""; -DPREFIX=""${PREFIX}"" -DLIBDIR=""${LIBDIR}"" -DINCLUDEDIR=""${INCLUDEDIR}"" -DVERSION=""${VERSION}""; -P ""${CMAKE_CURRENT_SOURCE_DIR}/pkgconfig.cmake""; COMMENT ""Creating pkg-config file""",MatchSource.DOCS,lib/zstd/build/cmake/lib/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/cmake/lib/CMakeLists.txt
Performance,multi-thread,multi-threading,".1 ALL ${CMAKE_COMMAND} -E create_symlink zstd.1 unzstd.1 DEPENDS zstd.1 COMMENT ""Creating unzstd.1 symlink""). # Define MAN_INSTALL_DIR if necessary; IF (MAN_INSTALL_DIR); ELSE (MAN_INSTALL_DIR); SET(MAN_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/share/man/man1); ENDIF (MAN_INSTALL_DIR). INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/zstd.1 DESTINATION ""${MAN_INSTALL_DIR}""); INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/zstdcat.1 DESTINATION ""${MAN_INSTALL_DIR}""); INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/unzstd.1 DESTINATION ""${MAN_INSTALL_DIR}""); INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/zstdgrep.1 DESTINATION ""${MAN_INSTALL_DIR}""); INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/zstdless.1 DESTINATION ""${MAN_INSTALL_DIR}""). ADD_EXECUTABLE(zstd-frugal ${PROGRAMS_DIR}/zstdcli.c ${PROGRAMS_DIR}/util.c ${PROGRAMS_DIR}/fileio.c); TARGET_LINK_LIBRARIES(zstd-frugal libzstd_static); SET_PROPERTY(TARGET zstd-frugal APPEND PROPERTY COMPILE_DEFINITIONS ""ZSTD_NOBENCH;ZSTD_NODICT""); ENDIF (UNIX). # Add multi-threading support definitions. IF (ZSTD_MULTITHREAD_SUPPORT); SET_PROPERTY(TARGET zstd APPEND PROPERTY COMPILE_DEFINITIONS ""ZSTD_MULTITHREAD""). IF (UNIX); TARGET_LINK_LIBRARIES(zstd ${THREADS_LIBS}). ADD_CUSTOM_TARGET(zstdmt ALL ${CMAKE_COMMAND} -E create_symlink zstd zstdmt DEPENDS zstd COMMENT ""Creating zstdmt symlink""); INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/zstdmt DESTINATION ""bin""); ENDIF (UNIX); ENDIF (ZSTD_MULTITHREAD_SUPPORT). OPTION(ZSTD_ZLIB_SUPPORT ""ZLIB SUPPORT"" OFF); OPTION(ZSTD_LZMA_SUPPORT ""LZMA SUPPORT"" OFF). IF (ZSTD_ZLIB_SUPPORT); FIND_PACKAGE(ZLIB REQUIRED). IF (ZLIB_FOUND); INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIRS}); TARGET_LINK_LIBRARIES(zstd ${ZLIB_LIBRARIES}); SET_PROPERTY(TARGET zstd APPEND PROPERTY COMPILE_DEFINITIONS ""ZSTD_GZCOMPRESS;ZSTD_GZDECOMPRESS""); ELSE (); MESSAGE(SEND_ERROR ""zlib library is missing""); ENDIF (); ENDIF (). IF (ZSTD_LZMA_SUPPORT); FIND_PACKAGE(LibLZMA REQUIRED). IF (LIBLZMA_FOUND); INCLUDE_DIRECTORIES(${LIBLZMA_INCLUDE_DIRS}); TARGET_LINK_LIBRAR",MatchSource.DOCS,lib/zstd/build/cmake/programs/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/cmake/programs/CMakeLists.txt
Testability,test,tests,"/or; # other materials provided with the distribution.; #; # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND; # ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED; # WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE; # DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR; # ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES; # (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;; # LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON; # ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS; # SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; #; # You can contact the author at :; # - zstd homepage : http://www.zstd.net/; # ################################################################. PROJECT(tests). SET(CMAKE_INCLUDE_CURRENT_DIR TRUE). # Define programs directory, where sources and header files are located; SET(LIBRARY_DIR ${ZSTD_SOURCE_DIR}/lib); SET(PROGRAMS_DIR ${ZSTD_SOURCE_DIR}/programs); SET(TESTS_DIR ${ZSTD_SOURCE_DIR}/tests); INCLUDE_DIRECTORIES(${TESTS_DIR} ${PROGRAMS_DIR} ${LIBRARY_DIR} ${LIBRARY_DIR}/common ${LIBRARY_DIR}/compress ${LIBRARY_DIR}/dictBuilder). ADD_EXECUTABLE(datagen ${PROGRAMS_DIR}/datagen.c ${TESTS_DIR}/datagencli.c); TARGET_LINK_LIBRARIES(datagen libzstd_static). ADD_EXECUTABLE(fullbench ${PROGRAMS_DIR}/datagen.c ${PROGRAMS_DIR}/util.c ${PROGRAMS_DIR}/benchfn.c ${PROGRAMS_DIR}/benchzstd.c ${TESTS_DIR}/fullbench.c); TARGET_LINK_LIBRARIES(fullbench libzstd_static). ADD_EXECUTABLE(fuzzer ${PROGRAMS_DIR}/datagen.c ${PROGRAMS_DIR}/util.c ${TESTS_DIR}/fuzzer.c); TARGET_LINK_LIBRARIES(fuzzer libzstd_static). IF (UNIX); ADD_EXECUTABLE(paramgrill ${PROGRAMS_DIR}/benchfn.c ${PROGRAMS_DIR}/benchzstd.c ${PROGRAMS_DIR}/datagen.c ${PROGRAMS_DIR}/util.c ${TE",MatchSource.DOCS,lib/zstd/build/cmake/tests/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/build/cmake/tests/CMakeLists.txt
Availability,mask,masksequence,set(util_source_files; util/alignall.cpp; util/alignbykmer.cpp; util/appenddbtoindex.cpp; util/apply.cpp; util/clusthash.cpp; util/compress.cpp; util/convert2fasta.cpp; util/convertalignments.cpp; util/convertca3m.cpp; util/convertkb.cpp; util/convertmsa.cpp; util/convertprofiledb.cpp; util/createdb.cpp; util/dbtype.cpp; util/db2tar.cpp; util/indexdb.cpp; util/offsetalignment.cpp; util/createseqfiledb.cpp; util/createsubdb.cpp; util/view.cpp; util/createtsv.cpp; util/diffseqdbs.cpp; util/expandaln.cpp; util/extractalignedregion.cpp; util/extractdomains.cpp; util/extractorfs.cpp; util/orftocontig.cpp; util/touchdb.cpp; util/filtera3m.cpp; util/filterdb.cpp; util/gff2db.cpp; util/renamedbkeys.cpp; util/masksequence.cpp; util/maskbygff.cpp; util/mergeclusters.cpp; util/mergeresultsbyset.cpp; util/mergedbs.cpp; util/createclusterdb.cpp; util/msa2profile.cpp; util/msa2result.cpp; util/nrtotaxmapping.cpp; util/countkmer.cpp; util/pairaln.cpp; util/prefixid.cpp; util/profile2pssm.cpp; util/profile2neff.cpp; util/profile2seq.cpp; util/result2dnamsa.cpp; util/result2flat.cpp; util/result2msa.cpp; util/result2rbh.cpp; util/result2profile.cpp; util/result2repseq.cpp; util/result2stats.cpp; util/reverseseq.cpp; util/cpmvrmlndb.cpp; util/extractframes.cpp; util/sequence2profile.cpp; util/setextendeddbtype.cpp; util/sortresult.cpp; util/splitdb.cpp; util/setextendeddbtype.cpp; util/splitsequence.cpp; util/subtractdbs.cpp; util/summarizealis.cpp; util/summarizeheaders.cpp; util/summarizeresult.cpp; util/summarizetabs.cpp; util/swapresults.cpp; util/transitivealign.cpp; util/translatenucs.cpp; util/translateaa.cpp; util/tsv2db.cpp; util/tsv2exprofiledb.cpp; util/tar2db.cpp; util/unpackdb.cpp; util/proteinaln2nucl.cpp; util/versionstring.cpp; util/diskspaceavail.cpp; PARENT_SCOPE; ); ,MatchSource.DOCS,src/util/CMakeLists.txt,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/src/util/CMakeLists.txt
Availability,error,error,"e highly improved using; a dictionary. Dictionary compression can be performed in:; - a single step (described as Simple dictionary API); - a single step, reusing a dictionary (described as Bulk-processing; dictionary API). Advanced experimental functions can be accessed using; `#define ZSTD_STATIC_LINKING_ONLY` before including zstd.h. Advanced experimental APIs should never be used with a dynamically-linked; library. They are not ""stable""; their definitions or signatures may change in; the future. Only static linking is allowed. Version; unsigned ZSTD_versionNumber(void); /**< useful to check dll version */. Default constant; Simple API; size_t ZSTD_compress( void* dst, size_t dstCapacity,; const void* src, size_t srcSize,; int compressionLevel);; Compresses `src` content as a single zstd compressed frame into already allocated `dst`.; Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; @return : compressed size written into `dst` (<= `dstCapacity),; or an error code if it fails (which can be tested using ZSTD_isError()). . size_t ZSTD_decompress( void* dst, size_t dstCapacity,; const void* src, size_t compressedSize);; `compressedSize` : must be the _exact_ size of some number of compressed and/or skippable frames.; `dstCapacity` is an upper bound of originalSize to regenerate.; If user cannot imply a maximum upper bound, it's better to use streaming mode to decompress data.; @return : the number of bytes decompressed into `dst` (<= `dstCapacity`),; or an errorCode if it fails (which can be tested using ZSTD_isError()). . #define ZSTD_CONTENTSIZE_UNKNOWN (0ULL - 1); #define ZSTD_CONTENTSIZE_ERROR (0ULL - 2); unsigned long long ZSTD_getFrameContentSize(const void *src, size_t srcSize);; `src` should point to the start of a ZSTD encoded frame.; `srcSize` must be at least as large as the frame header.; hint : any size >= `ZSTD_frameHeaderSize_max` is large enough.; @return : - decompressed size of `src` frame content, if known; - ZSTD_C",MatchSource.DOCS,lib/zstd/doc/zstd_manual.html,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_manual.html
Deployability,release,released,"ZSTD_decompress_usingDict(ZSTD_DCtx* dctx,; void* dst, size_t dstCapacity,; const void* src, size_t srcSize,; const void* dict,size_t dictSize);; Decompression using a predefined Dictionary (see dictBuilder/zdict.h).; Dictionary must be identical to the one used during compression.; Note : This function loads the dictionary, resulting in significant startup delay.; Note : When `dict == NULL || dictSize < 8` no dictionary is used. . Bulk processing dictionary API; ZSTD_CDict* ZSTD_createCDict(const void* dictBuffer, size_t dictSize,; int compressionLevel);; When compressing multiple messages / blocks with the same dictionary, it's recommended to load it just once.; ZSTD_createCDict() will create a digested dictionary, ready to start future compression operations without startup delay.; ZSTD_CDict can be created once and shared by multiple threads concurrently, since its usage is read-only.; `dictBuffer` can be released after ZSTD_CDict creation, since its content is copied within CDict; Note : A ZSTD_CDict can be created with an empty dictionary, but it is inefficient for small data. . size_t ZSTD_freeCDict(ZSTD_CDict* CDict);; Function frees memory allocated by ZSTD_createCDict(). . size_t ZSTD_compress_usingCDict(ZSTD_CCtx* cctx,; void* dst, size_t dstCapacity,; const void* src, size_t srcSize,; const ZSTD_CDict* cdict);; Compression using a digested Dictionary.; Faster startup than ZSTD_compress_usingDict(), recommended when same dictionary is used multiple times.; Note that compression level is decided during dictionary creation.; Frame parameters are hardcoded (dictID=yes, contentSize=yes, checksum=no); Note : ZSTD_compress_usingCDict() can be used with a ZSTD_CDict created from an empty dictionary.; But it is inefficient for small data, and it is recommended to use ZSTD_compressCCtx(). . ZSTD_DDict* ZSTD_createDDict(const void* dictBuffer, size_t dictSize);; Create a digested dictionary, ready to start decompression operation without startup delay.; dictBuffer ",MatchSource.DOCS,lib/zstd/doc/zstd_manual.html,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_manual.html
Energy Efficiency,allocate,allocated,"pression). Compression can be done in:; - a single step (described as Simple API); - a single step, reusing a context (described as Explicit context); - unbounded multiple steps (described as Streaming compression). The compression ratio achievable on small data can be highly improved using; a dictionary. Dictionary compression can be performed in:; - a single step (described as Simple dictionary API); - a single step, reusing a dictionary (described as Bulk-processing; dictionary API). Advanced experimental functions can be accessed using; `#define ZSTD_STATIC_LINKING_ONLY` before including zstd.h. Advanced experimental APIs should never be used with a dynamically-linked; library. They are not ""stable""; their definitions or signatures may change in; the future. Only static linking is allowed. Version; unsigned ZSTD_versionNumber(void); /**< useful to check dll version */. Default constant; Simple API; size_t ZSTD_compress( void* dst, size_t dstCapacity,; const void* src, size_t srcSize,; int compressionLevel);; Compresses `src` content as a single zstd compressed frame into already allocated `dst`.; Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; @return : compressed size written into `dst` (<= `dstCapacity),; or an error code if it fails (which can be tested using ZSTD_isError()). . size_t ZSTD_decompress( void* dst, size_t dstCapacity,; const void* src, size_t compressedSize);; `compressedSize` : must be the _exact_ size of some number of compressed and/or skippable frames.; `dstCapacity` is an upper bound of originalSize to regenerate.; If user cannot imply a maximum upper bound, it's better to use streaming mode to decompress data.; @return : the number of bytes decompressed into `dst` (<= `dstCapacity`),; or an errorCode if it fails (which can be tested using ZSTD_isError()). . #define ZSTD_CONTENTSIZE_UNKNOWN (0ULL - 1); #define ZSTD_CONTENTSIZE_ERROR (0ULL - 2); unsigned long long ZSTD_getFrameContentSize(const void *src, si",MatchSource.DOCS,lib/zstd/doc/zstd_manual.html,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_manual.html
Integrability,message,messages," ZSTD_createDCtx()) . Simple dictionary API; size_t ZSTD_compress_usingDict(ZSTD_CCtx* ctx,; void* dst, size_t dstCapacity,; const void* src, size_t srcSize,; const void* dict,size_t dictSize,; int compressionLevel);; Compression using a predefined Dictionary (see dictBuilder/zdict.h).; Note : This function loads the dictionary, resulting in significant startup delay.; Note : When `dict == NULL || dictSize < 8` no dictionary is used. . size_t ZSTD_decompress_usingDict(ZSTD_DCtx* dctx,; void* dst, size_t dstCapacity,; const void* src, size_t srcSize,; const void* dict,size_t dictSize);; Decompression using a predefined Dictionary (see dictBuilder/zdict.h).; Dictionary must be identical to the one used during compression.; Note : This function loads the dictionary, resulting in significant startup delay.; Note : When `dict == NULL || dictSize < 8` no dictionary is used. . Bulk processing dictionary API; ZSTD_CDict* ZSTD_createCDict(const void* dictBuffer, size_t dictSize,; int compressionLevel);; When compressing multiple messages / blocks with the same dictionary, it's recommended to load it just once.; ZSTD_createCDict() will create a digested dictionary, ready to start future compression operations without startup delay.; ZSTD_CDict can be created once and shared by multiple threads concurrently, since its usage is read-only.; `dictBuffer` can be released after ZSTD_CDict creation, since its content is copied within CDict; Note : A ZSTD_CDict can be created with an empty dictionary, but it is inefficient for small data. . size_t ZSTD_freeCDict(ZSTD_CDict* CDict);; Function frees memory allocated by ZSTD_createCDict(). . size_t ZSTD_compress_usingCDict(ZSTD_CCtx* cctx,; void* dst, size_t dstCapacity,; const void* src, size_t srcSize,; const ZSTD_CDict* cdict);; Compression using a digested Dictionary.; Faster startup than ZSTD_compress_usingDict(), recommended when same dictionary is used multiple times.; Note that compression level is decided during dictionary crea",MatchSource.DOCS,lib/zstd/doc/zstd_manual.html,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_manual.html
Modifiability,extend,extend,"I; Bulk processing dictionary API; Streaming; Streaming compression - HowTo; Streaming decompression - HowTo; ADVANCED AND EXPERIMENTAL FUNCTIONS; Frame size functions; Memory management; Advanced compression functions; Advanced decompression functions; Advanced streaming functions; Buffer-less and synchronous inner streaming functions; Buffer-less streaming compression (synchronous mode); Buffer-less streaming decompression (synchronous mode); New advanced API (experimental); Block level API. Introduction; zstd, short for Zstandard, is a fast lossless compression algorithm, targeting; real-time compression scenarios at zlib-level and better compression ratios.; The zstd compression library provides in-memory compression and decompression; functions. The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),; which is currently 22. Levels >= 20, labeled `--ultra`, should be used with; caution, as they require more memory. The library also offers negative; compression levels, which extend the range of speed vs. ratio preferences.; The lower the level, the faster the speed (at the cost of compression). Compression can be done in:; - a single step (described as Simple API); - a single step, reusing a context (described as Explicit context); - unbounded multiple steps (described as Streaming compression). The compression ratio achievable on small data can be highly improved using; a dictionary. Dictionary compression can be performed in:; - a single step (described as Simple dictionary API); - a single step, reusing a dictionary (described as Bulk-processing; dictionary API). Advanced experimental functions can be accessed using; `#define ZSTD_STATIC_LINKING_ONLY` before including zstd.h. Advanced experimental APIs should never be used with a dynamically-linked; library. They are not ""stable""; their definitions or signatures may change in; the future. Only static linking is allowed. Version; unsigned ZSTD_versionNumber(void); /**< useful to check dll",MatchSource.DOCS,lib/zstd/doc/zstd_manual.html,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_manual.html
Performance,perform,performed,"for Zstandard, is a fast lossless compression algorithm, targeting; real-time compression scenarios at zlib-level and better compression ratios.; The zstd compression library provides in-memory compression and decompression; functions. The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),; which is currently 22. Levels >= 20, labeled `--ultra`, should be used with; caution, as they require more memory. The library also offers negative; compression levels, which extend the range of speed vs. ratio preferences.; The lower the level, the faster the speed (at the cost of compression). Compression can be done in:; - a single step (described as Simple API); - a single step, reusing a context (described as Explicit context); - unbounded multiple steps (described as Streaming compression). The compression ratio achievable on small data can be highly improved using; a dictionary. Dictionary compression can be performed in:; - a single step (described as Simple dictionary API); - a single step, reusing a dictionary (described as Bulk-processing; dictionary API). Advanced experimental functions can be accessed using; `#define ZSTD_STATIC_LINKING_ONLY` before including zstd.h. Advanced experimental APIs should never be used with a dynamically-linked; library. They are not ""stable""; their definitions or signatures may change in; the future. Only static linking is allowed. Version; unsigned ZSTD_versionNumber(void); /**< useful to check dll version */. Default constant; Simple API; size_t ZSTD_compress( void* dst, size_t dstCapacity,; const void* src, size_t srcSize,; int compressionLevel);; Compresses `src` content as a single zstd compressed frame into already allocated `dst`.; Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; @return : compressed size written into `dst` (<= `dstCapacity),; or an error code if it fails (which can be tested using ZSTD_isError()). . size_t ZSTD_decompress( void* dst, size_t dstCapacity,; co",MatchSource.DOCS,lib/zstd/doc/zstd_manual.html,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_manual.html
Safety,detect,detection,"fast, ZSTD_greedy, ZSTD_lazy, ZSTD_lazy2,; ZSTD_btlazy2, ZSTD_btopt, ZSTD_btultra } ZSTD_strategy; /* from faster to stronger */. typedef struct {; unsigned windowLog; /**< largest match distance : larger == more compression, more memory needed during decompression */; unsigned chainLog; /**< fully searched segment : larger == more compression, slower, more memory (useless for fast) */; unsigned hashLog; /**< dispatch table : larger == faster, more memory */; unsigned searchLog; /**< nb of searches : larger == more compression, slower */; unsigned searchLength; /**< match length searched : larger == faster decompression, sometimes less compression */; unsigned targetLength; /**< acceptable match size for optimal parser (only) : larger == more compression, slower */; ZSTD_strategy strategy;; } ZSTD_compressionParameters;. typedef struct {; unsigned contentSizeFlag; /**< 1: content size will be in frame header (when known) */; unsigned checksumFlag; /**< 1: generate a 32-bits checksum at end of frame, for error detection */; unsigned noDictIDFlag; /**< 1: no dictID will be saved into frame header (if dictionary compression) */; } ZSTD_frameParameters;. typedef struct {; ZSTD_compressionParameters cParams;; ZSTD_frameParameters fParams;; } ZSTD_parameters;. typedef enum {; ZSTD_dct_auto = 0, /* dictionary is ""full"" when starting with ZSTD_MAGIC_DICTIONARY, otherwise it is ""rawContent"" */; ZSTD_dct_rawContent, /* ensures dictionary is always loaded as rawContent, even if it starts with ZSTD_MAGIC_DICTIONARY */; ZSTD_dct_fullDict /* refuses to load a dictionary if it does not respect Zstandard's specification */; } ZSTD_dictContentType_e;. typedef enum {; ZSTD_dlm_byCopy = 0, /**< Copy dictionary content internally */; ZSTD_dlm_byRef, /**< Reference dictionary content -- the dictionary buffer must outlive its users. */; } ZSTD_dictLoadMethod_e;. Frame size functions; size_t ZSTD_findFrameCompressedSize(const void* src, size_t srcSize);; `src` should point to the start of",MatchSource.DOCS,lib/zstd/doc/zstd_manual.html,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_manual.html
Security,access,accessed," zstd compression library provides in-memory compression and decompression; functions. The library supports regular compression levels from 1 up to ZSTD_maxCLevel(),; which is currently 22. Levels >= 20, labeled `--ultra`, should be used with; caution, as they require more memory. The library also offers negative; compression levels, which extend the range of speed vs. ratio preferences.; The lower the level, the faster the speed (at the cost of compression). Compression can be done in:; - a single step (described as Simple API); - a single step, reusing a context (described as Explicit context); - unbounded multiple steps (described as Streaming compression). The compression ratio achievable on small data can be highly improved using; a dictionary. Dictionary compression can be performed in:; - a single step (described as Simple dictionary API); - a single step, reusing a dictionary (described as Bulk-processing; dictionary API). Advanced experimental functions can be accessed using; `#define ZSTD_STATIC_LINKING_ONLY` before including zstd.h. Advanced experimental APIs should never be used with a dynamically-linked; library. They are not ""stable""; their definitions or signatures may change in; the future. Only static linking is allowed. Version; unsigned ZSTD_versionNumber(void); /**< useful to check dll version */. Default constant; Simple API; size_t ZSTD_compress( void* dst, size_t dstCapacity,; const void* src, size_t srcSize,; int compressionLevel);; Compresses `src` content as a single zstd compressed frame into already allocated `dst`.; Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; @return : compressed size written into `dst` (<= `dstCapacity),; or an error code if it fails (which can be tested using ZSTD_isError()). . size_t ZSTD_decompress( void* dst, size_t dstCapacity,; const void* src, size_t compressedSize);; `compressedSize` : must be the _exact_ size of some number of compressed and/or skippable frames.; `dstCapaci",MatchSource.DOCS,lib/zstd/doc/zstd_manual.html,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_manual.html
Testability,test,tested,"e highly improved using; a dictionary. Dictionary compression can be performed in:; - a single step (described as Simple dictionary API); - a single step, reusing a dictionary (described as Bulk-processing; dictionary API). Advanced experimental functions can be accessed using; `#define ZSTD_STATIC_LINKING_ONLY` before including zstd.h. Advanced experimental APIs should never be used with a dynamically-linked; library. They are not ""stable""; their definitions or signatures may change in; the future. Only static linking is allowed. Version; unsigned ZSTD_versionNumber(void); /**< useful to check dll version */. Default constant; Simple API; size_t ZSTD_compress( void* dst, size_t dstCapacity,; const void* src, size_t srcSize,; int compressionLevel);; Compresses `src` content as a single zstd compressed frame into already allocated `dst`.; Hint : compression runs faster if `dstCapacity` >= `ZSTD_compressBound(srcSize)`.; @return : compressed size written into `dst` (<= `dstCapacity),; or an error code if it fails (which can be tested using ZSTD_isError()). . size_t ZSTD_decompress( void* dst, size_t dstCapacity,; const void* src, size_t compressedSize);; `compressedSize` : must be the _exact_ size of some number of compressed and/or skippable frames.; `dstCapacity` is an upper bound of originalSize to regenerate.; If user cannot imply a maximum upper bound, it's better to use streaming mode to decompress data.; @return : the number of bytes decompressed into `dst` (<= `dstCapacity`),; or an errorCode if it fails (which can be tested using ZSTD_isError()). . #define ZSTD_CONTENTSIZE_UNKNOWN (0ULL - 1); #define ZSTD_CONTENTSIZE_ERROR (0ULL - 2); unsigned long long ZSTD_getFrameContentSize(const void *src, size_t srcSize);; `src` should point to the start of a ZSTD encoded frame.; `srcSize` must be at least as large as the frame header.; hint : any size >= `ZSTD_frameHeaderSize_max` is large enough.; @return : - decompressed size of `src` frame content, if known; - ZSTD_C",MatchSource.DOCS,lib/zstd/doc/zstd_manual.html,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_manual.html
Usability,simpl,simply,"y not compatible with multi-threading.; Limitation 3 : static dctx is incompatible with legacy support.; . ZSTD_DStream* ZSTD_initStaticDStream(void* workspace, size_t workspaceSize); /**< same as ZSTD_initStaticDCtx() */. typedef void* (*ZSTD_allocFunction) (void* opaque, size_t size);; typedef void (*ZSTD_freeFunction) (void* opaque, void* address);; typedef struct { ZSTD_allocFunction customAlloc; ZSTD_freeFunction customFree; void* opaque; } ZSTD_customMem;; static ZSTD_customMem const ZSTD_defaultCMem = { NULL, NULL, NULL }; /**< this constant defers to stdlib's functions */; These prototypes make it possible to pass your own allocation/free functions.; ZSTD_customMem is provided at creation time, using ZSTD_create*_advanced() variants listed below.; All allocation/free operations will be completed using these custom variants instead of regular ones.; . Advanced compression functions; ZSTD_CDict* ZSTD_createCDict_byReference(const void* dictBuffer, size_t dictSize, int compressionLevel);; Create a digested dictionary for compression; Dictionary content is simply referenced, and therefore stays in dictBuffer.; It is important that dictBuffer outlives CDict, it must remain read accessible throughout the lifetime of CDict . ZSTD_compressionParameters ZSTD_getCParams(int compressionLevel, unsigned long long estimatedSrcSize, size_t dictSize);; @return ZSTD_compressionParameters structure for a selected compression level and estimated srcSize.; `estimatedSrcSize` value is optional, select 0 if not known . ZSTD_parameters ZSTD_getParams(int compressionLevel, unsigned long long estimatedSrcSize, size_t dictSize);; same as ZSTD_getCParams(), but @return a full `ZSTD_parameters` object instead of sub-component `ZSTD_compressionParameters`.; All fields of `ZSTD_frameParameters` are set to default : contentSize=1, checksum=0, noDictID=0 . size_t ZSTD_checkCParams(ZSTD_compressionParameters params);; Ensure param values remain within authorized range . ZSTD_compressionPara",MatchSource.DOCS,lib/zstd/doc/zstd_manual.html,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/doc/zstd_manual.html
