quality_attribute,keyword,matched_word,sentence,source,filename,author,repo,version,wiki,url
Availability,error,error,"#!/usr/bin/env python3; # ################################################################; # Copyright (c) 2018-present, Facebook, Inc.; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # ##########################################################################; # Rate limiter, replacement for pv; # this rate limiter does not ""catch up"" after a blocking period; # Limitations:; # - only accepts limit speed in MB/s; # sys.stderr.close() # remove error message, for Ctrl+C",MatchSource.CODE_COMMENT,lib/zstd/tests/rateLimiter.py,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/rateLimiter.py
Integrability,message,message,"#!/usr/bin/env python3; # ################################################################; # Copyright (c) 2018-present, Facebook, Inc.; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # ##########################################################################; # Rate limiter, replacement for pv; # this rate limiter does not ""catch up"" after a blocking period; # Limitations:; # - only accepts limit speed in MB/s; # sys.stderr.close() # remove error message, for Ctrl+C",MatchSource.CODE_COMMENT,lib/zstd/tests/rateLimiter.py,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/rateLimiter.py
Availability,avail,availability,"#! /usr/bin/env python3; # ################################################################; # Copyright (c) 2016-present, Przemyslaw Skibinski, Yann Collet, Facebook, Inc.; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # ##########################################################################; # Limitations:; # - doesn't support filenames with spaces; # - dir1/zstd and dir2/zstd will be merged in a single results file; # getloadavg; # strftime; # system; # /path/to/zstd/tests/speedTest; # /path/to/zstd/tests/speedTest/zstd; # branch + commit + compilerVer + md5; # results: ""filename"" or ""XX files""; # check if test files are accessible; # check if dictionary is accessible; # check availability of e-mail senders; # clone ZSTD repo if needed; # check if speedTest.pid already exists",MatchSource.CODE_COMMENT,lib/zstd/tests/test-zstd-speed.py,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/test-zstd-speed.py
Security,access,accessible,"#! /usr/bin/env python3; # ################################################################; # Copyright (c) 2016-present, Przemyslaw Skibinski, Yann Collet, Facebook, Inc.; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # ##########################################################################; # Limitations:; # - doesn't support filenames with spaces; # - dir1/zstd and dir2/zstd will be merged in a single results file; # getloadavg; # strftime; # system; # /path/to/zstd/tests/speedTest; # /path/to/zstd/tests/speedTest/zstd; # branch + commit + compilerVer + md5; # results: ""filename"" or ""XX files""; # check if test files are accessible; # check if dictionary is accessible; # check availability of e-mail senders; # clone ZSTD repo if needed; # check if speedTest.pid already exists",MatchSource.CODE_COMMENT,lib/zstd/tests/test-zstd-speed.py,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/test-zstd-speed.py
Testability,test,tests,"#! /usr/bin/env python3; # ################################################################; # Copyright (c) 2016-present, Przemyslaw Skibinski, Yann Collet, Facebook, Inc.; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # ##########################################################################; # Limitations:; # - doesn't support filenames with spaces; # - dir1/zstd and dir2/zstd will be merged in a single results file; # getloadavg; # strftime; # system; # /path/to/zstd/tests/speedTest; # /path/to/zstd/tests/speedTest/zstd; # branch + commit + compilerVer + md5; # results: ""filename"" or ""XX files""; # check if test files are accessible; # check if dictionary is accessible; # check availability of e-mail senders; # clone ZSTD repo if needed; # check if speedTest.pid already exists",MatchSource.CODE_COMMENT,lib/zstd/tests/test-zstd-speed.py,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/test-zstd-speed.py
Deployability,release,release,"#!/usr/bin/env python3; """"""Test zstd interoperability between versions""""""; # ################################################################; # Copyright (c) 2016-present, Yann Collet, Facebook, Inc.; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # ################################################################; # zstdFiles = glob.glob(""*.zst*""); # print(zstdFiles); # zstdFiles = glob.glob(""*.zst*""); # print(zstdFiles); # http://stackoverflow.com/a/19711609/2132223; # remove ""_dictio.zst""; # find vdevel; # /path/to/zstd; # /path/to/zstd/tests/versionsTest; # /path/to/zstd/tests/versionsTest/zstd; # /path/to/zstd/tests/versionsTest/dict_source; # /path/to/zstd/programs; # since Travis clones limited depth, we should clone full repository; # Retrieve all release tags; # Build all release zstd; # /path/to/zstd/tests/versionsTest/zstd.<TAG>; # /path/to/zstd/tests/versionsTest/<TAG>; # /path/to/zstd/tests/versionsTest/v0.5.0/dictBuilder; # /path/to/zstd/tests/versionsTest/<TAG>/programs; # remove any remaining *.zst and *.dec from previous test; # copy *.c and *.h to a temporary directory (""dict_source"")",MatchSource.CODE_COMMENT,lib/zstd/tests/test-zstd-versions.py,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/test-zstd-versions.py
Integrability,interoperab,interoperability,"#!/usr/bin/env python3; """"""Test zstd interoperability between versions""""""; # ################################################################; # Copyright (c) 2016-present, Yann Collet, Facebook, Inc.; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # ################################################################; # zstdFiles = glob.glob(""*.zst*""); # print(zstdFiles); # zstdFiles = glob.glob(""*.zst*""); # print(zstdFiles); # http://stackoverflow.com/a/19711609/2132223; # remove ""_dictio.zst""; # find vdevel; # /path/to/zstd; # /path/to/zstd/tests/versionsTest; # /path/to/zstd/tests/versionsTest/zstd; # /path/to/zstd/tests/versionsTest/dict_source; # /path/to/zstd/programs; # since Travis clones limited depth, we should clone full repository; # Retrieve all release tags; # Build all release zstd; # /path/to/zstd/tests/versionsTest/zstd.<TAG>; # /path/to/zstd/tests/versionsTest/<TAG>; # /path/to/zstd/tests/versionsTest/v0.5.0/dictBuilder; # /path/to/zstd/tests/versionsTest/<TAG>/programs; # remove any remaining *.zst and *.dec from previous test; # copy *.c and *.h to a temporary directory (""dict_source"")",MatchSource.CODE_COMMENT,lib/zstd/tests/test-zstd-versions.py,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/test-zstd-versions.py
Testability,test,tests,"#!/usr/bin/env python3; """"""Test zstd interoperability between versions""""""; # ################################################################; # Copyright (c) 2016-present, Yann Collet, Facebook, Inc.; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # ################################################################; # zstdFiles = glob.glob(""*.zst*""); # print(zstdFiles); # zstdFiles = glob.glob(""*.zst*""); # print(zstdFiles); # http://stackoverflow.com/a/19711609/2132223; # remove ""_dictio.zst""; # find vdevel; # /path/to/zstd; # /path/to/zstd/tests/versionsTest; # /path/to/zstd/tests/versionsTest/zstd; # /path/to/zstd/tests/versionsTest/dict_source; # /path/to/zstd/programs; # since Travis clones limited depth, we should clone full repository; # Retrieve all release tags; # Build all release zstd; # /path/to/zstd/tests/versionsTest/zstd.<TAG>; # /path/to/zstd/tests/versionsTest/<TAG>; # /path/to/zstd/tests/versionsTest/v0.5.0/dictBuilder; # /path/to/zstd/tests/versionsTest/<TAG>/programs; # remove any remaining *.zst and *.dec from previous test; # copy *.c and *.h to a temporary directory (""dict_source"")",MatchSource.CODE_COMMENT,lib/zstd/tests/test-zstd-versions.py,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/test-zstd-versions.py
Modifiability,variab,variables,"#!/usr/bin/env python; # ################################################################; # Copyright (c) 2016-present, Facebook, Inc.; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # ##########################################################################; # Constants; # Standard environment variables; # Fuzzing environment variables; # Sanitizer environment variables; """"""; Look for flags set by environment variables.; """"""; """"""; Determines the compiler and version.; Only works for clang and gcc.; """"""; """"""; Cleans the repository and builds a fuzz target (or all).; Many flags default to environment variables (default says $X='y').; Options that aren't enabling features default to the correct values for; zstd.; Enable sanitizers with --enable-*san.; For regression testing just build.; For libFuzzer set LIB_FUZZING_ENGINE and pass --enable-coverage.; For AFL set CC and CXX to AFL's compilers and set; LIB_FUZZING_ENGINE='libregression.a'.; """"""; # Check option sanitiy; # The compilation flags we are setting; # Flags to be added to both cflags and cxxflags; # Set flags for options; # Append extra MSAN flags (it might require special setup); # Append the common flags; # Prepare the flags for Make; # Print the flags; # Clean and build; """"""; Runs a libfuzzer binary.; Passes all extra arguments to libfuzzer.; The fuzzer should have been build with LIB_FUZZING_ENGINE pointing to; libFuzzer.a.; Generates output in the CORPORA directory, puts crashes in the ARTIFACT; directory, and takes extra input from the SEED directory.; To merge AFL's output pass the SEED as AFL's output directory and pass; '-merge=1'.; """"""; """"""; Runs an afl-fuzz job.; Passes all extra arguments to afl-fuzz.; The fuzzer should have been built with CC/CXX set to the AFL compilers,; and with LIB_FUZZING_",MatchSource.CODE_COMMENT,lib/zstd/tests/fuzz/fuzz.py,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/fuzz/fuzz.py
Security,sanitiz,sanitizers,"#!/usr/bin/env python; # ################################################################; # Copyright (c) 2016-present, Facebook, Inc.; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # ##########################################################################; # Constants; # Standard environment variables; # Fuzzing environment variables; # Sanitizer environment variables; """"""; Look for flags set by environment variables.; """"""; """"""; Determines the compiler and version.; Only works for clang and gcc.; """"""; """"""; Cleans the repository and builds a fuzz target (or all).; Many flags default to environment variables (default says $X='y').; Options that aren't enabling features default to the correct values for; zstd.; Enable sanitizers with --enable-*san.; For regression testing just build.; For libFuzzer set LIB_FUZZING_ENGINE and pass --enable-coverage.; For AFL set CC and CXX to AFL's compilers and set; LIB_FUZZING_ENGINE='libregression.a'.; """"""; # Check option sanitiy; # The compilation flags we are setting; # Flags to be added to both cflags and cxxflags; # Set flags for options; # Append extra MSAN flags (it might require special setup); # Append the common flags; # Prepare the flags for Make; # Print the flags; # Clean and build; """"""; Runs a libfuzzer binary.; Passes all extra arguments to libfuzzer.; The fuzzer should have been build with LIB_FUZZING_ENGINE pointing to; libFuzzer.a.; Generates output in the CORPORA directory, puts crashes in the ARTIFACT; directory, and takes extra input from the SEED directory.; To merge AFL's output pass the SEED as AFL's output directory and pass; '-merge=1'.; """"""; """"""; Runs an afl-fuzz job.; Passes all extra arguments to afl-fuzz.; The fuzzer should have been built with CC/CXX set to the AFL compilers,; and with LIB_FUZZING_",MatchSource.CODE_COMMENT,lib/zstd/tests/fuzz/fuzz.py,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/fuzz/fuzz.py
Testability,test,testing,"#!/usr/bin/env python; # ################################################################; # Copyright (c) 2016-present, Facebook, Inc.; # All rights reserved.; #; # This source code is licensed under both the BSD-style license (found in the; # LICENSE file in the root directory of this source tree) and the GPLv2 (found; # in the COPYING file in the root directory of this source tree).; # ##########################################################################; # Constants; # Standard environment variables; # Fuzzing environment variables; # Sanitizer environment variables; """"""; Look for flags set by environment variables.; """"""; """"""; Determines the compiler and version.; Only works for clang and gcc.; """"""; """"""; Cleans the repository and builds a fuzz target (or all).; Many flags default to environment variables (default says $X='y').; Options that aren't enabling features default to the correct values for; zstd.; Enable sanitizers with --enable-*san.; For regression testing just build.; For libFuzzer set LIB_FUZZING_ENGINE and pass --enable-coverage.; For AFL set CC and CXX to AFL's compilers and set; LIB_FUZZING_ENGINE='libregression.a'.; """"""; # Check option sanitiy; # The compilation flags we are setting; # Flags to be added to both cflags and cxxflags; # Set flags for options; # Append extra MSAN flags (it might require special setup); # Append the common flags; # Prepare the flags for Make; # Print the flags; # Clean and build; """"""; Runs a libfuzzer binary.; Passes all extra arguments to libfuzzer.; The fuzzer should have been build with LIB_FUZZING_ENGINE pointing to; libFuzzer.a.; Generates output in the CORPORA directory, puts crashes in the ARTIFACT; directory, and takes extra input from the SEED directory.; To merge AFL's output pass the SEED as AFL's output directory and pass; '-merge=1'.; """"""; """"""; Runs an afl-fuzz job.; Passes all extra arguments to afl-fuzz.; The fuzzer should have been built with CC/CXX set to the AFL compilers,; and with LIB_FUZZING_",MatchSource.CODE_COMMENT,lib/zstd/tests/fuzz/fuzz.py,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/tree/15-6f452/lib/zstd/tests/fuzz/fuzz.py
