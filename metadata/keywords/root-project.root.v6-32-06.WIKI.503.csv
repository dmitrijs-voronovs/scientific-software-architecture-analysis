id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/root/html604/TGNumberEntry.html:27303,Integrability,message,message,27303,"tyle"";SetMethod=""SetNumStyle"";Items=(0=""Int"",5=""Real"",6=""Degree"",9=""Hour:Min:Sec"",10=""Day/Month/Year"",12=""Hex"")}*; const TGPicture*fPicDownDown arrow; const TGPicture*fPicUpUp arrow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGNumberEntry(const TGWindow* parent = 0, Double_t val = 0, Int_t digitwidth = 5, Int_t id = -1, TGNumberFormat::EStyle style = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Constructs a numeric entry widget. ~TGNumberEntry(); Destructs a numeric entry widget. void Associate(const TGWindow* w); Make w the window that will receive the generated messages. void SetLogStep(Bool_t on = kTRUE); Set log steps. void SetState(Bool_t enable = kTRUE); Set the active state. void SetButtonToNum(Bool_t state); Send button messages to the number field (true) or parent widget (false).; When the message is sent to the parent widget, it is responsible to change; the numerical value accordingly. This can be useful to implement cursors; which move from data point to data point. For the message being sent; see ProcessMessage(). Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process the up/down button messages. If fButtonToNum is false the; following message is sent: kC_COMMAND, kCM_BUTTON, widget id, param; param % 100 is the step size; param % 10000 / 100 != 0 indicates log step; param / 10000 != 0 indicates button down. TGLayoutManager * GetLayoutManager() const; Return layout manager. void ValueChanged(Long_t val); Emit ValueChanged(Long_t) signal. This signal is emitted when; fButtonToNum is false. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void ValueSet(Long_t val); Emit ValueSet(Long_t) signal. This signal is emitted when the; number entry value is changed. The val has the following meaning:; val % 1",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:27494,Integrability,message,message,27494,"ure*fPicUpUp arrow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGNumberEntry(const TGWindow* parent = 0, Double_t val = 0, Int_t digitwidth = 5, Int_t id = -1, TGNumberFormat::EStyle style = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Constructs a numeric entry widget. ~TGNumberEntry(); Destructs a numeric entry widget. void Associate(const TGWindow* w); Make w the window that will receive the generated messages. void SetLogStep(Bool_t on = kTRUE); Set log steps. void SetState(Bool_t enable = kTRUE); Set the active state. void SetButtonToNum(Bool_t state); Send button messages to the number field (true) or parent widget (false).; When the message is sent to the parent widget, it is responsible to change; the numerical value accordingly. This can be useful to implement cursors; which move from data point to data point. For the message being sent; see ProcessMessage(). Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process the up/down button messages. If fButtonToNum is false the; following message is sent: kC_COMMAND, kCM_BUTTON, widget id, param; param % 100 is the step size; param % 10000 / 100 != 0 indicates log step; param / 10000 != 0 indicates button down. TGLayoutManager * GetLayoutManager() const; Return layout manager. void ValueChanged(Long_t val); Emit ValueChanged(Long_t) signal. This signal is emitted when; fButtonToNum is false. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void ValueSet(Long_t val); Emit ValueSet(Long_t) signal. This signal is emitted when the; number entry value is changed. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void SavePrimitive(ostream& out, Option_t* = """"); Save a nu",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:27626,Integrability,message,messages,27626," Libraries. Function documentation; TGNumberEntry(const TGWindow* parent = 0, Double_t val = 0, Int_t digitwidth = 5, Int_t id = -1, TGNumberFormat::EStyle style = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Constructs a numeric entry widget. ~TGNumberEntry(); Destructs a numeric entry widget. void Associate(const TGWindow* w); Make w the window that will receive the generated messages. void SetLogStep(Bool_t on = kTRUE); Set log steps. void SetState(Bool_t enable = kTRUE); Set the active state. void SetButtonToNum(Bool_t state); Send button messages to the number field (true) or parent widget (false).; When the message is sent to the parent widget, it is responsible to change; the numerical value accordingly. This can be useful to implement cursors; which move from data point to data point. For the message being sent; see ProcessMessage(). Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process the up/down button messages. If fButtonToNum is false the; following message is sent: kC_COMMAND, kCM_BUTTON, widget id, param; param % 100 is the step size; param % 10000 / 100 != 0 indicates log step; param / 10000 != 0 indicates button down. TGLayoutManager * GetLayoutManager() const; Return layout manager. void ValueChanged(Long_t val); Emit ValueChanged(Long_t) signal. This signal is emitted when; fButtonToNum is false. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void ValueSet(Long_t val); Emit ValueSet(Long_t) signal. This signal is emitted when the; number entry value is changed. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. void SetNumbe",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:27676,Integrability,message,message,27676,"yle = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Constructs a numeric entry widget. ~TGNumberEntry(); Destructs a numeric entry widget. void Associate(const TGWindow* w); Make w the window that will receive the generated messages. void SetLogStep(Bool_t on = kTRUE); Set log steps. void SetState(Bool_t enable = kTRUE); Set the active state. void SetButtonToNum(Bool_t state); Send button messages to the number field (true) or parent widget (false).; When the message is sent to the parent widget, it is responsible to change; the numerical value accordingly. This can be useful to implement cursors; which move from data point to data point. For the message being sent; see ProcessMessage(). Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process the up/down button messages. If fButtonToNum is false the; following message is sent: kC_COMMAND, kCM_BUTTON, widget id, param; param % 100 is the step size; param % 10000 / 100 != 0 indicates log step; param / 10000 != 0 indicates button down. TGLayoutManager * GetLayoutManager() const; Return layout manager. void ValueChanged(Long_t val); Emit ValueChanged(Long_t) signal. This signal is emitted when; fButtonToNum is false. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void ValueSet(Long_t val); Emit ValueSet(Long_t) signal. This signal is emitted when the; number entry value is changed. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. void SetNumber(Double_t val). void SetIntNumber(Long_t val). void SetTime(Int_t hour, Int_t min, Int_t sec). void SetDate(Int_t year, Int_t month, Int_t day). void SetHexN",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:11920,Modifiability,Inherit,InheritsFrom,11920,"(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidIncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tIsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tIsLogStep() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFram",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:11986,Modifiability,Inherit,InheritsFrom,11986,"e(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidIncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tIsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tIsLogStep() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voi",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:26544,Modifiability,Inherit,Inheritance,26544,"static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGNumberFormat::EAttributefNumAttr*OPTION={GetMethod=""GetNumAttr"";SetMethod=""SetNumAttr"";Items=(0=""&AnyNumber"",1=""&Non negative"",2=""&Positive"")}*; TGNumberFormat::ELimitfNumLimits*OPTION={GetMethod=""GetNumLimits"";SetMethod=""SetNumLimits"";Items=(0=""&No Limits"",1=""Limit M&in"",2=""Limit M&ax"",2=""Min &and Max"")}*; TGNumberFormat::EStylefNumStyle*OPTION={GetMethod=""GetNumStyle"";SetMethod=""SetNumStyle"";Items=(0=""Int"",5=""Real"",6=""Degree"",9=""Hour:Min:Sec"",10=""Day/Month/Year"",12=""Hex"")}*; const TGPicture*fPicDownDown arrow; const TGPicture*fPicUpUp arrow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGNumberEntry(const TGWindow* parent = 0, Double_t val = 0, Int_t digitwidth = 5, Int_t id = -1, TGNumberFormat::EStyle style = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Constructs a numeric entry widget. ~TGNumberEntry(); Destructs a numeric entry widget. void Associate(const TGWindow* w); Make w the window that will receive the generated messages. void SetLogStep(Bool_t on = kTRUE); Set log steps. void SetState(Bool_t enable = kTRUE); Set the active state. void SetButtonToNum(Bool_t state); Send button messages to the number field (true) or parent widget (false).; When the message is sent to the parent widget, it is responsible to change; the numerical value accordingly. This can be useful to implement cursors; which move from data point to data point. For the message being sent; see ProcessMessage(). Bool_t ProcessMessage(Long_t msg, ",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:26557,Modifiability,Inherit,Inherited,26557,"static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGNumberFormat::EAttributefNumAttr*OPTION={GetMethod=""GetNumAttr"";SetMethod=""SetNumAttr"";Items=(0=""&AnyNumber"",1=""&Non negative"",2=""&Positive"")}*; TGNumberFormat::ELimitfNumLimits*OPTION={GetMethod=""GetNumLimits"";SetMethod=""SetNumLimits"";Items=(0=""&No Limits"",1=""Limit M&in"",2=""Limit M&ax"",2=""Min &and Max"")}*; TGNumberFormat::EStylefNumStyle*OPTION={GetMethod=""GetNumStyle"";SetMethod=""SetNumStyle"";Items=(0=""Int"",5=""Real"",6=""Degree"",9=""Hour:Min:Sec"",10=""Day/Month/Year"",12=""Hex"")}*; const TGPicture*fPicDownDown arrow; const TGPicture*fPicUpUp arrow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGNumberEntry(const TGWindow* parent = 0, Double_t val = 0, Int_t digitwidth = 5, Int_t id = -1, TGNumberFormat::EStyle style = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Constructs a numeric entry widget. ~TGNumberEntry(); Destructs a numeric entry widget. void Associate(const TGWindow* w); Make w the window that will receive the generated messages. void SetLogStep(Bool_t on = kTRUE); Set log steps. void SetState(Bool_t enable = kTRUE); Set the active state. void SetButtonToNum(Bool_t state); Send button messages to the number field (true) or parent widget (false).; When the message is sent to the parent widget, it is responsible to change; the numerical value accordingly. This can be useful to implement cursors; which move from data point to data point. For the message being sent; see ProcessMessage(). Bool_t ProcessMessage(Long_t msg, ",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:11517,Security,Hash,Hash,11517,"siteFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidIncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tIsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObjec",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:2443,Testability,log,logarithmic,2443," kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. virtual~TGNumberEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidAssociate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b)",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:11805,Testability,log,logstep,11805,":HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidIncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tIsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tIsLogStep() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObj",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:18248,Testability,Test,TestBit,18248,"ht(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); voidSetNumAttr(TGNumberFormat::EAttribute attr = kNEAAnyNumber); virtual voidSetNumber(Double_t val); voidSetNumLimits(TGNumberFormat::ELimit limits = kNELNoLimits); voidSetNumStyle(TGNumberFormat::EStyle style); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetState(Bool_t enable = kTRUE); virtual voidSetText(const char* text); virtual voidSetTime(Int_t hour, Int_t min, Int_t sec); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGNumberEntry(const TGWindow* parent = 0, Double_t val = 0, Int_t digitwidth = 5, Int_t id = -1, TGNumberFormat::EStyle style = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidValueChanged(Long_t val)SIGNAL ; virtual voidValueSet(Long_t val)SIGNAL ; Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:18287,Testability,Test,TestBits,18287,"ht(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); voidSetNumAttr(TGNumberFormat::EAttribute attr = kNEAAnyNumber); virtual voidSetNumber(Double_t val); voidSetNumLimits(TGNumberFormat::ELimit limits = kNELNoLimits); voidSetNumStyle(TGNumberFormat::EStyle style); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetState(Bool_t enable = kTRUE); virtual voidSetText(const char* text); virtual voidSetTime(Int_t hour, Int_t min, Int_t sec); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGNumberEntry(const TGWindow* parent = 0, Double_t val = 0, Int_t digitwidth = 5, Int_t id = -1, TGNumberFormat::EStyle style = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidValueChanged(Long_t val)SIGNAL ; virtual voidValueSet(Long_t val)SIGNAL ; Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:27113,Testability,log,log,27113,"negative"",2=""&Positive"")}*; TGNumberFormat::ELimitfNumLimits*OPTION={GetMethod=""GetNumLimits"";SetMethod=""SetNumLimits"";Items=(0=""&No Limits"",1=""Limit M&in"",2=""Limit M&ax"",2=""Min &and Max"")}*; TGNumberFormat::EStylefNumStyle*OPTION={GetMethod=""GetNumStyle"";SetMethod=""SetNumStyle"";Items=(0=""Int"",5=""Real"",6=""Degree"",9=""Hour:Min:Sec"",10=""Day/Month/Year"",12=""Hex"")}*; const TGPicture*fPicDownDown arrow; const TGPicture*fPicUpUp arrow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGNumberEntry(const TGWindow* parent = 0, Double_t val = 0, Int_t digitwidth = 5, Int_t id = -1, TGNumberFormat::EStyle style = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Constructs a numeric entry widget. ~TGNumberEntry(); Destructs a numeric entry widget. void Associate(const TGWindow* w); Make w the window that will receive the generated messages. void SetLogStep(Bool_t on = kTRUE); Set log steps. void SetState(Bool_t enable = kTRUE); Set the active state. void SetButtonToNum(Bool_t state); Send button messages to the number field (true) or parent widget (false).; When the message is sent to the parent widget, it is responsible to change; the numerical value accordingly. This can be useful to implement cursors; which move from data point to data point. For the message being sent; see ProcessMessage(). Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process the up/down button messages. If fButtonToNum is false the; following message is sent: kC_COMMAND, kCM_BUTTON, widget id, param; param % 100 is the step size; param % 10000 / 100 != 0 indicates log step; param / 10000 != 0 indicates button down. TGLayoutManager * GetLayoutManager() const; Return layout manager. void ValueChanged(Long_t val); Emit ValueChanged(Long_t) signal. This signal is emitted when; fButtonToNum is false. The val has the following meaning:; val % 100 is the step size",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:27800,Testability,log,log,27800,"yle = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Constructs a numeric entry widget. ~TGNumberEntry(); Destructs a numeric entry widget. void Associate(const TGWindow* w); Make w the window that will receive the generated messages. void SetLogStep(Bool_t on = kTRUE); Set log steps. void SetState(Bool_t enable = kTRUE); Set the active state. void SetButtonToNum(Bool_t state); Send button messages to the number field (true) or parent widget (false).; When the message is sent to the parent widget, it is responsible to change; the numerical value accordingly. This can be useful to implement cursors; which move from data point to data point. For the message being sent; see ProcessMessage(). Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process the up/down button messages. If fButtonToNum is false the; following message is sent: kC_COMMAND, kCM_BUTTON, widget id, param; param % 100 is the step size; param % 10000 / 100 != 0 indicates log step; param / 10000 != 0 indicates button down. TGLayoutManager * GetLayoutManager() const; Return layout manager. void ValueChanged(Long_t val); Emit ValueChanged(Long_t) signal. This signal is emitted when; fButtonToNum is false. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void ValueSet(Long_t val); Emit ValueSet(Long_t) signal. This signal is emitted when the; number entry value is changed. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. void SetNumber(Double_t val). void SetIntNumber(Long_t val). void SetTime(Int_t hour, Int_t min, Int_t sec). void SetDate(Int_t year, Int_t month, Int_t day). void SetHexN",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:28133,Testability,log,log,28133," Set log steps. void SetState(Bool_t enable = kTRUE); Set the active state. void SetButtonToNum(Bool_t state); Send button messages to the number field (true) or parent widget (false).; When the message is sent to the parent widget, it is responsible to change; the numerical value accordingly. This can be useful to implement cursors; which move from data point to data point. For the message being sent; see ProcessMessage(). Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process the up/down button messages. If fButtonToNum is false the; following message is sent: kC_COMMAND, kCM_BUTTON, widget id, param; param % 100 is the step size; param % 10000 / 100 != 0 indicates log step; param / 10000 != 0 indicates button down. TGLayoutManager * GetLayoutManager() const; Return layout manager. void ValueChanged(Long_t val); Emit ValueChanged(Long_t) signal. This signal is emitted when; fButtonToNum is false. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void ValueSet(Long_t val); Emit ValueSet(Long_t) signal. This signal is emitted when the; number entry value is changed. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. void SetNumber(Double_t val). void SetIntNumber(Long_t val). void SetTime(Int_t hour, Int_t min, Int_t sec). void SetDate(Int_t year, Int_t month, Int_t day). void SetHexNumber(ULong_t val). void SetText(const char* text, Bool_t emit = kTRUE). Double_t GetNumber() const. Long_t GetIntNumber() const. void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const. void GetDate(Int_t& year, Int_t& month, Int_t& day) const. ULong_t GetHexNumber() const. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t log",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:28401,Testability,log,log,28401,"merical value accordingly. This can be useful to implement cursors; which move from data point to data point. For the message being sent; see ProcessMessage(). Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process the up/down button messages. If fButtonToNum is false the; following message is sent: kC_COMMAND, kCM_BUTTON, widget id, param; param % 100 is the step size; param % 10000 / 100 != 0 indicates log step; param / 10000 != 0 indicates button down. TGLayoutManager * GetLayoutManager() const; Return layout manager. void ValueChanged(Long_t val); Emit ValueChanged(Long_t) signal. This signal is emitted when; fButtonToNum is false. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void ValueSet(Long_t val); Emit ValueSet(Long_t) signal. This signal is emitted when the; number entry value is changed. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. void SetNumber(Double_t val). void SetIntNumber(Long_t val). void SetTime(Int_t hour, Int_t min, Int_t sec). void SetDate(Int_t year, Int_t month, Int_t day). void SetHexNumber(ULong_t val). void SetText(const char* text, Bool_t emit = kTRUE). Double_t GetNumber() const. Long_t GetIntNumber() const. void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const. void GetDate(Int_t& year, Int_t& month, Int_t& day) const. ULong_t GetHexNumber() const. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE). void SetLimits(TGNumberFormat::ELimit limits = TGNumberFormat::kNELNoLimits, Double_t min = 0, Double_t max = 1). EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() con",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:29106,Testability,log,logstep,29106," val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void ValueSet(Long_t val); Emit ValueSet(Long_t) signal. This signal is emitted when the; number entry value is changed. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. void SetNumber(Double_t val). void SetIntNumber(Long_t val). void SetTime(Int_t hour, Int_t min, Int_t sec). void SetDate(Int_t year, Int_t month, Int_t day). void SetHexNumber(ULong_t val). void SetText(const char* text, Bool_t emit = kTRUE). Double_t GetNumber() const. Long_t GetIntNumber() const. void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const. void GetDate(Int_t& year, Int_t& month, Int_t& day) const. ULong_t GetHexNumber() const. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE). void SetLimits(TGNumberFormat::ELimit limits = TGNumberFormat::kNELNoLimits, Double_t min = 0, Double_t max = 1). EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() const; Get the numerialc limit attribute. Double_t GetNumMin() const; Get the lower limit. Double_t GetNumMax() const; Get the upper limit. Bool_t IsLogStep() const; Is log step enabled?. Bool_t IsEditable() const; { return kFALSE; }. TGNumberEntry(const TGNumberEntry& ). TGNumberEntry& operator=(const TGNumberEntry& ). void SetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = TGNumberFormat::kNEAAnyNumber); Set the numerical format. void SetNumStyle(TGNumberFormat::EStyle style). void SetNumAttr(TGNumberFormat::EAttribute attr = kNEAAnyNumber). void SetNumLimits(TGNumberFormat::ELimit limits = kNELNoLimits). void SetLimitValues(Double_t min = 0, Double_t max = 1). TG",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:29543,Testability,log,log,29543,"statement(s) on output stream out. void SetNumber(Double_t val). void SetIntNumber(Long_t val). void SetTime(Int_t hour, Int_t min, Int_t sec). void SetDate(Int_t year, Int_t month, Int_t day). void SetHexNumber(ULong_t val). void SetText(const char* text, Bool_t emit = kTRUE). Double_t GetNumber() const. Long_t GetIntNumber() const. void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const. void GetDate(Int_t& year, Int_t& month, Int_t& day) const. ULong_t GetHexNumber() const. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE). void SetLimits(TGNumberFormat::ELimit limits = TGNumberFormat::kNELNoLimits, Double_t min = 0, Double_t max = 1). EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() const; Get the numerialc limit attribute. Double_t GetNumMin() const; Get the lower limit. Double_t GetNumMax() const; Get the upper limit. Bool_t IsLogStep() const; Is log step enabled?. Bool_t IsEditable() const; { return kFALSE; }. TGNumberEntry(const TGNumberEntry& ). TGNumberEntry& operator=(const TGNumberEntry& ). void SetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = TGNumberFormat::kNEAAnyNumber); Set the numerical format. void SetNumStyle(TGNumberFormat::EStyle style). void SetNumAttr(TGNumberFormat::EAttribute attr = kNEAAnyNumber). void SetNumLimits(TGNumberFormat::ELimit limits = kNELNoLimits). void SetLimitValues(Double_t min = 0, Double_t max = 1). TGNumberEntryField * GetNumberEntry() const; Get the number entry field. TGButton * GetButtonUp() const; Get the up button. TGButton * GetButtonDown() const; Get the down button. UInt_t GetDefaultHeight() const; { return fNumericEntry->GetDefaultHeight(); }. » Author: Daniel Sigg 03/09/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:55; This page has been automatically generated. For c",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:3812,Usability,Clear,Clear,3812,,MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntry.html:19350,Usability,Clear,ClearFlags,19350,"oidTObject::UseCurrentStyle(); virtual voidValueChanged(Long_t val)SIGNAL ; virtual voidValueSet(Long_t val)SIGNAL ; Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGNumberEntry&operator=(const TGNumberEntry&); TGNumberEntry(const TGNumberEntry&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow::EEditModeTG",MatchSource.WIKI,root/html604/TGNumberEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html
https://root.cern/root/html604/TGNumberEntryField.html:447,Availability,down,down,447,". TGNumberEntryField. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGNumberEntryField. class TGNumberEntryField: public TGTextEntry, public TGNumberFormat. TGNumberEntry, TGNumberEntryField and TGNumberFormat. TGNumberEntry is a number entry input widget with up/down buttons.; TGNumberEntryField is a number entry input widget.; TGNumberFormat contains enum types to specify the numeric format. The number entry widget is based on TGTextEntry but allows only; numerical input. The widget support numerous formats including; integers, hex numbers, real numbers, fixed fraction reals and; time/date formats. The widget also allows to restrict input values; to non-negative or positive numbers and to specify explicit limits. The following styles are supported:; kNESInteger: integer number; kNESRealOne: real number with one digit (no exponent); kNESRealTwo: real number with two digits (no exponent); kNESRealThree: real number with three digits (no exponent); kNESRealFour: real number with four digits (no exponent); kNESReal: arbitrary real number; kNESDegree: angle in degree:minutes:seconds format; kNESMinSec: time in minutes:seconds format; kNESHourMin: time in hour:minutes format; kNESHourMinSec: time in hour:minutes:seconds format; kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small button",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:2119,Availability,down,down,2119,"th three digits (no exponent); kNESRealFour: real number with four digits (no exponent); kNESReal: arbitrary real number; kNESDegree: angle in degree:minutes:seconds format; kNESMinSec: time in minutes:seconds format; kNESHourMin: time in hour:minutes format; kNESHourMinSec: time in hour:minutes:seconds format; kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. virtual~TGNumberEntryField(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGTextEn",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:7018,Availability,Error,Error,7018,"t char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidTGTextEntry::End(Bool_t mark = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ETextJustificationTGTextEntry::GetAlignment() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGTextBuffer*TGTextEntry::GetBuffer() const; virtual Int_tGetCharWidth(const char* text = ""0"") const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); Int_tTGTextEntry::GetCursorPositio",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:7147,Availability,error,error,7147,"nal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidTGTextEntry::End(Bool_t mark = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ETextJustificationTGTextEntry::GetAlignment() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGTextBuffer*TGTextEntry::GetBuffer() const; virtual Int_tGetCharWidth(const char* text = ""0"") const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); Int_tTGTextEntry::GetCursorPosition() const; virtual voidGetDate(Int_t& year, Int_t& month, Int_t& day) const; static FontStruct_tTGTextEntry::GetDefaultFontStruct",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:7231,Availability,error,error,7231,"ject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidTGTextEntry::End(Bool_t mark = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ETextJustificationTGTextEntry::GetAlignment() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGTextBuffer*TGTextEntry::GetBuffer() const; virtual Int_tGetCharWidth(const char* text = ""0"") const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); Int_tTGTextEntry::GetCursorPosition() const; virtual voidGetDate(Int_t& year, Int_t& month, Int_t& day) const; static FontStruct_tTGTextEntry::GetDefaultFontStruct(); static Pixel_tTGFrame::GetDefaultFrameBackground(); static const TGGC&TGTextEntr",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:26648,Availability,Echo,Echo,26648,,MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:26994,Availability,mask,mask,26994,"thframe border width; TGClient*TGObject::fClientConnection to display server; Atom_tTGTextEntry::fClipboardclipboard property; TStringTGWidget::fCommandcommand to be executed; TBlinkTimer*TGTextEntry::fCurBlinkcursor blink timer; Int_tTGTextEntry::fCursorIXcursor position in characters; Bool_tTGTextEntry::fCursorOncursor status (on/off); Int_tTGTextEntry::fCursorXcursor position in pixels; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGTextEntry::fDefHeightdefault height; UInt_tTGTextEntry::fDefWidthdefault width; TGTextEntry::EEchoModeTGTextEntry::fEchoMode*OPTION={GetMethod=""GetEchoMode"";SetMethod=""SetEchoMode"";Items=(kNormal=""Normal"",kNoEcho=""No Echo"",kPassword=""Password"")}*; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; Bool_tTGTextEntry::fEditedkFALSE, if the line edit's contents have not been changed since the construction; Int_tTGTextEntry::fEndIXselection end in characters; Int_tTGTextEntry::fEndXselection end in pixels; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; FontStruct_tTGTextEntry::fFontStructtext font; Bool_tTGTextEntry::fFrameDrawnkTRUE draw itself inside a two-pixel frame, kFALSE draw without any frame; Bool_tTGTextEntry::fHasOwnFontkTRUE - font defined locally, kFALSE - globally; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; TGTextEntry::EInsertModeTGTextEntry::fInsertMode*OPTION={GetMethod=""GetInsertMode"";SetMethod=""SetInsertMode"";Items=(kInsert=""Insert"",kReplace=""Replace"")}*; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tTGFrame::fMaxHeightmaximal frame height; Int_tTGTextEntry::fMaxLenmaximum length of text; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; TStringTGWindow::fNamename of",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:17692,Deployability,TOGGLE,TOGGLE,17692,"kgroundColor(Pixel_t back); virtual voidTGWindow::SetBackgroundPixmap(Pixmap_t pixmap); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGFrame::SetCleanup(Int_t = kLocalCleanup); virtual voidTGWidget::SetCommand(const char* command); virtual voidTGTextEntry::SetCursorPosition(Int_t pos); virtual voidSetDate(Int_t year, Int_t month, Int_t day); virtual voidTGTextEntry::SetDefaultSize(UInt_t w, UInt_t h); voidTGFrame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGTextEntry::SetEchoMode(TGTextEntry::EEchoMode mode = kNormal); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); voidTGTextEntry::SetEdited(Bool_t flag = kTRUE); voidTGTextEntry::SetEnabled(Bool_t flag = kTRUE)TOGGLE GETTER ; virtual voidTGTextEntry::SetFocus(); virtual voidTGTextEntry::SetFont(TGFont* font, Bool_t local = kTRUE); virtual voidTGTextEntry::SetFont(FontStruct_t font, Bool_t local = kTRUE); virtual voidTGTextEntry::SetFont(const char* fontName, Bool_t local = kTRUE); virtual voidTGTextEntry::SetForegroundColor(Pixel_t fore); virtual voidSetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = kNEAAnyNumber); virtual voidTGTextEntry::SetFrameDrawn(Bool_t flag = kTRUE); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidSetHexNumber(ULong_t val); virtual voidTGTextEntry::SetInsertMode(TGTextEntry::EInsertMode mode = kInsert); virtual voidSetIntNumber(Long_t val); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidSetLimits(TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); virtual voidSetLogStep(Bool_t on = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtua",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:22737,Deployability,Update,UpdateOffset,22737,"::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); voidTGTextEntry::CopyText() const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGTextEntry::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); Int_tTGTextEntry::GetCharacterIndex(Int_t xcoord); static const TGGC&TGTextEntry::GetDefaultSelectedBackgroundGC(); static const TGGC&TGTextEntry::GetDefaultSelectedGC(); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTGTextEntry::Init(); virtual Bool_tTGTextEntry::IsCursorOutOfFrame(); voidTObject::MakeZombie(); voidTGTextEntry::Paste(); virtual voidTGTextEntry::PastePrimary(Window_t wid, Atom_t property, Bool_t del); virtual voidTGTextEntry::ScrollByChar(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidTGTextEntry::UpdateOffset(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisab",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:14373,Integrability,Message,Message,14373,"e::IsDNDTarget() const; virtual Bool_tIsEditable() const; Bool_tTGTextEntry::IsEdited() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTGTextEntry::IsFrameDrawn() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tIsLogStep() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidLayout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTGTextEntry::MarkWord(Int_t pos); Int_tTGTextEntry::MaxMark() const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; Int_tTGTextEntry::MinMark() const; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGWindow::MustCleanup() const; voidTGTextEntry::NewMark(Int_t pos); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGNumberEntryField&operator=(const TGNumberEntryField&); TGNumberEntryField&operator=(TGNumberEntryField&&); virtual voidTObject::",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:32563,Integrability,message,message,32563,"epresentation). Long_t GetIntNumber() const; Get the numeric value (integer representation). void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const; Get the numeric value (time format). void GetDate(Int_t& year, Int_t& month, Int_t& day) const; Get the numeric value (date format). ULong_t GetHexNumber() const; Get the numeric value (hex format). Int_t GetCharWidth(const char* text = ""0"") const; Get the text width in pixels. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); Increase the number value. void SetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = kNEAAnyNumber); Set the numerical format. void SetLimits(TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Set the numerical limits. void SetState(Bool_t state); Set the active state. Bool_t HandleKey(Event_t* event); Handle keys. Bool_t HandleFocusChange(Event_t* event); Handle focus change. void TextChanged(const char* text = 0); Text has changed message. void ReturnPressed(); Return was pressed. void Layout(); Layout. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. TGNumberEntryField(const TGWindow* p, Int_t id, Double_t val, GContext_t norm, FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame | kDoubleBorder, Pixel_t back = GetWhitePixel()). void SetLogStep(Bool_t on = kTRUE); Set logarithmic steps. EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() const; Get the numerialc limit attribute. Double_t GetNumMin() const; Get the lower limit. Double_t GetNumMax() const; Get the upper limit. Bool_t IsLogStep() const; Is log step enabled?. Bool_t IsEditable() const; { return kFALSE; }. void InvalidInput(const char* instr); { Emit(""InvalidInput(char*)"", instr); }. TGNumberEntry& operator=(const TGNumberEntry&). TGNumberEntryLayout& o",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:12876,Modifiability,Inherit,InheritsFrom,12876,"ool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); virtual Bool_tTGTextEntry::HandleMotion(Event_t* event); virtual Bool_tTGTextEntry::HandleSelection(Event_t* event); virtual Bool_tTGTextEntry::HandleSelectionClear(Event_t* event); virtual Bool_tTGTextEntry::HandleSelectionRequest(Event_t* event); virtual Bool_tTGTextEntry::HandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; Bool_tTGTextEntry::HasMarkedText() const; Bool_tTGTextEntry::HasOwnFont() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); voidTGTextEntry::Home(Bool_t mark = kFALSE); virtual voidTGWindow::IconifyWindow(); virtual voidIncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGTextEntry::Insert(const char*); virtual voidTGTextEntry::InsertText(const char* text, Int_t pos); virtual voidTGFrame::Inspect() const; virtual voidInvalidInput(const char* instr)SIGNAL ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tIsEditable() const; Bool_tTGTextEntry::IsEdited() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTGTextEntry::IsFrameDrawn() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tIsLogStep() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() c",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:12942,Modifiability,Inherit,InheritsFrom,12942,"leKey(Event_t* event); virtual Bool_tTGTextEntry::HandleMotion(Event_t* event); virtual Bool_tTGTextEntry::HandleSelection(Event_t* event); virtual Bool_tTGTextEntry::HandleSelectionClear(Event_t* event); virtual Bool_tTGTextEntry::HandleSelectionRequest(Event_t* event); virtual Bool_tTGTextEntry::HandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; Bool_tTGTextEntry::HasMarkedText() const; Bool_tTGTextEntry::HasOwnFont() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); voidTGTextEntry::Home(Bool_t mark = kFALSE); virtual voidTGWindow::IconifyWindow(); virtual voidIncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGTextEntry::Insert(const char*); virtual voidTGTextEntry::InsertText(const char* text, Int_t pos); virtual voidTGFrame::Inspect() const; virtual voidInvalidInput(const char* instr)SIGNAL ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tIsEditable() const; Bool_tTGTextEntry::IsEdited() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTGTextEntry::IsFrameDrawn() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tIsLogStep() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidLayout(); virtu",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:30387,Modifiability,Inherit,Inheritance,30387,"atic const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static TString*TGTextEntry::fgClipboardTextapplication clipboard text; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGTextEntry::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGTextEntry::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGTextEntry::fgDefaultSelectedBackgroundGC; static const TGGC*TGTextEntry::fgDefaultSelectedGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGNumberEntryField(const TGWindow* p, Int_t id, Double_t val, GContext_t norm, FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame | kDoubleBorder, Pixel_t back = GetWhitePixel()); Constructs a number entry field. TGNumberEntryField(const TGWindow* parent = 0, Int_t id = -1, Double_t val = 0, TGNumberFormat::EStyle style = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Constructs a number entry field. void SetNumber(Double_t val); Set the numeric value (floating point representation). void SetIntNumber(Long_t val); Set the numeric value (integer representation). void SetTime(Int_t hour, Int_t min, Int_t sec); Set the numeric value (time format). void SetDate(Int_t year, Int_t month, Int_t day); Set the numeric value (date format). void SetHexNumber(ULong_t val); Set the numeric value (hex format). void SetText(const char*",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:30400,Modifiability,Inherit,Inherited,30400,"atic const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static TString*TGTextEntry::fgClipboardTextapplication clipboard text; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGTextEntry::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGTextEntry::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGTextEntry::fgDefaultSelectedBackgroundGC; static const TGGC*TGTextEntry::fgDefaultSelectedGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGNumberEntryField(const TGWindow* p, Int_t id, Double_t val, GContext_t norm, FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame | kDoubleBorder, Pixel_t back = GetWhitePixel()); Constructs a number entry field. TGNumberEntryField(const TGWindow* parent = 0, Int_t id = -1, Double_t val = 0, TGNumberFormat::EStyle style = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Constructs a number entry field. void SetNumber(Double_t val); Set the numeric value (floating point representation). void SetIntNumber(Long_t val); Set the numeric value (integer representation). void SetTime(Int_t hour, Int_t min, Int_t sec); Set the numeric value (time format). void SetDate(Int_t year, Int_t month, Int_t day); Set the numeric value (date format). void SetHexNumber(ULong_t val); Set the numeric value (hex format). void SetText(const char*",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:12400,Security,Hash,Hash,12400," Atom_t, Int_t, Int_t); virtual Bool_tTGTextEntry::HandleDoubleClick(Event_t* event); virtual Bool_tTGFrame::HandleDragDrop(TGFrame*, Int_t, Int_t, TGLayoutHints*); virtual Bool_tTGFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tHandleFocusChange(Event_t* event); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); virtual Bool_tTGTextEntry::HandleMotion(Event_t* event); virtual Bool_tTGTextEntry::HandleSelection(Event_t* event); virtual Bool_tTGTextEntry::HandleSelectionClear(Event_t* event); virtual Bool_tTGTextEntry::HandleSelectionRequest(Event_t* event); virtual Bool_tTGTextEntry::HandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; Bool_tTGTextEntry::HasMarkedText() const; Bool_tTGTextEntry::HasOwnFont() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); voidTGTextEntry::Home(Bool_t mark = kFALSE); virtual voidTGWindow::IconifyWindow(); virtual voidIncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGTextEntry::Insert(const char*); virtual voidTGTextEntry::InsertText(const char* text, Int_t pos); virtual voidTGFrame::Inspect() const; virtual voidInvalidInput(const char* instr)SIGNAL ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; vi",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:26665,Security,Password,Password,26665,,MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:2436,Testability,log,logarithmic,2436," kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. virtual~TGNumberEntryField(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGTextEntry::AppendText(const char* text); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); voidTGTextEntry::Backspace(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTO",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:12761,Testability,log,logstep,12761,"nt); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tHandleFocusChange(Event_t* event); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); virtual Bool_tTGTextEntry::HandleMotion(Event_t* event); virtual Bool_tTGTextEntry::HandleSelection(Event_t* event); virtual Bool_tTGTextEntry::HandleSelectionClear(Event_t* event); virtual Bool_tTGTextEntry::HandleSelectionRequest(Event_t* event); virtual Bool_tTGTextEntry::HandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; Bool_tTGTextEntry::HasMarkedText() const; Bool_tTGTextEntry::HasOwnFont() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); voidTGTextEntry::Home(Bool_t mark = kFALSE); virtual voidTGWindow::IconifyWindow(); virtual voidIncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGTextEntry::Insert(const char*); virtual voidTGTextEntry::InsertText(const char* text, Int_t pos); virtual voidTGFrame::Inspect() const; virtual voidInvalidInput(const char* instr)SIGNAL ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tIsEditable() const; Bool_tTGTextEntry::IsEdited() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTGTextEntry::IsFrameDrawn() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tIsLogStep() const; virtual Bool_tTGWindow::IsMapped(); v",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:20109,Testability,Test,TestBit,20109,"irtual voidSetState(Bool_t state); virtual voidSetText(const char* text, Bool_t emit = kTRUE); virtual voidTGTextEntry::SetTextColor(Pixel_t color, Bool_t local = kTRUE); virtual voidTGTextEntry::SetTextColor(TColor* color, Bool_t local = kTRUE); virtual voidSetTime(Int_t hour, Int_t min, Int_t sec); virtual voidTGTextEntry::SetTitle(const char* label); virtual voidTGTextEntry::SetToolTipText(const char* text, Long_t delayms = 500)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGTextEntry::ShiftTabPressed()SIGNAL ; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTGTextEntry::TabPressed()SIGNAL ; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTextChanged(const char* text = 0); TGNumberEntryField(TGNumberEntryField&&); TGNumberEntryField(const TGNumberEntryField&); TGNumberEntryField(const TGWindow* p, Int_t id, Double_t val, GContext_t norm, FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame | kDoubleBorder, Pixel_t back = GetWhitePixel()); TGNumberEntryField(const TGWindow* parent = 0, Int_t id = -1, Double_t val = 0, TGNumberFormat::EStyle style = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* ",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:20148,Testability,Test,TestBits,20148,"ual voidSetText(const char* text, Bool_t emit = kTRUE); virtual voidTGTextEntry::SetTextColor(Pixel_t color, Bool_t local = kTRUE); virtual voidTGTextEntry::SetTextColor(TColor* color, Bool_t local = kTRUE); virtual voidSetTime(Int_t hour, Int_t min, Int_t sec); virtual voidTGTextEntry::SetTitle(const char* label); virtual voidTGTextEntry::SetToolTipText(const char* text, Long_t delayms = 500)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGTextEntry::ShiftTabPressed()SIGNAL ; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTGTextEntry::TabPressed()SIGNAL ; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTextChanged(const char* text = 0); TGNumberEntryField(TGNumberEntryField&&); TGNumberEntryField(const TGNumberEntryField&); TGNumberEntryField(const TGWindow* p, Int_t id, Double_t val, GContext_t norm, FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame | kDoubleBorder, Pixel_t back = GetWhitePixel()); TGNumberEntryField(const TGWindow* parent = 0, Int_t id = -1, Double_t val = 0, TGNumberFormat::EStyle style = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsiz",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:32054,Testability,log,logstep,32054,"alue (floating point representation). void SetIntNumber(Long_t val); Set the numeric value (integer representation). void SetTime(Int_t hour, Int_t min, Int_t sec); Set the numeric value (time format). void SetDate(Int_t year, Int_t month, Int_t day); Set the numeric value (date format). void SetHexNumber(ULong_t val); Set the numeric value (hex format). void SetText(const char* text, Bool_t emit = kTRUE); Set the value (text format). Double_t GetNumber() const; Get the numeric value (floating point representation). Long_t GetIntNumber() const; Get the numeric value (integer representation). void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const; Get the numeric value (time format). void GetDate(Int_t& year, Int_t& month, Int_t& day) const; Get the numeric value (date format). ULong_t GetHexNumber() const; Get the numeric value (hex format). Int_t GetCharWidth(const char* text = ""0"") const; Get the text width in pixels. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); Increase the number value. void SetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = kNEAAnyNumber); Set the numerical format. void SetLimits(TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Set the numerical limits. void SetState(Bool_t state); Set the active state. Bool_t HandleKey(Event_t* event); Handle keys. Bool_t HandleFocusChange(Event_t* event); Handle focus change. void TextChanged(const char* text = 0); Text has changed message. void ReturnPressed(); Return was pressed. void Layout(); Layout. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. TGNumberEntryField(const TGWindow* p, Int_t id, Double_t val, GContext_t norm, FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame | kDoubleBorder, Pixel_t back = GetWhitePixel()). void SetLogStep(Bool_t on = kTRUE); Set logarithmic steps. EStyle GetNumS",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:33000,Testability,log,logarithmic,33000,"t GetCharWidth(const char* text = ""0"") const; Get the text width in pixels. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); Increase the number value. void SetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = kNEAAnyNumber); Set the numerical format. void SetLimits(TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Set the numerical limits. void SetState(Bool_t state); Set the active state. Bool_t HandleKey(Event_t* event); Handle keys. Bool_t HandleFocusChange(Event_t* event); Handle focus change. void TextChanged(const char* text = 0); Text has changed message. void ReturnPressed(); Return was pressed. void Layout(); Layout. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. TGNumberEntryField(const TGWindow* p, Int_t id, Double_t val, GContext_t norm, FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame | kDoubleBorder, Pixel_t back = GetWhitePixel()). void SetLogStep(Bool_t on = kTRUE); Set logarithmic steps. EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() const; Get the numerialc limit attribute. Double_t GetNumMin() const; Get the lower limit. Double_t GetNumMax() const; Get the upper limit. Bool_t IsLogStep() const; Is log step enabled?. Bool_t IsEditable() const; { return kFALSE; }. void InvalidInput(const char* instr); { Emit(""InvalidInput(char*)"", instr); }. TGNumberEntry& operator=(const TGNumberEntry&). TGNumberEntryLayout& operator=(const TGNumberEntryLayout&). » Author: Daniel Sigg 03/09/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:33323,Testability,log,log,33323,"t GetCharWidth(const char* text = ""0"") const; Get the text width in pixels. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); Increase the number value. void SetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = kNEAAnyNumber); Set the numerical format. void SetLimits(TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); Set the numerical limits. void SetState(Bool_t state); Set the active state. Bool_t HandleKey(Event_t* event); Handle keys. Bool_t HandleFocusChange(Event_t* event); Handle focus change. void TextChanged(const char* text = 0); Text has changed message. void ReturnPressed(); Return was pressed. void Layout(); Layout. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. TGNumberEntryField(const TGWindow* p, Int_t id, Double_t val, GContext_t norm, FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame | kDoubleBorder, Pixel_t back = GetWhitePixel()). void SetLogStep(Bool_t on = kTRUE); Set logarithmic steps. EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() const; Get the numerialc limit attribute. Double_t GetNumMin() const; Get the lower limit. Double_t GetNumMax() const; Get the upper limit. Bool_t IsLogStep() const; Is log step enabled?. Bool_t IsEditable() const; { return kFALSE; }. void InvalidInput(const char* instr); { Emit(""InvalidInput(char*)"", instr); }. TGNumberEntry& operator=(const TGNumberEntry&). TGNumberEntryLayout& operator=(const TGNumberEntryLayout&). » Author: Daniel Sigg 03/09/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:3714,Usability,Clear,Clear,3714,,MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryField.html:21336,Usability,Clear,ClearFlags,21336,"::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); voidTGTextEntry::CopyText() const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGTextEntry::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); Int_tTGTextEntry::GetCharacterIndex(Int_t xcoord); static const TGGC&TGTextEntry::GetDefaultSelectedBackgroundGC(); static const TGGC&TGTextEntry::GetDefaultSelectedGC(); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTGTextEntry::Init(); virtual Bool_tTGTextEntry::IsCursorOutOfFrame(); voidTObject::MakeZombie(); voidTGTextEntry::Paste(); virtual voidTGTextEntry::PastePrimary(Window_t wid, Atom_t property, Bool_t del); virtual voidTGTextEntry::ScrollByChar(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidTGTextEntry::UpdateOffset(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisab",MatchSource.WIKI,root/html604/TGNumberEntryField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryField.html
https://root.cern/root/html604/TGNumberEntryLayout.html:431,Availability,down,down,431,". TGNumberEntryLayout. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGNumberEntryLayout. class TGNumberEntryLayout: public TGLayoutManager. TGNumberEntry, TGNumberEntryField and TGNumberFormat. TGNumberEntry is a number entry input widget with up/down buttons.; TGNumberEntryField is a number entry input widget.; TGNumberFormat contains enum types to specify the numeric format. The number entry widget is based on TGTextEntry but allows only; numerical input. The widget support numerous formats including; integers, hex numbers, real numbers, fixed fraction reals and; time/date formats. The widget also allows to restrict input values; to non-negative or positive numbers and to specify explicit limits. The following styles are supported:; kNESInteger: integer number; kNESRealOne: real number with one digit (no exponent); kNESRealTwo: real number with two digits (no exponent); kNESRealThree: real number with three digits (no exponent); kNESRealFour: real number with four digits (no exponent); kNESReal: arbitrary real number; kNESDegree: angle in degree:minutes:seconds format; kNESMinSec: time in minutes:seconds format; kNESHourMin: time in hour:minutes format; kNESHourMinSec: time in hour:minutes:seconds format; kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase an",MatchSource.WIKI,root/html604/TGNumberEntryLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryLayout.html
https://root.cern/root/html604/TGNumberEntryLayout.html:2103,Availability,down,down,2103,"th three digits (no exponent); kNESRealFour: real number with four digits (no exponent); kNESReal: arbitrary real number; kNESDegree: angle in degree:minutes:seconds format; kNESMinSec: time in minutes:seconds format; kNESHourMin: time in hour:minutes format; kNESHourMinSec: time in hour:minutes:seconds format; kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. virtual~TGNumberEntryLayout(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::Cl",MatchSource.WIKI,root/html604/TGNumberEntryLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryLayout.html
https://root.cern/root/html604/TGNumberEntryLayout.html:3677,Availability,Error,Error,3677,,MatchSource.WIKI,root/html604/TGNumberEntryLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryLayout.html
https://root.cern/root/html604/TGNumberEntryLayout.html:3806,Availability,error,error,3806,,MatchSource.WIKI,root/html604/TGNumberEntryLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryLayout.html
https://root.cern/root/html604/TGNumberEntryLayout.html:3890,Availability,error,error,3890," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGDimensionGetDefaultSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(c",MatchSource.WIKI,root/html604/TGNumberEntryLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryLayout.html
https://root.cern/root/html604/TGNumberEntryLayout.html:4813,Modifiability,Inherit,InheritsFrom,4813,"irtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGDimensionGetDefaultSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGLayoutManager::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidLayout(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void",MatchSource.WIKI,root/html604/TGNumberEntryLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryLayout.html
https://root.cern/root/html604/TGNumberEntryLayout.html:4879,Modifiability,Inherit,InheritsFrom,4879,"t_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGDimensionGetDefaultSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGLayoutManager::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidLayout(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](",MatchSource.WIKI,root/html604/TGNumberEntryLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryLayout.html
https://root.cern/root/html604/TGNumberEntryLayout.html:8600,Modifiability,Inherit,Inheritance,8600,"name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TGNumberEntryLayout&operator=(const TGNumberEntryLayout&); TGNumberEntryLayout(const TGNumberEntryLayout&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGNumberEntry*fBoxpointer to numeric control box; Bool_tTGLayoutManager::fModifiedkTRUE if positions of subframes changed after layout. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Layout(); Layout the internal GUI elements in use. TGDimension GetDefaultSize() const; Return the default size of the numeric control box. TGNumberEntry& operator=(const TGNumberEntryLayout& ). TGNumberEntryLayout(const TGNumberEntryLayout& ). TGNumberEntryLayout(TGNumberEntry* box); { }. » Author: Daniel Sigg 03/09/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGNumberEntryLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryLayout.html
https://root.cern/root/html604/TGNumberEntryLayout.html:8613,Modifiability,Inherit,Inherited,8613,"name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TGNumberEntryLayout&operator=(const TGNumberEntryLayout&); TGNumberEntryLayout(const TGNumberEntryLayout&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGNumberEntry*fBoxpointer to numeric control box; Bool_tTGLayoutManager::fModifiedkTRUE if positions of subframes changed after layout. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Layout(); Layout the internal GUI elements in use. TGDimension GetDefaultSize() const; Return the default size of the numeric control box. TGNumberEntry& operator=(const TGNumberEntryLayout& ). TGNumberEntryLayout(const TGNumberEntryLayout& ). TGNumberEntryLayout(TGNumberEntry* box); { }. » Author: Daniel Sigg 03/09/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGNumberEntryLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryLayout.html
https://root.cern/root/html604/TGNumberEntryLayout.html:4703,Security,Hash,Hash,4703,"nst char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGDimensionGetDefaultSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGLayoutManager::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidLayout(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](",MatchSource.WIKI,root/html604/TGNumberEntryLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryLayout.html
https://root.cern/root/html604/TGNumberEntryLayout.html:2420,Testability,log,logarithmic,2420," kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. virtual~TGNumberEntryLayout(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::",MatchSource.WIKI,root/html604/TGNumberEntryLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryLayout.html
https://root.cern/root/html604/TGNumberEntryLayout.html:7025,Testability,Test,TestBit,7025,"t::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGLayoutManager::SetDefaultHeight(UInt_t); virtual voidTGLayoutManager::SetDefaultWidth(UInt_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGLayoutManager::SetModified(Bool_t flag = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGNumberEntryLayout(TGNumberEntry* box); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGNumberEntryLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryLayout.html
https://root.cern/root/html604/TGNumberEntryLayout.html:7064,Testability,Test,TestBits,7064,"t::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGLayoutManager::SetDefaultHeight(UInt_t); virtual voidTGLayoutManager::SetDefaultWidth(UInt_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGLayoutManager::SetModified(Bool_t flag = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGNumberEntryLayout(TGNumberEntry* box); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGNumberEntryLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryLayout.html
https://root.cern/root/html604/TGNumberEntryLayout.html:3137,Usability,Clear,Clear,3137,,MatchSource.WIKI,root/html604/TGNumberEntryLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberEntryLayout.html
https://root.cern/root/html604/TGNumberFormat.html:392,Availability,down,down,392,". TGNumberFormat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGNumberFormat. class TGNumberFormat. TGNumberEntry, TGNumberEntryField and TGNumberFormat. TGNumberEntry is a number entry input widget with up/down buttons.; TGNumberEntryField is a number entry input widget.; TGNumberFormat contains enum types to specify the numeric format. The number entry widget is based on TGTextEntry but allows only; numerical input. The widget support numerous formats including; integers, hex numbers, real numbers, fixed fraction reals and; time/date formats. The widget also allows to restrict input values; to non-negative or positive numbers and to specify explicit limits. The following styles are supported:; kNESInteger: integer number; kNESRealOne: real number with one digit (no exponent); kNESRealTwo: real number with two digits (no exponent); kNESRealThree: real number with three digits (no exponent); kNESRealFour: real number with four digits (no exponent); kNESReal: arbitrary real number; kNESDegree: angle in degree:minutes:seconds format; kNESMinSec: time in minutes:seconds format; kNESHourMin: time in hour:minutes format; kNESHourMinSec: time in hour:minutes:seconds format; kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the ",MatchSource.WIKI,root/html604/TGNumberFormat.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberFormat.html
https://root.cern/root/html604/TGNumberFormat.html:2064,Availability,down,down,2064,"th three digits (no exponent); kNESRealFour: real number with four digits (no exponent); kNESReal: arbitrary real number; kNESDegree: angle in degree:minutes:seconds format; kNESMinSec: time in minutes:seconds format; kNESHourMin: time in hour:minutes format; kNESHourMinSec: time in hour:minutes:seconds format; kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. virtual~TGNumberFormat(); static TClass*Class(); virtual TClass*IsA() const; TGNumberFormat&operator=(const TGNumberFormat&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TB",MatchSource.WIKI,root/html604/TGNumberFormat.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberFormat.html
https://root.cern/root/html604/TGNumberFormat.html:4228,Modifiability,Inherit,Inheritance,4228,"0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. virtual~TGNumberFormat(); static TClass*Class(); virtual TClass*IsA() const; TGNumberFormat&operator=(const TGNumberFormat&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGNumberFormat(); TGNumberFormat(const TGNumberFormat&). Data Members; public:. static TGNumberFormat::EAttributekNEAAnyNumber; static TGNumberFormat::EAttributekNEANonNegative; static TGNumberFormat::EAttributekNEAPositive; static TGNumberFormat::ELimitkNELLimitMax; static TGNumberFormat::ELimitkNELLimitMin; static TGNumberFormat::ELimitkNELLimitMinMax; static TGNumberFormat::ELimitkNELNoLimits; static TGNumberFormat::EStylekNESDayMYear; static TGNumberFormat::EStylekNESDegree; static TGNumberFormat::EStylekNESHex; static TGNumberFormat::EStylekNESHourMin; static TGNumberFormat::EStylekNESHourMinSec; static TGNumberFormat::EStylekNESInteger; static TGNumberFormat::EStylekNESMDayYear; static TGNumberFormat::EStylekNESMinSec; static TGNumberFormat::EStylekNESReal; static TGNumberFormat::EStylekNESRealFour; static TGNumberFormat::EStylekNESRealOne; static TGNumberFormat::EStylekNESRealThree; static TGNumberFormat::EStylekNESRealTwo; static TGNumberFormat::EStepSizekNSSHuge; static TGNumberFormat::EStepSizekNSSLarge; static TGNumberFormat::EStepSizekNSSMedium; static TGNumberFormat::EStepSizekNSSSmall. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TGNumberFormat(); { }. TGNumberEntry& operator=(const TGNumberFormat& ). » Author: Daniel Sigg 03/09/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGNumberFormat.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberFormat.html
https://root.cern/root/html604/TGNumberFormat.html:4241,Modifiability,Inherit,Inherited,4241,"0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. virtual~TGNumberFormat(); static TClass*Class(); virtual TClass*IsA() const; TGNumberFormat&operator=(const TGNumberFormat&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGNumberFormat(); TGNumberFormat(const TGNumberFormat&). Data Members; public:. static TGNumberFormat::EAttributekNEAAnyNumber; static TGNumberFormat::EAttributekNEANonNegative; static TGNumberFormat::EAttributekNEAPositive; static TGNumberFormat::ELimitkNELLimitMax; static TGNumberFormat::ELimitkNELLimitMin; static TGNumberFormat::ELimitkNELLimitMinMax; static TGNumberFormat::ELimitkNELNoLimits; static TGNumberFormat::EStylekNESDayMYear; static TGNumberFormat::EStylekNESDegree; static TGNumberFormat::EStylekNESHex; static TGNumberFormat::EStylekNESHourMin; static TGNumberFormat::EStylekNESHourMinSec; static TGNumberFormat::EStylekNESInteger; static TGNumberFormat::EStylekNESMDayYear; static TGNumberFormat::EStylekNESMinSec; static TGNumberFormat::EStylekNESReal; static TGNumberFormat::EStylekNESRealFour; static TGNumberFormat::EStylekNESRealOne; static TGNumberFormat::EStylekNESRealThree; static TGNumberFormat::EStylekNESRealTwo; static TGNumberFormat::EStepSizekNSSHuge; static TGNumberFormat::EStepSizekNSSLarge; static TGNumberFormat::EStepSizekNSSMedium; static TGNumberFormat::EStepSizekNSSSmall. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TGNumberFormat(); { }. TGNumberEntry& operator=(const TGNumberFormat& ). » Author: Daniel Sigg 03/09/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGNumberFormat.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberFormat.html
https://root.cern/root/html604/TGNumberFormat.html:2381,Testability,log,logarithmic,2381," kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. virtual~TGNumberFormat(); static TClass*Class(); virtual TClass*IsA() const; TGNumberFormat&operator=(const TGNumberFormat&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGNumberFormat(); TGNumberFormat(const TGNumberFormat&). Data Members; public:. static TGNumberFormat::EAttributekNEAAnyNumber; static TGNumberFormat::EAttributekNEANonNegative; static TGNumberFormat::EAttributekNEAPositive; static TGNumberFormat::ELimitkNELLimitMax; static",MatchSource.WIKI,root/html604/TGNumberFormat.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGNumberFormat.html
https://root.cern/root/html604/TGObject.html:1315,Availability,Error,Error,1315," virtual~TGObject(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGClient*GetClient() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Handle_tGetId() const; virtual c",MatchSource.WIKI,root/html604/TGObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGObject.html
https://root.cern/root/html604/TGObject.html:1444,Availability,error,error,1444," virtual~TGObject(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGClient*GetClient() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Handle_tGetId() const; virtual c",MatchSource.WIKI,root/html604/TGObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGObject.html
https://root.cern/root/html604/TGObject.html:1528,Availability,error,error,1528," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGClient*GetClient() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Handle_tGetId() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(co",MatchSource.WIKI,root/html604/TGObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGObject.html
https://root.cern/root/html604/TGObject.html:2450,Modifiability,Inherit,InheritsFrom,2450,"virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGClient*GetClient() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Handle_tGetId() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void*",MatchSource.WIKI,root/html604/TGObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGObject.html
https://root.cern/root/html604/TGObject.html:2516,Modifiability,Inherit,InheritsFrom,2516,"nt_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGClient*GetClient() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Handle_tGetId() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual v",MatchSource.WIKI,root/html604/TGObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGObject.html
https://root.cern/root/html604/TGObject.html:5844,Modifiability,Inherit,Inheritance,5844,"ion, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TGObject&operator=(const TGObject& tgo). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGClient*fClientConnection to display server; Handle_tfIdX11/Win32 Window identifier. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SaveAs(const char* filename = """", Option_t* option = """") const; Write this TGObject to a file using TImage, if filename's extension signals; a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename().; Otherwise forward to TObject::SaveAs(). Bool_t IsEqual(const TObject* obj) const; Equal comparison (TGObjects are equal if they have the same; window identifier). If the TGObjects have not been created by; the Window manager (e.g. a TGLVEntry), then fall back to the; default TObject equal comparison. TGObject& operator=(const TGObject& tgo). TGObject(); { }. TGObject(const TGObject& tgo); { }. virtual ~TGObject(); { }. Handle_t GetId() const; { return fId; }. TGClient * GetClient() const; { return fClient; }. ULong_t Hash() const; { return (ULong_t) fId >> 0; }. » Author: Fons Rademakers 27/12/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 201",MatchSource.WIKI,root/html604/TGObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGObject.html
https://root.cern/root/html604/TGObject.html:5857,Modifiability,Inherit,Inherited,5857,"ion, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TGObject&operator=(const TGObject& tgo). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGClient*fClientConnection to display server; Handle_tfIdX11/Win32 Window identifier. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SaveAs(const char* filename = """", Option_t* option = """") const; Write this TGObject to a file using TImage, if filename's extension signals; a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename().; Otherwise forward to TObject::SaveAs(). Bool_t IsEqual(const TObject* obj) const; Equal comparison (TGObjects are equal if they have the same; window identifier). If the TGObjects have not been created by; the Window manager (e.g. a TGLVEntry), then fall back to the; default TObject equal comparison. TGObject& operator=(const TGObject& tgo). TGObject(); { }. TGObject(const TGObject& tgo); { }. virtual ~TGObject(); { }. Handle_t GetId() const; { return fId; }. TGClient * GetClient() const; { return fClient; }. ULong_t Hash() const; { return (ULong_t) fId >> 0; }. » Author: Fons Rademakers 27/12/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 201",MatchSource.WIKI,root/html604/TGObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGObject.html
https://root.cern/root/html604/TGObject.html:6677,Security,Hash,Hash,6677,"tMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGClient*fClientConnection to display server; Handle_tfIdX11/Win32 Window identifier. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SaveAs(const char* filename = """", Option_t* option = """") const; Write this TGObject to a file using TImage, if filename's extension signals; a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename().; Otherwise forward to TObject::SaveAs(). Bool_t IsEqual(const TObject* obj) const; Equal comparison (TGObjects are equal if they have the same; window identifier). If the TGObjects have not been created by; the Window manager (e.g. a TGLVEntry), then fall back to the; default TObject equal comparison. TGObject& operator=(const TGObject& tgo). TGObject(); { }. TGObject(const TGObject& tgo); { }. virtual ~TGObject(); { }. Handle_t GetId() const; { return fId; }. TGClient * GetClient() const; { return fClient; }. ULong_t Hash() const; { return (ULong_t) fId >> 0; }. » Author: Fons Rademakers 27/12/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGObject.html
https://root.cern/root/html604/TGObject.html:4394,Testability,Test,TestBit,4394,"bject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidSaveAs(const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGObject(); TGObject(const TGObject& tgo); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGObject.html
https://root.cern/root/html604/TGObject.html:4433,Testability,Test,TestBits,4433,"bject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidSaveAs(const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGObject(); TGObject(const TGObject& tgo); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGObject.html
https://root.cern/root/html604/TGObject.html:775,Usability,Clear,Clear,775," virtual~TGObject(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGClient*GetClient() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Handle_tGetId() const; virtual c",MatchSource.WIKI,root/html604/TGObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGObject.html
https://root.cern/root/html604/TGondzioSolver.html:2195,Availability,Error,Error,2195,"* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual Int_tTQpSolverBase::DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTQpSolverBase::DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual Int_tTQpSolverBase::DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTQpSolverBase::DumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tTQpSolverBase::FinalStepLength(TQpVar* iterate, TQpVar* step); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTQpSolverBase::GetArTol(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TQpLinSolverBase*TQpSolverBase::GetLinearSystem(); Double_tTQpSolverBase::GetMuTol(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetO",MatchSource.WIKI,root/html604/TGondzioSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGondzioSolver.html
https://root.cern/root/html604/TGondzioSolver.html:2324,Availability,error,error,2324,"taBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTQpSolverBase::DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual Int_tTQpSolverBase::DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTQpSolverBase::DumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tTQpSolverBase::FinalStepLength(TQpVar* iterate, TQpVar* step); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTQpSolverBase::GetArTol(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TQpLinSolverBase*TQpSolverBase::GetLinearSystem(); Double_tTQpSolverBase::GetMuTol(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::H",MatchSource.WIKI,root/html604/TGondzioSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGondzioSolver.html
https://root.cern/root/html604/TGondzioSolver.html:2408,Availability,error,error,2408," virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTQpSolverBase::DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual Int_tTQpSolverBase::DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTQpSolverBase::DumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tTQpSolverBase::FinalStepLength(TQpVar* iterate, TQpVar* step); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTQpSolverBase::GetArTol(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TQpLinSolverBase*TQpSolverBase::GetLinearSystem(); Double_tTQpSolverBase::GetMuTol(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject",MatchSource.WIKI,root/html604/TGondzioSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGondzioSolver.html
https://root.cern/root/html604/TGondzioSolver.html:9352,Energy Efficiency,Monitor,Monitor,9352,"defined as the sum of the complementarity gap; Double_t*TQpSolverBase::fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*TQpSolverBase::fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Int_tfPrintlevelparameter in range [0,100] determines verbosity. (Higher value; Double_t*TQpSolverBase::fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpVar*fStep; Double_tfStepFactor0various parameters associated with Gondzio correction; Double_tfStepFactor1; TQpLinSolverBase*TQpSolverBase::fSys; Double_tfTsigexponent in Mehrotra's centering parameter, which is usually. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGondzioSolver(); Default constructor. TGondzioSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); Constructor. TGondzioSolver(const TGondzioSolver& another); Copy constructor. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); Solve the quadratic programming problem as formulated through prob, store; the final solution in iterate->fX . Monitor the residuals during the iterations; through resid . The status is returned as defined in TQpSolverBase::ETerminationCode . void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); Print information about the optimization process and monitor the convergence; status of thye algorithm. ~TGondzioSolver(); Deconstructor. TGondzioSolver & operator=(const TGondzioSolver& source); Assignment operator. void Reset_parameters(); {}. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGondzioSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGondzioSolver.html
https://root.cern/root/html604/TGondzioSolver.html:9694,Energy Efficiency,monitor,monitor,9694,"defined as the sum of the complementarity gap; Double_t*TQpSolverBase::fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*TQpSolverBase::fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Int_tfPrintlevelparameter in range [0,100] determines verbosity. (Higher value; Double_t*TQpSolverBase::fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpVar*fStep; Double_tfStepFactor0various parameters associated with Gondzio correction; Double_tfStepFactor1; TQpLinSolverBase*TQpSolverBase::fSys; Double_tfTsigexponent in Mehrotra's centering parameter, which is usually. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGondzioSolver(); Default constructor. TGondzioSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); Constructor. TGondzioSolver(const TGondzioSolver& another); Copy constructor. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); Solve the quadratic programming problem as formulated through prob, store; the final solution in iterate->fX . Monitor the residuals during the iterations; through resid . The status is returned as defined in TQpSolverBase::ETerminationCode . void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); Print information about the optimization process and monitor the convergence; status of thye algorithm. ~TGondzioSolver(); Deconstructor. TGondzioSolver & operator=(const TGondzioSolver& source); Assignment operator. void Reset_parameters(); {}. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGondzioSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGondzioSolver.html
https://root.cern/root/html604/TGondzioSolver.html:3488,Modifiability,Inherit,InheritsFrom,3488,"l voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tTQpSolverBase::FinalStepLength(TQpVar* iterate, TQpVar* step); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTQpSolverBase::GetArTol(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TQpLinSolverBase*TQpSolverBase::GetLinearSystem(); Double_tTQpSolverBase::GetMuTol(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TGondzioSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGondzioSolver.html
https://root.cern/root/html604/TGondzioSolver.html:3554,Modifiability,Inherit,InheritsFrom,3554,"; virtual Double_tTQpSolverBase::FinalStepLength(TQpVar* iterate, TQpVar* step); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTQpSolverBase::GetArTol(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TQpLinSolverBase*TQpSolverBase::GetLinearSystem(); Double_tTQpSolverBase::GetMuTol(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGondzioSolver&operator=(const TGondzioSolver& sour",MatchSource.WIKI,root/html604/TGondzioSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGondzioSolver.html
https://root.cern/root/html604/TGondzioSolver.html:8907,Modifiability,Inherit,Inheritance,8907,"uble_t*TQpSolverBase::fMu_history[fMaxit] history of values of mu obtained on all iterations to date; Double_tTQpSolverBase::fMutoltermination parameters; Int_tfNumberGondzioCorrectionsactual number of Gondzio corrections needed; Double_tTQpSolverBase::fPhimerit function, defined as the sum of the complementarity gap; Double_t*TQpSolverBase::fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*TQpSolverBase::fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Int_tfPrintlevelparameter in range [0,100] determines verbosity. (Higher value; Double_t*TQpSolverBase::fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpVar*fStep; Double_tfStepFactor0various parameters associated with Gondzio correction; Double_tfStepFactor1; TQpLinSolverBase*TQpSolverBase::fSys; Double_tfTsigexponent in Mehrotra's centering parameter, which is usually. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGondzioSolver(); Default constructor. TGondzioSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); Constructor. TGondzioSolver(const TGondzioSolver& another); Copy constructor. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); Solve the quadratic programming problem as formulated through prob, store; the final solution in iterate->fX . Monitor the residuals during the iterations; through resid . The status is returned as defined in TQpSolverBase::ETerminationCode . void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); Print information about the optimization process and monitor the convergence; status of thye algorithm. ~TGondzioSolver(); Deconstructor. TGondzioSolver & operator=(const TGondzioSolver& source); Assignment operator. void Reset_parameters(); {}. » Author: Eddy Offermann May 2004 » Copyright ",MatchSource.WIKI,root/html604/TGondzioSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGondzioSolver.html
https://root.cern/root/html604/TGondzioSolver.html:8920,Modifiability,Inherit,Inherited,8920,"uble_t*TQpSolverBase::fMu_history[fMaxit] history of values of mu obtained on all iterations to date; Double_tTQpSolverBase::fMutoltermination parameters; Int_tfNumberGondzioCorrectionsactual number of Gondzio corrections needed; Double_tTQpSolverBase::fPhimerit function, defined as the sum of the complementarity gap; Double_t*TQpSolverBase::fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*TQpSolverBase::fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Int_tfPrintlevelparameter in range [0,100] determines verbosity. (Higher value; Double_t*TQpSolverBase::fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpVar*fStep; Double_tfStepFactor0various parameters associated with Gondzio correction; Double_tfStepFactor1; TQpLinSolverBase*TQpSolverBase::fSys; Double_tfTsigexponent in Mehrotra's centering parameter, which is usually. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGondzioSolver(); Default constructor. TGondzioSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); Constructor. TGondzioSolver(const TGondzioSolver& another); Copy constructor. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); Solve the quadratic programming problem as formulated through prob, store; the final solution in iterate->fX . Monitor the residuals during the iterations; through resid . The status is returned as defined in TQpSolverBase::ETerminationCode . void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); Print information about the optimization process and monitor the convergence; status of thye algorithm. ~TGondzioSolver(); Deconstructor. TGondzioSolver & operator=(const TGondzioSolver& source); Assignment operator. void Reset_parameters(); {}. » Author: Eddy Offermann May 2004 » Copyright ",MatchSource.WIKI,root/html604/TGondzioSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGondzioSolver.html
https://root.cern/root/html604/TGondzioSolver.html:9669,Performance,optimiz,optimization,9669,"defined as the sum of the complementarity gap; Double_t*TQpSolverBase::fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*TQpSolverBase::fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Int_tfPrintlevelparameter in range [0,100] determines verbosity. (Higher value; Double_t*TQpSolverBase::fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpVar*fStep; Double_tfStepFactor0various parameters associated with Gondzio correction; Double_tfStepFactor1; TQpLinSolverBase*TQpSolverBase::fSys; Double_tfTsigexponent in Mehrotra's centering parameter, which is usually. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGondzioSolver(); Default constructor. TGondzioSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); Constructor. TGondzioSolver(const TGondzioSolver& another); Copy constructor. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); Solve the quadratic programming problem as formulated through prob, store; the final solution in iterate->fX . Monitor the residuals during the iterations; through resid . The status is returned as defined in TQpSolverBase::ETerminationCode . void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); Print information about the optimization process and monitor the convergence; status of thye algorithm. ~TGondzioSolver(); Deconstructor. TGondzioSolver & operator=(const TGondzioSolver& source); Assignment operator. void Reset_parameters(); {}. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGondzioSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGondzioSolver.html
https://root.cern/root/html604/TGondzioSolver.html:421,Safety,predict,predictor-corrector,421,". TGondzioSolver. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TGondzioSolver. class TGondzioSolver: public TQpSolverBase. TGondzioSolver. Derived class of TQpSolverBase implementing Gondzio-correction; version of Mehrotra's original predictor-corrector algorithm. Function Members (Methods); public:. virtual~TGondzioSolver(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Double_tTQpSolverBase::DataNorm(); virtual voidDefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); virtual voidTQpSolverBase::DefStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual Int_tTQpSolverBase::DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTQpSolverBase::DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual Int_tTQpSolverBase::DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; v",MatchSource.WIKI,root/html604/TGondzioSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGondzioSolver.html
https://root.cern/root/html604/TGondzioSolver.html:3378,Security,Hash,Hash,3378,", TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tTQpSolverBase::FinalStepLength(TQpVar* iterate, TQpVar* step); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTQpSolverBase::GetArTol(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TQpLinSolverBase*TQpSolverBase::GetLinearSystem(); Double_tTQpSolverBase::GetMuTol(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TGondzioSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGondzioSolver.html
https://root.cern/root/html604/TGondzioSolver.html:5967,Testability,Test,TestBit,5967,"TObject::operator new[](size_t sz, void* vp); TGondzioSolver&operator=(const TGondzioSolver& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset_parameters(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTQpSolverBase::SetArTol(Double_t ar); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTQpSolverBase::SetMuTol(Double_t m); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tSolve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); virtual voidTQpSolverBase::Start(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidTQpSolverBase::SteveStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGondzioSolver(); TGondzioSolver(const TGondzioSolver& another); TGondzioSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGondzioSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGondzioSolver.html
https://root.cern/root/html604/TGondzioSolver.html:6006,Testability,Test,TestBits,6006,"TObject::operator new[](size_t sz, void* vp); TGondzioSolver&operator=(const TGondzioSolver& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset_parameters(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTQpSolverBase::SetArTol(Double_t ar); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTQpSolverBase::SetMuTol(Double_t m); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tSolve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); virtual voidTQpSolverBase::Start(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidTQpSolverBase::SteveStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGondzioSolver(); TGondzioSolver(const TGondzioSolver& another); TGondzioSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGondzioSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGondzioSolver.html
https://root.cern/root/html604/TGondzioSolver.html:758,Usability,Clear,Clear,758," virtual~TGondzioSolver(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Double_tTQpSolverBase::DataNorm(); virtual voidDefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); virtual voidTQpSolverBase::DefStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual Int_tTQpSolverBase::DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTQpSolverBase::DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual Int_tTQpSolverBase::DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; v",MatchSource.WIKI,root/html604/TGondzioSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGondzioSolver.html
https://root.cern/root/html604/TGPack.html:4320,Availability,Error,Error,4320,"oidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEqualizeFrames(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html604/TGPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPack.html
https://root.cern/root/html604/TGPack.html:4449,Availability,error,error,4449,"::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEqualizeFrames(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const;",MatchSource.WIKI,root/html604/TGPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPack.html
https://root.cern/root/html604/TGPack.html:4533,Availability,error,error,4533,"ong_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEqualizeFrames(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() c",MatchSource.WIKI,root/html604/TGPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPack.html
https://root.cern/root/html604/TGPack.html:18318,Availability,mask,mask,18318,,MatchSource.WIKI,root/html604/TGPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPack.html
https://root.cern/root/html604/TGPack.html:10519,Integrability,Message,Message,10519,"teFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidLayout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidMapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidMoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; virtual voidTGFrame::ProcessedConfigure(Event_t* event)SIG",MatchSource.WIKI,root/html604/TGPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPack.html
https://root.cern/root/html604/TGPack.html:9138,Modifiability,Inherit,InheritsFrom,9138,"TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); voidHandleSplitterResize(Int_t delta); voidHandleSplitterStart(); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidHideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html604/TGPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPack.html
https://root.cern/root/html604/TGPack.html:9204,Modifiability,Inherit,InheritsFrom,9204,"tual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); voidHandleSplitterResize(Int_t delta); voidHandleSplitterStart(); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidHideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidLayout(); virtual voidTGWindow::LowerWindow(); vi",MatchSource.WIKI,root/html604/TGPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPack.html
https://root.cern/root/html604/TGPack.html:20546,Modifiability,Inherit,Inheritance,20546,"_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPack(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); Constructor. TGPack(TGClient* c, Window_t id, const TGWindow* parent = 0); Constructor. ~TGPack(); Destructor. Int_t GetAvailableLength() const; Return length of entire frame without splitters. void SetFrameLength(TGFrame* f, Int_t len); Set pack-wise length of frame f. void SetFramePosition(TGFrame* f, Int_t pos); Set pack-wise position of frame f. void CheckSplitterVisibility(); Check if splitter of first visible frame is hidden.; Check if the next following visible splitter is visible. void ResizeExistingFrames(); Resize (shrink or expand) existing frames by amount in total. void RefitFramesToPack(); Refit existing frames to pack size. void FindFrames(TGFrame* splitter, TGFrameElementPack*& f0, TGFrameElementPack*& f1) const; Find frames around splitter and return them f0 (previous) and f1 (next). void AddFrameI",MatchSource.WIKI,root/html604/TGPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPack.html
https://root.cern/root/html604/TGPack.html:20559,Modifiability,Inherit,Inherited,20559,"_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPack(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); Constructor. TGPack(TGClient* c, Window_t id, const TGWindow* parent = 0); Constructor. ~TGPack(); Destructor. Int_t GetAvailableLength() const; Return length of entire frame without splitters. void SetFrameLength(TGFrame* f, Int_t len); Set pack-wise length of frame f. void SetFramePosition(TGFrame* f, Int_t pos); Set pack-wise position of frame f. void CheckSplitterVisibility(); Check if splitter of first visible frame is hidden.; Check if the next following visible splitter is visible. void ResizeExistingFrames(); Resize (shrink or expand) existing frames by amount in total. void RefitFramesToPack(); Refit existing frames to pack size. void FindFrames(TGFrame* splitter, TGFrameElementPack*& f0, TGFrameElementPack*& f1) const; Find frames around splitter and return them f0 (previous) and f1 (next). void AddFrameI",MatchSource.WIKI,root/html604/TGPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPack.html
https://root.cern/root/html604/TGPack.html:8866,Security,Hash,Hash,8866,"nt_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); voidHandleSplitterResize(Int_t delta); voidHandleSplitterStart(); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidHideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); ",MatchSource.WIKI,root/html604/TGPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPack.html
https://root.cern/root/html604/TGPack.html:14424,Testability,Test,TestBit,14424,"::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUseSplitters(Bool_t x); voidSetVertical(Bool_t x); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPack(TGClient* c, Window_t id, const TGWindow* parent = 0); TGPack(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPack.html
https://root.cern/root/html604/TGPack.html:14463,Testability,Test,TestBits,14463,"::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUseSplitters(Bool_t x); voidSetVertical(Bool_t x); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPack(TGClient* c, Window_t id, const TGWindow* parent = 0); TGPack(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPack.html
https://root.cern/root/html604/TGPack.html:1596,Usability,Clear,Clear,1596," virtual~TGPack(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidAddFrame(TGFrame* f, TGLayoutHints* l = 0); virtual voidAddFrameWithWeight(TGFrame* f, TGLayoutHints* l, Float_t w); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver",MatchSource.WIKI,root/html604/TGPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPack.html
https://root.cern/root/html604/TGPasswdDialog.html:1366,Modifiability,Inherit,Inheritance,1366,"lass description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPasswdDialog. class TGPasswdDialog. TGPasswdDialog. Graphic dialog to enter passwords. Usage:. {; Buffer for the passwd; char pwdbuf[128]. Open the dialog box; TGPasswdDialog dialog(""My prompt"", pwdbuf, 128);. Wait until the user is done; while (gROOT->IsInterrupted()); gSystem->DispatchOneEvent(kFALSE);. Password is now in pwdbuf. }. Function Members (Methods); public:. virtual~TGPasswdDialog(); static TClass*Class(); voidCloseWindow(); voidDoClose(); virtual TClass*IsA() const; TGPasswdDialog&operator=(const TGPasswdDialog&); voidReturnPressed(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGPasswdDialog(const TGPasswdDialog&); TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400). Data Members; private:. TGTransientFrame*fDialogmain frame of this widget; TGTextButton*fOkOk button; TGTextEntry*fPasswdPassword TextEntry; TGTextBuffer*fPasswdTextPasswd Buffer; char*fPwdBufbuffer where to store the passwd; Int_tfPwdLenMaxpasswd buffer length. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400); Create an editor in a dialog. ~TGPasswdDialog(); Delete log window. void DoClose(); Handle close button. void CloseWindow(); Called when closed via window manager action. void ReturnPressed(); Handle return. TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400). » Author: G. Ganis 10/10/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGPasswdDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPasswdDialog.html
https://root.cern/root/html604/TGPasswdDialog.html:1379,Modifiability,Inherit,Inherited,1379,"lass description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPasswdDialog. class TGPasswdDialog. TGPasswdDialog. Graphic dialog to enter passwords. Usage:. {; Buffer for the passwd; char pwdbuf[128]. Open the dialog box; TGPasswdDialog dialog(""My prompt"", pwdbuf, 128);. Wait until the user is done; while (gROOT->IsInterrupted()); gSystem->DispatchOneEvent(kFALSE);. Password is now in pwdbuf. }. Function Members (Methods); public:. virtual~TGPasswdDialog(); static TClass*Class(); voidCloseWindow(); voidDoClose(); virtual TClass*IsA() const; TGPasswdDialog&operator=(const TGPasswdDialog&); voidReturnPressed(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGPasswdDialog(const TGPasswdDialog&); TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400). Data Members; private:. TGTransientFrame*fDialogmain frame of this widget; TGTextButton*fOkOk button; TGTextEntry*fPasswdPassword TextEntry; TGTextBuffer*fPasswdTextPasswd Buffer; char*fPwdBufbuffer where to store the passwd; Int_tfPwdLenMaxpasswd buffer length. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400); Create an editor in a dialog. ~TGPasswdDialog(); Delete log window. void DoClose(); Handle close button. void CloseWindow(); Called when closed via window manager action. void ReturnPressed(); Handle return. TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400). » Author: G. Ganis 10/10/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGPasswdDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPasswdDialog.html
https://root.cern/root/html604/TGPasswdDialog.html:325,Security,password,passwords,325,". TGPasswdDialog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPasswdDialog. class TGPasswdDialog. TGPasswdDialog. Graphic dialog to enter passwords. Usage:. {; Buffer for the passwd; char pwdbuf[128]. Open the dialog box; TGPasswdDialog dialog(""My prompt"", pwdbuf, 128);. Wait until the user is done; while (gROOT->IsInterrupted()); gSystem->DispatchOneEvent(kFALSE);. Password is now in pwdbuf. }. Function Members (Methods); public:. virtual~TGPasswdDialog(); static TClass*Class(); voidCloseWindow(); voidDoClose(); virtual TClass*IsA() const; TGPasswdDialog&operator=(const TGPasswdDialog&); voidReturnPressed(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGPasswdDialog(const TGPasswdDialog&); TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400). Data Members; private:. TGTransientFrame*fDialogmain frame of this widget; TGTextButton*fOkOk button; TGTextEntry*fPasswdPassword TextEntry; TGTextBuffer*fPasswdTextPasswd Buffer; char*fPwdBufbuffer where to store the passwd; Int_tfPwdLenMaxpasswd buffer length. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400); Create an editor in a dialog. ~TGPasswdDialog(); Delete log window. void DoClose(); Handle close button. void CloseWindow(); Called when closed via window manager action. void ReturnPressed(); Handle return. TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400). » Author: G. Ganis 10/10/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15",MatchSource.WIKI,root/html604/TGPasswdDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPasswdDialog.html
https://root.cern/root/html604/TGPasswdDialog.html:556,Security,Password,Password,556,". TGPasswdDialog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPasswdDialog. class TGPasswdDialog. TGPasswdDialog. Graphic dialog to enter passwords. Usage:. {; Buffer for the passwd; char pwdbuf[128]. Open the dialog box; TGPasswdDialog dialog(""My prompt"", pwdbuf, 128);. Wait until the user is done; while (gROOT->IsInterrupted()); gSystem->DispatchOneEvent(kFALSE);. Password is now in pwdbuf. }. Function Members (Methods); public:. virtual~TGPasswdDialog(); static TClass*Class(); voidCloseWindow(); voidDoClose(); virtual TClass*IsA() const; TGPasswdDialog&operator=(const TGPasswdDialog&); voidReturnPressed(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGPasswdDialog(const TGPasswdDialog&); TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400). Data Members; private:. TGTransientFrame*fDialogmain frame of this widget; TGTextButton*fOkOk button; TGTextEntry*fPasswdPassword TextEntry; TGTextBuffer*fPasswdTextPasswd Buffer; char*fPwdBufbuffer where to store the passwd; Int_tfPwdLenMaxpasswd buffer length. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400); Create an editor in a dialog. ~TGPasswdDialog(); Delete log window. void DoClose(); Handle close button. void CloseWindow(); Called when closed via window manager action. void ReturnPressed(); Handle return. TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400). » Author: G. Ganis 10/10/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15",MatchSource.WIKI,root/html604/TGPasswdDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPasswdDialog.html
https://root.cern/root/html604/TGPasswdDialog.html:1598,Testability,log,log,1598,"lass description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPasswdDialog. class TGPasswdDialog. TGPasswdDialog. Graphic dialog to enter passwords. Usage:. {; Buffer for the passwd; char pwdbuf[128]. Open the dialog box; TGPasswdDialog dialog(""My prompt"", pwdbuf, 128);. Wait until the user is done; while (gROOT->IsInterrupted()); gSystem->DispatchOneEvent(kFALSE);. Password is now in pwdbuf. }. Function Members (Methods); public:. virtual~TGPasswdDialog(); static TClass*Class(); voidCloseWindow(); voidDoClose(); virtual TClass*IsA() const; TGPasswdDialog&operator=(const TGPasswdDialog&); voidReturnPressed(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGPasswdDialog(const TGPasswdDialog&); TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400). Data Members; private:. TGTransientFrame*fDialogmain frame of this widget; TGTextButton*fOkOk button; TGTextEntry*fPasswdPassword TextEntry; TGTextBuffer*fPasswdTextPasswd Buffer; char*fPwdBufbuffer where to store the passwd; Int_tfPwdLenMaxpasswd buffer length. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400); Create an editor in a dialog. ~TGPasswdDialog(); Delete log window. void DoClose(); Handle close button. void CloseWindow(); Called when closed via window manager action. void ReturnPressed(); Handle return. TGPasswdDialog(const char* prompt, char* pwdbuf, Int_t pwdlenmax, UInt_t w = 400, UInt_t h = 400). » Author: G. Ganis 10/10/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGPasswdDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPasswdDialog.html
https://root.cern/root/html604/TGPicture.html:1442,Availability,Error,Error,1442," virtual~TGPicture(); voidTObject::AbstractMethod(const char* method) const; voidTRefCnt::AddReference(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:1571,Availability,error,error,1571," virtual~TGPicture(); voidTObject::AbstractMethod(const char* method) const; voidTRefCnt::AddReference(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:1655,Availability,error,error,1655,"const; voidTRefCnt::AddReference(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); UInt_tGetHeight() const; virtual const char*TObject::GetIconName() const; Pixmap_tGetMask() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixmap_tGetPicture() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; UInt_tGetWidth() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; static const char*HashName(const char* name, Int_t width, Int_t height); virtual voidTObject::Info(const char* method, const char* msgf",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:5487,Availability,mask,mask,5487,"t::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTRefCnt::SetRefCount(UInt_t r); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPicture(const TGPicture&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDraw(Option_t* = """"); voidTObject::MakeZombie(); TGPicture(const char* name, Bool_t scaled = kFALSE); TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tfAttributespicture attri",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:6387,Availability,mask,mask,6387,"TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tfAttributespicture attributes; Pixmap_tfMaskpicture mask pixmap; TStringfNamename of picture; Pixmap_tfPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tfScaledkTRUE if picture is scaled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); ctor. Important: both pixmaps pxmap and mask must be unique (not shared). void Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; Draw a picture. ~TGPicture(); Delete picture object. const char * HashName(const char* name, Int_t width, Int_t height); Static function returning a unique name used to look up a picture.; The unique name has the form ""name__widthxheight"". void Print(Option_t* option = """") const; Print picture info. TGPicture(const char* name, Bool_t scaled = kFALSE). TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). void Draw(Option_t* = """"); override default of TObject. { MayNotUse(""Draw(Option_t*)""); }. const char * GetName() const; { return fName; }. UInt_t GetWidth() const; { ret",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:6698,Availability,mask,mask,6698,"tic TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tfAttributespicture attributes; Pixmap_tfMaskpicture mask pixmap; TStringfNamename of picture; Pixmap_tfPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tfScaledkTRUE if picture is scaled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); ctor. Important: both pixmaps pxmap and mask must be unique (not shared). void Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; Draw a picture. ~TGPicture(); Delete picture object. const char * HashName(const char* name, Int_t width, Int_t height); Static function returning a unique name used to look up a picture.; The unique name has the form ""name__widthxheight"". void Print(Option_t* option = """") const; Print picture info. TGPicture(const char* name, Bool_t scaled = kFALSE). TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). void Draw(Option_t* = """"); override default of TObject. { MayNotUse(""Draw(Option_t*)""); }. const char * GetName() const; { return fName; }. UInt_t GetWidth() const; { return fAttributes.fWidth; }. UInt_t GetHeight() const; { return fAttributes.fHeight; }. Pixmap_t GetPicture() const; { return fPic; }. Pixmap_t GetMask() const; { return fMask; }. Bool_t IsScaled() const; { return fScaled; }. ULong_t H",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:6749,Availability,mask,mask,6749,"nvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tfAttributespicture attributes; Pixmap_tfMaskpicture mask pixmap; TStringfNamename of picture; Pixmap_tfPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tfScaledkTRUE if picture is scaled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); ctor. Important: both pixmaps pxmap and mask must be unique (not shared). void Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; Draw a picture. ~TGPicture(); Delete picture object. const char * HashName(const char* name, Int_t width, Int_t height); Static function returning a unique name used to look up a picture.; The unique name has the form ""name__widthxheight"". void Print(Option_t* option = """") const; Print picture info. TGPicture(const char* name, Bool_t scaled = kFALSE). TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). void Draw(Option_t* = """"); override default of TObject. { MayNotUse(""Draw(Option_t*)""); }. const char * GetName() const; { return fName; }. UInt_t GetWidth() const; { return fAttributes.fWidth; }. UInt_t GetHeight() const; { return fAttributes.fHeight; }. Pixmap_t GetPicture() const; { return fPic; }. Pixmap_t GetMask() const; { return fMask; }. Bool_t IsScaled() const; { return fScaled; }. ULong_t Hash() const; { return fName.Hash(); }. TGSelectedPicture& operator=(const TGPictu",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:7253,Availability,mask,mask,7253,"ect::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tfAttributespicture attributes; Pixmap_tfMaskpicture mask pixmap; TStringfNamename of picture; Pixmap_tfPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tfScaledkTRUE if picture is scaled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); ctor. Important: both pixmaps pxmap and mask must be unique (not shared). void Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; Draw a picture. ~TGPicture(); Delete picture object. const char * HashName(const char* name, Int_t width, Int_t height); Static function returning a unique name used to look up a picture.; The unique name has the form ""name__widthxheight"". void Print(Option_t* option = """") const; Print picture info. TGPicture(const char* name, Bool_t scaled = kFALSE). TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). void Draw(Option_t* = """"); override default of TObject. { MayNotUse(""Draw(Option_t*)""); }. const char * GetName() const; { return fName; }. UInt_t GetWidth() const; { return fAttributes.fWidth; }. UInt_t GetHeight() const; { return fAttributes.fHeight; }. Pixmap_t GetPicture() const; { return fPic; }. Pixmap_t GetMask() const; { return fMask; }. Bool_t IsScaled() const; { return fScaled; }. ULong_t Hash() const; { return fName.Hash(); }. TGSelectedPicture& operator=(const TGPicture& ). » Author: Fons Rademakers 01/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:2692,Modifiability,Inherit,InheritsFrom,2692,"nt(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); UInt_tGetHeight() const; virtual const char*TObject::GetIconName() const; Pixmap_tGetMask() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixmap_tGetPicture() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; UInt_tGetWidth() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; static const char*HashName(const char* name, Int_t width, Int_t height); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsScaled() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:2758,Modifiability,Inherit,InheritsFrom,2758,"nst char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); UInt_tGetHeight() const; virtual const char*TObject::GetIconName() const; Pixmap_tGetMask() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixmap_tGetPicture() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; UInt_tGetWidth() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; static const char*HashName(const char* name, Int_t width, Int_t height); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsScaled() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGPicture&operator=(const T",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:6568,Modifiability,Inherit,Inheritance,6568,"sTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tfAttributespicture attributes; Pixmap_tfMaskpicture mask pixmap; TStringfNamename of picture; Pixmap_tfPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tfScaledkTRUE if picture is scaled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); ctor. Important: both pixmaps pxmap and mask must be unique (not shared). void Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; Draw a picture. ~TGPicture(); Delete picture object. const char * HashName(const char* name, Int_t width, Int_t height); Static function returning a unique name used to look up a picture.; The unique name has the form ""name__widthxheight"". void Print(Option_t* option = """") const; Print picture info. TGPicture(const char* name, Bool_t scaled = kFALSE). TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). void Draw(Option_t* = """"); override default of TObject. { MayNotUse(""Draw(Option_t*)""); }. const char * GetName() const; { return fName; }. UInt_t GetWidth() const; { return fAttributes.fWidth; }. UInt_t GetHeight() const; { return fAttributes.fHeight; }. Pixmap_t GetPicture() const; { return fPic; }. Pixmap_t GetMask() const; {",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:6581,Modifiability,Inherit,Inherited,6581,"sTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tfAttributespicture attributes; Pixmap_tfMaskpicture mask pixmap; TStringfNamename of picture; Pixmap_tfPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tfScaledkTRUE if picture is scaled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); ctor. Important: both pixmaps pxmap and mask must be unique (not shared). void Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; Draw a picture. ~TGPicture(); Delete picture object. const char * HashName(const char* name, Int_t width, Int_t height); Static function returning a unique name used to look up a picture.; The unique name has the form ""name__widthxheight"". void Print(Option_t* option = """") const; Print picture info. TGPicture(const char* name, Bool_t scaled = kFALSE). TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). void Draw(Option_t* = """"); override default of TObject. { MayNotUse(""Draw(Option_t*)""); }. const char * GetName() const; { return fName; }. UInt_t GetWidth() const; { return fAttributes.fWidth; }. UInt_t GetHeight() const; { return fAttributes.fHeight; }. Pixmap_t GetPicture() const; { return fPic; }. Pixmap_t GetMask() const; {",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:476,Performance,cache,cache,476,". TGPicture. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPicture. class TGPicture: public TObject, public TRefCnt. TGPicture & TGPicturePool. The TGPicture class implements pictures and icons used in the; different GUI elements and widgets. The TGPicturePool class; implements a TGPicture cache. TGPictures are created, managed and; destroyed by the TGPicturePool. Function Members (Methods); public:. virtual~TGPicture(); voidTObject::AbstractMethod(const char* method) const; voidTRefCnt::AddReference(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:2541,Security,Hash,HashName,2541,"onst char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); UInt_tGetHeight() const; virtual const char*TObject::GetIconName() const; Pixmap_tGetMask() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixmap_tGetPicture() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; UInt_tGetWidth() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; static const char*HashName(const char* name, Int_t width, Int_t height); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsScaled() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr,",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:6912,Security,Hash,HashName,6912,"tic TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tfAttributespicture attributes; Pixmap_tfMaskpicture mask pixmap; TStringfNamename of picture; Pixmap_tfPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tfScaledkTRUE if picture is scaled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); ctor. Important: both pixmaps pxmap and mask must be unique (not shared). void Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; Draw a picture. ~TGPicture(); Delete picture object. const char * HashName(const char* name, Int_t width, Int_t height); Static function returning a unique name used to look up a picture.; The unique name has the form ""name__widthxheight"". void Print(Option_t* option = """") const; Print picture info. TGPicture(const char* name, Bool_t scaled = kFALSE). TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). void Draw(Option_t* = """"); override default of TObject. { MayNotUse(""Draw(Option_t*)""); }. const char * GetName() const; { return fName; }. UInt_t GetWidth() const; { return fAttributes.fWidth; }. UInt_t GetHeight() const; { return fAttributes.fHeight; }. Pixmap_t GetPicture() const; { return fPic; }. Pixmap_t GetMask() const; { return fMask; }. Bool_t IsScaled() const; { return fScaled; }. ULong_t Hash() const; { return fName.Hash(); }. TGSelectedPicture& operator=(const TGPicture& ). » Author: Fons Rademakers 01/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For c",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:7666,Security,Hash,Hash,7666,"ect::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tfAttributespicture attributes; Pixmap_tfMaskpicture mask pixmap; TStringfNamename of picture; Pixmap_tfPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tfScaledkTRUE if picture is scaled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); ctor. Important: both pixmaps pxmap and mask must be unique (not shared). void Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; Draw a picture. ~TGPicture(); Delete picture object. const char * HashName(const char* name, Int_t width, Int_t height); Static function returning a unique name used to look up a picture.; The unique name has the form ""name__widthxheight"". void Print(Option_t* option = """") const; Print picture info. TGPicture(const char* name, Bool_t scaled = kFALSE). TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). void Draw(Option_t* = """"); override default of TObject. { MayNotUse(""Draw(Option_t*)""); }. const char * GetName() const; { return fName; }. UInt_t GetWidth() const; { return fAttributes.fWidth; }. UInt_t GetHeight() const; { return fAttributes.fHeight; }. Pixmap_t GetPicture() const; { return fPic; }. Pixmap_t GetMask() const; { return fMask; }. Bool_t IsScaled() const; { return fScaled; }. ULong_t Hash() const; { return fName.Hash(); }. TGSelectedPicture& operator=(const TGPicture& ). » Author: Fons Rademakers 01/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:7695,Security,Hash,Hash,7695,"ect::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tfAttributespicture attributes; Pixmap_tfMaskpicture mask pixmap; TStringfNamename of picture; Pixmap_tfPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tfScaledkTRUE if picture is scaled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); ctor. Important: both pixmaps pxmap and mask must be unique (not shared). void Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; Draw a picture. ~TGPicture(); Delete picture object. const char * HashName(const char* name, Int_t width, Int_t height); Static function returning a unique name used to look up a picture.; The unique name has the form ""name__widthxheight"". void Print(Option_t* option = """") const; Print picture info. TGPicture(const char* name, Bool_t scaled = kFALSE). TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). void Draw(Option_t* = """"); override default of TObject. { MayNotUse(""Draw(Option_t*)""); }. const char * GetName() const; { return fName; }. UInt_t GetWidth() const; { return fAttributes.fWidth; }. UInt_t GetHeight() const; { return fAttributes.fHeight; }. Pixmap_t GetPicture() const; { return fPic; }. Pixmap_t GetMask() const; { return fMask; }. Bool_t IsScaled() const; { return fScaled; }. ULong_t Hash() const; { return fName.Hash(); }. TGSelectedPicture& operator=(const TGPicture& ). » Author: Fons Rademakers 01/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:4818,Testability,Test,TestBit,4818,"e(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGPicture&operator=(const TGPicture&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); UInt_tTRefCnt::References() const; UInt_tTRefCnt::RemoveReference(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTRefCnt::SetRefCount(UInt_t r); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPicture(const TGPicture&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:4857,Testability,Test,TestBits,4857,"e(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGPicture&operator=(const TGPicture&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); UInt_tTRefCnt::References() const; UInt_tTRefCnt::RemoveReference(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTRefCnt::SetRefCount(UInt_t r); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPicture(const TGPicture&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPicture.html:882,Usability,Clear,Clear,882," virtual~TGPicture(); voidTObject::AbstractMethod(const char* method) const; voidTRefCnt::AddReference(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html604/TGPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicture.html
https://root.cern/root/html604/TGPictureButton.html:2210,Availability,avail,available,2210,"_BUTTON, button id, user data. The purpose of TGCheckButton and TGRadioButton is for selecting; different options. Like text buttons, they have text or hot string; as a label. Radio buttons are grouped usually in logical sets of two or more; buttons to present mutually exclusive choices. Selecting a check button will generate the event:; kC_COMMAND, kCM_CHECKBUTTON, button id, user data. Selecting a radio button will generate the event:; kC_COMMAND, kCM_RADIOBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this; command string will be executed via the interpreter whenever a; button is selected. A command string can contain the macros:; $MSG -- kC_COMMAND, kCM[CHECK|RADIO]BUTTON packed message; (use GET_MSG() and GET_SUBMSG() to unpack); $PARM1 -- button id; $PARM2 -- user data pointer; Before executing these macros are expanded into the respective; Long_t's. TGSplitButton implements a button with added menu functionality.; There are 2 modes of operation available. If the button is split, a menu will popup when the menu area of the; button is clicked. Activating a menu item changes the functionality; of the button by having it emit a additional signal when it is; clicked. The signal emitted when the button is clicked, is the; ItemClicked(Int_t) signal with a different fixed value for the; Int_t that corresponds to the id of the activated menu entry. If the button is not split, clicking it will popup the menu and the; ItemClicked(Int_t) signal will be emitted when a menu entry is; acitvated. The value of the Int_t is again equal to the value of; the id of the activated menu entry. The mode of operation of a SplitButton can be changed on the fly; by calling the SetSplit(Bool_t) method. Function Members (Methods); public:. virtual~TGPictureButton(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTGButton::AllowStayDown(Bool_t a); vir",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:6495,Availability,Error,Error,6495,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); static const TGGC&TGButton::GetDefaultGC(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBac",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:6624,Availability,error,error,6624," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); static const TGGC&TGButton::GetDefaultGC(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; const TGPicture*Ge",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:6708,Availability,error,error,6708,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); static const TGGC&TGButton::GetDefaultGC(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; const TGPicture*GetDisabledPicture() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:21066,Availability,mask,mask,21066,,MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:22336,Availability,down,down,22336,fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; GContext_tTGButton::fNormGCgraphics context used for drawing button; UInt_tTGFrame::fOptionsframe options; Bool_tfOwnDisabledPickTRUE if disabled picture was autogenerated; const TGWindow*TGWindow::fParentParent window; const TGPicture*fPicpicture to be put in button; const TGPicture*fPicDpicture shown when button disabled; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStateTGButton::fStatebutton state; Bool_tTGButton::fStayDowntrue if button has to stay down; UInt_tTGButton::fStylebutton style (modern or classic); UInt_tTGButton::fTHeightbutton height; UInt_tTGButton::fTWidthbutton width; TGToolTip*TGButton::fTiptool tip associated with button; void*TGButton::fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static con,MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:13985,Deployability,Release,Released,13985,"har* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGButton::Pressed()SIGNAL ; virtual voidTGFrame::Print(Option_t* option = """") const; virtual voidTGFrame::ProcessedConfigure(Event_t* event)SIGNAL ; virtual voidTGFrame::ProcessedEvent(Event_t* event)SIGNAL ; virtual Bool_tTGFrame::ProcessMessage(Long_t, Long_t, Long_t); virtual voidTGWindow::RaiseWindow(); virtual Int_tTObject::Read(const char* name); virtual voidTGFrame::ReallyDelete(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTGButton::Released()SIGNAL ; voidTGFrame::RemoveInput(UInt_t emask); virtual voidTGFrame::ReparentWindow(const TGWindow* p, Int_t x = 0, Int_t y = 0); virtual voidTGWindow::RequestFocus(); voidTObject::ResetBit(UInt_t f); virtual voidTGFrame::Resize(TGDimension size); virtual voidTGFrame::Resize(UInt_t w = 0, UInt_t h = 0); virtual voidTGObject::SaveAs(const char* filename = """", Option_t* option = """") const; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTGFrame::SaveUserColor(ostream& out, Option_t*); virtual voidTGFrame::SendMessage(const TGWindow* w, Long_t msg, Long_t parm1, Long_t parm2); virtual voidTGFrame::SetBackgroundColor(Pixel_t back); virtual voidTGWindow::SetBackgroundPixmap(Pixmap_t pixmap); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGFrame::SetCleanup(Int_t = kLocalCleanup); virtual voidTGWidget::SetCommand(const char* command); virtual voidSetDisabledPicture(const TGPicture* pic); voidTGFrame::SetDNDSource(Bool_t onoff)",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:15450,Deployability,TOGGLE,TOGGLE,15450,"idTGFrame::SaveUserColor(ostream& out, Option_t*); virtual voidTGFrame::SendMessage(const TGWindow* w, Long_t msg, Long_t parm1, Long_t parm2); virtual voidTGFrame::SetBackgroundColor(Pixel_t back); virtual voidTGWindow::SetBackgroundPixmap(Pixmap_t pixmap); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGFrame::SetCleanup(Int_t = kLocalCleanup); virtual voidTGWidget::SetCommand(const char* command); virtual voidSetDisabledPicture(const TGPicture* pic); voidTGFrame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGButton::SetDown(Bool_t on = kTRUE, Bool_t emit = kFALSE); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGButton::SetEnabled(Bool_t e = kTRUE)TOGGLE GETTER ; virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGButton::SetGroup(TGButtonGroup* gr); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGButton::SetOn(Bool_t on = kTRUE, Bool_t emit = kFALSE); virtual voidSetPicture(const TGPicture* new_pic); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTGButton::SetState(EButtonState state, Bool_t emit = kFALSE); virtual voidTGButton::SetStyle(UInt_t newstyle); virtual voidTGButton::SetStyle(const char* style); virtual voidTGButton::SetToolTipText(const char* text, Long_t delayms = ",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:17545,Deployability,Toggle,Toggle,17545,"ol_t stat); virtual voidTGButton::SetOn(Bool_t on = kTRUE, Bool_t emit = kFALSE); virtual voidSetPicture(const TGPicture* new_pic); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTGButton::SetState(EButtonState state, Bool_t emit = kFALSE); virtual voidTGButton::SetStyle(UInt_t newstyle); virtual voidTGButton::SetStyle(const char* style); virtual voidTGButton::SetToolTipText(const char* text, Long_t delayms = 400)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGButton::SetUserData(void* userData); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPictureButton(const TGWindow* p, const TGPicture* pic, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); TGPictureButton(const TGWindow* p = 0, const char* pic = 0, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); TGPictureButton(const TGWindow* p, const TGPicture* pic, const char* cmd, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); virtual voidTGButton::Toggle(Bool_t emit = kFALSE); virtual voidTGButton::Toggled(Bool_t on)SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:17597,Deployability,Toggle,Toggled,17597,"ol_t stat); virtual voidTGButton::SetOn(Bool_t on = kTRUE, Bool_t emit = kFALSE); virtual voidSetPicture(const TGPicture* new_pic); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTGButton::SetState(EButtonState state, Bool_t emit = kFALSE); virtual voidTGButton::SetStyle(UInt_t newstyle); virtual voidTGButton::SetStyle(const char* style); virtual voidTGButton::SetToolTipText(const char* text, Long_t delayms = 400)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGButton::SetUserData(void* userData); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPictureButton(const TGWindow* p, const TGPicture* pic, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); TGPictureButton(const TGWindow* p = 0, const char* pic = 0, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); TGPictureButton(const TGWindow* p, const TGPicture* pic, const char* cmd, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); virtual voidTGButton::Toggle(Bool_t emit = kFALSE); virtual voidTGButton::Toggled(Bool_t on)SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:23558,Deployability,release,released,23558,; Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; GContext_tTGButton::fNormGCgraphics context used for drawing button; UInt_tTGFrame::fOptionsframe options; Bool_tfOwnDisabledPickTRUE if disabled picture was autogenerated; const TGWindow*TGWindow::fParentParent window; const TGPicture*fPicpicture to be put in button; const TGPicture*fPicDpicture shown when button disabled; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStateTGButton::fStatebutton state; Bool_tTGButton::fStayDowntrue if button has to stay down; UInt_tTGButton::fStylebutton style (modern or classic); UInt_tTGButton::fTHeightbutton height; UInt_tTGButton::fTWidthbutton width; TGToolTip*TGButton::fTiptool tip associated with button; void*TGButton::fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled.,MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:1936,Integrability,message,message,1936,"""&Exit"") that; defines the label ""Exit"" and keyboard mnemonics Alt+E for button; selection. A button label can be changed by SetText(new_label). Selecting a text or picture button will generate the event:; kC_COMMAND, kCM_BUTTON, button id, user data. The purpose of TGCheckButton and TGRadioButton is for selecting; different options. Like text buttons, they have text or hot string; as a label. Radio buttons are grouped usually in logical sets of two or more; buttons to present mutually exclusive choices. Selecting a check button will generate the event:; kC_COMMAND, kCM_CHECKBUTTON, button id, user data. Selecting a radio button will generate the event:; kC_COMMAND, kCM_RADIOBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this; command string will be executed via the interpreter whenever a; button is selected. A command string can contain the macros:; $MSG -- kC_COMMAND, kCM[CHECK|RADIO]BUTTON packed message; (use GET_MSG() and GET_SUBMSG() to unpack); $PARM1 -- button id; $PARM2 -- user data pointer; Before executing these macros are expanded into the respective; Long_t's. TGSplitButton implements a button with added menu functionality.; There are 2 modes of operation available. If the button is split, a menu will popup when the menu area of the; button is clicked. Activating a menu item changes the functionality; of the button by having it emit a additional signal when it is; clicked. The signal emitted when the button is clicked, is the; ItemClicked(Int_t) signal with a different fixed value for the; Int_t that corresponds to the id of the activated menu entry. If the button is not split, clicking it will popup the menu and the; ItemClicked(Int_t) signal will be emitted when a menu entry is; acitvated. The value of the Int_t is again equal to the value of; the id of the activated menu entry. The mode of operation of a SplitButton can be changed on the fly; by calling the SetSplit(Bool_t) method. Function Members (Method",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:12626,Integrability,Message,Message,12626,"get() const; virtual Bool_tTGButton::IsDown() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTGButton::IsExclusiveToggle() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; virtual Bool_tTGButton::IsOn() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTGButton::IsToggleButton() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGWindow::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGButton::Pressed()SIGNAL ; virtual voidTGFrame::Print(Option_t* option = """") const; virtual voidTGFrame::Proce",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:11282,Modifiability,Inherit,InheritsFrom,11282,"r(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGButton::IsDown() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTGButton::IsExclusiveToggle() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; virtual Bool_tTGButton::IsOn() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTGButton::IsToggleButton() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindo",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:11348,Modifiability,Inherit,InheritsFrom,11348,"tual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGButton::IsDown() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTGButton::IsExclusiveToggle() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; virtual Bool_tTGButton::IsOn() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTGButton::IsToggleButton() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* si",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:23795,Modifiability,Inherit,Inheritance,23795,"tion; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPictureButton(const TGWindow* p, const TGPicture* pic, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); Create a picture button widget. The picture is not adopted and must; later be freed by the user once the picture button is deleted (a single; picture reference might be used by other buttons). TGPictureButton(const TGWindow* p, const TGPicture* pic, const char* cmd, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); Create a picture button widget and set action command. The picture is; not adopted and must later be freed by the user once the picture button; is deleted (a single picture reference might be used by other; buttons). TGPictureButton(const TGWindow* p = 0, const char* pic = 0, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); Create a picture button. Where pic is the file name of",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:23808,Modifiability,Inherit,Inherited,23808,"tion; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPictureButton(const TGWindow* p, const TGPicture* pic, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); Create a picture button widget. The picture is not adopted and must; later be freed by the user once the picture button is deleted (a single; picture reference might be used by other buttons). TGPictureButton(const TGWindow* p, const TGPicture* pic, const char* cmd, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); Create a picture button widget and set action command. The picture is; not adopted and must later be freed by the user once the picture button; is deleted (a single picture reference might be used by other; buttons). TGPictureButton(const TGWindow* p = 0, const char* pic = 0, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); Create a picture button. Where pic is the file name of",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:743,Performance,perform,perform,743,". TGPictureButton. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPictureButton. class TGPictureButton: public TGButton. TGButton, TGTextButton, TGPictureButton, TGCheckButton,; TGRadioButton and TGSplitButton. This header defines all GUI button widgets. TGButton is a button abstract base class. It defines general button; behaviour. TGTextButton and TGPictureButton yield an action as soon as they are; clicked. These buttons usually provide fast access to frequently; used or critical commands. They may appear alone or placed in a; group. The action they perform can be inscribed with a meaningful tooltip; set by SetToolTipText(const char* text, Long_t delayms=400). The text button has a label indicating the action to be taken when; the button is pressed. The text can be a hot string (""&Exit"") that; defines the label ""Exit"" and keyboard mnemonics Alt+E for button; selection. A button label can be changed by SetText(new_label). Selecting a text or picture button will generate the event:; kC_COMMAND, kCM_BUTTON, button id, user data. The purpose of TGCheckButton and TGRadioButton is for selecting; different options. Like text buttons, they have text or hot string; as a label. Radio buttons are grouped usually in logical sets of two or more; buttons to present mutually exclusive choices. Selecting a check button will generate the event:; kC_COMMAND, kCM_CHECKBUTTON, button id, user data. Selecting a radio button will generate the event:; kC_COMMAND, kCM_RADIOBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this; command string will be executed via the interpreter whenever a; button is selected. A command string can contain the macros:; $MSG -- kC_COMMAND, kCM[CHECK|RADIO]BUTTON packed message; (use GET_MSG() and GET_SUBMSG() to unpack); $PARM1 -- bu",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:633,Security,access,access,633,". TGPictureButton. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPictureButton. class TGPictureButton: public TGButton. TGButton, TGTextButton, TGPictureButton, TGCheckButton,; TGRadioButton and TGSplitButton. This header defines all GUI button widgets. TGButton is a button abstract base class. It defines general button; behaviour. TGTextButton and TGPictureButton yield an action as soon as they are; clicked. These buttons usually provide fast access to frequently; used or critical commands. They may appear alone or placed in a; group. The action they perform can be inscribed with a meaningful tooltip; set by SetToolTipText(const char* text, Long_t delayms=400). The text button has a label indicating the action to be taken when; the button is pressed. The text can be a hot string (""&Exit"") that; defines the label ""Exit"" and keyboard mnemonics Alt+E for button; selection. A button label can be changed by SetText(new_label). Selecting a text or picture button will generate the event:; kC_COMMAND, kCM_BUTTON, button id, user data. The purpose of TGCheckButton and TGRadioButton is for selecting; different options. Like text buttons, they have text or hot string; as a label. Radio buttons are grouped usually in logical sets of two or more; buttons to present mutually exclusive choices. Selecting a check button will generate the event:; kC_COMMAND, kCM_CHECKBUTTON, button id, user data. Selecting a radio button will generate the event:; kC_COMMAND, kCM_RADIOBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this; command string will be executed via the interpreter whenever a; button is selected. A command string can contain the macros:; $MSG -- kC_COMMAND, kCM[CHECK|RADIO]BUTTON packed message; (use GET_MSG() and GET_SUBMSG() to unpack); $PARM1 -- bu",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:11045,Security,Hash,Hash,11045,"al Atom_tTGFrame::HandleDNDPosition(Int_t, Int_t, Atom_t, Int_t, Int_t); virtual Bool_tTGFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGFrame::HandleDragDrop(TGFrame*, Int_t, Int_t, TGLayoutHints*); virtual Bool_tTGFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGButton::IsDown() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTGButton::IsExclusiveToggle() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; virt",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:1411,Testability,log,logical,1411," widgets. TGButton is a button abstract base class. It defines general button; behaviour. TGTextButton and TGPictureButton yield an action as soon as they are; clicked. These buttons usually provide fast access to frequently; used or critical commands. They may appear alone or placed in a; group. The action they perform can be inscribed with a meaningful tooltip; set by SetToolTipText(const char* text, Long_t delayms=400). The text button has a label indicating the action to be taken when; the button is pressed. The text can be a hot string (""&Exit"") that; defines the label ""Exit"" and keyboard mnemonics Alt+E for button; selection. A button label can be changed by SetText(new_label). Selecting a text or picture button will generate the event:; kC_COMMAND, kCM_BUTTON, button id, user data. The purpose of TGCheckButton and TGRadioButton is for selecting; different options. Like text buttons, they have text or hot string; as a label. Radio buttons are grouped usually in logical sets of two or more; buttons to present mutually exclusive choices. Selecting a check button will generate the event:; kC_COMMAND, kCM_CHECKBUTTON, button id, user data. Selecting a radio button will generate the event:; kC_COMMAND, kCM_RADIOBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this; command string will be executed via the interpreter whenever a; button is selected. A command string can contain the macros:; $MSG -- kC_COMMAND, kCM[CHECK|RADIO]BUTTON packed message; (use GET_MSG() and GET_SUBMSG() to unpack); $PARM1 -- button id; $PARM2 -- user data pointer; Before executing these macros are expanded into the respective; Long_t's. TGSplitButton implements a button with added menu functionality.; There are 2 modes of operation available. If the button is split, a menu will popup when the menu area of the; button is clicked. Activating a menu item changes the functionality; of the button by having it emit a additional signal when it is; clicked",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:16973,Testability,Test,TestBit,16973,"ar* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGButton::SetOn(Bool_t on = kTRUE, Bool_t emit = kFALSE); virtual voidSetPicture(const TGPicture* new_pic); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTGButton::SetState(EButtonState state, Bool_t emit = kFALSE); virtual voidTGButton::SetStyle(UInt_t newstyle); virtual voidTGButton::SetStyle(const char* style); virtual voidTGButton::SetToolTipText(const char* text, Long_t delayms = 400)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGButton::SetUserData(void* userData); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPictureButton(const TGWindow* p, const TGPicture* pic, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); TGPictureButton(const TGWindow* p = 0, const char* pic = 0, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); TGPictureButton(const TGWindow* p, const TGPicture* pic, const char* cmd, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); virtual voidTGButton::Toggle(Bool_t emit = kFALSE); virtual voidTGButton::Toggled(Bool_t on)SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name ",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:17012,Testability,Test,TestBits,17012,"tStat(Bool_t stat); virtual voidTGButton::SetOn(Bool_t on = kTRUE, Bool_t emit = kFALSE); virtual voidSetPicture(const TGPicture* new_pic); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTGButton::SetState(EButtonState state, Bool_t emit = kFALSE); virtual voidTGButton::SetStyle(UInt_t newstyle); virtual voidTGButton::SetStyle(const char* style); virtual voidTGButton::SetToolTipText(const char* text, Long_t delayms = 400)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGButton::SetUserData(void* userData); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPictureButton(const TGWindow* p, const TGPicture* pic, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); TGPictureButton(const TGWindow* p = 0, const char* pic = 0, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); TGPictureButton(const TGWindow* p, const TGPicture* pic, const char* cmd, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame | kDoubleBorder); virtual voidTGButton::Toggle(Bool_t emit = kFALSE); virtual voidTGButton::Toggled(Bool_t on)SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:3781,Usability,Clear,Clear,3781,,MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPictureButton.html:18195,Usability,Clear,ClearFlags,18195,"UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidCreateDisabledPicture(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGButton::EmitSignals(Bool_t wasUp); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGPictureButton&operator=(const TGPictureButton&); TGPictureButton(const TGPictureButton&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindo",MatchSource.WIKI,root/html604/TGPictureButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPictureButton.html
https://root.cern/root/html604/TGPicturePool.html:1393,Availability,Error,Error,1393," virtual~TGPicturePool(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFreePicture(const TGPicture* pic); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtor",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:1522,Availability,error,error,1522," virtual~TGPicturePool(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFreePicture(const TGPicture* pic); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtor",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:1606,Availability,error,error,1606," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFreePicture(const TGPicture* pic); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetPath() const; const TGPicture*GetPicture(const char* name); const TGPicture*GetPicture(const char* name, char** xpm); const TGPicture*GetPicture(const char* name, UInt_t new_width, UInt_t new_height); const TGPicture*GetPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); virtual const char*TObject::GetTitle() const; virtual UInt_tTOb",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:2535,Availability,mask,mask,2535,"tual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFreePicture(const TGPicture* pic); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetPath() const; const TGPicture*GetPicture(const char* name); const TGPicture*GetPicture(const char* name, char** xpm); const TGPicture*GetPicture(const char* name, UInt_t new_width, UInt_t new_height); const TGPicture*GetPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator ",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:7063,Availability,mask,mask,7063,"tatic TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. const TGClient*fClientclient for which we keep icon pool; TStringfPathicon search path; THashTable*fPicListhash table containing the icons. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicturePool(const TGPicturePool& ); copy constructor. TGPicturePool& operator=(const TGPicturePool& ); assignment operator. const TGPicture * GetPicture(const char* name); Get a picture from the picture pool. Picture must be freed using; TGPicturePool::FreePicture(). If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, UInt_t new_width, UInt_t new_height); Get picture with specified size from pool (picture will be scaled if; necessary). Picture must be freed using TGPicturePool::FreePicture(). If; picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); Get picture with specified pixmap and mask from pool.; Picture must be freed using TGPicturePool::FreePicture().; If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, char** xpm); Create picture from XPM data.; Picture must be freed using TGPicturePool::FreePicture().; If picture creation failed 0 is returned. void FreePicture(const TGPicture* pic); Remove picture from cache if nobody is using it anymore. ~TGPicturePool(); Delete picture cache. void Print(Option_t* option = """") const; List all pictures in the pool. TGPicturePool(const TGPicturePool& ). const char * GetPath() const; { return fPath; }. » Author: Fons Rademakers 01/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:7112,Availability,mask,mask,7112,"tatic TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. const TGClient*fClientclient for which we keep icon pool; TStringfPathicon search path; THashTable*fPicListhash table containing the icons. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicturePool(const TGPicturePool& ); copy constructor. TGPicturePool& operator=(const TGPicturePool& ); assignment operator. const TGPicture * GetPicture(const char* name); Get a picture from the picture pool. Picture must be freed using; TGPicturePool::FreePicture(). If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, UInt_t new_width, UInt_t new_height); Get picture with specified size from pool (picture will be scaled if; necessary). Picture must be freed using TGPicturePool::FreePicture(). If; picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); Get picture with specified pixmap and mask from pool.; Picture must be freed using TGPicturePool::FreePicture().; If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, char** xpm); Create picture from XPM data.; Picture must be freed using TGPicturePool::FreePicture().; If picture creation failed 0 is returned. void FreePicture(const TGPicture* pic); Remove picture from cache if nobody is using it anymore. ~TGPicturePool(); Delete picture cache. void Print(Option_t* option = """") const; List all pictures in the pool. TGPicturePool(const TGPicturePool& ). const char * GetPath() const; { return fPath; }. » Author: Fons Rademakers 01/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:2821,Modifiability,Inherit,InheritsFrom,2821,"l TObject*TObject::FindObject(const TObject* obj) const; voidFreePicture(const TGPicture* pic); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetPath() const; const TGPicture*GetPicture(const char* name); const TGPicture*GetPicture(const char* name, char** xpm); const TGPicture*GetPicture(const char* name, UInt_t new_width, UInt_t new_height); const TGPicture*GetPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:2887,Modifiability,Inherit,InheritsFrom,2887,"icture(const TGPicture* pic); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetPath() const; const TGPicture*GetPicture(const char* name); const TGPicture*GetPicture(const char* name, char** xpm); const TGPicture*GetPicture(const char* name, UInt_t new_width, UInt_t new_height); const TGPicture*GetPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); ",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:6340,Modifiability,Inherit,Inheritance,6340," TGPicturePool&); TGPicturePool(const TGPicturePool&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. const TGClient*fClientclient for which we keep icon pool; TStringfPathicon search path; THashTable*fPicListhash table containing the icons. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicturePool(const TGPicturePool& ); copy constructor. TGPicturePool& operator=(const TGPicturePool& ); assignment operator. const TGPicture * GetPicture(const char* name); Get a picture from the picture pool. Picture must be freed using; TGPicturePool::FreePicture(). If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, UInt_t new_width, UInt_t new_height); Get picture with specified size from pool (picture will be scaled if; necessary). Picture must be freed using TGPicturePool::FreePicture(). If; picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); Get picture with specified pixmap and mask from pool.; Picture must be freed using TGPicturePool::FreePicture().; If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, char** xpm); Create picture from XPM data.; Picture must be freed using TGPicturePool::FreeP",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:6353,Modifiability,Inherit,Inherited,6353," TGPicturePool&); TGPicturePool(const TGPicturePool&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. const TGClient*fClientclient for which we keep icon pool; TStringfPathicon search path; THashTable*fPicListhash table containing the icons. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicturePool(const TGPicturePool& ); copy constructor. TGPicturePool& operator=(const TGPicturePool& ); assignment operator. const TGPicture * GetPicture(const char* name); Get a picture from the picture pool. Picture must be freed using; TGPicturePool::FreePicture(). If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, UInt_t new_width, UInt_t new_height); Get picture with specified size from pool (picture will be scaled if; necessary). Picture must be freed using TGPicturePool::FreePicture(). If; picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); Get picture with specified pixmap and mask from pool.; Picture must be freed using TGPicturePool::FreePicture().; If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, char** xpm); Create picture from XPM data.; Picture must be freed using TGPicturePool::FreeP",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:472,Performance,cache,cache,472,". TGPicturePool. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPicturePool. class TGPicturePool: public TObject. TGPicture & TGPicturePool. The TGPicture class implements pictures and icons used in the; different GUI elements and widgets. The TGPicturePool class; implements a TGPicture cache. TGPictures are created, managed and; destroyed by the TGPicturePool. Function Members (Methods); public:. virtual~TGPicturePool(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFreePicture(const TGPicture* pic); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtor",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:7479,Performance,cache,cache,7479,"tatic TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. const TGClient*fClientclient for which we keep icon pool; TStringfPathicon search path; THashTable*fPicListhash table containing the icons. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicturePool(const TGPicturePool& ); copy constructor. TGPicturePool& operator=(const TGPicturePool& ); assignment operator. const TGPicture * GetPicture(const char* name); Get a picture from the picture pool. Picture must be freed using; TGPicturePool::FreePicture(). If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, UInt_t new_width, UInt_t new_height); Get picture with specified size from pool (picture will be scaled if; necessary). Picture must be freed using TGPicturePool::FreePicture(). If; picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); Get picture with specified pixmap and mask from pool.; Picture must be freed using TGPicturePool::FreePicture().; If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, char** xpm); Create picture from XPM data.; Picture must be freed using TGPicturePool::FreePicture().; If picture creation failed 0 is returned. void FreePicture(const TGPicture* pic); Remove picture from cache if nobody is using it anymore. ~TGPicturePool(); Delete picture cache. void Print(Option_t* option = """") const; List all pictures in the pool. TGPicturePool(const TGPicturePool& ). const char * GetPath() const; { return fPath; }. » Author: Fons Rademakers 01/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:7549,Performance,cache,cache,7549,"tatic TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. const TGClient*fClientclient for which we keep icon pool; TStringfPathicon search path; THashTable*fPicListhash table containing the icons. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicturePool(const TGPicturePool& ); copy constructor. TGPicturePool& operator=(const TGPicturePool& ); assignment operator. const TGPicture * GetPicture(const char* name); Get a picture from the picture pool. Picture must be freed using; TGPicturePool::FreePicture(). If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, UInt_t new_width, UInt_t new_height); Get picture with specified size from pool (picture will be scaled if; necessary). Picture must be freed using TGPicturePool::FreePicture(). If; picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); Get picture with specified pixmap and mask from pool.; Picture must be freed using TGPicturePool::FreePicture().; If picture is not found 0 is returned. const TGPicture * GetPicture(const char* name, char** xpm); Create picture from XPM data.; Picture must be freed using TGPicturePool::FreePicture().; If picture creation failed 0 is returned. void FreePicture(const TGPicture* pic); Remove picture from cache if nobody is using it anymore. ~TGPicturePool(); Delete picture cache. void Print(Option_t* option = """") const; List all pictures in the pool. TGPicturePool(const TGPicturePool& ). const char * GetPath() const; { return fPath; }. » Author: Fons Rademakers 01/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:2711,Security,Hash,Hash,2711,"const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFreePicture(const TGPicture* pic); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetPath() const; const TGPicture*GetPicture(const char* name); const TGPicture*GetPicture(const char* name, char** xpm); const TGPicture*GetPicture(const char* name, UInt_t new_width, UInt_t new_height); const TGPicture*GetPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:4779,Testability,Test,TestBit,4779," const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPicturePool(const TGClient* client, const char* path); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:4818,Testability,Test,TestBits,4818," const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPicturePool(const TGClient* client, const char* path); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPicturePool.html:853,Usability,Clear,Clear,853," virtual~TGPicturePool(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFreePicture(const TGPicture* pic); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtor",MatchSource.WIKI,root/html604/TGPicturePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPicturePool.html
https://root.cern/root/html604/TGPopupMenu.html:6538,Availability,Error,Error,6538,"rr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableEntry(Int_t id); virtual Int_tEndMenu(void*& userData); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); virtual TGMenuEntry*GetCurrent() const; static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDef",MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPopupMenu.html:6667,Availability,error,error,6667,"ject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableEntry(Int_t id); virtual Int_tEndMenu(void*& userData); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); virtual TGMenuEntry*GetCurrent() const; static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFr",MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPopupMenu.html:6751,Availability,error,error,6751," Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableEntry(Int_t id); virtual Int_tEndMenu(void*& userData); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); virtual TGMenuEntry*GetCurrent() const; static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() const; virtual Option_t*TObject::GetDrawOption() const; virtual I",MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPopupMenu.html:20249,Availability,mask,mask,20249,,MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPopupMenu.html:1308,Integrability,interface,interfaces,1308," » TGPopupMenu. class TGPopupMenu: public TGFrame. TGMenuBar, TGPopupMenu, TGMenuTitle and TGMenuEntry. The TGMenu.h header contains all different menu classes. The TGMenuBar class implements a menu bar widget. It is used to; specify and provide access to common and frequently used application; actions grouped under menu titles (TGMenuTitle class). The menu bar; takes the highest-level of the menu system and it is a starting; point for many interactions. It is always visible and allows using; the keyboard equivalents. The geometry of the menu bar is; automatically set to the parent widget, i.e. the menu bar; automatically resizes itself so that it has the same width as its; parent (typically TGMainFrame). A menu bar contains one or more; popup menus and usually is placed along the top of the application; window. Any popup menu is invisible until the user invokes it by; using the mouse pointer or the keyboard. Popup menus implemented by TGPopupMenu class are unique in that,; by convention, they are not placed with the other GUI components in; the user interfaces. Instead, a popup menu usually appears either in; a menu bar or as a context menu on the TOP of the GUI. For that; reason it needs gClient->GetDefaultRoot() as a parent to get the; pointer to the root (i.e. desktop) window. This way a popup menu; will never be embedded.; NOTE: Using gClient->GetRoot() as a parent of TGPopupMenu will not; avoid the possibility of embedding the corresponding popup menu; because the current window hierarchy can be changed by using; gClient->SetRoot() method. As a context menus TGPopupMenu shows up after pressing the right; mouse button, over a popup-enabled component. The popup menu then; appears under the mouse pointer. Selecting a menu item will generate the event:; kC_COMMAND, kCM_MENU, menu id, user data. Function Members (Methods); public:. virtual~TGPopupMenu(); voidTObject::AbstractMethod(const char* method) const; virtual voidActivate(Bool_t); virtual voidActivate(TGMenu",MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPopupMenu.html:12374,Integrability,Message,Message,12374,"GFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tIsEntryChecked(Int_t id); virtual Bool_tIsEntryEnabled(Int_t id); virtual Bool_tIsEntryHidden(Int_t id); virtual Bool_tIsEntryRChecked(Int_t id); virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGWindow::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidPlaceMenu(Int_t x, Int_t y, Bool_t stick_mode, Bool_t grab_pointer); virtual voidTObject::Pop(); virtual voidPoppedDown()SIGNAL ; virtual v",MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPopupMenu.html:11082,Modifiability,Inherit,InheritsFrom,11082,"rame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tHandleMotion(Event_t* event); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tHandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidHideEntry(Int_t id); virtual voidHighlighted(Int_t id)SIGNAL ; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tIsEntryChecked(Int_t id); virtual Bool_tIsEntryEnabled(Int_t id); virtual Bool_tIsEntryHidden(Int_t id); virtual Bool_tIsEntryRChecked(Int_t id); virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(",MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPopupMenu.html:11148,Modifiability,Inherit,InheritsFrom,11148,"Motion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tHandleMotion(Event_t* event); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tHandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidHideEntry(Int_t id); virtual voidHighlighted(Int_t id)SIGNAL ; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tIsEntryChecked(Int_t id); virtual Bool_tIsEntryEnabled(Int_t id); virtual Bool_tIsEntryHidden(Int_t id); virtual Bool_tIsEntryRChecked(Int_t id); virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidT",MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPopupMenu.html:22825,Modifiability,Inherit,Inheritance,22825,"ockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*fgDefaultSelectedBackgroundGC; static const TGGC*fgDefaultSelectedGC; static const TGFont*fgHilightFont; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPopupMenu(const TGWindow* p = 0, UInt_t w = 10, UInt_t h = 10, UInt_t options = 0); Create a popup menu. ~TGPopupMenu(); Delete a popup menu. void AddEntry(TGHotString* s, Int_t id, void* ud = 0, const TGPicture* p = 0, TGMenuEntry* before = 0); Add a menu entry. The hotstring is adopted by the menu (actually by; the TGMenuEntry) and deleted when possible. A possible picture is; borrowed from the picture pool and therefore not adopted.; If before is not 0, the entry will be added before it. void AddEntry(const char* s, Int_t id, void* ud = 0, const TGPicture* p = 0, TGMenuEntry* before = 0); Add a menu entry. The string s in not adopted.; If before is not 0, the entry will be added before it. void AddSeparator(TGMenuEntry* before = 0); Add a menu separator to the menu.; If before is not 0, the entry will be added before it. void AddLabel(TGHotString* s, const TGPicture* p = 0, TGMenuEntry* before = 0); Add a menu label to the menu. T",MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPopupMenu.html:22838,Modifiability,Inherit,Inherited,22838,"ockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*fgDefaultSelectedBackgroundGC; static const TGGC*fgDefaultSelectedGC; static const TGFont*fgHilightFont; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPopupMenu(const TGWindow* p = 0, UInt_t w = 10, UInt_t h = 10, UInt_t options = 0); Create a popup menu. ~TGPopupMenu(); Delete a popup menu. void AddEntry(TGHotString* s, Int_t id, void* ud = 0, const TGPicture* p = 0, TGMenuEntry* before = 0); Add a menu entry. The hotstring is adopted by the menu (actually by; the TGMenuEntry) and deleted when possible. A possible picture is; borrowed from the picture pool and therefore not adopted.; If before is not 0, the entry will be added before it. void AddEntry(const char* s, Int_t id, void* ud = 0, const TGPicture* p = 0, TGMenuEntry* before = 0); Add a menu entry. The string s in not adopted.; If before is not 0, the entry will be added before it. void AddSeparator(TGMenuEntry* before = 0); Add a menu separator to the menu.; If before is not 0, the entry will be added before it. void AddLabel(TGHotString* s, const TGPicture* p = 0, TGMenuEntry* before = 0); Add a menu label to the menu. T",MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPopupMenu.html:1659,Safety,avoid,avoid,1659,"It is always visible and allows using; the keyboard equivalents. The geometry of the menu bar is; automatically set to the parent widget, i.e. the menu bar; automatically resizes itself so that it has the same width as its; parent (typically TGMainFrame). A menu bar contains one or more; popup menus and usually is placed along the top of the application; window. Any popup menu is invisible until the user invokes it by; using the mouse pointer or the keyboard. Popup menus implemented by TGPopupMenu class are unique in that,; by convention, they are not placed with the other GUI components in; the user interfaces. Instead, a popup menu usually appears either in; a menu bar or as a context menu on the TOP of the GUI. For that; reason it needs gClient->GetDefaultRoot() as a parent to get the; pointer to the root (i.e. desktop) window. This way a popup menu; will never be embedded.; NOTE: Using gClient->GetRoot() as a parent of TGPopupMenu will not; avoid the possibility of embedding the corresponding popup menu; because the current window hierarchy can be changed by using; gClient->SetRoot() method. As a context menus TGPopupMenu shows up after pressing the right; mouse button, over a popup-enabled component. The popup menu then; appears under the mouse pointer. Selecting a menu item will generate the event:; kC_COMMAND, kCM_MENU, menu id, user data. Function Members (Methods); public:. virtual~TGPopupMenu(); voidTObject::AbstractMethod(const char* method) const; virtual voidActivate(Bool_t); virtual voidActivate(TGMenuEntry* entry); virtual voidActivated(Int_t id)SIGNAL ; virtual voidAddEntry(TGHotString* s, Int_t id, void* ud = 0, const TGPicture* p = 0, TGMenuEntry* before = 0); virtual voidAddEntry(const char* s, Int_t id, void* ud = 0, const TGPicture* p = 0, TGMenuEntry* before = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidAddLabel(TGHotString* s, const TGPicture* p = 0, TGMenuEntry* before = 0); virtual voidAddLabel(const char* s, const TGPicture* p = 0, ",MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPopupMenu.html:487,Security,access,access,487,". TGPopupMenu. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPopupMenu. class TGPopupMenu: public TGFrame. TGMenuBar, TGPopupMenu, TGMenuTitle and TGMenuEntry. The TGMenu.h header contains all different menu classes. The TGMenuBar class implements a menu bar widget. It is used to; specify and provide access to common and frequently used application; actions grouped under menu titles (TGMenuTitle class). The menu bar; takes the highest-level of the menu system and it is a starting; point for many interactions. It is always visible and allows using; the keyboard equivalents. The geometry of the menu bar is; automatically set to the parent widget, i.e. the menu bar; automatically resizes itself so that it has the same width as its; parent (typically TGMainFrame). A menu bar contains one or more; popup menus and usually is placed along the top of the application; window. Any popup menu is invisible until the user invokes it by; using the mouse pointer or the keyboard. Popup menus implemented by TGPopupMenu class are unique in that,; by convention, they are not placed with the other GUI components in; the user interfaces. Instead, a popup menu usually appears either in; a menu bar or as a context menu on the TOP of the GUI. For that; reason it needs gClient->GetDefaultRoot() as a parent to get the; pointer to the root (i.e. desktop) window. This way a popup menu; will never be embedded.; NOTE: Using gClient->GetRoot() as a parent of TGPopupMenu will not; avoid the possibility of embedding the corresponding popup menu; because the current window hierarchy can be changed by using; gClient->SetRoot() method. As a context menus TGPopupMenu shows up after pressing the right; mouse button, over a popup-enabled component. The popup menu then; appears under the mouse pointer. Selecting a menu item ",MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPopupMenu.html:10770,Security,Hash,Hash,10770,"irtual Bool_tTGFrame::HandleDNDLeave(); virtual Atom_tTGFrame::HandleDNDPosition(Int_t, Int_t, Atom_t, Int_t, Int_t); virtual Bool_tTGFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGFrame::HandleDragDrop(TGFrame*, Int_t, Int_t, TGLayoutHints*); virtual Bool_tTGFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tHandleMotion(Event_t* event); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tHandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidHideEntry(Int_t id); virtual voidHighlighted(Int_t id)SIGNAL ; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tIsEntryChecked(Int_t id); virtual Bool_tIsEntryEnabled(Int_t id); virtual Bool_tIsEntryHidden(Int_t id); virtual Bool_tIsEntryRChecked(Int_t id); virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLa",MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPopupMenu.html:16200,Testability,Test,TestBit,16200,"; virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidSetEntrySep(UInt_t sep); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidSetMenuBar(TGMenuBar* bar); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPopupMenu(const TGWindow* p = 0, UInt_t w = 10, UInt_t h = 10, UInt_t options = 0); virtual voidUnCheckEntries(); virtual voidUnCheckEntry(Int_t id); virtual voidUnCheckEntryByData(void* user_data); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPopupMenu.html:16239,Testability,Test,TestBits,16239,"; virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidSetEntrySep(UInt_t sep); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidSetMenuBar(TGMenuBar* bar); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPopupMenu(const TGWindow* p = 0, UInt_t w = 10, UInt_t h = 10, UInt_t options = 0); virtual voidUnCheckEntries(); virtual voidUnCheckEntry(Int_t id); virtual voidUnCheckEntryByData(void* user_data); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPopupMenu.html:3647,Usability,Clear,Clear,3647,"oidAddLabel(const char* s, const TGPicture* p = 0, TGMenuEntry* before = 0); virtual voidAddPopup(TGHotString* s, TGPopupMenu* popup, TGMenuEntry* before = 0, const TGPicture* p = 0); virtual voidAddPopup(const char* s, TGPopupMenu* popup, TGMenuEntry* before = 0, const TGPicture* p = 0); virtual voidAddSeparator(TGMenuEntry* before = 0); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidAssociate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); virtual voidCheckEntry(Int_t id); virtual voidCheckEntryByData(void* user_data); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDefaultEntry(Int_t id); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidDeleteEntry(Int_t id); virtual voidDeleteEntry(TGMenuEntry* entry); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroyS",MatchSource.WIKI,root/html604/TGPopupMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPopupMenu.html
https://root.cern/root/html604/TGPosition.html:1103,Modifiability,Inherit,Inheritance,1103,". TGPosition. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPosition. class TGPosition. TGDimension, TGPosition, TGLongPosition, TGInsets and TGRectangle. Several small geometry classes that implement dimensions; (width and height), positions (x and y), insets and rectangles.; They are trivial and their members are public. Function Members (Methods); public:. virtual~TGPosition(); static TClass*Class(); virtual TClass*IsA() const; TGPositionoperator+(const TGPosition& b) const; TGPositionoperator-(const TGPosition& b) const; TGPosition&operator=(const TGPosition&); Bool_toperator==(const TGPosition& b) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGPosition(); TGPosition(const TGPosition& p); TGPosition(Int_t xc, Int_t yc). Data Members; public:. Int_tfXx position; Int_tfYy position. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t operator==(const TGPosition& b) const; { return ((fWidth == b.fWidth) && (fHeight == b.fHeight)); }. TGDimension operator-(const TGPosition& b) const; { return TGDimension(fWidth - b.fWidth, fHeight - b.fHeight); }. TGDimension operator+(const TGPosition& b) const; { return TGDimension(fWidth + b.fWidth, fHeight + b.fHeight); }. TGPosition(); { }. TGPosition(Int_t xc, Int_t yc); { }. TGPosition(const TGPosition& p); { }. virtual ~TGPosition(); { }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGPosition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPosition.html
https://root.cern/root/html604/TGPosition.html:1116,Modifiability,Inherit,Inherited,1116,". TGPosition. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPosition. class TGPosition. TGDimension, TGPosition, TGLongPosition, TGInsets and TGRectangle. Several small geometry classes that implement dimensions; (width and height), positions (x and y), insets and rectangles.; They are trivial and their members are public. Function Members (Methods); public:. virtual~TGPosition(); static TClass*Class(); virtual TClass*IsA() const; TGPositionoperator+(const TGPosition& b) const; TGPositionoperator-(const TGPosition& b) const; TGPosition&operator=(const TGPosition&); Bool_toperator==(const TGPosition& b) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGPosition(); TGPosition(const TGPosition& p); TGPosition(Int_t xc, Int_t yc). Data Members; public:. Int_tfXx position; Int_tfYy position. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t operator==(const TGPosition& b) const; { return ((fWidth == b.fWidth) && (fHeight == b.fHeight)); }. TGDimension operator-(const TGPosition& b) const; { return TGDimension(fWidth - b.fWidth, fHeight - b.fHeight); }. TGDimension operator+(const TGPosition& b) const; { return TGDimension(fWidth + b.fWidth, fHeight + b.fHeight); }. TGPosition(); { }. TGPosition(Int_t xc, Int_t yc); { }. TGPosition(const TGPosition& p); { }. virtual ~TGPosition(); { }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGPosition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPosition.html
https://root.cern/root/html604/TGPrintDialog.html:466,Availability,avail,available,466,". TGPrintDialog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGPrintDialog. class TGPrintDialog: public TGTransientFrame. TGTextEditDialogs. This file defines several dialogs that are used by the TGTextEdit; widget via its associated context popup menu.; The following dialogs are available: TGSearchDialog, TGGotoDialog; and TGPrintDialog. Function Members (Methods); public:. virtual~TGPrintDialog(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static ",MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGPrintDialog.html:4386,Availability,Error,Error,4386,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::G",MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGPrintDialog.html:4515,Availability,error,error,4515," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGPrintDialog.html:4599,Availability,error,error,4599,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UIn",MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGPrintDialog.html:20448,Availability,mask,mask,20448,,MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGPrintDialog.html:24840,Availability,avail,available,24840,"Frame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPrintDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, char** printerName = 0, char** printProg = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame); Create the printer dialog box. Returns kTRUE in ret_code when; printerName and printProg have been set and cancel was not pressed,; kFALSE otherwise. ~TGPrintDialog(); Clean up print dialog. void CloseWindow(); Close the dialog. On close the dialog will be deleted and cannot be; re-used. void GetPrinters(); Ask the system fo the list of available printers and populate the combo; box. If there is a default printer, select it in the list. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process print dialog widget messages. TGPrintDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, char** printerName = 0, char** printProg = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame). » Author: Fons Rademakers 10/7/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGPrintDialog.html:11201,Integrability,Message,Message,11201,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGPrintDialog&operator=(const TGPrintDialog&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; vi",MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGPrintDialog.html:25033,Integrability,message,messages,25033,"Frame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPrintDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, char** printerName = 0, char** printProg = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame); Create the printer dialog box. Returns kTRUE in ret_code when; printerName and printProg have been set and cancel was not pressed,; kFALSE otherwise. ~TGPrintDialog(); Clean up print dialog. void CloseWindow(); Close the dialog. On close the dialog will be deleted and cannot be; re-used. void GetPrinters(); Ask the system fo the list of available printers and populate the combo; box. If there is a default printer, select it in the list. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process print dialog widget messages. TGPrintDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, char** printerName = 0, char** printProg = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame). » Author: Fons Rademakers 10/7/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGPrintDialog.html:9784,Modifiability,Inherit,InheritsFrom,9784,"TGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGPrintDialog.html:9850,Modifiability,Inherit,InheritsFrom,9850,"e::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGPrintDialog.html:24232,Modifiability,Inherit,Inheritance,24232,"ion; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPrintDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, char** printerName = 0, char** printProg = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame); Create the printer dialog box. Returns kTRUE in ret_code when; printerName and printProg have been set and cancel was not pressed,; kFALSE otherwise. ~TGPrintDialog(); Clean up print dialog. void CloseWindow(); Close the dialog. On close the dialog will be deleted and cannot be; re-used. void GetPrinters(); Ask the system fo the list of available printers and populate the combo; box. If there is a default printer, select it in the list. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process print dialog widget messages. TGPrintDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, char** printerName = 0, char** printProg = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame). » Author: Fons Rademake",MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGPrintDialog.html:24245,Modifiability,Inherit,Inherited,24245,"ion; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPrintDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, char** printerName = 0, char** printProg = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame); Create the printer dialog box. Returns kTRUE in ret_code when; printerName and printProg have been set and cancel was not pressed,; kFALSE otherwise. ~TGPrintDialog(); Clean up print dialog. void CloseWindow(); Close the dialog. On close the dialog will be deleted and cannot be; re-used. void GetPrinters(); Ask the system fo the list of available printers and populate the combo; box. If there is a default printer, select it in the list. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process print dialog widget messages. TGPrintDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, char** printerName = 0, char** printProg = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame). » Author: Fons Rademake",MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGPrintDialog.html:9494,Security,Hash,Hash,9494,"virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGPrintDialog.html:16071,Testability,Test,TestBit,16071,"ayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPrintDialog(const TGPrintDialog&); TGPrintDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, char** printerName = 0, char** printProg = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGPrintDialog.html:16110,Testability,Test,TestBits,16110,"ayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPrintDialog(const TGPrintDialog&); TGPrintDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, char** printerName = 0, char** printProg = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGPrintDialog.html:1651,Usability,Clear,Clear,1651,"dTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char",MatchSource.WIKI,root/html604/TGPrintDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGPrintDialog.html
https://root.cern/root/html604/TGProgressBar.html:775,Availability,avail,available,775,". TGProgressBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGProgressBar. class TGProgressBar: public TGFrame. TGProgressBar, TGHProgressBar and TGVProgressBar. The classes in this file implement progress bars. Progress bars can; be used to show progress of tasks taking more then a few seconds.; TGProgressBar is an abstract base class, use either TGHProgressBar; or TGVProgressBar. TGHProgressBar can in addition show the position; as text in the bar. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGProgressBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:4172,Availability,Error,Error,4172,"e, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTGFrame::DrawBorder(); virtual voidTGFrame::DrawClass() const; virtual TObject*TGFrame::DrawClone(Option_t* = """") const; virtual voidTGFrame::DrawCopy(Handle_t, Int_t, Int_t); virtual voidTGFrame::Dump() const; voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFormat(const char* format = ""%.",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:4301,Availability,error,error,4301,"e, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTGFrame::DrawBorder(); virtual voidTGFrame::DrawClass() const; virtual TObject*TGFrame::DrawClone(Option_t* = """") const; virtual voidTGFrame::DrawCopy(Handle_t, Int_t, Int_t); virtual voidTGFrame::Dump() const; voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFormat(const char* format = ""%.",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:4385,Availability,error,error,4385,"e, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTGFrame::DrawBorder(); virtual voidTGFrame::DrawClass() const; virtual TObject*TGFrame::DrawClone(Option_t* = """") const; virtual voidTGFrame::DrawCopy(Handle_t, Int_t, Int_t); virtual voidTGFrame::Dump() const; voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFormat(const char* format = ""%.",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:18082,Availability,mask,mask,18082,,MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:11007,Deployability,TOGGLE,TOGGLE,11007,"Object::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGWindow::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGProgressBar&operator=(const TGProgressBar&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidPercent(Bool_t on)TOGGLE GETTER ; virtual voidTObject::Pop(); virtual voidTGFrame::Print(Option_t* option = """") const; virtual voidTGFrame::ProcessedConfigure(Event_t* event)SIGNAL ; virtual voidTGFrame::ProcessedEvent(Event_t* event)SIGNAL ; virtual Bool_tTGFrame::ProcessMessage(Long_t, Long_t, Long_t); virtual voidTGWindow::RaiseWindow(); virtual Int_tTObject::Read(const char* name); virtual voidTGFrame::ReallyDelete(); virtual voidTObject::RecursiveRemove(TObject* obj); voidTGFrame::RemoveInput(UInt_t emask); virtual voidTGFrame::ReparentWindow(const TGWindow* p, Int_t x = 0, Int_t y = 0); virtual voidTGWindow::RequestFocus(); virtual voidReset()MENU ; voidTObject::ResetBit(UInt_t f); virtual voidTGFrame::Resize(TGDimension size); virtual voidTGFrame::Resize(UInt_t w = 0, UInt_t h = 0); virtual voidTGObject::SaveAs(const char* filename = """", Option_t* option = """") const; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTGFrame::SaveUserColor(ostream& out, Option_t*); virtual voidTGFram",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:13895,Deployability,TOGGLE,TOGGLE,13895,"on = kEditDisable); voidSetFillType(TGProgressBar::EFillType type); virtual voidSetForegroundColor(Pixel_t pixel); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); voidSetMax(Float_t max); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); voidSetMin(Float_t min); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); voidSetPosition(Float_t pos)MENU GETTER ; voidSetRange(Float_t min, Float_t max)MENU ; virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidShowPos(Bool_t on)TOGGLE GETTER ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGProgressBar(const TGProgressBar&); TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tUsePercent() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:10077,Integrability,Message,Message,10077,"onst; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGWindow::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGProgressBar&operator=(const TGProgressBar&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidPercent(Bool_t on)TOGGLE GETTER ; virtual voidTObject::Pop(); virtual voidTGFrame::Print(Opt",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:8945,Modifiability,Inherit,InheritsFrom,8945,"agEnter(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); voidIncrement(Float_t inc); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGFrame",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:9011,Modifiability,Inherit,InheritsFrom,9011,"); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); voidIncrement(Float_t inc); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:20421,Modifiability,Inherit,Inheritance,20421,"ame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Create progress bar. void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. co",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:20434,Modifiability,Inherit,Inherited,20434,"ame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Create progress bar. void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. co",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:8680,Security,Hash,Hash,8680,"_tTGFrame::HandleDNDLeave(); virtual Atom_tTGFrame::HandleDNDPosition(Int_t, Int_t, Atom_t, Int_t, Int_t); virtual Bool_tTGFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGFrame::HandleDragDrop(TGFrame*, Int_t, Int_t, TGLayoutHints*); virtual Bool_tTGFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); voidIncrement(Float_t inc); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() ",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:14095,Testability,Test,TestBit,14095,"on = kEditDisable); voidSetFillType(TGProgressBar::EFillType type); virtual voidSetForegroundColor(Pixel_t pixel); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); voidSetMax(Float_t max); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); voidSetMin(Float_t min); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); voidSetPosition(Float_t pos)MENU GETTER ; voidSetRange(Float_t min, Float_t max)MENU ; virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidShowPos(Bool_t on)TOGGLE GETTER ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGProgressBar(const TGProgressBar&); TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tUsePercent() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:14134,Testability,Test,TestBits,14134,"on = kEditDisable); voidSetFillType(TGProgressBar::EFillType type); virtual voidSetForegroundColor(Pixel_t pixel); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); voidSetMax(Float_t max); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); voidSetMin(Float_t min); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); voidSetPosition(Float_t pos)MENU GETTER ; voidSetRange(Float_t min, Float_t max)MENU ; virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidShowPos(Bool_t on)TOGGLE GETTER ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGProgressBar(const TGProgressBar&); TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tUsePercent() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:383,Usability,progress bar,progress bars,383,". TGProgressBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGProgressBar. class TGProgressBar: public TGFrame. TGProgressBar, TGHProgressBar and TGVProgressBar. The classes in this file implement progress bars. Progress bars can; be used to show progress of tasks taking more then a few seconds.; TGProgressBar is an abstract base class, use either TGHProgressBar; or TGVProgressBar. TGHProgressBar can in addition show the position; as text in the bar. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGProgressBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:398,Usability,Progress bar,Progress bars,398,". TGProgressBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGProgressBar. class TGProgressBar: public TGFrame. TGProgressBar, TGHProgressBar and TGVProgressBar. The classes in this file implement progress bars. Progress bars can; be used to show progress of tasks taking more then a few seconds.; TGProgressBar is an abstract base class, use either TGHProgressBar; or TGVProgressBar. TGHProgressBar can in addition show the position; as text in the bar. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGProgressBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:1498,Usability,Clear,Clear,1498," virtual~TGProgressBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:19279,Usability,progress bar,progress bar,19279,"ruct_tfFontStructfont used to draw position text; TStringfFormatformat used to show position not in percent; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Float_tfMaxlogical maximum value (default 100); UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; Float_tfMinlogical minimum value (default 0); UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; GContext_tfNormGCtext drawing graphics context; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tfPercentshow position in percent (default true); Float_tfPoslogical position [fMin,fMax]; Int_tfPosPixposition of progress bar in pixel coordinates; Bool_tfShowPosshow position value (default false); Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static cons",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:20769,Usability,progress bar,progress bar,20769,"c const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Create progress bar. void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context in use. void SetForegroundColor(Pixel_t pixel); Change text color drawing. void SavePrimitive(ostream& out, Option_t* opti",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:20843,Usability,progress bar,progress bar,20843,"Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Create progress bar. void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context in use. void SetForegroundColor(Pixel_t pixel); Change text color drawing. void SavePrimitive(ostream& out, Option_t* option = """"); Save progress bar parameters as a C++ statement(s) on output stream out. Bool_t fDrawBar; // if true draw only bar in DoRedraw(). TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:21007,Usability,progress bar,progress bar,21007,"GC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Create progress bar. void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context in use. void SetForegroundColor(Pixel_t pixel); Change text color drawing. void SavePrimitive(ostream& out, Option_t* option = """"); Save progress bar parameters as a C++ statement(s) on output stream out. Bool_t fDrawBar; // if true draw only bar in DoRedraw(). TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDou",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:21203,Usability,progress bar,progress bar,21203,"tClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Create progress bar. void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context in use. void SetForegroundColor(Pixel_t pixel); Change text color drawing. void SavePrimitive(ostream& out, Option_t* option = """"); Save progress bar parameters as a C++ statement(s) on output stream out. Bool_t fDrawBar; // if true draw only bar in DoRedraw(). TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); { }. Float_t GetMin() const; { return fMin; }. Float_t GetMax() const; { return fMax; }. Float_t GetPosition() const; { return fPos; }. EFillType GetFillType() co",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:21273,Usability,progress bar,progress bar,21273,"ame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Create progress bar. void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context in use. void SetForegroundColor(Pixel_t pixel); Change text color drawing. void SavePrimitive(ostream& out, Option_t* option = """"); Save progress bar parameters as a C++ statement(s) on output stream out. Bool_t fDrawBar; // if true draw only bar in DoRedraw(). TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); { }. Float_t GetMin() const; { return fMin; }. Float_t GetMax() const; { return fMax; }. Float_t GetPosition() const; { return fPos; }. EFillType GetFillType() const; { return fFillType; }. EBarType GetBarType() const; { retu",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGProgressBar.html:21643,Usability,progress bar,progress bar,21643,"norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Create progress bar. void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context in use. void SetForegroundColor(Pixel_t pixel); Change text color drawing. void SavePrimitive(ostream& out, Option_t* option = """"); Save progress bar parameters as a C++ statement(s) on output stream out. Bool_t fDrawBar; // if true draw only bar in DoRedraw(). TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); { }. Float_t GetMin() const; { return fMin; }. Float_t GetMax() const; { return fMax; }. Float_t GetPosition() const; { return fPos; }. EFillType GetFillType() const; { return fFillType; }. EBarType GetBarType() const; { return fBarType; }. Bool_t GetShowPos() const; { return fShowPos; }. TString GetFormat() const; { return fFormat; }. const char* GetValueFormat() const; { return fFormat.Data(); }. Bool_t UsePercent() const; { return fPercent; }. Pixel_t GetBarColor() const; { return fBarColorGC.GetForeground(); }. GContext_t GetNormGC() const; { return fNormGC; }. FontStruct_t GetFontStruct() const; { ret",MatchSource.WIKI,root/html604/TGProgressBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGProgressBar.html
https://root.cern/root/html604/TGQt.html:2323,Availability,mask,mask,2323,"(Window_t id, EGEventType type, Event_t& ev); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidClearWindow(); virtual voidClearWindow(Window_t id); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidCloseDisplay(); virtual voidClosePixmap(); virtual voidCloseWindow(); static intCoinFlag(); virtual const QColor&ColorIndex(Color_t indx) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidConvertPrimarySelection(Window_t id, Atom_t clipboard, Time_t when); virtual voidConvertSelection(Window_t, Atom_t&, Atom_t&, Atom_t&, Time_t&); virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y); virtual voidCopyGC(GContext_t org, GContext_t dest, Mask_t mask); virtual voidCopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); virtual voidCopyPixmap(const QPixmap& p, Int_t px1, Int_t py1); virtual Pixmap_tCreateBitmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height); virtual Cursor_tCreateCursor(ECursor cursor); virtual GContext_tCreateGC(Drawable_t id, GCValues_t* gval); virtual Drawable_tCreateImage(UInt_t width, UInt_t height); virtual voidCreateOpenGLContext(Int_t wid = 0); virtual Window_tTVirtualX::CreateOpenGLWindow(Window_t parentID, UInt_t width, UInt_t height, const vector<pair<UInt_t,Int_t> >& format); virtual Bool_tCreatePictureFromData(Drawable_t id, char** data, Pixmap_t& pict, Pixmap_t& pict_mask, PictureAttributes_t& attr); virtual Bool_tCreatePictureFromFile(Drawable_t id, const char* filename, Pixmap_t& pict, Pixmap_t& pict_mask, PictureAttributes_t& attr); virtual Pixmap_tCreatePixmap(Drawable_t id, UInt_t w, UInt_t h); virtual Pixmap_tCreatePixmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height, U",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:5720,Availability,Error,Error,5720,", Int_t* ic); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFillArea(Int_t n, TPoint* xy); virtual voidDrawLine(Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidDrawLine(Drawable_t id, GContext_t gc, Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidDrawPolyLine(Int_t n, TPoint* xy); virtual voidDrawPolyMarker(Int_t n, TPoint* xy); virtual voidDrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawSegments(Drawable_t id, GContext_t gc, Segment_t* seg, Int_t nseg); virtual voidDrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); virtual voidDrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode); virtual voidTObject::Dump() constMENU ; TQtEmitter*Emitter(); virtual Bool_tEmptyRegion(Region_t reg); virtual Bool_tEqualRegion(Region_t rega, Region_t regb); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tEventsPending(); virtual UInt_tExecCommand(TGWin32Command* code); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillPolygon(Window_t id, GContext_t gc, Point_t* points, Int_t npnt); virtual voidFillRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Window_tFindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd); virtual voidTVirtualX::FlushOpenGLBuffer(Handle_t ctx); virtual voidFreeColor(Colormap_t cmap, ULong_t pixel",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:5928,Availability,error,error,5928,"nt_t y1, Int_t x2, Int_t y2); virtual voidDrawLine(Drawable_t id, GContext_t gc, Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidDrawPolyLine(Int_t n, TPoint* xy); virtual voidDrawPolyMarker(Int_t n, TPoint* xy); virtual voidDrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawSegments(Drawable_t id, GContext_t gc, Segment_t* seg, Int_t nseg); virtual voidDrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); virtual voidDrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode); virtual voidTObject::Dump() constMENU ; TQtEmitter*Emitter(); virtual Bool_tEmptyRegion(Region_t reg); virtual Bool_tEqualRegion(Region_t rega, Region_t regb); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tEventsPending(); virtual UInt_tExecCommand(TGWin32Command* code); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillPolygon(Window_t id, GContext_t gc, Point_t* points, Int_t npnt); virtual voidFillRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Window_tFindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd); virtual voidTVirtualX::FlushOpenGLBuffer(Handle_t ctx); virtual voidFreeColor(Colormap_t cmap, ULong_t pixel); virtual voidFreeFontNames(char** fontlist); virtual voidFreeFontStruct(FontStruct_t fs); virtual Float_tGetAlpha(Int_t cindex); virtual voidGetCharacterUp(Float_t& chupx, Float_t& chupy); virtual unsigned ",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:6012,Availability,error,error,6012,"_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidDrawPolyLine(Int_t n, TPoint* xy); virtual voidDrawPolyMarker(Int_t n, TPoint* xy); virtual voidDrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawSegments(Drawable_t id, GContext_t gc, Segment_t* seg, Int_t nseg); virtual voidDrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); virtual voidDrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode); virtual voidTObject::Dump() constMENU ; TQtEmitter*Emitter(); virtual Bool_tEmptyRegion(Region_t reg); virtual Bool_tEqualRegion(Region_t rega, Region_t regb); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tEventsPending(); virtual UInt_tExecCommand(TGWin32Command* code); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillPolygon(Window_t id, GContext_t gc, Point_t* points, Int_t npnt); virtual voidFillRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Window_tFindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd); virtual voidTVirtualX::FlushOpenGLBuffer(Handle_t ctx); virtual voidFreeColor(Colormap_t cmap, ULong_t pixel); virtual voidFreeFontNames(char** fontlist); virtual voidFreeFontStruct(FontStruct_t fs); virtual Float_tGetAlpha(Int_t cindex); virtual voidGetCharacterUp(Float_t& chupx, Float_t& chupy); virtual unsigned char*GetColorBits(Drawable_t wid, Int_t x = 0, Int_t y = 0, UInt_t w = 0, UInt_t h =",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:14592,Availability,mask,mask,14592,"_tPointInRegion(Int_t x, Int_t y, Region_t reg); virtual Region_tPolygonRegion(Point_t* points, Int_t np, Bool_t winding); virtual voidTObject::Pop(); static voidPostQtEvent(QObject* receiver, QEvent* event); virtual voidTNamed::Print(Option_t* option = """") const; static voidPrintEvent(Event_t&); virtual Int_tprocessQtEvents(Int_t maxtime = 300); virtual voidPutByte(Byte_t b); virtual voidPutImage(Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidPutPixel(Drawable_t id, Int_t x, Int_t y, ULong_t pixel); TQtClientFilter*QClientFilter() const; QColorQtColor(ULong_t pixel); static QStringQtFileFormat(const char* selector); static QStringQtFileFormat(const QString& selector); virtual voidQueryColor(Colormap_t cmap, ColorStruct_t& color); virtual voidQueryPointer(Int_t& ix, Int_t& iy); virtual voidQueryPointer(Window_t id, Window_t& rootw, Window_t& childw, Int_t& root_x, Int_t& root_y, Int_t& win_x, Int_t& win_y, UInt_t& mask); virtual voidRaiseWindow(Window_t id); virtual Int_tTObject::Read(const char* name); virtual Pixmap_tReadGIF(Int_t x0, Int_t y0, const char* file, Window_t id = 0); virtual Bool_tReadPictureDataFromFile(const char* filename, char*** ret_data); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemoveWindow(ULong_t qwid); virtual voidReparentWindow(Window_t id, Window_t pid, Int_t x, Int_t y); virtual Int_tRequestLocator(Int_t mode, Int_t ctyp, Int_t& x, Int_t& y); virtual Int_tRequestString(Int_t x, Int_t y, char* text); virtual voidRescaleWindow(Int_t wid, UInt_t w, UInt_t h); virtual voidTAttFill::ResetAttFill(Option_t* option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); virtual voidTAttMarker::ResetAttMarker(Option_t* toption = """"); virtual voidTAttText::ResetAttText(Option_t* toption = """"); voidTObject::ResetBit(UInt_t f); virtual Int_tResizePixmap(Int_t wid, UInt_t w, UInt_t h); virtual voidResizeWindow(Int_t wid); virtual voidResizeWindow(Wind",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:21009,Availability,mask,mask,21009,"ontname, TVirtualX::ETextSetMode mode); virtual voidSetTextMagnitude(Float_t mgn); static voidSetTextProxy(TQtTextProxy* proxy); virtual voidSetTextSize(Float_t textsize); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidSetTitle(const char* title); virtual voidSetTypeList(Window_t win, Atom_t prop, Atom_t* typelist); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetWindowBackground(Window_t id, ULong_t color); virtual voidSetWindowBackgroundPixmap(Window_t id, Pixmap_t pxm); virtual voidSetWindowName(Window_t id, char* name); virtual voidSetWMPosition(Window_t id, Int_t x, Int_t y); virtual voidSetWMSize(Window_t id, UInt_t w, UInt_t h); virtual voidSetWMSizeHints(Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); virtual voidSetWMState(Window_t id, EInitialState state); virtual voidSetWMTransientHint(Window_t id, Window_t main_id); virtual voidTVirtualX::ShapeCombineMask(Window_t id, Int_t x, Int_t y, Pixmap_t mask); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSubtractRegion(Region_t rega, Region_t regb, Region_t result); virtual Int_tSupportsExtension(const char* ext) const; virtual voidTVirtualX::Sync(Int_t mode); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TQtTextProxy*TextProxy(); virtual Int_tTextWidth(FontStruct_t font, const char* s, Int_t len); TGQt(); TGQt(const TGQt& vx); TGQt(const char* name, const char* title); virtual voidTranslateCoordinates(Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t& dest_x, Int_t& dest_y, Window_t& child); virtual voidUnionRectWithRegion(Rectangle_t* rect, Region_t src, Region_t dest); virtual voidUnionRegion(Region_t rega, Region_t regb, Region_t result); virtual voidUnmapWin",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:31477,Availability,down,down,31477,"lete the current Qt object. QRect GetQRect(QPaintDevice& dev); Define the rectangle of the current ROOT selection. void CopyPixmap(int wd, int xpos, int ypos); Copy the pixmap wd at the position xpos, ypos in the current window. void CopyPixmap(const QPixmap& p, Int_t px1, Int_t py1); Copy the pixmap p at the position xpos, ypos in the current window. void CreateOpenGLContext(Int_t wid = 0); Create OpenGL context for win windows (for ""selected"" Window by default); printf("" TGQt::CreateOpenGLContext for wd = %x fSelected= %x, threadID= %d \n"",wd,fSelectedWindow,; GetCurrentThreadId());. void DeleteOpenGLContext(Int_t wid = 0); Delete OpenGL context for win windows (for ""selected"" Window by default). void DrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, TVirtualX::EBoxMode mode); Draw a box.; mode=0 hollow (kHollow); mode=1 solid (kSolid). void DrawCellArray(Int_t x1, Int_t y1, Int_t x2, Int_t y2, Int_t nx, Int_t ny, Int_t* ic); Draw a cell array.; x1,y1 : left down corner; x2,y2 : right up corner; nx,ny : array size; ic : array. Draw a cell array. The drawing is done with the pixel precision; if (X2-X1)/NX (or Y) is not a exact pixel number the position of; the top rigth corner may be wrong. void DrawFillArea(Int_t n, TPoint* xy); Fill area described by polygon.; n : number of points; xy(2,n) : list of points. void DrawLine(Int_t x1, Int_t y1, Int_t x2, Int_t y2); Draw a line.; x1,y1 : begin of line; x2,y2 : end of line. void DrawPolyLine(Int_t n, TPoint* xy); Draw a line through all points.; n : number of points; xy : list of points. void DrawPolyMarker(Int_t n, TPoint* xy); Draw n markers with the current attributes at position x, y.; n : number of markers to draw; xy : x,y coordinates of markers. TQtTextProxy * TextProxy(); Get the text proxy implementation pointer. void SetTextProxy(TQtTextProxy* proxy); Set the text proxy implementation pointer. void DrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode). void GetChara",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:28831,Deployability,install,installation,28831,"w_t id); method to restore (dynamic cast) the QWidget object pointer (if any) from ROOT windows ""id"". void PrintEvent(Event_t& ); Dump trhe ROOT Event_t structure to debug the code. int CoinFlag(); return the Coin/QGL viewer flag safely. void SetCoinFlag(int flag); Set the Coin/QGL viewer flag safely. void SetCoinLoaded(); { fgCoinLoaded = 1; }. Int_t IsCoinLoaded(); { return fgCoinLoaded;}. QString RootFileFormat(const char* selector); { return RootFileFormat(QString(selector)); }. QString RootFileFormat(const QString& selector); Define whether the input string contains any pattern; that matches the ROOT image formats; those Qt library can not provide. QString QtFileFormat(const char* selector); { return QtFileFormat(QString(selector)); }. QString QtFileFormat(const QString& selector); returns Qt file format. if no suitable format found and the selector is empty; the default PNG format is returned. a special treatment of the ""gif"" format.; If ""gif"" is not provided with the local Qt installation; replace ""gif"" format with ""png"" one. TQtApplication * CreateQtApplicationImp(); The method to instantiate the QApplication if needed. void PostQtEvent(QObject* receiver, QEvent* event); Qt announced that QThread::postEvent to become obsolete and; we have to switch to the QAppication instead. TGQt(); Default Constructor *-*-*-; *-* ===================. TGQt(const char* name, const char* title); Normal Constructor*-*-*-. ~TGQt(); Default Destructor*-*-*-*-; *-* ==================. Bool_t Init(void* display = 0); Qt GUI initialization-. Int_t CreatROOTThread(); dummy*-*-*-*-; -. Int_t RegisterWid(QPaintDevice* wid); register QWidget for the embedded TCanvas. Int_t UnRegisterWid(QPaintDevice* wid); unregister QWidget to the TCanvas; return = Root registration Id or zero if the wd was not registered. Bool_t IsRegistered(QPaintDevice* wid); Check whether the object has been registered. Int_t InitWindow(ULong_t window); -; *-* if window == 0 InitWindow creates its own instance of T",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:38727,Deployability,Update,UpdateColor,38727,"=============; *-* cindex : color index defined my IXSETCOL; *. void SetMarkerSize(Float_t markersize); Set marker size index for markers*-*-*-; *-* =================================; *-* msize : marker scale factor; *. void SetMarkerStyle(Style_t markerstyle); Set marker style*-*-*-*-*-*-*-*-; *-* ================. void SetMarkerType(Int_t type, Int_t n, TPoint* xy); Set marker type*-*-*-*-*-*-*-*-*-; *-* ===============; *-* type : marker type; *-* n : length of marker description; *-* xy : list of points describing marker shape; -; *-* if N.EQ.0 marker is a single point; *-* if TYPE.EQ.0 marker is hollow circle of diameter N; *-* if TYPE.EQ.1 marker is filled circle of diameter N; *-* if TYPE.EQ.2 marker is a hollow polygon describe by line XY; *-* if TYPE.EQ.3 marker is a filled polygon describe by line XY; *-* if TYPE.EQ.4 marker is described by segmented line XY; *-* e.g. TYPE=4,N=4,XY=(-3,0,3,0,0,-3,0,3) sets a plus shape of 7x7 pixels; *. int UpdateColor(int cindex); [protected] update the color parameters if needed. void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b). void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b, Float_t a); Set the color with the alpha component (supported wuth Qt 4 only). void SetAlpha(Int_t cindex, Float_t a); Add the alpha component (supported with Qt 4 only). void GetRGBA(Int_t cindex, Float_t& r, Float_t& g, Float_t& b, Float_t& a); Return RGBA components for the color cindex. Float_t GetAlpha(Int_t cindex); Return Alpha component for the color cindex. void SetTextAlign(Short_t talign = 11); Set text alignment*-*-*-*-*-*-*-; *-* ==================; *-* txalh : horizontal text alignment; *-* txalv : vertical text alignment; *. void SetTextColor(Color_t cindex); Set color index for text*-*-*-*-; *-* ========================; *-* cindex : color index defined my IXSETCOL; *. Int_t SetTextFont(char* fontname, TVirtualX::ETextSetMode mode); Set text font to specified name.; mode : loading flag; mode=kCheck = 0 : search i",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:38764,Deployability,update,update,38764,"=============; *-* cindex : color index defined my IXSETCOL; *. void SetMarkerSize(Float_t markersize); Set marker size index for markers*-*-*-; *-* =================================; *-* msize : marker scale factor; *. void SetMarkerStyle(Style_t markerstyle); Set marker style*-*-*-*-*-*-*-*-; *-* ================. void SetMarkerType(Int_t type, Int_t n, TPoint* xy); Set marker type*-*-*-*-*-*-*-*-*-; *-* ===============; *-* type : marker type; *-* n : length of marker description; *-* xy : list of points describing marker shape; -; *-* if N.EQ.0 marker is a single point; *-* if TYPE.EQ.0 marker is hollow circle of diameter N; *-* if TYPE.EQ.1 marker is filled circle of diameter N; *-* if TYPE.EQ.2 marker is a hollow polygon describe by line XY; *-* if TYPE.EQ.3 marker is a filled polygon describe by line XY; *-* if TYPE.EQ.4 marker is described by segmented line XY; *-* e.g. TYPE=4,N=4,XY=(-3,0,3,0,0,-3,0,3) sets a plus shape of 7x7 pixels; *. int UpdateColor(int cindex); [protected] update the color parameters if needed. void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b). void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b, Float_t a); Set the color with the alpha component (supported wuth Qt 4 only). void SetAlpha(Int_t cindex, Float_t a); Add the alpha component (supported with Qt 4 only). void GetRGBA(Int_t cindex, Float_t& r, Float_t& g, Float_t& b, Float_t& a); Return RGBA components for the color cindex. Float_t GetAlpha(Int_t cindex); Return Alpha component for the color cindex. void SetTextAlign(Short_t talign = 11); Set text alignment*-*-*-*-*-*-*-; *-* ==================; *-* txalh : horizontal text alignment; *-* txalv : vertical text alignment; *. void SetTextColor(Color_t cindex); Set color index for text*-*-*-*-; *-* ========================; *-* cindex : color index defined my IXSETCOL; *. Int_t SetTextFont(char* fontname, TVirtualX::ETextSetMode mode); Set text font to specified name.; mode : loading flag; mode=kCheck = 0 : search i",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:41113,Deployability,Update,UpdateWindow,41113," PostScript); *-* =============================================================; *-* Font ID X11 Win32 TTF lfItalic lfWeight x 10; *-* 1 : times-medium-i-normal ""Times New Roman"" 1 5; *-* 2 : times-bold-r-normal ""Times New Roman"" 0 8; *-* 3 : times-bold-i-normal ""Times New Roman"" 1 8; *-* 4 : helvetica-medium-r-normal ""Arial"" 0 5; *-* 5 : helvetica-medium-o-normal ""Arial"" 1 5; *-* 6 : helvetica-bold-r-normal ""Arial"" 0 8; *-* 7 : helvetica-bold-o-normal ""Arial"" 1 8; *-* 8 : courier-medium-r-normal ""Courier New"" 0 5; *-* 9 : courier-medium-o-normal ""Courier New"" 1 5; *-* 10 : courier-bold-r-normal ""Courier New"" 0 8; *-* 11 : courier-bold-o-normal ""Courier New"" 1 8; *-* 12 : symbol-medium-r-normal ""Symbol"" 0 6; *-* 13 : times-medium-r-normal ""Times New Roman"" 0 5; *-* 14 : ""Wingdings"" 0 5. void SetTextSize(Float_t textsize); Set current text size*-*-; *-* =====================. void SetTitle(const char* title); Set title of the object*-; *-* =======================. void UpdateWindow(Int_t mode); Update display.; mode : (1) update; (0) sync. Int_t WriteGIF(char* name). Writes the current active window into pixmap file.; The format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no extension is provided the ""png"" format is used by default. Returns 1 in case of success,; 0 otherwise; Note: this method may not produce the expected result been called; ---- from the ROOT prompt by simple reason:; The active window will be console window; rather the last selected ROOT canvas. void WritePixmap(Int_t wid, UInt_t w, UInt_t h, char* pxname); Write the pixmap wd in the bitmap file pxname in JPEG.; wd : Pixmap address; w,h : Width and height of the pixmap.; if w = h = -1 the size of the pimxap is equal the size the wd size; pxname : pixmap file name; The format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no or some unknown extension is provided then; the ""png"" format is used by default; --; Take in account the special ROOT filenam",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:41139,Deployability,Update,Update,41139," PostScript); *-* =============================================================; *-* Font ID X11 Win32 TTF lfItalic lfWeight x 10; *-* 1 : times-medium-i-normal ""Times New Roman"" 1 5; *-* 2 : times-bold-r-normal ""Times New Roman"" 0 8; *-* 3 : times-bold-i-normal ""Times New Roman"" 1 8; *-* 4 : helvetica-medium-r-normal ""Arial"" 0 5; *-* 5 : helvetica-medium-o-normal ""Arial"" 1 5; *-* 6 : helvetica-bold-r-normal ""Arial"" 0 8; *-* 7 : helvetica-bold-o-normal ""Arial"" 1 8; *-* 8 : courier-medium-r-normal ""Courier New"" 0 5; *-* 9 : courier-medium-o-normal ""Courier New"" 1 5; *-* 10 : courier-bold-r-normal ""Courier New"" 0 8; *-* 11 : courier-bold-o-normal ""Courier New"" 1 8; *-* 12 : symbol-medium-r-normal ""Symbol"" 0 6; *-* 13 : times-medium-r-normal ""Times New Roman"" 0 5; *-* 14 : ""Wingdings"" 0 5. void SetTextSize(Float_t textsize); Set current text size*-*-; *-* =====================. void SetTitle(const char* title); Set title of the object*-; *-* =======================. void UpdateWindow(Int_t mode); Update display.; mode : (1) update; (0) sync. Int_t WriteGIF(char* name). Writes the current active window into pixmap file.; The format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no extension is provided the ""png"" format is used by default. Returns 1 in case of success,; 0 otherwise; Note: this method may not produce the expected result been called; ---- from the ROOT prompt by simple reason:; The active window will be console window; rather the last selected ROOT canvas. void WritePixmap(Int_t wid, UInt_t w, UInt_t h, char* pxname); Write the pixmap wd in the bitmap file pxname in JPEG.; wd : Pixmap address; w,h : Width and height of the pixmap.; if w = h = -1 the size of the pimxap is equal the size the wd size; pxname : pixmap file name; The format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no or some unknown extension is provided then; the ""png"" format is used by default; --; Take in account the special ROOT filenam",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:41167,Deployability,update,update,41167,"========================================; *-* Font ID X11 Win32 TTF lfItalic lfWeight x 10; *-* 1 : times-medium-i-normal ""Times New Roman"" 1 5; *-* 2 : times-bold-r-normal ""Times New Roman"" 0 8; *-* 3 : times-bold-i-normal ""Times New Roman"" 1 8; *-* 4 : helvetica-medium-r-normal ""Arial"" 0 5; *-* 5 : helvetica-medium-o-normal ""Arial"" 1 5; *-* 6 : helvetica-bold-r-normal ""Arial"" 0 8; *-* 7 : helvetica-bold-o-normal ""Arial"" 1 8; *-* 8 : courier-medium-r-normal ""Courier New"" 0 5; *-* 9 : courier-medium-o-normal ""Courier New"" 1 5; *-* 10 : courier-bold-r-normal ""Courier New"" 0 8; *-* 11 : courier-bold-o-normal ""Courier New"" 1 8; *-* 12 : symbol-medium-r-normal ""Symbol"" 0 6; *-* 13 : times-medium-r-normal ""Times New Roman"" 0 5; *-* 14 : ""Wingdings"" 0 5. void SetTextSize(Float_t textsize); Set current text size*-*-; *-* =====================. void SetTitle(const char* title); Set title of the object*-; *-* =======================. void UpdateWindow(Int_t mode); Update display.; mode : (1) update; (0) sync. Int_t WriteGIF(char* name). Writes the current active window into pixmap file.; The format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no extension is provided the ""png"" format is used by default. Returns 1 in case of success,; 0 otherwise; Note: this method may not produce the expected result been called; ---- from the ROOT prompt by simple reason:; The active window will be console window; rather the last selected ROOT canvas. void WritePixmap(Int_t wid, UInt_t w, UInt_t h, char* pxname); Write the pixmap wd in the bitmap file pxname in JPEG.; wd : Pixmap address; w,h : Width and height of the pixmap.; if w = h = -1 the size of the pimxap is equal the size the wd size; pxname : pixmap file name; The format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no or some unknown extension is provided then; the ""png"" format is used by default; --; Take in account the special ROOT filename syntax 26.12.2006 vf; ""gif+NN"" - an ",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:305,Integrability,interface,interface,305,". TGQt. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » QT; » TGQt. class TGQt: public TVirtualX. TGQt. This class is the basic interface to the Qt graphics system. It is; an implementation of the abstract TVirtualX class. Function Members (Methods); public:. virtual~TGQt(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tTVirtualX::AddPixmap(ULong_t pixid, UInt_t w, UInt_t h); virtual Int_tAddWindow(ULong_t qwid, UInt_t w, UInt_t h); virtual Bool_tAllocColor(Colormap_t cmap, ColorStruct_t& color); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualX::BeginModalSessionFor(Window_t window); virtual voidBell(Int_t percent); virtual voidTObject::Browse(TBrowser* b); virtual voidChangeActivePointerGrab(Window_t, UInt_t, Cursor_t); virtual voidChangeGC(GContext_t gc, GCValues_t* gval); virtual voidChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); virtual voidChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len); virtual voidChangeWindowAttributes(Window_t id, SetWindowAttributes_t* attr); virtual Bool_tCheckEvent(Window_t id, EGEventType type, Event_t& ev); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidClearWindow(); virtual voidClearWindow(Window_t id); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidCloseDisplay(); virtual voidClosePixmap(); virtual voidCloseWindow(); static intCoinFlag(); virtual const QColor&ColorIndex(Color_t indx) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidConvertPrimarySelection(Window_t id, Atom_t clipboard, Time_t when); virtual voidCo",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:4271,Integrability,message,messageID,4271,"const char* bitmap, UInt_t width, UInt_t height, ULong_t forecolor, ULong_t backcolor, Int_t depth); virtual Pixmap_tCreatePixmapFromData(unsigned char* bits, UInt_t width, UInt_t height); static TQtApplication*CreateQtApplicationImp(); virtual Region_tCreateRegion(); virtual Window_tCreateWindow(Window_t parent, Int_t x, Int_t y, UInt_t w, UInt_t h, UInt_t border, Int_t depth, UInt_t clss, void* visual, SetWindowAttributes_t* attr, UInt_t wtype); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteFont(FontStruct_t fs); virtual voidDeleteGC(GContext_t gc); virtual voidDeleteImage(Drawable_t img); virtual voidDeleteOpenGLContext(Int_t wid = 0); virtual voidDeletePictureData(void* data); virtual voidDeletePixmap(Pixmap_t pmap); virtual voidDeleteProperty(Window_t, Atom_t&); virtual voidDestroyRegion(Region_t reg); virtual voidTVirtualX::DestroySubwindows(Window_t id); virtual voidDestroyWindow(Window_t id); virtual voidTVirtualX::DispatchClientMessage(UInt_t messageID); virtual const char*DisplayName(const char* = 0); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, TVirtualX::EBoxMode mode); virtual voidDrawCellArray(Int_t x1, Int_t y1, Int_t x2, Int_t y2, Int_t nx, Int_t ny, Int_t* ic); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFillArea(Int_t n, TPoint* xy); virtual voidDrawLine(Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidDrawLine(Drawable_t id, GContext_t gc, Int_t x1, Int_t y1, Int_t x2, Int_t y2); virtual voidDrawPolyLine(Int_t n, TPoint* xy); virtual voidDrawPolyMarker(Int_t n, TPoint* xy); virtual voidDrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawSegments(Drawabl",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:33513,Integrability,message,message,33513," GetCharacterUp(Float_t& chupx, Float_t& chupy); Return character up vector. QPaintDevice * GetDoubleBuffer(QPaintDevice* dev); Query the pointer to the dev offscreen buffer if any. Int_t GetDoubleBuffer(Int_t wid); Query the double buffer value for the window wd.; return pointer to the off-screen buffer if any. void GetGeometry(Int_t wid, Int_t& x, Int_t& y, UInt_t& w, UInt_t& h); Returns the global cooordinate of the window ""wd"". const char * DisplayName(const char* = 0); { return ""localhost""; }. ULong_t GetPixel(Color_t cindex); Return pixel value associated to specified ROOT color number.; see: GQTGUI.cxx:QtColor() also. void GetRGB(Int_t index, Float_t& r, Float_t& g, Float_t& b); Get rgb values for color ""index"". const QTextCodec * GetTextDecoder(). Float_t GetTextMagnitude(); {return fTextMagnitude;}. void SetTextMagnitude(Float_t mgn); { fTextMagnitude = mgn;}. void GetTextExtent(UInt_t& w, UInt_t& h, char* mess); Return the size of a character string.; iw : text width; ih : text height; mess : message. Int_t GetFontAscent() const; Returns ascent of the current font (in pixels).; The ascent of a font is the distance from the baseline; to the highest position characters extend to. Int_t GetFontDescent() const; Returns the descent of the current font (in pixels.; The descent is the distance from the base line; to the lowest point characters extend to. Bool_t HasTTFonts() const; {return fUseTTF;}. void MoveWindow(Int_t wid, Int_t x, Int_t y); Move the window wd.; wd : Window identifier.; x : x new window position; y : y new window position. void PutByte(Byte_t b). void QueryPointer(Int_t& ix, Int_t& iy); Query pointer position.; ix : X coordinate of pointer; iy : Y coordinate of pointer. Pixmap_t ReadGIF(Int_t x0, Int_t y0, const char* file, Window_t id = 0); If id is NULL - loads the specified gif file at position [x0,y0] in the; current window. Otherwise creates pixmap from gif file. Int_t RequestLocator(Int_t mode, Int_t ctyp, Int_t& x, Int_t& y); deprecated",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:42598,Integrability,interface,interface,42598," format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no extension is provided the ""png"" format is used by default. Returns 1 in case of success,; 0 otherwise; Note: this method may not produce the expected result been called; ---- from the ROOT prompt by simple reason:; The active window will be console window; rather the last selected ROOT canvas. void WritePixmap(Int_t wid, UInt_t w, UInt_t h, char* pxname); Write the pixmap wd in the bitmap file pxname in JPEG.; wd : Pixmap address; w,h : Width and height of the pixmap.; if w = h = -1 the size of the pimxap is equal the size the wd size; pxname : pixmap file name; The format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no or some unknown extension is provided then; the ""png"" format is used by default; --; Take in account the special ROOT filename syntax 26.12.2006 vf; ""gif+NN"" - an animated GIF file is produced, where NN is delay in 10ms units. TVirtualX * GetVirtualX(); { return fgTQt;}. Int_t LoadQt(const char* shareLibFileName); Make sure we load the GUI DLL from the gui thread. Int_t processQtEvents(Int_t maxtime = 300); Force processing the Qt events only without entering the ROOT event loop. void operator=(const TGQt& ). TGQt(). QPaintDevice * GetSelectedWindow(); Include the base TVirtualX class interface; extracted methods. { return fSelectedWindow; }. void SetTextDecoder(const char* ); {;}. Bool_t IsHandleValid(Window_t id). void SetQClientFilter(TQtClientFilter* filter); {fQClientFilter = filter;}. TQtClientFilter * QClientFilter() const; {return fQClientFilter;}. QColor QtColor(ULong_t pixel). void SendDestroyEvent(TQtClientWidget* ) const. » Author: Valeri Fine 21/01/2002 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/qt:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:10811,Modifiability,Inherit,InheritsFrom,10811,"ize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; static TVirtualX*GetVirtualX(); virtual Visual_tGetVisual() const; virtual voidGetWindowAttributes(Window_t id, WindowAttributes_t& attr); virtual Window_tGetWindowID(Int_t wid); virtual voidGetWindowSize(Drawable_t id, Int_t& x, Int_t& y, UInt_t& w, UInt_t& h); virtual voidGrabButton(Window_t id, EMouseButton button, UInt_t modifier, UInt_t evmask, Window_t confine, Cursor_t cursor, Bool_t grab = kTRUE); virtual voidGrabKey(Window_t id, Int_t keycode, UInt_t modifier, Bool_t grab = kTRUE); virtual voidGrabPointer(Window_t id, UInt_t evmask, Window_t confine, Cursor_t cursor, Bool_t grab = kTRUE, Bool_t owner_events = kTRUE); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual Bool_tHasTTFonts() const; virtual voidIconifyWindow(Window_t id); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Bool_tInit(void* display = 0); virtual Int_tInitWindow(ULong_t window); virtual voidTObject::Inspect() constMENU ; static TVirtualX*&TVirtualX::Instance(); virtual Atom_tInternAtom(const char* atom_name, Bool_t only_if_exist); virtual voidIntersectRegion(Region_t rega, Region_t regb, Region_t result); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTVirtualX::IsCmdThread() const; static Int_tIsCoinLoaded(); virtual Bool_tIsDNDAware(Window_t win, Atom_t* typelist); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsHandleValid(Window_t id); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; static Int_tiwid(QPaintDevice* wid); static QPaintDevice*iwid(Int_t wid); static QPaintDevice*iwid(Win",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:10877,Modifiability,Inherit,InheritsFrom,10877,"UInt_tTObject::GetUniqueID() const; static TVirtualX*GetVirtualX(); virtual Visual_tGetVisual() const; virtual voidGetWindowAttributes(Window_t id, WindowAttributes_t& attr); virtual Window_tGetWindowID(Int_t wid); virtual voidGetWindowSize(Drawable_t id, Int_t& x, Int_t& y, UInt_t& w, UInt_t& h); virtual voidGrabButton(Window_t id, EMouseButton button, UInt_t modifier, UInt_t evmask, Window_t confine, Cursor_t cursor, Bool_t grab = kTRUE); virtual voidGrabKey(Window_t id, Int_t keycode, UInt_t modifier, Bool_t grab = kTRUE); virtual voidGrabPointer(Window_t id, UInt_t evmask, Window_t confine, Cursor_t cursor, Bool_t grab = kTRUE, Bool_t owner_events = kTRUE); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual Bool_tHasTTFonts() const; virtual voidIconifyWindow(Window_t id); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Bool_tInit(void* display = 0); virtual Int_tInitWindow(ULong_t window); virtual voidTObject::Inspect() constMENU ; static TVirtualX*&TVirtualX::Instance(); virtual Atom_tInternAtom(const char* atom_name, Bool_t only_if_exist); virtual voidIntersectRegion(Region_t rega, Region_t regb, Region_t result); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTVirtualX::IsCmdThread() const; static Int_tIsCoinLoaded(); virtual Bool_tIsDNDAware(Window_t win, Atom_t* typelist); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsHandleValid(Window_t id); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; static Int_tiwid(QPaintDevice* wid); static QPaintDevice*iwid(Int_t wid); static QPaintDevice*iwid(Window_t wid); virtual Int_tKeysymToKeycode(UInt_t keysym); virtual c",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:27090,Modifiability,Inherit,Inheritance,27090,"ce*fSelectedWindowPointer to the current ""paintdevice: PixMap, Widget etc""; const char*fSymbolFontFamilythe name of the font to substiute the non-standard ""Symbol""; Short_tTAttText::fTextAlignText alignment; Int_tfTextAlignHText Alignment Horizontal; Int_tfTextAlignVText Alignment Vertical; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Int_tfTextFontModifiedMark whether the text font has been modified; Float_tfTextMagnitudeText Magnitude; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Bool_tfUseTTFFlag whether ROOT font has a priority; static TVirtualX*fgTQtThe hiden poiner to foolish ROOT TPluginManager; static TQtTextProxy*fgTextProxyproxy for the custom text rendering engine; void*fhEventThe event object to synch threads; static TGQt::DEFWINDOWIDkDefault. private:. static intfgCoinFlagno coin viewer;; static intfgCoinLoadedno coin viewer;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; QString SetFileName(const QString& fileName); Set the file pattern. QString GetNewFileName(const QString& fileNamePrototype); Find the filename for the given ""fileNamePrototype"". QPaintDevice * iwid(Window_t wid); Convert ROOT Widget Id to the Qt QPaintDevice pointer. Int_t iwid(QPaintDevice* wid); method to provide the ROOT ""cast"" from (QPaintDevice*) to ROOT windows ""id"". QPaintDevice * iwid(Int_t wid); method to restore (cast) the QPaintDevice object pointer from ROOT windows ""id"". QWidget * winid(Window_t id); returns the top level QWidget for the ROOT widget. Window_t wid(TQtClientWidget* widget). Window_t rootwid(QPaintDevice* dev). QWidget * wid(Window_t id); method to restore (dynamic cast) the QWidget object pointer (if any) from ROOT windows ""id"". void PrintEvent(Event_t& ); Dump trhe ROOT Event_t structure to debug the code. int CoinFlag(); return the Coin/QGL viewer flag safely. void SetCoinFlag(int flag); Set the Coin/QGL ",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:27103,Modifiability,Inherit,Inherited,27103,"ce*fSelectedWindowPointer to the current ""paintdevice: PixMap, Widget etc""; const char*fSymbolFontFamilythe name of the font to substiute the non-standard ""Symbol""; Short_tTAttText::fTextAlignText alignment; Int_tfTextAlignHText Alignment Horizontal; Int_tfTextAlignVText Alignment Vertical; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Int_tfTextFontModifiedMark whether the text font has been modified; Float_tfTextMagnitudeText Magnitude; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Bool_tfUseTTFFlag whether ROOT font has a priority; static TVirtualX*fgTQtThe hiden poiner to foolish ROOT TPluginManager; static TQtTextProxy*fgTextProxyproxy for the custom text rendering engine; void*fhEventThe event object to synch threads; static TGQt::DEFWINDOWIDkDefault. private:. static intfgCoinFlagno coin viewer;; static intfgCoinLoadedno coin viewer;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; QString SetFileName(const QString& fileName); Set the file pattern. QString GetNewFileName(const QString& fileNamePrototype); Find the filename for the given ""fileNamePrototype"". QPaintDevice * iwid(Window_t wid); Convert ROOT Widget Id to the Qt QPaintDevice pointer. Int_t iwid(QPaintDevice* wid); method to provide the ROOT ""cast"" from (QPaintDevice*) to ROOT windows ""id"". QPaintDevice * iwid(Int_t wid); method to restore (cast) the QPaintDevice object pointer from ROOT windows ""id"". QWidget * winid(Window_t id); returns the top level QWidget for the ROOT widget. Window_t wid(TQtClientWidget* widget). Window_t rootwid(QPaintDevice* dev). QWidget * wid(Window_t id); method to restore (dynamic cast) the QWidget object pointer (if any) from ROOT windows ""id"". void PrintEvent(Event_t& ); Dump trhe ROOT Event_t structure to debug the code. int CoinFlag(); return the Coin/QGL viewer flag safely. void SetCoinFlag(int flag); Set the Coin/QGL ",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:33691,Modifiability,extend,extend,33691,"ev offscreen buffer if any. Int_t GetDoubleBuffer(Int_t wid); Query the double buffer value for the window wd.; return pointer to the off-screen buffer if any. void GetGeometry(Int_t wid, Int_t& x, Int_t& y, UInt_t& w, UInt_t& h); Returns the global cooordinate of the window ""wd"". const char * DisplayName(const char* = 0); { return ""localhost""; }. ULong_t GetPixel(Color_t cindex); Return pixel value associated to specified ROOT color number.; see: GQTGUI.cxx:QtColor() also. void GetRGB(Int_t index, Float_t& r, Float_t& g, Float_t& b); Get rgb values for color ""index"". const QTextCodec * GetTextDecoder(). Float_t GetTextMagnitude(); {return fTextMagnitude;}. void SetTextMagnitude(Float_t mgn); { fTextMagnitude = mgn;}. void GetTextExtent(UInt_t& w, UInt_t& h, char* mess); Return the size of a character string.; iw : text width; ih : text height; mess : message. Int_t GetFontAscent() const; Returns ascent of the current font (in pixels).; The ascent of a font is the distance from the baseline; to the highest position characters extend to. Int_t GetFontDescent() const; Returns the descent of the current font (in pixels.; The descent is the distance from the base line; to the lowest point characters extend to. Bool_t HasTTFonts() const; {return fUseTTF;}. void MoveWindow(Int_t wid, Int_t x, Int_t y); Move the window wd.; wd : Window identifier.; x : x new window position; y : y new window position. void PutByte(Byte_t b). void QueryPointer(Int_t& ix, Int_t& iy); Query pointer position.; ix : X coordinate of pointer; iy : Y coordinate of pointer. Pixmap_t ReadGIF(Int_t x0, Int_t y0, const char* file, Window_t id = 0); If id is NULL - loads the specified gif file at position [x0,y0] in the; current window. Otherwise creates pixmap from gif file. Int_t RequestLocator(Int_t mode, Int_t ctyp, Int_t& x, Int_t& y); deprecated. Int_t RequestString(Int_t x, Int_t y, char* text); Request string*-*-*-*-*-*-*-; *-* ==============; *-* x,y : position where text is displayed; *-* text",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:33864,Modifiability,extend,extend,33864,"t_t wid, Int_t& x, Int_t& y, UInt_t& w, UInt_t& h); Returns the global cooordinate of the window ""wd"". const char * DisplayName(const char* = 0); { return ""localhost""; }. ULong_t GetPixel(Color_t cindex); Return pixel value associated to specified ROOT color number.; see: GQTGUI.cxx:QtColor() also. void GetRGB(Int_t index, Float_t& r, Float_t& g, Float_t& b); Get rgb values for color ""index"". const QTextCodec * GetTextDecoder(). Float_t GetTextMagnitude(); {return fTextMagnitude;}. void SetTextMagnitude(Float_t mgn); { fTextMagnitude = mgn;}. void GetTextExtent(UInt_t& w, UInt_t& h, char* mess); Return the size of a character string.; iw : text width; ih : text height; mess : message. Int_t GetFontAscent() const; Returns ascent of the current font (in pixels).; The ascent of a font is the distance from the baseline; to the highest position characters extend to. Int_t GetFontDescent() const; Returns the descent of the current font (in pixels.; The descent is the distance from the base line; to the lowest point characters extend to. Bool_t HasTTFonts() const; {return fUseTTF;}. void MoveWindow(Int_t wid, Int_t x, Int_t y); Move the window wd.; wd : Window identifier.; x : x new window position; y : y new window position. void PutByte(Byte_t b). void QueryPointer(Int_t& ix, Int_t& iy); Query pointer position.; ix : X coordinate of pointer; iy : Y coordinate of pointer. Pixmap_t ReadGIF(Int_t x0, Int_t y0, const char* file, Window_t id = 0); If id is NULL - loads the specified gif file at position [x0,y0] in the; current window. Otherwise creates pixmap from gif file. Int_t RequestLocator(Int_t mode, Int_t ctyp, Int_t& x, Int_t& y); deprecated. Int_t RequestString(Int_t x, Int_t y, char* text); Request string*-*-*-*-*-*-*-; *-* ==============; *-* x,y : position where text is displayed; *-* text : text displayed (input), edited text (output); -; *-* Request string:; *-* text is displayed and can be edited with Emacs-like keybinding; *-* return termination code (0 for ESC",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:34306,Performance,load,loads,34306,"fTextMagnitude;}. void SetTextMagnitude(Float_t mgn); { fTextMagnitude = mgn;}. void GetTextExtent(UInt_t& w, UInt_t& h, char* mess); Return the size of a character string.; iw : text width; ih : text height; mess : message. Int_t GetFontAscent() const; Returns ascent of the current font (in pixels).; The ascent of a font is the distance from the baseline; to the highest position characters extend to. Int_t GetFontDescent() const; Returns the descent of the current font (in pixels.; The descent is the distance from the base line; to the lowest point characters extend to. Bool_t HasTTFonts() const; {return fUseTTF;}. void MoveWindow(Int_t wid, Int_t x, Int_t y); Move the window wd.; wd : Window identifier.; x : x new window position; y : y new window position. void PutByte(Byte_t b). void QueryPointer(Int_t& ix, Int_t& iy); Query pointer position.; ix : X coordinate of pointer; iy : Y coordinate of pointer. Pixmap_t ReadGIF(Int_t x0, Int_t y0, const char* file, Window_t id = 0); If id is NULL - loads the specified gif file at position [x0,y0] in the; current window. Otherwise creates pixmap from gif file. Int_t RequestLocator(Int_t mode, Int_t ctyp, Int_t& x, Int_t& y); deprecated. Int_t RequestString(Int_t x, Int_t y, char* text); Request string*-*-*-*-*-*-*-; *-* ==============; *-* x,y : position where text is displayed; *-* text : text displayed (input), edited text (output); -; *-* Request string:; *-* text is displayed and can be edited with Emacs-like keybinding; *-* return termination code (0 for ESC, 1 for RETURN); -; *-* Return value:; -; *-* 0 - input was canceled; *-* 1 - input was Ok; -; *. void RescaleWindow(Int_t wid, UInt_t w, UInt_t h); Rescale the window wd.; wd : Window identifier; w : Width; h : Heigth. Int_t ResizePixmap(Int_t wid, UInt_t w, UInt_t h); Resize a pixmap.; wd : pixmap to be resized; w,h : Width and height of the pixmap. void ResizeWindow(Int_t wid); Resize the current window if necessary.; No implementation is required under Qt. voi",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:39722,Performance,load,loading,39722,"f needed. void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b). void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b, Float_t a); Set the color with the alpha component (supported wuth Qt 4 only). void SetAlpha(Int_t cindex, Float_t a); Add the alpha component (supported with Qt 4 only). void GetRGBA(Int_t cindex, Float_t& r, Float_t& g, Float_t& b, Float_t& a); Return RGBA components for the color cindex. Float_t GetAlpha(Int_t cindex); Return Alpha component for the color cindex. void SetTextAlign(Short_t talign = 11); Set text alignment*-*-*-*-*-*-*-; *-* ==================; *-* txalh : horizontal text alignment; *-* txalv : vertical text alignment; *. void SetTextColor(Color_t cindex); Set color index for text*-*-*-*-; *-* ========================; *-* cindex : color index defined my IXSETCOL; *. Int_t SetTextFont(char* fontname, TVirtualX::ETextSetMode mode); Set text font to specified name.; mode : loading flag; mode=kCheck = 0 : search if the font exist (kCheck); mode= kLoad = 1 : search the font and load it if it exists (kLoad); font : font name. Set text font to specified name. This function returns 0 if; the specified font is found, 1 if not. void SetTextFont(Font_t fontnumber); -*Set current text font number; *-* ===========================; *-* List of the currently supported fonts (screen and PostScript); *-* =============================================================; *-* Font ID X11 Win32 TTF lfItalic lfWeight x 10; *-* 1 : times-medium-i-normal ""Times New Roman"" 1 5; *-* 2 : times-bold-r-normal ""Times New Roman"" 0 8; *-* 3 : times-bold-i-normal ""Times New Roman"" 1 8; *-* 4 : helvetica-medium-r-normal ""Arial"" 0 5; *-* 5 : helvetica-medium-o-normal ""Arial"" 1 5; *-* 6 : helvetica-bold-r-normal ""Arial"" 0 8; *-* 7 : helvetica-bold-o-normal ""Arial"" 1 8; *-* 8 : courier-medium-r-normal ""Courier New"" 0 5; *-* 9 : courier-medium-o-normal ""Courier New"" 1 5; *-* 10 : courier-bold-r-normal ""Courier New"" 0 8; *-* 11 : courier-bold-o-normal ""Courier Ne",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:39827,Performance,load,load,39827,"f needed. void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b). void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b, Float_t a); Set the color with the alpha component (supported wuth Qt 4 only). void SetAlpha(Int_t cindex, Float_t a); Add the alpha component (supported with Qt 4 only). void GetRGBA(Int_t cindex, Float_t& r, Float_t& g, Float_t& b, Float_t& a); Return RGBA components for the color cindex. Float_t GetAlpha(Int_t cindex); Return Alpha component for the color cindex. void SetTextAlign(Short_t talign = 11); Set text alignment*-*-*-*-*-*-*-; *-* ==================; *-* txalh : horizontal text alignment; *-* txalv : vertical text alignment; *. void SetTextColor(Color_t cindex); Set color index for text*-*-*-*-; *-* ========================; *-* cindex : color index defined my IXSETCOL; *. Int_t SetTextFont(char* fontname, TVirtualX::ETextSetMode mode); Set text font to specified name.; mode : loading flag; mode=kCheck = 0 : search if the font exist (kCheck); mode= kLoad = 1 : search the font and load it if it exists (kLoad); font : font name. Set text font to specified name. This function returns 0 if; the specified font is found, 1 if not. void SetTextFont(Font_t fontnumber); -*Set current text font number; *-* ===========================; *-* List of the currently supported fonts (screen and PostScript); *-* =============================================================; *-* Font ID X11 Win32 TTF lfItalic lfWeight x 10; *-* 1 : times-medium-i-normal ""Times New Roman"" 1 5; *-* 2 : times-bold-r-normal ""Times New Roman"" 0 8; *-* 3 : times-bold-i-normal ""Times New Roman"" 1 8; *-* 4 : helvetica-medium-r-normal ""Arial"" 0 5; *-* 5 : helvetica-medium-o-normal ""Arial"" 1 5; *-* 6 : helvetica-bold-r-normal ""Arial"" 0 8; *-* 7 : helvetica-bold-o-normal ""Arial"" 1 8; *-* 8 : courier-medium-r-normal ""Courier New"" 0 5; *-* 9 : courier-medium-o-normal ""Courier New"" 1 5; *-* 10 : courier-bold-r-normal ""Courier New"" 0 8; *-* 11 : courier-bold-o-normal ""Courier Ne",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:42284,Performance,Load,LoadQt,42284," format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no extension is provided the ""png"" format is used by default. Returns 1 in case of success,; 0 otherwise; Note: this method may not produce the expected result been called; ---- from the ROOT prompt by simple reason:; The active window will be console window; rather the last selected ROOT canvas. void WritePixmap(Int_t wid, UInt_t w, UInt_t h, char* pxname); Write the pixmap wd in the bitmap file pxname in JPEG.; wd : Pixmap address; w,h : Width and height of the pixmap.; if w = h = -1 the size of the pimxap is equal the size the wd size; pxname : pixmap file name; The format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no or some unknown extension is provided then; the ""png"" format is used by default; --; Take in account the special ROOT filename syntax 26.12.2006 vf; ""gif+NN"" - an animated GIF file is produced, where NN is delay in 10ms units. TVirtualX * GetVirtualX(); { return fgTQt;}. Int_t LoadQt(const char* shareLibFileName); Make sure we load the GUI DLL from the gui thread. Int_t processQtEvents(Int_t maxtime = 300); Force processing the Qt events only without entering the ROOT event loop. void operator=(const TGQt& ). TGQt(). QPaintDevice * GetSelectedWindow(); Include the base TVirtualX class interface; extracted methods. { return fSelectedWindow; }. void SetTextDecoder(const char* ); {;}. Bool_t IsHandleValid(Window_t id). void SetQClientFilter(TQtClientFilter* filter); {fQClientFilter = filter;}. TQtClientFilter * QClientFilter() const; {return fQClientFilter;}. QColor QtColor(ULong_t pixel). void SendDestroyEvent(TQtClientWidget* ) const. » Author: Valeri Fine 21/01/2002 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/qt:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:42335,Performance,load,load,42335," format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no extension is provided the ""png"" format is used by default. Returns 1 in case of success,; 0 otherwise; Note: this method may not produce the expected result been called; ---- from the ROOT prompt by simple reason:; The active window will be console window; rather the last selected ROOT canvas. void WritePixmap(Int_t wid, UInt_t w, UInt_t h, char* pxname); Write the pixmap wd in the bitmap file pxname in JPEG.; wd : Pixmap address; w,h : Width and height of the pixmap.; if w = h = -1 the size of the pimxap is equal the size the wd size; pxname : pixmap file name; The format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no or some unknown extension is provided then; the ""png"" format is used by default; --; Take in account the special ROOT filename syntax 26.12.2006 vf; ""gif+NN"" - an animated GIF file is produced, where NN is delay in 10ms units. TVirtualX * GetVirtualX(); { return fgTQt;}. Int_t LoadQt(const char* shareLibFileName); Make sure we load the GUI DLL from the gui thread. Int_t processQtEvents(Int_t maxtime = 300); Force processing the Qt events only without entering the ROOT event loop. void operator=(const TGQt& ). TGQt(). QPaintDevice * GetSelectedWindow(); Include the base TVirtualX class interface; extracted methods. { return fSelectedWindow; }. void SetTextDecoder(const char* ); {;}. Bool_t IsHandleValid(Window_t id). void SetQClientFilter(TQtClientFilter* filter); {fQClientFilter = filter;}. TQtClientFilter * QClientFilter() const; {return fQClientFilter;}. QColor QtColor(ULong_t pixel). void SendDestroyEvent(TQtClientWidget* ) const. » Author: Valeri Fine 21/01/2002 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/qt:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:28063,Safety,safe,safely,28063,"c intfgCoinLoadedno coin viewer;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; QString SetFileName(const QString& fileName); Set the file pattern. QString GetNewFileName(const QString& fileNamePrototype); Find the filename for the given ""fileNamePrototype"". QPaintDevice * iwid(Window_t wid); Convert ROOT Widget Id to the Qt QPaintDevice pointer. Int_t iwid(QPaintDevice* wid); method to provide the ROOT ""cast"" from (QPaintDevice*) to ROOT windows ""id"". QPaintDevice * iwid(Int_t wid); method to restore (cast) the QPaintDevice object pointer from ROOT windows ""id"". QWidget * winid(Window_t id); returns the top level QWidget for the ROOT widget. Window_t wid(TQtClientWidget* widget). Window_t rootwid(QPaintDevice* dev). QWidget * wid(Window_t id); method to restore (dynamic cast) the QWidget object pointer (if any) from ROOT windows ""id"". void PrintEvent(Event_t& ); Dump trhe ROOT Event_t structure to debug the code. int CoinFlag(); return the Coin/QGL viewer flag safely. void SetCoinFlag(int flag); Set the Coin/QGL viewer flag safely. void SetCoinLoaded(); { fgCoinLoaded = 1; }. Int_t IsCoinLoaded(); { return fgCoinLoaded;}. QString RootFileFormat(const char* selector); { return RootFileFormat(QString(selector)); }. QString RootFileFormat(const QString& selector); Define whether the input string contains any pattern; that matches the ROOT image formats; those Qt library can not provide. QString QtFileFormat(const char* selector); { return QtFileFormat(QString(selector)); }. QString QtFileFormat(const QString& selector); returns Qt file format. if no suitable format found and the selector is empty; the default PNG format is returned. a special treatment of the ""gif"" format.; If ""gif"" is not provided with the local Qt installation; replace ""gif"" format with ""png"" one. TQtApplication * CreateQtApplicationImp(); The method to instantiate the QApplication if needed. void PostQtEvent(QObject* receiver, QEvent* event); Qt announce",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:28128,Safety,safe,safely,28128," Inherited Members; Includes; Libraries. Function documentation; QString SetFileName(const QString& fileName); Set the file pattern. QString GetNewFileName(const QString& fileNamePrototype); Find the filename for the given ""fileNamePrototype"". QPaintDevice * iwid(Window_t wid); Convert ROOT Widget Id to the Qt QPaintDevice pointer. Int_t iwid(QPaintDevice* wid); method to provide the ROOT ""cast"" from (QPaintDevice*) to ROOT windows ""id"". QPaintDevice * iwid(Int_t wid); method to restore (cast) the QPaintDevice object pointer from ROOT windows ""id"". QWidget * winid(Window_t id); returns the top level QWidget for the ROOT widget. Window_t wid(TQtClientWidget* widget). Window_t rootwid(QPaintDevice* dev). QWidget * wid(Window_t id); method to restore (dynamic cast) the QWidget object pointer (if any) from ROOT windows ""id"". void PrintEvent(Event_t& ); Dump trhe ROOT Event_t structure to debug the code. int CoinFlag(); return the Coin/QGL viewer flag safely. void SetCoinFlag(int flag); Set the Coin/QGL viewer flag safely. void SetCoinLoaded(); { fgCoinLoaded = 1; }. Int_t IsCoinLoaded(); { return fgCoinLoaded;}. QString RootFileFormat(const char* selector); { return RootFileFormat(QString(selector)); }. QString RootFileFormat(const QString& selector); Define whether the input string contains any pattern; that matches the ROOT image formats; those Qt library can not provide. QString QtFileFormat(const char* selector); { return QtFileFormat(QString(selector)); }. QString QtFileFormat(const QString& selector); returns Qt file format. if no suitable format found and the selector is empty; the default PNG format is returned. a special treatment of the ""gif"" format.; If ""gif"" is not provided with the local Qt installation; replace ""gif"" format with ""png"" one. TQtApplication * CreateQtApplicationImp(); The method to instantiate the QApplication if needed. void PostQtEvent(QObject* receiver, QEvent* event); Qt announced that QThread::postEvent to become obsolete and; we have to ",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:10627,Security,Hash,Hash,10627,"extDecoder(); virtual voidGetTextExtent(UInt_t& w, UInt_t& h, char* mess); virtual Font_tTAttText::GetTextFont() const; virtual Float_tGetTextMagnitude(); virtual Float_tTAttText::GetTextSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; static TVirtualX*GetVirtualX(); virtual Visual_tGetVisual() const; virtual voidGetWindowAttributes(Window_t id, WindowAttributes_t& attr); virtual Window_tGetWindowID(Int_t wid); virtual voidGetWindowSize(Drawable_t id, Int_t& x, Int_t& y, UInt_t& w, UInt_t& h); virtual voidGrabButton(Window_t id, EMouseButton button, UInt_t modifier, UInt_t evmask, Window_t confine, Cursor_t cursor, Bool_t grab = kTRUE); virtual voidGrabKey(Window_t id, Int_t keycode, UInt_t modifier, Bool_t grab = kTRUE); virtual voidGrabPointer(Window_t id, UInt_t evmask, Window_t confine, Cursor_t cursor, Bool_t grab = kTRUE, Bool_t owner_events = kTRUE); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual Bool_tHasTTFonts() const; virtual voidIconifyWindow(Window_t id); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Bool_tInit(void* display = 0); virtual Int_tInitWindow(ULong_t window); virtual voidTObject::Inspect() constMENU ; static TVirtualX*&TVirtualX::Instance(); virtual Atom_tInternAtom(const char* atom_name, Bool_t only_if_exist); virtual voidIntersectRegion(Region_t rega, Region_t regb, Region_t result); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTVirtualX::IsCmdThread() const; static Int_tIsCoinLoaded(); virtual Bool_tIsDNDAware(Window_t win, Atom_t* typelist); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsHandleValid(Window_t id); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() c",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:21463,Testability,Test,TestBit,21463,"idSetWindowBackgroundPixmap(Window_t id, Pixmap_t pxm); virtual voidSetWindowName(Window_t id, char* name); virtual voidSetWMPosition(Window_t id, Int_t x, Int_t y); virtual voidSetWMSize(Window_t id, UInt_t w, UInt_t h); virtual voidSetWMSizeHints(Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); virtual voidSetWMState(Window_t id, EInitialState state); virtual voidSetWMTransientHint(Window_t id, Window_t main_id); virtual voidTVirtualX::ShapeCombineMask(Window_t id, Int_t x, Int_t y, Pixmap_t mask); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSubtractRegion(Region_t rega, Region_t regb, Region_t result); virtual Int_tSupportsExtension(const char* ext) const; virtual voidTVirtualX::Sync(Int_t mode); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TQtTextProxy*TextProxy(); virtual Int_tTextWidth(FontStruct_t font, const char* s, Int_t len); TGQt(); TGQt(const TGQt& vx); TGQt(const char* name, const char* title); virtual voidTranslateCoordinates(Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t& dest_x, Int_t& dest_y, Window_t& child); virtual voidUnionRectWithRegion(Rectangle_t* rect, Region_t src, Region_t dest); virtual voidUnionRegion(Region_t rega, Region_t regb, Region_t result); virtual voidUnmapWindow(Window_t id); virtual voidUpdate(Int_t mode = 0); virtual voidUpdateWindow(Int_t mode); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual voidWarp(Int_t ix, Int_t iy); virtual voidWarp(Int_t ix, Int_t iy, Window_t id); static QWidget*wid(Window_t id); static Window_twid(TQtClientWidget* widget); static QWidget*winid(Window_t id); virtual voidWMDeleteNotify(Window_t id); virt",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:21502,Testability,Test,TestBits,21502,", Pixmap_t pxm); virtual voidSetWindowName(Window_t id, char* name); virtual voidSetWMPosition(Window_t id, Int_t x, Int_t y); virtual voidSetWMSize(Window_t id, UInt_t w, UInt_t h); virtual voidSetWMSizeHints(Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); virtual voidSetWMState(Window_t id, EInitialState state); virtual voidSetWMTransientHint(Window_t id, Window_t main_id); virtual voidTVirtualX::ShapeCombineMask(Window_t id, Int_t x, Int_t y, Pixmap_t mask); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSubtractRegion(Region_t rega, Region_t regb, Region_t result); virtual Int_tSupportsExtension(const char* ext) const; virtual voidTVirtualX::Sync(Int_t mode); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TQtTextProxy*TextProxy(); virtual Int_tTextWidth(FontStruct_t font, const char* s, Int_t len); TGQt(); TGQt(const TGQt& vx); TGQt(const char* name, const char* title); virtual voidTranslateCoordinates(Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t& dest_x, Int_t& dest_y, Window_t& child); virtual voidUnionRectWithRegion(Rectangle_t* rect, Region_t src, Region_t dest); virtual voidUnionRegion(Region_t rega, Region_t regb, Region_t result); virtual voidUnmapWindow(Window_t id); virtual voidUpdate(Int_t mode = 0); virtual voidUpdateWindow(Int_t mode); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual voidWarp(Int_t ix, Int_t iy); virtual voidWarp(Int_t ix, Int_t iy, Window_t id); static QWidget*wid(Window_t id); static Window_twid(TQtClientWidget* widget); static QWidget*winid(Window_t id); virtual voidWMDeleteNotify(Window_t id); virtual Int_tTObject::Write(const char* name",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:1461,Usability,Clear,Clear,1461,"::AbstractMethod(const char* method) const; virtual Int_tTVirtualX::AddPixmap(ULong_t pixid, UInt_t w, UInt_t h); virtual Int_tAddWindow(ULong_t qwid, UInt_t w, UInt_t h); virtual Bool_tAllocColor(Colormap_t cmap, ColorStruct_t& color); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualX::BeginModalSessionFor(Window_t window); virtual voidBell(Int_t percent); virtual voidTObject::Browse(TBrowser* b); virtual voidChangeActivePointerGrab(Window_t, UInt_t, Cursor_t); virtual voidChangeGC(GContext_t gc, GCValues_t* gval); virtual voidChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); virtual voidChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len); virtual voidChangeWindowAttributes(Window_t id, SetWindowAttributes_t* attr); virtual Bool_tCheckEvent(Window_t id, EGEventType type, Event_t& ev); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidClearWindow(); virtual voidClearWindow(Window_t id); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidCloseDisplay(); virtual voidClosePixmap(); virtual voidCloseWindow(); static intCoinFlag(); virtual const QColor&ColorIndex(Color_t indx) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidConvertPrimarySelection(Window_t id, Atom_t clipboard, Time_t when); virtual voidConvertSelection(Window_t, Atom_t&, Atom_t&, Atom_t&, Time_t&); virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y); virtual voidCopyGC(GContext_t org, GContext_t dest, Mask_t mask); virtual voidCopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); virtual voidCopyPixmap(const QPixmap& p, Int_t px1, Int_t py1); virtual Pix",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:25021,Usability,feedback,feedback,25021,"::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TVirtualX::ETextSetModeTVirtualX::kLoad; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TVirtualX::ETextModeTVirtualX::kOpaque; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TVirtualX::EDrawModeTVirtualX::kXor; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tfBlockRGBProtect against color double setting; Float_tfCharacterUpXCharacter Up vector along X; Float_tfCharacterUpYCharacter Up vector along Y; TGQt::TQTCLIPMAPfClipMap; QTextCodec*fCodecThe Current text decoder; TGQt::COLORMAPfColorMapto back the TG widgets; ECursorfCursorCurrent cursor number;; QVector<QCursor*>fCursors; Int_tfDisplayOpened; QPainter::CompositionModefDrawMode; TVirtualX::EDrawModeTVirtualX::fDrawModeDrawing mode; TQtEmitterfEmitterobject to emit Qt signals on behalf of TVirtualX; Bool_tfFeedBackModeTCanvas feedback mode; TQtFeedBackWidget*fFeedBackWidgetThe dedicated widget for TCanvas feedback mode; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; QStringfFontTextCodeThe default code text code page (from the Gui.DefaultFont); Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tfMarkerStyle; Style_tTAttMarker::fMarkerStyleMarker style; TStringTNamed::fNameobject identifier; QMap<Color_t,QColor*>fPallete; TQtClientWidget*fPointerGrabber; QPaintDevice*fPrevWindowPointer to the previous ""Window""; TQtBrush*fQBrush; TQtClientFilter*fQClientFilter; TQtEventQueue*fQClientFilterBuffer; TQtClientGuardfQClientGuardguard TQtClientWibdget against of dead poi",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:25102,Usability,feedback,feedback,25102,"::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TVirtualX::ETextSetModeTVirtualX::kLoad; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TVirtualX::ETextModeTVirtualX::kOpaque; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TVirtualX::EDrawModeTVirtualX::kXor; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tfBlockRGBProtect against color double setting; Float_tfCharacterUpXCharacter Up vector along X; Float_tfCharacterUpYCharacter Up vector along Y; TGQt::TQTCLIPMAPfClipMap; QTextCodec*fCodecThe Current text decoder; TGQt::COLORMAPfColorMapto back the TG widgets; ECursorfCursorCurrent cursor number;; QVector<QCursor*>fCursors; Int_tfDisplayOpened; QPainter::CompositionModefDrawMode; TVirtualX::EDrawModeTVirtualX::fDrawModeDrawing mode; TQtEmitterfEmitterobject to emit Qt signals on behalf of TVirtualX; Bool_tfFeedBackModeTCanvas feedback mode; TQtFeedBackWidget*fFeedBackWidgetThe dedicated widget for TCanvas feedback mode; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; QStringfFontTextCodeThe default code text code page (from the Gui.DefaultFont); Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tfMarkerStyle; Style_tTAttMarker::fMarkerStyleMarker style; TStringTNamed::fNameobject identifier; QMap<Color_t,QColor*>fPallete; TQtClientWidget*fPointerGrabber; QPaintDevice*fPrevWindowPointer to the previous ""Window""; TQtBrush*fQBrush; TQtClientFilter*fQClientFilter; TQtEventQueue*fQClientFilterBuffer; TQtClientGuardfQClientGuardguard TQtClientWibdget against of dead poi",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:30345,Usability,Clear,ClearWindow,30345," Qt GUI initialization-. Int_t CreatROOTThread(); dummy*-*-*-*-; -. Int_t RegisterWid(QPaintDevice* wid); register QWidget for the embedded TCanvas. Int_t UnRegisterWid(QPaintDevice* wid); unregister QWidget to the TCanvas; return = Root registration Id or zero if the wd was not registered. Bool_t IsRegistered(QPaintDevice* wid); Check whether the object has been registered. Int_t InitWindow(ULong_t window); -; *-* if window == 0 InitWindow creates its own instance of TQtWindowsObject object; -; *-* Create a new windows; -; window is QWidget. Int_t OpenPixmap(UInt_t w, UInt_t h); *-* Create a new pixmap object. const QColor & ColorIndex(Color_t indx) const; Define the QColor object by ROOT color index. UInt_t ExecCommand(TGWin32Command* code); deprecated. void SetDoubleBufferOFF(); deprecated. void SetDoubleBufferON(); deprecated. void GetPlanes(Int_t& nplanes); Get maximum number of planes*-; *-* ============================; *-* nplanes : number of bit planes; *. void ClearWindow(); Clear current window. void ClosePixmap(); Delete the current pixmap. void CloseWindow(); Delete the current window. void DeleteSelectedObj(); Delete the current Qt object. QRect GetQRect(QPaintDevice& dev); Define the rectangle of the current ROOT selection. void CopyPixmap(int wd, int xpos, int ypos); Copy the pixmap wd at the position xpos, ypos in the current window. void CopyPixmap(const QPixmap& p, Int_t px1, Int_t py1); Copy the pixmap p at the position xpos, ypos in the current window. void CreateOpenGLContext(Int_t wid = 0); Create OpenGL context for win windows (for ""selected"" Window by default); printf("" TGQt::CreateOpenGLContext for wd = %x fSelected= %x, threadID= %d \n"",wd,fSelectedWindow,; GetCurrentThreadId());. void DeleteOpenGLContext(Int_t wid = 0); Delete OpenGL context for win windows (for ""selected"" Window by default). void DrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, TVirtualX::EBoxMode mode); Draw a box.; mode=0 hollow (kHollow); mode=1 solid (kSolid). void Dr",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:30360,Usability,Clear,Clear,30360," Qt GUI initialization-. Int_t CreatROOTThread(); dummy*-*-*-*-; -. Int_t RegisterWid(QPaintDevice* wid); register QWidget for the embedded TCanvas. Int_t UnRegisterWid(QPaintDevice* wid); unregister QWidget to the TCanvas; return = Root registration Id or zero if the wd was not registered. Bool_t IsRegistered(QPaintDevice* wid); Check whether the object has been registered. Int_t InitWindow(ULong_t window); -; *-* if window == 0 InitWindow creates its own instance of TQtWindowsObject object; -; *-* Create a new windows; -; window is QWidget. Int_t OpenPixmap(UInt_t w, UInt_t h); *-* Create a new pixmap object. const QColor & ColorIndex(Color_t indx) const; Define the QColor object by ROOT color index. UInt_t ExecCommand(TGWin32Command* code); deprecated. void SetDoubleBufferOFF(); deprecated. void SetDoubleBufferON(); deprecated. void GetPlanes(Int_t& nplanes); Get maximum number of planes*-; *-* ============================; *-* nplanes : number of bit planes; *. void ClearWindow(); Clear current window. void ClosePixmap(); Delete the current pixmap. void CloseWindow(); Delete the current window. void DeleteSelectedObj(); Delete the current Qt object. QRect GetQRect(QPaintDevice& dev); Define the rectangle of the current ROOT selection. void CopyPixmap(int wd, int xpos, int ypos); Copy the pixmap wd at the position xpos, ypos in the current window. void CopyPixmap(const QPixmap& p, Int_t px1, Int_t py1); Copy the pixmap p at the position xpos, ypos in the current window. void CreateOpenGLContext(Int_t wid = 0); Create OpenGL context for win windows (for ""selected"" Window by default); printf("" TGQt::CreateOpenGLContext for wd = %x fSelected= %x, threadID= %d \n"",wd,fSelectedWindow,; GetCurrentThreadId());. void DeleteOpenGLContext(Int_t wid = 0); Delete OpenGL context for win windows (for ""selected"" Window by default). void DrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, TVirtualX::EBoxMode mode); Draw a box.; mode=0 hollow (kHollow); mode=1 solid (kSolid). void Dr",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGQt.html:41550,Usability,simpl,simple,41550,"-bold-r-normal ""Arial"" 0 8; *-* 7 : helvetica-bold-o-normal ""Arial"" 1 8; *-* 8 : courier-medium-r-normal ""Courier New"" 0 5; *-* 9 : courier-medium-o-normal ""Courier New"" 1 5; *-* 10 : courier-bold-r-normal ""Courier New"" 0 8; *-* 11 : courier-bold-o-normal ""Courier New"" 1 8; *-* 12 : symbol-medium-r-normal ""Symbol"" 0 6; *-* 13 : times-medium-r-normal ""Times New Roman"" 0 5; *-* 14 : ""Wingdings"" 0 5. void SetTextSize(Float_t textsize); Set current text size*-*-; *-* =====================. void SetTitle(const char* title); Set title of the object*-; *-* =======================. void UpdateWindow(Int_t mode); Update display.; mode : (1) update; (0) sync. Int_t WriteGIF(char* name). Writes the current active window into pixmap file.; The format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no extension is provided the ""png"" format is used by default. Returns 1 in case of success,; 0 otherwise; Note: this method may not produce the expected result been called; ---- from the ROOT prompt by simple reason:; The active window will be console window; rather the last selected ROOT canvas. void WritePixmap(Int_t wid, UInt_t w, UInt_t h, char* pxname); Write the pixmap wd in the bitmap file pxname in JPEG.; wd : Pixmap address; w,h : Width and height of the pixmap.; if w = h = -1 the size of the pimxap is equal the size the wd size; pxname : pixmap file name; The format is defined by the file name extension; like ""png"",""jpg"",""bmp"" . . .; If no or some unknown extension is provided then; the ""png"" format is used by default; --; Take in account the special ROOT filename syntax 26.12.2006 vf; ""gif+NN"" - an animated GIF file is produced, where NN is delay in 10ms units. TVirtualX * GetVirtualX(); { return fgTQt;}. Int_t LoadQt(const char* shareLibFileName); Make sure we load the GUI DLL from the gui thread. Int_t processQtEvents(Int_t maxtime = 300); Force processing the Qt events only without entering the ROOT event loop. void operator=(const TGQt& ). TGQt()",MatchSource.WIKI,root/html604/TGQt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGQt.html
https://root.cern/root/html604/TGRadioButton.html:2208,Availability,avail,available,2208,"_BUTTON, button id, user data. The purpose of TGCheckButton and TGRadioButton is for selecting; different options. Like text buttons, they have text or hot string; as a label. Radio buttons are grouped usually in logical sets of two or more; buttons to present mutually exclusive choices. Selecting a check button will generate the event:; kC_COMMAND, kCM_CHECKBUTTON, button id, user data. Selecting a radio button will generate the event:; kC_COMMAND, kCM_RADIOBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this; command string will be executed via the interpreter whenever a; button is selected. A command string can contain the macros:; $MSG -- kC_COMMAND, kCM[CHECK|RADIO]BUTTON packed message; (use GET_MSG() and GET_SUBMSG() to unpack); $PARM1 -- button id; $PARM2 -- user data pointer; Before executing these macros are expanded into the respective; Long_t's. TGSplitButton implements a button with added menu functionality.; There are 2 modes of operation available. If the button is split, a menu will popup when the menu area of the; button is clicked. Activating a menu item changes the functionality; of the button by having it emit a additional signal when it is; clicked. The signal emitted when the button is clicked, is the; ItemClicked(Int_t) signal with a different fixed value for the; Int_t that corresponds to the id of the activated menu entry. If the button is not split, clicking it will popup the menu and the; ItemClicked(Int_t) signal will be emitted when a menu entry is; acitvated. The value of the Int_t is again equal to the value of; the id of the activated menu entry. The mode of operation of a SplitButton can be changed on the fly; by calling the SetSplit(Bool_t) method. Function Members (Methods); public:. virtual~TGRadioButton(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTGButton::AllowStayDown(Bool_t a); virtu",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:6545,Availability,Error,Error,6545,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; Int_tTGTextButton::GetBottomMargin() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static FontStruct_tGetDefaultFontStruct(); static Pixel_tTGFrame::GetDefaultFrameBackground(); static const TGGC&GetDefaultGC(); virtual UInt_tTG",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:6674,Availability,error,error,6674," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; Int_tTGTextButton::GetBottomMargin() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static FontStruct_tGetDefaultFontStruct(); static Pixel_tTGFrame::GetDefaultFrameBackground(); static const TGGC&GetDefaultGC(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefaultSize() const",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:6758,Availability,error,error,6758,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; Int_tTGTextButton::GetBottomMargin() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static FontStruct_tGetDefaultFontStruct(); static Pixel_tTGFrame::GetDefaultFrameBackground(); static const TGGC&GetDefaultGC(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDDa",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:22403,Availability,mask,mask,22403,,MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:24142,Availability,down,down,24142,tButton::fMTopmargin top; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; GContext_tTGButton::fNormGCgraphics context used for drawing button; const TGPicture*fOffbutton OFF picture; const TGPicture*fOnbutton ON picture; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; EButtonStatefPrevStateprevious radio button state; Bool_tTGTextButton::fPrevStateOnbit to save previos state On/Off; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStateTGButton::fStatebutton state; Bool_tTGTextButton::fStateOnbit to save the state across disable/enable; Bool_tTGButton::fStayDowntrue if button has to stay down; UInt_tTGButton::fStylebutton style (modern or classic); UInt_tTGButton::fTHeightbutton height; TGTextLayout*TGTextButton::fTLayouttext layout; Int_tTGTextButton::fTModetext justify mode; UInt_tTGButton::fTWidthbutton width; TGToolTip*TGButton::fTiptool tip associated with button; void*TGButton::fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGTextButton::fWrapLengthwrap length; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFo,MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:14404,Deployability,Release,Released,14404,"har* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGButton::Pressed()SIGNAL ; virtual voidTGFrame::Print(Option_t* option = """") const; virtual voidTGFrame::ProcessedConfigure(Event_t* event)SIGNAL ; virtual voidTGFrame::ProcessedEvent(Event_t* event)SIGNAL ; virtual Bool_tTGFrame::ProcessMessage(Long_t, Long_t, Long_t); virtual voidTGWindow::RaiseWindow(); virtual Int_tTObject::Read(const char* name); virtual voidTGFrame::ReallyDelete(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTGButton::Released()SIGNAL ; voidTGFrame::RemoveInput(UInt_t emask); virtual voidTGFrame::ReparentWindow(const TGWindow* p, Int_t x = 0, Int_t y = 0); virtual voidTGWindow::RequestFocus(); voidTObject::ResetBit(UInt_t f); virtual voidTGFrame::Resize(TGDimension size); virtual voidTGFrame::Resize(UInt_t w = 0, UInt_t h = 0); virtual voidTGObject::SaveAs(const char* filename = """", Option_t* option = """") const; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTGFrame::SaveUserColor(ostream& out, Option_t*); virtual voidTGFrame::SendMessage(const TGWindow* w, Long_t msg, Long_t parm1, Long_t parm2); virtual voidTGFrame::SetBackgroundColor(Pixel_t back); virtual voidTGWindow::SetBackgroundPixmap(Pixmap_t pixmap); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGTextButton::SetBottomMargin(Int_t val); virtual voidTGFrame::SetCleanup(Int_t = kLocalCleanup); virtual voidTGWidget::SetCommand(const char* command); virtual voidSetDisabledAndSelected(Bool",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:15913,Deployability,TOGGLE,TOGGLE,15913,"n_t*); virtual voidTGFrame::SendMessage(const TGWindow* w, Long_t msg, Long_t parm1, Long_t parm2); virtual voidTGFrame::SetBackgroundColor(Pixel_t back); virtual voidTGWindow::SetBackgroundPixmap(Pixmap_t pixmap); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGTextButton::SetBottomMargin(Int_t val); virtual voidTGFrame::SetCleanup(Int_t = kLocalCleanup); virtual voidTGWidget::SetCommand(const char* command); virtual voidSetDisabledAndSelected(Bool_t); voidTGFrame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGButton::SetDown(Bool_t on = kTRUE, Bool_t emit = kFALSE); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGButton::SetEnabled(Bool_t e = kTRUE)TOGGLE GETTER ; virtual voidTGTextButton::SetFont(FontStruct_t font, Bool_t global = kFALSE); virtual voidTGTextButton::SetFont(const char* fontName, Bool_t global = kFALSE); virtual voidTGTextButton::SetForegroundColor(Pixel_t fore); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGButton::SetGroup(TGButtonGroup* gr); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGTextButton::SetLeftMargin(Int_t val); virtual voidTGWindow::SetMapSubwindows(Bool_t); voidTGTextButton::SetMargins(Int_t left = 0, Int_t right = 0, Int_t top = 0, Int_t bottom = 0); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGButton::SetOn(Bool_t on = kTRUE, Bool_t emit = kFALSE); virtual voidTGTextButton::SetRi",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:18751,Deployability,Toggle,Toggle,18751,"xtButton::SetText(const TString& new_label); virtual voidTGTextButton::SetTextColor(Pixel_t color, Bool_t global = kFALSE); virtual voidTGTextButton::SetTextJustify(Int_t tmode); virtual voidTGTextButton::SetTitle(const char* label); virtual voidTGButton::SetToolTipText(const char* text, Long_t delayms = 400)MENU ; virtual voidTGTextButton::SetTopMargin(Int_t val); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGButton::SetUserData(void* userData); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); voidTGTextButton::SetWrapLength(Int_t wl); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGRadioButton(const TGWindow* p, TGHotString* s, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); TGRadioButton(const TGWindow* p = 0, const char* s = 0, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); TGRadioButton(const TGWindow* p, const char* s, const char* cmd, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); virtual voidTGButton::Toggle(Bool_t emit = kFALSE); virtual voidTGButton::Toggled(Bool_t on)SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:18803,Deployability,Toggle,Toggled,18803,"xtButton::SetText(const TString& new_label); virtual voidTGTextButton::SetTextColor(Pixel_t color, Bool_t global = kFALSE); virtual voidTGTextButton::SetTextJustify(Int_t tmode); virtual voidTGTextButton::SetTitle(const char* label); virtual voidTGButton::SetToolTipText(const char* text, Long_t delayms = 400)MENU ; virtual voidTGTextButton::SetTopMargin(Int_t val); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGButton::SetUserData(void* userData); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); voidTGTextButton::SetWrapLength(Int_t wl); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGRadioButton(const TGWindow* p, TGHotString* s, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); TGRadioButton(const TGWindow* p = 0, const char* s = 0, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); TGRadioButton(const TGWindow* p, const char* s, const char* cmd, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); virtual voidTGButton::Toggle(Bool_t emit = kFALSE); virtual voidTGButton::Toggled(Bool_t on)SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:25614,Deployability,release,released,25614,e; Bool_tTGTextButton::fPrevStateOnbit to save previos state On/Off; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStateTGButton::fStatebutton state; Bool_tTGTextButton::fStateOnbit to save the state across disable/enable; Bool_tTGButton::fStayDowntrue if button has to stay down; UInt_tTGButton::fStylebutton style (modern or classic); UInt_tTGButton::fTHeightbutton height; TGTextLayout*TGTextButton::fTLayouttext layout; Int_tTGTextButton::fTModetext justify mode; UInt_tTGButton::fTWidthbutton width; TGToolTip*TGButton::fTiptool tip associated with button; void*TGButton::fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGTextButton::fWrapLengthwrap length; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled.,MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:1934,Integrability,message,message,1934,"""&Exit"") that; defines the label ""Exit"" and keyboard mnemonics Alt+E for button; selection. A button label can be changed by SetText(new_label). Selecting a text or picture button will generate the event:; kC_COMMAND, kCM_BUTTON, button id, user data. The purpose of TGCheckButton and TGRadioButton is for selecting; different options. Like text buttons, they have text or hot string; as a label. Radio buttons are grouped usually in logical sets of two or more; buttons to present mutually exclusive choices. Selecting a check button will generate the event:; kC_COMMAND, kCM_CHECKBUTTON, button id, user data. Selecting a radio button will generate the event:; kC_COMMAND, kCM_RADIOBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this; command string will be executed via the interpreter whenever a; button is selected. A command string can contain the macros:; $MSG -- kC_COMMAND, kCM[CHECK|RADIO]BUTTON packed message; (use GET_MSG() and GET_SUBMSG() to unpack); $PARM1 -- button id; $PARM2 -- user data pointer; Before executing these macros are expanded into the respective; Long_t's. TGSplitButton implements a button with added menu functionality.; There are 2 modes of operation available. If the button is split, a menu will popup when the menu area of the; button is clicked. Activating a menu item changes the functionality; of the button by having it emit a additional signal when it is; clicked. The signal emitted when the button is clicked, is the; ItemClicked(Int_t) signal with a different fixed value for the; Int_t that corresponds to the id of the activated menu entry. If the button is not split, clicking it will popup the menu and the; ItemClicked(Int_t) signal will be emitted when a menu entry is; acitvated. The value of the Int_t is again equal to the value of; the id of the activated menu entry. The mode of operation of a SplitButton can be changed on the fly; by calling the SetSplit(Bool_t) method. Function Members (Method",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:13045,Integrability,Message,Message,13045,"ce() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tIsDown() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tIsExclusiveToggle() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; virtual Bool_tIsOn() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tIsToggleButton() const; Bool_tTObject::IsZombie() const; virtual voidTGTextButton::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGWindow::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGButton::Pressed()SIGNAL ; virtual voidTGFrame::Print(Option_t* option = """") const; virtual voidTGFrame::Proce",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:11691,Modifiability,Inherit,InheritsFrom,11691,"andleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; Bool_tTGTextButton::HasOwnFont() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; virtual Bool_tIsDisabledAndSelected() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tIsDown() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tIsExclusiveToggle() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; virtual Bool_tIsOn() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tIsToggleButton() const; Bool_tTObject::IsZombie() const; virtual voidTGTextButton::Layout(); virtual v",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:11757,Modifiability,Inherit,InheritsFrom,11757,"TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; Bool_tTGTextButton::HasOwnFont() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; virtual Bool_tIsDisabledAndSelected() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tIsDown() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tIsExclusiveToggle() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; virtual Bool_tIsOn() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tIsToggleButton() const; Bool_tTObject::IsZombie() const; virtual voidTGTextButton::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(cons",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:25851,Modifiability,Inherit,Inheritance,25851,"::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRadioButton(const TGWindow* p, TGHotString* s, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); Create a radio button widget. The hotstring will be adopted and deleted; by the radio button. TGRadioButton(const TGWindow* p = 0, const char* s = 0, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); Create a radio button widget. TGRadioButton(const TGWindow* p, const char* s, const char* cmd, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); Create a radio button widget. void Init(); Common radio button initialization. ~TGRadioButton(); Delete a radio button. TGDimension GetDefaultSize() const; default size. void SetState(EButtonState state, Bool_t emit = kFALSE); Set radio button state. void SetDisabledAndSelected(Bool_t ); Set the state of a ra",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:25864,Modifiability,Inherit,Inherited,25864,"::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRadioButton(const TGWindow* p, TGHotString* s, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); Create a radio button widget. The hotstring will be adopted and deleted; by the radio button. TGRadioButton(const TGWindow* p = 0, const char* s = 0, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); Create a radio button widget. TGRadioButton(const TGWindow* p, const char* s, const char* cmd, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); Create a radio button widget. void Init(); Common radio button initialization. ~TGRadioButton(); Delete a radio button. TGDimension GetDefaultSize() const; default size. void SetState(EButtonState state, Bool_t emit = kFALSE); Set radio button state. void SetDisabledAndSelected(Bool_t ); Set the state of a ra",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:741,Performance,perform,perform,741,". TGRadioButton. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGRadioButton. class TGRadioButton: public TGTextButton. TGButton, TGTextButton, TGPictureButton, TGCheckButton,; TGRadioButton and TGSplitButton. This header defines all GUI button widgets. TGButton is a button abstract base class. It defines general button; behaviour. TGTextButton and TGPictureButton yield an action as soon as they are; clicked. These buttons usually provide fast access to frequently; used or critical commands. They may appear alone or placed in a; group. The action they perform can be inscribed with a meaningful tooltip; set by SetToolTipText(const char* text, Long_t delayms=400). The text button has a label indicating the action to be taken when; the button is pressed. The text can be a hot string (""&Exit"") that; defines the label ""Exit"" and keyboard mnemonics Alt+E for button; selection. A button label can be changed by SetText(new_label). Selecting a text or picture button will generate the event:; kC_COMMAND, kCM_BUTTON, button id, user data. The purpose of TGCheckButton and TGRadioButton is for selecting; different options. Like text buttons, they have text or hot string; as a label. Radio buttons are grouped usually in logical sets of two or more; buttons to present mutually exclusive choices. Selecting a check button will generate the event:; kC_COMMAND, kCM_CHECKBUTTON, button id, user data. Selecting a radio button will generate the event:; kC_COMMAND, kCM_RADIOBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this; command string will be executed via the interpreter whenever a; button is selected. A command string can contain the macros:; $MSG -- kC_COMMAND, kCM[CHECK|RADIO]BUTTON packed message; (use GET_MSG() and GET_SUBMSG() to unpack); $PARM1 -- butt",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:631,Security,access,access,631,". TGRadioButton. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGRadioButton. class TGRadioButton: public TGTextButton. TGButton, TGTextButton, TGPictureButton, TGCheckButton,; TGRadioButton and TGSplitButton. This header defines all GUI button widgets. TGButton is a button abstract base class. It defines general button; behaviour. TGTextButton and TGPictureButton yield an action as soon as they are; clicked. These buttons usually provide fast access to frequently; used or critical commands. They may appear alone or placed in a; group. The action they perform can be inscribed with a meaningful tooltip; set by SetToolTipText(const char* text, Long_t delayms=400). The text button has a label indicating the action to be taken when; the button is pressed. The text can be a hot string (""&Exit"") that; defines the label ""Exit"" and keyboard mnemonics Alt+E for button; selection. A button label can be changed by SetText(new_label). Selecting a text or picture button will generate the event:; kC_COMMAND, kCM_BUTTON, button id, user data. The purpose of TGCheckButton and TGRadioButton is for selecting; different options. Like text buttons, they have text or hot string; as a label. Radio buttons are grouped usually in logical sets of two or more; buttons to present mutually exclusive choices. Selecting a check button will generate the event:; kC_COMMAND, kCM_CHECKBUTTON, button id, user data. Selecting a radio button will generate the event:; kC_COMMAND, kCM_RADIOBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this; command string will be executed via the interpreter whenever a; button is selected. A command string can contain the macros:; $MSG -- kC_COMMAND, kCM[CHECK|RADIO]BUTTON packed message; (use GET_MSG() and GET_SUBMSG() to unpack); $PARM1 -- butt",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:11414,Security,Hash,Hash,11414,"rtual Atom_tTGFrame::HandleDNDPosition(Int_t, Int_t, Atom_t, Int_t, Int_t); virtual Bool_tTGFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGFrame::HandleDragDrop(TGFrame*, Int_t, Int_t, TGLayoutHints*); virtual Bool_tTGFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; Bool_tTGTextButton::HasOwnFont() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; virtual Bool_tIsDisabledAndSelected() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tIsDown() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tIsExclusiveToggle() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:1409,Testability,log,logical,1409," widgets. TGButton is a button abstract base class. It defines general button; behaviour. TGTextButton and TGPictureButton yield an action as soon as they are; clicked. These buttons usually provide fast access to frequently; used or critical commands. They may appear alone or placed in a; group. The action they perform can be inscribed with a meaningful tooltip; set by SetToolTipText(const char* text, Long_t delayms=400). The text button has a label indicating the action to be taken when; the button is pressed. The text can be a hot string (""&Exit"") that; defines the label ""Exit"" and keyboard mnemonics Alt+E for button; selection. A button label can be changed by SetText(new_label). Selecting a text or picture button will generate the event:; kC_COMMAND, kCM_BUTTON, button id, user data. The purpose of TGCheckButton and TGRadioButton is for selecting; different options. Like text buttons, they have text or hot string; as a label. Radio buttons are grouped usually in logical sets of two or more; buttons to present mutually exclusive choices. Selecting a check button will generate the event:; kC_COMMAND, kCM_CHECKBUTTON, button id, user data. Selecting a radio button will generate the event:; kC_COMMAND, kCM_RADIOBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this; command string will be executed via the interpreter whenever a; button is selected. A command string can contain the macros:; $MSG -- kC_COMMAND, kCM[CHECK|RADIO]BUTTON packed message; (use GET_MSG() and GET_SUBMSG() to unpack); $PARM1 -- button id; $PARM2 -- user data pointer; Before executing these macros are expanded into the respective; Long_t's. TGSplitButton implements a button with added menu functionality.; There are 2 modes of operation available. If the button is split, a menu will popup when the menu area of the; button is clicked. Activating a menu item changes the functionality; of the button by having it emit a additional signal when it is; clicked",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:18149,Testability,Test,TestBit,18149,"; virtual voidTGTextButton::SetText(TGHotString* new_label); virtual voidTGTextButton::SetText(const TString& new_label); virtual voidTGTextButton::SetTextColor(Pixel_t color, Bool_t global = kFALSE); virtual voidTGTextButton::SetTextJustify(Int_t tmode); virtual voidTGTextButton::SetTitle(const char* label); virtual voidTGButton::SetToolTipText(const char* text, Long_t delayms = 400)MENU ; virtual voidTGTextButton::SetTopMargin(Int_t val); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGButton::SetUserData(void* userData); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); voidTGTextButton::SetWrapLength(Int_t wl); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGRadioButton(const TGWindow* p, TGHotString* s, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); TGRadioButton(const TGWindow* p = 0, const char* s = 0, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); TGRadioButton(const TGWindow* p, const char* s, const char* cmd, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); virtual voidTGButton::Toggle(Bool_t emit = kFALSE); virtual voidTGButton::Toggled(Bool_t on)SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTO",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:18188,Testability,Test,TestBits,18188,"otString* new_label); virtual voidTGTextButton::SetText(const TString& new_label); virtual voidTGTextButton::SetTextColor(Pixel_t color, Bool_t global = kFALSE); virtual voidTGTextButton::SetTextJustify(Int_t tmode); virtual voidTGTextButton::SetTitle(const char* label); virtual voidTGButton::SetToolTipText(const char* text, Long_t delayms = 400)MENU ; virtual voidTGTextButton::SetTopMargin(Int_t val); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGButton::SetUserData(void* userData); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); voidTGTextButton::SetWrapLength(Int_t wl); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGRadioButton(const TGWindow* p, TGHotString* s, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); TGRadioButton(const TGWindow* p = 0, const char* s = 0, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); TGRadioButton(const TGWindow* p, const char* s, const char* cmd, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); virtual voidTGButton::Toggle(Bool_t emit = kFALSE); virtual voidTGButton::Toggled(Bool_t on)SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:3831,Usability,Clear,Clear,3831,,MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGRadioButton.html:19401,Usability,Clear,ClearFlags,19401,"w(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidEmitSignals(Bool_t wasUp = kTRUE); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidInit(); voidTObject::MakeZombie(); voidPSetState(EButtonState state, Bool_t emit); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGRadioButton&operator=(const TGRadioButton&); TGRadioButton(const TGRadioButton&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWin",MatchSource.WIKI,root/html604/TGRadioButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRadioButton.html
https://root.cern/root/html604/TGraph.html:2749,Availability,Error,Error,2749,"const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareY(const TGraph* gr, Int_t left, Int_t right); virtual voidComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidDrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidDrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidDrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExpand(Int_t newsize); virtual voidExpand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TFitResultPtrFit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrFit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidFitPanel()MENU ; virtual Double_tGetCorrelationFactor() const; vi",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:2962,Availability,error,error,2962," voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidDrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidDrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidDrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExpand(Int_t newsize); virtual voidExpand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TFitResultPtrFit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrFit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidFitPanel()MENU ; virtual Double_tGetCorrelationFactor() const; virtual Double_tGetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetEditable() const; virtual Double_tGetErrorX(Int_t bin) const; virtual Double_tGet",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:3046,Availability,error,error,3046,"n = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidDrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidDrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidDrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExpand(Int_t newsize); virtual voidExpand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TFitResultPtrFit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrFit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidFitPanel()MENU ; virtual Double_tGetCorrelationFactor() const; virtual Double_tGetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetEditable() const; virtual Double_tGetErrorX(Int_t bin) const; virtual Double_tGetErrorXhigh(Int_t bin) const; virtual Double_tGetErrorXlow(Int_t bin) const; virtual ",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:17576,Availability,error,errors,17576," can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. ~TGraph(); Graph default destructor. Double_t** AllocateArrays(Int_t Narrays, Int_t arraySize); Allocate arrays. void Apply(TF1* f); Apply function f to all the data points; f may be a 1-D function TF1 or 2-d function TF2; The Y values of the graph are replaced by the new values computed; using the function. void Browse(TBrowser* b); Browse. Double_t Chisquare(TF1* f1, Option_t* option = """") const; Return the chisquare of this graph with respect to f1.; The chisquare is computed as the sum of the quantity below at each point:. where x and y are the graph point coordinates and f1'(x) is the derivative of function f1(x).; This method to approximate the uncertainty in y because of the errors in x, is called; ""effective variance"" method.; In case of a pure TGraph, the denominator is 1.; In case of a TGraphErrors or TGraphAsymmErrors the errors are taken; into account.; By default the range of the graph is used whatever function range.; Use option ""R"" to use the function range. Bool_t CompareArg(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if point number ""left""'s argument (angle with respect to positive; x-axis) is bigger than that of point number ""right"". Can be used by Sort. Bool_t CompareX(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if fX[left] > fX[right]. Can be used by Sort. Bool_t CompareY(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if fY[left] > fY[right]. Can be used by Sort. Bool_t CompareRadius(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if point number ""left""'s distance to origin is bigger than; that of point number ""right"". Can be used by Sort. void ComputeRange(Double_t& xmin, Double_t& ymin, Doub",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:17730,Availability,error,errors,17730,"y of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. ~TGraph(); Graph default destructor. Double_t** AllocateArrays(Int_t Narrays, Int_t arraySize); Allocate arrays. void Apply(TF1* f); Apply function f to all the data points; f may be a 1-D function TF1 or 2-d function TF2; The Y values of the graph are replaced by the new values computed; using the function. void Browse(TBrowser* b); Browse. Double_t Chisquare(TF1* f1, Option_t* option = """") const; Return the chisquare of this graph with respect to f1.; The chisquare is computed as the sum of the quantity below at each point:. where x and y are the graph point coordinates and f1'(x) is the derivative of function f1(x).; This method to approximate the uncertainty in y because of the errors in x, is called; ""effective variance"" method.; In case of a pure TGraph, the denominator is 1.; In case of a TGraphErrors or TGraphAsymmErrors the errors are taken; into account.; By default the range of the graph is used whatever function range.; Use option ""R"" to use the function range. Bool_t CompareArg(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if point number ""left""'s argument (angle with respect to positive; x-axis) is bigger than that of point number ""right"". Can be used by Sort. Bool_t CompareX(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if fX[left] > fX[right]. Can be used by Sort. Bool_t CompareY(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if fY[left] > fY[right]. Can be used by Sort. Bool_t CompareRadius(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if point number ""left""'s distance to origin is bigger than; that of point number ""right"". Can be used by Sort. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute the x/y range of the points in this graph. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t i",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:22823,Availability,error,error,22823," Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); Fit this graph with function with name fname. interface to TGraph::Fit(TF1 *f1... fname is the name of an already predefined function created by TF1 or TF2; Predefined functions such as gaus, expo and poln are automatically; created by ROOT.; fname can also be a formula, accepted by the linear fitter (linear parts divided; by ""++"" sign), for example ""x++sin(x)"" for fitting ""[0]*x+[1]*sin(x)"". TFitResultPtr Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); Fit this graph with function f1. f1 is an already predefined function created by TF1.; Predefined functions such as gaus, expo and poln are automatically; created by ROOT. The list of fit options is given in parameter option.; option = ""W"" Set all weights to 1; ignore error bars; = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" User defined parameter settings are used for predefined functions; like ""gaus"", ""expo"", ""poln"", ""landau"".; Use this option when you want to fix one or more parameters for these functions.; = ""M"" More. Improve fit results.; It uses the IMPROVE command of TMinuit (see TMinuit::mnimpr); This algorithm attempts to improve the found local minimum by; searching for a better one.; = ""R"" Use the Range specified in the function range; = ""N"" Do not store the graphics function, do not draw; = ""0"" Do not plot the result of the fit. By default the fitted function; is drawn unless the option ""N"" above is specified.; = ""+"" Add this new fitted function to the list of fitted functions; (by default, any previous function is deleted); = ""C"" In case of linear fitting, do not calculate the chisquare; (saves time); = ""F"" If fitting a polN, use the minuit fitter; = ""EX0"" When fitting a TGraphErrors or TGraphAsymErrors do not co",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:23001,Availability,Error,Errors,23001," Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); Fit this graph with function with name fname. interface to TGraph::Fit(TF1 *f1... fname is the name of an already predefined function created by TF1 or TF2; Predefined functions such as gaus, expo and poln are automatically; created by ROOT.; fname can also be a formula, accepted by the linear fitter (linear parts divided; by ""++"" sign), for example ""x++sin(x)"" for fitting ""[0]*x+[1]*sin(x)"". TFitResultPtr Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); Fit this graph with function f1. f1 is an already predefined function created by TF1.; Predefined functions such as gaus, expo and poln are automatically; created by ROOT. The list of fit options is given in parameter option.; option = ""W"" Set all weights to 1; ignore error bars; = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" User defined parameter settings are used for predefined functions; like ""gaus"", ""expo"", ""poln"", ""landau"".; Use this option when you want to fix one or more parameters for these functions.; = ""M"" More. Improve fit results.; It uses the IMPROVE command of TMinuit (see TMinuit::mnimpr); This algorithm attempts to improve the found local minimum by; searching for a better one.; = ""R"" Use the Range specified in the function range; = ""N"" Do not store the graphics function, do not draw; = ""0"" Do not plot the result of the fit. By default the fitted function; is drawn unless the option ""N"" above is specified.; = ""+"" Add this new fitted function to the list of fitted functions; (by default, any previous function is deleted); = ""C"" In case of linear fitting, do not calculate the chisquare; (saves time); = ""F"" If fitting a polN, use the minuit fitter; = ""EX0"" When fitting a TGraphErrors or TGraphAsymErrors do not co",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:23973,Availability,error,errors,23973,"ode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" User defined parameter settings are used for predefined functions; like ""gaus"", ""expo"", ""poln"", ""landau"".; Use this option when you want to fix one or more parameters for these functions.; = ""M"" More. Improve fit results.; It uses the IMPROVE command of TMinuit (see TMinuit::mnimpr); This algorithm attempts to improve the found local minimum by; searching for a better one.; = ""R"" Use the Range specified in the function range; = ""N"" Do not store the graphics function, do not draw; = ""0"" Do not plot the result of the fit. By default the fitted function; is drawn unless the option ""N"" above is specified.; = ""+"" Add this new fitted function to the list of fitted functions; (by default, any previous function is deleted); = ""C"" In case of linear fitting, do not calculate the chisquare; (saves time); = ""F"" If fitting a polN, use the minuit fitter; = ""EX0"" When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the coordinate; = ""ROB"" In case of linear fitting, compute the LTS regression; coefficients (robust (resistant) regression), using; the default fraction of good points; ""ROB=0.x"" - compute the LTS regression coefficients, using; 0.x as a fraction of good points; = ""S"" The result of the fit is returned in the TFitResultPtr; (see below Access to the Fit Result). When the fit is drawn (by default), the parameter goption may be used; to specify a list of graphics options. See TGraphPainter for a complete; list of these options. In order to use the Range option, one must first create a function; with the expression to be fitted. For example, if your graph; has a defined range between -4 and 4 and you want to fit a gaussian; only in the interval 1 to 3, you can do:; TF1 *f1 = new TF1(""f1"",""gaus"",1,3);; graph->Fit(""f1"",""R"");. Who is calling this function:. Note that this function is called when calling TGraphErrors::Fi",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:24076,Availability,robust,robust,24076,"ode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" User defined parameter settings are used for predefined functions; like ""gaus"", ""expo"", ""poln"", ""landau"".; Use this option when you want to fix one or more parameters for these functions.; = ""M"" More. Improve fit results.; It uses the IMPROVE command of TMinuit (see TMinuit::mnimpr); This algorithm attempts to improve the found local minimum by; searching for a better one.; = ""R"" Use the Range specified in the function range; = ""N"" Do not store the graphics function, do not draw; = ""0"" Do not plot the result of the fit. By default the fitted function; is drawn unless the option ""N"" above is specified.; = ""+"" Add this new fitted function to the list of fitted functions; (by default, any previous function is deleted); = ""C"" In case of linear fitting, do not calculate the chisquare; (saves time); = ""F"" If fitting a polN, use the minuit fitter; = ""EX0"" When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the coordinate; = ""ROB"" In case of linear fitting, compute the LTS regression; coefficients (robust (resistant) regression), using; the default fraction of good points; ""ROB=0.x"" - compute the LTS regression coefficients, using; 0.x as a fraction of good points; = ""S"" The result of the fit is returned in the TFitResultPtr; (see below Access to the Fit Result). When the fit is drawn (by default), the parameter goption may be used; to specify a list of graphics options. See TGraphPainter for a complete; list of these options. In order to use the Range option, one must first create a function; with the expression to be fitted. For example, if your graph; has a defined range between -4 and 4 and you want to fit a gaussian; only in the interval 1 to 3, you can do:; TF1 *f1 = new TF1(""f1"",""gaus"",1,3);; graph->Fit(""f1"",""R"");. Who is calling this function:. Note that this function is called when calling TGraphErrors::Fi",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:24991,Availability,error,error,24991,"raphErrors or TGraphAsymErrors do not consider errors in the coordinate; = ""ROB"" In case of linear fitting, compute the LTS regression; coefficients (robust (resistant) regression), using; the default fraction of good points; ""ROB=0.x"" - compute the LTS regression coefficients, using; 0.x as a fraction of good points; = ""S"" The result of the fit is returned in the TFitResultPtr; (see below Access to the Fit Result). When the fit is drawn (by default), the parameter goption may be used; to specify a list of graphics options. See TGraphPainter for a complete; list of these options. In order to use the Range option, one must first create a function; with the expression to be fitted. For example, if your graph; has a defined range between -4 and 4 and you want to fit a gaussian; only in the interval 1 to 3, you can do:; TF1 *f1 = new TF1(""f1"",""gaus"",1,3);; graph->Fit(""f1"",""R"");. Who is calling this function:. Note that this function is called when calling TGraphErrors::Fit; or TGraphAsymmErrors::Fit ot TGraphBentErrors::Fit; See the discussion below on error calulation. Linear fitting:. When the fitting function is linear (contains the ""++"" sign) or the fitting; function is a polynomial, a linear fitter is initialised.; To create a linear function, use the following syntax: linear parts; separated by ""++"" sign.; Example: to fit the parameters of ""[0]*x + [1]*sin(x)"", create a; TF1 *f1=new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; For such a TF1 you don't have to set the initial conditions.; Going via the linear fitter for functions, linear in parameters, gives a; considerable advantage in speed. Setting initial conditions:. Parameters must be initialized before invoking the Fit function.; The setting of the parameter initial values is automatic for the; predefined functions : poln, expo, gaus, landau. One can however disable; this automatic computation by specifying the option ""B"".; You can specify boundary limits for some or all parameters via; f1->SetParLimits(p_number, pa",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:27164,Availability,error,errors,27164,"its(5, 1,1);; With this setup, parameters 0->3 can vary freely.; Parameter 4 has boundaries [-10,-4] with initial value -8.; Parameter 5 is fixed to 100. Fit range:. The fit range can be specified in two ways:; - specify rxmax > rxmin (default is rxmin=rxmax=0); - specify the option ""R"". In this case, the function will be taken; instead of the full graph range. Changing the fitting function:. By default a chi2 fitting function is used for fitting a TGraph.; The function is implemented in FitUtil::EvaluateChi2.; In case of TGraphErrors an effective chi2 is used (see below TGraphErrors fit); To specify a User defined fitting function, specify option ""U"" and; call the following functions:; TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f,; Double_t *u, Int_t flag);. TGraphErrors fit:. In case of a TGraphErrors object, when x errors are present, the error along x,; is projected along the y-direction by calculating the function at the points x-exlow and; x+exhigh. The chisquare is then computed as the sum of the quantity below at each point:. where x and y are the point coordinates, and f'(x) is the derivative of the; function f(x). In case the function lies below (above) the data point, ey is ey_low (ey_high). thanks to Andy Haas (haas@yahoo.com) for adding the case with TGraphAsymmErrors; University of Washington. The approach used to approximate the uncertainty in y because of the; errors in x is to make it equal the error in x times the slope of the line.; The improvement, compared to the first method (f(x+ exhigh) - f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-lin",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:27188,Availability,error,error,27188,"its(5, 1,1);; With this setup, parameters 0->3 can vary freely.; Parameter 4 has boundaries [-10,-4] with initial value -8.; Parameter 5 is fixed to 100. Fit range:. The fit range can be specified in two ways:; - specify rxmax > rxmin (default is rxmin=rxmax=0); - specify the option ""R"". In this case, the function will be taken; instead of the full graph range. Changing the fitting function:. By default a chi2 fitting function is used for fitting a TGraph.; The function is implemented in FitUtil::EvaluateChi2.; In case of TGraphErrors an effective chi2 is used (see below TGraphErrors fit); To specify a User defined fitting function, specify option ""U"" and; call the following functions:; TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f,; Double_t *u, Int_t flag);. TGraphErrors fit:. In case of a TGraphErrors object, when x errors are present, the error along x,; is projected along the y-direction by calculating the function at the points x-exlow and; x+exhigh. The chisquare is then computed as the sum of the quantity below at each point:. where x and y are the point coordinates, and f'(x) is the derivative of the; function f(x). In case the function lies below (above) the data point, ey is ey_low (ey_high). thanks to Andy Haas (haas@yahoo.com) for adding the case with TGraphAsymmErrors; University of Washington. The approach used to approximate the uncertainty in y because of the; errors in x is to make it equal the error in x times the slope of the line.; The improvement, compared to the first method (f(x+ exhigh) - f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-lin",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:27733,Availability,error,errors,27733,"e of TGraphErrors an effective chi2 is used (see below TGraphErrors fit); To specify a User defined fitting function, specify option ""U"" and; call the following functions:; TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f,; Double_t *u, Int_t flag);. TGraphErrors fit:. In case of a TGraphErrors object, when x errors are present, the error along x,; is projected along the y-direction by calculating the function at the points x-exlow and; x+exhigh. The chisquare is then computed as the sum of the quantity below at each point:. where x and y are the point coordinates, and f'(x) is the derivative of the; function f(x). In case the function lies below (above) the data point, ey is ey_low (ey_high). thanks to Andy Haas (haas@yahoo.com) for adding the case with TGraphAsymmErrors; University of Washington. The approach used to approximate the uncertainty in y because of the; errors in x is to make it equal the error in x times the slope of the line.; The improvement, compared to the first method (f(x+ exhigh) - f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" ",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:27769,Availability,error,error,27769,"e of TGraphErrors an effective chi2 is used (see below TGraphErrors fit); To specify a User defined fitting function, specify option ""U"" and; call the following functions:; TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f,; Double_t *u, Int_t flag);. TGraphErrors fit:. In case of a TGraphErrors object, when x errors are present, the error along x,; is projected along the y-direction by calculating the function at the points x-exlow and; x+exhigh. The chisquare is then computed as the sum of the quantity below at each point:. where x and y are the point coordinates, and f'(x) is the derivative of the; function f(x). In case the function lies below (above) the data point, ey is ey_low (ey_high). thanks to Andy Haas (haas@yahoo.com) for adding the case with TGraphAsymmErrors; University of Washington. The approach used to approximate the uncertainty in y because of the; errors in x is to make it equal the error in x times the slope of the line.; The improvement, compared to the first method (f(x+ exhigh) - f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" ",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:27894,Availability,error,error,27894,"option ""U"" and; call the following functions:; TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f,; Double_t *u, Int_t flag);. TGraphErrors fit:. In case of a TGraphErrors object, when x errors are present, the error along x,; is projected along the y-direction by calculating the function at the points x-exlow and; x+exhigh. The chisquare is then computed as the sum of the quantity below at each point:. where x and y are the point coordinates, and f'(x) is the derivative of the; function f(x). In case the function lies below (above) the data point, ey is ey_low (ey_high). thanks to Andy Haas (haas@yahoo.com) for adding the case with TGraphAsymmErrors; University of Washington. The approach used to approximate the uncertainty in y because of the; errors in x is to make it equal the error in x times the slope of the line.; The improvement, compared to the first method (f(x+ exhigh) - f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" for polynomial fitting). 5) When fitting a TGraph (i.e. no errors associated with each point),; a correction is applied to the ",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:28448,Availability,error,error,28448," the; function f(x). In case the function lies below (above) the data point, ey is ey_low (ey_high). thanks to Andy Haas (haas@yahoo.com) for adding the case with TGraphAsymmErrors; University of Washington. The approach used to approximate the uncertainty in y because of the; errors in x is to make it equal the error in x times the slope of the line.; The improvement, compared to the first method (f(x+ exhigh) - f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" for polynomial fitting). 5) When fitting a TGraph (i.e. no errors associated with each point),; a correction is applied to the errors on the parameters with the following; formula:; errorp *= sqrt(chisquare/(ndf-1)). Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit which is return by an; automatic conversion of the TFitResultPtr to an integer. One can write in this case; directly:; Int_t fitStatus = h->Fit(myFunc). If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves; as a smart pointer to it. For example one can do:; TFitResultPtr r = h->Fit(myFunc,""S""",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:28566,Availability,error,errors,28566,"ey_high). thanks to Andy Haas (haas@yahoo.com) for adding the case with TGraphAsymmErrors; University of Washington. The approach used to approximate the uncertainty in y because of the; errors in x is to make it equal the error in x times the slope of the line.; The improvement, compared to the first method (f(x+ exhigh) - f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" for polynomial fitting). 5) When fitting a TGraph (i.e. no errors associated with each point),; a correction is applied to the errors on the parameters with the following; formula:; errorp *= sqrt(chisquare/(ndf-1)). Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit which is return by an; automatic conversion of the TFitResultPtr to an integer. One can write in this case; directly:; Int_t fitStatus = h->Fit(myFunc). If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves; as a smart pointer to it. For example one can do:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:28636,Availability,error,errors,28636,"hAsymmErrors; University of Washington. The approach used to approximate the uncertainty in y because of the; errors in x is to make it equal the error in x times the slope of the line.; The improvement, compared to the first method (f(x+ exhigh) - f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" for polynomial fitting). 5) When fitting a TGraph (i.e. no errors associated with each point),; a correction is applied to the errors on the parameters with the following; formula:; errorp *= sqrt(chisquare/(ndf-1)). Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit which is return by an; automatic conversion of the TFitResultPtr to an integer. One can write in this case; directly:; Int_t fitStatus = h->Fit(myFunc). If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves; as a smart pointer to it. For example one can do:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Value(0); ",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:28674,Availability,error,errors,28674," y because of the; errors in x is to make it equal the error in x times the slope of the line.; The improvement, compared to the first method (f(x+ exhigh) - f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" for polynomial fitting). 5) When fitting a TGraph (i.e. no errors associated with each point),; a correction is applied to the errors on the parameters with the following; formula:; errorp *= sqrt(chisquare/(ndf-1)). Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit which is return by an; automatic conversion of the TFitResultPtr to an integer. One can write in this case; directly:; Int_t fitStatus = h->Fit(myFunc). If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves; as a smart pointer to it. For example one can do:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:28794,Availability,error,errors,28794,"- f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" for polynomial fitting). 5) When fitting a TGraph (i.e. no errors associated with each point),; a correction is applied to the errors on the parameters with the following; formula:; errorp *= sqrt(chisquare/(ndf-1)). Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit which is return by an; automatic conversion of the TFitResultPtr to an integer. One can write in this case; directly:; Int_t fitStatus = h->Fit(myFunc). If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves; as a smart pointer to it. For example one can do:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit p",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:28862,Availability,error,errors,28862,"- f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" for polynomial fitting). 5) When fitting a TGraph (i.e. no errors associated with each point),; a correction is applied to the errors on the parameters with the following; formula:; errorp *= sqrt(chisquare/(ndf-1)). Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit which is return by an; automatic conversion of the TFitResultPtr to an integer. One can write in this case; directly:; Int_t fitStatus = h->Fit(myFunc). If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves; as a smart pointer to it. For example one can do:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit p",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:28917,Availability,error,errorp,28917,"- f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" for polynomial fitting). 5) When fitting a TGraph (i.e. no errors associated with each point),; a correction is applied to the errors on the parameters with the following; formula:; errorp *= sqrt(chisquare/(ndf-1)). Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit which is return by an; automatic conversion of the TFitResultPtr to an integer. One can write in this case; directly:; Int_t fitStatus = h->Fit(myFunc). If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves; as a smart pointer to it. For example one can do:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit p",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:29715,Availability,error,error,29715,"ions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" for polynomial fitting). 5) When fitting a TGraph (i.e. no errors associated with each point),; a correction is applied to the errors on the parameters with the following; formula:; errorp *= sqrt(chisquare/(ndf-1)). Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit which is return by an; automatic conversion of the TFitResultPtr to an integer. One can write in this case; directly:; Int_t fitStatus = h->Fit(myFunc). If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves; as a smart pointer to it. For example one can do:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the histogram is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is O",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:29882,Availability,error,error,29882,"errorp *= sqrt(chisquare/(ndf-1)). Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit which is return by an; automatic conversion of the TFitResultPtr to an integer. One can write in this case; directly:; Int_t fitStatus = h->Fit(myFunc). If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves; as a smart pointer to it. For example one can do:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the histogram is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is OK (i.e. no error occurred).; The value of the fit status code is negative in case of an error not connected with the; minimization procedure, for example when a wrong function is used.; Otherwise the return value is the one returned from the minimization procedure.; When TMinuit (default ",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:30346,Availability,error,error,30346,"write in this case; directly:; Int_t fitStatus = h->Fit(myFunc). If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves; as a smart pointer to it. For example one can do:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the histogram is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is OK (i.e. no error occurred).; The value of the fit status code is negative in case of an error not connected with the; minimization procedure, for example when a wrong function is used.; Otherwise the return value is the one returned from the minimization procedure.; When TMinuit (default case) or Minuit2 are used as minimizer the status returned is :; fitStatus = migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult.; TMinuit will return 0 (for migrad, minos, hesse or improve) in case of success and 4 in; case of error (see the documentation of TMinuit::mnexcm). So for",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:30639,Availability,error,error,30639," for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the histogram is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is OK (i.e. no error occurred).; The value of the fit status code is negative in case of an error not connected with the; minimization procedure, for example when a wrong function is used.; Otherwise the return value is the one returned from the minimization procedure.; When TMinuit (default case) or Minuit2 are used as minimizer the status returned is :; fitStatus = migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult.; TMinuit will return 0 (for migrad, minos, hesse or improve) in case of success and 4 in; case of error (see the documentation of TMinuit::mnexcm). So for example, for an error; only in Minos but not in Migrad a fitStatus of 40 will be returned.; Minuit2 will return also 0 in case of success and different values in migrad, minos or; hesse depending on the error. See in this case the documentation of; Minuit2Minimizer::Minimize for the migradResult, Minuit2Minimizer::GetMinosError for the; minosResult and Minuit2Minimizer::Hesse for the hesseResult.; If other minimizers are u",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:30716,Availability,error,error,30716,"meter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the histogram is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is OK (i.e. no error occurred).; The value of the fit status code is negative in case of an error not connected with the; minimization procedure, for example when a wrong function is used.; Otherwise the return value is the one returned from the minimization procedure.; When TMinuit (default case) or Minuit2 are used as minimizer the status returned is :; fitStatus = migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult.; TMinuit will return 0 (for migrad, minos, hesse or improve) in case of success and 4 in; case of error (see the documentation of TMinuit::mnexcm). So for example, for an error; only in Minos but not in Migrad a fitStatus of 40 will be returned.; Minuit2 will return also 0 in case of success and different values in migrad, minos or; hesse depending on the error. See in this case the documentation of; Minuit2Minimizer::Minimize for the migradResult, Minuit2Minimizer::GetMinosError for the; minosResult and Minuit2Minimizer::Hesse for the hesseResult.; If other minimizers are used see their specific documentation for the status code; returned. For example in the ca",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:31162,Availability,error,error,31162,"retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is OK (i.e. no error occurred).; The value of the fit status code is negative in case of an error not connected with the; minimization procedure, for example when a wrong function is used.; Otherwise the return value is the one returned from the minimization procedure.; When TMinuit (default case) or Minuit2 are used as minimizer the status returned is :; fitStatus = migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult.; TMinuit will return 0 (for migrad, minos, hesse or improve) in case of success and 4 in; case of error (see the documentation of TMinuit::mnexcm). So for example, for an error; only in Minos but not in Migrad a fitStatus of 40 will be returned.; Minuit2 will return also 0 in case of success and different values in migrad, minos or; hesse depending on the error. See in this case the documentation of; Minuit2Minimizer::Minimize for the migradResult, Minuit2Minimizer::GetMinosError for the; minosResult and Minuit2Minimizer::Hesse for the hesseResult.; If other minimizers are used see their specific documentation for the status code; returned. For example in the case of Fumili, for the status returned see TFumili::Minimize. Associated functions:. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated with each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:31235,Availability,error,error,31235,">GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is OK (i.e. no error occurred).; The value of the fit status code is negative in case of an error not connected with the; minimization procedure, for example when a wrong function is used.; Otherwise the return value is the one returned from the minimization procedure.; When TMinuit (default case) or Minuit2 are used as minimizer the status returned is :; fitStatus = migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult.; TMinuit will return 0 (for migrad, minos, hesse or improve) in case of success and 4 in; case of error (see the documentation of TMinuit::mnexcm). So for example, for an error; only in Minos but not in Migrad a fitStatus of 40 will be returned.; Minuit2 will return also 0 in case of success and different values in migrad, minos or; hesse depending on the error. See in this case the documentation of; Minuit2Minimizer::Minimize for the migradResult, Minuit2Minimizer::GetMinosError for the; minosResult and Minuit2Minimizer::Hesse for the hesseResult.; If other minimizers are used see their specific documentation for the status code; returned. For example in the case of Fumili, for the status returned see TFumili::Minimize. Associated functions:. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated with each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of associated functions is also; persistent. Given a pointer (see above) to an associated function my",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:31422,Availability,error,error,31422,"er. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is OK (i.e. no error occurred).; The value of the fit status code is negative in case of an error not connected with the; minimization procedure, for example when a wrong function is used.; Otherwise the return value is the one returned from the minimization procedure.; When TMinuit (default case) or Minuit2 are used as minimizer the status returned is :; fitStatus = migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult.; TMinuit will return 0 (for migrad, minos, hesse or improve) in case of success and 4 in; case of error (see the documentation of TMinuit::mnexcm). So for example, for an error; only in Minos but not in Migrad a fitStatus of 40 will be returned.; Minuit2 will return also 0 in case of success and different values in migrad, minos or; hesse depending on the error. See in this case the documentation of; Minuit2Minimizer::Minimize for the migradResult, Minuit2Minimizer::GetMinosError for the; minosResult and Minuit2Minimizer::Hesse for the hesseResult.; If other minimizers are used see their specific documentation for the status code; returned. For example in the case of Fumili, for the status returned see TFumili::Minimize. Associated functions:. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated with each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of associated functions is also; persistent. Given a pointer (see above) to an associated function myfunc,; one can retrieve the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:32483,Availability,error,error,32483,"s and different values in migrad, minos or; hesse depending on the error. See in this case the documentation of; Minuit2Minimizer::Minimize for the migradResult, Minuit2Minimizer::GetMinosError for the; minosResult and Minuit2Minimizer::Hesse for the hesseResult.; If other minimizers are used see their specific documentation for the status code; returned. For example in the case of Fumili, for the status returned see TFumili::Minimize. Associated functions:. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated with each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of associated functions is also; persistent. Given a pointer (see above) to an associated function myfunc,; one can retrieve the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degress of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011);; prints the fit probability, parameter names/values, and errors.; You can change the position of the statistics box with these lines; (where g is a pointer to the TGraph):. Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. void FitPanel(); Display a GUI panel with all graph fit options. See class TFitEditor for example. Double_t G",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:32742,Availability,error,errors,32742,"he status returned see TFumili::Minimize. Associated functions:. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated with each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of associated functions is also; persistent. Given a pointer (see above) to an associated function myfunc,; one can retrieve the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degress of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011);; prints the fit probability, parameter names/values, and errors.; You can change the position of the statistics box with these lines; (where g is a pointer to the TGraph):. Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. void FitPanel(); Display a GUI panel with all graph fit options. See class TFitEditor for example. Double_t GetCorrelationFactor() const; Return graph correlation factor. Double_t GetCovariance() const; Return covariance of vectors x,y. Double_t GetMean(Int_t axis = 1) const; Return mean value of X (axis=1) or Y (axis=2). Double_t GetRMS(Int_t axis = 1) const; Return RMS of X (axis=1) or Y (axis=2). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It always returns a ",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:32946,Availability,error,errors,32946,"tions) associated with each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of associated functions is also; persistent. Given a pointer (see above) to an associated function myfunc,; one can retrieve the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degress of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011);; prints the fit probability, parameter names/values, and errors.; You can change the position of the statistics box with these lines; (where g is a pointer to the TGraph):. Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. void FitPanel(); Display a GUI panel with all graph fit options. See class TFitEditor for example. Double_t GetCorrelationFactor() const; Return graph correlation factor. Double_t GetCovariance() const; Return covariance of vectors x,y. Double_t GetMean(Int_t axis = 1) const; Return mean value of X (axis=1) or Y (axis=2). Double_t GetRMS(Int_t axis = 1) const; Return RMS of X (axis=1) or Y (axis=2). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It always returns a negative value. Real implementation in TGraphErrors. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It always r",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:41599,Availability,error,errors,41599,"size points,; copy points [0,oend).; Return newarray (passed or new instance if it was zero; and allocations are needed). void Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); Sorts the points of this TGraph using in-place quicksort (see e.g. older glibc).; To compare two points the function parameter greaterfunc is used (see TGraph::CompareX for an; example of such a method, which is also the default comparison function for Sort). After; the sort, greaterfunc(this, i, j) will return kTRUE for all i>j if ascending == kTRUE, and; kFALSE otherwise. The last two parameters are used for the recursive quick sort, stating the range to be sorted. Examples:; // sort points along x axis; graph->Sort();; // sort points along their distance to origin; graph->Sort(&TGraph::CompareRadius);. Bool_t CompareErrors(const TGraph* gr, Int_t i, Int_t j) {; const TGraphErrors* ge=(const TGraphErrors*)gr;; return (ge->GetEY()[i]>ge->GetEY()[j]); }; // sort using the above comparison function, largest errors first; graph->Sort(&CompareErrors, kFALSE);. void Streamer(TBuffer& ); Stream an object of class TGraph. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. void SwapValues(Double_t* arr, Int_t pos1, Int_t pos2); Swap values. void UseCurrentStyle(); Set current style settings in this graph; This function is called when either TCanvas::UseCurrentStyle; or TROOT::ForceStyle have been invoked. Int_t Merge(TCollection* list); Adds all graphs from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph. void Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations); Find zero of a continuous function.; This function finds a real zero of the continuous real; function Y(X) in a given interval (A,B). See accompanying; notes f",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:42154,Availability,error,error,42154,"ng == kTRUE, and; kFALSE otherwise. The last two parameters are used for the recursive quick sort, stating the range to be sorted. Examples:; // sort points along x axis; graph->Sort();; // sort points along their distance to origin; graph->Sort(&TGraph::CompareRadius);. Bool_t CompareErrors(const TGraph* gr, Int_t i, Int_t j) {; const TGraphErrors* ge=(const TGraphErrors*)gr;; return (ge->GetEY()[i]>ge->GetEY()[j]); }; // sort using the above comparison function, largest errors first; graph->Sort(&CompareErrors, kFALSE);. void Streamer(TBuffer& ); Stream an object of class TGraph. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. void SwapValues(Double_t* arr, Int_t pos1, Int_t pos2); Swap values. void UseCurrentStyle(); Set current style settings in this graph; This function is called when either TCanvas::UseCurrentStyle; or TROOT::ForceStyle have been invoked. Int_t Merge(TCollection* list); Adds all graphs from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph. void Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations); Find zero of a continuous function.; This function finds a real zero of the continuous real; function Y(X) in a given interval (A,B). See accompanying; notes for details of the argument list and calling sequence. Double_t ** Allocate(Int_t newsize). TList * GetListOfFunctions() const; { return fFunctions; }. Int_t GetMaxSize() const; {return fMaxSize;}. Int_t GetN() const; {return fNpoints;}. Double_t * GetX() const; {return fX;}. Double_t * GetY() const; {return fY;}. Double_t * GetEX() const; {return 0;}. Double_t * GetEY() const; {return 0;}. Double_t * GetEXhigh() const; {return 0;}. Double_t * GetEXlow() const; {return 0;}. Double_t * GetEYhigh() const; {return 0;}. Double_t * GetEYlow() const; {return 0;}. Double_t * GetEXlowd() const; {return",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:9120,Deployability,TOGGLE,TOGGLE,9120,"irtual voidTAttFill::ResetAttFill(Option_t* option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); virtual voidTAttMarker::ResetAttMarker(Option_t* toption = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTAttMarker::SaveMarkerAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t sizdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); virtual voidSet(Int_t n); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEditable(Bool_t editable = kTRUE)TOGGLE GETTER ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidSetHistogram(TH1F* h); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidSetMaximum(Double_t maximum = -1111)MENU ; virtual voidSetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const c",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:21012,Deployability,release,released,21012,"h with new attributes. void DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); Draw this graph with new attributes. void DrawPanel(); Display a panel with all graph drawing options. Double_t Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; Interpolate points in this graph at x using a TSpline; -if spline==0 and option="""" a linear interpolation between the two points; close to x is computed. If x is outside the graph range, a linear; extrapolation is computed.; -if spline==0 and option=""S"" a TSpline3 object is created using this graph; and the interpolated value from the spline is returned.; the internally created spline is deleted on return.; -if spline is specified, it is used to return the interpolated value. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a graph is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void Expand(Int_t newsize); If array sizes <= newsize, expand storage to 2*newsize. void Expand(Int_t newsize, Int_t step); If graph capacity is less than newsize points then make array sizes; equal to least multiple of step to contain newsize points.; Returns kTRUE if size was altered. Double_t ** ExpandAndCopy(Int_t size, Int_t iend); if size > fMaxSize allocate new arrays of 2*size points; and copy oend first points.; Return pointer to new arrays. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end); Should be redefined in descendant classes. TObject * FindObject(const char* name) const; Search object named name in the list of functions. TObject * FindObject(const TObject* obj) const; Search object obj in the list of functions. TFitResultPtr Fit(const char* formula,",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:21106,Deployability,release,released,21106,"option = """"); Draw this graph with new attributes. void DrawPanel(); Display a panel with all graph drawing options. Double_t Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; Interpolate points in this graph at x using a TSpline; -if spline==0 and option="""" a linear interpolation between the two points; close to x is computed. If x is outside the graph range, a linear; extrapolation is computed.; -if spline==0 and option=""S"" a TSpline3 object is created using this graph; and the interpolated value from the spline is returned.; the internally created spline is deleted on return.; -if spline is specified, it is used to return the interpolated value. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a graph is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void Expand(Int_t newsize); If array sizes <= newsize, expand storage to 2*newsize. void Expand(Int_t newsize, Int_t step); If graph capacity is less than newsize points then make array sizes; equal to least multiple of step to contain newsize points.; Returns kTRUE if size was altered. Double_t ** ExpandAndCopy(Int_t size, Int_t iend); if size > fMaxSize allocate new arrays of 2*size points; and copy oend first points.; Return pointer to new arrays. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end); Should be redefined in descendant classes. TObject * FindObject(const char* name) const; Search object named name in the list of functions. TObject * FindObject(const TObject* obj) const; Search object obj in the list of functions. TFitResultPtr Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); Fit this graph with",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:35874,Deployability,Integrat,Integrate,35874,"ter to the histogram used to draw the axis; Takes into account the two following cases.; 1- option 'A' was specified in TGraph::Draw. Return fHistogram; 2- user had called TPad::DrawFrame. return pointer to hframe histogram. Int_t GetPoint(Int_t i, Double_t& x, Double_t& y) const; Get x and y values for point number i.; The function returns -1 in case of an invalid request or the point number otherwise. TAxis * GetXaxis() const; Get x axis of the graph. TAxis * GetYaxis() const; Get y axis of the graph. void InitGaus(Double_t xmin = 0, Double_t xmax = 0); Compute Initial values of parameters for a gaussian. void InitExpo(Double_t xmin = 0, Double_t xmax = 0); Compute Initial values of parameters for an exponential. void InitPolynom(Double_t xmin = 0, Double_t xmax = 0); Compute Initial values of parameters for a polynom. Int_t InsertPoint(); Insert a new point at the mouse position. Double_t Integral(Int_t first = 0, Int_t last = -1) const; Integrate the TGraph data within a given (index) range; Note that this function computes the area of the polygon enclosed by the points of the TGraph.; The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; with the first one. It is clear that the order of the point is essential in defining the polygon.; Also note that the segments should not intersect. NB: if last=-1 (default) last is set to the last point.; if (first <0) the first point (0) is taken. Method:; There are many ways to calculate the surface of a polygon. It all depends on what kind of data; you have to deal with. The most evident solution would be to divide the polygon in triangles and; calculate the surface of them. But this can quickly become complicated as you will have to test; every segments of every triangles and check if they are intersecting with a current polygon's; segment or if it goes outsi",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:42378,Deployability,continuous,continuous,42378,"ong their distance to origin; graph->Sort(&TGraph::CompareRadius);. Bool_t CompareErrors(const TGraph* gr, Int_t i, Int_t j) {; const TGraphErrors* ge=(const TGraphErrors*)gr;; return (ge->GetEY()[i]>ge->GetEY()[j]); }; // sort using the above comparison function, largest errors first; graph->Sort(&CompareErrors, kFALSE);. void Streamer(TBuffer& ); Stream an object of class TGraph. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. void SwapValues(Double_t* arr, Int_t pos1, Int_t pos2); Swap values. void UseCurrentStyle(); Set current style settings in this graph; This function is called when either TCanvas::UseCurrentStyle; or TROOT::ForceStyle have been invoked. Int_t Merge(TCollection* list); Adds all graphs from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph. void Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations); Find zero of a continuous function.; This function finds a real zero of the continuous real; function Y(X) in a given interval (A,B). See accompanying; notes for details of the argument list and calling sequence. Double_t ** Allocate(Int_t newsize). TList * GetListOfFunctions() const; { return fFunctions; }. Int_t GetMaxSize() const; {return fMaxSize;}. Int_t GetN() const; {return fNpoints;}. Double_t * GetX() const; {return fX;}. Double_t * GetY() const; {return fY;}. Double_t * GetEX() const; {return 0;}. Double_t * GetEY() const; {return 0;}. Double_t * GetEXhigh() const; {return 0;}. Double_t * GetEXlow() const; {return 0;}. Double_t * GetEYhigh() const; {return 0;}. Double_t * GetEYlow() const; {return 0;}. Double_t * GetEXlowd() const; {return 0;}. Double_t * GetEXhighd() const; {return 0;}. Double_t * GetEYlowd() const; {return 0;}. Double_t * GetEYhighd() const; {return 0;}. Double_t GetMaximum() const; {return fMaximum;}. Double_t GetMinimum",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:42439,Deployability,continuous,continuous,42439," j) {; const TGraphErrors* ge=(const TGraphErrors*)gr;; return (ge->GetEY()[i]>ge->GetEY()[j]); }; // sort using the above comparison function, largest errors first; graph->Sort(&CompareErrors, kFALSE);. void Streamer(TBuffer& ); Stream an object of class TGraph. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. void SwapValues(Double_t* arr, Int_t pos1, Int_t pos2); Swap values. void UseCurrentStyle(); Set current style settings in this graph; This function is called when either TCanvas::UseCurrentStyle; or TROOT::ForceStyle have been invoked. Int_t Merge(TCollection* list); Adds all graphs from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph. void Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations); Find zero of a continuous function.; This function finds a real zero of the continuous real; function Y(X) in a given interval (A,B). See accompanying; notes for details of the argument list and calling sequence. Double_t ** Allocate(Int_t newsize). TList * GetListOfFunctions() const; { return fFunctions; }. Int_t GetMaxSize() const; {return fMaxSize;}. Int_t GetN() const; {return fNpoints;}. Double_t * GetX() const; {return fX;}. Double_t * GetY() const; {return fY;}. Double_t * GetEX() const; {return 0;}. Double_t * GetEY() const; {return 0;}. Double_t * GetEXhigh() const; {return 0;}. Double_t * GetEXlow() const; {return 0;}. Double_t * GetEYhigh() const; {return 0;}. Double_t * GetEYlow() const; {return 0;}. Double_t * GetEXlowd() const; {return 0;}. Double_t * GetEXhighd() const; {return 0;}. Double_t * GetEYlowd() const; {return 0;}. Double_t * GetEYhighd() const; {return 0;}. Double_t GetMaximum() const; {return fMaximum;}. Double_t GetMinimum() const; {return fMinimum;}. Bool_t IsEditable() const; {return !TestBit(kNotEditable);}. void SetHistogram(TH1F* h); {",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:11781,Energy Efficiency,Allocate,Allocate,11781," Int_t* x, const Int_t* y); TGraph(Int_t n, const Float_t* x, const Float_t* y); TGraph(Int_t n, const Double_t* x, const Double_t* y); TGraph(const char* filename, const char* format = ""%lg %lg"", Option_t* option = """"); virtual voidUseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidZero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**Allocate(Int_t newsize); Double_t**AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidCopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tCopyPoints(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tCtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tDoMerge(const TGraph* g); Double_t**ExpandAndCopy(Int_t size, Int_t iend); virtual voidFillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidTObject::MakeZombie(); Double_t**ShrinkAndCopy(Int_t size, Int_t iend); virtual voidSwapPoints(Int_t pos1, Int_t pos2); static voidSwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGraph::(anonymous)kClipFrame; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)kNotEditable; static TObject::EStatusBitsTObject:",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:11816,Energy Efficiency,Allocate,AllocateArrays,11816," Int_t* x, const Int_t* y); TGraph(Int_t n, const Float_t* x, const Float_t* y); TGraph(Int_t n, const Double_t* x, const Double_t* y); TGraph(const char* filename, const char* format = ""%lg %lg"", Option_t* option = """"); virtual voidUseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidZero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**Allocate(Int_t newsize); Double_t**AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidCopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tCopyPoints(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tCtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tDoMerge(const TGraph* g); Double_t**ExpandAndCopy(Int_t size, Int_t iend); virtual voidFillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidTObject::MakeZombie(); Double_t**ShrinkAndCopy(Int_t size, Int_t iend); virtual voidSwapPoints(Int_t pos1, Int_t pos2); static voidSwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGraph::(anonymous)kClipFrame; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)kNotEditable; static TObject::EStatusBitsTObject:",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:16933,Energy Efficiency,Allocate,AllocateArrays,16933,"f f and the integral is normalized to 1. TGraph(const char* filename, const char* format = ""%lg %lg"", Option_t* option = """"); Graph constructor reading input from filename.; filename is assumed to contain at least two columns of numbers.; the string format is by default ""%lg %lg"".; this is a standard c formatting for scanf. If columns of numbers should be; skipped, a ""%*lg"" or ""%*s"" for each column can be added,; e.g. ""%lg %*lg %lg"" would read x-values from the first and y-values from; the third column.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. ~TGraph(); Graph default destructor. Double_t** AllocateArrays(Int_t Narrays, Int_t arraySize); Allocate arrays. void Apply(TF1* f); Apply function f to all the data points; f may be a 1-D function TF1 or 2-d function TF2; The Y values of the graph are replaced by the new values computed; using the function. void Browse(TBrowser* b); Browse. Double_t Chisquare(TF1* f1, Option_t* option = """") const; Return the chisquare of this graph with respect to f1.; The chisquare is computed as the sum of the quantity below at each point:. where x and y are the graph point coordinates and f1'(x) is the derivative of function f1(x).; This method to approximate the uncertainty in y because of the errors in x, is called; ""effective variance"" method.; In case of a pure TGraph, the denominator is 1.; In case of a TGraphErrors or TGraphAsymmErrors the errors are taken; into account.; By default the range of the graph is used whatever function range.; Use option ""R"" to use the function range. Bool_t CompareArg(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if point nu",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:16981,Energy Efficiency,Allocate,Allocate,16981,"f f and the integral is normalized to 1. TGraph(const char* filename, const char* format = ""%lg %lg"", Option_t* option = """"); Graph constructor reading input from filename.; filename is assumed to contain at least two columns of numbers.; the string format is by default ""%lg %lg"".; this is a standard c formatting for scanf. If columns of numbers should be; skipped, a ""%*lg"" or ""%*s"" for each column can be added,; e.g. ""%lg %*lg %lg"" would read x-values from the first and y-values from; the third column.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. ~TGraph(); Graph default destructor. Double_t** AllocateArrays(Int_t Narrays, Int_t arraySize); Allocate arrays. void Apply(TF1* f); Apply function f to all the data points; f may be a 1-D function TF1 or 2-d function TF2; The Y values of the graph are replaced by the new values computed; using the function. void Browse(TBrowser* b); Browse. Double_t Chisquare(TF1* f1, Option_t* option = """") const; Return the chisquare of this graph with respect to f1.; The chisquare is computed as the sum of the quantity below at each point:. where x and y are the graph point coordinates and f1'(x) is the derivative of function f1(x).; This method to approximate the uncertainty in y because of the errors in x, is called; ""effective variance"" method.; In case of a pure TGraph, the denominator is 1.; In case of a TGraphErrors or TGraphAsymmErrors the errors are taken; into account.; By default the range of the graph is used whatever function range.; Use option ""R"" to use the function range. Bool_t CompareArg(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if point nu",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:21474,Energy Efficiency,allocate,allocate,21474,"n is computed.; -if spline==0 and option=""S"" a TSpline3 object is created using this graph; and the interpolated value from the spline is returned.; the internally created spline is deleted on return.; -if spline is specified, it is used to return the interpolated value. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a graph is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void Expand(Int_t newsize); If array sizes <= newsize, expand storage to 2*newsize. void Expand(Int_t newsize, Int_t step); If graph capacity is less than newsize points then make array sizes; equal to least multiple of step to contain newsize points.; Returns kTRUE if size was altered. Double_t ** ExpandAndCopy(Int_t size, Int_t iend); if size > fMaxSize allocate new arrays of 2*size points; and copy oend first points.; Return pointer to new arrays. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end); Should be redefined in descendant classes. TObject * FindObject(const char* name) const; Search object named name in the list of functions. TObject * FindObject(const TObject* obj) const; Search object obj in the list of functions. TFitResultPtr Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); Fit this graph with function with name fname. interface to TGraph::Fit(TF1 *f1... fname is the name of an already predefined function created by TF1 or TF2; Predefined functions such as gaus, expo and poln are automatically; created by ROOT.; fname can also be a formula, accepted by the linear fitter (linear parts divided; by ""++"" sign), for example ""x++sin(x)"" for fitting ""[0]*x+[1]*sin(x)"". TFitResultPtr Fit(TF1* f1,",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:40498,Energy Efficiency,allocate,allocate,40498," object from the list of functions. Int_t RemovePoint(); Delete point close to the mouse position. Int_t RemovePoint(Int_t ipoint); Delete point number ipoint. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void Set(Int_t n); Set number of points in the graph; Existing coordinates are preserved; New coordinates above fNpoints are preset to 0. Bool_t GetEditable() const; Return kTRUE if kNotEditable bit is not set, kFALSE otherwise. void SetEditable(Bool_t editable = kTRUE); if editable=kFALSE, the graph cannot be modified with the mouse; by default a TGraph is editable. void SetMaximum(Double_t maximum = -1111); Set the maximum of the graph. void SetMinimum(Double_t minimum = -1111); Set the minimum of the graph. void SetPoint(Int_t i, Double_t x, Double_t y); Set x and y values for point number i. void SetTitle(const char* title = """"); Set graph title. Double_t ** ShrinkAndCopy(Int_t size, Int_t iend); if size*2 <= fMaxSize allocate new arrays of size points,; copy points [0,oend).; Return newarray (passed or new instance if it was zero; and allocations are needed). void Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); Sorts the points of this TGraph using in-place quicksort (see e.g. older glibc).; To compare two points the function parameter greaterfunc is used (see TGraph::CompareX for an; example of such a method, which is also the default comparison function for Sort). After; the sort, greaterfunc(this, i, j) will return kTRUE for all i>j if ascending == kTRUE, and; kFALSE otherwise. The last two parameters are used for the recursive quick sort, stating the range to be sorted. Examples:; // sort points along x axis; graph->Sort();; // sort points along their distance to origin; graph->Sort(&TGraph::CompareRadius);. Bool_t CompareErrors(const TGraph* gr, Int_t i, Int_t j) {; const TGraphErrors* ge=(const TGraph",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:42588,Energy Efficiency,Allocate,Allocate,42588,"rgest errors first; graph->Sort(&CompareErrors, kFALSE);. void Streamer(TBuffer& ); Stream an object of class TGraph. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. void SwapValues(Double_t* arr, Int_t pos1, Int_t pos2); Swap values. void UseCurrentStyle(); Set current style settings in this graph; This function is called when either TCanvas::UseCurrentStyle; or TROOT::ForceStyle have been invoked. Int_t Merge(TCollection* list); Adds all graphs from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph. void Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations); Find zero of a continuous function.; This function finds a real zero of the continuous real; function Y(X) in a given interval (A,B). See accompanying; notes for details of the argument list and calling sequence. Double_t ** Allocate(Int_t newsize). TList * GetListOfFunctions() const; { return fFunctions; }. Int_t GetMaxSize() const; {return fMaxSize;}. Int_t GetN() const; {return fNpoints;}. Double_t * GetX() const; {return fX;}. Double_t * GetY() const; {return fY;}. Double_t * GetEX() const; {return 0;}. Double_t * GetEY() const; {return 0;}. Double_t * GetEXhigh() const; {return 0;}. Double_t * GetEXlow() const; {return 0;}. Double_t * GetEYhigh() const; {return 0;}. Double_t * GetEYlow() const; {return 0;}. Double_t * GetEXlowd() const; {return 0;}. Double_t * GetEXhighd() const; {return 0;}. Double_t * GetEYlowd() const; {return 0;}. Double_t * GetEYhighd() const; {return 0;}. Double_t GetMaximum() const; {return fMaximum;}. Double_t GetMinimum() const; {return fMinimum;}. Bool_t IsEditable() const; {return !TestBit(kNotEditable);}. void SetHistogram(TH1F* h); {fHistogram = h;}. » Author: Rene Brun, Olivier Couet 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/his",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:22095,Integrability,interface,interface,22095,"sed. void Expand(Int_t newsize); If array sizes <= newsize, expand storage to 2*newsize. void Expand(Int_t newsize, Int_t step); If graph capacity is less than newsize points then make array sizes; equal to least multiple of step to contain newsize points.; Returns kTRUE if size was altered. Double_t ** ExpandAndCopy(Int_t size, Int_t iend); if size > fMaxSize allocate new arrays of 2*size points; and copy oend first points.; Return pointer to new arrays. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end); Should be redefined in descendant classes. TObject * FindObject(const char* name) const; Search object named name in the list of functions. TObject * FindObject(const TObject* obj) const; Search object obj in the list of functions. TFitResultPtr Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); Fit this graph with function with name fname. interface to TGraph::Fit(TF1 *f1... fname is the name of an already predefined function created by TF1 or TF2; Predefined functions such as gaus, expo and poln are automatically; created by ROOT.; fname can also be a formula, accepted by the linear fitter (linear parts divided; by ""++"" sign), for example ""x++sin(x)"" for fitting ""[0]*x+[1]*sin(x)"". TFitResultPtr Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); Fit this graph with function f1. f1 is an already predefined function created by TF1.; Predefined functions such as gaus, expo and poln are automatically; created by ROOT. The list of fit options is given in parameter option.; option = ""W"" Set all weights to 1; ignore error bars; = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" User defined parameter settings are used for predefined functio",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:31405,Integrability,depend,depending,31405,"er. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is OK (i.e. no error occurred).; The value of the fit status code is negative in case of an error not connected with the; minimization procedure, for example when a wrong function is used.; Otherwise the return value is the one returned from the minimization procedure.; When TMinuit (default case) or Minuit2 are used as minimizer the status returned is :; fitStatus = migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult.; TMinuit will return 0 (for migrad, minos, hesse or improve) in case of success and 4 in; case of error (see the documentation of TMinuit::mnexcm). So for example, for an error; only in Minos but not in Migrad a fitStatus of 40 will be returned.; Minuit2 will return also 0 in case of success and different values in migrad, minos or; hesse depending on the error. See in this case the documentation of; Minuit2Minimizer::Minimize for the migradResult, Minuit2Minimizer::GetMinosError for the; minosResult and Minuit2Minimizer::Hesse for the hesseResult.; If other minimizers are used see their specific documentation for the status code; returned. For example in the case of Fumili, for the status returned see TFumili::Minimize. Associated functions:. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated with each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of associated functions is also; persistent. Given a pointer (see above) to an associated function myfunc,; one can retrieve the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:35874,Integrability,Integrat,Integrate,35874,"ter to the histogram used to draw the axis; Takes into account the two following cases.; 1- option 'A' was specified in TGraph::Draw. Return fHistogram; 2- user had called TPad::DrawFrame. return pointer to hframe histogram. Int_t GetPoint(Int_t i, Double_t& x, Double_t& y) const; Get x and y values for point number i.; The function returns -1 in case of an invalid request or the point number otherwise. TAxis * GetXaxis() const; Get x axis of the graph. TAxis * GetYaxis() const; Get y axis of the graph. void InitGaus(Double_t xmin = 0, Double_t xmax = 0); Compute Initial values of parameters for a gaussian. void InitExpo(Double_t xmin = 0, Double_t xmax = 0); Compute Initial values of parameters for an exponential. void InitPolynom(Double_t xmin = 0, Double_t xmax = 0); Compute Initial values of parameters for a polynom. Int_t InsertPoint(); Insert a new point at the mouse position. Double_t Integral(Int_t first = 0, Int_t last = -1) const; Integrate the TGraph data within a given (index) range; Note that this function computes the area of the polygon enclosed by the points of the TGraph.; The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; with the first one. It is clear that the order of the point is essential in defining the polygon.; Also note that the segments should not intersect. NB: if last=-1 (default) last is set to the last point.; if (first <0) the first point (0) is taken. Method:; There are many ways to calculate the surface of a polygon. It all depends on what kind of data; you have to deal with. The most evident solution would be to divide the polygon in triangles and; calculate the surface of them. But this can quickly become complicated as you will have to test; every segments of every triangles and check if they are intersecting with a current polygon's; segment or if it goes outsi",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:36572,Integrability,depend,depends,36572," Initial values of parameters for an exponential. void InitPolynom(Double_t xmin = 0, Double_t xmax = 0); Compute Initial values of parameters for a polynom. Int_t InsertPoint(); Insert a new point at the mouse position. Double_t Integral(Int_t first = 0, Int_t last = -1) const; Integrate the TGraph data within a given (index) range; Note that this function computes the area of the polygon enclosed by the points of the TGraph.; The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; with the first one. It is clear that the order of the point is essential in defining the polygon.; Also note that the segments should not intersect. NB: if last=-1 (default) last is set to the last point.; if (first <0) the first point (0) is taken. Method:; There are many ways to calculate the surface of a polygon. It all depends on what kind of data; you have to deal with. The most evident solution would be to divide the polygon in triangles and; calculate the surface of them. But this can quickly become complicated as you will have to test; every segments of every triangles and check if they are intersecting with a current polygon's; segment or if it goes outside the polygon. Many calculations that would lead to many problems...; The solution (implemented by R.Brun); Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; segments don't intersect.; It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied; by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area.; Sources; http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:38419,Integrability,rout,routine,38419,"a.; Sources; http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-a-2d-polygon. Int_t IsInside(Double_t x, Double_t y) const; Return 1 if the point (x,y) is inside the polygon defined by; the graph vertices 0 otherwise. Algorithm:; The loop is executed with the end-point coordinates of a line segment; (X1,Y1)-(X2,Y2) and the Y-coordinate of a horizontal line.; The counter inter is incremented if the line (X1,Y1)-(X2,Y2) intersects; the horizontal line. In this case XINT is set to the X-coordinate of the; intersection point. If inter is an odd number, then the point x,y is within; the polygon. void LeastSquareFit(Int_t m, Double_t* a, Double_t xmin = 0, Double_t xmax = 0); Least squares polynomial fitting without weights. m number of parameters; a array of parameters; first 1st point number to fit (default =0); last last point number to fit (default=fNpoints-1). based on CERNLIB routine LSQ: Translated to C++ by Rene Brun. void LeastSquareLinearFit(Int_t n, Double_t& a0, Double_t& a1, Int_t& ifail, Double_t xmin = 0, Double_t xmax = 0); Least square linear fit without weights. Fit a straight line (a0 + a1*x) to the data in this graph.; ndata: if ndata<0, fits the logarithm of the graph (used in InitExpo() to set; the initial parameter values for a fit with exponential function.; a0: constant; a1: slope; ifail: return parameter indicating the status of the fit (ifail=0, fit is OK); xmin, xmax: fitting range. extracted from CERNLIB LLSQ: Translated to C++ by Rene Brun. void Paint(Option_t* chopt = """"); Draw this graph with its current attributes. void PaintGraph(Int_t npoints, const Double_t* x, const Double_t* y, Option_t* chopt); Draw the (x,y) as a graph. void PaintGrapHist(Int_t npoints, const Double_t* x, const Double_t* y, Option_t* chopt); Draw the (x,y) as a histogram. void PaintStats(TF1* fit); Draw the stats. void Print(Option_t* chopt = """") const; Print graph valu",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:5884,Modifiability,Inherit,InheritsFrom,5884,"GetListOfFunctions() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; Double_tGetMaximum() const; Int_tGetMaxSize() const; virtual Double_tGetMean(Int_t axis = 1) const; Double_tGetMinimum() const; Int_tGetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tGetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*GetX() const; TAxis*GetXaxis() const; Double_t*GetY() const; TAxis*GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidInitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidInitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tInsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tIntegral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tIsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidLeastSquareFit(Int_t m, Double_t* a, Double_t xmin = 0, Double_t xmax = 0); virtual voidLeastSquareLinearFit(Int_t n, Double_t& a0, Double_t& a1, Int_t& ifail, Dou",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:5950,Modifiability,Inherit,InheritsFrom,5950,"lor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; Double_tGetMaximum() const; Int_tGetMaxSize() const; virtual Double_tGetMean(Int_t axis = 1) const; Double_tGetMinimum() const; Int_tGetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tGetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*GetX() const; TAxis*GetXaxis() const; Double_t*GetY() const; TAxis*GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidInitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidInitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tInsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tIntegral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tIsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidLeastSquareFit(Int_t m, Double_t* a, Double_t xmin = 0, Double_t xmax = 0); virtual voidLeastSquareLinearFit(Int_t n, Double_t& a0, Double_t& a1, Int_t& ifail, Double_t xmin = 0, Double_t xmax = 0); virtual voidTNamed::ls(Option_",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:14187,Modifiability,Inherit,Inheritance,14187,"::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*fFunctionsPointer to list of functions (fits and user); TH1F*fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tfMaxSize!Current dimension of arrays fX and fY; Double_tfMaximumMaximum value for plotting along y; Double_tfMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tfNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*fX[fNpoints] array of X points; Double_t*fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph(); Graph default constructor. TGraph(Int_t n); Constructor with only the number of points set; the arrays x and y will be set later. TGraph(Int_t n, const Int_t* x, const Int_t* y); Graph normal constructor with ints. TGraph(Int_t n, const Float_t* x, const Float_t* y); Graph normal constructor with floats. TGraph(Int_t n, const Double_t* x, const Double_t* y); Graph normal constructor with doubles. TGraph(const TGraph& gr); Copy constructor for this graph. TGraph& operator=(const TGraph& ); Equal operator for this graph. TGraph(const TVectorF& vx, const TVectorF& vy); Graph constructor with two vectors of floats in input; A graph is build with the X coordinates taken from vx and Y coord from vy; The number of points in the graph is the minimum of number of points; in vx and vy. TGraph(const TVectorD& vx, const TVectorD& vy); Graph constructor with two vectors of doubles in input; A graph is build with the X coordinates taken fr",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:14200,Modifiability,Inherit,Inherited,14200,"::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*fFunctionsPointer to list of functions (fits and user); TH1F*fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tfMaxSize!Current dimension of arrays fX and fY; Double_tfMaximumMaximum value for plotting along y; Double_tfMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tfNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*fX[fNpoints] array of X points; Double_t*fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph(); Graph default constructor. TGraph(Int_t n); Constructor with only the number of points set; the arrays x and y will be set later. TGraph(Int_t n, const Int_t* x, const Int_t* y); Graph normal constructor with ints. TGraph(Int_t n, const Float_t* x, const Float_t* y); Graph normal constructor with floats. TGraph(Int_t n, const Double_t* x, const Double_t* y); Graph normal constructor with doubles. TGraph(const TGraph& gr); Copy constructor for this graph. TGraph& operator=(const TGraph& ); Equal operator for this graph. TGraph(const TVectorF& vx, const TVectorF& vy); Graph constructor with two vectors of floats in input; A graph is build with the X coordinates taken from vx and Y coord from vy; The number of points in the graph is the minimum of number of points; in vx and vy. TGraph(const TVectorD& vx, const TVectorD& vy); Graph constructor with two vectors of doubles in input; A graph is build with the X coordinates taken fr",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:442,Performance,perform,performed,442,". TGraph. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraph. class TGraph: public TNamed, public TAttLine, public TAttFill, public TAttMarker. Graph class; A Graph is a graphics object made of two arrays X and Y with npoints each. The TGraph painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. Note:Unlike histogram or tree (or even TGraph2D), TGraph objects; are not automatically attached to the current TFile, in order to keep the; management and size of the TGraph has small as possible. The picture below gives an example:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""A Simple Graph Example"",200,10,700,500);; Double_t x[100], y[100];; Int_t n = 20;; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2);; }; gr = new TGraph(n,x,y);; gr->Draw(""AC*"");; return c1;; } . Function Members (Methods); public:. virtual~TGraph(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidBrowse(TBrowser* b); virtual Double_tChisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tCompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareRadius(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareX(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareY(const TGraph* gr, Int_t left, Int_t right); virtual voidComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidTNamed::Copy(TObject& named) co",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:22986,Performance,Perform,Perform,22986," Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); Fit this graph with function with name fname. interface to TGraph::Fit(TF1 *f1... fname is the name of an already predefined function created by TF1 or TF2; Predefined functions such as gaus, expo and poln are automatically; created by ROOT.; fname can also be a formula, accepted by the linear fitter (linear parts divided; by ""++"" sign), for example ""x++sin(x)"" for fitting ""[0]*x+[1]*sin(x)"". TFitResultPtr Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); Fit this graph with function f1. f1 is an already predefined function created by TF1.; Predefined functions such as gaus, expo and poln are automatically; created by ROOT. The list of fit options is given in parameter option.; option = ""W"" Set all weights to 1; ignore error bars; = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" User defined parameter settings are used for predefined functions; like ""gaus"", ""expo"", ""poln"", ""landau"".; Use this option when you want to fix one or more parameters for these functions.; = ""M"" More. Improve fit results.; It uses the IMPROVE command of TMinuit (see TMinuit::mnimpr); This algorithm attempts to improve the found local minimum by; searching for a better one.; = ""R"" Use the Range specified in the function range; = ""N"" Do not store the graphics function, do not draw; = ""0"" Do not plot the result of the fit. By default the fitted function; is drawn unless the option ""N"" above is specified.; = ""+"" Add this new fitted function to the list of fitted functions; (by default, any previous function is deleted); = ""C"" In case of linear fitting, do not calculate the chisquare; (saves time); = ""F"" If fitting a polN, use the minuit fitter; = ""EX0"" When fitting a TGraphErrors or TGraphAsymErrors do not co",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:42216,Performance,perform,perform,42216,"e quick sort, stating the range to be sorted. Examples:; // sort points along x axis; graph->Sort();; // sort points along their distance to origin; graph->Sort(&TGraph::CompareRadius);. Bool_t CompareErrors(const TGraph* gr, Int_t i, Int_t j) {; const TGraphErrors* ge=(const TGraphErrors*)gr;; return (ge->GetEY()[i]>ge->GetEY()[j]); }; // sort using the above comparison function, largest errors first; graph->Sort(&CompareErrors, kFALSE);. void Streamer(TBuffer& ); Stream an object of class TGraph. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. void SwapValues(Double_t* arr, Int_t pos1, Int_t pos2); Swap values. void UseCurrentStyle(); Set current style settings in this graph; This function is called when either TCanvas::UseCurrentStyle; or TROOT::ForceStyle have been invoked. Int_t Merge(TCollection* list); Adds all graphs from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph. void Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations); Find zero of a continuous function.; This function finds a real zero of the continuous real; function Y(X) in a given interval (A,B). See accompanying; notes for details of the argument list and calling sequence. Double_t ** Allocate(Int_t newsize). TList * GetListOfFunctions() const; { return fFunctions; }. Int_t GetMaxSize() const; {return fMaxSize;}. Int_t GetN() const; {return fNpoints;}. Double_t * GetX() const; {return fX;}. Double_t * GetY() const; {return fY;}. Double_t * GetEX() const; {return 0;}. Double_t * GetEY() const; {return 0;}. Double_t * GetEXhigh() const; {return 0;}. Double_t * GetEXlow() const; {return 0;}. Double_t * GetEYhigh() const; {return 0;}. Double_t * GetEYlow() const; {return 0;}. Double_t * GetEXlowd() const; {return 0;}. Double_t * GetEXhighd() const; {return 0;}. Double_t * GetEYlowd() const; {retur",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:16574,Safety,avoid,avoid,16574,"ith points computed; at the fNpx points of f.; if option ==""d"", a TGraph is created with points computed with the derivatives; at the fNpx points of f.; if option ==""i"", a TGraph is created with points computed with the integral; at the fNpx points of f.; if option ==""I"", a TGraph is created with points computed with the integral; at the fNpx+1 points of f and the integral is normalized to 1. TGraph(const char* filename, const char* format = ""%lg %lg"", Option_t* option = """"); Graph constructor reading input from filename.; filename is assumed to contain at least two columns of numbers.; the string format is by default ""%lg %lg"".; this is a standard c formatting for scanf. If columns of numbers should be; skipped, a ""%*lg"" or ""%*s"" for each column can be added,; e.g. ""%lg %*lg %lg"" would read x-values from the first and y-values from; the third column.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. ~TGraph(); Graph default destructor. Double_t** AllocateArrays(Int_t Narrays, Int_t arraySize); Allocate arrays. void Apply(TF1* f); Apply function f to all the data points; f may be a 1-D function TF1 or 2-d function TF2; The Y values of the graph are replaced by the new values computed; using the function. void Browse(TBrowser* b); Browse. Double_t Chisquare(TF1* f1, Option_t* option = """") const; Return the chisquare of this graph with respect to f1.; The chisquare is computed as the sum of the quantity below at each point:. where x and y are the graph point coordinates and f1'(x) is the derivative of function f1(x).; This method to approximate the uncertainty in y because of the errors in x, is called; ""effe",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:5774,Security,Hash,Hash,5774,"olor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TList*GetListOfFunctions() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; Double_tGetMaximum() const; Int_tGetMaxSize() const; virtual Double_tGetMean(Int_t axis = 1) const; Double_tGetMinimum() const; Int_tGetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tGetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*GetX() const; TAxis*GetXaxis() const; Double_t*GetY() const; TAxis*GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidInitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidInitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tInsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tIntegral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tIsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidLeastSquareFit(Int_t m, Double_t* a, Double_t xmi",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:24319,Security,Access,Access,24319,"the IMPROVE command of TMinuit (see TMinuit::mnimpr); This algorithm attempts to improve the found local minimum by; searching for a better one.; = ""R"" Use the Range specified in the function range; = ""N"" Do not store the graphics function, do not draw; = ""0"" Do not plot the result of the fit. By default the fitted function; is drawn unless the option ""N"" above is specified.; = ""+"" Add this new fitted function to the list of fitted functions; (by default, any previous function is deleted); = ""C"" In case of linear fitting, do not calculate the chisquare; (saves time); = ""F"" If fitting a polN, use the minuit fitter; = ""EX0"" When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the coordinate; = ""ROB"" In case of linear fitting, compute the LTS regression; coefficients (robust (resistant) regression), using; the default fraction of good points; ""ROB=0.x"" - compute the LTS regression coefficients, using; 0.x as a fraction of good points; = ""S"" The result of the fit is returned in the TFitResultPtr; (see below Access to the Fit Result). When the fit is drawn (by default), the parameter goption may be used; to specify a list of graphics options. See TGraphPainter for a complete; list of these options. In order to use the Range option, one must first create a function; with the expression to be fitted. For example, if your graph; has a defined range between -4 and 4 and you want to fit a gaussian; only in the interval 1 to 3, you can do:; TF1 *f1 = new TF1(""f1"",""gaus"",1,3);; graph->Fit(""f1"",""R"");. Who is calling this function:. Note that this function is called when calling TGraphErrors::Fit; or TGraphAsymmErrors::Fit ot TGraphBentErrors::Fit; See the discussion below on error calulation. Linear fitting:. When the fitting function is linear (contains the ""++"" sign) or the fitting; function is a polynomial, a linear fitter is initialised.; To create a linear function, use the following syntax: linear parts; separated by ""++"" sign.; Example: to fit the para",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:28952,Security,Access,Access,28952,"od"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" for polynomial fitting). 5) When fitting a TGraph (i.e. no errors associated with each point),; a correction is applied to the errors on the parameters with the following; formula:; errorp *= sqrt(chisquare/(ndf-1)). Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit which is return by an; automatic conversion of the TFitResultPtr to an integer. One can write in this case; directly:; Int_t fitStatus = h->Fit(myFunc). If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves; as a smart pointer to it. For example one can do:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted ",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:29509,Security,access,access,29509,"ions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" for polynomial fitting). 5) When fitting a TGraph (i.e. no errors associated with each point),; a correction is applied to the errors on the parameters with the following; formula:; errorp *= sqrt(chisquare/(ndf-1)). Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit which is return by an; automatic conversion of the TFitResultPtr to an integer. One can write in this case; directly:; Int_t fitStatus = h->Fit(myFunc). If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves; as a smart pointer to it. For example one can do:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the histogram is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is O",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:30372,Security,Access,Access,30372,"ter to it. For example one can do:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the histogram is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is OK (i.e. no error occurred).; The value of the fit status code is negative in case of an error not connected with the; minimization procedure, for example when a wrong function is used.; Otherwise the return value is the one returned from the minimization procedure.; When TMinuit (default case) or Minuit2 are used as minimizer the status returned is :; fitStatus = migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult.; TMinuit will return 0 (for migrad, minos, hesse or improve) in case of success and 4 in; case of error (see the documentation of TMinuit::mnexcm). So for example, for an error; only in Minos but not in Migrad a fitStatus of 40 will be returned.; Minuit2 will return also 0 in case of success and different values in mig",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:10833,Testability,Test,TestBit,10833,"SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidSetMaximum(Double_t maximum = -1111)MENU ; virtual voidSetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoint(Int_t i, Double_t x, Double_t y); virtual voidSetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidSort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraph(); TGraph(Int_t n); TGraph(const TGraph& gr); TGraph(const TH1* h); TGraph(const TVectorF& vx, const TVectorF& vy); TGraph(const TVectorD& vx, const TVectorD& vy); TGraph(const TF1* f, Option_t* option = """"); TGraph(Int_t n, const Int_t* x, const Int_t* y); TGraph(Int_t n, const Float_t* x, const Float_t* y); TGraph(Int_t n, const Double_t* x, const Double_t* y); TGraph(const char* filename, const char* format = ""%lg %lg"", Option_t* option = """"); virtual voidUseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidZero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations).",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:10872,Testability,Test,TestBits,10872,"SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidSetMaximum(Double_t maximum = -1111)MENU ; virtual voidSetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoint(Int_t i, Double_t x, Double_t y); virtual voidSetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidSort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraph(); TGraph(Int_t n); TGraph(const TGraph& gr); TGraph(const TH1* h); TGraph(const TVectorF& vx, const TVectorF& vy); TGraph(const TVectorD& vx, const TVectorD& vy); TGraph(const TF1* f, Option_t* option = """"); TGraph(Int_t n, const Int_t* x, const Int_t* y); TGraph(Int_t n, const Float_t* x, const Float_t* y); TGraph(Int_t n, const Double_t* x, const Double_t* y); TGraph(const char* filename, const char* format = ""%lg %lg"", Option_t* option = """"); virtual voidUseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidZero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations).",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:36791,Testability,test,test,36791,"(Int_t first = 0, Int_t last = -1) const; Integrate the TGraph data within a given (index) range; Note that this function computes the area of the polygon enclosed by the points of the TGraph.; The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; with the first one. It is clear that the order of the point is essential in defining the polygon.; Also note that the segments should not intersect. NB: if last=-1 (default) last is set to the last point.; if (first <0) the first point (0) is taken. Method:; There are many ways to calculate the surface of a polygon. It all depends on what kind of data; you have to deal with. The most evident solution would be to divide the polygon in triangles and; calculate the surface of them. But this can quickly become complicated as you will have to test; every segments of every triangles and check if they are intersecting with a current polygon's; segment or if it goes outside the polygon. Many calculations that would lead to many problems...; The solution (implemented by R.Brun); Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; segments don't intersect.; It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied; by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area.; Sources; http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-a-2d-polygon. Int_t IsInside(Double_t x, Double_t y) const; Return 1 if the point (x,y) is inside the polygon defined by; the graph vertices 0 otherwise. Algorithm:; The loop is executed with the end-point coordinates of a line segment; (",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:38709,Testability,log,logarithm,38709,"rithm:; The loop is executed with the end-point coordinates of a line segment; (X1,Y1)-(X2,Y2) and the Y-coordinate of a horizontal line.; The counter inter is incremented if the line (X1,Y1)-(X2,Y2) intersects; the horizontal line. In this case XINT is set to the X-coordinate of the; intersection point. If inter is an odd number, then the point x,y is within; the polygon. void LeastSquareFit(Int_t m, Double_t* a, Double_t xmin = 0, Double_t xmax = 0); Least squares polynomial fitting without weights. m number of parameters; a array of parameters; first 1st point number to fit (default =0); last last point number to fit (default=fNpoints-1). based on CERNLIB routine LSQ: Translated to C++ by Rene Brun. void LeastSquareLinearFit(Int_t n, Double_t& a0, Double_t& a1, Int_t& ifail, Double_t xmin = 0, Double_t xmax = 0); Least square linear fit without weights. Fit a straight line (a0 + a1*x) to the data in this graph.; ndata: if ndata<0, fits the logarithm of the graph (used in InitExpo() to set; the initial parameter values for a fit with exponential function.; a0: constant; a1: slope; ifail: return parameter indicating the status of the fit (ifail=0, fit is OK); xmin, xmax: fitting range. extracted from CERNLIB LLSQ: Translated to C++ by Rene Brun. void Paint(Option_t* chopt = """"); Draw this graph with its current attributes. void PaintGraph(Int_t npoints, const Double_t* x, const Double_t* y, Option_t* chopt); Draw the (x,y) as a graph. void PaintGrapHist(Int_t npoints, const Double_t* x, const Double_t* y, Option_t* chopt); Draw the (x,y) as a histogram. void PaintStats(TF1* fit); Draw the stats. void Print(Option_t* chopt = """") const; Print graph values. void RecursiveRemove(TObject* obj); Recursively remove object from the list of functions. Int_t RemovePoint(); Delete point close to the mouse position. Int_t RemovePoint(Int_t ipoint); Delete point number ipoint. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on outpu",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:43393,Testability,Test,TestBit,43393,"rr, Int_t pos1, Int_t pos2); Swap values. void UseCurrentStyle(); Set current style settings in this graph; This function is called when either TCanvas::UseCurrentStyle; or TROOT::ForceStyle have been invoked. Int_t Merge(TCollection* list); Adds all graphs from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph. void Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations); Find zero of a continuous function.; This function finds a real zero of the continuous real; function Y(X) in a given interval (A,B). See accompanying; notes for details of the argument list and calling sequence. Double_t ** Allocate(Int_t newsize). TList * GetListOfFunctions() const; { return fFunctions; }. Int_t GetMaxSize() const; {return fMaxSize;}. Int_t GetN() const; {return fNpoints;}. Double_t * GetX() const; {return fX;}. Double_t * GetY() const; {return fY;}. Double_t * GetEX() const; {return 0;}. Double_t * GetEY() const; {return 0;}. Double_t * GetEXhigh() const; {return 0;}. Double_t * GetEXlow() const; {return 0;}. Double_t * GetEYhigh() const; {return 0;}. Double_t * GetEYlow() const; {return 0;}. Double_t * GetEXlowd() const; {return 0;}. Double_t * GetEXhighd() const; {return 0;}. Double_t * GetEYlowd() const; {return 0;}. Double_t * GetEYhighd() const; {return 0;}. Double_t GetMaximum() const; {return fMaximum;}. Double_t GetMinimum() const; {return fMinimum;}. Bool_t IsEditable() const; {return !TestBit(kNotEditable);}. void SetHistogram(TH1F* h); {fHistogram = h;}. » Author: Rene Brun, Olivier Couet 12/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:851,Usability,Simpl,Simple,851,". TGraph. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraph. class TGraph: public TNamed, public TAttLine, public TAttFill, public TAttMarker. Graph class; A Graph is a graphics object made of two arrays X and Y with npoints each. The TGraph painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. Note:Unlike histogram or tree (or even TGraph2D), TGraph objects; are not automatically attached to the current TFile, in order to keep the; management and size of the TGraph has small as possible. The picture below gives an example:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""A Simple Graph Example"",200,10,700,500);; Double_t x[100], y[100];; Int_t n = 20;; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2);; }; gr = new TGraph(n,x,y);; gr->Draw(""AC*"");; return c1;; } . Function Members (Methods); public:. virtual~TGraph(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidBrowse(TBrowser* b); virtual Double_tChisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tCompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareRadius(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareX(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareY(const TGraph* gr, Int_t left, Int_t right); virtual voidComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidTNamed::Copy(TObject& named) co",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:1442,Usability,Clear,Clear,1442," virtual~TGraph(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidBrowse(TBrowser* b); virtual Double_tChisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tCompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareRadius(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareX(const TGraph* gr, Int_t left, Int_t right); static Bool_tCompareY(const TGraph* gr, Int_t left, Int_t right); virtual voidComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidTNamed::Copy(TObject& named) co",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:28170,Usability,simpl,simple,28170," is projected along the y-direction by calculating the function at the points x-exlow and; x+exhigh. The chisquare is then computed as the sum of the quantity below at each point:. where x and y are the point coordinates, and f'(x) is the derivative of the; function f(x). In case the function lies below (above) the data point, ey is ey_low (ey_high). thanks to Andy Haas (haas@yahoo.com) for adding the case with TGraphAsymmErrors; University of Washington. The approach used to approximate the uncertainty in y because of the; errors in x is to make it equal the error in x times the slope of the line.; The improvement, compared to the first method (f(x+ exhigh) - f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" for polynomial fitting). 5) When fitting a TGraph (i.e. no errors associated with each point),; a correction is applied to the errors on the parameters with the following; formula:; errorp *= sqrt(chisquare/(ndf-1)). Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit which is return by an; automatic conversion of the TFitResultPtr to an in",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:36273,Usability,clear,clear,36273,"nt number otherwise. TAxis * GetXaxis() const; Get x axis of the graph. TAxis * GetYaxis() const; Get y axis of the graph. void InitGaus(Double_t xmin = 0, Double_t xmax = 0); Compute Initial values of parameters for a gaussian. void InitExpo(Double_t xmin = 0, Double_t xmax = 0); Compute Initial values of parameters for an exponential. void InitPolynom(Double_t xmin = 0, Double_t xmax = 0); Compute Initial values of parameters for a polynom. Int_t InsertPoint(); Insert a new point at the mouse position. Double_t Integral(Int_t first = 0, Int_t last = -1) const; Integrate the TGraph data within a given (index) range; Note that this function computes the area of the polygon enclosed by the points of the TGraph.; The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; with the first one. It is clear that the order of the point is essential in defining the polygon.; Also note that the segments should not intersect. NB: if last=-1 (default) last is set to the last point.; if (first <0) the first point (0) is taken. Method:; There are many ways to calculate the surface of a polygon. It all depends on what kind of data; you have to deal with. The most evident solution would be to divide the polygon in triangles and; calculate the surface of them. But this can quickly become complicated as you will have to test; every segments of every triangles and check if they are intersecting with a current polygon's; segment or if it goes outside the polygon. Many calculations that would lead to many problems...; The solution (implemented by R.Brun); Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; segments don't intersect.; It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; vertex. Then it subtracts from it the result of the y coordina",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph.html:37059,Usability,simpl,simple,37059," the TGraph, do not need to form a closed polygon,; since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; with the first one. It is clear that the order of the point is essential in defining the polygon.; Also note that the segments should not intersect. NB: if last=-1 (default) last is set to the last point.; if (first <0) the first point (0) is taken. Method:; There are many ways to calculate the surface of a polygon. It all depends on what kind of data; you have to deal with. The most evident solution would be to divide the polygon in triangles and; calculate the surface of them. But this can quickly become complicated as you will have to test; every segments of every triangles and check if they are intersecting with a current polygon's; segment or if it goes outside the polygon. Many calculations that would lead to many problems...; The solution (implemented by R.Brun); Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; segments don't intersect.; It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied; by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area.; Sources; http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-a-2d-polygon. Int_t IsInside(Double_t x, Double_t y) const; Return 1 if the point (x,y) is inside the polygon defined by; the graph vertices 0 otherwise. Algorithm:; The loop is executed with the end-point coordinates of a line segment; (X1,Y1)-(X2,Y2) and the Y-coordinate of a horizontal line.; The counter inter is incremented if the line (X1,Y1)-(X2,Y2) intersects; the horizontal line. In this case XINT is set to the X-coordinate of the; intersection point. If inter is an odd number",MatchSource.WIKI,root/html604/TGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph.html
https://root.cern/root/html604/TGraph2D.html:8300,Availability,Error,Error,8300,,MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:8429,Availability,error,error,8429,"nst char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TFitResultPtrFit(const char* formula, Option_t* option = """", Option_t* goption = """")MENU ; virtual TFitResultPtrFit(TF2* f2, Option_t* option = """", Option_t* goption = """")MENU ; virtual voidFitPanel()MENU ; TList*GetContourList(Double_t contour); TDirectory*GetDirectory() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetErrorX(Int_t bin) const; virtual Double_tGetErrorY(Int_t bin) const; virtual Double_tGetErrorZ(Int_t bin) const; virtual Double_t*GetEX() const; virtual Double_t*GetEY() const; virtual Double_t*GetEZ() const; virtual Color_tTAtt",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:8513,Availability,error,error,8513,"ual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TFitResultPtrFit(const char* formula, Option_t* option = """", Option_t* goption = """")MENU ; virtual TFitResultPtrFit(TF2* f2, Option_t* option = """", Option_t* goption = """")MENU ; virtual voidFitPanel()MENU ; TList*GetContourList(Double_t contour); TDirectory*GetDirectory() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetErrorX(Int_t bin) const; virtual Double_tGetErrorY(Int_t bin) const; virtual Double_tGetErrorZ(Int_t bin) const; virtual Double_t*GetEX() const; virtual Double_t*GetEY() const; virtual Double_t*GetEZ() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH2D*GetH",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:18965,Availability,error,errors,18965,"lHistPainter*fPainter!Pointer to histogram painter; Int_tfSize!Real size of fX, fY and fZ; TStringTNamed::fTitleobject title; Double_t*fX[fNpoints]; Double_t*fY[fNpoints] Data set to be plotted; Double_t*fZ[fNpoints]; Double_tfZoutfHistogram bin height for points lying outside the interpolated area. private:. Bool_tfUserHistoTrue when SetHistogram has been called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2D(); Graph2D default constructor. TGraph2D(Int_t n, Int_t* x, Int_t* y, Int_t* z); Graph2D constructor with three vectors of ints as input. TGraph2D(Int_t n, Float_t* x, Float_t* y, Float_t* z); Graph2D constructor with three vectors of floats as input. TGraph2D(Int_t n, Double_t* x, Double_t* y, Double_t* z); Graph2D constructor with three vectors of doubles as input. TGraph2D(TH2* h2); Graph2D constructor with a TH2 (h2) as input.; Only the h2's bins within the X and Y axis ranges are used.; Empty bins, recognized when both content and errors are zero, are excluded. TGraph2D(const char* name, const char* title, Int_t n, Double_t* x, Double_t* y, Double_t* z); Graph2D constructor with name, title and three vectors of doubles as input.; name : name of 2D graph (avoid blanks); title : 2D graph title; if title is of the form ""stringt;stringx;stringy;stringz""; the 2D graph title is set to stringt, the x axis title to stringx,; the y axis title to stringy,etc. TGraph2D(Int_t n); Graph2D constructor. The arrays fX, fY and fZ should be filled via; calls to SetPoint. TGraph2D(const char* filename, const char* format = ""%lg %lg %lg"", Option_t* option = """"); Graph2D constructor reading input from filename; filename is assumed to contain at least three columns of numbers.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any ",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:22971,Availability,error,error,22971,"onst; search object named name in the list of functions. TObject * FindObject(const TObject* obj) const; search object obj in the list of functions. TFitResultPtr Fit(const char* formula, Option_t* option = """", Option_t* goption = """"); Fits this graph with function with name fname; Predefined functions such as gaus, expo and poln are automatically; created by ROOT.; fname can also be a formula, accepted by the linear fitter (linear parts divided; by ""++"" sign), for example ""x++sin(y)"" for fitting ""[0]*x+[1]*sin(y)"". TFitResultPtr Fit(TF2* f2, Option_t* option = """", Option_t* goption = """"); Fits this 2D graph with function f2. f2 is an already predefined function created by TF2.; Predefined functions such as gaus, expo and poln are automatically; created by ROOT. The list of fit options is given in parameter option.; option = ""W"" Set all weights to 1; ignore error bars; = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""R"" Use the Range specified in the function range; = ""N"" Do not store the graphics function, do not draw; = ""0"" Do not plot the result of the fit. By default the fitted function; is drawn unless the option ""N"" above is specified.; = ""+"" Add this new fitted function to the list of fitted functions; (by default, any previous function is deleted); = ""C"" In case of linear fitting, not calculate the chisquare; (saves time); = ""EX0"" When fitting a TGraphErrors do not consider errors in the coordinate; = ""ROB"" In case of linear fitting, compute the LTS regression; coefficients (robust (resistant) regression), using; the default fraction of good points; ""ROB=0.x"" - compute the LTS regression coefficients, using; 0.x as a fraction of good points; = ""S"" The result of the fit is returned in the TFitResultPtr; (see below Access to the Fit Result). In order to use the Range option, one must first create a function; with the expression to be fitted. For example, if your g",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:23605,Availability,error,errors,23605,"ple ""x++sin(y)"" for fitting ""[0]*x+[1]*sin(y)"". TFitResultPtr Fit(TF2* f2, Option_t* option = """", Option_t* goption = """"); Fits this 2D graph with function f2. f2 is an already predefined function created by TF2.; Predefined functions such as gaus, expo and poln are automatically; created by ROOT. The list of fit options is given in parameter option.; option = ""W"" Set all weights to 1; ignore error bars; = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""R"" Use the Range specified in the function range; = ""N"" Do not store the graphics function, do not draw; = ""0"" Do not plot the result of the fit. By default the fitted function; is drawn unless the option ""N"" above is specified.; = ""+"" Add this new fitted function to the list of fitted functions; (by default, any previous function is deleted); = ""C"" In case of linear fitting, not calculate the chisquare; (saves time); = ""EX0"" When fitting a TGraphErrors do not consider errors in the coordinate; = ""ROB"" In case of linear fitting, compute the LTS regression; coefficients (robust (resistant) regression), using; the default fraction of good points; ""ROB=0.x"" - compute the LTS regression coefficients, using; 0.x as a fraction of good points; = ""S"" The result of the fit is returned in the TFitResultPtr; (see below Access to the Fit Result). In order to use the Range option, one must first create a function; with the expression to be fitted. For example, if your graph2d; has a defined range between -4 and 4 and you want to fit a gaussian; only in the interval 1 to 3, you can do:; TF2 *f2 = new TF2(""f2"",""gaus"",1,3);; graph2d->Fit(""f2"",""R"");. Setting initial conditions. Parameters must be initialized before invoking the Fit function.; The setting of the parameter initial values is automatic for the; predefined functions : poln, expo, gaus. One can however disable; this automatic computation by specifying the option ""B"".; You can ",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:23708,Availability,robust,robust,23708,"ple ""x++sin(y)"" for fitting ""[0]*x+[1]*sin(y)"". TFitResultPtr Fit(TF2* f2, Option_t* option = """", Option_t* goption = """"); Fits this 2D graph with function f2. f2 is an already predefined function created by TF2.; Predefined functions such as gaus, expo and poln are automatically; created by ROOT. The list of fit options is given in parameter option.; option = ""W"" Set all weights to 1; ignore error bars; = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""R"" Use the Range specified in the function range; = ""N"" Do not store the graphics function, do not draw; = ""0"" Do not plot the result of the fit. By default the fitted function; is drawn unless the option ""N"" above is specified.; = ""+"" Add this new fitted function to the list of fitted functions; (by default, any previous function is deleted); = ""C"" In case of linear fitting, not calculate the chisquare; (saves time); = ""EX0"" When fitting a TGraphErrors do not consider errors in the coordinate; = ""ROB"" In case of linear fitting, compute the LTS regression; coefficients (robust (resistant) regression), using; the default fraction of good points; ""ROB=0.x"" - compute the LTS regression coefficients, using; 0.x as a fraction of good points; = ""S"" The result of the fit is returned in the TFitResultPtr; (see below Access to the Fit Result). In order to use the Range option, one must first create a function; with the expression to be fitted. For example, if your graph2d; has a defined range between -4 and 4 and you want to fit a gaussian; only in the interval 1 to 3, you can do:; TF2 *f2 = new TF2(""f2"",""gaus"",1,3);; graph2d->Fit(""f2"",""R"");. Setting initial conditions. Parameters must be initialized before invoking the Fit function.; The setting of the parameter initial values is automatic for the; predefined functions : poln, expo, gaus. One can however disable; this automatic computation by specifying the option ""B"".; You can ",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:26796,Availability,Error,Error,26796,"); where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);. Associated functions. One or more object (typically a TF2*) can be added to the list; of functions (fFunctions) associated to each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF2 *myfunc = gr->GetFunction(""myfunc"");. Access to the fit results. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit and it converts automatically to an; integer. If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves as a smart; pointer to it. For example one can do:; TFitResultPtr r = graph->Fit(""myFunc"",""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->Error(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:26822,Availability,error,error,26822,"); where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);. Associated functions. One or more object (typically a TF2*) can be added to the list; of functions (fFunctions) associated to each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF2 *myfunc = gr->GetFunction(""myfunc"");. Access to the fit results. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit and it converts automatically to an; integer. If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves as a smart; pointer to it. For example one can do:; TFitResultPtr r = graph->Fit(""myFunc"",""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->Error(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:26989,Availability,error,error,26989," each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF2 *myfunc = gr->GetFunction(""myfunc"");. Access to the fit results. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit and it converts automatically to an; integer. If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves as a smart; pointer to it. For example one can do:; TFitResultPtr r = graph->Fit(""myFunc"",""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->Error(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degress of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011);; prints the fit probability, parameter names/values, and errors.; You can change the position of the statistics box with these lines; (where g is a pointer to the TGraph",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:27449,Availability,error,error,27449,"t object.; By default the TFitResultPtr contains only the status of the fit and it converts automatically to an; integer. If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves as a smart; pointer to it. For example one can do:; TFitResultPtr r = graph->Fit(""myFunc"",""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->Error(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degress of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011);; prints the fit probability, parameter names/values, and errors.; You can change the position of the statistics box with these lines; (where g is a pointer to the TGraph):. Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. void FitPanel(); Display a GUI panel with all graph fit options. See class TFitEditor for example. TAxis * G",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:27708,Availability,error,errors,27708,"= r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->Error(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degress of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011);; prints the fit probability, parameter names/values, and errors.; You can change the position of the statistics box with these lines; (where g is a pointer to the TGraph):. Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. void FitPanel(); Display a GUI panel with all graph fit options. See class TFitEditor for example. TAxis * GetXaxis() const; Get x axis of the graph. TAxis * GetYaxis() const; Get y axis of the graph. TAxis * GetZaxis() const; Get z axis of the graph. TList * GetContourList(Double_t contour); Returns the X and Y graphs building a contour. A contour level may; consist in several parts not connected to each other. This function; returns them in a graphs' list. Double_t GetErrorX(Int_t bin) const; This fu",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:27912,Availability,error,errors,27912,"print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degress of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011);; prints the fit probability, parameter names/values, and errors.; You can change the position of the statistics box with these lines; (where g is a pointer to the TGraph):. Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. void FitPanel(); Display a GUI panel with all graph fit options. See class TFitEditor for example. TAxis * GetXaxis() const; Get x axis of the graph. TAxis * GetYaxis() const; Get y axis of the graph. TAxis * GetZaxis() const; Get z axis of the graph. TList * GetContourList(Double_t contour); Returns the X and Y graphs building a contour. A contour level may; consist in several parts not connected to each other. This function; returns them in a graphs' list. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It always returns a negative value. Real implementation in TGraph2DErrors. Double_t GetErrorY(Int_t bin) c",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:20479,Energy Efficiency,allocate,allocated,20479,"e filled via; calls to SetPoint. TGraph2D(const char* filename, const char* format = ""%lg %lg %lg"", Option_t* option = """"); Graph2D constructor reading input from filename; filename is assumed to contain at least three columns of numbers.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. TGraph2D(const TGraph2D& ); Graph2D copy constructor.; copy everything apart from the list of contained functions. ~TGraph2D(); TGraph2D destructor. TGraph2D& operator=(const TGraph2D& ); Graph2D operator ""="". void Build(Int_t n); Creates the 2D graph basic data structure. void Browse(TBrowser* ); Browse. void Clear(Option_t* option = """"); Free all memory allocated by this object. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the graph to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); Computes distance from point px,py to a graph. void Draw(Option_t* option = """"); Specific drawing options can be used to paint a TGraph2D:. ""TRI"" : The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color.; ""TRIW"" : The Delaunay triangles are drawn as wire frame; ""TRI1"" : The Delaunay triangles are painted with color levels. The edges; of each triangles are painted with the current line color.; ""TRI2"" : the Delaunay triangles are painted with color levels.; ""P"" : Draw a marker a",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:30292,Integrability,depend,depending,30292,"n interpolated 2D histogram.; If the ""empty"" option is selected, returns an empty histogram booked with; the limits of fX, fY and fZ. This option is used when the data set is; drawn with markers only. In that particular case there is no need to; find the Delaunay triangles. Double_t GetXmax() const; Returns the X maximum. Double_t GetXmin() const; Returns the X minimum. Double_t GetYmax() const; Returns the Y maximum. Double_t GetYmin() const; Returns the Y minimum. Double_t GetZmax() const; Returns the Z maximum. Double_t GetZmin() const; Returns the Z minimum. Double_t Interpolate(Double_t x, Double_t y); Finds the z value at the position (x,y) thanks to; the Delaunay interpolation. void Paint(Option_t* option = """"); Paints this 2D graph with its current attributes. TH1 * Project(Option_t* option = ""x"") const; Projects a 2-d graph into 1 or 2-d histograms depending on the; option parameter; option may contain a combination of the characters x,y,z; option = ""x"" return the x projection into a TH1D histogram; option = ""y"" return the y projection into a TH1D histogram; option = ""xy"" return the x versus y projection into a TH2D histogram; option = ""yx"" return the y versus x projection into a TH2D histogram. Int_t RemovePoint(Int_t ipoint); Deletes point number ipoint. void SavePrimitive(ostream& out, Option_t* option = """"); Saves primitive as a C++ statement(s) on output stream out. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetDirectory(TDirectory* dir); By default when an 2D graph is created, it is added to the list; of 2D graph objects in the current directory in memory.; This method removes reference to this 2D graph from current directory and add; reference to new directory dir. dir can be 0 in which case the; 2D graph does not belong to any directory. void SetHistogram(TH2* h); Sets the histogram to be filled.; If the 2D graph needs to be save in a TFile the fo",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:1374,Modifiability,extend,extended,1374,"c TAttMarker. Graph 2D class; A TGraph2D is a graphics object made of three arrays X, Y and Z with the same; number of points each. This class has different constructors:. With an array's dimension and three arrays x, y, and z:. TGraph2D *g = new TGraph2D(n, x, y, z);. x, y, z arrays can be doubles, floats, or ints.; With an array's dimension only:. TGraph2D *g = new TGraph2D(n);. The internal arrays are then filled with SetPoint(). The following line; fills the internal arrays at the position i with the values; x, y, z. g->SetPoint(i, x, y, z);. Without parameters:. TGraph2D *g = new TGraph2D();. again SetPoint() must be used to fill the internal arrays.; From a file:. TGraph2D *g = new TGraph2D(""graph.dat"");. Arrays are read from the ASCII file ""graph.dat"" according to a specifies; format. The default format is %lg %lg %lg. Note that in any of these three cases, SetPoint() can be used to change a data; point or add a new one. If the data point index (i) is greater than the; current size of the internal arrays, they are automatically extended. Specific drawing options can be used to paint a TGraph2D:. ""TRI""; The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color. ""TRIW; The Delaunay triangles are drawn as wire frame. ""TRI1; The Delaunay triangles are painted with color levels. The edges; of each triangles are painted with the current line color. ""TRI2; the Delaunay triangles are painted with color levels. ""P"" ; Draw a marker at each vertex. ""P0"" ; Draw a circle at each vertex. Each circle background is white. ""PCOL"" ; Draw a marker at each vertex. The color of each marker is; defined according to its Z position. ""LINE"" ; Draw a 3D polyline. A TGraph2D can be also drawn with any options valid to draw a 2D histogram; (like COL, SURF, LEGO, CONT etc..). When a TGraph2D is drawn with one of the 2D histo",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:11027,Modifiability,Inherit,InheritsFrom,11027," const char*TNamed::GetName() const; Int_tGetNpx() const; Int_tGetNpy() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*GetX() const; TAxis*GetXaxis() const; Double_tGetXmax() const; virtual Double_tGetXmaxE() const; Double_tGetXmin() const; virtual Double_tGetXminE() const; Double_t*GetY() const; TAxis*GetYaxis() const; Double_tGetYmax() const; virtual Double_tGetYmaxE() const; Double_tGetYmin() const; virtual Double_tGetYminE() const; Double_t*GetZ() const; TAxis*GetZaxis() const; Double_tGetZmax() const; virtual Double_tGetZmaxE() const; Double_tGetZmin() const; virtual Double_tGetZminE() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; Double_tInterpolate(Double_t x, Double_t y); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:11093,Modifiability,Inherit,InheritsFrom,11093,"Npy() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*GetX() const; TAxis*GetXaxis() const; Double_tGetXmax() const; virtual Double_tGetXmaxE() const; Double_tGetXmin() const; virtual Double_tGetXminE() const; Double_t*GetY() const; TAxis*GetYaxis() const; Double_tGetYmax() const; virtual Double_tGetYmaxE() const; Double_tGetYmin() const; virtual Double_tGetYminE() const; Double_t*GetZ() const; TAxis*GetZaxis() const; Double_tGetZmax() const; virtual Double_tGetZmaxE() const; Double_tGetZmin() const; virtual Double_tGetZminE() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; Double_tInterpolate(Double_t x, Double_t y); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operato",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:18337,Modifiability,Inherit,Inheritance,18337,"ineWidthline width; Double_tfMarginExtra space (in %) around interpolated area for fHistogram; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tfMaxIterMaximum number of iterations to find Delaunay triangles; Double_tfMaximumMaximum value for plotting along z; Double_tfMinimumMinimum value for plotting along z; TStringTNamed::fNameobject identifier; Int_tfNpointsNumber of points in the data set; Int_tfNpxNumber of bins along X in fHistogram; Int_tfNpyNumber of bins along Y in fHistogram; TVirtualHistPainter*fPainter!Pointer to histogram painter; Int_tfSize!Real size of fX, fY and fZ; TStringTNamed::fTitleobject title; Double_t*fX[fNpoints]; Double_t*fY[fNpoints] Data set to be plotted; Double_t*fZ[fNpoints]; Double_tfZoutfHistogram bin height for points lying outside the interpolated area. private:. Bool_tfUserHistoTrue when SetHistogram has been called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2D(); Graph2D default constructor. TGraph2D(Int_t n, Int_t* x, Int_t* y, Int_t* z); Graph2D constructor with three vectors of ints as input. TGraph2D(Int_t n, Float_t* x, Float_t* y, Float_t* z); Graph2D constructor with three vectors of floats as input. TGraph2D(Int_t n, Double_t* x, Double_t* y, Double_t* z); Graph2D constructor with three vectors of doubles as input. TGraph2D(TH2* h2); Graph2D constructor with a TH2 (h2) as input.; Only the h2's bins within the X and Y axis ranges are used.; Empty bins, recognized when both content and errors are zero, are excluded. TGraph2D(const char* name, const char* title, Int_t n, Double_t* x, Double_t* y, Double_t* z); Graph2D constructor with name, title and three vectors of doubles as input.; name : name of 2D graph (avoid blanks); title : 2D graph title; if title is of the form ""stringt;stringx;stringy;stringz""; the 2D graph title is set to stringt, the x axis title to stringx,; the ",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:18350,Modifiability,Inherit,Inherited,18350,"ineWidthline width; Double_tfMarginExtra space (in %) around interpolated area for fHistogram; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tfMaxIterMaximum number of iterations to find Delaunay triangles; Double_tfMaximumMaximum value for plotting along z; Double_tfMinimumMinimum value for plotting along z; TStringTNamed::fNameobject identifier; Int_tfNpointsNumber of points in the data set; Int_tfNpxNumber of bins along X in fHistogram; Int_tfNpyNumber of bins along Y in fHistogram; TVirtualHistPainter*fPainter!Pointer to histogram painter; Int_tfSize!Real size of fX, fY and fZ; TStringTNamed::fTitleobject title; Double_t*fX[fNpoints]; Double_t*fY[fNpoints] Data set to be plotted; Double_t*fZ[fNpoints]; Double_tfZoutfHistogram bin height for points lying outside the interpolated area. private:. Bool_tfUserHistoTrue when SetHistogram has been called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2D(); Graph2D default constructor. TGraph2D(Int_t n, Int_t* x, Int_t* y, Int_t* z); Graph2D constructor with three vectors of ints as input. TGraph2D(Int_t n, Float_t* x, Float_t* y, Float_t* z); Graph2D constructor with three vectors of floats as input. TGraph2D(Int_t n, Double_t* x, Double_t* y, Double_t* z); Graph2D constructor with three vectors of doubles as input. TGraph2D(TH2* h2); Graph2D constructor with a TH2 (h2) as input.; Only the h2's bins within the X and Y axis ranges are used.; Empty bins, recognized when both content and errors are zero, are excluded. TGraph2D(const char* name, const char* title, Int_t n, Double_t* x, Double_t* y, Double_t* z); Graph2D constructor with name, title and three vectors of doubles as input.; name : name of 2D graph (avoid blanks); title : 2D graph title; if title is of the form ""stringt;stringx;stringy;stringz""; the 2D graph title is set to stringt, the x axis title to stringx,; the ",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:32606,Modifiability,extend,extended,32606,"e TFile, exit; 4) Open the TFile, retrieve g and h; 5) Call h->SetDirectory(0); 6) Call g->SetHistogram(h) again; 7) Carry on as normal. void SetMargin(Double_t m = 0.10000000000000001); Sets the extra space (in %) around interpolated area for the 2D histogram. void SetMarginBinsContent(Double_t z = 0.); Sets the histogram bin height for points lying outside the TGraphDelaunay; convex hull ie: the bins in the margin. void SetMaximum(Double_t maximum = -1111); Set maximum. void SetMinimum(Double_t minimum = -1111); Set minimum. void SetName(const char* name); Changes the name of this 2D graph. void SetNameTitle(const char* name, const char* title); Change the name and title of this 2D graph. void SetNpx(Int_t npx = 40); Sets the number of bins along X used to draw the function. void SetNpy(Int_t npx = 40); Sets the number of bins along Y used to draw the function. void SetPoint(Int_t point, Double_t x, Double_t y, Double_t z); Sets point number n.; If n is greater than the current size, the arrays are automatically; extended. void SetTitle(const char* title = """"); Sets graph title. void Streamer(TBuffer& ); Stream a class object. TDirectory * GetDirectory() const; {return fDirectory;}. Int_t GetNpx() const; {return fNpx;}. Int_t GetNpy() const; {return fNpy;}. TList * GetListOfFunctions() const; { return fFunctions; }. Double_t GetMargin() const; {return fMargin;}. Double_t GetMaximum() const; {return fMaximum;}. Double_t GetMinimum() const; {return fMinimum;}. Int_t GetN() const; {return fNpoints;}. Double_t * GetX() const; {return fX;}. Double_t * GetY() const; {return fY;}. Double_t * GetZ() const; {return fZ;}. Double_t * GetEX() const; {return 0;}. Double_t * GetEY() const; {return 0;}. Double_t * GetEZ() const; {return 0;}. Double_t GetXmaxE() const; {return GetXmax();}. Double_t GetXminE() const; {return GetXmin();}. Double_t GetYmaxE() const; {return GetYmax();}. Double_t GetYminE() const; {return GetYmin();}. Double_t GetZmaxE() const; {return GetZmax();}. D",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:20542,Performance,Perform,Perform,20542,"lg %lg"", Option_t* option = """"); Graph2D constructor reading input from filename; filename is assumed to contain at least three columns of numbers.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. TGraph2D(const TGraph2D& ); Graph2D copy constructor.; copy everything apart from the list of contained functions. ~TGraph2D(); TGraph2D destructor. TGraph2D& operator=(const TGraph2D& ); Graph2D operator ""="". void Build(Int_t n); Creates the 2D graph basic data structure. void Browse(TBrowser* ); Browse. void Clear(Option_t* option = """"); Free all memory allocated by this object. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the graph to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); Computes distance from point px,py to a graph. void Draw(Option_t* option = """"); Specific drawing options can be used to paint a TGraph2D:. ""TRI"" : The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color.; ""TRIW"" : The Delaunay triangles are drawn as wire frame; ""TRI1"" : The Delaunay triangles are painted with color levels. The edges; of each triangles are painted with the current line color.; ""TRI2"" : the Delaunay triangles are painted with color levels.; ""P"" : Draw a marker at each vertex; ""P0"" : Draw a circle at each vertex. Each circle background is white.; ""PCOL",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:19193,Safety,avoid,avoid,19193,"HistoTrue when SetHistogram has been called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2D(); Graph2D default constructor. TGraph2D(Int_t n, Int_t* x, Int_t* y, Int_t* z); Graph2D constructor with three vectors of ints as input. TGraph2D(Int_t n, Float_t* x, Float_t* y, Float_t* z); Graph2D constructor with three vectors of floats as input. TGraph2D(Int_t n, Double_t* x, Double_t* y, Double_t* z); Graph2D constructor with three vectors of doubles as input. TGraph2D(TH2* h2); Graph2D constructor with a TH2 (h2) as input.; Only the h2's bins within the X and Y axis ranges are used.; Empty bins, recognized when both content and errors are zero, are excluded. TGraph2D(const char* name, const char* title, Int_t n, Double_t* x, Double_t* y, Double_t* z); Graph2D constructor with name, title and three vectors of doubles as input.; name : name of 2D graph (avoid blanks); title : 2D graph title; if title is of the form ""stringt;stringx;stringy;stringz""; the 2D graph title is set to stringt, the x axis title to stringx,; the y axis title to stringy,etc. TGraph2D(Int_t n); Graph2D constructor. The arrays fX, fY and fZ should be filled via; calls to SetPoint. TGraph2D(const char* filename, const char* format = ""%lg %lg %lg"", Option_t* option = """"); Graph2D constructor reading input from filename; filename is assumed to contain at least three columns of numbers.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. TGraph2D(const TGraph2D& ); Graph2D copy constructor.; copy everything apart from the list of contained functions. ~TGraph2D(); TGraph2D destructor. TGraph2D&",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:19810,Safety,avoid,avoid,19810,"H2 (h2) as input.; Only the h2's bins within the X and Y axis ranges are used.; Empty bins, recognized when both content and errors are zero, are excluded. TGraph2D(const char* name, const char* title, Int_t n, Double_t* x, Double_t* y, Double_t* z); Graph2D constructor with name, title and three vectors of doubles as input.; name : name of 2D graph (avoid blanks); title : 2D graph title; if title is of the form ""stringt;stringx;stringy;stringz""; the 2D graph title is set to stringt, the x axis title to stringx,; the y axis title to stringy,etc. TGraph2D(Int_t n); Graph2D constructor. The arrays fX, fY and fZ should be filled via; calls to SetPoint. TGraph2D(const char* filename, const char* format = ""%lg %lg %lg"", Option_t* option = """"); Graph2D constructor reading input from filename; filename is assumed to contain at least three columns of numbers.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. TGraph2D(const TGraph2D& ); Graph2D copy constructor.; copy everything apart from the list of contained functions. ~TGraph2D(); TGraph2D destructor. TGraph2D& operator=(const TGraph2D& ); Graph2D operator ""="". void Build(Int_t n); Creates the 2D graph basic data structure. void Browse(TBrowser* ); Browse. void Clear(Option_t* option = """"); Free all memory allocated by this object. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the graph to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); Computes distance from poi",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:3248,Security,access,accessed,3248," (like COL, SURF, LEGO, CONT etc..). When a TGraph2D is drawn with one of the 2D histogram drawing option,; an intermediate 2D histogram is filled using the Delaunay triangles; to interpolate the data set. The 2D histogram has equidistant bins along the X; and Y directions. The number of bins along each direction can be change using; SetNpx() and SetNpy(). Each bin is filled with the Z; value found via a linear interpolation on the plane defined by the triangle above; the (X,Y) coordinates of the bin center. The existing (X,Y,Z) points can be randomly scattered.; The Delaunay triangles are build in the (X,Y) plane. These 2D triangles are then; used to define flat planes in (X,Y,Z) over which the interpolation is done to fill; the 2D histogram. The 3D triangles int takes build a 3D surface in; the form of tessellating triangles at various angles. The triangles found can be; drawn in 3D with one of the TGraph2D specific drawing options. The histogram generated by the Delaunay interpolation can be accessed using the; GetHistogram() method. Example:. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Graph2D example"",0,0,600,400);; Double_t x, y, z, P = 6.;; Int_t np = 200;; TGraph2D *dt = new TGraph2D();; TRandom *r = new TRandom();; for (Int_t N=0; N<np; N++) {; x = 2*P*(r->Rndm(N))-P;; y = 2*P*(r->Rndm(N))-P;; z = (sin(x)/x)*(sin(y)/y)+0.2;; dt->SetPoint(N,x,y,z);; }; gStyle->SetPalette(1);; dt->Draw(""surf1"");; return c;; }; 2D graphs can be fitted as shown by the following example:. Picture; Source. //Fitting a TGraph2D; //Author: Olivier Couet. #include <TMath.h>; #include <TGraph2D.h>; #include <TRandom.h>; #include <TStyle.h>; #include <TCanvas.h>; #include <TF2.h>; #include <TH1.h>. TCanvas* graph2dfit(); {; gStyle->SetOptStat(0);; gStyle->SetOptFit();. TCanvas *c = new TCanvas(""c"",""Graph2D example"",0,0,600,800);; c->Divide(2,3);. Double_t rnd, x, y, z;; Double_t e = 0.3;; Int_t nd = 400;; Int_t np = 10000;. TRandom r;; Double_t fl = 6;; TF2 *f2 = new TF2(""f2"",""1",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:10917,Security,Hash,Hash,10917,"Marker::GetMarkerStyle() const; Double_tGetMaximum() const; Double_tGetMinimum() const; Int_tGetN() const; virtual const char*TNamed::GetName() const; Int_tGetNpx() const; Int_tGetNpy() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*GetX() const; TAxis*GetXaxis() const; Double_tGetXmax() const; virtual Double_tGetXmaxE() const; Double_tGetXmin() const; virtual Double_tGetXminE() const; Double_t*GetY() const; TAxis*GetYaxis() const; Double_tGetYmax() const; virtual Double_tGetYmaxE() const; Double_tGetYmin() const; virtual Double_tGetYminE() const; Double_t*GetZ() const; TAxis*GetZaxis() const; Double_tGetZmax() const; virtual Double_tGetZmaxE() const; Double_tGetZmin() const; virtual Double_tGetZminE() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; Double_tInterpolate(Double_t x, Double_t y); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator del",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:23951,Security,Access,Access,23951,"arameter option.; option = ""W"" Set all weights to 1; ignore error bars; = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""R"" Use the Range specified in the function range; = ""N"" Do not store the graphics function, do not draw; = ""0"" Do not plot the result of the fit. By default the fitted function; is drawn unless the option ""N"" above is specified.; = ""+"" Add this new fitted function to the list of fitted functions; (by default, any previous function is deleted); = ""C"" In case of linear fitting, not calculate the chisquare; (saves time); = ""EX0"" When fitting a TGraphErrors do not consider errors in the coordinate; = ""ROB"" In case of linear fitting, compute the LTS regression; coefficients (robust (resistant) regression), using; the default fraction of good points; ""ROB=0.x"" - compute the LTS regression coefficients, using; 0.x as a fraction of good points; = ""S"" The result of the fit is returned in the TFitResultPtr; (see below Access to the Fit Result). In order to use the Range option, one must first create a function; with the expression to be fitted. For example, if your graph2d; has a defined range between -4 and 4 and you want to fit a gaussian; only in the interval 1 to 3, you can do:; TF2 *f2 = new TF2(""f2"",""gaus"",1,3);; graph2d->Fit(""f2"",""R"");. Setting initial conditions. Parameters must be initialized before invoking the Fit function.; The setting of the parameter initial values is automatic for the; predefined functions : poln, expo, gaus. One can however disable; this automatic computation by specifying the option ""B"".; You can specify boundary limits for some or all parameters via; f2->SetParLimits(p_number, parmin, parmax);; if parmin>=parmax, the parameter is fixed; Note that you are not forced to fix the limits for all parameters.; For example, if you fit a function with 6 parameters, you can do:; func->SetParameters(0,3.1,1.e-6,0.1,-8,100);; func->SetPar",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:26218,Security,Access,Access,26218,". In this case, the function will be taken; instead of the full graph range. Changing the fitting function. By default a chi2 fitting function is used for fitting a TGraph.; The function is implemented in FitUtil::EvaluateChi2.; In case of TGraph2DErrors an effective chi2 is used; (see TGraphErrors fit in TGraph::Fit) and is implemented in; FitUtil::EvaluateChi2Effective; To specify a User defined fitting function, specify option ""U"" and; call the following functions:; TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);. Associated functions. One or more object (typically a TF2*) can be added to the list; of functions (fFunctions) associated to each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF2 *myfunc = gr->GetFunction(""myfunc"");. Access to the fit results. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit and it converts automatically to an; integer. If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves as a smart; pointer to it. For example one can do:; TFitResultPtr r = graph->Fit(""myFunc"",""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->Error(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc,",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:26675,Security,access,access,26675,"); where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);. Associated functions. One or more object (typically a TF2*) can be added to the list; of functions (fFunctions) associated to each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF2 *myfunc = gr->GetFunction(""myfunc"");. Access to the fit results. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit and it converts automatically to an; integer. If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves as a smart; pointer to it. For example one can do:; TFitResultPtr r = graph->Fit(""myFunc"",""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t par0 = r->Value(0); // retrieve the value for the parameter 0; Double_t err0 = r->Error(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:15257,Testability,Test,TestBit,15257,")MENU ; voidSetMarginBinsContent(Double_t z = 0.)MENU ; virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); voidSetMaximum(Double_t maximum = -1111)MENU ; voidSetMaxIter(Int_t n = 100000)MENU ; voidSetMinimum(Double_t minimum = -1111)MENU ; virtual voidSetName(const char* name)MENU ; virtual voidSetNameTitle(const char* name, const char* title); voidSetNpx(Int_t npx = 40)MENU ; voidSetNpy(Int_t npx = 40)MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoint(Int_t point, Double_t x, Double_t y, Double_t z)MENU ; virtual voidSetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraph2D(); TGraph2D(Int_t n); TGraph2D(TH2* h2); TGraph2D(const TGraph2D&); TGraph2D(const char* filename, const char* format = ""%lg %lg %lg"", Option_t* option = """"); TGraph2D(Int_t n, Int_t* x, Int_t* y, Int_t* z); TGraph2D(Int_t n, Float_t* x, Float_t* y, Float_t* z); TGraph2D(Int_t n, Double_t* x, Double_t* y, Double_t* z); TGraph2D(const char* name, const char* title, Int_t n, Double_t* x, Double_t* y, Double_t* z); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidBuild(Int_t n); virtual voidTOb",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:15296,Testability,Test,TestBits,15296,")MENU ; voidSetMarginBinsContent(Double_t z = 0.)MENU ; virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); voidSetMaximum(Double_t maximum = -1111)MENU ; voidSetMaxIter(Int_t n = 100000)MENU ; voidSetMinimum(Double_t minimum = -1111)MENU ; virtual voidSetName(const char* name)MENU ; virtual voidSetNameTitle(const char* name, const char* title); voidSetNpx(Int_t npx = 40)MENU ; voidSetNpy(Int_t npx = 40)MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoint(Int_t point, Double_t x, Double_t y, Double_t z)MENU ; virtual voidSetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraph2D(); TGraph2D(Int_t n); TGraph2D(TH2* h2); TGraph2D(const TGraph2D&); TGraph2D(const char* filename, const char* format = ""%lg %lg %lg"", Option_t* option = """"); TGraph2D(Int_t n, Int_t* x, Int_t* y, Int_t* z); TGraph2D(Int_t n, Float_t* x, Float_t* y, Float_t* z); TGraph2D(Int_t n, Double_t* x, Double_t* y, Double_t* z); TGraph2D(const char* name, const char* title, Int_t n, Double_t* x, Double_t* y, Double_t* z); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidBuild(Int_t n); virtual voidTOb",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2D.html:20433,Usability,Clear,Clear,20433,"e filled via; calls to SetPoint. TGraph2D(const char* filename, const char* format = ""%lg %lg %lg"", Option_t* option = """"); Graph2D constructor reading input from filename; filename is assumed to contain at least three columns of numbers.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. TGraph2D(const TGraph2D& ); Graph2D copy constructor.; copy everything apart from the list of contained functions. ~TGraph2D(); TGraph2D destructor. TGraph2D& operator=(const TGraph2D& ); Graph2D operator ""="". void Build(Int_t n); Creates the 2D graph basic data structure. void Browse(TBrowser* ); Browse. void Clear(Option_t* option = """"); Free all memory allocated by this object. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the graph to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); Computes distance from point px,py to a graph. void Draw(Option_t* option = """"); Specific drawing options can be used to paint a TGraph2D:. ""TRI"" : The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color.; ""TRIW"" : The Delaunay triangles are drawn as wire frame; ""TRI1"" : The Delaunay triangles are painted with color levels. The edges; of each triangles are painted with the current line color.; ""TRI2"" : the Delaunay triangles are painted with color levels.; ""P"" : Draw a marker a",MatchSource.WIKI,root/html604/TGraph2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2D.html
https://root.cern/root/html604/TGraph2DErrors.html:324,Availability,error,errors,324,". TGraph2DErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraph2DErrors. class TGraph2DErrors: public TGraph2D. Graph 2D class with errors; A TGraph2DErrors is a TGraph2D with errors. It behaves like a TGraph2D and has; the same drawing options. The ""ERR"" drawing option allows to display the error bars. The; following example shows how to use it:. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Graph2DErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;. Double_t *rx=0, *ry=0, *rz=0;; Double_t *ex=0, *ey=0, *ez=0;. rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; ex = new Double_t[np];; ey = new Double_t[np];; ez = new Double_t[np];. TRandom *r = new TRandom();. for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; ex[N] = r->Rndm(N);; ey[N] = r->Rndm(N);; ez[N] = 10*r->Rndm(N);; }. TGraph2DErrors *dte = new TGraph2DErrors(np, rx, ry, rz, ex, ey, ez);; dte->SetTitle(""TGraph2D with error bars: option \""ERR\"""");; dte->SetFillColor(29);; dte->SetMarkerSize(0.8);; dte->SetMarkerStyle(20);; dte->SetMarkerColor(kRed);; dte->SetLineColor(kBlue-3);; dte->SetLineWidth(2);; dte->Draw(""err p0"");; gPad->SetLogy(1);; return c;; }. Function Members (Methods); public:. virtual~TGraph2DErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGraph2D::Browse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGraph2D::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtua",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:368,Availability,error,errors,368,". TGraph2DErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraph2DErrors. class TGraph2DErrors: public TGraph2D. Graph 2D class with errors; A TGraph2DErrors is a TGraph2D with errors. It behaves like a TGraph2D and has; the same drawing options. The ""ERR"" drawing option allows to display the error bars. The; following example shows how to use it:. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Graph2DErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;. Double_t *rx=0, *ry=0, *rz=0;; Double_t *ex=0, *ey=0, *ez=0;. rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; ex = new Double_t[np];; ey = new Double_t[np];; ez = new Double_t[np];. TRandom *r = new TRandom();. for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; ex[N] = r->Rndm(N);; ey[N] = r->Rndm(N);; ez[N] = 10*r->Rndm(N);; }. TGraph2DErrors *dte = new TGraph2DErrors(np, rx, ry, rz, ex, ey, ez);; dte->SetTitle(""TGraph2D with error bars: option \""ERR\"""");; dte->SetFillColor(29);; dte->SetMarkerSize(0.8);; dte->SetMarkerStyle(20);; dte->SetMarkerColor(kRed);; dte->SetLineColor(kBlue-3);; dte->SetLineWidth(2);; dte->Draw(""err p0"");; gPad->SetLogy(1);; return c;; }. Function Members (Methods); public:. virtual~TGraph2DErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGraph2D::Browse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGraph2D::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtua",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:485,Availability,error,error,485,". TGraph2DErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraph2DErrors. class TGraph2DErrors: public TGraph2D. Graph 2D class with errors; A TGraph2DErrors is a TGraph2D with errors. It behaves like a TGraph2D and has; the same drawing options. The ""ERR"" drawing option allows to display the error bars. The; following example shows how to use it:. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Graph2DErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;. Double_t *rx=0, *ry=0, *rz=0;; Double_t *ex=0, *ey=0, *ez=0;. rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; ex = new Double_t[np];; ey = new Double_t[np];; ez = new Double_t[np];. TRandom *r = new TRandom();. for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; ex[N] = r->Rndm(N);; ey[N] = r->Rndm(N);; ez[N] = 10*r->Rndm(N);; }. TGraph2DErrors *dte = new TGraph2DErrors(np, rx, ry, rz, ex, ey, ez);; dte->SetTitle(""TGraph2D with error bars: option \""ERR\"""");; dte->SetFillColor(29);; dte->SetMarkerSize(0.8);; dte->SetMarkerStyle(20);; dte->SetMarkerColor(kRed);; dte->SetLineColor(kBlue-3);; dte->SetLineWidth(2);; dte->Draw(""err p0"");; gPad->SetLogy(1);; return c;; }. Function Members (Methods); public:. virtual~TGraph2DErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGraph2D::Browse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGraph2D::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtua",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:1250,Availability,error,error,1250,"; » HIST; » TGraph2DErrors. class TGraph2DErrors: public TGraph2D. Graph 2D class with errors; A TGraph2DErrors is a TGraph2D with errors. It behaves like a TGraph2D and has; the same drawing options. The ""ERR"" drawing option allows to display the error bars. The; following example shows how to use it:. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Graph2DErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;. Double_t *rx=0, *ry=0, *rz=0;; Double_t *ex=0, *ey=0, *ez=0;. rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; ex = new Double_t[np];; ey = new Double_t[np];; ez = new Double_t[np];. TRandom *r = new TRandom();. for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; ex[N] = r->Rndm(N);; ey[N] = r->Rndm(N);; ez[N] = 10*r->Rndm(N);; }. TGraph2DErrors *dte = new TGraph2DErrors(np, rx, ry, rz, ex, ey, ez);; dte->SetTitle(""TGraph2D with error bars: option \""ERR\"""");; dte->SetFillColor(29);; dte->SetMarkerSize(0.8);; dte->SetMarkerStyle(20);; dte->SetMarkerColor(kRed);; dte->SetLineColor(kBlue-3);; dte->SetLineWidth(2);; dte->Draw(""err p0"");; gPad->SetLogy(1);; return c;; }. Function Members (Methods); public:. virtual~TGraph2DErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGraph2D::Browse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGraph2D::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTGraph2D::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph2D::Dis",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:2503,Availability,Error,Error,2503," virtual~TGraph2DErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGraph2D::Browse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGraph2D::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtua",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:2632,Availability,error,error,2632,"ndPad(Option_t* option = """"); virtual voidTGraph2D::Browse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGraph2D::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTGraph2D::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph2D::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraph2D::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph2D::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph2D::FindObject(const char* name) const; virtual TObject*TGraph2D::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph2D::Fit(const char* formula, Option_t* option = """", Option_t* goption = """")MENU ; virtual TFitResultPtrTGraph2D::Fit(TF2* f2, Option_t* option = """", Option_t* goption = """")MENU ; virtual voidTGraph2D::FitPanel()MENU ; TList*TGraph2D::GetContourList(Double_t contour); TDirectory*TGraph2D::GetDirectory() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetErrorX(Int_t bin) const; virtual Double_tGetErrorY(Int_t bin) const; virtual Double_tGetErrorZ(Int_t bin) const; virtual Double_t*GetEX() const; vir",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:2716,Availability,error,error,2716,"*Class(); virtual const char*TObject::ClassName() const; virtual voidTGraph2D::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTGraph2D::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph2D::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraph2D::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph2D::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph2D::FindObject(const char* name) const; virtual TObject*TGraph2D::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph2D::Fit(const char* formula, Option_t* option = """", Option_t* goption = """")MENU ; virtual TFitResultPtrTGraph2D::Fit(TF2* f2, Option_t* option = """", Option_t* goption = """")MENU ; virtual voidTGraph2D::FitPanel()MENU ; TList*TGraph2D::GetContourList(Double_t contour); TDirectory*TGraph2D::GetDirectory() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetErrorX(Int_t bin) const; virtual Double_tGetErrorY(Int_t bin) const; virtual Double_tGetErrorZ(Int_t bin) const; virtual Double_t*GetEX() const; virtual Double_t*GetEY() const; virtual Double_t*GetEZ() const; virtual Color_tTAttFill",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:11617,Availability,error,errors,11617,"jInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TDirectory*TGraph2D::fDirectory!Pointer to directory holding this 2D graph; Double_t*fEX[fNpoints] array of X errors; Double_t*fEY[fNpoints] array of Y errors; Double_t*fEZ[fNpoints] array of Z errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph2D::fFunctionsPointer to list of functions (fits and user); TH2D*TGraph2D::fHistogram!2D histogram of z values linearly interpolated on the triangles; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Double_tTGraph2D::fMarginExtra space (in %) around interpolated area for fHistogram; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph2D::fMaxIterMaximum number of iterations to find Delaunay triangles; Double_tTGraph2D::fMaximumMaximum value for plotting along z; Double_tTGraph2D::fMinimumMinimum value for plotting along z; TStringTNamed::fNameobject identifier; Int_tTGraph2D::fNpointsNumber of points in the data set; Int_tTGraph2D::fNpxNumber of bins along X in fHistogram; Int_tTGraph2D::fNpyNumber of bins along Y in fHistogram; TVirtualHistPainter*TGraph2D::fPainter!Pointer to histogram painter; Int_tTGraph2D::fSize!Real size of fX, fY and fZ; TStringTNamed::fTitleobject title; Double_t*TGraph2D::fX[fNpoints]; Double_t*TGraph2D::fY[fNpoints] Data set to be plotted; Double_t*TGraph2D::fZ[fNpoints]; Double_tTGraph2D::fZoutfHistogram bin height for points lying outside the interpolated area. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2DErrors(); TGraph2DErrors default constructor. TGraph2DErrors(Int_t n); TGraph2DErrors normal constructor; the arr",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:11659,Availability,error,errors,11659,"jInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TDirectory*TGraph2D::fDirectory!Pointer to directory holding this 2D graph; Double_t*fEX[fNpoints] array of X errors; Double_t*fEY[fNpoints] array of Y errors; Double_t*fEZ[fNpoints] array of Z errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph2D::fFunctionsPointer to list of functions (fits and user); TH2D*TGraph2D::fHistogram!2D histogram of z values linearly interpolated on the triangles; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Double_tTGraph2D::fMarginExtra space (in %) around interpolated area for fHistogram; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph2D::fMaxIterMaximum number of iterations to find Delaunay triangles; Double_tTGraph2D::fMaximumMaximum value for plotting along z; Double_tTGraph2D::fMinimumMinimum value for plotting along z; TStringTNamed::fNameobject identifier; Int_tTGraph2D::fNpointsNumber of points in the data set; Int_tTGraph2D::fNpxNumber of bins along X in fHistogram; Int_tTGraph2D::fNpyNumber of bins along Y in fHistogram; TVirtualHistPainter*TGraph2D::fPainter!Pointer to histogram painter; Int_tTGraph2D::fSize!Real size of fX, fY and fZ; TStringTNamed::fTitleobject title; Double_t*TGraph2D::fX[fNpoints]; Double_t*TGraph2D::fY[fNpoints] Data set to be plotted; Double_t*TGraph2D::fZ[fNpoints]; Double_tTGraph2D::fZoutfHistogram bin height for points lying outside the interpolated area. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2DErrors(); TGraph2DErrors default constructor. TGraph2DErrors(Int_t n); TGraph2DErrors normal constructor; the arr",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:11701,Availability,error,errors,11701,"jInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TDirectory*TGraph2D::fDirectory!Pointer to directory holding this 2D graph; Double_t*fEX[fNpoints] array of X errors; Double_t*fEY[fNpoints] array of Y errors; Double_t*fEZ[fNpoints] array of Z errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph2D::fFunctionsPointer to list of functions (fits and user); TH2D*TGraph2D::fHistogram!2D histogram of z values linearly interpolated on the triangles; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Double_tTGraph2D::fMarginExtra space (in %) around interpolated area for fHistogram; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph2D::fMaxIterMaximum number of iterations to find Delaunay triangles; Double_tTGraph2D::fMaximumMaximum value for plotting along z; Double_tTGraph2D::fMinimumMinimum value for plotting along z; TStringTNamed::fNameobject identifier; Int_tTGraph2D::fNpointsNumber of points in the data set; Int_tTGraph2D::fNpxNumber of bins along X in fHistogram; Int_tTGraph2D::fNpyNumber of bins along Y in fHistogram; TVirtualHistPainter*TGraph2D::fPainter!Pointer to histogram painter; Int_tTGraph2D::fSize!Real size of fX, fY and fZ; TStringTNamed::fTitleobject title; Double_t*TGraph2D::fX[fNpoints]; Double_t*TGraph2D::fY[fNpoints] Data set to be plotted; Double_t*TGraph2D::fZ[fNpoints]; Double_tTGraph2D::fZoutfHistogram bin height for points lying outside the interpolated area. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2DErrors(); TGraph2DErrors default constructor. TGraph2DErrors(Int_t n); TGraph2DErrors normal constructor; the arr",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:13880,Availability,error,error,13880,"::fX[fNpoints]; Double_t*TGraph2D::fY[fNpoints] Data set to be plotted; Double_t*TGraph2D::fZ[fNpoints]; Double_tTGraph2D::fZoutfHistogram bin height for points lying outside the interpolated area. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2DErrors(); TGraph2DErrors default constructor. TGraph2DErrors(Int_t n); TGraph2DErrors normal constructor; the arrays are preset to zero. TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. TGraph2DErrors(const TGraph2DErrors& ); Copy constructor.; Copy everything except list of functions. TGraph2DErrors & operator=(const TGraph2DErrors& ); Assignment operator; Copy everything except list of functions. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point numb",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:14007,Availability,error,error,14007,"tfHistogram bin height for points lying outside the interpolated area. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2DErrors(); TGraph2DErrors default constructor. TGraph2DErrors(Int_t n); TGraph2DErrors normal constructor; the arrays are preset to zero. TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. TGraph2DErrors(const TGraph2DErrors& ); Copy constructor.; Copy everything except list of functions. TGraph2DErrors & operator=(const TGraph2DErrors& ); Assignment operator; Copy everything except list of functions. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. Double_t * GetEX() const; {return fEX;}. Double_t * Get",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:14134,Availability,error,error,14134,"Libraries. Function documentation; TGraph2DErrors(); TGraph2DErrors default constructor. TGraph2DErrors(Int_t n); TGraph2DErrors normal constructor; the arrays are preset to zero. TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. TGraph2DErrors(const TGraph2DErrors& ); Copy constructor.; Copy everything except list of functions. TGraph2DErrors & operator=(const TGraph2DErrors& ); Assignment operator; Copy everything except list of functions. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-200",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:14214,Availability,error,errors,14214," TGraph2DErrors default constructor. TGraph2DErrors(Int_t n); TGraph2DErrors normal constructor; the arrays are preset to zero. TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. TGraph2DErrors(const TGraph2DErrors& ); Copy constructor.; Copy everything except list of functions. TGraph2DErrors & operator=(const TGraph2DErrors& ); Assignment operator; Copy everything except list of functions. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed:",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:14276,Availability,error,errors,14276,"TGraph2DErrors normal constructor; the arrays are preset to zero. TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. TGraph2DErrors(const TGraph2DErrors& ); Copy constructor.; Copy everything except list of functions. TGraph2DErrors & operator=(const TGraph2DErrors& ); Assignment operator; Copy everything except list of functions. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraph2DErrors.h,v 1.00 » Last generated: 2015",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:14338,Availability,error,errors,14338,"ro. TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. TGraph2DErrors(const TGraph2DErrors& ); Copy constructor.; Copy everything except list of functions. TGraph2DErrors & operator=(const TGraph2DErrors& ); Assignment operator; Copy everything except list of functions. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraph2DErrors.h,v 1.00 » Last generated: 2015-06-02 16:05; This page has been automatically generated. For ",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:14400,Availability,error,errors,14400,"* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. TGraph2DErrors(const TGraph2DErrors& ); Copy constructor.; Copy everything except list of functions. TGraph2DErrors & operator=(const TGraph2DErrors& ); Assignment operator; Copy everything except list of functions. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraph2DErrors.h,v 1.00 » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:14462,Availability,error,errors,14462,"le_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. TGraph2DErrors(const TGraph2DErrors& ); Copy constructor.; Copy everything except list of functions. TGraph2DErrors & operator=(const TGraph2DErrors& ); Assignment operator; Copy everything except list of functions. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraph2DErrors.h,v 1.00 » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:14524,Availability,error,errors,14524,"le_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. TGraph2DErrors(const TGraph2DErrors& ); Copy constructor.; Copy everything except list of functions. TGraph2DErrors & operator=(const TGraph2DErrors& ); Assignment operator; Copy everything except list of functions. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraph2DErrors.h,v 1.00 » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:5510,Modifiability,Inherit,InheritsFrom,5510," px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph2D::GetX() const; TAxis*TGraph2D::GetXaxis() const; Double_tTGraph2D::GetXmax() const; virtual Double_tGetXmaxE() const; Double_tTGraph2D::GetXmin() const; virtual Double_tGetXminE() const; Double_t*TGraph2D::GetY() const; TAxis*TGraph2D::GetYaxis() const; Double_tTGraph2D::GetYmax() const; virtual Double_tGetYmaxE() const; Double_tTGraph2D::GetYmin() const; virtual Double_tGetYminE() const; Double_t*TGraph2D::GetZ() const; TAxis*TGraph2D::GetZaxis() const; Double_tTGraph2D::GetZmax() const; virtual Double_tGetZmaxE() const; Double_tTGraph2D::GetZmin() const; virtual Double_tGetZminE() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; Double_tTGraph2D::Interpolate(Double_t x, Double_t y); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:5576,Modifiability,Inherit,InheritsFrom,5576,"al Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph2D::GetX() const; TAxis*TGraph2D::GetXaxis() const; Double_tTGraph2D::GetXmax() const; virtual Double_tGetXmaxE() const; Double_tTGraph2D::GetXmin() const; virtual Double_tGetXminE() const; Double_t*TGraph2D::GetY() const; TAxis*TGraph2D::GetYaxis() const; Double_tTGraph2D::GetYmax() const; virtual Double_tGetYmaxE() const; Double_tTGraph2D::GetYmin() const; virtual Double_tGetYminE() const; Double_t*TGraph2D::GetZ() const; TAxis*TGraph2D::GetZaxis() const; Double_tTGraph2D::GetZmax() const; virtual Double_tGetZmaxE() const; Double_tTGraph2D::GetZmin() const; virtual Double_tGetZminE() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; Double_tTGraph2D::Interpolate(Double_t x, Double_t y); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObjec",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:13096,Modifiability,Inherit,Inheritance,13096,"around interpolated area for fHistogram; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph2D::fMaxIterMaximum number of iterations to find Delaunay triangles; Double_tTGraph2D::fMaximumMaximum value for plotting along z; Double_tTGraph2D::fMinimumMinimum value for plotting along z; TStringTNamed::fNameobject identifier; Int_tTGraph2D::fNpointsNumber of points in the data set; Int_tTGraph2D::fNpxNumber of bins along X in fHistogram; Int_tTGraph2D::fNpyNumber of bins along Y in fHistogram; TVirtualHistPainter*TGraph2D::fPainter!Pointer to histogram painter; Int_tTGraph2D::fSize!Real size of fX, fY and fZ; TStringTNamed::fTitleobject title; Double_t*TGraph2D::fX[fNpoints]; Double_t*TGraph2D::fY[fNpoints] Data set to be plotted; Double_t*TGraph2D::fZ[fNpoints]; Double_tTGraph2D::fZoutfHistogram bin height for points lying outside the interpolated area. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2DErrors(); TGraph2DErrors default constructor. TGraph2DErrors(Int_t n); TGraph2DErrors normal constructor; the arrays are preset to zero. TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. TGraph2DErrors(const TGraph2DErrors& ); Copy constructor.; Copy everything except list of functions. TGraph2DErrors & operator=(const TGraph2DErrors& ); Assignment operator; Copy everything except list of functions. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It ",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:13109,Modifiability,Inherit,Inherited,13109,"around interpolated area for fHistogram; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph2D::fMaxIterMaximum number of iterations to find Delaunay triangles; Double_tTGraph2D::fMaximumMaximum value for plotting along z; Double_tTGraph2D::fMinimumMinimum value for plotting along z; TStringTNamed::fNameobject identifier; Int_tTGraph2D::fNpointsNumber of points in the data set; Int_tTGraph2D::fNpxNumber of bins along X in fHistogram; Int_tTGraph2D::fNpyNumber of bins along Y in fHistogram; TVirtualHistPainter*TGraph2D::fPainter!Pointer to histogram painter; Int_tTGraph2D::fSize!Real size of fX, fY and fZ; TStringTNamed::fTitleobject title; Double_t*TGraph2D::fX[fNpoints]; Double_t*TGraph2D::fY[fNpoints] Data set to be plotted; Double_t*TGraph2D::fZ[fNpoints]; Double_tTGraph2D::fZoutfHistogram bin height for points lying outside the interpolated area. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2DErrors(); TGraph2DErrors default constructor. TGraph2DErrors(Int_t n); TGraph2DErrors normal constructor; the arrays are preset to zero. TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. TGraph2DErrors(const TGraph2DErrors& ); Copy constructor.; Copy everything except list of functions. TGraph2DErrors & operator=(const TGraph2DErrors& ); Assignment operator; Copy everything except list of functions. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It ",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:5400,Security,Hash,Hash,5400,"e() const; Int_tTGraph2D::GetNpx() const; Int_tTGraph2D::GetNpy() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph2D::GetX() const; TAxis*TGraph2D::GetXaxis() const; Double_tTGraph2D::GetXmax() const; virtual Double_tGetXmaxE() const; Double_tTGraph2D::GetXmin() const; virtual Double_tGetXminE() const; Double_t*TGraph2D::GetY() const; TAxis*TGraph2D::GetYaxis() const; Double_tTGraph2D::GetYmax() const; virtual Double_tGetYmaxE() const; Double_tTGraph2D::GetYmin() const; virtual Double_tGetYminE() const; Double_t*TGraph2D::GetZ() const; TAxis*TGraph2D::GetZaxis() const; Double_tTGraph2D::GetZmax() const; virtual Double_tGetZmaxE() const; Double_tTGraph2D::GetZmin() const; virtual Double_tGetZminE() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; Double_tTGraph2D::Interpolate(Double_t x, Double_t y); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::op",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:9988,Testability,Test,TestBit,9988,".10000000000000001)MENU ; voidTGraph2D::SetMarginBinsContent(Double_t z = 0.)MENU ; virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); voidTGraph2D::SetMaximum(Double_t maximum = -1111)MENU ; voidTGraph2D::SetMaxIter(Int_t n = 100000)MENU ; voidTGraph2D::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTGraph2D::SetName(const char* name)MENU ; virtual voidTGraph2D::SetNameTitle(const char* name, const char* title); voidTGraph2D::SetNpx(Int_t npx = 40)MENU ; voidTGraph2D::SetNpy(Int_t npx = 40)MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoint(Int_t i, Double_t x, Double_t y, Double_t z); virtual voidSetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); virtual voidTGraph2D::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraph2DErrors(); TGraph2DErrors(Int_t n); TGraph2DErrors(const TGraph2DErrors&); TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTGraph2D::Build(Int_t n); virtual voidTObject::DoError(int ",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:10027,Testability,Test,TestBits,10027,".10000000000000001)MENU ; voidTGraph2D::SetMarginBinsContent(Double_t z = 0.)MENU ; virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); voidTGraph2D::SetMaximum(Double_t maximum = -1111)MENU ; voidTGraph2D::SetMaxIter(Int_t n = 100000)MENU ; voidTGraph2D::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTGraph2D::SetName(const char* name)MENU ; virtual voidTGraph2D::SetNameTitle(const char* name, const char* title); voidTGraph2D::SetNpx(Int_t npx = 40)MENU ; voidTGraph2D::SetNpy(Int_t npx = 40)MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoint(Int_t i, Double_t x, Double_t y, Double_t z); virtual voidSetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); virtual voidTGraph2D::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraph2DErrors(); TGraph2DErrors(Int_t n); TGraph2DErrors(const TGraph2DErrors&); TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTGraph2D::Build(Int_t n); virtual voidTObject::DoError(int ",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DErrors.html:1798,Usability,Clear,Clear,1798," virtual~TGraph2DErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGraph2D::Browse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGraph2D::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtua",MatchSource.WIKI,root/html604/TGraph2DErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html
https://root.cern/root/html604/TGraph2DPainter.html:1201,Availability,Error,Error,1201," virtual~TGraph2DPainter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetContourList(Double_t contour); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetO",MatchSource.WIKI,root/html604/TGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DPainter.html
https://root.cern/root/html604/TGraph2DPainter.html:1330,Availability,error,error,1330," virtual~TGraph2DPainter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetContourList(Double_t contour); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetO",MatchSource.WIKI,root/html604/TGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DPainter.html
https://root.cern/root/html604/TGraph2DPainter.html:1414,Availability,error,error,1414," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetContourList(Double_t contour); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(cons",MatchSource.WIKI,root/html604/TGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DPainter.html
https://root.cern/root/html604/TGraph2DPainter.html:8655,Availability,error,error,8655,"r. This function; finds them and returns them in a graphs' list. void Paint(Option_t* option); Paint a TGraphDelaunay according to the value of ""option"":. ""TRI"" : The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color.; ""TRIW"" : The Delaunay triangles are drawn as wire frame; ""TRI1"" : The Delaunay triangles are painted with color levels. The edges; of each triangles are painted with the current line color.; ""TRI2"" : the Delaunay triangles are painted with color levels.; ""P"" : Draw a marker at each vertex; ""P0"" : Draw a circle at each vertex. Each circle background is white.; ""PCOL"" : Draw a marker at each vertex. The color of each marker is; defined according to its Z position.; ""CONT"" : Draw contours; ""LINE"" : Draw a 3D polyline. void PaintContour(Option_t* option); Paints the 2D graph as a contour plot. Delaunay triangles are used; to compute the contours. void PaintErrors(Option_t* option); Paints the 2D graph as error bars. void PaintLevels(Int_t* T, Double_t* x, Double_t* y, Int_t nblev = 0, Double_t* glev = 0); Paints one triangle.; nblev = 0 : paint the color levels; nblev != 0 : paint the grid. void PaintPolyMarker(Option_t* option); Paints the 2D graph as PaintPolyMarker. void PaintPolyLine(Option_t* option); Paints the 2D graph as PaintPolyLine. void PaintPolyMarker0(Int_t n, Double_t* x, Double_t* y); Paints a circle at each vertex. Each circle background is white. void PaintTriangles(Option_t* option); Paints the 2D graph as triangles. TGraph2DPainter(). » Author: Olivier Couet » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TGraph2DPainter.h,v 1.00 » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DPainter.html
https://root.cern/root/html604/TGraph2DPainter.html:2334,Modifiability,Inherit,InheritsFrom,2334,"; virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetContourList(Double_t contour); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DPainter.html
https://root.cern/root/html604/TGraph2DPainter.html:2400,Modifiability,Inherit,InheritsFrom,2400," Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetContourList(Double_t contour); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGraph2DPainter&operator=(const TGraph2DPainter&); ",MatchSource.WIKI,root/html604/TGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DPainter.html
https://root.cern/root/html604/TGraph2DPainter.html:7010,Modifiability,Inherit,Inheritance,7010,"ombie. protected:. TGraphDelaunay*fDelaunayPointer to the TGraphDelaunay to be painted; Double_t*fEX!Pointer to fGraph2D->fXE; Double_t*fEY!Pointer to fGraph2D->fYE; Double_t*fEZ!Pointer to fGraph2D->fZE; TGraph2D*fGraph2DPointer to the TGraph2D in fDelaunay; Int_t*fMTried!Pointer to fDelaunay->fMTried; Int_t*fNTried!Pointer to fDelaunay->fNTried; Int_tfNdt!Equal to fDelaunay->fNdt; Int_tfNpoints!Equal to fGraph2D->fNpoints; Int_t*fPTried!Pointer to fDelaunay->fPTried; Double_t*fX!Pointer to fGraph2D->fX; Double_t*fXN!Pointer to fDelaunay->fXN; Double_tfXNmax!Equal to fDelaunay->fXNmax; Double_tfXNmin!Equal to fDelaunay->fXNmin; Double_tfXmax!; Double_tfXmin!; Double_t*fY!Pointer to fGraph2D->fY; Double_t*fYN!Pointer to fDelaunay->fYN; Double_tfYNmax!Equal to fDelaunay->fYNmax; Double_tfYNmin!Equal to fDelaunay->fYNmin; Double_tfYmax!; Double_tfYmin! fGraph2D->fHistogram limits; Double_t*fZ!Pointer to fGraph2D->fZ; Double_tfZmax!; Double_tfZmin!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2DPainter(); TGraph2DPainter default constructor. TGraph2DPainter(TGraphDelaunay* gd); TGraph2DPainter constructor. ~TGraph2DPainter(); TGraph2DPainter destructor. void FindTriangles(); Find triangles in fDelaunay and initialise the TGraph2DPainter values; needed to paint triangles or find contours. TList * GetContourList(Double_t contour); Returns the X and Y graphs building a contour. A contour level may; consist in several parts not connected to each other. This function; finds them and returns them in a graphs' list. void Paint(Option_t* option); Paint a TGraphDelaunay according to the value of ""option"":. ""TRI"" : The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color.; ""TRIW"" : The Delaunay triangles are drawn as wire frame; ""TRI1"" : The Delaunay triangles ar",MatchSource.WIKI,root/html604/TGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DPainter.html
https://root.cern/root/html604/TGraph2DPainter.html:7023,Modifiability,Inherit,Inherited,7023,"ombie. protected:. TGraphDelaunay*fDelaunayPointer to the TGraphDelaunay to be painted; Double_t*fEX!Pointer to fGraph2D->fXE; Double_t*fEY!Pointer to fGraph2D->fYE; Double_t*fEZ!Pointer to fGraph2D->fZE; TGraph2D*fGraph2DPointer to the TGraph2D in fDelaunay; Int_t*fMTried!Pointer to fDelaunay->fMTried; Int_t*fNTried!Pointer to fDelaunay->fNTried; Int_tfNdt!Equal to fDelaunay->fNdt; Int_tfNpoints!Equal to fGraph2D->fNpoints; Int_t*fPTried!Pointer to fDelaunay->fPTried; Double_t*fX!Pointer to fGraph2D->fX; Double_t*fXN!Pointer to fDelaunay->fXN; Double_tfXNmax!Equal to fDelaunay->fXNmax; Double_tfXNmin!Equal to fDelaunay->fXNmin; Double_tfXmax!; Double_tfXmin!; Double_t*fY!Pointer to fGraph2D->fY; Double_t*fYN!Pointer to fDelaunay->fYN; Double_tfYNmax!Equal to fDelaunay->fYNmax; Double_tfYNmin!Equal to fDelaunay->fYNmin; Double_tfYmax!; Double_tfYmin! fGraph2D->fHistogram limits; Double_t*fZ!Pointer to fGraph2D->fZ; Double_tfZmax!; Double_tfZmin!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2DPainter(); TGraph2DPainter default constructor. TGraph2DPainter(TGraphDelaunay* gd); TGraph2DPainter constructor. ~TGraph2DPainter(); TGraph2DPainter destructor. void FindTriangles(); Find triangles in fDelaunay and initialise the TGraph2DPainter values; needed to paint triangles or find contours. TList * GetContourList(Double_t contour); Returns the X and Y graphs building a contour. A contour level may; consist in several parts not connected to each other. This function; finds them and returns them in a graphs' list. void Paint(Option_t* option); Paint a TGraphDelaunay according to the value of ""option"":. ""TRI"" : The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color.; ""TRIW"" : The Delaunay triangles are drawn as wire frame; ""TRI1"" : The Delaunay triangles ar",MatchSource.WIKI,root/html604/TGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DPainter.html
https://root.cern/root/html604/TGraph2DPainter.html:2224,Security,Hash,Hash,2224," const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetContourList(Double_t contour); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DPainter.html
https://root.cern/root/html604/TGraph2DPainter.html:4523,Testability,Test,TestBit,4523,"const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGraph2DPainter&operator=(const TGraph2DPainter&); virtual voidPaint(Option_t* option); voidPaintContour(Option_t* option); voidPaintErrors(Option_t* option); voidPaintPolyLine(Option_t* option); voidPaintPolyMarker(Option_t* option); voidPaintTriangles(Option_t* option); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraph2DPainter(); TGraph2DPainter(TGraphDelaunay* gd); TGraph2DPainter(const TGraph2DPainter&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DPainter.html
https://root.cern/root/html604/TGraph2DPainter.html:4562,Testability,Test,TestBits,4562,"const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGraph2DPainter&operator=(const TGraph2DPainter&); virtual voidPaint(Option_t* option); voidPaintContour(Option_t* option); voidPaintErrors(Option_t* option); voidPaintPolyLine(Option_t* option); voidPaintPolyMarker(Option_t* option); voidPaintTriangles(Option_t* option); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraph2DPainter(); TGraph2DPainter(TGraphDelaunay* gd); TGraph2DPainter(const TGraph2DPainter&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DPainter.html
https://root.cern/root/html604/TGraph2DPainter.html:661,Usability,Clear,Clear,661," virtual~TGraph2DPainter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetContourList(Double_t contour); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetO",MatchSource.WIKI,root/html604/TGraph2DPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraph2DPainter.html
https://root.cern/root/html604/TGraphAsymmErrors.html:384,Availability,error,error,384,". TGraphAsymmErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphAsymmErrors. class TGraphAsymmErrors: public TGraph. TGraphAsymmErrors class; A TGraphAsymmErrors is a TGraph with assymetric error bars. The TGraphAsymmErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with assymetric error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. virtual~TGraphAsymmErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidBayesDivide(const TH1* pass, const TH1* total, Option_t* opt = """"); virtual voidTGraph::Browse(TBrowser* b); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bo",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:661,Availability,error,error,661,". TGraphAsymmErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphAsymmErrors. class TGraphAsymmErrors: public TGraph. TGraphAsymmErrors class; A TGraphAsymmErrors is a TGraph with assymetric error bars. The TGraphAsymmErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with assymetric error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. virtual~TGraphAsymmErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidBayesDivide(const TH1* pass, const TH1* total, Option_t* opt = """"); virtual voidTGraph::Browse(TBrowser* b); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bo",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:3307,Availability,Error,Error,3307,"puteRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDivide(const TH1* pass, const TH1* total, Option_t* opt = ""cp""); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidT",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:3528,Availability,error,error,3528," px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDivide(const TH1* pass, const TH1* total, Option_t* opt = ""cp""); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidTGraph::FitPanel()MENU ; virtual Double_tTGraph::GetCorrelationFactor() const; virtual Double_tTGraph::GetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGra",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:3612,Availability,error,error,3612,"tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDivide(const TH1* pass, const TH1* total, Option_t* opt = ""cp""); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidTGraph::FitPanel()MENU ; virtual Double_tTGraph::GetCorrelationFactor() const; virtual Double_tTGraph::GetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGraph::GetEditable() const; virtual Double_tGetErrorX(Int_t bin) const; virtual Double_",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:15228,Availability,error,errors,15228,"enced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fEXhigh[fNpoints] array of X high errors; Double_t*fEXlow[fNpoints] array of X low errors; Double_t*fEYhigh[fNpoints] array of Y high errors; Double_t*fEYlow[fNpoints] array of Y low errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphAsymmErrors(); TGraphAsymmErrors default constructor. TGraphAsymmErrors(const TGraphAsymmErrors& gr); TGraphAsymmErrors copy constructor. TGraphAsymmErrors& operator=(const TGraphAsymmErrors& gr); TGraphAsymmErrors assignment operator. TGraphAsymmErrors(Int_t n); TGraphAsymmErrors normal constructor. the arrays are preset to zero. TGraphAsymmErrors(Int_t n, ",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:15277,Availability,error,errors,15277,"enced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fEXhigh[fNpoints] array of X high errors; Double_t*fEXlow[fNpoints] array of X low errors; Double_t*fEYhigh[fNpoints] array of Y high errors; Double_t*fEYlow[fNpoints] array of Y low errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphAsymmErrors(); TGraphAsymmErrors default constructor. TGraphAsymmErrors(const TGraphAsymmErrors& gr); TGraphAsymmErrors copy constructor. TGraphAsymmErrors& operator=(const TGraphAsymmErrors& gr); TGraphAsymmErrors assignment operator. TGraphAsymmErrors(Int_t n); TGraphAsymmErrors normal constructor. the arrays are preset to zero. TGraphAsymmErrors(Int_t n, ",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:15328,Availability,error,errors,15328,"enced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fEXhigh[fNpoints] array of X high errors; Double_t*fEXlow[fNpoints] array of X low errors; Double_t*fEYhigh[fNpoints] array of Y high errors; Double_t*fEYlow[fNpoints] array of Y low errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphAsymmErrors(); TGraphAsymmErrors default constructor. TGraphAsymmErrors(const TGraphAsymmErrors& gr); TGraphAsymmErrors copy constructor. TGraphAsymmErrors& operator=(const TGraphAsymmErrors& gr); TGraphAsymmErrors assignment operator. TGraphAsymmErrors(Int_t n); TGraphAsymmErrors normal constructor. the arrays are preset to zero. TGraphAsymmErrors(Int_t n, ",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:15377,Availability,error,errors,15377,"enced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fEXhigh[fNpoints] array of X high errors; Double_t*fEXlow[fNpoints] array of X low errors; Double_t*fEYhigh[fNpoints] array of Y high errors; Double_t*fEYlow[fNpoints] array of Y low errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphAsymmErrors(); TGraphAsymmErrors default constructor. TGraphAsymmErrors(const TGraphAsymmErrors& gr); TGraphAsymmErrors copy constructor. TGraphAsymmErrors& operator=(const TGraphAsymmErrors& gr); TGraphAsymmErrors assignment operator. TGraphAsymmErrors(Int_t n); TGraphAsymmErrors normal constructor. the arrays are preset to zero. TGraphAsymmErrors(Int_t n, ",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:17532,Availability,error,errors,17532,"onstructor. TGraphAsymmErrors(const TGraphAsymmErrors& gr); TGraphAsymmErrors copy constructor. TGraphAsymmErrors& operator=(const TGraphAsymmErrors& gr); TGraphAsymmErrors assignment operator. TGraphAsymmErrors(Int_t n); TGraphAsymmErrors normal constructor. the arrays are preset to zero. TGraphAsymmErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0); TGraphAsymmErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphAsymmErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0); TGraphAsymmErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphAsymmErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vexl, const TVectorF& vexh, const TVectorF& veyl, const TVectorF& veyh); Constructor with six vectors of floats in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vexl/h and veyl/h.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphAsymmErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vexl, const TVectorD& vexh, const TVectorD& veyl, const TVectorD& veyh); Constructor with six vectors of doubles in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vexl/h and veyl/h.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphAsymmErrors(const TH1* h); TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument; the low and high errors are set to the bin error of the histogram. TGraphAsymmErrors(const TH1* pass, const TH1* total, Option_t* option = """"); Creates a TGraphAsymmErrors by dividing two input TH1 histograms:; pas",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:17942,Availability,error,errors,17942,"loat_t* eyl = 0, const Float_t* eyh = 0); TGraphAsymmErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphAsymmErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0); TGraphAsymmErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphAsymmErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vexl, const TVectorF& vexh, const TVectorF& veyl, const TVectorF& veyh); Constructor with six vectors of floats in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vexl/h and veyl/h.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphAsymmErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vexl, const TVectorD& vexh, const TVectorD& veyl, const TVectorD& veyh); Constructor with six vectors of doubles in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vexl/h and veyl/h.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphAsymmErrors(const TH1* h); TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument; the low and high errors are set to the bin error of the histogram. TGraphAsymmErrors(const TH1* pass, const TH1* total, Option_t* option = """"); Creates a TGraphAsymmErrors by dividing two input TH1 histograms:; pass/total. (see TGraphAsymmErrors::Divide). ~TGraphAsymmErrors(); TGraphAsymmErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbi",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:18211,Availability,error,errors,18211,"onstructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphAsymmErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vexl, const TVectorF& vexh, const TVectorF& veyl, const TVectorF& veyh); Constructor with six vectors of floats in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vexl/h and veyl/h.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphAsymmErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vexl, const TVectorD& vexh, const TVectorD& veyl, const TVectorD& veyh); Constructor with six vectors of doubles in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vexl/h and veyl/h.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphAsymmErrors(const TH1* h); TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument; the low and high errors are set to the bin error of the histogram. TGraphAsymmErrors(const TH1* pass, const TH1* total, Option_t* option = """"); Creates a TGraphAsymmErrors by dividing two input TH1 histograms:; pass/total. (see TGraphAsymmErrors::Divide). ~TGraphAsymmErrors(); TGraphAsymmErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void BayesDivide(const TH1* pass, const TH1* total, Option_t* opt = """"); This function is only kept for backward compatibility.; You should rather use the Divide method.; It calls Divide(pass,total,""cl=0.683 b(1,1) mode"") which is equivalent to the; former BayesDivide method. void Divide(const TH1* pass, const TH1* total, Opt",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:18237,Availability,error,error,18237,"onstructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphAsymmErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vexl, const TVectorF& vexh, const TVectorF& veyl, const TVectorF& veyh); Constructor with six vectors of floats in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vexl/h and veyl/h.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphAsymmErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vexl, const TVectorD& vexh, const TVectorD& veyl, const TVectorD& veyh); Constructor with six vectors of doubles in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vexl/h and veyl/h.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphAsymmErrors(const TH1* h); TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument; the low and high errors are set to the bin error of the histogram. TGraphAsymmErrors(const TH1* pass, const TH1* total, Option_t* option = """"); Creates a TGraphAsymmErrors by dividing two input TH1 histograms:; pass/total. (see TGraphAsymmErrors::Divide). ~TGraphAsymmErrors(); TGraphAsymmErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void BayesDivide(const TH1* pass, const TH1* total, Option_t* opt = """"); This function is only kept for backward compatibility.; You should rather use the Divide method.; It calls Divide(pass,total,""cl=0.683 b(1,1) mode"") which is equivalent to the; former BayesDivide method. void Divide(const TH1* pass, const TH1* total, Opt",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:18579,Availability,Error,Errors,18579,"mum of number of points; in vx and vy. TGraphAsymmErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vexl, const TVectorD& vexh, const TVectorD& veyl, const TVectorD& veyh); Constructor with six vectors of doubles in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vexl/h and veyl/h.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphAsymmErrors(const TH1* h); TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument; the low and high errors are set to the bin error of the histogram. TGraphAsymmErrors(const TH1* pass, const TH1* total, Option_t* option = """"); Creates a TGraphAsymmErrors by dividing two input TH1 histograms:; pass/total. (see TGraphAsymmErrors::Divide). ~TGraphAsymmErrors(); TGraphAsymmErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void BayesDivide(const TH1* pass, const TH1* total, Option_t* opt = """"); This function is only kept for backward compatibility.; You should rather use the Divide method.; It calls Divide(pass,total,""cl=0.683 b(1,1) mode"") which is equivalent to the; former BayesDivide method. void Divide(const TH1* pass, const TH1* total, Option_t* opt = ""cp""); Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. This method serves two purposes:. 1) calculating efficiencies:. The assumption is that the entries in ""pass"" are a subset of those in; ""total"". That is, we create an ""efficiency"" graph, where each entry is; between 0 and 1, inclusive. If the histograms are not filled with unit weights, the number of effective; entries is used to normalise the bin conte",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:18741,Availability,down,down,18741,"& vy, const TVectorD& vexl, const TVectorD& vexh, const TVectorD& veyl, const TVectorD& veyh); Constructor with six vectors of doubles in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vexl/h and veyl/h.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphAsymmErrors(const TH1* h); TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument; the low and high errors are set to the bin error of the histogram. TGraphAsymmErrors(const TH1* pass, const TH1* total, Option_t* option = """"); Creates a TGraphAsymmErrors by dividing two input TH1 histograms:; pass/total. (see TGraphAsymmErrors::Divide). ~TGraphAsymmErrors(); TGraphAsymmErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void BayesDivide(const TH1* pass, const TH1* total, Option_t* opt = """"); This function is only kept for backward compatibility.; You should rather use the Divide method.; It calls Divide(pass,total,""cl=0.683 b(1,1) mode"") which is equivalent to the; former BayesDivide method. void Divide(const TH1* pass, const TH1* total, Option_t* opt = ""cp""); Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. This method serves two purposes:. 1) calculating efficiencies:. The assumption is that the entries in ""pass"" are a subset of those in; ""total"". That is, we create an ""efficiency"" graph, where each entry is; between 0 and 1, inclusive. If the histograms are not filled with unit weights, the number of effective; entries is used to normalise the bin contents which might lead to wrong results.; . The points are assigned a x value at the center ",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:20300,Availability,error,errors,20300,"ciencies:. The assumption is that the entries in ""pass"" are a subset of those in; ""total"". That is, we create an ""efficiency"" graph, where each entry is; between 0 and 1, inclusive. If the histograms are not filled with unit weights, the number of effective; entries is used to normalise the bin contents which might lead to wrong results.; . The points are assigned a x value at the center of each histogram bin.; The y values are for all options except for the; bayesian methods where the result depends on the chosen option. If the denominator becomes 0 or pass > total, the corresponding bin is; skipped. 2) calculating ratios of two Poisson means (option 'pois'):. The two histograms are interpreted as independent Poisson processes and the ratio; ; The histogram 'pass' is interpreted as n_{1} and the total histogram; is used for n_{2}. The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; of efficiency by a parameter transformation:; . The x errors span each histogram bin (lowedge ... lowedge+width); The y errors depend on the chosen statistic methode which can be determined; by the options given below. For a detailed description of the used statistic; calculations please have a look at the corresponding functions!. Options:; - v : verbose mode: prints information about the number of used bins; and calculated efficiencies with their errors; - cl=x : determine the used confidence level (0<x<1) (default is 0.683); - cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); - w : Wilson interval (see TEfficiency::Wilson); - n : normal approximation propagation (see TEfficiency::Normal); - ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); - fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); - b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0; (see TEfficiency::Bayesian); - mode : use mode of posterior for Bayesian interval (default is mean); - shortest: use shortest interval (done b",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:20366,Availability,error,errors,20366,"al"". That is, we create an ""efficiency"" graph, where each entry is; between 0 and 1, inclusive. If the histograms are not filled with unit weights, the number of effective; entries is used to normalise the bin contents which might lead to wrong results.; . The points are assigned a x value at the center of each histogram bin.; The y values are for all options except for the; bayesian methods where the result depends on the chosen option. If the denominator becomes 0 or pass > total, the corresponding bin is; skipped. 2) calculating ratios of two Poisson means (option 'pois'):. The two histograms are interpreted as independent Poisson processes and the ratio; ; The histogram 'pass' is interpreted as n_{1} and the total histogram; is used for n_{2}. The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; of efficiency by a parameter transformation:; . The x errors span each histogram bin (lowedge ... lowedge+width); The y errors depend on the chosen statistic methode which can be determined; by the options given below. For a detailed description of the used statistic; calculations please have a look at the corresponding functions!. Options:; - v : verbose mode: prints information about the number of used bins; and calculated efficiencies with their errors; - cl=x : determine the used confidence level (0<x<1) (default is 0.683); - cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); - w : Wilson interval (see TEfficiency::Wilson); - n : normal approximation propagation (see TEfficiency::Normal); - ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); - fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); - b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0; (see TEfficiency::Bayesian); - mode : use mode of posterior for Bayesian interval (default is mean); - shortest: use shortest interval (done by default if mode is set); - central: use central interval (done by default if mode is ",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:20699,Availability,error,errors,20699,"ssigned a x value at the center of each histogram bin.; The y values are for all options except for the; bayesian methods where the result depends on the chosen option. If the denominator becomes 0 or pass > total, the corresponding bin is; skipped. 2) calculating ratios of two Poisson means (option 'pois'):. The two histograms are interpreted as independent Poisson processes and the ratio; ; The histogram 'pass' is interpreted as n_{1} and the total histogram; is used for n_{2}. The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; of efficiency by a parameter transformation:; . The x errors span each histogram bin (lowedge ... lowedge+width); The y errors depend on the chosen statistic methode which can be determined; by the options given below. For a detailed description of the used statistic; calculations please have a look at the corresponding functions!. Options:; - v : verbose mode: prints information about the number of used bins; and calculated efficiencies with their errors; - cl=x : determine the used confidence level (0<x<1) (default is 0.683); - cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); - w : Wilson interval (see TEfficiency::Wilson); - n : normal approximation propagation (see TEfficiency::Normal); - ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); - fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); - b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0; (see TEfficiency::Bayesian); - mode : use mode of posterior for Bayesian interval (default is mean); - shortest: use shortest interval (done by default if mode is set); - central: use central interval (done by default if mode is NOT set); - pois: interpret histograms as poisson ratio instead of efficiency; - e0 : plot (in Bayesian case) efficiency and interval for bins where total=0; (default is to skip them). Note:; Unfortunately there is no straightforward approach for determining a confidence; ",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:22448,Availability,error,errors,22448,"stograms as poisson ratio instead of efficiency; - e0 : plot (in Bayesian case) efficiency and interval for bins where total=0; (default is to skip them). Note:; Unfortunately there is no straightforward approach for determining a confidence; interval for a given confidence level. The actual coverage probability of the; confidence interval oscillates significantly according to the total number of; events and the true efficiency. In order to decrease the impact of this; oscillation on the actual coverage probability a couple of approximations and; methodes has been developped. For a detailed discussion, please have a look at; this statistical paper:. http://www-stat.wharton.upenn.edu/~tcai/paper/Binomial-StatSci.pdf. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute Range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y.",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:22817,Availability,error,errors,22817,"e interval oscillates significantly according to the total number of; events and the true efficiency. In order to decrease the impact of this; oscillation on the actual coverage probability a couple of approximations and; methodes has been developped. For a detailed discussion, please have a look at; this statistical paper:. http://www-stat.wharton.upenn.edu/~tcai/paper/Binomial-StatSci.pdf. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute Range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. Int_t Merge(TCollection* list); Adds all graphs with asymmetric errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:23049,Availability,error,error,23049,"ve a look at; this statistical paper:. http://www-stat.wharton.upenn.edu/~tcai/paper/Binomial-StatSci.pdf. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute Range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. Int_t Merge(TCollection* list); Adds all graphs with asymmetric errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point num",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:23174,Availability,error,error,23174,"Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute Range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. Int_t Merge(TCollection* list); Adds all graphs with asymmetric errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhi",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:23248,Availability,error,error,23248,"ble_t& ymax) const; Compute Range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. Int_t Merge(TCollection* list); Adds all graphs with asymmetric errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhigh for point i. void SetPointEYlow(Int_t i, Double_",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:23306,Availability,error,error,23306,"le_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. Int_t Merge(TCollection* list); Adds all graphs with asymmetric errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhigh for point i. void SetPointEYlow(Int_t i, Double_t eyl); Set EYlow for point i. void SetPointEYhigh(Int_t i,",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:23366,Availability,error,error,23366,"Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. Int_t Merge(TCollection* list); Adds all graphs with asymmetric errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhigh for point i. void SetPointEYlow(Int_t i, Double_t eyl); Set EYlow for point i. void SetPointEYhigh(Int_t i, Double_t eyh); Set EYhigh for point i. void Streamer(TBuff",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:23424,Availability,error,error,23424,"t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. Int_t Merge(TCollection* list); Adds all graphs with asymmetric errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhigh for point i. void SetPointEYlow(Int_t i, Double_t eyl); Set EYlow for point i. void SetPointEYhigh(Int_t i, Double_t eyh); Set EYhigh for point i. void Streamer(TBuffer& ); Stream an object of class TGraphAsymmErrors. void Sw",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:23500,Availability,error,errors,23500,"f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. Int_t Merge(TCollection* list); Adds all graphs with asymmetric errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhigh for point i. void SetPointEYlow(Int_t i, Double_t eyl); Set EYlow for point i. void SetPointEYhigh(Int_t i, Double_t eyh); Set EYhigh for point i. void Streamer(TBuffer& ); Stream an object of class TGraphAsymmErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t** Allocate(Int_t size). Do",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:23611,Availability,error,error,23611," been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. Int_t Merge(TCollection* list); Adds all graphs with asymmetric errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhigh for point i. void SetPointEYlow(Int_t i, Double_t eyl); Set EYlow for point i. void SetPointEYhigh(Int_t i, Double_t eyh); Set EYhigh for point i. void Streamer(TBuffer& ); Stream an object of class TGraphAsymmErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t** Allocate(Int_t size). Double_t * GetEXlow() const; {return fEXlow;}. Double_t * GetEXhigh() const; {return fEXhigh;",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:23674,Availability,error,errors,23674,"; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. Int_t Merge(TCollection* list); Adds all graphs with asymmetric errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhigh for point i. void SetPointEYlow(Int_t i, Double_t eyl); Set EYlow for point i. void SetPointEYhigh(Int_t i, Double_t eyh); Set EYhigh for point i. void Streamer(TBuffer& ); Stream an object of class TGraphAsymmErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t** Allocate(Int_t size). Double_t * GetEXlow() const; {return fEXlow;}. Double_t * GetEXhigh() const; {return fEXhigh;}. Double_t * GetEYlow() const; {return fEYlow;}. Double_t * GetEYhigh() c",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:10095,Deployability,TOGGLE,TOGGLE,10095,"ill::ResetAttFill(Option_t* option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); virtual voidTAttMarker::ResetAttMarker(Option_t* toption = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTAttMarker::SaveMarkerAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t sizdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); virtual voidTGraph::Set(Int_t n); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGraph::SetEditable(Bool_t editable = kTRUE)TOGGLE GETTER ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTGraph::SetHistogram(TH1F* h); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTGraph::SetMaximum(Double_t maximum = -1111)MENU ; virtual voidTGraph::SetMinimum(Double_t minimum = -1111)MENU ; virtual voi",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:22356,Deployability,release,release,22356,"ne by default if mode is set); - central: use central interval (done by default if mode is NOT set); - pois: interpret histograms as poisson ratio instead of efficiency; - e0 : plot (in Bayesian case) efficiency and interval for bins where total=0; (default is to skip them). Note:; Unfortunately there is no straightforward approach for determining a confidence; interval for a given confidence level. The actual coverage probability of the; confidence interval oscillates significantly according to the total number of; events and the true efficiency. In order to decrease the impact of this; oscillation on the actual coverage probability a couple of approximations and; methodes has been developped. For a detailed discussion, please have a look at; this statistical paper:. http://www-stat.wharton.upenn.edu/~tcai/paper/Binomial-StatSci.pdf. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute Range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:13571,Energy Efficiency,Allocate,Allocate,13571," const Float_t* eyh = 0); TGraphAsymmErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**Allocate(Int_t size); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidCopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tCopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tCtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tDoMerge(const TGraph* g); Double_t**TGraph::ExpandAndCopy(Int_t size, Int_t iend); virtual voidFillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidTObject::MakeZombie(); Double_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidSwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGraph::(anonymous)TGraph::kClipFrame; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:13611,Energy Efficiency,Allocate,AllocateArrays,13611," const Float_t* eyh = 0); TGraphAsymmErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**Allocate(Int_t size); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidCopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tCopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tCtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tDoMerge(const TGraph* g); Double_t**TGraph::ExpandAndCopy(Int_t size, Int_t iend); virtual voidFillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidTObject::MakeZombie(); Double_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidSwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGraph::(anonymous)TGraph::kClipFrame; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:24464,Energy Efficiency,Allocate,Allocate,24464,"s function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. Int_t Merge(TCollection* list); Adds all graphs with asymmetric errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhigh for point i. void SetPointEYlow(Int_t i, Double_t eyl); Set EYlow for point i. void SetPointEYhigh(Int_t i, Double_t eyh); Set EYhigh for point i. void Streamer(TBuffer& ); Stream an object of class TGraphAsymmErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t** Allocate(Int_t size). Double_t * GetEXlow() const; {return fEXlow;}. Double_t * GetEXhigh() const; {return fEXhigh;}. Double_t * GetEYlow() const; {return fEYlow;}. Double_t * GetEYhigh() const; {return fEYhigh;}. » Author: Rene Brun 03/03/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:19815,Integrability,depend,depends,19815,"nted by Miroslav Helbich <helbich@mail.desy.de>. void BayesDivide(const TH1* pass, const TH1* total, Option_t* opt = """"); This function is only kept for backward compatibility.; You should rather use the Divide method.; It calls Divide(pass,total,""cl=0.683 b(1,1) mode"") which is equivalent to the; former BayesDivide method. void Divide(const TH1* pass, const TH1* total, Option_t* opt = ""cp""); Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. This method serves two purposes:. 1) calculating efficiencies:. The assumption is that the entries in ""pass"" are a subset of those in; ""total"". That is, we create an ""efficiency"" graph, where each entry is; between 0 and 1, inclusive. If the histograms are not filled with unit weights, the number of effective; entries is used to normalise the bin contents which might lead to wrong results.; . The points are assigned a x value at the center of each histogram bin.; The y values are for all options except for the; bayesian methods where the result depends on the chosen option. If the denominator becomes 0 or pass > total, the corresponding bin is; skipped. 2) calculating ratios of two Poisson means (option 'pois'):. The two histograms are interpreted as independent Poisson processes and the ratio; ; The histogram 'pass' is interpreted as n_{1} and the total histogram; is used for n_{2}. The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; of efficiency by a parameter transformation:; . The x errors span each histogram bin (lowedge ... lowedge+width); The y errors depend on the chosen statistic methode which can be determined; by the options given below. For a detailed description of the used statistic; calculations please have a look at the corresponding functions!. Options:; - v : verbose mode: prints information about the number of used bins; and calculated efficiencies with their errors; - cl=x : determine the used confidence level (0<x<1) (default is 0.683); - cp : ",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:20373,Integrability,depend,depend,20373,"al"". That is, we create an ""efficiency"" graph, where each entry is; between 0 and 1, inclusive. If the histograms are not filled with unit weights, the number of effective; entries is used to normalise the bin contents which might lead to wrong results.; . The points are assigned a x value at the center of each histogram bin.; The y values are for all options except for the; bayesian methods where the result depends on the chosen option. If the denominator becomes 0 or pass > total, the corresponding bin is; skipped. 2) calculating ratios of two Poisson means (option 'pois'):. The two histograms are interpreted as independent Poisson processes and the ratio; ; The histogram 'pass' is interpreted as n_{1} and the total histogram; is used for n_{2}. The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; of efficiency by a parameter transformation:; . The x errors span each histogram bin (lowedge ... lowedge+width); The y errors depend on the chosen statistic methode which can be determined; by the options given below. For a detailed description of the used statistic; calculations please have a look at the corresponding functions!. Options:; - v : verbose mode: prints information about the number of used bins; and calculated efficiencies with their errors; - cl=x : determine the used confidence level (0<x<1) (default is 0.683); - cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); - w : Wilson interval (see TEfficiency::Wilson); - n : normal approximation propagation (see TEfficiency::Normal); - ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); - fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); - b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0; (see TEfficiency::Bayesian); - mode : use mode of posterior for Bayesian interval (default is mean); - shortest: use shortest interval (done by default if mode is set); - central: use central interval (done by default if mode is ",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:6690,Modifiability,Inherit,InheritsFrom,6690,"ize_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; Double_tTGraph::GetMaximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTGraph::LeastSquareFit(Int_t m, Double_t* a, Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::Lea",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:6756,Modifiability,Inherit,InheritsFrom,6756,":GetMarkerStyle() const; Double_tTGraph::GetMaximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTGraph::LeastSquareFit(Int_t m, Double_t* a, Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::LeastSquareLinearFit(Int_t n, Double_t& a0, Double_t& a1, Int_t& ifai",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:16283,Modifiability,Inherit,Inheritance,16283,"ts] array of Y high errors; Double_t*fEYlow[fNpoints] array of Y low errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphAsymmErrors(); TGraphAsymmErrors default constructor. TGraphAsymmErrors(const TGraphAsymmErrors& gr); TGraphAsymmErrors copy constructor. TGraphAsymmErrors& operator=(const TGraphAsymmErrors& gr); TGraphAsymmErrors assignment operator. TGraphAsymmErrors(Int_t n); TGraphAsymmErrors normal constructor. the arrays are preset to zero. TGraphAsymmErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0); TGraphAsymmErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphAsymmErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0); TGraphAsymmErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphAsymmErrors(const TVectorF& vx, const TVectorF& vy, cons",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:16296,Modifiability,Inherit,Inherited,16296,"ts] array of Y high errors; Double_t*fEYlow[fNpoints] array of Y low errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphAsymmErrors(); TGraphAsymmErrors default constructor. TGraphAsymmErrors(const TGraphAsymmErrors& gr); TGraphAsymmErrors copy constructor. TGraphAsymmErrors& operator=(const TGraphAsymmErrors& gr); TGraphAsymmErrors assignment operator. TGraphAsymmErrors(Int_t n); TGraphAsymmErrors normal constructor. the arrays are preset to zero. TGraphAsymmErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0); TGraphAsymmErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphAsymmErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0); TGraphAsymmErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphAsymmErrors(const TVectorF& vx, const TVectorF& vy, cons",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:430,Performance,perform,performed,430,". TGraphAsymmErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphAsymmErrors. class TGraphAsymmErrors: public TGraph. TGraphAsymmErrors class; A TGraphAsymmErrors is a TGraph with assymetric error bars. The TGraphAsymmErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with assymetric error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. virtual~TGraphAsymmErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidBayesDivide(const TH1* pass, const TH1* total, Option_t* opt = """"); virtual voidTGraph::Browse(TBrowser* b); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bo",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:22762,Performance,perform,perform,22762,"e interval oscillates significantly according to the total number of; events and the true efficiency. In order to decrease the impact of this; oscillation on the actual coverage probability a couple of approximations and; methodes has been developped. For a detailed discussion, please have a look at; this statistical paper:. http://www-stat.wharton.upenn.edu/~tcai/paper/Binomial-StatSci.pdf. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute Range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. Int_t Merge(TCollection* list); Adds all graphs with asymmetric errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:6580,Security,Hash,Hash,6580,"th() const; TList*TGraph::GetListOfFunctions() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; Double_tTGraph::GetMaximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtu",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:12238,Testability,Test,TestBit,12238,"at(Bool_t stat); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidSetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh)MENU ; virtual voidSetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); virtual voidSetPointEXhigh(Int_t i, Double_t exh); virtual voidSetPointEXlow(Int_t i, Double_t exl); virtual voidSetPointEYhigh(Int_t i, Double_t eyh); virtual voidSetPointEYlow(Int_t i, Double_t eyl); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphAsymmErrors(); TGraphAsymmErrors(Int_t n); TGraphAsymmErrors(const TGraphAsymmErrors& gr); TGraphAsymmErrors(const TH1* h); TGraphAsymmErrors(const TH1* pass, const TH1* total, Option_t* option = """"); TGraphAsymmErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vexl, const TVectorF& vexh, const TVectorF& veyl, const TVectorF& veyh); TGraphAsymmErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vexl, const TVectorD& vexh, const TVectorD& veyl, const TVectorD& veyh); TGraphAsymmErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0); TGraphAsymmErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) cons",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:12277,Testability,Test,TestBits,12277,"tPoint(Int_t i, Double_t x, Double_t y); virtual voidSetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh)MENU ; virtual voidSetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); virtual voidSetPointEXhigh(Int_t i, Double_t exh); virtual voidSetPointEXlow(Int_t i, Double_t exl); virtual voidSetPointEYhigh(Int_t i, Double_t eyh); virtual voidSetPointEYlow(Int_t i, Double_t eyl); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphAsymmErrors(); TGraphAsymmErrors(Int_t n); TGraphAsymmErrors(const TGraphAsymmErrors& gr); TGraphAsymmErrors(const TH1* h); TGraphAsymmErrors(const TH1* pass, const TH1* total, Option_t* option = """"); TGraphAsymmErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vexl, const TVectorF& vexh, const TVectorF& veyl, const TVectorF& veyh); TGraphAsymmErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vexl, const TVectorD& vexh, const TVectorD& veyl, const TVectorD& veyh); TGraphAsymmErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0); TGraphAsymmErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const cha",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:632,Usability,Simpl,Simple,632,". TGraphAsymmErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphAsymmErrors. class TGraphAsymmErrors: public TGraph. TGraphAsymmErrors class; A TGraphAsymmErrors is a TGraph with assymetric error bars. The TGraphAsymmErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with assymetric error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. virtual~TGraphAsymmErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidBayesDivide(const TH1* pass, const TH1* total, Option_t* opt = """"); virtual voidTGraph::Browse(TBrowser* b); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bo",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphAsymmErrors.html:1843,Usability,Clear,Clear,1843," virtual~TGraphAsymmErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidBayesDivide(const TH1* pass, const TH1* total, Option_t* opt = """"); virtual voidTGraph::Browse(TBrowser* b); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bo",MatchSource.WIKI,root/html604/TGraphAsymmErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphAsymmErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:385,Availability,error,error,385,". TGraphBentErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphBentErrors. class TGraphBentErrors: public TGraph. TGraphBentErrors class; A TGraphBentErrors is a TGraph with bent, assymetric error bars. The TGraphBentErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. virtual~TGraphBentErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(c",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:655,Availability,error,error,655,". TGraphBentErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphBentErrors. class TGraphBentErrors: public TGraph. TGraphBentErrors class; A TGraphBentErrors is a TGraph with bent, assymetric error bars. The TGraphBentErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. virtual~TGraphBentErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(c",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:3265,Availability,Error,Error,3265,"tTGraph::CompareY(const TGraph* gr, Int_t left, Int_t right); virtual voidComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidT",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:3486,Availability,error,error,3486,"ject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidTGraph::FitPanel()MENU ; virtual Double_tTGraph::GetCorrelationFactor() const; virtual Double_tTGraph::GetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGra",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:3570,Availability,error,error,3570,"t_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidTGraph::FitPanel()MENU ; virtual Double_tTGraph::GetCorrelationFactor() const; virtual Double_tTGraph::GetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGraph::GetEditable() const; virtual Double_tGetErrorX(Int_t bin) const; virtual Double_",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:14909,Availability,error,errors,14909,TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fEXhigh[fNpoints] array of X high errors; Double_t*fEXhighd[fNpoints] array of X high displacements; Double_t*fEXlow[fNpoints] array of X low errors; Double_t*fEXlowd[fNpoints] array of X low displacements; Double_t*fEYhigh[fNpoints] array of Y high errors; Double_t*fEYhighd[fNpoints] array of Y high displacements; Double_t*fEYlow[fNpoints] array of Y low errors; Double_t*fEYlowd[fNpoints] array of Y low displacements; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphBentErrors(); TGraphBentErrors default constructor. TGraphBentErrors(const TGraphBentErrors& gr); TGraphBentErrors copy constructor. TGraphBentErrors(Int_t n); TGraphBentErrors normal constructor. the arrays are preset to zero. TGraphBentErrors,MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:15017,Availability,error,errors,15017,TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fEXhigh[fNpoints] array of X high errors; Double_t*fEXhighd[fNpoints] array of X high displacements; Double_t*fEXlow[fNpoints] array of X low errors; Double_t*fEXlowd[fNpoints] array of X low displacements; Double_t*fEYhigh[fNpoints] array of Y high errors; Double_t*fEYhighd[fNpoints] array of Y high displacements; Double_t*fEYlow[fNpoints] array of Y low errors; Double_t*fEYlowd[fNpoints] array of Y low displacements; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphBentErrors(); TGraphBentErrors default constructor. TGraphBentErrors(const TGraphBentErrors& gr); TGraphBentErrors copy constructor. TGraphBentErrors(Int_t n); TGraphBentErrors normal constructor. the arrays are preset to zero. TGraphBentErrors,MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:15125,Availability,error,errors,15125,TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fEXhigh[fNpoints] array of X high errors; Double_t*fEXhighd[fNpoints] array of X high displacements; Double_t*fEXlow[fNpoints] array of X low errors; Double_t*fEXlowd[fNpoints] array of X low displacements; Double_t*fEYhigh[fNpoints] array of Y high errors; Double_t*fEYhighd[fNpoints] array of Y high displacements; Double_t*fEYlow[fNpoints] array of Y low errors; Double_t*fEYlowd[fNpoints] array of Y low displacements; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphBentErrors(); TGraphBentErrors default constructor. TGraphBentErrors(const TGraphBentErrors& gr); TGraphBentErrors copy constructor. TGraphBentErrors(Int_t n); TGraphBentErrors normal constructor. the arrays are preset to zero. TGraphBentErrors,MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:15233,Availability,error,errors,15233,TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fEXhigh[fNpoints] array of X high errors; Double_t*fEXhighd[fNpoints] array of X high displacements; Double_t*fEXlow[fNpoints] array of X low errors; Double_t*fEXlowd[fNpoints] array of X low displacements; Double_t*fEYhigh[fNpoints] array of Y high errors; Double_t*fEYhighd[fNpoints] array of Y high displacements; Double_t*fEYlow[fNpoints] array of Y low errors; Double_t*fEYlowd[fNpoints] array of Y low displacements; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphBentErrors(); TGraphBentErrors default constructor. TGraphBentErrors(const TGraphBentErrors& gr); TGraphBentErrors copy constructor. TGraphBentErrors(Int_t n); TGraphBentErrors normal constructor. the arrays are preset to zero. TGraphBentErrors,MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:17382,Availability,Error,Errors,17382,"ntErrors(Int_t n); TGraphBentErrors normal constructor. the arrays are preset to zero. TGraphBentErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0, const Float_t* exld = 0, const Float_t* exhd = 0, const Float_t* eyld = 0, const Float_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphBentErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. ~TGraphBentErrors(); TGraphBentErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error alon",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:17544,Availability,down,down,17544,"phBentErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0, const Float_t* exld = 0, const Float_t* exhd = 0, const Float_t* eyld = 0, const Float_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphBentErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. ~TGraphBentErrors(); TGraphBentErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t ",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:17927,Availability,error,errors,17927,"e_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. ~TGraphBentErrors(); TGraphBentErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostrea",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:18179,Availability,error,errors,18179,"ble_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. ~TGraphBentErrors(); TGraphBentErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t ",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:18286,Availability,error,error,18286,"rs default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t e",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:18411,Availability,error,error,18411,"x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point number i. voi",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:18487,Availability,error,error,18487," treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point number i. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Dou",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:18550,Availability,error,error,18550,"f ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point number i. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEXlow() const; {ret",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:18615,Availability,error,error,18615,"y Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point number i. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEXlow() const; {return fEXlow;}. Double_t * GetEXhigh() const; {return fEXhigh;}. D",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:18678,Availability,error,error,18678,"ble_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point number i. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEXlow() const; {return fEXlow;}. Double_t * GetEXhigh() const; {return fEXhigh;}. Double_t * GetEYlow() const; {return fEYlow;}. Double_t * GetEYhi",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:18874,Availability,error,errors,18874,"opyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point number i. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEXlow() const; {return fEXlow;}. Double_t * GetEXhigh() const; {return fEXhigh;}. Double_t * GetEYlow() const; {return fEYlow;}. Double_t * GetEYhigh() const; {return fEYhigh;}. Double_t * GetEXlowd() const; {return fEXlowd;}. Double_t * GetEXhighd() const; {return fEXhighd;}. Double_t * GetEYlowd() const; {return fEYlowd;}. Double_t * G",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:10032,Deployability,TOGGLE,TOGGLE,10032,"ill::ResetAttFill(Option_t* option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); virtual voidTAttMarker::ResetAttMarker(Option_t* toption = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTAttMarker::SaveMarkerAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t sizdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); virtual voidTGraph::Set(Int_t n); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGraph::SetEditable(Bool_t editable = kTRUE)TOGGLE GETTER ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTGraph::SetHistogram(TH1F* h); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTGraph::SetMaximum(Double_t maximum = -1111)MENU ; virtual voidTGraph::SetMinimum(Double_t minimum = -1111)MENU ; virtual voi",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:17835,Deployability,release,release,17835,"nstructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphBentErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. ~TGraphBentErrors(); TGraphBentErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:13252,Energy Efficiency,Allocate,Allocate,13252,"t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**Allocate(Int_t size); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidCopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tCopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tCtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tDoMerge(const TGraph* g); Double_t**TGraph::ExpandAndCopy(Int_t size, Int_t iend); virtual voidFillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidTObject::MakeZombie(); Double_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidSwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGraph::(anonymous)TGraph::kClipFrame; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:13292,Energy Efficiency,Allocate,AllocateArrays,13292,"t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**Allocate(Int_t size); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidCopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tCopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tCtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tDoMerge(const TGraph* g); Double_t**TGraph::ExpandAndCopy(Int_t size, Int_t iend); virtual voidFillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidTObject::MakeZombie(); Double_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidSwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGraph::(anonymous)TGraph::kClipFrame; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:19478,Energy Efficiency,Allocate,Allocate,19478,"t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point number i. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEXlow() const; {return fEXlow;}. Double_t * GetEXhigh() const; {return fEXhigh;}. Double_t * GetEYlow() const; {return fEYlow;}. Double_t * GetEYhigh() const; {return fEYhigh;}. Double_t * GetEXlowd() const; {return fEXlowd;}. Double_t * GetEXhighd() const; {return fEXhighd;}. Double_t * GetEYlowd() const; {return fEYlowd;}. Double_t * GetEYhighd() const; {return fEYhighd;}. » Author: Dave Morrison 30/06/2003 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:6624,Modifiability,Inherit,InheritsFrom,6624,"ize_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; Double_tTGraph::GetMaximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTGraph::LeastSquareFit(Int_t m, Double_t* a, Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::Lea",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:6690,Modifiability,Inherit,InheritsFrom,6690,":GetMarkerStyle() const; Double_tTGraph::GetMaximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTGraph::LeastSquareFit(Int_t m, Double_t* a, Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::LeastSquareLinearFit(Int_t n, Double_t& a0, Double_t& a1, Int_t& ifai",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:16196,Modifiability,Inherit,Inheritance,16196,"ay of Y low errors; Double_t*fEYlowd[fNpoints] array of Y low displacements; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphBentErrors(); TGraphBentErrors default constructor. TGraphBentErrors(const TGraphBentErrors& gr); TGraphBentErrors copy constructor. TGraphBentErrors(Int_t n); TGraphBentErrors normal constructor. the arrays are preset to zero. TGraphBentErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0, const Float_t* exld = 0, const Float_t* exhd = 0, const Float_t* eyld = 0, const Float_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphBentErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the correspo",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:16209,Modifiability,Inherit,Inherited,16209,"ay of Y low errors; Double_t*fEYlowd[fNpoints] array of Y low displacements; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphBentErrors(); TGraphBentErrors default constructor. TGraphBentErrors(const TGraphBentErrors& gr); TGraphBentErrors copy constructor. TGraphBentErrors(Int_t n); TGraphBentErrors normal constructor. the arrays are preset to zero. TGraphBentErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0, const Float_t* exld = 0, const Float_t* exhd = 0, const Float_t* eyld = 0, const Float_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphBentErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the correspo",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:430,Performance,perform,performed,430,". TGraphBentErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphBentErrors. class TGraphBentErrors: public TGraph. TGraphBentErrors class; A TGraphBentErrors is a TGraph with bent, assymetric error bars. The TGraphBentErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. virtual~TGraphBentErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(c",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:18124,Performance,perform,perform,18124,"ble_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. ~TGraphBentErrors(); TGraphBentErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t ",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:6514,Security,Hash,Hash,6514,"th() const; TList*TGraph::GetListOfFunctions() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; Double_tTGraph::GetMaximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtu",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:12125,Testability,Test,TestBit,12125,"onst char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidSetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0)MENU ; virtual voidSetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphBentErrors(); TGraphBentErrors(Int_t n); TGraphBentErrors(const TGraphBentErrors& gr); TGraphBentErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0, const Float_t* exld = 0, const Float_t* exhd = 0, const Float_t* eyld = 0, const Float_t* eyhd = 0); TGraphBentErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:12164,Testability,Test,TestBits,12164,"SetObjectStat(Bool_t stat); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidSetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0)MENU ; virtual voidSetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphBentErrors(); TGraphBentErrors(Int_t n); TGraphBentErrors(const TGraphBentErrors& gr); TGraphBentErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0, const Float_t* exld = 0, const Float_t* exhd = 0, const Float_t* eyld = 0, const Float_t* eyhd = 0); TGraphBentErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:632,Usability,Simpl,Simple,632,". TGraphBentErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphBentErrors. class TGraphBentErrors: public TGraph. TGraphBentErrors class; A TGraphBentErrors is a TGraph with bent, assymetric error bars. The TGraphBentErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. virtual~TGraphBentErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(c",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphBentErrors.html:1878,Usability,Clear,Clear,1878," virtual~TGraphBentErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(c",MatchSource.WIKI,root/html604/TGraphBentErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphBentErrors.html
https://root.cern/root/html604/TGraphDelaunay.html:2294,Availability,Error,Error,2294," virtual~TGraphDelaunay(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tComputeZ(Double_t x, Double_t y); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MEN",MatchSource.WIKI,root/html604/TGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphDelaunay.html
https://root.cern/root/html604/TGraphDelaunay.html:2423,Availability,error,error,2423," virtual~TGraphDelaunay(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tComputeZ(Double_t x, Double_t y); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MEN",MatchSource.WIKI,root/html604/TGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphDelaunay.html
https://root.cern/root/html604/TGraphDelaunay.html:2507,Availability,error,error,2507,"hod) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tComputeZ(Double_t x, Double_t y); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidFindAllTriangles(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraph2D*GetGraph2D() const; virtual const char*TObject::GetIconName() const; Double_tGetMarginBinsContent() const; Int_t*GetMTried() const; virtual const char*TNamed::GetName() const; Int_tGetNdt() const; Int_t*GetNTried() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_t*GetPTried() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*GetXN() const; Double_tGetXNmax() const; Double_tGetXNmin() const; ",MatchSource.WIKI,root/html604/TGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphDelaunay.html
https://root.cern/root/html604/TGraphDelaunay.html:3770,Modifiability,Inherit,InheritsFrom,3770,"ar* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraph2D*GetGraph2D() const; virtual const char*TObject::GetIconName() const; Double_tGetMarginBinsContent() const; Int_t*GetMTried() const; virtual const char*TNamed::GetName() const; Int_tGetNdt() const; Int_t*GetNTried() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_t*GetPTried() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*GetXN() const; Double_tGetXNmax() const; Double_tGetXNmin() const; Double_t*GetYN() const; Double_tGetYNmax() const; Double_tGetYNmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; Double_tInterpolate(Double_t x, Double_t y); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_",MatchSource.WIKI,root/html604/TGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphDelaunay.html
https://root.cern/root/html604/TGraphDelaunay.html:3836,Modifiability,Inherit,InheritsFrom,3836,"* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraph2D*GetGraph2D() const; virtual const char*TObject::GetIconName() const; Double_tGetMarginBinsContent() const; Int_t*GetMTried() const; virtual const char*TNamed::GetName() const; Int_tGetNdt() const; Int_t*GetNTried() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_t*GetPTried() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*GetXN() const; Double_tGetXNmax() const; Double_tGetXNmin() const; Double_t*GetYN() const; Double_tGetYNmax() const; Double_tGetYNmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; Double_tInterpolate(Double_t x, Double_t y); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual ",MatchSource.WIKI,root/html604/TGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphDelaunay.html
https://root.cern/root/html604/TGraphDelaunay.html:9139,Modifiability,Inherit,Inheritance,9139,"fNTried!Delaunay triangles storage of size fNdt; TStringTNamed::fNameobject identifier; Int_tfNdt!Number of Delaunay triangles found; Int_tfNhull!Number of points in the hull; Int_tfNpoints!Number of data points in fGraph2D; Int_t*fOrder!Array used to order mass points by distance; Int_t*fPTried!; TStringTNamed::fTitleobject title; Int_tfTriedSize!Real size of the fxTried arrays; Double_t*fX!Pointer to fGraph2D->fX; Double_t*fXN!fGraph2D vectors normalized of size fNpoints; Double_tfXNmax!Maximum value of fXN; Double_tfXNmin!Minimum value of fXN; Double_tfXScaleFactor!; Double_tfXoffset!; Double_t*fY!Pointer to fGraph2D->fY; Double_t*fYN!fGraph2D vectors normalized of size fNpoints; Double_tfYNmax!Maximum value of fYN; Double_tfYNmin!Minimum value of fYN; Double_tfYScaleFactor!; Double_tfYoffset!Parameters used to normalize user data; Double_t*fZ!Pointer to fGraph2D->fZ; Double_tfZout!Histogram bin height for points lying outside the convex hull. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphDelaunay(); TGraphDelaunay default constructor. TGraphDelaunay(TGraph2D* g); TGraphDelaunay normal constructor. ~TGraphDelaunay(); TGraphDelaunay destructor. Double_t ComputeZ(Double_t x, Double_t y); Return the z value corresponding to the (x,y) point in fGraph2D. void CreateTrianglesDataStructure(); Function used internally only. It creates the data structures needed to; compute the Delaunay triangles. Bool_t Enclose(Int_t T1, Int_t T2, Int_t T3, Int_t Ex) const; Is point e inside the triangle t1-t2-t3 ?. void FileIt(Int_t P, Int_t N, Int_t M); Files the triangle defined by the 3 vertices p, n and m into the; fxTried arrays. If these arrays are to small they are automatically; expanded. void FindAllTriangles(); Attempt to find all the Delaunay triangles of the point set. It is not; guaranteed that it will fully succeed, and no check is made that it has; fully succeeded (such a check would be possible by referencing the points; ",MatchSource.WIKI,root/html604/TGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphDelaunay.html
https://root.cern/root/html604/TGraphDelaunay.html:9152,Modifiability,Inherit,Inherited,9152,"fNTried!Delaunay triangles storage of size fNdt; TStringTNamed::fNameobject identifier; Int_tfNdt!Number of Delaunay triangles found; Int_tfNhull!Number of points in the hull; Int_tfNpoints!Number of data points in fGraph2D; Int_t*fOrder!Array used to order mass points by distance; Int_t*fPTried!; TStringTNamed::fTitleobject title; Int_tfTriedSize!Real size of the fxTried arrays; Double_t*fX!Pointer to fGraph2D->fX; Double_t*fXN!fGraph2D vectors normalized of size fNpoints; Double_tfXNmax!Maximum value of fXN; Double_tfXNmin!Minimum value of fXN; Double_tfXScaleFactor!; Double_tfXoffset!; Double_t*fY!Pointer to fGraph2D->fY; Double_t*fYN!fGraph2D vectors normalized of size fNpoints; Double_tfYNmax!Maximum value of fYN; Double_tfYNmin!Minimum value of fYN; Double_tfYScaleFactor!; Double_tfYoffset!Parameters used to normalize user data; Double_t*fZ!Pointer to fGraph2D->fZ; Double_tfZout!Histogram bin height for points lying outside the convex hull. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphDelaunay(); TGraphDelaunay default constructor. TGraphDelaunay(TGraph2D* g); TGraphDelaunay normal constructor. ~TGraphDelaunay(); TGraphDelaunay destructor. Double_t ComputeZ(Double_t x, Double_t y); Return the z value corresponding to the (x,y) point in fGraph2D. void CreateTrianglesDataStructure(); Function used internally only. It creates the data structures needed to; compute the Delaunay triangles. Bool_t Enclose(Int_t T1, Int_t T2, Int_t T3, Int_t Ex) const; Is point e inside the triangle t1-t2-t3 ?. void FileIt(Int_t P, Int_t N, Int_t M); Files the triangle defined by the 3 vertices p, n and m into the; fxTried arrays. If these arrays are to small they are automatically; expanded. void FindAllTriangles(); Attempt to find all the Delaunay triangles of the point set. It is not; guaranteed that it will fully succeed, and no check is made that it has; fully succeeded (such a check would be possible by referencing the points; ",MatchSource.WIKI,root/html604/TGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphDelaunay.html
https://root.cern/root/html604/TGraphDelaunay.html:7802,Performance,perform,performed,7802,"ContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tfAllTri!True if FindAllTriangles() has been performed on fGraph2D; Double_t*fDist!Array used to order mass points by distance; TGraph2D*fGraph2D!2D graph containing the user data; Int_t*fHullPoints!Hull points of size fNhull; Bool_tfInit!True if CreateTrianglesDataStructure() and FindHull() have been performed; Int_t*fMTried!; Int_tfMaxIter!Maximum number of iterations to find Delaunay triangles; Int_t*fNTried!Delaunay triangles storage of size fNdt; TStringTNamed::fNameobject identifier; Int_tfNdt!Number of Delaunay triangles found; Int_tfNhull!Number of points in the hull; Int_tfNpoints!Number of data points in fGraph2D; Int_t*fOrder!Array used to order mass points by distance; Int_t*fPTried!; TStringTNamed::fTitleobject title; Int_tfTriedSize!Real size of the fxTried arrays; Double_t*fX!Pointer to fGraph2D->fX; Double_t*fXN!fGraph2D vectors normalized of size fNpoints; Double_tfXNmax!Maximum value of fXN; Double_tfXNmin!Minimum value of fXN; Double_tfXScaleFactor!; Double_tfXoffset!; Double_t*fY!Pointer to fGraph2D->fY; Double_t*fYN!fGraph2D vectors normalized of size fNpoints; Double_tfYNmax!Maximum value of fYN; Double_tfYNmin!Minimum value of fYN; Double_tfYScaleFactor!; Double_tfYoffset!Parameters used to normalize user data; Double_t*fZ!Pointer to fGraph2D->fZ; Double_tfZout!Histogram bin height for points lying outside the convex hull. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphDelaunay(); TGraphDelaunay default constructor. TGraphDelaunay(TGraph2D* g); TGraphDelaunay normal constructor. ~TGraphDelaunay(); TGraphDelaunay destructor. Double_t ComputeZ(Double_t x, Double_t y); Return the z va",MatchSource.WIKI,root/html604/TGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphDelaunay.html
https://root.cern/root/html604/TGraphDelaunay.html:8060,Performance,perform,performed,8060,"ContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tfAllTri!True if FindAllTriangles() has been performed on fGraph2D; Double_t*fDist!Array used to order mass points by distance; TGraph2D*fGraph2D!2D graph containing the user data; Int_t*fHullPoints!Hull points of size fNhull; Bool_tfInit!True if CreateTrianglesDataStructure() and FindHull() have been performed; Int_t*fMTried!; Int_tfMaxIter!Maximum number of iterations to find Delaunay triangles; Int_t*fNTried!Delaunay triangles storage of size fNdt; TStringTNamed::fNameobject identifier; Int_tfNdt!Number of Delaunay triangles found; Int_tfNhull!Number of points in the hull; Int_tfNpoints!Number of data points in fGraph2D; Int_t*fOrder!Array used to order mass points by distance; Int_t*fPTried!; TStringTNamed::fTitleobject title; Int_tfTriedSize!Real size of the fxTried arrays; Double_t*fX!Pointer to fGraph2D->fX; Double_t*fXN!fGraph2D vectors normalized of size fNpoints; Double_tfXNmax!Maximum value of fXN; Double_tfXNmin!Minimum value of fXN; Double_tfXScaleFactor!; Double_tfXoffset!; Double_t*fY!Pointer to fGraph2D->fY; Double_t*fYN!fGraph2D vectors normalized of size fNpoints; Double_tfYNmax!Maximum value of fYN; Double_tfYNmin!Minimum value of fYN; Double_tfYScaleFactor!; Double_tfYoffset!Parameters used to normalize user data; Double_t*fZ!Pointer to fGraph2D->fZ; Double_tfZout!Histogram bin height for points lying outside the convex hull. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphDelaunay(); TGraphDelaunay default constructor. TGraphDelaunay(TGraph2D* g); TGraphDelaunay normal constructor. ~TGraphDelaunay(); TGraphDelaunay destructor. Double_t ComputeZ(Double_t x, Double_t y); Return the z va",MatchSource.WIKI,root/html604/TGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphDelaunay.html
https://root.cern/root/html604/TGraphDelaunay.html:3660,Security,Hash,Hash,3660,"irtual voidTNamed::FillBuffer(char*& buffer); voidFindAllTriangles(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraph2D*GetGraph2D() const; virtual const char*TObject::GetIconName() const; Double_tGetMarginBinsContent() const; Int_t*GetMTried() const; virtual const char*TNamed::GetName() const; Int_tGetNdt() const; Int_t*GetNTried() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_t*GetPTried() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*GetXN() const; Double_tGetXNmax() const; Double_tGetXNmin() const; Double_t*GetYN() const; Double_tGetYNmax() const; Double_tGetYNmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; Double_tInterpolate(Double_t x, Double_t y); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TOb",MatchSource.WIKI,root/html604/TGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphDelaunay.html
https://root.cern/root/html604/TGraphDelaunay.html:6075,Testability,Test,TestBit,6075,"bject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMarginBinsContent(Double_t z = 0.); voidSetMaxIter(Int_t n = 100000); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphDelaunay(); TGraphDelaunay(TGraph2D* g); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidCreateTrianglesDataStructure(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tEnclose(Int_t T1, Int_t T2, Int_t T3, Int_t Ex) const; voidFileIt(Int_t P, Int_t N, Int_t M); voidFindHull(); Bool_tInHull(Int_t E, Int_t X) const; Double_tInterpolateOnPlane(Int_t TI1, Int_t TI2, Int_t TI3, Int_t E) const; voidTObject::MakeZombie(). private:. TGraphDelaunay&operator=(const TGraphDelaunay&); TGraphDelaunay(const TGraphDelaunay&).",MatchSource.WIKI,root/html604/TGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphDelaunay.html
https://root.cern/root/html604/TGraphDelaunay.html:6114,Testability,Test,TestBits,6114,"bject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMarginBinsContent(Double_t z = 0.); voidSetMaxIter(Int_t n = 100000); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphDelaunay(); TGraphDelaunay(TGraph2D* g); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidCreateTrianglesDataStructure(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tEnclose(Int_t T1, Int_t T2, Int_t T3, Int_t Ex) const; voidFileIt(Int_t P, Int_t N, Int_t M); voidFindHull(); Bool_tInHull(Int_t E, Int_t X) const; Double_tInterpolateOnPlane(Int_t TI1, Int_t TI2, Int_t TI3, Int_t E) const; voidTObject::MakeZombie(). private:. TGraphDelaunay&operator=(const TGraphDelaunay&); TGraphDelaunay(const TGraphDelaunay&).",MatchSource.WIKI,root/html604/TGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphDelaunay.html
https://root.cern/root/html604/TGraphDelaunay.html:11563,Testability,test,tested,11563,"non-shared sides. Fiddling with; the size of the `alittlebit' parameter may help. void FindHull(); Finds those points which make up the convex hull of the set. If the xy; plane were a sheet of wood, and the points were nails hammered into it; at the respective coordinates, then if an elastic band were stretched; over all the nails it would form the shape of the convex hull. Those; nails in contact with it are the points that make up the hull. Bool_t InHull(Int_t E, Int_t X) const; Is point e inside the hull defined by all points apart from x ?. Double_t InterpolateOnPlane(Int_t TI1, Int_t TI2, Int_t TI3, Int_t E) const; Finds the z-value at point e given that it lies; on the plane defined by t1,t2,t3. Double_t Interpolate(Double_t x, Double_t y); Finds the Delaunay triangle that the point (xi,yi) sits in (if any) and; calculate a z-value for it by linearly interpolating the z-values that; make up that triangle. void SetMaxIter(Int_t n = 100000); Defines the number of triangles tested for a Delaunay triangle; (number of iterations) before abandoning the search. void SetMarginBinsContent(Double_t z = 0.); Sets the histogram bin height for points lying outside the convex hull ie:; the bins in the margin. TGraphDelaunay(const TGraphDelaunay& ). TGraphDelaunay& operator=(const TGraphDelaunay& ). TGraph2D * GetGraph2D() const; {return fGraph2D;}. Double_t GetMarginBinsContent() const; {return fZout;}. Int_t GetNdt() const; {return fNdt;}. Int_t * GetPTried() const; {return fPTried;}. Int_t * GetNTried() const; {return fNTried;}. Int_t * GetMTried() const; {return fMTried;}. Double_t * GetXN() const; {return fXN;}. Double_t * GetYN() const; {return fYN;}. Double_t GetXNmin() const; {return fXNmin;}. Double_t GetXNmax() const; {return fXNmax;}. Double_t GetYNmin() const; {return fYNmin;}. Double_t GetYNmax() const; {return fYNmax;}. » Author: Olivier Couet, Luke Jones (Royal Holloway, University of London) » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last ",MatchSource.WIKI,root/html604/TGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphDelaunay.html
https://root.cern/root/html604/TGraphDelaunay.html:1709,Usability,Clear,Clear,1709," virtual~TGraphDelaunay(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tComputeZ(Double_t x, Double_t y); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MEN",MatchSource.WIKI,root/html604/TGraphDelaunay.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphDelaunay.html
https://root.cern/root/html604/TGraphEdge.html:1396,Availability,Error,Error,1396," virtual~TGraphEdge(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCreateGVEdge(GVizAgraph_t* gv); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); GVizAgedge_t*GetGVEdge(); virtual con",MatchSource.WIKI,root/html604/TGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEdge.html
https://root.cern/root/html604/TGraphEdge.html:1525,Availability,error,error,1525,"onst; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCreateGVEdge(GVizAgraph_t* gv); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); GVizAgedge_t*GetGVEdge(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; TGraphNode*GetNode1(); TGraphNode*GetNode2(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObjec",MatchSource.WIKI,root/html604/TGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEdge.html
https://root.cern/root/html604/TGraphEdge.html:1609,Availability,error,error,1609,"owse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCreateGVEdge(GVizAgraph_t* gv); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); GVizAgedge_t*GetGVEdge(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; TGraphNode*GetNode1(); TGraphNode*GetNode2(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTOb",MatchSource.WIKI,root/html604/TGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEdge.html
https://root.cern/root/html604/TGraphEdge.html:2693,Modifiability,Inherit,InheritsFrom,2693,"::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); GVizAgedge_t*GetGVEdge(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; TGraphNode*GetNode1(); TGraphNode*GetNode2(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; voidLayout(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](si",MatchSource.WIKI,root/html604/TGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEdge.html
https://root.cern/root/html604/TGraphEdge.html:2759,Modifiability,Inherit,InheritsFrom,2759,"ject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); GVizAgedge_t*GetGVEdge(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; TGraphNode*GetNode1(); TGraphNode*GetNode2(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; voidLayout(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGrap",MatchSource.WIKI,root/html604/TGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEdge.html
https://root.cern/root/html604/TGraphEdge.html:6994,Modifiability,Inherit,Inheritance,6994,"ject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tfArrXArrow X position; Double_tfArrYArrow Y position; GVizAgedge_t*fGVEdgeGraphviz edge; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Int_t*fNnumber of edge points (GV); TGraphNode*fNode1First node; TGraphNode*fNode2Second node; Double_t*fXX edge points (GV); Double_t*fYX edge points (GV). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphEdge(); Graph Edge default constructor. TGraphEdge(TGraphNode* n1, TGraphNode* n2); Graph Edge normal constructor. ~TGraphEdge(); Graph Edge default destructor. void CreateGVEdge(GVizAgraph_t* gv); Create the GraphViz edge into the GraphViz data structure gv. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an edge. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. void Layout(); Layout this edge in the GraphViz space. This is done after gvLayout; has been performed. void Paint(Option_t* option = """"); Paint this edge with its current attributes. void SavePrimitive(ostream& , Option_t* ); Save primitive as a C++ statement(s) on output stream out. void SaveAttributes(ostream& , const char* ); Save attributes as a C++ statement(s) on output stream out; called by TGraphStruct::SavePrimitive. void Streamer(TBuffer& ). TGraphEdge(). void SetGVEdge(GVizAgedg",MatchSource.WIKI,root/html604/TGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEdge.html
https://root.cern/root/html604/TGraphEdge.html:7007,Modifiability,Inherit,Inherited,7007,"ject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tfArrXArrow X position; Double_tfArrYArrow Y position; GVizAgedge_t*fGVEdgeGraphviz edge; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Int_t*fNnumber of edge points (GV); TGraphNode*fNode1First node; TGraphNode*fNode2Second node; Double_t*fXX edge points (GV); Double_t*fYX edge points (GV). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphEdge(); Graph Edge default constructor. TGraphEdge(TGraphNode* n1, TGraphNode* n2); Graph Edge normal constructor. ~TGraphEdge(); Graph Edge default destructor. void CreateGVEdge(GVizAgraph_t* gv); Create the GraphViz edge into the GraphViz data structure gv. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an edge. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. void Layout(); Layout this edge in the GraphViz space. This is done after gvLayout; has been performed. void Paint(Option_t* option = """"); Paint this edge with its current attributes. void SavePrimitive(ostream& , Option_t* ); Save primitive as a C++ statement(s) on output stream out. void SaveAttributes(ostream& , const char* ); Save attributes as a C++ statement(s) on output stream out; called by TGraphStruct::SavePrimitive. void Streamer(TBuffer& ). TGraphEdge(). void SetGVEdge(GVizAgedg",MatchSource.WIKI,root/html604/TGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEdge.html
https://root.cern/root/html604/TGraphEdge.html:7618,Performance,perform,performed,7618,"ey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tfArrXArrow X position; Double_tfArrYArrow Y position; GVizAgedge_t*fGVEdgeGraphviz edge; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Int_t*fNnumber of edge points (GV); TGraphNode*fNode1First node; TGraphNode*fNode2Second node; Double_t*fXX edge points (GV); Double_t*fYX edge points (GV). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphEdge(); Graph Edge default constructor. TGraphEdge(TGraphNode* n1, TGraphNode* n2); Graph Edge normal constructor. ~TGraphEdge(); Graph Edge default destructor. void CreateGVEdge(GVizAgraph_t* gv); Create the GraphViz edge into the GraphViz data structure gv. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an edge. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. void Layout(); Layout this edge in the GraphViz space. This is done after gvLayout; has been performed. void Paint(Option_t* option = """"); Paint this edge with its current attributes. void SavePrimitive(ostream& , Option_t* ); Save primitive as a C++ statement(s) on output stream out. void SaveAttributes(ostream& , const char* ); Save attributes as a C++ statement(s) on output stream out; called by TGraphStruct::SavePrimitive. void Streamer(TBuffer& ). TGraphEdge(). void SetGVEdge(GVizAgedge_t* gve); {fGVEdge = gve;}. GVizAgedge_t * GetGVEdge(); {return fGVEdge;}. TGraphNode * GetNode1(); {return fNode1;}. TGraphNode * GetNode2(); {return fNode2;}. » Author: Olivier Couet 13/07/09 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEdge.html
https://root.cern/root/html604/TGraphEdge.html:2583,Security,Hash,Hash,2583,"bjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); GVizAgedge_t*GetGVEdge(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; TGraphNode*GetNode1(); TGraphNode*GetNode2(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; voidLayout(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*",MatchSource.WIKI,root/html604/TGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEdge.html
https://root.cern/root/html604/TGraphEdge.html:5254,Testability,Test,TestBit,5254," sz); void*TObject::operator new[](size_t sz, void* vp); TGraphEdge&operator=(const TGraphEdge&); virtual voidPaint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidSaveAttributes(ostream&, const char*); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream&, Option_t*); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetGVEdge(GVizAgedge_t* gve); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphEdge(); TGraphEdge(const TGraphEdge&); TGraphEdge(TGraphNode* n1, TGraphNode* n2); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEdge.html
https://root.cern/root/html604/TGraphEdge.html:5293,Testability,Test,TestBits,5293," sz); void*TObject::operator new[](size_t sz, void* vp); TGraphEdge&operator=(const TGraphEdge&); virtual voidPaint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidSaveAttributes(ostream&, const char*); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream&, Option_t*); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetGVEdge(GVizAgedge_t* gve); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphEdge(); TGraphEdge(const TGraphEdge&); TGraphEdge(TGraphNode* n1, TGraphNode* n2); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEdge.html
https://root.cern/root/html604/TGraphEdge.html:722,Usability,Clear,Clear,722," virtual~TGraphEdge(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCreateGVEdge(GVizAgraph_t* gv); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); GVizAgedge_t*GetGVEdge(); virtual con",MatchSource.WIKI,root/html604/TGraphEdge.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEdge.html
https://root.cern/root/html604/TGraphEditor.html:4712,Availability,Error,Error,4712,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:4841,Availability,error,error,4841," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const;",MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:4925,Availability,error,error,4925,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() c",MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:18723,Availability,mask,mask,18723,,MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:15580,Deployability,Update,Update,15580,"groundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphEditor(const TGraphEditor&); TGraphEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:10980,Integrability,Message,Message,10980,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGraphEditor&operator=(const TGraphEditor&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; virt",MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:9563,Modifiability,Inherit,InheritsFrom,9563,"irtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:9629,Modifiability,Inherit,InheritsFrom,9629," Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:21738,Modifiability,Inherit,Inheritance,21738,"e::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; TGButtonGroup*fgrGroup the Radiobuttons:; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of graph editor. ~TGraphEditor(); Destructor of graph editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Pick up the used values of graph attributes. void DoTitle(const char* text); Slot for setting the graph title. void DoShape(); Slot connected to the draw options. void DoMarkerOnOff(Bool_t on); Slot for setting markers as visible/invisible. void DoGraphLineWidth(); Slot connected to the graph line width. TGraphEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: Carsten Hof 28/07/04 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id$ » Last generated: 2015-06-02 16:05; This page has been automatica",MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:21751,Modifiability,Inherit,Inherited,21751,"e::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; TGButtonGroup*fgrGroup the Radiobuttons:; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of graph editor. ~TGraphEditor(); Destructor of graph editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Pick up the used values of graph attributes. void DoTitle(const char* text); Slot for setting the graph title. void DoShape(); Slot connected to the draw options. void DoMarkerOnOff(Bool_t on); Slot for setting markers as visible/invisible. void DoGraphLineWidth(); Slot connected to the graph line width. TGraphEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: Carsten Hof 28/07/04 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id$ » Last generated: 2015-06-02 16:05; This page has been automatica",MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:9273,Security,Hash,Hash,9273,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:15162,Testability,Test,TestBit,15162,"groundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphEditor(const TGraphEditor&); TGraphEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:15201,Testability,Test,TestBits,15201,"groundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphEditor(const TGraphEditor&); TGraphEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:464,Usability,Simpl,Simple,464,". TGraphEditor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TGraphEditor. class TGraphEditor: public TGedFrame. TGraphEditor. Implements GUI for graph attributes. Title': set the title of the graph; Change the Shape of the graph:; 'No Line' = "" "": just draw unconnected points; 'Simple Line' = ""L"":simple poly line between every point is drawn; 'Smooth Line' = ""C"":smooth curve is drawn; 'Bar Chart' = ""B"": A bar chart is drawn at each point; 'Fill Area' = ""F"": A fill area is drawn; Check box: 'Marker On/Off' Set Marker visible/invisible. /*. */. Function Members (Methods); public:. virtual~TGraphEditor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject:",MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:483,Usability,simpl,simple,483,". TGraphEditor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TGraphEditor. class TGraphEditor: public TGedFrame. TGraphEditor. Implements GUI for graph attributes. Title': set the title of the graph; Change the Shape of the graph:; 'No Line' = "" "": just draw unconnected points; 'Simple Line' = ""L"":simple poly line between every point is drawn; 'Smooth Line' = ""C"":smooth curve is drawn; 'Bar Chart' = ""B"": A bar chart is drawn at each point; 'Fill Area' = ""F"": A fill area is drawn; Check box: 'Marker On/Off' Set Marker visible/invisible. /*. */. Function Members (Methods); public:. virtual~TGraphEditor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject:",MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:1828,Usability,Clear,Clear,1828,"ar* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::Des",MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:18595,Usability,simpl,simple,18595,,MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphEditor.html:20269,Usability,simpl,simple,20269,tcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; TGCheckButton*fMarkerOnOffset Marker visible/unvisible; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Int_tTGedFrame::fPrioritylocation in GedEditor; TGRadioButton*fShapejust draw unconnected points; TGRadioButton*fShape0set smooth graph curve; TGRadioButton*fShape1set simple poly-line between every graph point; TGLayoutHints*fShape1lhlayout-hints for fShape1; TGRadioButton*fShape2set graph draw mode to bar chart; TGRadioButton*fShape3set graph draw mode to fill area; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TGTextEntry*fTitleContains the title of the graph; Int_tfTitlePrecfont precision level; UInt_tTGFrame::fWidthframe width; TGLineWidthComboBox*fWidthComboExclusion zone width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by Ad,MatchSource.WIKI,root/html604/TGraphEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphEditor.html
https://root.cern/root/html604/TGraphErrors.html:348,Availability,error,error,348,". TGraphErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphErrors. class TGraphErrors: public TGraph. TGraphErrors class; A TGraphErrors is a TGraph with error bars. The TGraphErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. virtual~TGraphErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); static Int_tCalculateScanfFields(const char* fmt); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tTGraph::CompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareRadius(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareX(const TGraph* gr, Int_t left, Int_t right); st",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:609,Availability,error,error,609,". TGraphErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphErrors. class TGraphErrors: public TGraph. TGraphErrors class; A TGraphErrors is a TGraph with error bars. The TGraphErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. virtual~TGraphErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); static Int_tCalculateScanfFields(const char* fmt); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tTGraph::CompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareRadius(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareX(const TGraph* gr, Int_t left, Int_t right); st",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:3008,Availability,Error,Error,3008,"tTGraph::CompareY(const TGraph* gr, Int_t left, Int_t right); virtual voidComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidT",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:3229,Availability,error,error,3229,"ject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidTGraph::FitPanel()MENU ; virtual Double_tTGraph::GetCorrelationFactor() const; virtual Double_tTGraph::GetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGra",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:3313,Availability,error,error,3313,"t_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidTGraph::FitPanel()MENU ; virtual Double_tTGraph::GetCorrelationFactor() const; virtual Double_tTGraph::GetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGraph::GetEditable() const; virtual Double_tGetErrorX(Int_t bin) const; virtual Double_",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:14450,Availability,error,errors,14450,"t::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fEX[fNpoints] array of X errors; Double_t*fEY[fNpoints] array of Y errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphErrors(); TGraphErrors default constructor. TGraphErrors(Int_t n); TGraphErrors normal constructor. the arrays are preset to zero. TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:14492,Availability,error,errors,14492,"t::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fEX[fNpoints] array of X errors; Double_t*fEY[fNpoints] array of Y errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphErrors(); TGraphErrors default constructor. TGraphErrors(Int_t n); TGraphErrors normal constructor. the arrays are preset to zero. TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:16261,Availability,error,errors,16261,"; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphErrors(); TGraphErrors default constructor. TGraphErrors(Int_t n); TGraphErrors normal constructor. the arrays are preset to zero. TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0, const Double_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vex, const TVectorF& vey); constructor with four vectors of floats in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vex and vey.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vex, const TVectorD& vey); constructor with four vectors of doubles in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vex and vey.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphErrors(const TGraphErrors& gr); TGraphErrors copy constructor. TGraphErrors& operator=(const TGraphErrors& gr); TGraphErrors assignment operator. TGraphErrors(const TH1* h); TGraphErrors constructor importing its parameters from the TH1 object passed as argument. TGraphErrors(const char* filename, const char* format = ""%lg %lg %lg %lg"", Option_t* option = """"); GraphErrors constructor reading input from filename; file",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:16615,Availability,error,errors,16615,"constructor. TGraphErrors(Int_t n); TGraphErrors normal constructor. the arrays are preset to zero. TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0, const Double_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vex, const TVectorF& vey); constructor with four vectors of floats in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vex and vey.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vex, const TVectorD& vey); constructor with four vectors of doubles in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vex and vey.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphErrors(const TGraphErrors& gr); TGraphErrors copy constructor. TGraphErrors& operator=(const TGraphErrors& gr); TGraphErrors assignment operator. TGraphErrors(const TH1* h); TGraphErrors constructor importing its parameters from the TH1 object passed as argument. TGraphErrors(const char* filename, const char* format = ""%lg %lg %lg %lg"", Option_t* option = """"); GraphErrors constructor reading input from filename; filename is assumed to contain at least 3 columns of numbers; convention for format (default=""%lg %lg %lg %lg); format = ""%lg %lg"" read only 2 first columns into X,Y; format = ""%lg %lg %lg"" read only 3 first columns into X,Y and EY; format = ""%lg %lg %lg %lg"" read only 4 first columns into X,Y,EX,EY. For files separated by a specific delimiter different fr",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:18076,Availability,error,error,18076,"ding input from filename; filename is assumed to contain at least 3 columns of numbers; convention for format (default=""%lg %lg %lg %lg); format = ""%lg %lg"" read only 2 first columns into X,Y; format = ""%lg %lg %lg"" read only 3 first columns into X,Y and EY; format = ""%lg %lg %lg %lg"" read only 4 first columns into X,Y,EX,EY. For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower.; In case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ~TGraphErrors(); TGraphErrors default destructor. void Apply(TF1* f); apply function to all the data points; y = f(x,y). The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. voi",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:18147,Availability,error,error,18147,"ding input from filename; filename is assumed to contain at least 3 columns of numbers; convention for format (default=""%lg %lg %lg %lg); format = ""%lg %lg"" read only 2 first columns into X,Y; format = ""%lg %lg %lg"" read only 3 first columns into X,Y and EY; format = ""%lg %lg %lg %lg"" read only 4 first columns into X,Y,EX,EY. For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower.; In case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ~TGraphErrors(); TGraphErrors default destructor. void Apply(TF1* f); apply function to all the data points; y = f(x,y). The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. voi",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:18180,Availability,error,errors,18180,"ding input from filename; filename is assumed to contain at least 3 columns of numbers; convention for format (default=""%lg %lg %lg %lg); format = ""%lg %lg"" read only 2 first columns into X,Y; format = ""%lg %lg %lg"" read only 3 first columns into X,Y and EY; format = ""%lg %lg %lg %lg"" read only 4 first columns into X,Y,EX,EY. For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower.; In case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ~TGraphErrors(); TGraphErrors default destructor. void Apply(TF1* f); apply function to all the data points; y = f(x,y). The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. voi",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:18224,Availability,error,errors,18224,"rmat (default=""%lg %lg %lg %lg); format = ""%lg %lg"" read only 2 first columns into X,Y; format = ""%lg %lg %lg"" read only 3 first columns into X,Y and EY; format = ""%lg %lg %lg %lg"" read only 4 first columns into X,Y,EX,EY. For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower.; In case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ~TGraphErrors(); TGraphErrors default destructor. void Apply(TF1* f); apply function to all the data points; y = f(x,y). The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the ran",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:18316,Availability,error,error,18316,"t columns into X,Y and EY; format = ""%lg %lg %lg %lg"" read only 4 first columns into X,Y,EX,EY. For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower.; In case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ~TGraphErrors(); TGraphErrors default destructor. void Apply(TF1* f); apply function to all the data points; y = f(x,y). The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along ",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:18774,Availability,error,errors,18774,". ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower.; In case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ~TGraphErrors(); TGraphErrors default destructor. void Apply(TF1* f); apply function to all the data points; y = f(x,y). The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:19118,Availability,error,errors,19118," The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with erro",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:19350,Availability,error,error,19350,"ggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on ",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:19475,Availability,error,error,19475,"ields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void Se",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:19604,Availability,error,error,19604,"e(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an obje",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:19732,Availability,error,error,19732,"egin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * Get",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:19861,Availability,error,error,19861,"orAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene ",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:19989,Availability,error,error,19989,"eviously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:05; This page has been automatically",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:20068,Availability,error,errors,20068," function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation o",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:20179,Availability,error,error,20179,"h errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:20242,Availability,error,errors,20242,"h errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:9810,Deployability,TOGGLE,TOGGLE,9810,"ill::ResetAttFill(Option_t* option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); virtual voidTAttMarker::ResetAttMarker(Option_t* toption = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTAttMarker::SaveMarkerAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t sizdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); virtual voidTGraph::Set(Int_t n); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGraph::SetEditable(Bool_t editable = kTRUE)TOGGLE GETTER ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTGraph::SetHistogram(TH1F* h); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTGraph::SetMaximum(Double_t maximum = -1111)MENU ; virtual voidTGraph::SetMinimum(Double_t minimum = -1111)MENU ; virtual voi",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:18682,Deployability,release,release,18682,"rgument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower.; In case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ~TGraphErrors(); TGraphErrors default destructor. void Apply(TF1* f); apply function to all the data points; y = f(x,y). The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t G",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:12802,Energy Efficiency,Allocate,Allocate,12802,"const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0, const Double_t* ey = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**Allocate(Int_t size); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidCopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tCopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tCtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tDoMerge(const TGraph* g); Double_t**TGraph::ExpandAndCopy(Int_t size, Int_t iend); virtual voidFillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidTObject::MakeZombie(); Double_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidSwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGraph::(anonymous)TGraph::kClipFrame; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:12842,Energy Efficiency,Allocate,AllocateArrays,12842,"const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0, const Double_t* ey = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**Allocate(Int_t size); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidCopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tCopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tCtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tDoMerge(const TGraph* g); Double_t**TGraph::ExpandAndCopy(Int_t size, Int_t iend); virtual voidFillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidTObject::MakeZombie(); Double_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidSwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGraph::(anonymous)TGraph::kClipFrame; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:18891,Energy Efficiency,allocate,allocate,18891,"case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ~TGraphErrors(); TGraphErrors default destructor. void Apply(TF1* f); apply function to all the data points; y = f(x,y). The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at ",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:20700,Energy Efficiency,Allocate,Allocate,20700,"h errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:6415,Modifiability,Inherit,InheritsFrom,6415,"ize_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; Double_tTGraph::GetMaximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTGraph::LeastSquareFit(Int_t m, Double_t* a, Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::Lea",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:6481,Modifiability,Inherit,InheritsFrom,6481,":GetMarkerStyle() const; Double_tTGraph::GetMaximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTGraph::LeastSquareFit(Int_t m, Double_t* a, Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::LeastSquareLinearFit(Int_t n, Double_t& a0, Double_t& a1, Int_t& ifai",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:15398,Modifiability,Inherit,Inheritance,15398,"t*fEX[fNpoints] array of X errors; Double_t*fEY[fNpoints] array of Y errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphErrors(); TGraphErrors default constructor. TGraphErrors(Int_t n); TGraphErrors normal constructor. the arrays are preset to zero. TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0, const Double_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vex, const TVectorF& vey); constructor with four vectors of floats in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vex and vey.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphErrors(const TVectorD& vx, const TVecto",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:15411,Modifiability,Inherit,Inherited,15411,"t*fEX[fNpoints] array of X errors; Double_t*fEY[fNpoints] array of Y errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphErrors(); TGraphErrors default constructor. TGraphErrors(Int_t n); TGraphErrors normal constructor. the arrays are preset to zero. TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0, const Double_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vex, const TVectorF& vey); constructor with four vectors of floats in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vex and vey.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphErrors(const TVectorD& vx, const TVecto",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:389,Performance,perform,performed,389,". TGraphErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphErrors. class TGraphErrors: public TGraph. TGraphErrors class; A TGraphErrors is a TGraph with error bars. The TGraphErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. virtual~TGraphErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); static Int_tCalculateScanfFields(const char* fmt); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tTGraph::CompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareRadius(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareX(const TGraph* gr, Int_t left, Int_t right); st",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:19074,Performance,perform,perform,19074," The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with erro",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:17562,Safety,avoid,avoid,17562,"coord from vy; and the errors from vectors vex and vey.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphErrors(const TGraphErrors& gr); TGraphErrors copy constructor. TGraphErrors& operator=(const TGraphErrors& gr); TGraphErrors assignment operator. TGraphErrors(const TH1* h); TGraphErrors constructor importing its parameters from the TH1 object passed as argument. TGraphErrors(const char* filename, const char* format = ""%lg %lg %lg %lg"", Option_t* option = """"); GraphErrors constructor reading input from filename; filename is assumed to contain at least 3 columns of numbers; convention for format (default=""%lg %lg %lg %lg); format = ""%lg %lg"" read only 2 first columns into X,Y; format = ""%lg %lg %lg"" read only 3 first columns into X,Y and EY; format = ""%lg %lg %lg %lg"" read only 4 first columns into X,Y,EX,EY. For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower.; In case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ~TGraphErrors(); TGraphErrors default destructor. void Apply(TF1* f); apply function to all the data points; y = f(x,y). The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. voi",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:6305,Security,Hash,Hash,6305,"th() const; TList*TGraph::GetListOfFunctions() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; Double_tTGraph::GetMaximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtu",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:11686,Testability,Test,TestBit,11686,"Graph::SetMaximum(Double_t maximum = -1111)MENU ; virtual voidTGraph::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidSetPointError(Double_t ex, Double_t ey); virtual voidSetPointError(Int_t i, Double_t ex, Double_t ey); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphErrors(); TGraphErrors(Int_t n); TGraphErrors(const TGraphErrors& gr); TGraphErrors(const TH1* h); TGraphErrors(const char* filename, const char* format = ""%lg %lg %lg %lg"", Option_t* option = """"); TGraphErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vex, const TVectorF& vey); TGraphErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vex, const TVectorD& vey); TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0, const Double_t* ey = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Doubl",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:11725,Testability,Test,TestBits,11725,"111)MENU ; virtual voidTGraph::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidSetPointError(Double_t ex, Double_t ey); virtual voidSetPointError(Int_t i, Double_t ex, Double_t ey); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphErrors(); TGraphErrors(Int_t n); TGraphErrors(const TGraphErrors& gr); TGraphErrors(const TH1* h); TGraphErrors(const char* filename, const char* format = ""%lg %lg %lg %lg"", Option_t* option = """"); TGraphErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vex, const TVectorF& vey); TGraphErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vex, const TVectorD& vey); TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0, const Double_t* ey = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:591,Usability,Simpl,Simple,591,". TGraphErrors. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TGraphErrors. class TGraphErrors: public TGraph. TGraphErrors class; A TGraphErrors is a TGraph with error bars. The TGraphErrors painting is performed thanks to the; TGraphPainter; class. All details about the various painting options are given in; this class. The picture below gives an example:. Picture; Source. {; c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c1;; } . Function Members (Methods); public:. virtual~TGraphErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); static Int_tCalculateScanfFields(const char* fmt); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tTGraph::CompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareRadius(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareX(const TGraph* gr, Int_t left, Int_t right); st",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphErrors.html:1621,Usability,Clear,Clear,1621," virtual~TGraphErrors(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); static Int_tCalculateScanfFields(const char* fmt); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tTGraph::CompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareRadius(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareX(const TGraph* gr, Int_t left, Int_t right); st",MatchSource.WIKI,root/html604/TGraphErrors.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphErrors.html
https://root.cern/root/html604/TGraphNode.html:1414,Availability,Error,Error,1414," virtual~TGraphNode(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidCreateGVNode(GVizAgraph_t* gv); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Lo",MatchSource.WIKI,root/html604/TGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphNode.html
https://root.cern/root/html604/TGraphNode.html:1543,Availability,error,error,1543,"st; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidCreateGVNode(GVizAgraph_t* gv); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; GVizAgnode_t*GetGVNode(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Short_tT",MatchSource.WIKI,root/html604/TGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphNode.html
https://root.cern/root/html604/TGraphNode.html:1627,Availability,error,error,1627,"se(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidCreateGVNode(GVizAgraph_t* gv); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; GVizAgnode_t*GetGVNode(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtua",MatchSource.WIKI,root/html604/TGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphNode.html
https://root.cern/root/html604/TGraphNode.html:3035,Modifiability,Inherit,InheritsFrom,3035,"r_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; GVizAgnode_t*GetGVNode(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual Color_tTAttText::GetTextColor() const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; voidLayout(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttText::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t s",MatchSource.WIKI,root/html604/TGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphNode.html
https://root.cern/root/html604/TGraphNode.html:3101,Modifiability,Inherit,InheritsFrom,3101,"lStyle() const; GVizAgnode_t*GetGVNode(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual Color_tTAttText::GetTextColor() const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; voidLayout(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttText::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObjec",MatchSource.WIKI,root/html604/TGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphNode.html
https://root.cern/root/html604/TGraphNode.html:8926,Modifiability,Inherit,Inheritance,8926,":kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; GVizAgnode_t*fGVNodeGraphviz node; Double_tfHNode height; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TStringTNamed::fNameobject identifier; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Double_tfWNode width; Double_tfXNode's center X coordinate; Double_tfYNode's center Y coordinate. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphNode(); Graph node default constructor. TGraphNode(const char* name, const char* title = """"); Graph node normal constructor. ~TGraphNode(); Graph Node default destructor. void CreateGVNode(GVizAgraph_t* gv); Create the GraphViz node into the GraphViz data structure gv. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a node. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. void Layout(); Layout this node in the GraphViz space. This is done after gvLayout; has been performed. void Paint(Option_t* option = """"); Paint this node with its current attributes. void SavePrimitive(ostream& , Option_t* ); Save primitive as a C++ statement(s) on output stream out. void SaveAttributes(ostream& ); Save attributes as a C++ statement(s) on output stream out; called by TGraphStruct::SavePrimitive. void Streamer(TBuffer& ). TGraphNode(). void SetGVNode(GVizAgnode_t* ",MatchSource.WIKI,root/html604/TGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphNode.html
https://root.cern/root/html604/TGraphNode.html:8939,Modifiability,Inherit,Inherited,8939,":kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; GVizAgnode_t*fGVNodeGraphviz node; Double_tfHNode height; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TStringTNamed::fNameobject identifier; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Double_tfWNode width; Double_tfXNode's center X coordinate; Double_tfYNode's center Y coordinate. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphNode(); Graph node default constructor. TGraphNode(const char* name, const char* title = """"); Graph node normal constructor. ~TGraphNode(); Graph Node default destructor. void CreateGVNode(GVizAgraph_t* gv); Create the GraphViz node into the GraphViz data structure gv. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a node. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. void Layout(); Layout this node in the GraphViz space. This is done after gvLayout; has been performed. void Paint(Option_t* option = """"); Paint this node with its current attributes. void SavePrimitive(ostream& , Option_t* ); Save primitive as a C++ statement(s) on output stream out. void SaveAttributes(ostream& ); Save attributes as a C++ statement(s) on output stream out; called by TGraphStruct::SavePrimitive. void Streamer(TBuffer& ). TGraphNode(). void SetGVNode(GVizAgnode_t* ",MatchSource.WIKI,root/html604/TGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphNode.html
https://root.cern/root/html604/TGraphNode.html:9559,Performance,perform,performed,9559,"VNodeGraphviz node; Double_tfHNode height; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TStringTNamed::fNameobject identifier; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Double_tfWNode width; Double_tfXNode's center X coordinate; Double_tfYNode's center Y coordinate. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphNode(); Graph node default constructor. TGraphNode(const char* name, const char* title = """"); Graph node normal constructor. ~TGraphNode(); Graph Node default destructor. void CreateGVNode(GVizAgraph_t* gv); Create the GraphViz node into the GraphViz data structure gv. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a node. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. void Layout(); Layout this node in the GraphViz space. This is done after gvLayout; has been performed. void Paint(Option_t* option = """"); Paint this node with its current attributes. void SavePrimitive(ostream& , Option_t* ); Save primitive as a C++ statement(s) on output stream out. void SaveAttributes(ostream& ); Save attributes as a C++ statement(s) on output stream out; called by TGraphStruct::SavePrimitive. void Streamer(TBuffer& ). TGraphNode(). void SetGVNode(GVizAgnode_t* gvn); {fGVNode = gvn;}. void SetTextAngle(Float_t ); {;}. GVizAgnode_t * GetGVNode(); {return fGVNode;}. » Author: Olivier Couet 13/07/09 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphNode.html
https://root.cern/root/html604/TGraphNode.html:2925,Security,Hash,Hash,2925,"ct* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; GVizAgnode_t*GetGVNode(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual Color_tTAttText::GetTextColor() const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; voidLayout(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttText::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::",MatchSource.WIKI,root/html604/TGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphNode.html
https://root.cern/root/html604/TGraphNode.html:6905,Testability,Test,TestBit,6905,"torOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); voidSetGVNode(GVizAgnode_t* gvn); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidSetTextAngle(Float_t); virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextColorAlpha(Color_t tcolor, Float_t talpha); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphNode(); TGraphNode(const TGraphNode&); TGraphNode(const char* name, const char* title = """"); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphNode.html
https://root.cern/root/html604/TGraphNode.html:6944,Testability,Test,TestBits,6944,"torOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); voidSetGVNode(GVizAgnode_t* gvn); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidSetTextAngle(Float_t); virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextColorAlpha(Color_t tcolor, Float_t talpha); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphNode(); TGraphNode(const TGraphNode&); TGraphNode(const char* name, const char* title = """"); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphNode.html
https://root.cern/root/html604/TGraphNode.html:737,Usability,Clear,Clear,737," virtual~TGraphNode(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidCreateGVNode(GVizAgraph_t* gv); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Lo",MatchSource.WIKI,root/html604/TGraphNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphNode.html
https://root.cern/root/html604/TGraphPainter.html:415,Availability,error,error,415,". TGraphPainter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HISTPAINTER; » TGraphPainter. class TGraphPainter: public TVirtualGraphPainter. The graph painter class. Introduction; Graphs' plotting options; Exclusion graphs; Graphs with error bars. TGraphErrors; TGraphAsymmErrors; TGraphBentErrors. TGraphPolar options. Introduction; Graphs are drawn via the painter TGraphPainter class. This class; implements techniques needed to display the various kind of; graphs i.e.: TGraph, TGraphErrors,; TGraphBentErrors and TGraphAsymmErrors. To draw a graph ""graph"" it's enough to do:. graph->Draw(""AL"");. The option ""AL"" in the Draw() method means:. The axis should be drawn (option ""A""),; The graph should be drawn as a simple line (option ""L""). By default a graph is drawn in the current pad in the current coordinate system.; To define a suitable coordinate system and draw the axis the option; ""A"" must be specified. TGraphPainter offers many options to paint the various kind of graphs. It is separated from the graph classes so that one can have graphs without the; graphics overhead, for example in a batch program. When a displayed graph is modified, there is no need to call; Draw() again; the image will be refreshed the next time the; pad will be updated.; A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. ""A""; Axis are drawn around the graph. ""L""; A simple polyline is drawn. ""F""; A fill area is drawn ('CF' draw a smoothed fill area). ""C""; A smooth Curve is drawn. ""*""; A Star is plotted at each point. ""P""; The current marker is plotted at each point. ""B""; A Bar chart is drawn. ""1""; When a graph is drawn as a bar chart, this option makes ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:5093,Availability,error,error,5093,"usiongraph() {; // Draw three graphs with an exclusion zone.; //Author: Olivier Couet. TCanvas *c1 = new TCanvas(""c1"",""Exclusion graphs examples"",200,10,600,400);; c1->SetGrid();. TMultiGraph *mg = new TMultiGraph();; mg->SetTitle(""Exclusion graphs"");. const Int_t n = 35;; Double_t x1[n], x2[n], x3[n], y1[n], y2[n], y3[n];; for (Int_t i=0;i<n;i++) {; x1[i] = i*0.1;; x2[i] = x1[i];; x3[i] = x1[i]+.5;; y1[i] = 10*sin(x1[i]);; y2[i] = 10*cos(x1[i]);; y3[i] = 10*sin(x1[i])-2;; }. TGraph *gr1 = new TGraph(n,x1,y1);; gr1->SetLineColor(2);; gr1->SetLineWidth(1504);; gr1->SetFillStyle(3005);. TGraph *gr2 = new TGraph(n,x2,y2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:5123,Availability,avail,available,5123,"usiongraph() {; // Draw three graphs with an exclusion zone.; //Author: Olivier Couet. TCanvas *c1 = new TCanvas(""c1"",""Exclusion graphs examples"",200,10,600,400);; c1->SetGrid();. TMultiGraph *mg = new TMultiGraph();; mg->SetTitle(""Exclusion graphs"");. const Int_t n = 35;; Double_t x1[n], x2[n], x3[n], y1[n], y2[n], y3[n];; for (Int_t i=0;i<n;i++) {; x1[i] = i*0.1;; x2[i] = x1[i];; x3[i] = x1[i]+.5;; y1[i] = 10*sin(x1[i]);; y2[i] = 10*cos(x1[i]);; y3[i] = 10*sin(x1[i])-2;; }. TGraph *gr1 = new TGraph(n,x1,y1);; gr1->SetLineColor(2);; gr1->SetLineWidth(1504);; gr1->SetFillStyle(3005);. TGraph *gr2 = new TGraph(n,x2,y2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:5155,Availability,error,error,5155,"usiongraph() {; // Draw three graphs with an exclusion zone.; //Author: Olivier Couet. TCanvas *c1 = new TCanvas(""c1"",""Exclusion graphs examples"",200,10,600,400);; c1->SetGrid();. TMultiGraph *mg = new TMultiGraph();; mg->SetTitle(""Exclusion graphs"");. const Int_t n = 35;; Double_t x1[n], x2[n], x3[n], y1[n], y2[n], y3[n];; for (Int_t i=0;i<n;i++) {; x1[i] = i*0.1;; x2[i] = x1[i];; x3[i] = x1[i]+.5;; y1[i] = 10*sin(x1[i]);; y2[i] = 10*cos(x1[i]);; y3[i] = 10*sin(x1[i])-2;; }. TGraph *gr1 = new TGraph(n,x1,y1);; gr1->SetLineColor(2);; gr1->SetLineWidth(1504);; gr1->SetFillStyle(3005);. TGraph *gr2 = new TGraph(n,x2,y2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:5281,Availability,error,error,5281,"c1"",""Exclusion graphs examples"",200,10,600,400);; c1->SetGrid();. TMultiGraph *mg = new TMultiGraph();; mg->SetTitle(""Exclusion graphs"");. const Int_t n = 35;; Double_t x1[n], x2[n], x3[n], y1[n], y2[n], y3[n];; for (Int_t i=0;i<n;i++) {; x1[i] = i*0.1;; x2[i] = x1[i];; x3[i] = x1[i]+.5;; y1[i] = 10*sin(x1[i]);; y2[i] = 10*cos(x1[i]);; y3[i] = 10*sin(x1[i])-2;; }. TGraph *gr1 = new TGraph(n,x1,y1);; gr1->SetLineColor(2);; gr1->SetLineWidth(1504);; gr1->SetFillStyle(3005);. TGraph *gr2 = new TGraph(n,x2,y2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same p",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:5362,Availability,error,error,5362,"h *mg = new TMultiGraph();; mg->SetTitle(""Exclusion graphs"");. const Int_t n = 35;; Double_t x1[n], x2[n], x3[n], y1[n], y2[n], y3[n];; for (Int_t i=0;i<n;i++) {; x1[i] = i*0.1;; x2[i] = x1[i];; x3[i] = x1[i]+.5;; y1[i] = 10*sin(x1[i]);; y2[i] = 10*cos(x1[i]);; y3[i] = 10*sin(x1[i])-2;; }. TGraph *gr1 = new TGraph(n,x1,y1);; gr1->SetLineColor(2);; gr1->SetLineWidth(1504);; gr1->SetFillStyle(3005);. TGraph *gr2 = new TGraph(n,x2,y2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range alon",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:5459,Availability,error,error,5459,"n], y1[n], y2[n], y3[n];; for (Int_t i=0;i<n;i++) {; x1[i] = i*0.1;; x2[i] = x1[i];; x3[i] = x1[i]+.5;; y1[i] = 10*sin(x1[i]);; y2[i] = 10*cos(x1[i]);; y3[i] = 10*sin(x1[i])-2;; }. TGraph *gr1 = new TGraph(n,x1,y1);; gr1->SetLineColor(2);; gr1->SetLineWidth(1504);; gr1->SetFillStyle(3005);. TGraph *gr2 = new TGraph(n,x2,y2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outsid",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:5576,Availability,error,error,5576,"*sin(x1[i]);; y2[i] = 10*cos(x1[i]);; y3[i] = 10*sin(x1[i])-2;; }. TGraph *gr1 = new TGraph(n,x1,y1);; gr1->SetLineColor(2);; gr1->SetLineWidth(1504);; gr1->SetFillStyle(3005);. TGraph *gr2 = new TGraph(n,x2,y2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:5662,Availability,error,error,5662,"; gr1->SetLineColor(2);; gr1->SetLineWidth(1504);; gr1->SetFillStyle(3005);. TGraph *gr2 = new TGraph(n,x2,y2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:5710,Availability,error,errors,5710,"h *gr2 = new TGraph(n,x2,y2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like o",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:5737,Availability,error,errors,5737,"h *gr2 = new TGraph(n,x2,y2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like o",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:5766,Availability,error,errors,5766,"h *gr2 = new TGraph(n,x2,y2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like o",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:5883,Availability,error,error,5883,"TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:5992,Availability,error,errors,5992,"lColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gSty",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:6046,Availability,error,errors,6046,"lColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gSty",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:6352,Availability,error,error,6352,"izontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:6397,Availability,error,error,6397,"n at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:6507,Availability,Error,Error,6507,"rker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:6602,Availability,error,error,6602,"he error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:6690,Availability,error,error,6690,"draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");;",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:6708,Availability,Error,Error,6708,"n with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""0"" shows the error bars for data points o",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:6938,Availability,error,error,6938,"hemselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""0"" shows the error bars for data points outside range. Picture; Source. {; TCanvas *c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; TGraphE",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:6973,Availability,error,error,6973,"mpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""0"" shows the error bars for data points outside range. Picture; Source. {; TCanvas *c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; TGraphErrors tg(3,x,y,err_x,err_y);; c48->Divide(2,1);; ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:7066,Availability,error,error,7066,"c errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""0"" shows the error bars for data points outside range. Picture; Source. {; TCanvas *c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; TGraphErrors tg(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg.Draw(""PC"");; c48->cd(2); gPad->Dr",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:7205,Availability,error,error,7205,"es plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""0"" shows the error bars for data points outside range. Picture; Source. {; TCanvas *c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; TGraphErrors tg(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg.Draw(""PC"");; c48->cd(2); gPad->DrawFrame(0,0,4,8); tg.Draw(""0PC"");; return c48;; }; The option ""3"" shows the errors as a band. Picture; Source. {; TCanvas *c41 = new TCanvas(""c",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:7221,Availability,error,errors,7221,"point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""0"" shows the error bars for data points outside range. Picture; Source. {; TCanvas *c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; TGraphErrors tg(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg.Draw(""PC"");; c48->cd(2); gPad->DrawFrame(0,0,4,8); tg.Draw(""0PC"");; return c48;; }; The option ""3"" shows the errors as a band. Picture; Source. {; TCanvas *c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:7293,Availability,error,errors,7293,"point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""0"" shows the error bars for data points outside range. Picture; Source. {; TCanvas *c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; TGraphErrors tg(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg.Draw(""PC"");; c48->cd(2); gPad->DrawFrame(0,0,4,8); tg.Draw(""0PC"");; return c48;; }; The option ""3"" shows the errors as a band. Picture; Source. {; TCanvas *c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:7344,Availability,error,errors,7344,"point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""0"" shows the error bars for data points outside range. Picture; Source. {; TCanvas *c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; TGraphErrors tg(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg.Draw(""PC"");; c48->cd(2); gPad->DrawFrame(0,0,4,8); tg.Draw(""0PC"");; return c48;; }; The option ""3"" shows the errors as a band. Picture; Source. {; TCanvas *c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:7699,Availability,error,error,7699,"the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""0"" shows the error bars for data points outside range. Picture; Source. {; TCanvas *c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; TGraphErrors tg(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg.Draw(""PC"");; c48->cd(2); gPad->DrawFrame(0,0,4,8); tg.Draw(""0PC"");; return c48;; }; The option ""3"" shows the errors as a band. Picture; Source. {; TCanvas *c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetFillColor(4);; ge->SetFillStyle(3010);; ge->Draw(""a3"");; return c41;; }; The option ""4"" is similar to the option ""3"" except that the band; is smoothed. As the following picture shows, this option should be; used carefully because the smoothing",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:8120,Availability,error,errors,8120,"; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""0"" shows the error bars for data points outside range. Picture; Source. {; TCanvas *c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; TGraphErrors tg(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg.Draw(""PC"");; c48->cd(2); gPad->DrawFrame(0,0,4,8); tg.Draw(""0PC"");; return c48;; }; The option ""3"" shows the errors as a band. Picture; Source. {; TCanvas *c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetFillColor(4);; ge->SetFillStyle(3010);; ge->Draw(""a3"");; return c41;; }; The option ""4"" is similar to the option ""3"" except that the band; is smoothed. As the following picture shows, this option should be; used carefully because the smoothing algorithm may show some (huge); ""bouncing"" effects. In some cases it looks nicer than option ""3""; (because it is smooth) but it can be misleading. Picture; Source. {; TCanvas *c42 = new TCanvas(""c42"",""c42"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetFillColor(6);;",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:9247,Availability,error,errors,9247,"; TCanvas *c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetFillColor(4);; ge->SetFillStyle(3010);; ge->Draw(""a3"");; return c41;; }; The option ""4"" is similar to the option ""3"" except that the band; is smoothed. As the following picture shows, this option should be; used carefully because the smoothing algorithm may show some (huge); ""bouncing"" effects. In some cases it looks nicer than option ""3""; (because it is smooth) but it can be misleading. Picture; Source. {; TCanvas *c42 = new TCanvas(""c42"",""c42"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetFillColor(6);; ge->SetFillStyle(3005);; ge->Draw(""a4"");; return c42;; }; The following example shows how the option ""[]"" can be used to superimpose; systematic errors on top of a graph with statistical errors. Picture; Source. {; TCanvas *c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);. double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};. // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};. // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};. // Now draw data set (1). // We first have to draw it only with the stat errors; TGraphErrors *graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph1_sys = new TGraphErrors(5, x, py1,",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:9289,Availability,error,errors,9289,"; TCanvas *c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetFillColor(4);; ge->SetFillStyle(3010);; ge->Draw(""a3"");; return c41;; }; The option ""4"" is similar to the option ""3"" except that the band; is smoothed. As the following picture shows, this option should be; used carefully because the smoothing algorithm may show some (huge); ""bouncing"" effects. In some cases it looks nicer than option ""3""; (because it is smooth) but it can be misleading. Picture; Source. {; TCanvas *c42 = new TCanvas(""c42"",""c42"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetFillColor(6);; ge->SetFillStyle(3005);; ge->Draw(""a4"");; return c42;; }; The following example shows how the option ""[]"" can be used to superimpose; systematic errors on top of a graph with statistical errors. Picture; Source. {; TCanvas *c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);. double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};. // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};. // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};. // Now draw data set (1). // We first have to draw it only with the stat errors; TGraphErrors *graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph1_sys = new TGraphErrors(5, x, py1,",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:9509,Availability,error,errors,9509,"is similar to the option ""3"" except that the band; is smoothed. As the following picture shows, this option should be; used carefully because the smoothing algorithm may show some (huge); ""bouncing"" effects. In some cases it looks nicer than option ""3""; (because it is smooth) but it can be misleading. Picture; Source. {; TCanvas *c42 = new TCanvas(""c42"",""c42"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetFillColor(6);; ge->SetFillStyle(3005);; ge->Draw(""a4"");; return c42;; }; The following example shows how the option ""[]"" can be used to superimpose; systematic errors on top of a graph with statistical errors. Picture; Source. {; TCanvas *c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);. double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};. // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};. // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};. // Now draw data set (1). // We first have to draw it only with the stat errors; TGraphErrors *graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");. // Now draw data set (2). // We first have to draw it only with the stat errors; TGraphErrors *graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph2_sys = new TGraphErrors(5, x, y2, zero",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:9699,Availability,error,errors,9699,"bouncing"" effects. In some cases it looks nicer than option ""3""; (because it is smooth) but it can be misleading. Picture; Source. {; TCanvas *c42 = new TCanvas(""c42"",""c42"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetFillColor(6);; ge->SetFillStyle(3005);; ge->Draw(""a4"");; return c42;; }; The following example shows how the option ""[]"" can be used to superimpose; systematic errors on top of a graph with statistical errors. Picture; Source. {; TCanvas *c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);. double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};. // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};. // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};. // Now draw data set (1). // We first have to draw it only with the stat errors; TGraphErrors *graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");. // Now draw data set (2). // We first have to draw it only with the stat errors; TGraphErrors *graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; return c43;; }; TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors; defined along X and Y are not symmetric: The left and righ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:9928,Availability,error,errors,9928," 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetFillColor(6);; ge->SetFillStyle(3005);; ge->Draw(""a4"");; return c42;; }; The following example shows how the option ""[]"" can be used to superimpose; systematic errors on top of a graph with statistical errors. Picture; Source. {; TCanvas *c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);. double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};. // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};. // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};. // Now draw data set (1). // We first have to draw it only with the stat errors; TGraphErrors *graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");. // Now draw data set (2). // We first have to draw it only with the stat errors; TGraphErrors *graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; return c43;; }; TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors; defined along X and Y are not symmetric: The left and right errors are; different along X and the bottom and up errors are different along Y. Picture; Source. {; TCanvas *c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; dou",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:10095,Availability,error,errors,10095,";; ge->SetFillColor(6);; ge->SetFillStyle(3005);; ge->Draw(""a4"");; return c42;; }; The following example shows how the option ""[]"" can be used to superimpose; systematic errors on top of a graph with statistical errors. Picture; Source. {; TCanvas *c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);. double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};. // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};. // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};. // Now draw data set (1). // We first have to draw it only with the stat errors; TGraphErrors *graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");. // Now draw data set (2). // We first have to draw it only with the stat errors; TGraphErrors *graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; return c43;; }; TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors; defined along X and Y are not symmetric: The left and right errors are; different along X and the bottom and up errors are different along Y. Picture; Source. {; TCanvas *c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1,",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:10273,Availability,error,errors,10273,"e. {; TCanvas *c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);. double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};. // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};. // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};. // Now draw data set (1). // We first have to draw it only with the stat errors; TGraphErrors *graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");. // Now draw data set (2). // We first have to draw it only with the stat errors; TGraphErrors *graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; return c43;; }; TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors; defined along X and Y are not symmetric: The left and right errors are; different along X and the bottom and up errors are different along Y. Picture; Source. {; TCanvas *c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; TGraphAsymmErrors* gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetFillColor(2);; gae->SetFillStyle(3001);; gae->Draw(""a2"");; gae->Draw(""p"");; return c44;; }; TGraphBentErrors; A TGraphBentErrors is l",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:10439,Availability,error,errors,10439," {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};. // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};. // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};. // Now draw data set (1). // We first have to draw it only with the stat errors; TGraphErrors *graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");. // Now draw data set (2). // We first have to draw it only with the stat errors; TGraphErrors *graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; return c43;; }; TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors; defined along X and Y are not symmetric: The left and right errors are; different along X and the bottom and up errors are different along Y. Picture; Source. {; TCanvas *c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; TGraphAsymmErrors* gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetFillColor(2);; gae->SetFillStyle(3001);; gae->Draw(""a2"");; gae->Draw(""p"");; return c44;; }; TGraphBentErrors; A TGraphBentErrors is like a TGraphAsymmErrors.; An extra parameter allows to bend the error bars to better see them; when several gra",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:10629,Availability,error,errors,10629,"; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};. // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};. // Now draw data set (1). // We first have to draw it only with the stat errors; TGraphErrors *graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");. // Now draw data set (2). // We first have to draw it only with the stat errors; TGraphErrors *graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; return c43;; }; TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors; defined along X and Y are not symmetric: The left and right errors are; different along X and the bottom and up errors are different along Y. Picture; Source. {; TCanvas *c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; TGraphAsymmErrors* gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetFillColor(2);; gae->SetFillStyle(3001);; gae->Draw(""a2"");; gae->Draw(""p"");; return c44;; }; TGraphBentErrors; A TGraphBentErrors is like a TGraphAsymmErrors.; An extra parameter allows to bend the error bars to better see them; when several graphs are drawn on the same plot. Picture; Source. {; TCanvas *c45 = new TCanvas(""c45"",""c45"",200,10,600,400);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:10697,Availability,error,errors,10697,"; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};. // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};. // Now draw data set (1). // We first have to draw it only with the stat errors; TGraphErrors *graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");. // Now draw data set (2). // We first have to draw it only with the stat errors; TGraphErrors *graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; return c43;; }; TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors; defined along X and Y are not symmetric: The left and right errors are; different along X and the bottom and up errors are different along Y. Picture; Source. {; TCanvas *c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; TGraphAsymmErrors* gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetFillColor(2);; gae->SetFillStyle(3001);; gae->Draw(""a2"");; gae->Draw(""p"");; return c44;; }; TGraphBentErrors; A TGraphBentErrors is like a TGraphAsymmErrors.; An extra parameter allows to bend the error bars to better see them; when several graphs are drawn on the same plot. Picture; Source. {; TCanvas *c45 = new TCanvas(""c45"",""c45"",200,10,600,400);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:10749,Availability,error,errors,10749,"; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};. // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};. // Now draw data set (1). // We first have to draw it only with the stat errors; TGraphErrors *graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");. // Now draw data set (2). // We first have to draw it only with the stat errors; TGraphErrors *graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; return c43;; }; TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors; defined along X and Y are not symmetric: The left and right errors are; different along X and the bottom and up errors are different along Y. Picture; Source. {; TCanvas *c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; TGraphAsymmErrors* gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetFillColor(2);; gae->SetFillStyle(3001);; gae->Draw(""a2"");; gae->Draw(""p"");; return c44;; }; TGraphBentErrors; A TGraphBentErrors is like a TGraphAsymmErrors.; An extra parameter allows to bend the error bars to better see them; when several graphs are drawn on the same plot. Picture; Source. {; TCanvas *c45 = new TCanvas(""c45"",""c45"",200,10,600,400);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:11375,Availability,error,error,11375,");. // Now we have to somehow depict the sys errors. TGraphErrors *graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; return c43;; }; TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors; defined along X and Y are not symmetric: The left and right errors are; different along X and the bottom and up errors are different along Y. Picture; Source. {; TCanvas *c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; TGraphAsymmErrors* gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetFillColor(2);; gae->SetFillStyle(3001);; gae->Draw(""a2"");; gae->Draw(""p"");; return c44;; }; TGraphBentErrors; A TGraphBentErrors is like a TGraphAsymmErrors.; An extra parameter allows to bend the error bars to better see them; when several graphs are drawn on the same plot. Picture; Source. {; TCanvas *c45 = new TCanvas(""c45"",""c45"",200,10,600,400);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; TGraphBentErrors *gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c45;; }; TGraphPolar options; The drawing options for the polar gra",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:12544,Availability,error,error,12544," = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; TGraphBentErrors *gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; return c45;; }; TGraphPolar options; The drawing options for the polar graphs are the following:. ""O""; Polar labels are drawn orthogonally to the polargram radius. ""P""; Polymarker are drawn at each point position. ""E""; Draw error bars. ""F""; Draw fill area (closed polygon). ""A""; Force axis redrawing even if a polargram already exists. ""N""; Disable the display of the polar labels. Picture; Source. {; TCanvas *c46 = new TCanvas(""c46"",""c46"",500,500);; TGraphPolar * grP1 = new TGraphPolar();; grP1->SetTitle(""TGraphPolar example"");. grP1->SetPoint(0, (1*TMath::Pi())/4., 0.05);; grP1->SetPoint(1, (2*TMath::Pi())/4., 0.10);; grP1->SetPoint(2, (3*TMath::Pi())/4., 0.15);; grP1->SetPoint(3, (4*TMath::Pi())/4., 0.20);; grP1->SetPoint(4, (5*TMath::Pi())/4., 0.25);; grP1->SetPoint(5, (6*TMath::Pi())/4., 0.30);; grP1->SetPoint(6, (7*TMath::Pi())/4., 0.35);; grP1->SetPoint(7, (8*TMath::Pi())/4., 0.40);. grP1->SetMarkerStyle(20);; grP1->SetMarkerSize(1.);; grP1->SetMarkerColor(4);; grP1->SetLineColor(4);; grP1->Draw(""ALP"");. // Update, otherwise GetPolargram returns 0; c46->Update();; grP1->GetPolargram()->SetToRadian();. return c46;; }; . Function Members (Methods); public:. virtual~TGraphPainter(); voidTObject::Abstract",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:14474,Availability,Error,Error,14474,,MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:14603,Availability,error,error,14603,"ad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidComputeLogs(Int_t npoints, Int_t opt); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Int_tDistancetoPrimitiveHelper(TGraph* theGraph, Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawPanelHelper(TGraph* theGraph); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExecuteEventHelper(TGraph* theGraph, Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual char*GetObjectInfoHelper(TGraph* theGraph, Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TVirtualGraphPainter*TVirtualGraphPainter::GetPainter(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const;",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:14687,Availability,error,error,14687,"lass(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidComputeLogs(Int_t npoints, Int_t opt); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Int_tDistancetoPrimitiveHelper(TGraph* theGraph, Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawPanelHelper(TGraph* theGraph); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExecuteEventHelper(TGraph* theGraph, Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual char*GetObjectInfoHelper(TGraph* theGraph, Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TVirtualGraphPainter*TVirtualGraphPainter::GetPainter(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() c",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:24383,Availability,error,errors,24383,"""P""; Idem with the current marker.; ; ""P0""; Idem with the current marker. Empty bins also drawn.; ; ""B""; A Bar chart with equidistant bins is drawn as fill areas (Contours are drawn).; ; ""][""; ""Cutoff"" style. When this option is selected together with H option, the; first and last vertical lines of the histogram are not drawn.; . . void PaintGraphAsymmErrors(TGraph* theGraph, Option_t* option). Paint this TGraphAsymmErrors with its current attributes.; . void PaintGraphBentErrors(TGraph* theGraph, Option_t* option). Paint this TGraphBentErrors with its current attributes.; . void PaintGraphErrors(TGraph* theGraph, Option_t* option). Paint this TGraphErrors with its current attributes.; . void PaintGraphPolar(TGraph* theGraph, Option_t* option). Paint this TGraphPolar with its current attributes.; . void PaintGraphQQ(TGraph* theGraph, Option_t* option). Paint this graphQQ. No options for the time being.; ; . void PaintGraphSimple(TGraph* theGraph, Option_t* option). Paint a simple graph, without errors bars.; ; . void PaintPolyLineHatches(TGraph* theGraph, Int_t n, const Double_t* x, const Double_t* y). Paint a polyline with hatches on one side showing an exclusion zone. x and y; are the the vectors holding the polyline and n the number of points in the; polyline and w the width of the hatches. w can be negative.; This method is not meant to be used directly. It is called automatically; according to the line style convention.; ; . void PaintStats(TGraph* theGraph, TF1* fit). Paint the statistics box with the fit info.; ; . void Smooth(TGraph* theGraph, Int_t npoints, Double_t* x, Double_t* y, Int_t drawtype). Smooth a curve given by N points.; ; The original code is from an underlaying routine for Draw based on the; CERN GD3 routine TVIPTE:; ; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; ; This method draws a smooth tangentially continuous curve through; the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)).; The curve is approximated by a poly",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:1433,Deployability,update,updated,1433,"otting options; Exclusion graphs; Graphs with error bars. TGraphErrors; TGraphAsymmErrors; TGraphBentErrors. TGraphPolar options. Introduction; Graphs are drawn via the painter TGraphPainter class. This class; implements techniques needed to display the various kind of; graphs i.e.: TGraph, TGraphErrors,; TGraphBentErrors and TGraphAsymmErrors. To draw a graph ""graph"" it's enough to do:. graph->Draw(""AL"");. The option ""AL"" in the Draw() method means:. The axis should be drawn (option ""A""),; The graph should be drawn as a simple line (option ""L""). By default a graph is drawn in the current pad in the current coordinate system.; To define a suitable coordinate system and draw the axis the option; ""A"" must be specified. TGraphPainter offers many options to paint the various kind of graphs. It is separated from the graph classes so that one can have graphs without the; graphics overhead, for example in a batch program. When a displayed graph is modified, there is no need to call; Draw() again; the image will be refreshed the next time the; pad will be updated.; A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. ""A""; Axis are drawn around the graph. ""L""; A simple polyline is drawn. ""F""; A fill area is drawn ('CF' draw a smoothed fill area). ""C""; A smooth Curve is drawn. ""*""; A Star is plotted at each point. ""P""; The current marker is plotted at each point. ""B""; A Bar chart is drawn. ""1""; When a graph is drawn as a bar chart, this option makes the bars start from; the bottom of the pad. By default they start at 0. ""X+""; The X-axis is drawn on the top side of the plot. ""Y+""; The Y-axis is drawn on the right side of the plot. Drawing options can be combined. In the following example the graph; is drawn as a smooth curve (option ""C"") with markers (option ""P"") and; with axes (option ""A""). Picture; Source. {; ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:1452,Deployability,update,updated,1452,"entErrors. TGraphPolar options. Introduction; Graphs are drawn via the painter TGraphPainter class. This class; implements techniques needed to display the various kind of; graphs i.e.: TGraph, TGraphErrors,; TGraphBentErrors and TGraphAsymmErrors. To draw a graph ""graph"" it's enough to do:. graph->Draw(""AL"");. The option ""AL"" in the Draw() method means:. The axis should be drawn (option ""A""),; The graph should be drawn as a simple line (option ""L""). By default a graph is drawn in the current pad in the current coordinate system.; To define a suitable coordinate system and draw the axis the option; ""A"" must be specified. TGraphPainter offers many options to paint the various kind of graphs. It is separated from the graph classes so that one can have graphs without the; graphics overhead, for example in a batch program. When a displayed graph is modified, there is no need to call; Draw() again; the image will be refreshed the next time the; pad will be updated.; A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. ""A""; Axis are drawn around the graph. ""L""; A simple polyline is drawn. ""F""; A fill area is drawn ('CF' draw a smoothed fill area). ""C""; A smooth Curve is drawn. ""*""; A Star is plotted at each point. ""P""; The current marker is plotted at each point. ""B""; A Bar chart is drawn. ""1""; When a graph is drawn as a bar chart, this option makes the bars start from; the bottom of the pad. By default they start at 0. ""X+""; The X-axis is drawn on the top side of the plot. ""Y+""; The Y-axis is drawn on the right side of the plot. Drawing options can be combined. In the following example the graph; is drawn as a smooth curve (option ""C"") with markers (option ""P"") and; with axes (option ""A""). Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",200,10,600,400);. c1->SetFillColor(42);; c1->SetGrid();. const ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:1581,Deployability,Update,Update,1581,"nter TGraphPainter class. This class; implements techniques needed to display the various kind of; graphs i.e.: TGraph, TGraphErrors,; TGraphBentErrors and TGraphAsymmErrors. To draw a graph ""graph"" it's enough to do:. graph->Draw(""AL"");. The option ""AL"" in the Draw() method means:. The axis should be drawn (option ""A""),; The graph should be drawn as a simple line (option ""L""). By default a graph is drawn in the current pad in the current coordinate system.; To define a suitable coordinate system and draw the axis the option; ""A"" must be specified. TGraphPainter offers many options to paint the various kind of graphs. It is separated from the graph classes so that one can have graphs without the; graphics overhead, for example in a batch program. When a displayed graph is modified, there is no need to call; Draw() again; the image will be refreshed the next time the; pad will be updated.; A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. ""A""; Axis are drawn around the graph. ""L""; A simple polyline is drawn. ""F""; A fill area is drawn ('CF' draw a smoothed fill area). ""C""; A smooth Curve is drawn. ""*""; A Star is plotted at each point. ""P""; The current marker is plotted at each point. ""B""; A Bar chart is drawn. ""1""; When a graph is drawn as a bar chart, this option makes the bars start from; the bottom of the pad. By default they start at 0. ""X+""; The X-axis is drawn on the top side of the plot. ""Y+""; The Y-axis is drawn on the right side of the plot. Drawing options can be combined. In the following example the graph; is drawn as a smooth curve (option ""C"") with markers (option ""P"") and; with axes (option ""A""). Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",200,10,600,400);. c1->SetFillColor(42);; c1->SetGrid();. const Int_t n = 20;; Double_t x[n], y[n];; for (Int_t i=0;i<n;i++) {; x[i] = i*",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:2862,Deployability,Update,Update,2862," as a bar chart, this option makes the bars start from; the bottom of the pad. By default they start at 0. ""X+""; The X-axis is drawn on the top side of the plot. ""Y+""; The Y-axis is drawn on the right side of the plot. Drawing options can be combined. In the following example the graph; is drawn as a smooth curve (option ""C"") with markers (option ""P"") and; with axes (option ""A""). Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",200,10,600,400);. c1->SetFillColor(42);; c1->SetGrid();. const Int_t n = 20;; Double_t x[n], y[n];; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2);; }; gr = new TGraph(n,x,y);; gr->SetLineColor(2);; gr->SetLineWidth(4);; gr->SetMarkerColor(4);; gr->SetMarkerSize(1.5);; gr->SetMarkerStyle(21);; gr->SetTitle(""Option ACP example"");; gr->GetXaxis()->SetTitle(""X title"");; gr->GetYaxis()->SetTitle(""Y title"");; gr->Draw(""ACP"");. // TCanvas::Update() draws the frame, after which one can change it; c1->Update();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; c1->Modified();; return c1;; }; The following macro shows the option ""B"" usage. It can be combined with the; option ""1"". Picture; Source. {; TCanvas *c47 = new TCanvas(""c47"",""c47"",200,10,600,400);; c47->Divide(1,2);; const Int_t n = 20;; Double_t x[n], y[n];; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2)-6;; }; gr = new TGraph(n,x,y);; gr->SetFillColor(38);; c47->cd(1); gr->Draw(""AB"");; c47->cd(2); gr->Draw(""AB1"");; return c47;; }; Exclusion graphs; When a graph is painted with the option ""C"" or ""L"" it is; possible to draw a filled area on one side of the line. This is useful to show; exclusion zones.; This drawing mode is activated when the absolute value of the graph line; width (set by SetLineWidth()) is greater than 99. In that; case the line width number is interpreted as:. 100*ff+ll = ffll. The two digits number ""ll"" represent the normal line width; The two digits number ""ff"" represent the filled area width.; The sign of """,MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:2923,Deployability,Update,Update,2923," as a bar chart, this option makes the bars start from; the bottom of the pad. By default they start at 0. ""X+""; The X-axis is drawn on the top side of the plot. ""Y+""; The Y-axis is drawn on the right side of the plot. Drawing options can be combined. In the following example the graph; is drawn as a smooth curve (option ""C"") with markers (option ""P"") and; with axes (option ""A""). Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",200,10,600,400);. c1->SetFillColor(42);; c1->SetGrid();. const Int_t n = 20;; Double_t x[n], y[n];; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2);; }; gr = new TGraph(n,x,y);; gr->SetLineColor(2);; gr->SetLineWidth(4);; gr->SetMarkerColor(4);; gr->SetMarkerSize(1.5);; gr->SetMarkerStyle(21);; gr->SetTitle(""Option ACP example"");; gr->GetXaxis()->SetTitle(""X title"");; gr->GetYaxis()->SetTitle(""Y title"");; gr->Draw(""ACP"");. // TCanvas::Update() draws the frame, after which one can change it; c1->Update();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; c1->Modified();; return c1;; }; The following macro shows the option ""B"" usage. It can be combined with the; option ""1"". Picture; Source. {; TCanvas *c47 = new TCanvas(""c47"",""c47"",200,10,600,400);; c47->Divide(1,2);; const Int_t n = 20;; Double_t x[n], y[n];; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2)-6;; }; gr = new TGraph(n,x,y);; gr->SetFillColor(38);; c47->cd(1); gr->Draw(""AB"");; c47->cd(2); gr->Draw(""AB1"");; return c47;; }; Exclusion graphs; When a graph is painted with the option ""C"" or ""L"" it is; possible to draw a filled area on one side of the line. This is useful to show; exclusion zones.; This drawing mode is activated when the absolute value of the graph line; width (set by SetLineWidth()) is greater than 99. In that; case the line width number is interpreted as:. 100*ff+ll = ffll. The two digits number ""ll"" represent the normal line width; The two digits number ""ff"" represent the filled area width.; The sign of """,MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:13347,Deployability,Update,Update,13347,"raphs are the following:. ""O""; Polar labels are drawn orthogonally to the polargram radius. ""P""; Polymarker are drawn at each point position. ""E""; Draw error bars. ""F""; Draw fill area (closed polygon). ""A""; Force axis redrawing even if a polargram already exists. ""N""; Disable the display of the polar labels. Picture; Source. {; TCanvas *c46 = new TCanvas(""c46"",""c46"",500,500);; TGraphPolar * grP1 = new TGraphPolar();; grP1->SetTitle(""TGraphPolar example"");. grP1->SetPoint(0, (1*TMath::Pi())/4., 0.05);; grP1->SetPoint(1, (2*TMath::Pi())/4., 0.10);; grP1->SetPoint(2, (3*TMath::Pi())/4., 0.15);; grP1->SetPoint(3, (4*TMath::Pi())/4., 0.20);; grP1->SetPoint(4, (5*TMath::Pi())/4., 0.25);; grP1->SetPoint(5, (6*TMath::Pi())/4., 0.30);; grP1->SetPoint(6, (7*TMath::Pi())/4., 0.35);; grP1->SetPoint(7, (8*TMath::Pi())/4., 0.40);. grP1->SetMarkerStyle(20);; grP1->SetMarkerSize(1.);; grP1->SetMarkerColor(4);; grP1->SetLineColor(4);; grP1->Draw(""ALP"");. // Update, otherwise GetPolargram returns 0; c46->Update();; grP1->GetPolargram()->SetToRadian();. return c46;; }; . Function Members (Methods); public:. virtual~TGraphPainter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidComputeLogs(Int_t npoints, Int_t opt); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Int_tDistancetoPrimitiveHelper(TGraph* theGraph, Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawPanelHelper",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:13394,Deployability,Update,Update,13394,"raphs are the following:. ""O""; Polar labels are drawn orthogonally to the polargram radius. ""P""; Polymarker are drawn at each point position. ""E""; Draw error bars. ""F""; Draw fill area (closed polygon). ""A""; Force axis redrawing even if a polargram already exists. ""N""; Disable the display of the polar labels. Picture; Source. {; TCanvas *c46 = new TCanvas(""c46"",""c46"",500,500);; TGraphPolar * grP1 = new TGraphPolar();; grP1->SetTitle(""TGraphPolar example"");. grP1->SetPoint(0, (1*TMath::Pi())/4., 0.05);; grP1->SetPoint(1, (2*TMath::Pi())/4., 0.10);; grP1->SetPoint(2, (3*TMath::Pi())/4., 0.15);; grP1->SetPoint(3, (4*TMath::Pi())/4., 0.20);; grP1->SetPoint(4, (5*TMath::Pi())/4., 0.25);; grP1->SetPoint(5, (6*TMath::Pi())/4., 0.30);; grP1->SetPoint(6, (7*TMath::Pi())/4., 0.35);; grP1->SetPoint(7, (8*TMath::Pi())/4., 0.40);. grP1->SetMarkerStyle(20);; grP1->SetMarkerSize(1.);; grP1->SetMarkerColor(4);; grP1->SetLineColor(4);; grP1->Draw(""ALP"");. // Update, otherwise GetPolargram returns 0; c46->Update();; grP1->GetPolargram()->SetToRadian();. return c46;; }; . Function Members (Methods); public:. virtual~TGraphPainter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidComputeLogs(Int_t npoints, Int_t opt); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Int_tDistancetoPrimitiveHelper(TGraph* theGraph, Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawPanelHelper",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:21241,Deployability,release,released,21241,"r; ; . ~TGraphPainter(). Destructor.; ; . void ComputeLogs(Int_t npoints, Int_t opt). Compute the logarithm of global variables gxwork and gywork; according to the value of Options and put the results in the global; variables gxworkl and gyworkl.; ; npoints : Number of points in gxwork and in gywork.; ; opt = 1 ComputeLogs is called from PaintGrapHist; opt = 0 ComputeLogs is called from PaintGraph; ; . Int_t DistancetoPrimitiveHelper(TGraph* theGraph, Int_t px, Int_t py). Compute distance from point px,py to a graph.; ; Compute the closest distance of approach from point px,py to this line.; The distance is computed in pixels units.; ; . void DrawPanelHelper(TGraph* theGraph). Display a panel with all histogram drawing options.; ; . void ExecuteEventHelper(TGraph* theGraph, Int_t event, Int_t px, Int_t py). Execute action corresponding to one event.; ; This member function is called when a graph is clicked with the locator.; ; If the left mouse button is clicked on one of the line end points, this point; follows the cursor until button is released.; ; If the middle mouse button clicked, the line is moved parallel to itself; until the button is released.; ; . char * GetObjectInfoHelper(TGraph* theGraph, Int_t px, Int_t py) const. void PaintHelper(TGraph* theGraph, Option_t* option). Paint a any kind of TGraph; ; . void PaintGraph(TGraph* theGraph, Int_t npoints, const Double_t* x, const Double_t* y, Option_t* chopt). Control function to draw a graph.; . void PaintGrapHist(TGraph* theGraph, Int_t npoints, const Double_t* x, const Double_t* y, Option_t* chopt). This is a service method used by; THistPainter; to paint 1D histograms. It is not used to paint TGraph.; ; Input parameters:; ; npoints : Number of points in X or in Y.; x[npoints] or x[0] : x coordinates or (xmin,xmax).; y[npoints] or y[0] : y coordinates or (ymin,ymax).; chopt : Option.; . The aspect of the histogram is done according to the value of the chopt.; . ""R""; Graph is drawn horizontaly, parallel to X ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:21348,Deployability,release,released,21348," variables gxwork and gywork; according to the value of Options and put the results in the global; variables gxworkl and gyworkl.; ; npoints : Number of points in gxwork and in gywork.; ; opt = 1 ComputeLogs is called from PaintGrapHist; opt = 0 ComputeLogs is called from PaintGraph; ; . Int_t DistancetoPrimitiveHelper(TGraph* theGraph, Int_t px, Int_t py). Compute distance from point px,py to a graph.; ; Compute the closest distance of approach from point px,py to this line.; The distance is computed in pixels units.; ; . void DrawPanelHelper(TGraph* theGraph). Display a panel with all histogram drawing options.; ; . void ExecuteEventHelper(TGraph* theGraph, Int_t event, Int_t px, Int_t py). Execute action corresponding to one event.; ; This member function is called when a graph is clicked with the locator.; ; If the left mouse button is clicked on one of the line end points, this point; follows the cursor until button is released.; ; If the middle mouse button clicked, the line is moved parallel to itself; until the button is released.; ; . char * GetObjectInfoHelper(TGraph* theGraph, Int_t px, Int_t py) const. void PaintHelper(TGraph* theGraph, Option_t* option). Paint a any kind of TGraph; ; . void PaintGraph(TGraph* theGraph, Int_t npoints, const Double_t* x, const Double_t* y, Option_t* chopt). Control function to draw a graph.; . void PaintGrapHist(TGraph* theGraph, Int_t npoints, const Double_t* x, const Double_t* y, Option_t* chopt). This is a service method used by; THistPainter; to paint 1D histograms. It is not used to paint TGraph.; ; Input parameters:; ; npoints : Number of points in X or in Y.; x[npoints] or x[0] : x coordinates or (xmin,xmax).; y[npoints] or y[0] : y coordinates or (ymin,ymax).; chopt : Option.; . The aspect of the histogram is done according to the value of the chopt.; . ""R""; Graph is drawn horizontaly, parallel to X axis. (default is vertically,; parallel to Y axis); ; If option R is selected the user must give:; ; 2 values for Y (",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:25249,Deployability,continuous,continuous,25249,"this TGraphPolar with its current attributes.; . void PaintGraphQQ(TGraph* theGraph, Option_t* option). Paint this graphQQ. No options for the time being.; ; . void PaintGraphSimple(TGraph* theGraph, Option_t* option). Paint a simple graph, without errors bars.; ; . void PaintPolyLineHatches(TGraph* theGraph, Int_t n, const Double_t* x, const Double_t* y). Paint a polyline with hatches on one side showing an exclusion zone. x and y; are the the vectors holding the polyline and n the number of points in the; polyline and w the width of the hatches. w can be negative.; This method is not meant to be used directly. It is called automatically; according to the line style convention.; ; . void PaintStats(TGraph* theGraph, TF1* fit). Paint the statistics box with the fit info.; ; . void Smooth(TGraph* theGraph, Int_t npoints, Double_t* x, Double_t* y, Int_t drawtype). Smooth a curve given by N points.; ; The original code is from an underlaying routine for Draw based on the; CERN GD3 routine TVIPTE:; ; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; ; This method draws a smooth tangentially continuous curve through; the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)).; The curve is approximated by a polygonal arc of short vectors.; The data points can represent open curves, P(1) != P(N) or closed; curves P(2) == P(N). If a tangential discontinuity at P(I) is; required, then set P(I)=P(I+1). Loops are also allowed.; ; Reference Marlow and Powell, Harwell report No.R.7092.1972; MCCONALOGUE, Computer Journal VOL.13, NO4, NOV1970P p392 6; . npoints : Number of data points.; x : Abscissa; y : Ordinate; ; . TGraphPainter(). » Author: Olivier Couet » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TGraphPainter.h,v 1.00 » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:25087,Integrability,rout,routine,25087,"aph, Option_t* option). Paint this TGraphPolar with its current attributes.; . void PaintGraphQQ(TGraph* theGraph, Option_t* option). Paint this graphQQ. No options for the time being.; ; . void PaintGraphSimple(TGraph* theGraph, Option_t* option). Paint a simple graph, without errors bars.; ; . void PaintPolyLineHatches(TGraph* theGraph, Int_t n, const Double_t* x, const Double_t* y). Paint a polyline with hatches on one side showing an exclusion zone. x and y; are the the vectors holding the polyline and n the number of points in the; polyline and w the width of the hatches. w can be negative.; This method is not meant to be used directly. It is called automatically; according to the line style convention.; ; . void PaintStats(TGraph* theGraph, TF1* fit). Paint the statistics box with the fit info.; ; . void Smooth(TGraph* theGraph, Int_t npoints, Double_t* x, Double_t* y, Int_t drawtype). Smooth a curve given by N points.; ; The original code is from an underlaying routine for Draw based on the; CERN GD3 routine TVIPTE:; ; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; ; This method draws a smooth tangentially continuous curve through; the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)).; The curve is approximated by a polygonal arc of short vectors.; The data points can represent open curves, P(1) != P(N) or closed; curves P(2) == P(N). If a tangential discontinuity at P(I) is; required, then set P(I)=P(I+1). Loops are also allowed.; ; Reference Marlow and Powell, Harwell report No.R.7092.1972; MCCONALOGUE, Computer Journal VOL.13, NO4, NOV1970P p392 6; . npoints : Number of data points.; x : Abscissa; y : Ordinate; ; . TGraphPainter(). » Author: Olivier Couet » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TGraphPainter.h,v 1.00 » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:25127,Integrability,rout,routine,25127,"aph, Option_t* option). Paint this TGraphPolar with its current attributes.; . void PaintGraphQQ(TGraph* theGraph, Option_t* option). Paint this graphQQ. No options for the time being.; ; . void PaintGraphSimple(TGraph* theGraph, Option_t* option). Paint a simple graph, without errors bars.; ; . void PaintPolyLineHatches(TGraph* theGraph, Int_t n, const Double_t* x, const Double_t* y). Paint a polyline with hatches on one side showing an exclusion zone. x and y; are the the vectors holding the polyline and n the number of points in the; polyline and w the width of the hatches. w can be negative.; This method is not meant to be used directly. It is called automatically; according to the line style convention.; ; . void PaintStats(TGraph* theGraph, TF1* fit). Paint the statistics box with the fit info.; ; . void Smooth(TGraph* theGraph, Int_t npoints, Double_t* x, Double_t* y, Int_t drawtype). Smooth a curve given by N points.; ; The original code is from an underlaying routine for Draw based on the; CERN GD3 routine TVIPTE:; ; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; ; This method draws a smooth tangentially continuous curve through; the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)).; The curve is approximated by a polygonal arc of short vectors.; The data points can represent open curves, P(1) != P(N) or closed; curves P(2) == P(N). If a tangential discontinuity at P(I) is; required, then set P(I)=P(I+1). Loops are also allowed.; ; Reference Marlow and Powell, Harwell report No.R.7092.1972; MCCONALOGUE, Computer Journal VOL.13, NO4, NOV1970P p392 6; . npoints : Number of data points.; x : Abscissa; y : Ordinate; ; . TGraphPainter(). » Author: Olivier Couet » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TGraphPainter.h,v 1.00 » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:15792,Modifiability,Inherit,InheritsFrom,15792,"TGraph* theGraph, Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual char*GetObjectInfoHelper(TGraph* theGraph, Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TVirtualGraphPainter*TVirtualGraphPainter::GetPainter(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:15858,Modifiability,Inherit,InheritsFrom,15858,"bject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual char*GetObjectInfoHelper(TGraph* theGraph, Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TVirtualGraphPainter*TVirtualGraphPainter::GetPainter(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGraphPainter&operator=(const TGraphPainter&); virt",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:20074,Modifiability,Inherit,Inheritance,20074,"ite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphPainter(). Default constructor; ; . ~TGraphPainter(). Destructor.; ; . void ComputeLogs(Int_t npoints, Int_t opt). Compute the logarithm of global variables gxwork and gywork; according to the value of Options and put the results in the global; variables gxworkl and gyworkl.; ; npoints : Number of points in gxwork and in gywork.; ; opt = 1 ComputeLogs is called from PaintGrapHist; opt = 0 ComputeLogs is called from PaintGraph; ; . Int_t DistancetoPrimitiveHelper(TGraph* theGraph, Int_t px, Int_t py). Compute distance from point px,py to a graph.; ; Compute the closest distance of approach from point px,py to this line.; The distance is computed in pixels units.; ; . void DrawPanelHelper(TGraph* theGraph). Display a panel with all histogram drawing options.; ; . void ExecuteEventHelper(TGraph* theGraph, Int_t event, Int_t px, Int_t py). Execute action corresponding to one event.; ; This member function is called when a graph is cl",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:20087,Modifiability,Inherit,Inherited,20087,"ite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphPainter(). Default constructor; ; . ~TGraphPainter(). Destructor.; ; . void ComputeLogs(Int_t npoints, Int_t opt). Compute the logarithm of global variables gxwork and gywork; according to the value of Options and put the results in the global; variables gxworkl and gyworkl.; ; npoints : Number of points in gxwork and in gywork.; ; opt = 1 ComputeLogs is called from PaintGrapHist; opt = 0 ComputeLogs is called from PaintGraph; ; . Int_t DistancetoPrimitiveHelper(TGraph* theGraph, Int_t px, Int_t py). Compute distance from point px,py to a graph.; ; Compute the closest distance of approach from point px,py to this line.; The distance is computed in pixels units.; ; . void DrawPanelHelper(TGraph* theGraph). Display a panel with all histogram drawing options.; ; . void ExecuteEventHelper(TGraph* theGraph, Int_t event, Int_t px, Int_t py). Execute action corresponding to one event.; ; This member function is called when a graph is cl",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:20304,Modifiability,variab,variables,20304,"mous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphPainter(). Default constructor; ; . ~TGraphPainter(). Destructor.; ; . void ComputeLogs(Int_t npoints, Int_t opt). Compute the logarithm of global variables gxwork and gywork; according to the value of Options and put the results in the global; variables gxworkl and gyworkl.; ; npoints : Number of points in gxwork and in gywork.; ; opt = 1 ComputeLogs is called from PaintGrapHist; opt = 0 ComputeLogs is called from PaintGraph; ; . Int_t DistancetoPrimitiveHelper(TGraph* theGraph, Int_t px, Int_t py). Compute distance from point px,py to a graph.; ; Compute the closest distance of approach from point px,py to this line.; The distance is computed in pixels units.; ; . void DrawPanelHelper(TGraph* theGraph). Display a panel with all histogram drawing options.; ; . void ExecuteEventHelper(TGraph* theGraph, Int_t event, Int_t px, Int_t py). Execute action corresponding to one event.; ; This member function is called when a graph is clicked with the locator.; ; If the left mouse button is clicked on one of the line end points, this point; follows the cursor until button is released.; ; If the middle mouse button clicked, the line is moved parallel to itself; until the button is rele",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:20402,Modifiability,variab,variables,20402,"mous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphPainter(). Default constructor; ; . ~TGraphPainter(). Destructor.; ; . void ComputeLogs(Int_t npoints, Int_t opt). Compute the logarithm of global variables gxwork and gywork; according to the value of Options and put the results in the global; variables gxworkl and gyworkl.; ; npoints : Number of points in gxwork and in gywork.; ; opt = 1 ComputeLogs is called from PaintGrapHist; opt = 0 ComputeLogs is called from PaintGraph; ; . Int_t DistancetoPrimitiveHelper(TGraph* theGraph, Int_t px, Int_t py). Compute distance from point px,py to a graph.; ; Compute the closest distance of approach from point px,py to this line.; The distance is computed in pixels units.; ; . void DrawPanelHelper(TGraph* theGraph). Display a panel with all histogram drawing options.; ; . void ExecuteEventHelper(TGraph* theGraph, Int_t event, Int_t px, Int_t py). Execute action corresponding to one event.; ; This member function is called when a graph is clicked with the locator.; ; If the left mouse button is clicked on one of the line end points, this point; follows the cursor until button is released.; ; If the middle mouse button clicked, the line is moved parallel to itself; until the button is rele",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:15682,Security,Hash,Hash,15682,"t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExecuteEventHelper(TGraph* theGraph, Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual char*GetObjectInfoHelper(TGraph* theGraph, Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TVirtualGraphPainter*TVirtualGraphPainter::GetPainter(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:18752,Testability,Test,TestBit,18752,"rs(TGraph* theGraph, Option_t* option); virtual voidPaintGrapHist(TGraph* theGraph, Int_t npoints, const Double_t* x, const Double_t* y, Option_t* chopt); voidPaintGraphPolar(TGraph* theGraph, Option_t* option); voidPaintGraphQQ(TGraph* theGraph, Option_t* option); voidPaintGraphSimple(TGraph* theGraph, Option_t* option); virtual voidPaintHelper(TGraph* theGraph, Option_t* option); voidPaintPolyLineHatches(TGraph* theGraph, Int_t n, const Double_t* x, const Double_t* y); virtual voidPaintStats(TGraph* theGraph, TF1* fit); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); static voidTVirtualGraphPainter::SetPainter(TVirtualGraphPainter* painter); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; voidSmooth(TGraph* theGraph, Int_t npoints, Double_t* x, Double_t* y, Int_t drawtype); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphPainter(); TGraphPainter(const TGraphPainter&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:18791,Testability,Test,TestBits,18791,"rs(TGraph* theGraph, Option_t* option); virtual voidPaintGrapHist(TGraph* theGraph, Int_t npoints, const Double_t* x, const Double_t* y, Option_t* chopt); voidPaintGraphPolar(TGraph* theGraph, Option_t* option); voidPaintGraphQQ(TGraph* theGraph, Option_t* option); voidPaintGraphSimple(TGraph* theGraph, Option_t* option); virtual voidPaintHelper(TGraph* theGraph, Option_t* option); voidPaintPolyLineHatches(TGraph* theGraph, Int_t n, const Double_t* x, const Double_t* y); virtual voidPaintStats(TGraph* theGraph, TF1* fit); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); static voidTVirtualGraphPainter::SetPainter(TVirtualGraphPainter* painter); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; voidSmooth(TGraph* theGraph, Int_t npoints, Double_t* x, Double_t* y, Int_t drawtype); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphPainter(); TGraphPainter(const TGraphPainter&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:20284,Testability,log,logarithm,20284,"mous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphPainter(). Default constructor; ; . ~TGraphPainter(). Destructor.; ; . void ComputeLogs(Int_t npoints, Int_t opt). Compute the logarithm of global variables gxwork and gywork; according to the value of Options and put the results in the global; variables gxworkl and gyworkl.; ; npoints : Number of points in gxwork and in gywork.; ; opt = 1 ComputeLogs is called from PaintGrapHist; opt = 0 ComputeLogs is called from PaintGraph; ; . Int_t DistancetoPrimitiveHelper(TGraph* theGraph, Int_t px, Int_t py). Compute distance from point px,py to a graph.; ; Compute the closest distance of approach from point px,py to this line.; The distance is computed in pixels units.; ; . void DrawPanelHelper(TGraph* theGraph). Display a panel with all histogram drawing options.; ; . void ExecuteEventHelper(TGraph* theGraph, Int_t event, Int_t px, Int_t py). Execute action corresponding to one event.; ; This member function is called when a graph is clicked with the locator.; ; If the left mouse button is clicked on one of the line end points, this point; follows the cursor until button is released.; ; If the middle mouse button clicked, the line is moved parallel to itself; until the button is rele",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:896,Usability,simpl,simple,896,". TGraphPainter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HISTPAINTER; » TGraphPainter. class TGraphPainter: public TVirtualGraphPainter. The graph painter class. Introduction; Graphs' plotting options; Exclusion graphs; Graphs with error bars. TGraphErrors; TGraphAsymmErrors; TGraphBentErrors. TGraphPolar options. Introduction; Graphs are drawn via the painter TGraphPainter class. This class; implements techniques needed to display the various kind of; graphs i.e.: TGraph, TGraphErrors,; TGraphBentErrors and TGraphAsymmErrors. To draw a graph ""graph"" it's enough to do:. graph->Draw(""AL"");. The option ""AL"" in the Draw() method means:. The axis should be drawn (option ""A""),; The graph should be drawn as a simple line (option ""L""). By default a graph is drawn in the current pad in the current coordinate system.; To define a suitable coordinate system and draw the axis the option; ""A"" must be specified. TGraphPainter offers many options to paint the various kind of graphs. It is separated from the graph classes so that one can have graphs without the; graphics overhead, for example in a batch program. When a displayed graph is modified, there is no need to call; Draw() again; the image will be refreshed the next time the; pad will be updated.; A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. ""A""; Axis are drawn around the graph. ""L""; A simple polyline is drawn. ""F""; A fill area is drawn ('CF' draw a smoothed fill area). ""C""; A smooth Curve is drawn. ""*""; A Star is plotted at each point. ""P""; The current marker is plotted at each point. ""B""; A Bar chart is drawn. ""1""; When a graph is drawn as a bar chart, this option makes ",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:1709,Usability,simpl,simple,1709,"o draw a graph ""graph"" it's enough to do:. graph->Draw(""AL"");. The option ""AL"" in the Draw() method means:. The axis should be drawn (option ""A""),; The graph should be drawn as a simple line (option ""L""). By default a graph is drawn in the current pad in the current coordinate system.; To define a suitable coordinate system and draw the axis the option; ""A"" must be specified. TGraphPainter offers many options to paint the various kind of graphs. It is separated from the graph classes so that one can have graphs without the; graphics overhead, for example in a batch program. When a displayed graph is modified, there is no need to call; Draw() again; the image will be refreshed the next time the; pad will be updated.; A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. ""A""; Axis are drawn around the graph. ""L""; A simple polyline is drawn. ""F""; A fill area is drawn ('CF' draw a smoothed fill area). ""C""; A smooth Curve is drawn. ""*""; A Star is plotted at each point. ""P""; The current marker is plotted at each point. ""B""; A Bar chart is drawn. ""1""; When a graph is drawn as a bar chart, this option makes the bars start from; the bottom of the pad. By default they start at 0. ""X+""; The X-axis is drawn on the top side of the plot. ""Y+""; The Y-axis is drawn on the right side of the plot. Drawing options can be combined. In the following example the graph; is drawn as a smooth curve (option ""C"") with markers (option ""P"") and; with axes (option ""A""). Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",200,10,600,400);. c1->SetFillColor(42);; c1->SetGrid();. const Int_t n = 20;; Double_t x[n], y[n];; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2);; }; gr = new TGraph(n,x,y);; gr->SetLineColor(2);; gr->SetLineWidth(4);; gr->SetMarkerColor(4);; gr->SetMarkerSize(1.5);; gr->SetMarkerStyle(21);;",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:13766,Usability,Clear,Clear,13766,,MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:22494,Usability,simpl,simple,22494,"ph; ; . void PaintGraph(TGraph* theGraph, Int_t npoints, const Double_t* x, const Double_t* y, Option_t* chopt). Control function to draw a graph.; . void PaintGrapHist(TGraph* theGraph, Int_t npoints, const Double_t* x, const Double_t* y, Option_t* chopt). This is a service method used by; THistPainter; to paint 1D histograms. It is not used to paint TGraph.; ; Input parameters:; ; npoints : Number of points in X or in Y.; x[npoints] or x[0] : x coordinates or (xmin,xmax).; y[npoints] or y[0] : y coordinates or (ymin,ymax).; chopt : Option.; . The aspect of the histogram is done according to the value of the chopt.; . ""R""; Graph is drawn horizontaly, parallel to X axis. (default is vertically,; parallel to Y axis); ; If option R is selected the user must give:; ; 2 values for Y (y[0]=YMIN and y[1]=YMAX); N values for X, one for each channel.; ; Otherwise the user must give:; ; N values for Y, one for each channel.; 2 values for X (x[0]=XMIN and x[1]=XMAX); . ""L""; A simple polyline beetwen every points is drawn.; ; ""H""; An Histogram with equidistant bins is drawn as a polyline.; ; ""F""; An histogram with equidistant bins is drawn as a fill area. Contour is not; drawn unless chopt='H' is also selected..; ; ""N""; Non equidistant bins (default is equidistant). If N is the number of channels; array X and Y must be dimensionned as follow:; ; >If option R is not selected (default) then the user must give:. (N+1) values for X (limits of channels).; N values for Y, one for each channel. Otherwise the user must give:. (N+1) values for Y (limits of channels).; N values for X, one for each channel. ""F1""; Idem as 'F' except that fill area base line is the minimum of the pad instead; of Y=0.; ; ""F2""; Draw a Fill area polyline connecting the center of bins; ; ""C""; A smooth Curve is drawn.; ; ""*""; A Star is plotted at the center of each bin.; ; ""P""; Idem with the current marker.; ; ""P0""; Idem with the current marker. Empty bins also drawn.; ; ""B""; A Bar chart with equidistant bins i",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPainter.html:24361,Usability,simpl,simple,24361,"""P""; Idem with the current marker.; ; ""P0""; Idem with the current marker. Empty bins also drawn.; ; ""B""; A Bar chart with equidistant bins is drawn as fill areas (Contours are drawn).; ; ""][""; ""Cutoff"" style. When this option is selected together with H option, the; first and last vertical lines of the histogram are not drawn.; . . void PaintGraphAsymmErrors(TGraph* theGraph, Option_t* option). Paint this TGraphAsymmErrors with its current attributes.; . void PaintGraphBentErrors(TGraph* theGraph, Option_t* option). Paint this TGraphBentErrors with its current attributes.; . void PaintGraphErrors(TGraph* theGraph, Option_t* option). Paint this TGraphErrors with its current attributes.; . void PaintGraphPolar(TGraph* theGraph, Option_t* option). Paint this TGraphPolar with its current attributes.; . void PaintGraphQQ(TGraph* theGraph, Option_t* option). Paint this graphQQ. No options for the time being.; ; . void PaintGraphSimple(TGraph* theGraph, Option_t* option). Paint a simple graph, without errors bars.; ; . void PaintPolyLineHatches(TGraph* theGraph, Int_t n, const Double_t* x, const Double_t* y). Paint a polyline with hatches on one side showing an exclusion zone. x and y; are the the vectors holding the polyline and n the number of points in the; polyline and w the width of the hatches. w can be negative.; This method is not meant to be used directly. It is called automatically; according to the line style convention.; ; . void PaintStats(TGraph* theGraph, TF1* fit). Paint the statistics box with the fit info.; ; . void Smooth(TGraph* theGraph, Int_t npoints, Double_t* x, Double_t* y, Int_t drawtype). Smooth a curve given by N points.; ; The original code is from an underlaying routine for Draw based on the; CERN GD3 routine TVIPTE:; ; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; ; This method draws a smooth tangentially continuous curve through; the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)).; The curve is approximated by a poly",MatchSource.WIKI,root/html604/TGraphPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPainter.html
https://root.cern/root/html604/TGraphPolar.html:383,Availability,error,error,383,". TGraphPolar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TGraphPolar. class TGraphPolar: public TGraphErrors. TGraphPolar : to draw a polar graph; TGraphPolar creates a polar graph (including error bars). A TGraphPolar is; a TGraphErrors represented in polar coordinates.; It uses the class TGraphPolargram to draw the polar axis. Example:. Picture; Source. {; TCanvas * CPol = new TCanvas(""CPol"",""TGraphPolar Example"",500,500);. Double_t theta[8];; Double_t radius[8];; Double_t etheta[8];; Double_t eradius[8];. for (int i=0; i<8; i++) {; theta[i] = (i+1)*(TMath::Pi()/4.);; radius[i] = (i+1)*0.05;; etheta[i] = TMath::Pi()/8.;; eradius[i] = 0.05;; }. TGraphPolar * grP1 = new TGraphPolar(8, theta, radius, etheta, eradius);; grP1->SetTitle(""TGraphPolar Example"");. grP1->SetMarkerStyle(20);; grP1->SetMarkerSize(2.);; grP1->SetMarkerColor(4);; grP1->SetLineColor(2);; grP1->SetLineWidth(3);; grP1->Draw(""PE"");. // Update, otherwise GetPolargram returns 0; CPol->Update();; grP1->GetPolargram()->SetToRadian();. return CPol;; } . Function Members (Methods); public:. virtual~TGraphPolar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGraphErrors::Apply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); static Int_tTGraphErrors::CalculateScanfFields(const char* fmt); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tTGraph::CompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareRadius(const TGraph* gr, Int_t left, Int_t ri",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:3098,Availability,Error,Error,3098,":CompareY(const TGraph* gr, Int_t left, Int_t right); virtual voidTGraphErrors::ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidT",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:3319,Availability,error,error,3319,"oidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidTGraph::FitPanel()MENU ; virtual Double_tTGraph::GetCorrelationFactor() const; virtual Double_tTGraph::GetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGra",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:3403,Availability,error,error,3403,"px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidTGraph::FitPanel()MENU ; virtual Double_tTGraph::GetCorrelationFactor() const; virtual Double_tTGraph::GetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGraph::GetEditable() const; virtual Double_tTGraphErrors::GetErrorX(Int_t bin) const; v",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:14716,Availability,error,errors,14716,"ect::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TGraphErrors::fEX[fNpoints] array of X errors; Double_t*TGraphErrors::fEY[fNpoints] array of Y errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TGraphPolargram*fPolargramThe polar coordinates system; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*fXpol[fNpoints] points in polar coordinates; Double_t*TGraph::fY[fNpoints] array of Y points; Double_t*fYpol[fNpoints] points in polar coordinates. private:. Bool_tfOptionAxisForce drawing of new coord system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphPolar(); TGraphPolar default constructor. TGraphPolar(Int_t n, const Double_t* theta = 0, const Double_t* r = 0, const Double_t* etheta = 0, const Double_t* er = 0); TGraphPolar constructor. n : number of points.; theta : angular values.; r : radial values.; e",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:14772,Availability,error,errors,14772,"ect::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TGraphErrors::fEX[fNpoints] array of X errors; Double_t*TGraphErrors::fEY[fNpoints] array of Y errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TGraphPolargram*fPolargramThe polar coordinates system; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*fXpol[fNpoints] points in polar coordinates; Double_t*TGraph::fY[fNpoints] array of Y points; Double_t*fYpol[fNpoints] points in polar coordinates. private:. Bool_tfOptionAxisForce drawing of new coord system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphPolar(); TGraphPolar default constructor. TGraphPolar(Int_t n, const Double_t* theta = 0, const Double_t* r = 0, const Double_t* etheta = 0, const Double_t* er = 0); TGraphPolar constructor. n : number of points.; theta : angular values.; r : radial values.; e",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:16255,Availability,error,errors,16255,"t_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TGraphPolargram*fPolargramThe polar coordinates system; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*fXpol[fNpoints] points in polar coordinates; Double_t*TGraph::fY[fNpoints] array of Y points; Double_t*fYpol[fNpoints] points in polar coordinates. private:. Bool_tfOptionAxisForce drawing of new coord system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphPolar(); TGraphPolar default constructor. TGraphPolar(Int_t n, const Double_t* theta = 0, const Double_t* r = 0, const Double_t* etheta = 0, const Double_t* er = 0); TGraphPolar constructor. n : number of points.; theta : angular values.; r : radial values.; etheta : errors on angular values.; er : errors on radial values. ~TGraphPolar(); TGraphPolar destructor. void Draw(Option_t* options = """"); Draw TGraphPolar. Double_t * GetXpol(); Return points in polar coordinates. Double_t * GetYpol(); Return points in polar coordinates. void SetMaxPolar(Double_t maximum = 6.2831853071795862); Set maximum Polar. void SetMaxRadial(Double_t maximum = 1); Set maximum radial at the intersection of the positive X axis part and; the circle. void SetMinPolar(Double_t minimum = 0); Set minimum Polar. void SetMinRadial(Double_t minimum = 0); Set minimum radial in the center of the circle. TGraphPolar(). TGraphPolargram * GetPolargram(); {return fPolargram;}. Bool_t GetOptionAxis(); {return fOptionAxis;}. void SetMaximum(Double_t maximum = 1); {SetMaxRadial(maximum);}. void SetMinimum(Double_t minimum = 0); {SetMinRadial(minimum);}. void SetOptionAxis(Bool_t opt); {fOptionAxis = opt;}. void SetPolargram(TGraphPolargram* p); {fPolargram = p;}. » Author: Sebastian Boser, 02/02",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:16287,Availability,error,errors,16287,"sion of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TGraphPolargram*fPolargramThe polar coordinates system; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*fXpol[fNpoints] points in polar coordinates; Double_t*TGraph::fY[fNpoints] array of Y points; Double_t*fYpol[fNpoints] points in polar coordinates. private:. Bool_tfOptionAxisForce drawing of new coord system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphPolar(); TGraphPolar default constructor. TGraphPolar(Int_t n, const Double_t* theta = 0, const Double_t* r = 0, const Double_t* etheta = 0, const Double_t* er = 0); TGraphPolar constructor. n : number of points.; theta : angular values.; r : radial values.; etheta : errors on angular values.; er : errors on radial values. ~TGraphPolar(); TGraphPolar destructor. void Draw(Option_t* options = """"); Draw TGraphPolar. Double_t * GetXpol(); Return points in polar coordinates. Double_t * GetYpol(); Return points in polar coordinates. void SetMaxPolar(Double_t maximum = 6.2831853071795862); Set maximum Polar. void SetMaxRadial(Double_t maximum = 1); Set maximum radial at the intersection of the positive X axis part and; the circle. void SetMinPolar(Double_t minimum = 0); Set minimum Polar. void SetMinRadial(Double_t minimum = 0); Set minimum radial in the center of the circle. TGraphPolar(). TGraphPolargram * GetPolargram(); {return fPolargram;}. Bool_t GetOptionAxis(); {return fOptionAxis;}. void SetMaximum(Double_t maximum = 1); {SetMaxRadial(maximum);}. void SetMinimum(Double_t minimum = 0); {SetMinRadial(minimum);}. void SetOptionAxis(Bool_t opt); {fOptionAxis = opt;}. void SetPolargram(TGraphPolargram* p); {fPolargram = p;}. » Author: Sebastian Boser, 02/02/06 » Copyright (C) 1995-2000, Ren",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:1108,Deployability,Update,Update,1108,":; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TGraphPolar. class TGraphPolar: public TGraphErrors. TGraphPolar : to draw a polar graph; TGraphPolar creates a polar graph (including error bars). A TGraphPolar is; a TGraphErrors represented in polar coordinates.; It uses the class TGraphPolargram to draw the polar axis. Example:. Picture; Source. {; TCanvas * CPol = new TCanvas(""CPol"",""TGraphPolar Example"",500,500);. Double_t theta[8];; Double_t radius[8];; Double_t etheta[8];; Double_t eradius[8];. for (int i=0; i<8; i++) {; theta[i] = (i+1)*(TMath::Pi()/4.);; radius[i] = (i+1)*0.05;; etheta[i] = TMath::Pi()/8.;; eradius[i] = 0.05;; }. TGraphPolar * grP1 = new TGraphPolar(8, theta, radius, etheta, eradius);; grP1->SetTitle(""TGraphPolar Example"");. grP1->SetMarkerStyle(20);; grP1->SetMarkerSize(2.);; grP1->SetMarkerColor(4);; grP1->SetLineColor(2);; grP1->SetLineWidth(3);; grP1->Draw(""PE"");. // Update, otherwise GetPolargram returns 0; CPol->Update();; grP1->GetPolargram()->SetToRadian();. return CPol;; } . Function Members (Methods); public:. virtual~TGraphPolar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGraphErrors::Apply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); static Int_tTGraphErrors::CalculateScanfFields(const char* fmt); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tTGraph::CompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareRadius(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareX(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareY(const TGraph* gr, Int_t left, Int_t right);",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:1156,Deployability,Update,Update,1156,":; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TGraphPolar. class TGraphPolar: public TGraphErrors. TGraphPolar : to draw a polar graph; TGraphPolar creates a polar graph (including error bars). A TGraphPolar is; a TGraphErrors represented in polar coordinates.; It uses the class TGraphPolargram to draw the polar axis. Example:. Picture; Source. {; TCanvas * CPol = new TCanvas(""CPol"",""TGraphPolar Example"",500,500);. Double_t theta[8];; Double_t radius[8];; Double_t etheta[8];; Double_t eradius[8];. for (int i=0; i<8; i++) {; theta[i] = (i+1)*(TMath::Pi()/4.);; radius[i] = (i+1)*0.05;; etheta[i] = TMath::Pi()/8.;; eradius[i] = 0.05;; }. TGraphPolar * grP1 = new TGraphPolar(8, theta, radius, etheta, eradius);; grP1->SetTitle(""TGraphPolar Example"");. grP1->SetMarkerStyle(20);; grP1->SetMarkerSize(2.);; grP1->SetMarkerColor(4);; grP1->SetLineColor(2);; grP1->SetLineWidth(3);; grP1->Draw(""PE"");. // Update, otherwise GetPolargram returns 0; CPol->Update();; grP1->GetPolargram()->SetToRadian();. return CPol;; } . Function Members (Methods); public:. virtual~TGraphPolar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGraphErrors::Apply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); static Int_tTGraphErrors::CalculateScanfFields(const char* fmt); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tTGraph::CompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareRadius(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareX(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareY(const TGraph* gr, Int_t left, Int_t right);",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:10144,Deployability,TOGGLE,TOGGLE,10144,"vePoint(Int_t ipoint); virtual voidTAttFill::ResetAttFill(Option_t* option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); virtual voidTAttMarker::ResetAttMarker(Option_t* toption = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTAttMarker::SaveMarkerAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t sizdef = 1); virtual voidTGraphErrors::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTGraph::Set(Int_t n); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGraph::SetEditable(Bool_t editable = kTRUE)TOGGLE GETTER ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTGraph::SetHistogram(TH1F* h); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidSetMaximum(Double_t maximum = 1); voidSetMaxPolar(Double_t maximum = 6.",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:12970,Energy Efficiency,Allocate,Allocate,12970,"nst TGraphPolar&); TGraphPolar(Int_t n, const Double_t* theta = 0, const Double_t* r = 0, const Double_t* etheta = 0, const Double_t* er = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**TGraphErrors::Allocate(Int_t size); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidTGraphErrors::CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tTGraphErrors::CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tTGraphErrors::CtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tTGraphErrors::DoMerge(const TGraph* g); Double_t**TGraph::ExpandAndCopy(Int_t size, Int_t iend); virtual voidTGraphErrors::FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidTObject::MakeZombie(); Double_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidTGraphErrors::SwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGraph::(anonymous)TGraph::kClipFrame; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; stati",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:13010,Energy Efficiency,Allocate,AllocateArrays,13010,"nst TGraphPolar&); TGraphPolar(Int_t n, const Double_t* theta = 0, const Double_t* r = 0, const Double_t* etheta = 0, const Double_t* er = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**TGraphErrors::Allocate(Int_t size); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidTGraphErrors::CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tTGraphErrors::CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tTGraphErrors::CtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tTGraphErrors::DoMerge(const TGraph* g); Double_t**TGraph::ExpandAndCopy(Int_t size, Int_t iend); virtual voidTGraphErrors::FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidTObject::MakeZombie(); Double_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidTGraphErrors::SwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGraph::(anonymous)TGraph::kClipFrame; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; stati",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:6712,Modifiability,Inherit,InheritsFrom,6712,"le_tTGraph::GetMaximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Bool_tGetOptionAxis(); virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; TGraphPolargram*GetPolargram(); virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*GetXpol(); Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; Double_t*GetYpol(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTGraph::LeastSquareFit(Int_t m, Double_t* a, Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::Lea",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:6778,Modifiability,Inherit,InheritsFrom,6778,"irtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Bool_tGetOptionAxis(); virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; TGraphPolargram*GetPolargram(); virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*GetXpol(); Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; Double_t*GetYpol(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTGraph::LeastSquareFit(Int_t m, Double_t* a, Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::LeastSquareLinearFit(Int_t n, Double_t& a0, Double_t& a1, Int_t& ifai",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:15904,Modifiability,Inherit,Inheritance,15904,"d user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TGraphPolargram*fPolargramThe polar coordinates system; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*fXpol[fNpoints] points in polar coordinates; Double_t*TGraph::fY[fNpoints] array of Y points; Double_t*fYpol[fNpoints] points in polar coordinates. private:. Bool_tfOptionAxisForce drawing of new coord system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphPolar(); TGraphPolar default constructor. TGraphPolar(Int_t n, const Double_t* theta = 0, const Double_t* r = 0, const Double_t* etheta = 0, const Double_t* er = 0); TGraphPolar constructor. n : number of points.; theta : angular values.; r : radial values.; etheta : errors on angular values.; er : errors on radial values. ~TGraphPolar(); TGraphPolar destructor. void Draw(Option_t* options = """"); Draw TGraphPolar. Double_t * GetXpol(); Return points in polar coordinates. Double_t * GetYpol(); Return points in polar coordinates. void SetMaxPolar(Double_t maximum = 6.2831853071795862); Set maximum Polar. void SetMaxRadial(Double_t maximum = 1); Set maximum radial at the intersection of the positive X axis part and; the circle. void SetMinPolar(Double_t minimum = 0); Set minimum Polar. void SetMinRadial(Double_t minimum = 0); Set minimum radial in the center of the circle. TGraphPolar(). TGraphPolargram * GetPolargram(); {return fPo",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:15917,Modifiability,Inherit,Inherited,15917,"d user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TGraphPolargram*fPolargramThe polar coordinates system; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*fXpol[fNpoints] points in polar coordinates; Double_t*TGraph::fY[fNpoints] array of Y points; Double_t*fYpol[fNpoints] points in polar coordinates. private:. Bool_tfOptionAxisForce drawing of new coord system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphPolar(); TGraphPolar default constructor. TGraphPolar(Int_t n, const Double_t* theta = 0, const Double_t* r = 0, const Double_t* etheta = 0, const Double_t* er = 0); TGraphPolar constructor. n : number of points.; theta : angular values.; r : radial values.; etheta : errors on angular values.; er : errors on radial values. ~TGraphPolar(); TGraphPolar destructor. void Draw(Option_t* options = """"); Draw TGraphPolar. Double_t * GetXpol(); Return points in polar coordinates. Double_t * GetYpol(); Return points in polar coordinates. void SetMaxPolar(Double_t maximum = 6.2831853071795862); Set maximum Polar. void SetMaxRadial(Double_t maximum = 1); Set maximum radial at the intersection of the positive X axis part and; the circle. void SetMinPolar(Double_t minimum = 0); Set minimum Polar. void SetMinRadial(Double_t minimum = 0); Set minimum radial in the center of the circle. TGraphPolar(). TGraphPolargram * GetPolargram(); {return fPo",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:6602,Security,Hash,Hash,6602,"() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; Double_tTGraph::GetMaximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Bool_tGetOptionAxis(); virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; TGraphPolargram*GetPolargram(); virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*GetXpol(); Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; Double_t*GetYpol(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtu",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:12278,Testability,Test,TestBit,12278,"; virtual voidSetMaximum(Double_t maximum = 1); voidSetMaxPolar(Double_t maximum = 6.2831853071795862)MENU ; voidSetMaxRadial(Double_t maximum = 1)MENU ; virtual voidSetMinimum(Double_t minimum = 0); voidSetMinPolar(Double_t minimum = 0)MENU ; voidSetMinRadial(Double_t minimum = 0)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetOptionAxis(Bool_t opt); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidTGraphErrors::SetPointError(Double_t ex, Double_t ey); virtual voidTGraphErrors::SetPointError(Int_t i, Double_t ex, Double_t ey); voidSetPolargram(TGraphPolargram* p); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphPolar(); TGraphPolar(const TGraphPolar&); TGraphPolar(Int_t n, const Double_t* theta = 0, const Double_t* r = 0, const Double_t* etheta = 0, const Double_t* er = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**TGraphErrors::Allocate(Int_t size); Double_t**TGraph::",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:12317,Testability,Test,TestBits,12317,"; virtual voidSetMaximum(Double_t maximum = 1); voidSetMaxPolar(Double_t maximum = 6.2831853071795862)MENU ; voidSetMaxRadial(Double_t maximum = 1)MENU ; virtual voidSetMinimum(Double_t minimum = 0); voidSetMinPolar(Double_t minimum = 0)MENU ; voidSetMinRadial(Double_t minimum = 0)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetOptionAxis(Bool_t opt); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidTGraphErrors::SetPointError(Double_t ex, Double_t ey); virtual voidTGraphErrors::SetPointError(Int_t i, Double_t ex, Double_t ey); voidSetPolargram(TGraphPolargram* p); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphPolar(); TGraphPolar(const TGraphPolar&); TGraphPolar(Int_t n, const Double_t* theta = 0, const Double_t* r = 0, const Double_t* etheta = 0, const Double_t* er = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**TGraphErrors::Allocate(Int_t size); Double_t**TGraph::",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolar.html:1703,Usability,Clear,Clear,1703," virtual~TGraphPolar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGraphErrors::Apply(TF1* f); virtual voidTGraph::Browse(TBrowser* b); static Int_tTGraphErrors::CalculateScanfFields(const char* fmt); virtual Double_tTGraph::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tTGraph::CompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareRadius(const TGraph* gr, Int_t left, Int_t ri",MatchSource.WIKI,root/html604/TGraphPolar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolar.html
https://root.cern/root/html604/TGraphPolargram.html:1896,Availability,Error,Error,1896," virtual~TGraphPolargram(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidChangeRangePolar(Double_t tmin, Double_t tmax); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, con",MatchSource.WIKI,root/html604/TGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolargram.html
https://root.cern/root/html604/TGraphPolargram.html:2025,Availability,error,error,2025,"ual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidChangeRangePolar(Double_t tmin, Double_t tmax); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetAngle(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TNamed::GetName() const; Int_tGetNdivPolar(); Int_tGetNdivRadial(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Color_tGetPolarColorLabel(); Font_tGetPolarLabelFont(); Double_tGetPolarL",MatchSource.WIKI,root/html604/TGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolargram.html
https://root.cern/root/html604/TGraphPolargram.html:2109,Availability,error,error,2109,"ser* b); voidChangeRangePolar(Double_t tmin, Double_t tmax); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetAngle(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TNamed::GetName() const; Int_tGetNdivPolar(); Int_tGetNdivRadial(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Color_tGetPolarColorLabel(); Font_tGetPolarLabelFont(); Double_tGetPolarLabelSize(); Double_tGetPolarOffset(); Color_tGetRadialColorLabel(); Font_tGetRadialL",MatchSource.WIKI,root/html604/TGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolargram.html
https://root.cern/root/html604/TGraphPolargram.html:12844,Energy Efficiency,Reduce,ReduceFraction,12844,"erything within the circle belongs to the TGraphPolargram. void Draw(Option_t* options = """"); Draw Polargram. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Indicate that there is something to click here. Int_t FindAlign(Double_t angle); Find the alignement rule to apply for TText::SetTextAlign(Short_t). Double_t FindTextAngle(Double_t theta); Determine the orientation of the polar labels according to their angle. void Init(); Initiallize some of the fields of TGraphPolargram. void Paint(Option_t* options = """"); Paint TGraphPolargram. void PaintCircle(Double_t x, Double_t y, Double_t r, Double_t phimin, Double_t phimax, Double_t theta); This is simplifed from TEllipse::PaintEllipse.; Draw this ellipse with new coordinates. void PaintPolarDivisions(Bool_t noLabels); Draw Polar divisions.; Check for editable pad or create default. void PaintRadialDivisions(Bool_t drawaxis); Paint radial divisions.; Check for editable pad or create default. void ReduceFraction(Int_t Num, Int_t Denom, Int_t& rnum, Int_t& rden); Reduce fractions. void SetAxisAngle(Double_t angle = 0); Set axis angle. void SetNdivPolar(Int_t Ndiv = 508); Set the number of Polar divisions: enter a number ij with 0<i<99; 0<j<99; i sets the major Polar divisions.; j sets the minor Polar divisions. void SetNdivRadial(Int_t Ndiv = 508); Set the number of radial divisions: enter a number ij with 0<i<99; 0<j<99; i sets the major radial divisions.; j sets the minor radial divisions. void SetPolarLabel(Int_t div, const TString& label); Set some specified polar labels, used in the case of a spider plot. void SetPolarLabelColor(Color_t tcolorangular = 1); Set Polar labels color. void SetPolarLabelFont(Font_t tfontangular = 62). void SetPolarLabelSize(Double_t angularsize = 0.040000000000000001); Set angular labels size. void SetPolarOffset(Double_t PolarOffset = 0.040000000000000001); Set the labels offset. void SetRadialLabelColor(Color_t tcolorradial = 1); Set radial labels color. void SetRadialLabelFont(Font_",MatchSource.WIKI,root/html604/TGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolargram.html
https://root.cern/root/html604/TGraphPolargram.html:12910,Energy Efficiency,Reduce,Reduce,12910,"erything within the circle belongs to the TGraphPolargram. void Draw(Option_t* options = """"); Draw Polargram. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Indicate that there is something to click here. Int_t FindAlign(Double_t angle); Find the alignement rule to apply for TText::SetTextAlign(Short_t). Double_t FindTextAngle(Double_t theta); Determine the orientation of the polar labels according to their angle. void Init(); Initiallize some of the fields of TGraphPolargram. void Paint(Option_t* options = """"); Paint TGraphPolargram. void PaintCircle(Double_t x, Double_t y, Double_t r, Double_t phimin, Double_t phimax, Double_t theta); This is simplifed from TEllipse::PaintEllipse.; Draw this ellipse with new coordinates. void PaintPolarDivisions(Bool_t noLabels); Draw Polar divisions.; Check for editable pad or create default. void PaintRadialDivisions(Bool_t drawaxis); Paint radial divisions.; Check for editable pad or create default. void ReduceFraction(Int_t Num, Int_t Denom, Int_t& rnum, Int_t& rden); Reduce fractions. void SetAxisAngle(Double_t angle = 0); Set axis angle. void SetNdivPolar(Int_t Ndiv = 508); Set the number of Polar divisions: enter a number ij with 0<i<99; 0<j<99; i sets the major Polar divisions.; j sets the minor Polar divisions. void SetNdivRadial(Int_t Ndiv = 508); Set the number of radial divisions: enter a number ij with 0<i<99; 0<j<99; i sets the major radial divisions.; j sets the minor radial divisions. void SetPolarLabel(Int_t div, const TString& label); Set some specified polar labels, used in the case of a spider plot. void SetPolarLabelColor(Color_t tcolorangular = 1); Set Polar labels color. void SetPolarLabelFont(Font_t tfontangular = 62). void SetPolarLabelSize(Double_t angularsize = 0.040000000000000001); Set angular labels size. void SetPolarOffset(Double_t PolarOffset = 0.040000000000000001); Set the labels offset. void SetRadialLabelColor(Color_t tcolorradial = 1); Set radial labels color. void SetRadialLabelFont(Font_",MatchSource.WIKI,root/html604/TGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolargram.html
https://root.cern/root/html604/TGraphPolargram.html:3790,Modifiability,Inherit,InheritsFrom,3790,"ivRadial(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Color_tGetPolarColorLabel(); Font_tGetPolarLabelFont(); Double_tGetPolarLabelSize(); Double_tGetPolarOffset(); Color_tGetRadialColorLabel(); Font_tGetRadialLabelFont(); Double_tGetRadialLabelSize(); Double_tGetRadialOffset(); Double_tGetRMax(); Double_tGetRMin(); virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual Color_tTAttText::GetTextColor() const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; Double_tGetTickpolarSize(); virtual const char*TNamed::GetTitle() const; Double_tGetTMax(); Double_tGetTMin(); virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsDegree(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsGrad(); Bool_tTObject::IsOnHeap() const; Bool_tIsRadian(); virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttText::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* ",MatchSource.WIKI,root/html604/TGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolargram.html
https://root.cern/root/html604/TGraphPolargram.html:3856,Modifiability,Inherit,InheritsFrom,3856,") const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Color_tGetPolarColorLabel(); Font_tGetPolarLabelFont(); Double_tGetPolarLabelSize(); Double_tGetPolarOffset(); Color_tGetRadialColorLabel(); Font_tGetRadialLabelFont(); Double_tGetRadialLabelSize(); Double_tGetRadialOffset(); Double_tGetRMax(); Double_tGetRMin(); virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual Color_tTAttText::GetTextColor() const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; Double_tGetTickpolarSize(); virtual const char*TNamed::GetTitle() const; Double_tGetTMax(); Double_tGetTMin(); virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsDegree(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsGrad(); Bool_tTObject::IsOnHeap() const; Bool_tIsRadian(); virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttText::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operat",MatchSource.WIKI,root/html604/TGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolargram.html
https://root.cern/root/html604/TGraphPolargram.html:11365,Modifiability,Inherit,Inheritance,11365,"ize; TStringTNamed::fTitleobject title. private:. Double_tfAxisAngleSet angle of the radial axis; Int_tfCutRadialif fCutRadial = 0, circles are cut by radial axis; Bool_tfDegree; Bool_tfGrad; Int_tfNdivPolNumber of polar divisions; Int_tfNdivRadNumber of radial divisions; Color_tfPolarLabelColorSet color of the angular labels; Font_tfPolarLabelFontSet font of angular labels; TString*fPolarLabels![fNdivPol] Specified polar labels; Double_tfPolarOffsetOffset for Polar labels; Double_tfPolarTextSizeSet Polar text size; Color_tfRadialLabelColorSet color of the radial labels; Font_tfRadialLabelFontSet font of radial labels; Double_tfRadialOffsetOffset for radial labels; Double_tfRadialTextSize; Bool_tfRadian; Double_tfRwrmaxMaximal radial value (real world); Double_tfRwrminMinimal radial value (real world); Double_tfRwtmaxMinimal angular value (real world); Double_tfRwtminMinimal angular value (real world); Double_tfTickpolarSizeSet size of Tickmarks. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphPolargram(const char* name, Double_t rmin, Double_t rmax, Double_t tmin, Double_t tmax); TGraphPolargram Constructor. TGraphPolargram(const char* name = """"); Short constructor used in the case of a spider plot. ~TGraphPolargram(); TGraphPolargram destructor. void ChangeRangePolar(Double_t tmin, Double_t tmax); Set the Polar range.; tmin is the start number.; tmax is the end number. Int_t DistancetoPrimitive(Int_t px, Int_t py); Everything within the circle belongs to the TGraphPolargram. void Draw(Option_t* options = """"); Draw Polargram. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Indicate that there is something to click here. Int_t FindAlign(Double_t angle); Find the alignement rule to apply for TText::SetTextAlign(Short_t). Double_t FindTextAngle(Double_t theta); Determine the orientation of the polar labels according to their angle. void Init(); Initiallize some of the fields of TGraphPolargram. void Paint(Option_t* o",MatchSource.WIKI,root/html604/TGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolargram.html
https://root.cern/root/html604/TGraphPolargram.html:11378,Modifiability,Inherit,Inherited,11378,"ize; TStringTNamed::fTitleobject title. private:. Double_tfAxisAngleSet angle of the radial axis; Int_tfCutRadialif fCutRadial = 0, circles are cut by radial axis; Bool_tfDegree; Bool_tfGrad; Int_tfNdivPolNumber of polar divisions; Int_tfNdivRadNumber of radial divisions; Color_tfPolarLabelColorSet color of the angular labels; Font_tfPolarLabelFontSet font of angular labels; TString*fPolarLabels![fNdivPol] Specified polar labels; Double_tfPolarOffsetOffset for Polar labels; Double_tfPolarTextSizeSet Polar text size; Color_tfRadialLabelColorSet color of the radial labels; Font_tfRadialLabelFontSet font of radial labels; Double_tfRadialOffsetOffset for radial labels; Double_tfRadialTextSize; Bool_tfRadian; Double_tfRwrmaxMaximal radial value (real world); Double_tfRwrminMinimal radial value (real world); Double_tfRwtmaxMinimal angular value (real world); Double_tfRwtminMinimal angular value (real world); Double_tfTickpolarSizeSet size of Tickmarks. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphPolargram(const char* name, Double_t rmin, Double_t rmax, Double_t tmin, Double_t tmax); TGraphPolargram Constructor. TGraphPolargram(const char* name = """"); Short constructor used in the case of a spider plot. ~TGraphPolargram(); TGraphPolargram destructor. void ChangeRangePolar(Double_t tmin, Double_t tmax); Set the Polar range.; tmin is the start number.; tmax is the end number. Int_t DistancetoPrimitive(Int_t px, Int_t py); Everything within the circle belongs to the TGraphPolargram. void Draw(Option_t* options = """"); Draw Polargram. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Indicate that there is something to click here. Int_t FindAlign(Double_t angle); Find the alignement rule to apply for TText::SetTextAlign(Short_t). Double_t FindTextAngle(Double_t theta); Determine the orientation of the polar labels according to their angle. void Init(); Initiallize some of the fields of TGraphPolargram. void Paint(Option_t* o",MatchSource.WIKI,root/html604/TGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolargram.html
https://root.cern/root/html604/TGraphPolargram.html:3680,Security,Hash,Hash,3680,"Width_tTAttLine::GetLineWidth() const; virtual const char*TNamed::GetName() const; Int_tGetNdivPolar(); Int_tGetNdivRadial(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Color_tGetPolarColorLabel(); Font_tGetPolarLabelFont(); Double_tGetPolarLabelSize(); Double_tGetPolarOffset(); Color_tGetRadialColorLabel(); Font_tGetRadialLabelFont(); Double_tGetRadialLabelSize(); Double_tGetRadialOffset(); Double_tGetRMax(); Double_tGetRMin(); virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual Color_tTAttText::GetTextColor() const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; Double_tGetTickpolarSize(); virtual const char*TNamed::GetTitle() const; Double_tGetTMax(); Double_tGetTMin(); virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsDegree(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsGrad(); Bool_tTObject::IsOnHeap() const; Bool_tIsRadian(); virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttText::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator ",MatchSource.WIKI,root/html604/TGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolargram.html
https://root.cern/root/html604/TGraphPolargram.html:8251,Testability,Test,TestBit,8251,"AttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextColorAlpha(Color_t tcolor, Float_t talpha); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); voidSetTickpolarSize(Double_t tickpolarsize = 0.02)MENU ; virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetToDegree()MENU ; voidSetToGrad()MENU ; voidSetToRadian()MENU ; voidSetTwoPi(); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphPolargram(const char* name = """"); TGraphPolargram(const TGraphPolargram&); TGraphPolargram(const char* name, Double_t rmin, Double_t rmax, Double_t tmin, Double_t tmax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. Int_tFindAlign(Double_t angle); Double_tFindTextAngle(Double_t theta); voidInit(); virtual voidPaint(Option_t* options = """"); voidPaintPolarDivisions(Bool_t noLabels); voidPaintRadialDivisions(Bool_t drawaxis); voidReduceFraction(Int_t Num, Int_t Denom, Int_t& rnum, Int_t& rden). Data Members; public:. static TObject::(anonymous)TObject::kBitM",MatchSource.WIKI,root/html604/TGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolargram.html
https://root.cern/root/html604/TGraphPolargram.html:8290,Testability,Test,TestBits,8290,"AttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextColorAlpha(Color_t tcolor, Float_t talpha); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); voidSetTickpolarSize(Double_t tickpolarsize = 0.02)MENU ; virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetToDegree()MENU ; voidSetToGrad()MENU ; voidSetToRadian()MENU ; voidSetTwoPi(); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphPolargram(const char* name = """"); TGraphPolargram(const TGraphPolargram&); TGraphPolargram(const char* name, Double_t rmin, Double_t rmax, Double_t tmin, Double_t tmax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. Int_tFindAlign(Double_t angle); Double_tFindTextAngle(Double_t theta); voidInit(); virtual voidPaint(Option_t* options = """"); voidPaintPolarDivisions(Bool_t noLabels); voidPaintRadialDivisions(Bool_t drawaxis); voidReduceFraction(Int_t Num, Int_t Denom, Int_t& rnum, Int_t& rden). Data Members; public:. static TObject::(anonymous)TObject::kBitM",MatchSource.WIKI,root/html604/TGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolargram.html
https://root.cern/root/html604/TGraphPolargram.html:1263,Usability,Clear,Clear,1263," virtual~TGraphPolargram(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidChangeRangePolar(Double_t tmin, Double_t tmax); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, con",MatchSource.WIKI,root/html604/TGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolargram.html
https://root.cern/root/html604/TGraphPolargram.html:12540,Usability,simpl,simplifed,12540,"ax, Double_t tmin, Double_t tmax); TGraphPolargram Constructor. TGraphPolargram(const char* name = """"); Short constructor used in the case of a spider plot. ~TGraphPolargram(); TGraphPolargram destructor. void ChangeRangePolar(Double_t tmin, Double_t tmax); Set the Polar range.; tmin is the start number.; tmax is the end number. Int_t DistancetoPrimitive(Int_t px, Int_t py); Everything within the circle belongs to the TGraphPolargram. void Draw(Option_t* options = """"); Draw Polargram. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Indicate that there is something to click here. Int_t FindAlign(Double_t angle); Find the alignement rule to apply for TText::SetTextAlign(Short_t). Double_t FindTextAngle(Double_t theta); Determine the orientation of the polar labels according to their angle. void Init(); Initiallize some of the fields of TGraphPolargram. void Paint(Option_t* options = """"); Paint TGraphPolargram. void PaintCircle(Double_t x, Double_t y, Double_t r, Double_t phimin, Double_t phimax, Double_t theta); This is simplifed from TEllipse::PaintEllipse.; Draw this ellipse with new coordinates. void PaintPolarDivisions(Bool_t noLabels); Draw Polar divisions.; Check for editable pad or create default. void PaintRadialDivisions(Bool_t drawaxis); Paint radial divisions.; Check for editable pad or create default. void ReduceFraction(Int_t Num, Int_t Denom, Int_t& rnum, Int_t& rden); Reduce fractions. void SetAxisAngle(Double_t angle = 0); Set axis angle. void SetNdivPolar(Int_t Ndiv = 508); Set the number of Polar divisions: enter a number ij with 0<i<99; 0<j<99; i sets the major Polar divisions.; j sets the minor Polar divisions. void SetNdivRadial(Int_t Ndiv = 508); Set the number of radial divisions: enter a number ij with 0<i<99; 0<j<99; i sets the major radial divisions.; j sets the minor radial divisions. void SetPolarLabel(Int_t div, const TString& label); Set some specified polar labels, used in the case of a spider plot. void SetPolarLabelColor(Color_t tco",MatchSource.WIKI,root/html604/TGraphPolargram.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphPolargram.html
https://root.cern/root/html604/TGraphQQ.html:826,Availability,robust,robust,826,". TGraphQQ. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TGraphQQ. class TGraphQQ: public TGraph. This class allows to draw quantile-quantile plots. Plots can be drawn for 2 datasets or for a dataset and a theoretical; distribution function. 2 datasets:; Quantile-quantile plots are used to determine whether 2 samples come from; the same distribution.; A qq-plot draws the quantiles of one dataset against the quantile of the; the other. The quantiles of the dataset with fewer entries are on Y axis,; with more entries - on X axis.; A straight line, going through 0.25 and 0.75 quantiles is also plotted; for reference. It represents a robust linear fit, not sensitive to the; extremes of the datasets.; If the datasets come from the same distribution, points of the plot should; fall approximately on the 45 degrees line. If they have the same; distribution function, but location or scale different parameters,; they should still fall on the straight line, but not the 45 degrees one.; The greater their departure from the straight line, the more evidence there; is, that the datasets come from different distributions.; The advantage of qq-plot is that it not only shows that the underlying; distributions are different, but, unlike the analytical methods, it also; gives information on the nature of this difference: heavier tails,; different location/scale, different shape, etc. Some examples of qqplots of 2 datasets:. /*. */. 1 dataset:; Quantile-quantile plots are used to determine if the dataset comes from the; specified theoretical distribution, such as normal.; A qq-plot draws quantiles of the dataset against quantiles of the specified; theoretical distribution.; (NOTE, that density, not CDF should be specified); A straight line, going through 0.25 and 0.75 quantiles can also be plotted; for ",MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphQQ.html:2028,Availability,robust,robust,2028,"ction, but location or scale different parameters,; they should still fall on the straight line, but not the 45 degrees one.; The greater their departure from the straight line, the more evidence there; is, that the datasets come from different distributions.; The advantage of qq-plot is that it not only shows that the underlying; distributions are different, but, unlike the analytical methods, it also; gives information on the nature of this difference: heavier tails,; different location/scale, different shape, etc. Some examples of qqplots of 2 datasets:. /*. */. 1 dataset:; Quantile-quantile plots are used to determine if the dataset comes from the; specified theoretical distribution, such as normal.; A qq-plot draws quantiles of the dataset against quantiles of the specified; theoretical distribution.; (NOTE, that density, not CDF should be specified); A straight line, going through 0.25 and 0.75 quantiles can also be plotted; for reference. It represents a robust linear fit, not sensitive to the; extremes of the dataset.; As in the 2 datasets case, departures from straight line indicate departures; from the specified distribution. "" The correlation coefficient associated with the linear fit to the data; in the probability plot (qq plot in our case) is a measure of the; goodness of the fit.; Estimates of the location and scale parameters of the distribution; are given by the intercept and slope. Probability plots can be generated; for several competing distributions to see which provides the best fit,; and the probability plot generating the highest correlation coefficient; is the best choice since it generates the straightest probability plot.""; From ""Engineering statistic handbook"",; http://www.itl.nist.gov/div898/handbook/eda/section3/probplot.htm. Example of a qq-plot of a dataset from N(3, 2) distribution and; TMath::Gaus(0, 1) theoretical function. Fitting parameters; are estimates of the distribution mean and sigma. /*. */; //. References:; http://www.itl",MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphQQ.html:4971,Availability,Error,Error,4971,":CompareY(const TGraph* gr, Int_t left, Int_t right); virtual voidTGraph::ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidT",MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphQQ.html:5192,Availability,error,error,5192,"ject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidTGraph::FitPanel()MENU ; virtual Double_tTGraph::GetCorrelationFactor() const; virtual Double_tTGraph::GetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGra",MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphQQ.html:5276,Availability,error,error,5276,"t_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidTGraph::FitPanel()MENU ; virtual Double_tTGraph::GetCorrelationFactor() const; virtual Double_tTGraph::GetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGraph::GetEditable() const; virtual Double_tTGraph::GetErrorX(Int_t bin) const; virtual",MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphQQ.html:11964,Deployability,TOGGLE,TOGGLE,11964,"etAttFill(Option_t* option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); virtual voidTAttMarker::ResetAttMarker(Option_t* toption = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTAttMarker::SaveMarkerAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t sizdef = 1); virtual voidTGraph::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTGraph::Set(Int_t n); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGraph::SetEditable(Bool_t editable = kTRUE)TOGGLE GETTER ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); voidSetFunction(TF1* f); virtual voidTGraph::SetHistogram(TH1F* h); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTGraph::SetMaximum(Double_t maximum = -1111)MENU ; virtual voidTGraph::SetMinimum(Double_t minimum =",MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphQQ.html:14431,Energy Efficiency,Allocate,Allocate,14431,"TGraphQQ(Int_t n, Double_t* x); TGraphQQ(Int_t n, Double_t* x, TF1* f); TGraphQQ(Int_t nx, Double_t* x, Int_t ny, Double_t* y); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**TGraph::Allocate(Int_t newsize); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidTGraph::CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tTGraph::CopyPoints(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tTGraph::CtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tTGraph::DoMerge(const TGraph* g); Double_t**TGraph::ExpandAndCopy(Int_t size, Int_t iend); virtual voidTGraph::FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidMakeFunctionQuantiles(); voidMakeQuantiles(); voidTObject::MakeZombie(); voidQuartiles(); Double_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidTGraph::SwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGraph::(anonymous)TGraph::kClipFrame; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNo",MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphQQ.html:14474,Energy Efficiency,Allocate,AllocateArrays,14474,"TGraphQQ(Int_t n, Double_t* x); TGraphQQ(Int_t n, Double_t* x, TF1* f); TGraphQQ(Int_t nx, Double_t* x, Int_t ny, Double_t* y); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**TGraph::Allocate(Int_t newsize); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidTGraph::CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tTGraph::CopyPoints(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tTGraph::CtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tTGraph::DoMerge(const TGraph* g); Double_t**TGraph::ExpandAndCopy(Int_t size, Int_t iend); virtual voidTGraph::FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidMakeFunctionQuantiles(); voidMakeQuantiles(); voidTObject::MakeZombie(); voidQuartiles(); Double_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidTGraph::SwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGraph::(anonymous)TGraph::kClipFrame; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNo",MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphQQ.html:8556,Modifiability,Inherit,InheritsFrom,8556,"e_tTGraph::GetMaximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_tGetXq1() const; Double_tGetXq2() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; Double_tGetYq1() const; Double_tGetYq2() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTGraph::LeastSquareFit(Int_t m, Double_t* a, Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::Lea",MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphQQ.html:8622,Modifiability,Inherit,InheritsFrom,8622,"rtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_tGetXq1() const; Double_tGetXq2() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; Double_tGetYq1() const; Double_tGetYq2() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTGraph::LeastSquareFit(Int_t m, Double_t* a, Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::LeastSquareLinearFit(Int_t n, Double_t& a0, Double_t& a1, Int_t& ifai",MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphQQ.html:17403,Modifiability,Inherit,Inheritance,17403,"rawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; Int_tfNy0size of the fY0 dataset; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_tfXq1x1 coordinate of the interquartile line; Double_tfXq2x2 coordinate of the interquartile line; Double_t*TGraph::fY[fNpoints] array of Y points; Double_t*fY0!second dataset, if specified; Double_tfYq1y1 coordinate of the interquartile line; Double_tfYq2y2 coordinate of the interquartile line. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphQQ(); default constructor. TGraphQQ(Int_t n, Double_t* x); Creates a quantile-quantile plot of dataset x.; Theoretical distribution function can be defined later by SetFunction method. TGraphQQ(Int_t n, Double_t* x, TF1* f); Creates a quantile-quantile plot of dataset x against function f. TGraphQQ(Int_t nx, Double_t* x, Int_t ny, Double_t* y); Creates a quantile-quantile plot of dataset x against dataset y; Parameters nx and ny are respective array sizes. ~TGraphQQ(); Destroys a TGraphQQ. void MakeFunctionQuantiles(); Computes quantiles of theoretical distribution function. void MakeQuantiles(); When sample sizes are not equal, computes quantiles of the bigger sample; by linear interpolation. void Quartiles(); compute quartiles; a quartile is a 25 per cent or 75 per cent quantile. void SetFunction(TF1* f); Sets the theoretical distribution function (density!); and computes its quantiles. TGraphQQ(). Double_t GetXq1() const; {ret",MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphQQ.html:17416,Modifiability,Inherit,Inherited,17416,"rawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; Int_tfNy0size of the fY0 dataset; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_tfXq1x1 coordinate of the interquartile line; Double_tfXq2x2 coordinate of the interquartile line; Double_t*TGraph::fY[fNpoints] array of Y points; Double_t*fY0!second dataset, if specified; Double_tfYq1y1 coordinate of the interquartile line; Double_tfYq2y2 coordinate of the interquartile line. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphQQ(); default constructor. TGraphQQ(Int_t n, Double_t* x); Creates a quantile-quantile plot of dataset x.; Theoretical distribution function can be defined later by SetFunction method. TGraphQQ(Int_t n, Double_t* x, TF1* f); Creates a quantile-quantile plot of dataset x against function f. TGraphQQ(Int_t nx, Double_t* x, Int_t ny, Double_t* y); Creates a quantile-quantile plot of dataset x against dataset y; Parameters nx and ny are respective array sizes. ~TGraphQQ(); Destroys a TGraphQQ. void MakeFunctionQuantiles(); Computes quantiles of theoretical distribution function. void MakeQuantiles(); When sample sizes are not equal, computes quantiles of the bigger sample; by linear interpolation. void Quartiles(); compute quartiles; a quartile is a 25 per cent or 75 per cent quantile. void SetFunction(TF1* f); Sets the theoretical distribution function (density!); and computes its quantiles. TGraphQQ(). Double_t GetXq1() const; {ret",MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphQQ.html:8446,Security,Hash,Hash,8446,") const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; Double_tTGraph::GetMaximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_tGetXq1() const; Double_tGetXq2() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; Double_tGetYq1() const; Double_tGetYq2() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtu",MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphQQ.html:13750,Testability,Test,TestBit,13750,"ne::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTGraph::SetMaximum(Double_t maximum = -1111)MENU ; virtual voidTGraph::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphQQ(); TGraphQQ(const TGraphQQ&); TGraphQQ(Int_t n, Double_t* x); TGraphQQ(Int_t n, Double_t* x, TF1* f); TGraphQQ(Int_t nx, Double_t* x, Int_t ny, Double_t* y); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations).",MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphQQ.html:13789,Testability,Test,TestBits,13789,"ne::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTGraph::SetMaximum(Double_t maximum = -1111)MENU ; virtual voidTGraph::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphQQ(); TGraphQQ(const TGraphQQ&); TGraphQQ(Int_t n, Double_t* x); TGraphQQ(Int_t n, Double_t* x, TF1* f); TGraphQQ(Int_t nx, Double_t* x, Int_t ny, Double_t* y); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations).",MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphQQ.html:3576,Usability,Clear,Clear,3576,,MatchSource.WIKI,root/html604/TGraphQQ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphQQ.html
https://root.cern/root/html604/TGraphSmooth.html:2087,Availability,Error,Error,2087,"_t np, Int_t kernel, Double_t bw); static voidBDRsmooth(Int_t n, Double_t* x, Double_t* y, Double_t* w, Double_t span, Int_t iper, Double_t vsmlsq, Double_t* smo, Double_t* acvr); static voidBDRsupsmu(Int_t n, Double_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer);",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:2216,Availability,error,error,2216,", Double_t vsmlsq, Double_t* smo, Double_t* acvr); static voidBDRsupsmu(Int_t n, Double_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObj",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:2300,Availability,error,error,2300,"ble_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:4766,Availability,down,down,4766,"_t* x, Double_t* y, Int_t n, Double_t& xs, Double_t& ys, Int_t nleft, Int_t nright, Double_t* w, Bool_t userw, Double_t* rw, Bool_t& ok); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; static voidPsort(Double_t* x, Int_t n, Int_t k); static voidRank(Int_t n, Double_t* a, Int_t* index, Int_t* rank, Bool_t down = kTRUE); static Int_tRcmp(Double_t x, Double_t y); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; voidSmoothin(TGraph* grin); TGraph*SmoothKern(TGraph* grin, Option_t* option = ""normal"", Double_t band",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:9841,Availability,robust,robustifying,9841,", where; nout = max(nout, number of input data).; xout: an optional set of values at which to evaluate the fit. void BDRksmooth(Double_t* x, Double_t* y, Int_t n, Double_t* xp, Double_t* yp, Int_t np, Int_t kernel, Double_t bw); Smooth data with specified kernel*-*-; *-* =================================. Based on R function ksmooth: Translated to C++ by C. Stratowa; (R source file: ksmooth.c by B.D.Ripley Copyright (C) 1998). -. TGraph * SmoothLowess(TGraph* grin, Option_t* option = """", Double_t span = 0.67000000000000004, Int_t iter = 3, Double_t delta = 0); Smooth data with Lowess smoother*-*-. This function performs the computations for the LOWESS smoother; (see the reference below). Lowess returns the output points; x and y which give the coordinates of the smooth. Arguments:; grin: Input graph. span: the smoother span. This gives the proportion of points in the plot; which influence the smooth at each value.; Larger values give more smoothness.; iter: the number of robustifying iterations which should be performed.; Using smaller values of iter will make lowess run faster.; delta: values of x which lie within delta of each other replaced by a; single value in the output from lowess.; For delta = 0, delta will be calculated. References:; Cleveland, W. S. (1979) Robust locally weighted regression and smoothing; scatterplots. J. Amer. Statist. Assoc. 74, 829-836.; Cleveland, W. S. (1981) LOWESS: A program for smoothing scatterplots; by robust locally weighted regression.; The American Statistician, 35, 54. void Lowess(Double_t* x, Double_t* y, Int_t n, Double_t* ys, Double_t span, Int_t iter, Double_t delta); Lowess regression smoother*-*-*-*-*-. Based on R function clowess: Translated to C++ by C. Stratowa; (R source file: lowess.c by R Development Core Team (C) 1999-2001). -. void Lowest(Double_t* x, Double_t* y, Int_t n, Double_t& xs, Double_t& ys, Int_t nleft, Int_t nright, Double_t* w, Bool_t userw, Double_t* rw, Bool_t& ok); Fit value at x[i] *-*-*-*-*-*-*-",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:10142,Availability,Robust,Robust,10142,"n R function ksmooth: Translated to C++ by C. Stratowa; (R source file: ksmooth.c by B.D.Ripley Copyright (C) 1998). -. TGraph * SmoothLowess(TGraph* grin, Option_t* option = """", Double_t span = 0.67000000000000004, Int_t iter = 3, Double_t delta = 0); Smooth data with Lowess smoother*-*-. This function performs the computations for the LOWESS smoother; (see the reference below). Lowess returns the output points; x and y which give the coordinates of the smooth. Arguments:; grin: Input graph. span: the smoother span. This gives the proportion of points in the plot; which influence the smooth at each value.; Larger values give more smoothness.; iter: the number of robustifying iterations which should be performed.; Using smaller values of iter will make lowess run faster.; delta: values of x which lie within delta of each other replaced by a; single value in the output from lowess.; For delta = 0, delta will be calculated. References:; Cleveland, W. S. (1979) Robust locally weighted regression and smoothing; scatterplots. J. Amer. Statist. Assoc. 74, 829-836.; Cleveland, W. S. (1981) LOWESS: A program for smoothing scatterplots; by robust locally weighted regression.; The American Statistician, 35, 54. void Lowess(Double_t* x, Double_t* y, Int_t n, Double_t* ys, Double_t span, Int_t iter, Double_t delta); Lowess regression smoother*-*-*-*-*-. Based on R function clowess: Translated to C++ by C. Stratowa; (R source file: lowess.c by R Development Core Team (C) 1999-2001). -. void Lowest(Double_t* x, Double_t* y, Int_t n, Double_t& xs, Double_t& ys, Int_t nleft, Int_t nright, Double_t* w, Bool_t userw, Double_t* rw, Bool_t& ok); Fit value at x[i] *-*-*-*-*-*-*-*-*-. Based on R function lowest: Translated to C++ by C. Stratowa; (R source file: lowess.c by R Development Core Team (C) 1999-2001). -. TGraph * SmoothSuper(TGraph* grin, Option_t* option = """", Double_t bass = 0, Double_t span = 0, Bool_t isPeriodic = kFALSE, Double_t* w = 0); Smooth data with Super smoother*-*",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:10318,Availability,robust,robust,10318,"ess(TGraph* grin, Option_t* option = """", Double_t span = 0.67000000000000004, Int_t iter = 3, Double_t delta = 0); Smooth data with Lowess smoother*-*-. This function performs the computations for the LOWESS smoother; (see the reference below). Lowess returns the output points; x and y which give the coordinates of the smooth. Arguments:; grin: Input graph. span: the smoother span. This gives the proportion of points in the plot; which influence the smooth at each value.; Larger values give more smoothness.; iter: the number of robustifying iterations which should be performed.; Using smaller values of iter will make lowess run faster.; delta: values of x which lie within delta of each other replaced by a; single value in the output from lowess.; For delta = 0, delta will be calculated. References:; Cleveland, W. S. (1979) Robust locally weighted regression and smoothing; scatterplots. J. Amer. Statist. Assoc. 74, 829-836.; Cleveland, W. S. (1981) LOWESS: A program for smoothing scatterplots; by robust locally weighted regression.; The American Statistician, 35, 54. void Lowess(Double_t* x, Double_t* y, Int_t n, Double_t* ys, Double_t span, Int_t iter, Double_t delta); Lowess regression smoother*-*-*-*-*-. Based on R function clowess: Translated to C++ by C. Stratowa; (R source file: lowess.c by R Development Core Team (C) 1999-2001). -. void Lowest(Double_t* x, Double_t* y, Int_t n, Double_t& xs, Double_t& ys, Int_t nleft, Int_t nright, Double_t* w, Bool_t userw, Double_t* rw, Bool_t& ok); Fit value at x[i] *-*-*-*-*-*-*-*-*-. Based on R function lowest: Translated to C++ by C. Stratowa; (R source file: lowess.c by R Development Core Team (C) 1999-2001). -. TGraph * SmoothSuper(TGraph* grin, Option_t* option = """", Double_t bass = 0, Double_t span = 0, Bool_t isPeriodic = kFALSE, Double_t* w = 0); Smooth data with Super smoother*-*-*-. Smooth the (x, y) values by Friedman's ``super smoother''. Arguments:; grin: graph for smoothing. span: the fraction of the observat",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:17886,Availability,down,down,17886,"argument returning a single number result:; ties = ""ordered"" (iTies = 0): input x are ""ordered""; ties = ""mean"" (iTies = 1): function ""mean""; ties = ""min"" (iTies = 2): function ""min""; ties = ""max"" (iTies = 3): function ""max"". Details:; At least two complete (x, y) pairs are required.; If there are duplicated (tied) x values and ties is a function it is; applied to the y values for each distinct x value. Useful functions in; this context include mean, min, and max.; If ties=""ordered"" the x values are assumed to be already ordered. The; first y value will be used for interpolation to the left and the last; one for interpolation to the right. Value:; approx returns a graph with components x and y, containing n coordinates; which interpolate the given data points according to the method (and rule); desired. Double_t Approx1(Double_t v, Double_t f, Double_t* x, Double_t* y, Int_t n, Int_t iKind, Double_t Ylow, Double_t Yhigh); Approximate one data point*-*-*-*-*-; *-* ==========================. Approximate y(v), given (x,y)[i], i = 0,..,n-1; Based on R function approx1: Translated to C++ by Christian Stratowa; (R source file: approx.c by R Development Core Team (C) 1999-2001). Int_t Rcmp(Double_t x, Double_t y); static function; if (ISNAN(x)) return 1;; if (ISNAN(y)) return -1;. void Psort(Double_t* x, Int_t n, Int_t k); static function; based on R function rPsort: adapted to C++ by Christian Stratowa; (R source file: R_sort.c by R Development Core Team (C) 1999-2001). void Rank(Int_t n, Double_t* a, Int_t* index, Int_t* rank, Bool_t down = kTRUE); static function. TGraphSmooth(const TGraphSmooth& ). TGraphSmooth& operator=(const TGraphSmooth& ). » Author: Christian Stratowa 30/09/2001 » Copyright (c) 2001- , Dr. Christian Stratowa, Vienna, Austria. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:16058,Deployability,continuous,continuous,16058,"be specified:. option: specifies the interpolation method to be used.; Choices are ""linear"" (iKind = 1) or ""constant"" (iKind = 2).; nout: If xout is not specified, interpolation takes place at n equally; spaced points spanning the interval [min(x), max(x)], where; nout = max(nout, number of input data).; xout: an optional set of values specifying where interpolation is to; take place.; yleft: the value to be returned when input x values less than min(x).; The default is defined by the value of rule given below.; yright: the value to be returned when input x values greater than max(x).; The default is defined by the value of rule given below.; rule: an integer describing how interpolation is to take place outside; the interval [min(x), max(x)]. If rule is 0 then the given yleft; and yright values are returned, if it is 1 then 0 is returned; for such points and if it is 2, the value at the closest data; extreme is used.; f: For method=""constant"" a number between 0 and 1 inclusive,; indicating a compromise between left- and right-continuous step; functions. If y0 and y1 are the values to the left and right of; the point then the value is y0*f+y1*(1-f) so that f=0 is; right-continuous and f=1 is left-continuous; ties: Handling of tied x values. An integer describing a function with; a single vector argument returning a single number result:; ties = ""ordered"" (iTies = 0): input x are ""ordered""; ties = ""mean"" (iTies = 1): function ""mean""; ties = ""min"" (iTies = 2): function ""min""; ties = ""max"" (iTies = 3): function ""max"". Details:; At least two complete (x, y) pairs are required.; If there are duplicated (tied) x values and ties is a function it is; applied to the y values for each distinct x value. Useful functions in; this context include mean, min, and max.; If ties=""ordered"" the x values are assumed to be already ordered. The; first y value will be used for interpolation to the left and the last; one for interpolation to the right. Value:; approx returns a graph with co",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:16204,Deployability,continuous,continuous,16204,"nterpolation takes place at n equally; spaced points spanning the interval [min(x), max(x)], where; nout = max(nout, number of input data).; xout: an optional set of values specifying where interpolation is to; take place.; yleft: the value to be returned when input x values less than min(x).; The default is defined by the value of rule given below.; yright: the value to be returned when input x values greater than max(x).; The default is defined by the value of rule given below.; rule: an integer describing how interpolation is to take place outside; the interval [min(x), max(x)]. If rule is 0 then the given yleft; and yright values are returned, if it is 1 then 0 is returned; for such points and if it is 2, the value at the closest data; extreme is used.; f: For method=""constant"" a number between 0 and 1 inclusive,; indicating a compromise between left- and right-continuous step; functions. If y0 and y1 are the values to the left and right of; the point then the value is y0*f+y1*(1-f) so that f=0 is; right-continuous and f=1 is left-continuous; ties: Handling of tied x values. An integer describing a function with; a single vector argument returning a single number result:; ties = ""ordered"" (iTies = 0): input x are ""ordered""; ties = ""mean"" (iTies = 1): function ""mean""; ties = ""min"" (iTies = 2): function ""min""; ties = ""max"" (iTies = 3): function ""max"". Details:; At least two complete (x, y) pairs are required.; If there are duplicated (tied) x values and ties is a function it is; applied to the y values for each distinct x value. Useful functions in; this context include mean, min, and max.; If ties=""ordered"" the x values are assumed to be already ordered. The; first y value will be used for interpolation to the left and the last; one for interpolation to the right. Value:; approx returns a graph with components x and y, containing n coordinates; which interpolate the given data points according to the method (and rule); desired. Double_t Approx1(Double_t v, Double",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:16231,Deployability,continuous,continuous,16231,"nterpolation takes place at n equally; spaced points spanning the interval [min(x), max(x)], where; nout = max(nout, number of input data).; xout: an optional set of values specifying where interpolation is to; take place.; yleft: the value to be returned when input x values less than min(x).; The default is defined by the value of rule given below.; yright: the value to be returned when input x values greater than max(x).; The default is defined by the value of rule given below.; rule: an integer describing how interpolation is to take place outside; the interval [min(x), max(x)]. If rule is 0 then the given yleft; and yright values are returned, if it is 1 then 0 is returned; for such points and if it is 2, the value at the closest data; extreme is used.; f: For method=""constant"" a number between 0 and 1 inclusive,; indicating a compromise between left- and right-continuous step; functions. If y0 and y1 are the values to the left and right of; the point then the value is y0*f+y1*(1-f) so that f=0 is; right-continuous and f=1 is left-continuous; ties: Handling of tied x values. An integer describing a function with; a single vector argument returning a single number result:; ties = ""ordered"" (iTies = 0): input x are ""ordered""; ties = ""mean"" (iTies = 1): function ""mean""; ties = ""min"" (iTies = 2): function ""min""; ties = ""max"" (iTies = 3): function ""max"". Details:; At least two complete (x, y) pairs are required.; If there are duplicated (tied) x values and ties is a function it is; applied to the y values for each distinct x value. Useful functions in; this context include mean, min, and max.; If ties=""ordered"" the x values are assumed to be already ordered. The; first y value will be used for interpolation to the left and the last; one for interpolation to the right. Value:; approx returns a graph with components x and y, containing n coordinates; which interpolate the given data points according to the method (and rule); desired. Double_t Approx1(Double_t v, Double",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:17714,Energy Efficiency,adapt,adapted,17714,"argument returning a single number result:; ties = ""ordered"" (iTies = 0): input x are ""ordered""; ties = ""mean"" (iTies = 1): function ""mean""; ties = ""min"" (iTies = 2): function ""min""; ties = ""max"" (iTies = 3): function ""max"". Details:; At least two complete (x, y) pairs are required.; If there are duplicated (tied) x values and ties is a function it is; applied to the y values for each distinct x value. Useful functions in; this context include mean, min, and max.; If ties=""ordered"" the x values are assumed to be already ordered. The; first y value will be used for interpolation to the left and the last; one for interpolation to the right. Value:; approx returns a graph with components x and y, containing n coordinates; which interpolate the given data points according to the method (and rule); desired. Double_t Approx1(Double_t v, Double_t f, Double_t* x, Double_t* y, Int_t n, Int_t iKind, Double_t Ylow, Double_t Yhigh); Approximate one data point*-*-*-*-*-; *-* ==========================. Approximate y(v), given (x,y)[i], i = 0,..,n-1; Based on R function approx1: Translated to C++ by Christian Stratowa; (R source file: approx.c by R Development Core Team (C) 1999-2001). Int_t Rcmp(Double_t x, Double_t y); static function; if (ISNAN(x)) return 1;; if (ISNAN(y)) return -1;. void Psort(Double_t* x, Int_t n, Int_t k); static function; based on R function rPsort: adapted to C++ by Christian Stratowa; (R source file: R_sort.c by R Development Core Team (C) 1999-2001). void Rank(Int_t n, Double_t* a, Int_t* index, Int_t* rank, Bool_t down = kTRUE); static function. TGraphSmooth(const TGraphSmooth& ). TGraphSmooth& operator=(const TGraphSmooth& ). » Author: Christian Stratowa 30/09/2001 » Copyright (c) 2001- , Dr. Christian Stratowa, Vienna, Austria. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:3224,Modifiability,Inherit,InheritsFrom,3224,"rtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; voidLowess(Double_t* x, Double_t* y, Int_t n, Double_t* ys, Double_t span, Int_t iter, Double_t delta); static voidLowest(Double_t* x, Double_t* y, Int_t n, Double_t& xs, Double_t& ys, Int_t nleft, Int_t nright, Double_t* w, Bool_t userw, Double_t* rw, Bool_t& ok); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:3290,Modifiability,Inherit,InheritsFrom,3290,"_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; voidLowess(Double_t* x, Double_t* y, Int_t n, Double_t* ys, Double_t span, Int_t iter, Double_t delta); static voidLowest(Double_t* x, Double_t* y, Int_t n, Double_t& xs, Double_t& ys, Int_t nleft, Int_t nright, Double_t* w, Bool_t userw, Double_t* rw, Bool_t& ok); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operato",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:7964,Modifiability,Inherit,Inheritance,7964," TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGraph*fGinInput graph; TGraph*fGoutOutput graph; Double_tfMaxXMaximum value of array X; Double_tfMinXMinimum value of array X; TStringTNamed::fNameobject identifier; Int_tfNinNumber of input points; Int_tfNoutNumber of output points; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphSmooth(); Default GraphSmooth constructor *-*-. TGraphSmooth(const char* name); GraphSmooth constructor *-*-*-*-*-*-. ~TGraphSmooth(); GraphSmooth destructor*-*-*-*-*-*-*-. void Smoothin(TGraph* grin); Sort input data points*-*-*-*-*-*-*-. TGraph * SmoothKern(TGraph* grin, Option_t* option = ""normal"", Double_t bandwidth = 0.5, Int_t nout = 100, Double_t* xout = 0); Smooth data with Kernel smoother*-*-. Smooth grin with the Nadaraya-Watson kernel regression estimate. Arguments:; grin: input graph. option: the kernel to be used: ""box"", ""normal""; bandwidth: the bandwidth. The kernels are scaled so that their quartiles; (viewed as probability densities) are at +/- 0.25*bandwidth.; nout: If xout is not specified, interpolation takes place at equally; spaced points spanning the interval [min(x), max(x)], where; nout = max(nout, number of input data).; xout: an optional set of values at which to evaluate the fit. void BDRksmooth(Double_",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:7977,Modifiability,Inherit,Inherited,7977," TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGraph*fGinInput graph; TGraph*fGoutOutput graph; Double_tfMaxXMaximum value of array X; Double_tfMinXMinimum value of array X; TStringTNamed::fNameobject identifier; Int_tfNinNumber of input points; Int_tfNoutNumber of output points; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphSmooth(); Default GraphSmooth constructor *-*-. TGraphSmooth(const char* name); GraphSmooth constructor *-*-*-*-*-*-. ~TGraphSmooth(); GraphSmooth destructor*-*-*-*-*-*-*-. void Smoothin(TGraph* grin); Sort input data points*-*-*-*-*-*-*-. TGraph * SmoothKern(TGraph* grin, Option_t* option = ""normal"", Double_t bandwidth = 0.5, Int_t nout = 100, Double_t* xout = 0); Smooth data with Kernel smoother*-*-. Smooth grin with the Nadaraya-Watson kernel regression estimate. Arguments:; grin: input graph. option: the kernel to be used: ""box"", ""normal""; bandwidth: the bandwidth. The kernels are scaled so that their quartiles; (viewed as probability densities) are at +/- 0.25*bandwidth.; nout: If xout is not specified, interpolation takes place at equally; spaced points spanning the interval [min(x), max(x)], where; nout = max(nout, number of input data).; xout: an optional set of values at which to evaluate the fit. void BDRksmooth(Double_",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:12590,Modifiability,variab,variable,12590,"se weights. Details:; supsmu is a running lines smoother which chooses between three spans for; the lines. The running lines smoothers are symmetric, with k/2 data points; each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; 0.05 * n, where n is the number of data points. If span is specified,; a single smoother with span span * n is used. The best of the three smoothers is chosen by cross-validation for each; prediction. The best spans are then smoothed by a running lines smoother; and the final prediction chosen by linear interpolation. The FORTRAN code says: ``For small samples (n < 40) or if there are; substantial serial correlations between observations close in x - value,; then a prespecified fixed span smoother (span > 0) should be used.; Reasonable span values are 0.2 to 0.4.''. References:; Friedman, J. H. (1984) SMART User's Guide.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 1. Friedman, J. H. (1984) A variable span scatterplot smoother.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 5. void BDRsupsmu(Int_t n, Double_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); Friedmann�s super smoother *-*-*-*-*-. super smoother (Friedman, 1984). version 10/10/84. coded and copywrite (c) 1984 by:. Jerome H. Friedman; department of statistics; and; stanford linear accelerator center; stanford university. all rights reserved. input:; n : number of observations (x,y - pairs).; x(n) : ordered abscissa values.; y(n) : corresponding ordinate (response) values.; w(n) : weight for each (x,y) observation.; iper : periodic variable flag.; iper=1 => x is ordered interval variable.; iper=2 => x is a periodic variable with values; in the range (0.0,1.0) and period 1.0.; span : smoother span (fraction of observations in window).; span=0.0 => automatic (variable) span selection.; alpha : controls high frequency (small span) penali",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:13295,Modifiability,variab,variable,13295,"ose in x - value,; then a prespecified fixed span smoother (span > 0) should be used.; Reasonable span values are 0.2 to 0.4.''. References:; Friedman, J. H. (1984) SMART User's Guide.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 1. Friedman, J. H. (1984) A variable span scatterplot smoother.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 5. void BDRsupsmu(Int_t n, Double_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); Friedmann�s super smoother *-*-*-*-*-. super smoother (Friedman, 1984). version 10/10/84. coded and copywrite (c) 1984 by:. Jerome H. Friedman; department of statistics; and; stanford linear accelerator center; stanford university. all rights reserved. input:; n : number of observations (x,y - pairs).; x(n) : ordered abscissa values.; y(n) : corresponding ordinate (response) values.; w(n) : weight for each (x,y) observation.; iper : periodic variable flag.; iper=1 => x is ordered interval variable.; iper=2 => x is a periodic variable with values; in the range (0.0,1.0) and period 1.0.; span : smoother span (fraction of observations in window).; span=0.0 => automatic (variable) span selection.; alpha : controls high frequency (small span) penality; used with automatic span selection (bass tone control).; (alpha.le.0.0 or alpha.gt.10.0 => no effect.); output:; smo(n) : smoothed ordinate (response) values.; scratch:; sc(n,7) : internal working storage. note:; for small samples (n < 40) or if there are substantial serial; correlations between observations close in x - value, then; a prespecified fixed span smoother (span > 0) should be; used. reasonable span values are 0.2 to 0.4. current implementation:; Based on R function supsmu: Translated to C++ by C. Stratowa; (R source file: ppr.f by B.D.Ripley Copyright (C) 1994-97). -. void BDRsmooth(Int_t n, Double_t* x, Double_t* y, Double_t* w, Double_t span, Int_t iper, Double_t",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:13343,Modifiability,variab,variable,13343,"d fixed span smoother (span > 0) should be used.; Reasonable span values are 0.2 to 0.4.''. References:; Friedman, J. H. (1984) SMART User's Guide.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 1. Friedman, J. H. (1984) A variable span scatterplot smoother.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 5. void BDRsupsmu(Int_t n, Double_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); Friedmann�s super smoother *-*-*-*-*-. super smoother (Friedman, 1984). version 10/10/84. coded and copywrite (c) 1984 by:. Jerome H. Friedman; department of statistics; and; stanford linear accelerator center; stanford university. all rights reserved. input:; n : number of observations (x,y - pairs).; x(n) : ordered abscissa values.; y(n) : corresponding ordinate (response) values.; w(n) : weight for each (x,y) observation.; iper : periodic variable flag.; iper=1 => x is ordered interval variable.; iper=2 => x is a periodic variable with values; in the range (0.0,1.0) and period 1.0.; span : smoother span (fraction of observations in window).; span=0.0 => automatic (variable) span selection.; alpha : controls high frequency (small span) penality; used with automatic span selection (bass tone control).; (alpha.le.0.0 or alpha.gt.10.0 => no effect.); output:; smo(n) : smoothed ordinate (response) values.; scratch:; sc(n,7) : internal working storage. note:; for small samples (n < 40) or if there are substantial serial; correlations between observations close in x - value, then; a prespecified fixed span smoother (span > 0) should be; used. reasonable span values are 0.2 to 0.4. current implementation:; Based on R function supsmu: Translated to C++ by C. Stratowa; (R source file: ppr.f by B.D.Ripley Copyright (C) 1994-97). -. void BDRsmooth(Int_t n, Double_t* x, Double_t* y, Double_t* w, Double_t span, Int_t iper, Double_t vsmlsq, Double_t* smo, Double_t* acvr",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:13380,Modifiability,variab,variable,13380,"nable span values are 0.2 to 0.4.''. References:; Friedman, J. H. (1984) SMART User's Guide.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 1. Friedman, J. H. (1984) A variable span scatterplot smoother.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 5. void BDRsupsmu(Int_t n, Double_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); Friedmann�s super smoother *-*-*-*-*-. super smoother (Friedman, 1984). version 10/10/84. coded and copywrite (c) 1984 by:. Jerome H. Friedman; department of statistics; and; stanford linear accelerator center; stanford university. all rights reserved. input:; n : number of observations (x,y - pairs).; x(n) : ordered abscissa values.; y(n) : corresponding ordinate (response) values.; w(n) : weight for each (x,y) observation.; iper : periodic variable flag.; iper=1 => x is ordered interval variable.; iper=2 => x is a periodic variable with values; in the range (0.0,1.0) and period 1.0.; span : smoother span (fraction of observations in window).; span=0.0 => automatic (variable) span selection.; alpha : controls high frequency (small span) penality; used with automatic span selection (bass tone control).; (alpha.le.0.0 or alpha.gt.10.0 => no effect.); output:; smo(n) : smoothed ordinate (response) values.; scratch:; sc(n,7) : internal working storage. note:; for small samples (n < 40) or if there are substantial serial; correlations between observations close in x - value, then; a prespecified fixed span smoother (span > 0) should be; used. reasonable span values are 0.2 to 0.4. current implementation:; Based on R function supsmu: Translated to C++ by C. Stratowa; (R source file: ppr.f by B.D.Ripley Copyright (C) 1994-97). -. void BDRsmooth(Int_t n, Double_t* x, Double_t* y, Double_t* w, Double_t span, Int_t iper, Double_t vsmlsq, Double_t* smo, Double_t* acvr); Function for super smoother *-*-*-. Based on R func",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:13525,Modifiability,variab,variable,13525," University Technical Report No. 1. Friedman, J. H. (1984) A variable span scatterplot smoother.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 5. void BDRsupsmu(Int_t n, Double_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); Friedmann�s super smoother *-*-*-*-*-. super smoother (Friedman, 1984). version 10/10/84. coded and copywrite (c) 1984 by:. Jerome H. Friedman; department of statistics; and; stanford linear accelerator center; stanford university. all rights reserved. input:; n : number of observations (x,y - pairs).; x(n) : ordered abscissa values.; y(n) : corresponding ordinate (response) values.; w(n) : weight for each (x,y) observation.; iper : periodic variable flag.; iper=1 => x is ordered interval variable.; iper=2 => x is a periodic variable with values; in the range (0.0,1.0) and period 1.0.; span : smoother span (fraction of observations in window).; span=0.0 => automatic (variable) span selection.; alpha : controls high frequency (small span) penality; used with automatic span selection (bass tone control).; (alpha.le.0.0 or alpha.gt.10.0 => no effect.); output:; smo(n) : smoothed ordinate (response) values.; scratch:; sc(n,7) : internal working storage. note:; for small samples (n < 40) or if there are substantial serial; correlations between observations close in x - value, then; a prespecified fixed span smoother (span > 0) should be; used. reasonable span values are 0.2 to 0.4. current implementation:; Based on R function supsmu: Translated to C++ by C. Stratowa; (R source file: ppr.f by B.D.Ripley Copyright (C) 1994-97). -. void BDRsmooth(Int_t n, Double_t* x, Double_t* y, Double_t* w, Double_t span, Int_t iper, Double_t vsmlsq, Double_t* smo, Double_t* acvr); Function for super smoother *-*-*-. Based on R function supsmu: Translated to C++ by C. Stratowa; (R source file: ppr.f by B.D.Ripley Copyright (C) 1994-97). -. void Approxin(TGraph* grin, Int_t i",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:17714,Modifiability,adapt,adapted,17714,"argument returning a single number result:; ties = ""ordered"" (iTies = 0): input x are ""ordered""; ties = ""mean"" (iTies = 1): function ""mean""; ties = ""min"" (iTies = 2): function ""min""; ties = ""max"" (iTies = 3): function ""max"". Details:; At least two complete (x, y) pairs are required.; If there are duplicated (tied) x values and ties is a function it is; applied to the y values for each distinct x value. Useful functions in; this context include mean, min, and max.; If ties=""ordered"" the x values are assumed to be already ordered. The; first y value will be used for interpolation to the left and the last; one for interpolation to the right. Value:; approx returns a graph with components x and y, containing n coordinates; which interpolate the given data points according to the method (and rule); desired. Double_t Approx1(Double_t v, Double_t f, Double_t* x, Double_t* y, Int_t n, Int_t iKind, Double_t Ylow, Double_t Yhigh); Approximate one data point*-*-*-*-*-; *-* ==========================. Approximate y(v), given (x,y)[i], i = 0,..,n-1; Based on R function approx1: Translated to C++ by Christian Stratowa; (R source file: approx.c by R Development Core Team (C) 1999-2001). Int_t Rcmp(Double_t x, Double_t y); static function; if (ISNAN(x)) return 1;; if (ISNAN(y)) return -1;. void Psort(Double_t* x, Int_t n, Int_t k); static function; based on R function rPsort: adapted to C++ by Christian Stratowa; (R source file: R_sort.c by R Development Core Team (C) 1999-2001). void Rank(Int_t n, Double_t* a, Int_t* index, Int_t* rank, Bool_t down = kTRUE); static function. TGraphSmooth(const TGraphSmooth& ). TGraphSmooth& operator=(const TGraphSmooth& ). » Author: Christian Stratowa 30/09/2001 » Copyright (c) 2001- , Dr. Christian Stratowa, Vienna, Austria. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:9474,Performance,perform,performs,9474,"on estimate. Arguments:; grin: input graph. option: the kernel to be used: ""box"", ""normal""; bandwidth: the bandwidth. The kernels are scaled so that their quartiles; (viewed as probability densities) are at +/- 0.25*bandwidth.; nout: If xout is not specified, interpolation takes place at equally; spaced points spanning the interval [min(x), max(x)], where; nout = max(nout, number of input data).; xout: an optional set of values at which to evaluate the fit. void BDRksmooth(Double_t* x, Double_t* y, Int_t n, Double_t* xp, Double_t* yp, Int_t np, Int_t kernel, Double_t bw); Smooth data with specified kernel*-*-; *-* =================================. Based on R function ksmooth: Translated to C++ by C. Stratowa; (R source file: ksmooth.c by B.D.Ripley Copyright (C) 1998). -. TGraph * SmoothLowess(TGraph* grin, Option_t* option = """", Double_t span = 0.67000000000000004, Int_t iter = 3, Double_t delta = 0); Smooth data with Lowess smoother*-*-. This function performs the computations for the LOWESS smoother; (see the reference below). Lowess returns the output points; x and y which give the coordinates of the smooth. Arguments:; grin: Input graph. span: the smoother span. This gives the proportion of points in the plot; which influence the smooth at each value.; Larger values give more smoothness.; iter: the number of robustifying iterations which should be performed.; Using smaller values of iter will make lowess run faster.; delta: values of x which lie within delta of each other replaced by a; single value in the output from lowess.; For delta = 0, delta will be calculated. References:; Cleveland, W. S. (1979) Robust locally weighted regression and smoothing; scatterplots. J. Amer. Statist. Assoc. 74, 829-836.; Cleveland, W. S. (1981) LOWESS: A program for smoothing scatterplots; by robust locally weighted regression.; The American Statistician, 35, 54. void Lowess(Double_t* x, Double_t* y, Int_t n, Double_t* ys, Double_t span, Int_t iter, Double_t delta); Lowess reg",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:9881,Performance,perform,performed,9881,", where; nout = max(nout, number of input data).; xout: an optional set of values at which to evaluate the fit. void BDRksmooth(Double_t* x, Double_t* y, Int_t n, Double_t* xp, Double_t* yp, Int_t np, Int_t kernel, Double_t bw); Smooth data with specified kernel*-*-; *-* =================================. Based on R function ksmooth: Translated to C++ by C. Stratowa; (R source file: ksmooth.c by B.D.Ripley Copyright (C) 1998). -. TGraph * SmoothLowess(TGraph* grin, Option_t* option = """", Double_t span = 0.67000000000000004, Int_t iter = 3, Double_t delta = 0); Smooth data with Lowess smoother*-*-. This function performs the computations for the LOWESS smoother; (see the reference below). Lowess returns the output points; x and y which give the coordinates of the smooth. Arguments:; grin: Input graph. span: the smoother span. This gives the proportion of points in the plot; which influence the smooth at each value.; Larger values give more smoothness.; iter: the number of robustifying iterations which should be performed.; Using smaller values of iter will make lowess run faster.; delta: values of x which lie within delta of each other replaced by a; single value in the output from lowess.; For delta = 0, delta will be calculated. References:; Cleveland, W. S. (1979) Robust locally weighted regression and smoothing; scatterplots. J. Amer. Statist. Assoc. 74, 829-836.; Cleveland, W. S. (1981) LOWESS: A program for smoothing scatterplots; by robust locally weighted regression.; The American Statistician, 35, 54. void Lowess(Double_t* x, Double_t* y, Int_t n, Double_t* ys, Double_t span, Int_t iter, Double_t delta); Lowess regression smoother*-*-*-*-*-. Based on R function clowess: Translated to C++ by C. Stratowa; (R source file: lowess.c by R Development Core Team (C) 1999-2001). -. void Lowest(Double_t* x, Double_t* y, Int_t n, Double_t& xs, Double_t& ys, Int_t nleft, Int_t nright, Double_t* w, Bool_t userw, Double_t* rw, Bool_t& ok); Fit value at x[i] *-*-*-*-*-*-*-",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:11791,Safety,predict,predicted,11791," Double_t* w, Bool_t userw, Double_t* rw, Bool_t& ok); Fit value at x[i] *-*-*-*-*-*-*-*-*-. Based on R function lowest: Translated to C++ by C. Stratowa; (R source file: lowess.c by R Development Core Team (C) 1999-2001). -. TGraph * SmoothSuper(TGraph* grin, Option_t* option = """", Double_t bass = 0, Double_t span = 0, Bool_t isPeriodic = kFALSE, Double_t* w = 0); Smooth data with Super smoother*-*-*-. Smooth the (x, y) values by Friedman's ``super smoother''. Arguments:; grin: graph for smoothing. span: the fraction of the observations in the span of the running lines; smoother, or 0 to choose this by leave-one-out cross-validation.; bass: controls the smoothness of the fitted curve.; Values of up to 10 indicate increasing smoothness.; isPeriodic: if TRUE, the x values are assumed to be in [0, 1]; and of period 1.; w: case weights. Details:; supsmu is a running lines smoother which chooses between three spans for; the lines. The running lines smoothers are symmetric, with k/2 data points; each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; 0.05 * n, where n is the number of data points. If span is specified,; a single smoother with span span * n is used. The best of the three smoothers is chosen by cross-validation for each; prediction. The best spans are then smoothed by a running lines smoother; and the final prediction chosen by linear interpolation. The FORTRAN code says: ``For small samples (n < 40) or if there are; substantial serial correlations between observations close in x - value,; then a prespecified fixed span smoother (span > 0) should be used.; Reasonable span values are 0.2 to 0.4.''. References:; Friedman, J. H. (1984) SMART User's Guide.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 1. Friedman, J. H. (1984) A variable span scatterplot smoother.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 5. void BDRsupsmu(Int_t n, Double_t* x, Double_t* y, Double",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:12038,Safety,predict,prediction,12038,"thSuper(TGraph* grin, Option_t* option = """", Double_t bass = 0, Double_t span = 0, Bool_t isPeriodic = kFALSE, Double_t* w = 0); Smooth data with Super smoother*-*-*-. Smooth the (x, y) values by Friedman's ``super smoother''. Arguments:; grin: graph for smoothing. span: the fraction of the observations in the span of the running lines; smoother, or 0 to choose this by leave-one-out cross-validation.; bass: controls the smoothness of the fitted curve.; Values of up to 10 indicate increasing smoothness.; isPeriodic: if TRUE, the x values are assumed to be in [0, 1]; and of period 1.; w: case weights. Details:; supsmu is a running lines smoother which chooses between three spans for; the lines. The running lines smoothers are symmetric, with k/2 data points; each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; 0.05 * n, where n is the number of data points. If span is specified,; a single smoother with span span * n is used. The best of the three smoothers is chosen by cross-validation for each; prediction. The best spans are then smoothed by a running lines smoother; and the final prediction chosen by linear interpolation. The FORTRAN code says: ``For small samples (n < 40) or if there are; substantial serial correlations between observations close in x - value,; then a prespecified fixed span smoother (span > 0) should be used.; Reasonable span values are 0.2 to 0.4.''. References:; Friedman, J. H. (1984) SMART User's Guide.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 1. Friedman, J. H. (1984) A variable span scatterplot smoother.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 5. void BDRsupsmu(Int_t n, Double_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); Friedmann�s super smoother *-*-*-*-*-. super smoother (Friedman, 1984). version 10/10/84. coded and copywrite (c) 1984 by:. Jerome H. Friedman; department of ",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:12126,Safety,predict,prediction,12126,"= kFALSE, Double_t* w = 0); Smooth data with Super smoother*-*-*-. Smooth the (x, y) values by Friedman's ``super smoother''. Arguments:; grin: graph for smoothing. span: the fraction of the observations in the span of the running lines; smoother, or 0 to choose this by leave-one-out cross-validation.; bass: controls the smoothness of the fitted curve.; Values of up to 10 indicate increasing smoothness.; isPeriodic: if TRUE, the x values are assumed to be in [0, 1]; and of period 1.; w: case weights. Details:; supsmu is a running lines smoother which chooses between three spans for; the lines. The running lines smoothers are symmetric, with k/2 data points; each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; 0.05 * n, where n is the number of data points. If span is specified,; a single smoother with span span * n is used. The best of the three smoothers is chosen by cross-validation for each; prediction. The best spans are then smoothed by a running lines smoother; and the final prediction chosen by linear interpolation. The FORTRAN code says: ``For small samples (n < 40) or if there are; substantial serial correlations between observations close in x - value,; then a prespecified fixed span smoother (span > 0) should be used.; Reasonable span values are 0.2 to 0.4.''. References:; Friedman, J. H. (1984) SMART User's Guide.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 1. Friedman, J. H. (1984) A variable span scatterplot smoother.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 5. void BDRsupsmu(Int_t n, Double_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); Friedmann�s super smoother *-*-*-*-*-. super smoother (Friedman, 1984). version 10/10/84. coded and copywrite (c) 1984 by:. Jerome H. Friedman; department of statistics; and; stanford linear accelerator center; stanford university. all rights reserved. input:;",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:3114,Security,Hash,Hash,3114,"st char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; voidLowess(Double_t* x, Double_t* y, Int_t n, Double_t* ys, Double_t span, Int_t iter, Double_t delta); static voidLowest(Double_t* x, Double_t* y, Int_t n, Double_t& xs, Double_t& ys, Int_t nleft, Int_t nright, Double_t* w, Bool_t userw, Double_t* rw, Bool_t& ok); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char*",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:11399,Security,validat,validation,11399," regression.; The American Statistician, 35, 54. void Lowess(Double_t* x, Double_t* y, Int_t n, Double_t* ys, Double_t span, Int_t iter, Double_t delta); Lowess regression smoother*-*-*-*-*-. Based on R function clowess: Translated to C++ by C. Stratowa; (R source file: lowess.c by R Development Core Team (C) 1999-2001). -. void Lowest(Double_t* x, Double_t* y, Int_t n, Double_t& xs, Double_t& ys, Int_t nleft, Int_t nright, Double_t* w, Bool_t userw, Double_t* rw, Bool_t& ok); Fit value at x[i] *-*-*-*-*-*-*-*-*-. Based on R function lowest: Translated to C++ by C. Stratowa; (R source file: lowess.c by R Development Core Team (C) 1999-2001). -. TGraph * SmoothSuper(TGraph* grin, Option_t* option = """", Double_t bass = 0, Double_t span = 0, Bool_t isPeriodic = kFALSE, Double_t* w = 0); Smooth data with Super smoother*-*-*-. Smooth the (x, y) values by Friedman's ``super smoother''. Arguments:; grin: graph for smoothing. span: the fraction of the observations in the span of the running lines; smoother, or 0 to choose this by leave-one-out cross-validation.; bass: controls the smoothness of the fitted curve.; Values of up to 10 indicate increasing smoothness.; isPeriodic: if TRUE, the x values are assumed to be in [0, 1]; and of period 1.; w: case weights. Details:; supsmu is a running lines smoother which chooses between three spans for; the lines. The running lines smoothers are symmetric, with k/2 data points; each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; 0.05 * n, where n is the number of data points. If span is specified,; a single smoother with span span * n is used. The best of the three smoothers is chosen by cross-validation for each; prediction. The best spans are then smoothed by a running lines smoother; and the final prediction chosen by linear interpolation. The FORTRAN code says: ``For small samples (n < 40) or if there are; substantial serial correlations between observations close in x - value,; then a prespecified fixed spa",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:12017,Security,validat,validation,12017,"thSuper(TGraph* grin, Option_t* option = """", Double_t bass = 0, Double_t span = 0, Bool_t isPeriodic = kFALSE, Double_t* w = 0); Smooth data with Super smoother*-*-*-. Smooth the (x, y) values by Friedman's ``super smoother''. Arguments:; grin: graph for smoothing. span: the fraction of the observations in the span of the running lines; smoother, or 0 to choose this by leave-one-out cross-validation.; bass: controls the smoothness of the fitted curve.; Values of up to 10 indicate increasing smoothness.; isPeriodic: if TRUE, the x values are assumed to be in [0, 1]; and of period 1.; w: case weights. Details:; supsmu is a running lines smoother which chooses between three spans for; the lines. The running lines smoothers are symmetric, with k/2 data points; each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; 0.05 * n, where n is the number of data points. If span is specified,; a single smoother with span span * n is used. The best of the three smoothers is chosen by cross-validation for each; prediction. The best spans are then smoothed by a running lines smoother; and the final prediction chosen by linear interpolation. The FORTRAN code says: ``For small samples (n < 40) or if there are; substantial serial correlations between observations close in x - value,; then a prespecified fixed span smoother (span > 0) should be used.; Reasonable span values are 0.2 to 0.4.''. References:; Friedman, J. H. (1984) SMART User's Guide.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 1. Friedman, J. H. (1984) A variable span scatterplot smoother.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 5. void BDRsupsmu(Int_t n, Double_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); Friedmann�s super smoother *-*-*-*-*-. super smoother (Friedman, 1984). version 10/10/84. coded and copywrite (c) 1984 by:. Jerome H. Friedman; department of ",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:6276,Testability,Test,TestBit,6276,"* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; voidSmoothin(TGraph* grin); TGraph*SmoothKern(TGraph* grin, Option_t* option = ""normal"", Double_t bandwidth = 0.5, Int_t nout = 100, Double_t* xout = 0); TGraph*SmoothLowess(TGraph* grin, Option_t* option = """", Double_t span = 0.67000000000000004, Int_t iter = 3, Double_t delta = 0); TGraph*SmoothSuper(TGraph* grin, Option_t* option = """", Double_t bass = 0, Double_t span = 0, Bool_t isPeriodic = kFALSE, Double_t* w = 0); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphSmooth(); TGraphSmooth(const char* name); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TGraphSmooth&operator=(const TGraphSmooth&); TGraphSmooth(const TGraphSmooth&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject:",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:6315,Testability,Test,TestBits,6315,"* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; voidSmoothin(TGraph* grin); TGraph*SmoothKern(TGraph* grin, Option_t* option = ""normal"", Double_t bandwidth = 0.5, Int_t nout = 100, Double_t* xout = 0); TGraph*SmoothLowess(TGraph* grin, Option_t* option = """", Double_t span = 0.67000000000000004, Int_t iter = 3, Double_t delta = 0); TGraph*SmoothSuper(TGraph* grin, Option_t* option = """", Double_t bass = 0, Double_t span = 0, Bool_t isPeriodic = kFALSE, Double_t* w = 0); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphSmooth(); TGraphSmooth(const char* name); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TGraphSmooth&operator=(const TGraphSmooth&); TGraphSmooth(const TGraphSmooth&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject:",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:1544,Usability,Clear,Clear,1544,"::AppendPad(Option_t* option = """"); TGraph*Approx(TGraph* grin, Option_t* option = ""linear"", Int_t nout = 50, Double_t* xout = 0, Double_t yleft = 0, Double_t yright = 0, Int_t rule = 0, Double_t f = 0, Option_t* ties = ""mean""); static Double_tApprox1(Double_t v, Double_t f, Double_t* x, Double_t* y, Int_t n, Int_t iKind, Double_t Ylow, Double_t Yhigh); voidApproxin(TGraph* grin, Int_t iKind, Double_t& Ylow, Double_t& Yhigh, Int_t rule, Int_t iTies); static voidBDRksmooth(Double_t* x, Double_t* y, Int_t n, Double_t* xp, Double_t* yp, Int_t np, Int_t kernel, Double_t bw); static voidBDRsmooth(Int_t n, Double_t* x, Double_t* y, Double_t* w, Double_t span, Int_t iper, Double_t vsmlsq, Double_t* smo, Double_t* acvr); static voidBDRsupsmu(Int_t n, Double_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphSmooth.html:12471,Usability,Guid,Guide,12471," Values of up to 10 indicate increasing smoothness.; isPeriodic: if TRUE, the x values are assumed to be in [0, 1]; and of period 1.; w: case weights. Details:; supsmu is a running lines smoother which chooses between three spans for; the lines. The running lines smoothers are symmetric, with k/2 data points; each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; 0.05 * n, where n is the number of data points. If span is specified,; a single smoother with span span * n is used. The best of the three smoothers is chosen by cross-validation for each; prediction. The best spans are then smoothed by a running lines smoother; and the final prediction chosen by linear interpolation. The FORTRAN code says: ``For small samples (n < 40) or if there are; substantial serial correlations between observations close in x - value,; then a prespecified fixed span smoother (span > 0) should be used.; Reasonable span values are 0.2 to 0.4.''. References:; Friedman, J. H. (1984) SMART User's Guide.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 1. Friedman, J. H. (1984) A variable span scatterplot smoother.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 5. void BDRsupsmu(Int_t n, Double_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); Friedmann�s super smoother *-*-*-*-*-. super smoother (Friedman, 1984). version 10/10/84. coded and copywrite (c) 1984 by:. Jerome H. Friedman; department of statistics; and; stanford linear accelerator center; stanford university. all rights reserved. input:; n : number of observations (x,y - pairs).; x(n) : ordered abscissa values.; y(n) : corresponding ordinate (response) values.; w(n) : weight for each (x,y) observation.; iper : periodic variable flag.; iper=1 => x is ordered interval variable.; iper=2 => x is a periodic variable with values; in the range (0.0,1.0) and period 1.0.; span : smoother span (",MatchSource.WIKI,root/html604/TGraphSmooth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphSmooth.html
https://root.cern/root/html604/TGraphStruct.html:3440,Availability,Error,Error,3440,"ct(); voidTObject::AbstractMethod(const char* method) const; voidAddEdge(TGraphEdge* edge); TGraphEdge*AddEdge(TGraphNode* n1, TGraphNode* n2); voidAddNode(TGraphNode* node); TGraphNode*AddNode(const char* name, const char* title = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidDumpAsDotFile(const char* filename); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetListOfEdges() const; TList*GetListOfNodes() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(",MatchSource.WIKI,root/html604/TGraphStruct.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphStruct.html
https://root.cern/root/html604/TGraphStruct.html:3569,Availability,error,error,3569,"raphNode* n2); voidAddNode(TGraphNode* node); TGraphNode*AddNode(const char* name, const char* title = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidDumpAsDotFile(const char* filename); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetListOfEdges() const; TList*GetListOfNodes() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; vi",MatchSource.WIKI,root/html604/TGraphStruct.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphStruct.html
https://root.cern/root/html604/TGraphStruct.html:3653,Availability,error,error,3653,"onst char* title = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidDumpAsDotFile(const char* filename); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetListOfEdges() const; TList*GetListOfNodes() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObjec",MatchSource.WIKI,root/html604/TGraphStruct.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphStruct.html
https://root.cern/root/html604/TGraphStruct.html:348,Integrability,interface,interface,348,". TGraphStruct. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GVIZ; » TGraphStruct. class TGraphStruct: public TObject. Graph Structure class; The Graph Structure is an interface to the graphviz package. The graphviz package is a graph visualization system. This interface consists in; three classes:. TGraphStruct: holds the graph structure. It uses the graphiz library to; layout the graphs and the ROOT graphics to paint them.; TGraphNode: Is a graph node object which can be added in a TGraphStruct.; TGraphEdge: Is an edge object connecting two nodes which can be added in; a TGraphStruct. Picture; Source. // Draw a simple graph structure.; // The graph layout is made using graphviz. This macro creates some; // nodes and edges and change a few graphical attributes on some of them.; // Author: Olivier Couet; {; TGraphStruct *gs = new TGraphStruct();. // create some nodes and put them in the graph in one go ...; TGraphNode *n0 = gs->AddNode(""n0"",""Node 0"");; TGraphNode *n1 = gs->AddNode(""n1"",""First node"");; TGraphNode *n2 = gs->AddNode(""n2"",""Second node"");; TGraphNode *n3 = gs->AddNode(""n3"",""Third node"");; TGraphNode *n4 = gs->AddNode(""n4"",""Fourth node"");; TGraphNode *n5 = gs->AddNode(""n5"",""5th node"");; TGraphNode *n6 = gs->AddNode(""n6"",""Node number six"");; TGraphNode *n7 = gs->AddNode(""n7"",""Node 7"");; TGraphNode *n8 = gs->AddNode(""n8"",""Node 8"");; TGraphNode *n9 = gs->AddNode(""n9"",""Node 9"");. n4->SetTextSize(0.03);; n6->SetTextSize(0.03);; n2->SetTextSize(0.04);. n3->SetTextFont(132);. n0->SetTextColor(kRed);. n9->SetFillColor(kRed-10);; n0->SetFillColor(kYellow-9);; n7->SetFillColor(kViolet-9);. // some edges ...; gs->AddEdge(n0,n1)->SetLineColor(kRed);; TGraphEdge *e06 = gs->AddEdge(n0,n6);; e06->SetLineColor(kRed-3);; e06->SetLineWidth(4);; gs->AddEdge(n1,n7);; gs->AddEdge(n4,n6);; gs->AddEdge",MatchSource.WIKI,root/html604/TGraphStruct.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphStruct.html
https://root.cern/root/html604/TGraphStruct.html:442,Integrability,interface,interface,442,". TGraphStruct. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GVIZ; » TGraphStruct. class TGraphStruct: public TObject. Graph Structure class; The Graph Structure is an interface to the graphviz package. The graphviz package is a graph visualization system. This interface consists in; three classes:. TGraphStruct: holds the graph structure. It uses the graphiz library to; layout the graphs and the ROOT graphics to paint them.; TGraphNode: Is a graph node object which can be added in a TGraphStruct.; TGraphEdge: Is an edge object connecting two nodes which can be added in; a TGraphStruct. Picture; Source. // Draw a simple graph structure.; // The graph layout is made using graphviz. This macro creates some; // nodes and edges and change a few graphical attributes on some of them.; // Author: Olivier Couet; {; TGraphStruct *gs = new TGraphStruct();. // create some nodes and put them in the graph in one go ...; TGraphNode *n0 = gs->AddNode(""n0"",""Node 0"");; TGraphNode *n1 = gs->AddNode(""n1"",""First node"");; TGraphNode *n2 = gs->AddNode(""n2"",""Second node"");; TGraphNode *n3 = gs->AddNode(""n3"",""Third node"");; TGraphNode *n4 = gs->AddNode(""n4"",""Fourth node"");; TGraphNode *n5 = gs->AddNode(""n5"",""5th node"");; TGraphNode *n6 = gs->AddNode(""n6"",""Node number six"");; TGraphNode *n7 = gs->AddNode(""n7"",""Node 7"");; TGraphNode *n8 = gs->AddNode(""n8"",""Node 8"");; TGraphNode *n9 = gs->AddNode(""n9"",""Node 9"");. n4->SetTextSize(0.03);; n6->SetTextSize(0.03);; n2->SetTextSize(0.04);. n3->SetTextFont(132);. n0->SetTextColor(kRed);. n9->SetFillColor(kRed-10);; n0->SetFillColor(kYellow-9);; n7->SetFillColor(kViolet-9);. // some edges ...; gs->AddEdge(n0,n1)->SetLineColor(kRed);; TGraphEdge *e06 = gs->AddEdge(n0,n6);; e06->SetLineColor(kRed-3);; e06->SetLineWidth(4);; gs->AddEdge(n1,n7);; gs->AddEdge(n4,n6);; gs->AddEdge",MatchSource.WIKI,root/html604/TGraphStruct.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphStruct.html
https://root.cern/root/html604/TGraphStruct.html:4593,Modifiability,Inherit,InheritsFrom,4593,"t::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetListOfEdges() const; TList*GetListOfNodes() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; Int_tLayout(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operato",MatchSource.WIKI,root/html604/TGraphStruct.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphStruct.html
https://root.cern/root/html604/TGraphStruct.html:4659,Modifiability,Inherit,InheritsFrom,4659,"virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetListOfEdges() const; TList*GetListOfNodes() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; Int_tLayout(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGraphStruct&operator=(const TGraphS",MatchSource.WIKI,root/html604/TGraphStruct.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphStruct.html
https://root.cern/root/html604/TGraphStruct.html:8185,Modifiability,Inherit,Inheritance,8185,"blic:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TList*fEdgesList of edges in this TGraphStruct; GVC_s*fGVCGraphviz context; GVizAgraph_t*fGVGraphGraphviz graph; Double_tfMarginMargin around the graph (in dots); TList*fNodesList of nodes in this TGraphStruct. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphStruct(); Graph Structure default constructor. ~TGraphStruct(); Graph Structure default destructor. void AddEdge(TGraphEdge* edge); Add the edge ""edge"" in this TGraphStruct. TGraphEdge * AddEdge(TGraphNode* n1, TGraphNode* n2); Create an edge between n1 and n2 and put it in this graph. Two edges can connect the same nodes the same way, so there; is no need to check if an edge already exists. void AddNode(TGraphNode* node); Add the node ""node"" in this TGraphStruct. TGraphNode * AddNode(const char* name, const char* title = """"); Create the node ""name"" if it does not exist and add it to this TGraphStruct. void DumpAsDotFile(const char* filename); Dump this graph structure as a ""dot"" file. void Draw(Option_t* option = """"); Draw the graph. Int_t Layout(); Layout the graph into a GraphViz data structure. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void Streamer(TBu",MatchSource.WIKI,root/html604/TGraphStruct.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphStruct.html
https://root.cern/root/html604/TGraphStruct.html:8198,Modifiability,Inherit,Inherited,8198,"blic:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TList*fEdgesList of edges in this TGraphStruct; GVC_s*fGVCGraphviz context; GVizAgraph_t*fGVGraphGraphviz graph; Double_tfMarginMargin around the graph (in dots); TList*fNodesList of nodes in this TGraphStruct. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphStruct(); Graph Structure default constructor. ~TGraphStruct(); Graph Structure default destructor. void AddEdge(TGraphEdge* edge); Add the edge ""edge"" in this TGraphStruct. TGraphEdge * AddEdge(TGraphNode* n1, TGraphNode* n2); Create an edge between n1 and n2 and put it in this graph. Two edges can connect the same nodes the same way, so there; is no need to check if an edge already exists. void AddNode(TGraphNode* node); Add the node ""node"" in this TGraphStruct. TGraphNode * AddNode(const char* name, const char* title = """"); Create the node ""name"" if it does not exist and add it to this TGraphStruct. void DumpAsDotFile(const char* filename); Dump this graph structure as a ""dot"" file. void Draw(Option_t* option = """"); Draw the graph. Int_t Layout(); Layout the graph into a GraphViz data structure. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void Streamer(TBu",MatchSource.WIKI,root/html604/TGraphStruct.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphStruct.html
https://root.cern/root/html604/TGraphStruct.html:4483,Security,Hash,Hash,4483," const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetListOfEdges() const; TList*GetListOfNodes() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; Int_tLayout(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz",MatchSource.WIKI,root/html604/TGraphStruct.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphStruct.html
https://root.cern/root/html604/TGraphStruct.html:6643,Testability,Test,TestBit,6643,"_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGraphStruct&operator=(const TGraphStruct&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMargin(Double_t m = 10); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphStruct(); TGraphStruct(const TGraphStruct&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGraphStruct.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphStruct.html
https://root.cern/root/html604/TGraphStruct.html:6682,Testability,Test,TestBits,6682,"_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGraphStruct&operator=(const TGraphStruct&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMargin(Double_t m = 10); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphStruct(); TGraphStruct(const TGraphStruct&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGraphStruct.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphStruct.html
https://root.cern/root/html604/TGraphStruct.html:801,Usability,simpl,simple,801,". TGraphStruct. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GVIZ; » TGraphStruct. class TGraphStruct: public TObject. Graph Structure class; The Graph Structure is an interface to the graphviz package. The graphviz package is a graph visualization system. This interface consists in; three classes:. TGraphStruct: holds the graph structure. It uses the graphiz library to; layout the graphs and the ROOT graphics to paint them.; TGraphNode: Is a graph node object which can be added in a TGraphStruct.; TGraphEdge: Is an edge object connecting two nodes which can be added in; a TGraphStruct. Picture; Source. // Draw a simple graph structure.; // The graph layout is made using graphviz. This macro creates some; // nodes and edges and change a few graphical attributes on some of them.; // Author: Olivier Couet; {; TGraphStruct *gs = new TGraphStruct();. // create some nodes and put them in the graph in one go ...; TGraphNode *n0 = gs->AddNode(""n0"",""Node 0"");; TGraphNode *n1 = gs->AddNode(""n1"",""First node"");; TGraphNode *n2 = gs->AddNode(""n2"",""Second node"");; TGraphNode *n3 = gs->AddNode(""n3"",""Third node"");; TGraphNode *n4 = gs->AddNode(""n4"",""Fourth node"");; TGraphNode *n5 = gs->AddNode(""n5"",""5th node"");; TGraphNode *n6 = gs->AddNode(""n6"",""Node number six"");; TGraphNode *n7 = gs->AddNode(""n7"",""Node 7"");; TGraphNode *n8 = gs->AddNode(""n8"",""Node 8"");; TGraphNode *n9 = gs->AddNode(""n9"",""Node 9"");. n4->SetTextSize(0.03);; n6->SetTextSize(0.03);; n2->SetTextSize(0.04);. n3->SetTextFont(132);. n0->SetTextColor(kRed);. n9->SetFillColor(kRed-10);; n0->SetFillColor(kYellow-9);; n7->SetFillColor(kViolet-9);. // some edges ...; gs->AddEdge(n0,n1)->SetLineColor(kRed);; TGraphEdge *e06 = gs->AddEdge(n0,n6);; e06->SetLineColor(kRed-3);; e06->SetLineWidth(4);; gs->AddEdge(n1,n7);; gs->AddEdge(n4,n6);; gs->AddEdge",MatchSource.WIKI,root/html604/TGraphStruct.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphStruct.html
https://root.cern/root/html604/TGraphStruct.html:2868,Usability,Clear,Clear,2868,,MatchSource.WIKI,root/html604/TGraphStruct.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphStruct.html
https://root.cern/root/html604/TGraphTime.html:1499,Availability,Error,Error,1499," virtual~TGraphTime(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAdd(const TObject* obj, Int_t slot, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::Fi",MatchSource.WIKI,root/html604/TGraphTime.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphTime.html
https://root.cern/root/html604/TGraphTime.html:1628,Availability,error,error,1628,"rtual~TGraphTime(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAdd(const TObject* obj, Int_t slot, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObjArray*GetSteps() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfm",MatchSource.WIKI,root/html604/TGraphTime.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphTime.html
https://root.cern/root/html604/TGraphTime.html:1712,Availability,error,error,1712,"nt_tAdd(const TObject* obj, Int_t slot, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObjArray*GetSteps() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual ",MatchSource.WIKI,root/html604/TGraphTime.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphTime.html
https://root.cern/root/html604/TGraphTime.html:2664,Modifiability,Inherit,InheritsFrom,2664,"Method* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObjArray*GetSteps() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html604/TGraphTime.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphTime.html
https://root.cern/root/html604/TGraphTime.html:2730,Modifiability,Inherit,InheritsFrom,2730,"TObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObjArray*GetSteps() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGraphTime&operator=(const TGraphTime&); virtual void",MatchSource.WIKI,root/html604/TGraphTime.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphTime.html
https://root.cern/root/html604/TGraphTime.html:6789,Modifiability,Inherit,Inheritance,6789,"ect::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TH1*fFrameTH1 object used for the pad range; TStringTNamed::fNameobject identifier; Int_tfNstepsNumber of time steps; Int_tfSleepTimeTime (msec) to wait between time steps; TObjArray*fStepsarray of TLists for each time step; TStringTNamed::fTitleobject title; Double_tfXmaxMaximum for X axis; Double_tfXminMinimum for X axis; Double_tfYmaxMaximum for Y axis; Double_tfYminMinimum for Y axis. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphTime(); default constructor. TGraphTime(Int_t nsteps, Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax); Create a TGraphTime with nsteps in range [xmin,xmax][ymin,ymax]. ~TGraphTime(); GraphTime default destructor. TGraphTime(const TGraphTime& gr); copy constructor. Int_t Add(const TObject* obj, Int_t slot, Option_t* option = """"); Add one object to a time slot.; TGraphTime becomes the owner of this object.; object will be drawn with option. void Draw(Option_t* chopt = """"); Draw this TGraphTime.; for each time step the list of objects added to this step are drawn. void Paint(Option_t* chopt = """"); Paint all objects added to each time step. void SaveAnimatedGif(const char* filename = """") const; Save this object to filename as an animated gif file; if filename is specified it must be of the form xxx.gif; otherwise a file yyy.gif is produced where yyy is the object name. TObjArray * GetSteps() const; {return fSteps;}. void ",MatchSource.WIKI,root/html604/TGraphTime.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphTime.html
https://root.cern/root/html604/TGraphTime.html:6802,Modifiability,Inherit,Inherited,6802,"ect::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TH1*fFrameTH1 object used for the pad range; TStringTNamed::fNameobject identifier; Int_tfNstepsNumber of time steps; Int_tfSleepTimeTime (msec) to wait between time steps; TObjArray*fStepsarray of TLists for each time step; TStringTNamed::fTitleobject title; Double_tfXmaxMaximum for X axis; Double_tfXminMinimum for X axis; Double_tfYmaxMaximum for Y axis; Double_tfYminMinimum for Y axis. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphTime(); default constructor. TGraphTime(Int_t nsteps, Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax); Create a TGraphTime with nsteps in range [xmin,xmax][ymin,ymax]. ~TGraphTime(); GraphTime default destructor. TGraphTime(const TGraphTime& gr); copy constructor. Int_t Add(const TObject* obj, Int_t slot, Option_t* option = """"); Add one object to a time slot.; TGraphTime becomes the owner of this object.; object will be drawn with option. void Draw(Option_t* chopt = """"); Draw this TGraphTime.; for each time step the list of objects added to this step are drawn. void Paint(Option_t* chopt = """"); Paint all objects added to each time step. void SaveAnimatedGif(const char* filename = """") const; Save this object to filename as an animated gif file; if filename is specified it must be of the form xxx.gif; otherwise a file yyy.gif is produced where yyy is the object name. TObjArray * GetSteps() const; {return fSteps;}. void ",MatchSource.WIKI,root/html604/TGraphTime.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphTime.html
https://root.cern/root/html604/TGraphTime.html:2554,Security,Hash,Hash,2554,"ual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObjArray*GetSteps() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::",MatchSource.WIKI,root/html604/TGraphTime.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphTime.html
https://root.cern/root/html604/TGraphTime.html:4983,Testability,Test,TestBit,4983,"e[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGraphTime&operator=(const TGraphTime&); virtual voidPaint(Option_t* chopt = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidSaveAnimatedGif(const char* filename = """") const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetSleepTime(Int_t stime = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphTime(); TGraphTime(const TGraphTime& gr); TGraphTime(Int_t nsteps, Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGraphTime.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphTime.html
https://root.cern/root/html604/TGraphTime.html:5022,Testability,Test,TestBits,5022,"e[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGraphTime&operator=(const TGraphTime&); virtual voidPaint(Option_t* chopt = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidSaveAnimatedGif(const char* filename = """") const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetSleepTime(Int_t stime = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphTime(); TGraphTime(const TGraphTime& gr); TGraphTime(Int_t nsteps, Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGraphTime.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphTime.html
https://root.cern/root/html604/TGraphTime.html:966,Usability,Clear,Clear,966," virtual~TGraphTime(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAdd(const TObject* obj, Int_t slot, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::Fi",MatchSource.WIKI,root/html604/TGraphTime.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGraphTime.html
https://root.cern/root/html604/TGRecorder.html:4089,Availability,Error,Error,4089,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::G",MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRecorder.html:4218,Availability,error,error,4218," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRecorder.html:4302,Availability,error,error,4302,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UIn",MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRecorder.html:19284,Availability,mask,mask,19284,,MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRecorder.html:23043,Deployability,Update,Update,23043,"DefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGCheckButton*fCursorCheckBoxCheck box ""Show mouse cursor"" for replaying; time_tfElapsedplaying/recording time; Window_tfFilteredIds[12]IDs of these windows in GUI recorder; TRecorder*fRecorderRecorder; TGPictureButton*fReplayButton for start of replaying; time_tfStartplaying/recording time; TGPictureButton*fStartStopButton for start and stop of recording; TGLabel*fStatusLabel with actual status; TGLabel*fTimeDisplayLabel with time counter; TTimer*fTimerTimer for handling GUI of recorder; static const Int_tfgWidgetsCountNumber of windows in GUI recorder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRecorder(const TGWindow* p = 0, UInt_t w = 230, UInt_t h = 150); The GUI for the recorder. void SetDefault(); Sets GUI to the default inactive state. void Update(); Called when fTimer timeouts (every 0.025 second); Updates GUI of recorder. void StartStop(); Handles push of the fStartStop button; according to the current recorder state. void Replay(); Handles push of fReplay button; according to the current recorder state. ~TGRecorder(); Destructor. Cleanup the GUI. TRecorder & operator=(const TGRecorder& ). TGRecorder(const TGWindow* p = 0, UInt_t w = 230, UInt_t h = 150). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRecorder.html:23103,Deployability,Update,Updates,23103,"DefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGCheckButton*fCursorCheckBoxCheck box ""Show mouse cursor"" for replaying; time_tfElapsedplaying/recording time; Window_tfFilteredIds[12]IDs of these windows in GUI recorder; TRecorder*fRecorderRecorder; TGPictureButton*fReplayButton for start of replaying; time_tfStartplaying/recording time; TGPictureButton*fStartStopButton for start and stop of recording; TGLabel*fStatusLabel with actual status; TGLabel*fTimeDisplayLabel with time counter; TTimer*fTimerTimer for handling GUI of recorder; static const Int_tfgWidgetsCountNumber of windows in GUI recorder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRecorder(const TGWindow* p = 0, UInt_t w = 230, UInt_t h = 150); The GUI for the recorder. void SetDefault(); Sets GUI to the default inactive state. void Update(); Called when fTimer timeouts (every 0.025 second); Updates GUI of recorder. void StartStop(); Handles push of the fStartStop button; according to the current recorder state. void Replay(); Handles push of fReplay button; according to the current recorder state. ~TGRecorder(); Destructor. Cleanup the GUI. TRecorder & operator=(const TGRecorder& ). TGRecorder(const TGWindow* p = 0, UInt_t w = 230, UInt_t h = 150). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRecorder.html:10827,Integrability,Message,Message,10827,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGRecorder&operator=(const TGRecorder&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; virtual ",MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRecorder.html:9410,Modifiability,Inherit,InheritsFrom,9410,"TGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRecorder.html:9476,Modifiability,Inherit,InheritsFrom,9476,"e::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRecorder.html:22809,Modifiability,Inherit,Inheritance,22809,"DefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGCheckButton*fCursorCheckBoxCheck box ""Show mouse cursor"" for replaying; time_tfElapsedplaying/recording time; Window_tfFilteredIds[12]IDs of these windows in GUI recorder; TRecorder*fRecorderRecorder; TGPictureButton*fReplayButton for start of replaying; time_tfStartplaying/recording time; TGPictureButton*fStartStopButton for start and stop of recording; TGLabel*fStatusLabel with actual status; TGLabel*fTimeDisplayLabel with time counter; TTimer*fTimerTimer for handling GUI of recorder; static const Int_tfgWidgetsCountNumber of windows in GUI recorder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRecorder(const TGWindow* p = 0, UInt_t w = 230, UInt_t h = 150); The GUI for the recorder. void SetDefault(); Sets GUI to the default inactive state. void Update(); Called when fTimer timeouts (every 0.025 second); Updates GUI of recorder. void StartStop(); Handles push of the fStartStop button; according to the current recorder state. void Replay(); Handles push of fReplay button; according to the current recorder state. ~TGRecorder(); Destructor. Cleanup the GUI. TRecorder & operator=(const TGRecorder& ). TGRecorder(const TGWindow* p = 0, UInt_t w = 230, UInt_t h = 150). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRecorder.html:22822,Modifiability,Inherit,Inherited,22822,"DefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGCheckButton*fCursorCheckBoxCheck box ""Show mouse cursor"" for replaying; time_tfElapsedplaying/recording time; Window_tfFilteredIds[12]IDs of these windows in GUI recorder; TRecorder*fRecorderRecorder; TGPictureButton*fReplayButton for start of replaying; time_tfStartplaying/recording time; TGPictureButton*fStartStopButton for start and stop of recording; TGLabel*fStatusLabel with actual status; TGLabel*fTimeDisplayLabel with time counter; TTimer*fTimerTimer for handling GUI of recorder; static const Int_tfgWidgetsCountNumber of windows in GUI recorder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRecorder(const TGWindow* p = 0, UInt_t w = 230, UInt_t h = 150); The GUI for the recorder. void SetDefault(); Sets GUI to the default inactive state. void Update(); Called when fTimer timeouts (every 0.025 second); Updates GUI of recorder. void StartStop(); Handles push of the fStartStop button; according to the current recorder state. void Replay(); Handles push of fReplay button; according to the current recorder state. ~TGRecorder(); Destructor. Cleanup the GUI. TRecorder & operator=(const TGRecorder& ). TGRecorder(const TGWindow* p = 0, UInt_t w = 230, UInt_t h = 150). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRecorder.html:23072,Safety,timeout,timeouts,23072,"DefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGCheckButton*fCursorCheckBoxCheck box ""Show mouse cursor"" for replaying; time_tfElapsedplaying/recording time; Window_tfFilteredIds[12]IDs of these windows in GUI recorder; TRecorder*fRecorderRecorder; TGPictureButton*fReplayButton for start of replaying; time_tfStartplaying/recording time; TGPictureButton*fStartStopButton for start and stop of recording; TGLabel*fStatusLabel with actual status; TGLabel*fTimeDisplayLabel with time counter; TTimer*fTimerTimer for handling GUI of recorder; static const Int_tfgWidgetsCountNumber of windows in GUI recorder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRecorder(const TGWindow* p = 0, UInt_t w = 230, UInt_t h = 150); The GUI for the recorder. void SetDefault(); Sets GUI to the default inactive state. void Update(); Called when fTimer timeouts (every 0.025 second); Updates GUI of recorder. void StartStop(); Handles push of the fStartStop button; according to the current recorder state. void Replay(); Handles push of fReplay button; according to the current recorder state. ~TGRecorder(); Destructor. Cleanup the GUI. TRecorder & operator=(const TGRecorder& ). TGRecorder(const TGWindow* p = 0, UInt_t w = 230, UInt_t h = 150). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRecorder.html:9120,Security,Hash,Hash,9120,"virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRecorder.html:15714,Testability,Test,TestBit,15714,"virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; voidStartStop(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGRecorder(const TGRecorder&); TGRecorder(const TGWindow* p = 0, UInt_t w = 230, UInt_t h = 150); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidUpdate(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRecorder.html:15753,Testability,Test,TestBits,15753,"virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; voidStartStop(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGRecorder(const TGRecorder&); TGRecorder(const TGWindow* p = 0, UInt_t w = 230, UInt_t h = 150); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidUpdate(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRecorder.html:1334,Usability,Clear,Clear,1334," virtual~TGRecorder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTGMainFrame::CloseWindow()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(",MatchSource.WIKI,root/html604/TGRecorder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRecorder.html
https://root.cern/root/html604/TGRectangle.html:1383,Modifiability,Inherit,Inheritance,1383,"and height), positions (x and y), insets and rectangles.; They are trivial and their members are public. Function Members (Methods); public:. virtual~TGRectangle(); Int_tArea() const; static TClass*Class(); Bool_tContains(const TGPosition& p) const; Bool_tContains(Int_t px, Int_t py) const; voidEmpty(); Bool_tIntersects(const TGRectangle& r) const; virtual TClass*IsA() const; Bool_tIsEmpty() const; TGPositionLeftTop() const; voidMerge(const TGRectangle& r); TGRectangle&operator=(const TGRectangle&); TGPositionRightBottom() const; virtual voidShowMembers(TMemberInspector& insp) const; TGDimensionSize() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGRectangle(); TGRectangle(const TGRectangle& r); TGRectangle(const TGPosition& p, const TGDimension& d); TGRectangle(Int_t rx, Int_t ry, UInt_t rw, UInt_t rh). Data Members; public:. UInt_tfHheight; UInt_tfWwidth; Int_tfXx position; Int_tfYy position. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Merge(const TGRectangle& r); Merge parameters. TGRectangle(); constructors. { Empty(); }. TGRectangle(Int_t rx, Int_t ry, UInt_t rw, UInt_t rh); { }. TGRectangle(const TGPosition& p, const TGDimension& d); { }. TGRectangle(const TGRectangle& r); { }. virtual ~TGRectangle(); { }. Bool_t Contains(Int_t px, Int_t py) const; methods. Bool_t Contains(const TGPosition& p) const. Bool_t Intersects(const TGRectangle& r) const. Int_t Area() const; { return (fW * fH); }. TGDimension Size() const; { return TGDimension(fW, fH); }. TGPosition LeftTop() const; { return TGPosition(fX, fY); }. TGPosition RightBottom() const; { return TGPosition(fX + (Int_t) fW - 1, fY + (Int_t) fH - 1); }. void Empty(); { fX = fY = 0; fW = fH = 0; }. Bool_t IsEmpty() const; { return ((fW == 0) && (fH == 0)); }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02",MatchSource.WIKI,root/html604/TGRectangle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRectangle.html
https://root.cern/root/html604/TGRectangle.html:1396,Modifiability,Inherit,Inherited,1396,"and height), positions (x and y), insets and rectangles.; They are trivial and their members are public. Function Members (Methods); public:. virtual~TGRectangle(); Int_tArea() const; static TClass*Class(); Bool_tContains(const TGPosition& p) const; Bool_tContains(Int_t px, Int_t py) const; voidEmpty(); Bool_tIntersects(const TGRectangle& r) const; virtual TClass*IsA() const; Bool_tIsEmpty() const; TGPositionLeftTop() const; voidMerge(const TGRectangle& r); TGRectangle&operator=(const TGRectangle&); TGPositionRightBottom() const; virtual voidShowMembers(TMemberInspector& insp) const; TGDimensionSize() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGRectangle(); TGRectangle(const TGRectangle& r); TGRectangle(const TGPosition& p, const TGDimension& d); TGRectangle(Int_t rx, Int_t ry, UInt_t rw, UInt_t rh). Data Members; public:. UInt_tfHheight; UInt_tfWwidth; Int_tfXx position; Int_tfYy position. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Merge(const TGRectangle& r); Merge parameters. TGRectangle(); constructors. { Empty(); }. TGRectangle(Int_t rx, Int_t ry, UInt_t rw, UInt_t rh); { }. TGRectangle(const TGPosition& p, const TGDimension& d); { }. TGRectangle(const TGRectangle& r); { }. virtual ~TGRectangle(); { }. Bool_t Contains(Int_t px, Int_t py) const; methods. Bool_t Contains(const TGPosition& p) const. Bool_t Intersects(const TGRectangle& r) const. Int_t Area() const; { return (fW * fH); }. TGDimension Size() const; { return TGDimension(fW, fH); }. TGPosition LeftTop() const; { return TGPosition(fX, fY); }. TGPosition RightBottom() const; { return TGPosition(fX + (Int_t) fW - 1, fY + (Int_t) fH - 1); }. void Empty(); { fX = fY = 0; fW = fH = 0; }. Bool_t IsEmpty() const; { return ((fW == 0) && (fH == 0)); }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02",MatchSource.WIKI,root/html604/TGRectangle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRectangle.html
https://root.cern/root/html604/TGRectMap.html:1169,Availability,Error,Error,1169," virtual~TGRectMap(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tContains(Int_t px, Int_t py) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const ",MatchSource.WIKI,root/html604/TGRectMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRectMap.html
https://root.cern/root/html604/TGRectMap.html:1298,Availability,error,error,1298," virtual~TGRectMap(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tContains(Int_t px, Int_t py) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const ",MatchSource.WIKI,root/html604/TGRectMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRectMap.html
https://root.cern/root/html604/TGRectMap.html:1382,Availability,error,error,1382,"ethod) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tContains(Int_t px, Int_t py) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html604/TGRectMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRectMap.html
https://root.cern/root/html604/TGRectMap.html:2262,Modifiability,Inherit,InheritsFrom,2262,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TGRectMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRectMap.html
https://root.cern/root/html604/TGRectMap.html:2328,Modifiability,Inherit,InheritsFrom,2328,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); ",MatchSource.WIKI,root/html604/TGRectMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRectMap.html
https://root.cern/root/html604/TGRectMap.html:5697,Modifiability,Inherit,Inheritance,5697,"_t ry, UInt_t rw, UInt_t rh); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TGRectMap&operator=(const TGRectMap&); TGRectMap(const TGRectMap&). Data Members; public:. UInt_tfHheight; UInt_tfWwidth; Int_tfXx position; Int_tfYy position; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRectMap(const TGRectMap& ). TGRectMap& operator=(const TGRectMap& ). TGRectMap(Int_t rx, Int_t ry, UInt_t rw, UInt_t rh); constructors. { }. virtual ~TGRectMap(); { }. Bool_t Contains(Int_t px, Int_t py) const; methods. » Author: Bertrand Bellenot 23/01/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGRectMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRectMap.html
https://root.cern/root/html604/TGRectMap.html:5710,Modifiability,Inherit,Inherited,5710,"_t ry, UInt_t rw, UInt_t rh); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TGRectMap&operator=(const TGRectMap&); TGRectMap(const TGRectMap&). Data Members; public:. UInt_tfHheight; UInt_tfWwidth; Int_tfXx position; Int_tfYy position; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRectMap(const TGRectMap& ). TGRectMap& operator=(const TGRectMap& ). TGRectMap(Int_t rx, Int_t ry, UInt_t rw, UInt_t rh); constructors. { }. virtual ~TGRectMap(); { }. Bool_t Contains(Int_t px, Int_t py) const; methods. » Author: Bertrand Bellenot 23/01/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGRectMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRectMap.html
https://root.cern/root/html604/TGRectMap.html:2152,Security,Hash,Hash,2152,"l voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TGRectMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRectMap.html
https://root.cern/root/html604/TGRectMap.html:4229,Testability,Test,TestBit,4229,"t; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGRectMap(Int_t rx, Int_t ry, UInt_t rw, UInt_t rh); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGRectMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRectMap.html
https://root.cern/root/html604/TGRectMap.html:4268,Testability,Test,TestBits,4268,"t; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGRectMap(Int_t rx, Int_t ry, UInt_t rw, UInt_t rh); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGRectMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRectMap.html
https://root.cern/root/html604/TGRectMap.html:587,Usability,Clear,Clear,587," virtual~TGRectMap(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tContains(Int_t px, Int_t py) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const ",MatchSource.WIKI,root/html604/TGRectMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRectMap.html
https://root.cern/root/html604/TGRedirectOutputGuard.html:505,Deployability,Update,Update,505,". TGRedirectOutputGuard. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGRedirectOutputGuard. class TGRedirectOutputGuard. TGRedirectOutputGuard. This class provides output redirection to a TGTextView in guaranteed; exception safe way. Use like this:; {; TGRedirectOutputGuard guard(textview);; ... // do something; guard.Update();; ... // do something else; }; when guard goes out of scope, Update() is called to flush what left; on the screed and the output is automatically redirected again to; the standard units.; The exception mechanism takes care of calling the dtors; of local objects so it is exception safe.; Optionally the output can also be saved into a file:; {; TGRedirectOutputGuard guard(textview, file, mode);; ... // do something; }. Function Members (Methods); public:. virtual~TGRedirectOutputGuard(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGRedirectOutputGuard(TGTextView* tv, const char* flog = 0, const char* mode = ""a""); voidUpdate(). private:. TGRedirectOutputGuard&operator=(const TGRedirectOutputGuard&); TGRedirectOutputGuard(const TGRedirectOutputGuard&). Data Members; private:. TStringfLogFile; FILE*fLogFileRead; TGTextView*fTextView; Bool_tfTmpFile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRedirectOutputGuard(TGTextView* tv, const char* flog = 0, const char* mode = ""a""); Create output redirection guard.; The TGTextView instance should be initialized outside.; Text is added to the existing text in the frame.; If defined, 'flog' is interpreted as the path of a file; where to save the output; in such a case 'mode' if the; opening mode of the file (either ""w"" or ""a"").;",MatchSource.WIKI,root/html604/TGRedirectOutputGuard.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRedirectOutputGuard.html
https://root.cern/root/html604/TGRedirectOutputGuard.html:575,Deployability,Update,Update,575,". TGRedirectOutputGuard. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGRedirectOutputGuard. class TGRedirectOutputGuard. TGRedirectOutputGuard. This class provides output redirection to a TGTextView in guaranteed; exception safe way. Use like this:; {; TGRedirectOutputGuard guard(textview);; ... // do something; guard.Update();; ... // do something else; }; when guard goes out of scope, Update() is called to flush what left; on the screed and the output is automatically redirected again to; the standard units.; The exception mechanism takes care of calling the dtors; of local objects so it is exception safe.; Optionally the output can also be saved into a file:; {; TGRedirectOutputGuard guard(textview, file, mode);; ... // do something; }. Function Members (Methods); public:. virtual~TGRedirectOutputGuard(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGRedirectOutputGuard(TGTextView* tv, const char* flog = 0, const char* mode = ""a""); voidUpdate(). private:. TGRedirectOutputGuard&operator=(const TGRedirectOutputGuard&); TGRedirectOutputGuard(const TGRedirectOutputGuard&). Data Members; private:. TStringfLogFile; FILE*fLogFileRead; TGTextView*fTextView; Bool_tfTmpFile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRedirectOutputGuard(TGTextView* tv, const char* flog = 0, const char* mode = ""a""); Create output redirection guard.; The TGTextView instance should be initialized outside.; Text is added to the existing text in the frame.; If defined, 'flog' is interpreted as the path of a file; where to save the output; in such a case 'mode' if the; opening mode of the file (either ""w"" or ""a"").;",MatchSource.WIKI,root/html604/TGRedirectOutputGuard.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRedirectOutputGuard.html
https://root.cern/root/html604/TGRedirectOutputGuard.html:2082,Deployability,Update,Update,2082,"e() is called to flush what left; on the screed and the output is automatically redirected again to; the standard units.; The exception mechanism takes care of calling the dtors; of local objects so it is exception safe.; Optionally the output can also be saved into a file:; {; TGRedirectOutputGuard guard(textview, file, mode);; ... // do something; }. Function Members (Methods); public:. virtual~TGRedirectOutputGuard(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGRedirectOutputGuard(TGTextView* tv, const char* flog = 0, const char* mode = ""a""); voidUpdate(). private:. TGRedirectOutputGuard&operator=(const TGRedirectOutputGuard&); TGRedirectOutputGuard(const TGRedirectOutputGuard&). Data Members; private:. TStringfLogFile; FILE*fLogFileRead; TGTextView*fTextView; Bool_tfTmpFile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRedirectOutputGuard(TGTextView* tv, const char* flog = 0, const char* mode = ""a""); Create output redirection guard.; The TGTextView instance should be initialized outside.; Text is added to the existing text in the frame.; If defined, 'flog' is interpreted as the path of a file; where to save the output; in such a case 'mode' if the; opening mode of the file (either ""w"" or ""a"").; By default a temporary file is used. ~TGRedirectOutputGuard(); Destructor. void Update(); Send to text frame the undisplayed content of the file. TGRedirectOutputGuard(const TGRedirectOutputGuard& ). TGRedirectOutputGuard & operator=(const TGRedirectOutputGuard& ). » Author: G. Ganis 10/10/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGRedirectOutputGuard.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRedirectOutputGuard.html
https://root.cern/root/html604/TGRedirectOutputGuard.html:1540,Modifiability,Inherit,Inheritance,1540,"of scope, Update() is called to flush what left; on the screed and the output is automatically redirected again to; the standard units.; The exception mechanism takes care of calling the dtors; of local objects so it is exception safe.; Optionally the output can also be saved into a file:; {; TGRedirectOutputGuard guard(textview, file, mode);; ... // do something; }. Function Members (Methods); public:. virtual~TGRedirectOutputGuard(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGRedirectOutputGuard(TGTextView* tv, const char* flog = 0, const char* mode = ""a""); voidUpdate(). private:. TGRedirectOutputGuard&operator=(const TGRedirectOutputGuard&); TGRedirectOutputGuard(const TGRedirectOutputGuard&). Data Members; private:. TStringfLogFile; FILE*fLogFileRead; TGTextView*fTextView; Bool_tfTmpFile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRedirectOutputGuard(TGTextView* tv, const char* flog = 0, const char* mode = ""a""); Create output redirection guard.; The TGTextView instance should be initialized outside.; Text is added to the existing text in the frame.; If defined, 'flog' is interpreted as the path of a file; where to save the output; in such a case 'mode' if the; opening mode of the file (either ""w"" or ""a"").; By default a temporary file is used. ~TGRedirectOutputGuard(); Destructor. void Update(); Send to text frame the undisplayed content of the file. TGRedirectOutputGuard(const TGRedirectOutputGuard& ). TGRedirectOutputGuard & operator=(const TGRedirectOutputGuard& ). » Author: G. Ganis 10/10/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ",MatchSource.WIKI,root/html604/TGRedirectOutputGuard.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRedirectOutputGuard.html
https://root.cern/root/html604/TGRedirectOutputGuard.html:1553,Modifiability,Inherit,Inherited,1553,"of scope, Update() is called to flush what left; on the screed and the output is automatically redirected again to; the standard units.; The exception mechanism takes care of calling the dtors; of local objects so it is exception safe.; Optionally the output can also be saved into a file:; {; TGRedirectOutputGuard guard(textview, file, mode);; ... // do something; }. Function Members (Methods); public:. virtual~TGRedirectOutputGuard(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGRedirectOutputGuard(TGTextView* tv, const char* flog = 0, const char* mode = ""a""); voidUpdate(). private:. TGRedirectOutputGuard&operator=(const TGRedirectOutputGuard&); TGRedirectOutputGuard(const TGRedirectOutputGuard&). Data Members; private:. TStringfLogFile; FILE*fLogFileRead; TGTextView*fTextView; Bool_tfTmpFile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRedirectOutputGuard(TGTextView* tv, const char* flog = 0, const char* mode = ""a""); Create output redirection guard.; The TGTextView instance should be initialized outside.; Text is added to the existing text in the frame.; If defined, 'flog' is interpreted as the path of a file; where to save the output; in such a case 'mode' if the; opening mode of the file (either ""w"" or ""a"").; By default a temporary file is used. ~TGRedirectOutputGuard(); Destructor. void Update(); Send to text frame the undisplayed content of the file. TGRedirectOutputGuard(const TGRedirectOutputGuard& ). TGRedirectOutputGuard & operator=(const TGRedirectOutputGuard& ). » Author: G. Ganis 10/10/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ",MatchSource.WIKI,root/html604/TGRedirectOutputGuard.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRedirectOutputGuard.html
https://root.cern/root/html604/TGRedirectOutputGuard.html:409,Safety,safe,safe,409,". TGRedirectOutputGuard. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGRedirectOutputGuard. class TGRedirectOutputGuard. TGRedirectOutputGuard. This class provides output redirection to a TGTextView in guaranteed; exception safe way. Use like this:; {; TGRedirectOutputGuard guard(textview);; ... // do something; guard.Update();; ... // do something else; }; when guard goes out of scope, Update() is called to flush what left; on the screed and the output is automatically redirected again to; the standard units.; The exception mechanism takes care of calling the dtors; of local objects so it is exception safe.; Optionally the output can also be saved into a file:; {; TGRedirectOutputGuard guard(textview, file, mode);; ... // do something; }. Function Members (Methods); public:. virtual~TGRedirectOutputGuard(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGRedirectOutputGuard(TGTextView* tv, const char* flog = 0, const char* mode = ""a""); voidUpdate(). private:. TGRedirectOutputGuard&operator=(const TGRedirectOutputGuard&); TGRedirectOutputGuard(const TGRedirectOutputGuard&). Data Members; private:. TStringfLogFile; FILE*fLogFileRead; TGTextView*fTextView; Bool_tfTmpFile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRedirectOutputGuard(TGTextView* tv, const char* flog = 0, const char* mode = ""a""); Create output redirection guard.; The TGTextView instance should be initialized outside.; Text is added to the existing text in the frame.; If defined, 'flog' is interpreted as the path of a file; where to save the output; in such a case 'mode' if the; opening mode of the file (either ""w"" or ""a"").;",MatchSource.WIKI,root/html604/TGRedirectOutputGuard.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRedirectOutputGuard.html
https://root.cern/root/html604/TGRedirectOutputGuard.html:795,Safety,safe,safe,795,". TGRedirectOutputGuard. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGRedirectOutputGuard. class TGRedirectOutputGuard. TGRedirectOutputGuard. This class provides output redirection to a TGTextView in guaranteed; exception safe way. Use like this:; {; TGRedirectOutputGuard guard(textview);; ... // do something; guard.Update();; ... // do something else; }; when guard goes out of scope, Update() is called to flush what left; on the screed and the output is automatically redirected again to; the standard units.; The exception mechanism takes care of calling the dtors; of local objects so it is exception safe.; Optionally the output can also be saved into a file:; {; TGRedirectOutputGuard guard(textview, file, mode);; ... // do something; }. Function Members (Methods); public:. virtual~TGRedirectOutputGuard(); static TClass*Class(); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGRedirectOutputGuard(TGTextView* tv, const char* flog = 0, const char* mode = ""a""); voidUpdate(). private:. TGRedirectOutputGuard&operator=(const TGRedirectOutputGuard&); TGRedirectOutputGuard(const TGRedirectOutputGuard&). Data Members; private:. TStringfLogFile; FILE*fLogFileRead; TGTextView*fTextView; Bool_tfTmpFile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRedirectOutputGuard(TGTextView* tv, const char* flog = 0, const char* mode = ""a""); Create output redirection guard.; The TGTextView instance should be initialized outside.; Text is added to the existing text in the frame.; If defined, 'flog' is interpreted as the path of a file; where to save the output; in such a case 'mode' if the; opening mode of the file (either ""w"" or ""a"").;",MatchSource.WIKI,root/html604/TGRedirectOutputGuard.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRedirectOutputGuard.html
https://root.cern/root/html604/TGRegion.html:1420,Availability,Error,Error,1420," virtual~TGRegion(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tContains(const TPoint& p) const; Bool_tContains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TGRegionEor(const TGRegion& r) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGDimensionGetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static L",MatchSource.WIKI,root/html604/TGRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegion.html
https://root.cern/root/html604/TGRegion.html:1549,Availability,error,error,1549,"t char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tContains(const TPoint& p) const; Bool_tContains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TGRegionEor(const TGRegion& r) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGDimensionGetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGPositionGetPosition() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const",MatchSource.WIKI,root/html604/TGRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegion.html
https://root.cern/root/html604/TGRegion.html:1633,Availability,error,error,1633,"l voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tContains(const TPoint& p) const; Bool_tContains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TGRegionEor(const TGRegion& r) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGDimensionGetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGPositionGetPosition() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTO",MatchSource.WIKI,root/html604/TGRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegion.html
https://root.cern/root/html604/TGRegion.html:2577,Modifiability,Inherit,InheritsFrom,2577,"xecute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGDimensionGetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGPositionGetPosition() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; TGRegionIntersect(const TGRegion& r) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsNull() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz,",MatchSource.WIKI,root/html604/TGRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegion.html
https://root.cern/root/html604/TGRegion.html:2643,Modifiability,Inherit,InheritsFrom,2643,"ual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGDimensionGetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGPositionGetPosition() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; TGRegionIntersect(const TGRegion& r) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsNull() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject:",MatchSource.WIKI,root/html604/TGRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegion.html
https://root.cern/root/html604/TGRegion.html:7029,Modifiability,Inherit,Inheritance,7029,"char* fmt, va_list va) const; voidTObject::MakeZombie(); TGRegion(Bool_t). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGRegion::ERegionTypekEllipse; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TGRegion::ERegionTypekRectangle; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGRegionData*fDatadata describing region. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRegion(); Create a region object. TGRegion(Bool_t ); Create empty region. TGRegion(Int_t x, Int_t y, UInt_t w, UInt_t h, TGRegion::ERegionType = kRectangle); Create and initialize a region with a rectangle. TGRegion(Int_t n, TPoint* points, Bool_t winding = kFALSE); Create and intialize a region with a polygon. TGRegion(const TArrayS& x, const TArrayS& y, Bool_t winding = kFALSE); Create and initialize a region with an X and a Y array of points. TGRegion(Int_t n, Int_t* x, Int_t* y, Bool_t winding = kFALSE); Create and initialize a region with an X and Y array of points. TGRegion(const TGRegion& reg); Region copy constructor. ~TGRegion(); Delete a region. TGRegion & operator=(const TGRegion& r); Region assignment operator. TGRegion CopyRegion() const; Copy a region. Bool_t IsNull() const; Return true if region is not set. Bool_t IsEmpty() const; Return true if region is empty. Bool_t Contains(const TPoint& p) const; Return true if po",MatchSource.WIKI,root/html604/TGRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegion.html
https://root.cern/root/html604/TGRegion.html:7042,Modifiability,Inherit,Inherited,7042,"char* fmt, va_list va) const; voidTObject::MakeZombie(); TGRegion(Bool_t). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGRegion::ERegionTypekEllipse; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TGRegion::ERegionTypekRectangle; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGRegionData*fDatadata describing region. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRegion(); Create a region object. TGRegion(Bool_t ); Create empty region. TGRegion(Int_t x, Int_t y, UInt_t w, UInt_t h, TGRegion::ERegionType = kRectangle); Create and initialize a region with a rectangle. TGRegion(Int_t n, TPoint* points, Bool_t winding = kFALSE); Create and intialize a region with a polygon. TGRegion(const TArrayS& x, const TArrayS& y, Bool_t winding = kFALSE); Create and initialize a region with an X and a Y array of points. TGRegion(Int_t n, Int_t* x, Int_t* y, Bool_t winding = kFALSE); Create and initialize a region with an X and Y array of points. TGRegion(const TGRegion& reg); Region copy constructor. ~TGRegion(); Delete a region. TGRegion & operator=(const TGRegion& r); Region assignment operator. TGRegion CopyRegion() const; Copy a region. Bool_t IsNull() const; Return true if region is not set. Bool_t IsEmpty() const; Return true if region is empty. Bool_t Contains(const TPoint& p) const; Return true if po",MatchSource.WIKI,root/html604/TGRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegion.html
https://root.cern/root/html604/TGRegion.html:2467,Security,Hash,Hash,2467,"st; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGDimensionGetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGPositionGetPosition() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; TGRegionIntersect(const TGRegion& r) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsNull() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::op",MatchSource.WIKI,root/html604/TGRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegion.html
https://root.cern/root/html604/TGRegion.html:5221,Testability,Test,TestBit,5221,"GRegion&operator-=(const TGRegion& r); TGRegion&operator=(const TGRegion& r); Bool_toperator==(const TGRegion& r) const; TGRegionoperator^(const TGRegion& r) const; TGRegion&operator^=(const TGRegion& r); TGRegionoperator|(const TGRegion& r) const; TGRegion&operator|=(const TGRegion& r); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGRegionSubtract(const TGRegion& r) const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGRegion(); TGRegion(const TGRegion& reg); TGRegion(Int_t n, TPoint* points, Bool_t winding = kFALSE); TGRegion(const TArrayS& x, const TArrayS& y, Bool_t winding = kFALSE); TGRegion(Int_t n, Int_t* x, Int_t* y, Bool_t winding = kFALSE); TGRegion(Int_t x, Int_t y, UInt_t w, UInt_t h, TGRegion::ERegionType = kRectangle); TGRegionUnite(const TGRegion& r) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegion.html
https://root.cern/root/html604/TGRegion.html:5260,Testability,Test,TestBits,5260,"GRegion&operator-=(const TGRegion& r); TGRegion&operator=(const TGRegion& r); Bool_toperator==(const TGRegion& r) const; TGRegionoperator^(const TGRegion& r) const; TGRegion&operator^=(const TGRegion& r); TGRegionoperator|(const TGRegion& r) const; TGRegion&operator|=(const TGRegion& r); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGRegionSubtract(const TGRegion& r) const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGRegion(); TGRegion(const TGRegion& reg); TGRegion(Int_t n, TPoint* points, Bool_t winding = kFALSE); TGRegion(const TArrayS& x, const TArrayS& y, Bool_t winding = kFALSE); TGRegion(Int_t n, Int_t* x, Int_t* y, Bool_t winding = kFALSE); TGRegion(Int_t x, Int_t y, UInt_t w, UInt_t h, TGRegion::ERegionType = kRectangle); TGRegionUnite(const TGRegion& r) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegion.html
https://root.cern/root/html604/TGRegion.html:763,Usability,Clear,Clear,763," virtual~TGRegion(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tContains(const TPoint& p) const; Bool_tContains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TGRegionEor(const TGRegion& r) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGDimensionGetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static L",MatchSource.WIKI,root/html604/TGRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegion.html
https://root.cern/root/html604/TGRegionWithId.html:1495,Availability,Error,Error,1495," virtual~TGRegionWithId(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTGRegion::Contains(const TPoint& p) const; Bool_tTGRegion::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisplayPopup(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TGRegionTGRegion::Eor(const TGRegion& r) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGDimensionTGRe",MatchSource.WIKI,root/html604/TGRegionWithId.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegionWithId.html
https://root.cern/root/html604/TGRegionWithId.html:1624,Availability,error,error,1624,"Pad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTGRegion::Contains(const TPoint& p) const; Bool_tTGRegion::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisplayPopup(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TGRegionTGRegion::Eor(const TGRegion& r) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGDimensionTGRegion::GetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetId() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGPopupMenu*GetPopup() const; TGPositionTGRegion::GetPosition() const; virtual const char*TObject::GetTitle() const; TGToolTip*GetToolTipText() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtu",MatchSource.WIKI,root/html604/TGRegionWithId.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegionWithId.html
https://root.cern/root/html604/TGRegionWithId.html:1708,Availability,error,error,1708,"Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTGRegion::Contains(const TPoint& p) const; Bool_tTGRegion::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisplayPopup(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TGRegionTGRegion::Eor(const TGRegion& r) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGDimensionTGRegion::GetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetId() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGPopupMenu*GetPopup() const; TGPositionTGRegion::GetPosition() const; virtual const char*TObject::GetTitle() const; TGToolTip*GetToolTipText() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const",MatchSource.WIKI,root/html604/TGRegionWithId.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegionWithId.html
https://root.cern/root/html604/TGRegionWithId.html:2756,Modifiability,Inherit,InheritsFrom,2756,"ent, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGDimensionTGRegion::GetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetId() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGPopupMenu*GetPopup() const; TGPositionTGRegion::GetPosition() const; virtual const char*TObject::GetTitle() const; TGToolTip*GetToolTipText() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; TGRegionTGRegion::Intersect(const TGRegion& r) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTGRegion::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTGRegion::IsNull() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TO",MatchSource.WIKI,root/html604/TGRegionWithId.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegionWithId.html
https://root.cern/root/html604/TGRegionWithId.html:2822,Modifiability,Inherit,InheritsFrom,2822,"ethod, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGDimensionTGRegion::GetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetId() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGPopupMenu*GetPopup() const; TGPositionTGRegion::GetPosition() const; virtual const char*TObject::GetTitle() const; TGToolTip*GetToolTipText() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; TGRegionTGRegion::Intersect(const TGRegion& r) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTGRegion::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTGRegion::IsNull() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator n",MatchSource.WIKI,root/html604/TGRegionWithId.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegionWithId.html
https://root.cern/root/html604/TGRegionWithId.html:7564,Modifiability,Inherit,Inheritance,7564,"ic TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGRegion::ERegionTypeTGRegion::kEllipse; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TGRegion::ERegionTypeTGRegion::kRectangle; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGRegionData*TGRegion::fDatadata describing region; Int_tfIdregion id; TGPopupMenu*fPopuppopup menu; TGToolTip*fTiptooltip. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRegionWithId(); Create GUI region (with id and possible tooltip). TGRegionWithId(Int_t id, Int_t x, Int_t y, UInt_t w, UInt_t h, TGRegion::ERegionType = kRectangle); Create GUI region (with id and possible tooltip). TGRegionWithId(Int_t id, Int_t n, TPoint* points, Bool_t winding = kFALSE); Create GUI region (with id and possible tooltip). TGRegionWithId(const TGRegionWithId& reg); Copy constructor. TGRegionWithId(const TGRegion& reg, Int_t id); Copy ctor which allows setting of new id. ~TGRegionWithId(); Cleanup. void DisplayPopup(); Display popup menu associated with this region. void SetToolTipText(const char* text, Long_t delayms, const TGFrame* frame); Set tool tip text associated with this region. The delay is in; milliseconds (minimum 250). To remove tool tip call method with; text = 0. TGRegion & operator=(const TGRegionWithId& ). Int_t GetId() const; { return fId; }. TGToolTip * GetToolTipText() const; { return fTip; }. TGPo",MatchSource.WIKI,root/html604/TGRegionWithId.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegionWithId.html
https://root.cern/root/html604/TGRegionWithId.html:7577,Modifiability,Inherit,Inherited,7577,"ic TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGRegion::ERegionTypeTGRegion::kEllipse; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TGRegion::ERegionTypeTGRegion::kRectangle; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGRegionData*TGRegion::fDatadata describing region; Int_tfIdregion id; TGPopupMenu*fPopuppopup menu; TGToolTip*fTiptooltip. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGRegionWithId(); Create GUI region (with id and possible tooltip). TGRegionWithId(Int_t id, Int_t x, Int_t y, UInt_t w, UInt_t h, TGRegion::ERegionType = kRectangle); Create GUI region (with id and possible tooltip). TGRegionWithId(Int_t id, Int_t n, TPoint* points, Bool_t winding = kFALSE); Create GUI region (with id and possible tooltip). TGRegionWithId(const TGRegionWithId& reg); Copy constructor. TGRegionWithId(const TGRegion& reg, Int_t id); Copy ctor which allows setting of new id. ~TGRegionWithId(); Cleanup. void DisplayPopup(); Display popup menu associated with this region. void SetToolTipText(const char* text, Long_t delayms, const TGFrame* frame); Set tool tip text associated with this region. The delay is in; milliseconds (minimum 250). To remove tool tip call method with; text = 0. TGRegion & operator=(const TGRegionWithId& ). Int_t GetId() const; { return fId; }. TGToolTip * GetToolTipText() const; { return fTip; }. TGPo",MatchSource.WIKI,root/html604/TGRegionWithId.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegionWithId.html
https://root.cern/root/html604/TGRegionWithId.html:2646,Security,Hash,Hash,2646,"TObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGDimensionTGRegion::GetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetId() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGPopupMenu*GetPopup() const; TGPositionTGRegion::GetPosition() const; virtual const char*TObject::GetTitle() const; TGToolTip*GetToolTipText() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; TGRegionTGRegion::Intersect(const TGRegion& r) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTGRegion::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTGRegion::IsNull() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete",MatchSource.WIKI,root/html604/TGRegionWithId.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegionWithId.html
https://root.cern/root/html604/TGRegionWithId.html:5631,Testability,Test,TestBit,5631,"egion::operator^(const TGRegion& r) const; TGRegion&TGRegion::operator^=(const TGRegion& r); TGRegionTGRegion::operator|(const TGRegion& r) const; TGRegion&TGRegion::operator|=(const TGRegion& r); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetPopup(TGPopupMenu* popup); voidSetToolTipText(const char* text, Long_t delayms, const TGFrame* frame); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGRegionTGRegion::Subtract(const TGRegion& r) const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGRegionWithId(); TGRegionWithId(const TGRegionWithId& reg); TGRegionWithId(const TGRegion& reg, Int_t id); TGRegionWithId(Int_t id, Int_t n, TPoint* points, Bool_t winding = kFALSE); TGRegionWithId(Int_t id, Int_t x, Int_t y, UInt_t w, UInt_t h, TGRegion::ERegionType = kRectangle); TGRegionTGRegion::Unite(const TGRegion& r) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGRegionWithId.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegionWithId.html
https://root.cern/root/html604/TGRegionWithId.html:5670,Testability,Test,TestBits,5670,"egion::operator^(const TGRegion& r) const; TGRegion&TGRegion::operator^=(const TGRegion& r); TGRegionTGRegion::operator|(const TGRegion& r) const; TGRegion&TGRegion::operator|=(const TGRegion& r); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetPopup(TGPopupMenu* popup); voidSetToolTipText(const char* text, Long_t delayms, const TGFrame* frame); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGRegionTGRegion::Subtract(const TGRegion& r) const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGRegionWithId(); TGRegionWithId(const TGRegionWithId& reg); TGRegionWithId(const TGRegion& reg, Int_t id); TGRegionWithId(Int_t id, Int_t n, TPoint* points, Bool_t winding = kFALSE); TGRegionWithId(Int_t id, Int_t x, Int_t y, UInt_t w, UInt_t h, TGRegion::ERegionType = kRectangle); TGRegionTGRegion::Unite(const TGRegion& r) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGRegionWithId.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegionWithId.html
https://root.cern/root/html604/TGRegionWithId.html:788,Usability,Clear,Clear,788," virtual~TGRegionWithId(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTGRegion::Contains(const TPoint& p) const; Bool_tTGRegion::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisplayPopup(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TGRegionTGRegion::Eor(const TGRegion& r) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGDimensionTGRe",MatchSource.WIKI,root/html604/TGRegionWithId.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRegionWithId.html
https://root.cern/root/html604/TGResourcePool.html:1260,Availability,Error,Error,1260," virtual~TGResourcePool(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Pixel_tGetBlackColor() const; const TGGC*GetBlackGC() const; Pixmap_tGetCheckeredBitmap() const; Pixmap_tGetCheckeredPixmap() const; TGClient*TGObject::GetClient() const; Atom_tGetClipboard() const; Colormap_tGetDefaultColormap() const; Cursor_tGetDe",MatchSource.WIKI,root/html604/TGResourcePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGResourcePool.html
https://root.cern/root/html604/TGResourcePool.html:1389,Availability,error,error,1389," virtual~TGResourcePool(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Pixel_tGetBlackColor() const; const TGGC*GetBlackGC() const; Pixmap_tGetCheckeredBitmap() const; Pixmap_tGetCheckeredPixmap() const; TGClient*TGObject::GetClient() const; Atom_tGetClipboard() const; Colormap_tGetDefaultColormap() const; Cursor_tGetDe",MatchSource.WIKI,root/html604/TGResourcePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGResourcePool.html
https://root.cern/root/html604/TGResourcePool.html:1473,Availability,error,error,1473," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Pixel_tGetBlackColor() const; const TGGC*GetBlackGC() const; Pixmap_tGetCheckeredBitmap() const; Pixmap_tGetCheckeredPixmap() const; TGClient*TGObject::GetClient() const; Atom_tGetClipboard() const; Colormap_tGetDefaultColormap() const; Cursor_tGetDefaultCursor() const; const TGFont*GetDefaultFont() const; const TGGC*GetDocumentBckgndGC() const; const TGPicture*GetDocumentBckgndPicture() const; Pixel_tGetDocumentBgndColor() const; Pixel_tGetDocumentFgndColor() const; const TGFont*GetDocumentFixedFont() const; const TGGC*GetDocumentGC() const; const TGFont*GetDocumentPropFont() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TGGC*GetFocusHiliteGC() const; TGFontPool*",MatchSource.WIKI,root/html604/TGResourcePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGResourcePool.html
https://root.cern/root/html604/TGResourcePool.html:4049,Modifiability,Inherit,InheritsFrom,4049,"Font() const; const TGFont*GetMenuHiliteFont() const; TGMimeTypes*GetMimeTypes() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGPicturePool*GetPicturePool() const; const TGGC*GetSelectedBckgndGC() const; Pixel_tGetSelectedBgndColor() const; Pixel_tGetSelectedFgndColor() const; const TGGC*GetSelectedGC() const; const TGFont*GetStatusFont() const; Cursor_tGetTextCursor() const; Pixel_tGetTipBgndColor() const; Pixel_tGetTipFgndColor() const; const TGGC*GetTipGC() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Cursor_tGetWaitCursor() const; Pixel_tGetWhiteColor() const; const TGGC*GetWhiteGC() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTGObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t",MatchSource.WIKI,root/html604/TGResourcePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGResourcePool.html
https://root.cern/root/html604/TGResourcePool.html:4115,Modifiability,Inherit,InheritsFrom,4115,"GetMimeTypes() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGPicturePool*GetPicturePool() const; const TGGC*GetSelectedBckgndGC() const; Pixel_tGetSelectedBgndColor() const; Pixel_tGetSelectedFgndColor() const; const TGGC*GetSelectedGC() const; const TGFont*GetStatusFont() const; Cursor_tGetTextCursor() const; Pixel_tGetTipBgndColor() const; Pixel_tGetTipFgndColor() const; const TGGC*GetTipGC() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Cursor_tGetWaitCursor() const; Pixel_tGetWhiteColor() const; const TGGC*GetWhiteGC() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTGObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGResourcePool&operator=(const TGResourcePool&); v",MatchSource.WIKI,root/html604/TGResourcePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGResourcePool.html
https://root.cern/root/html604/TGResourcePool.html:9331,Modifiability,Inherit,Inheritance,9331,_tfForeColordefault foreground color; TGGC*fFrameGCframe gc; TGGCPool*fGCPoolgraphics drawing context pool manager; Cursor_tfGrabCursorgrab cursor; Pixel_tfHighLightColorhighlight color; Pixel_tfHilitedefault hilite color; TGGC*fHiliteGCframe hilite gc; TGFont*fIconFonticon font; TGFont*fMenuFontmenu font; TGFont*fMenuHiFontmenu highlight font; TGMimeTypes*fMimeTypeListlist of mime types; TGPicturePool*fPicturePoolpicture pool manager; Pixel_tfSelBackColordefault selection background color; Pixel_tfSelForeColordefault selection foreground color; TGGC*fSelGCselection gc; TGGC*fSelbgndGCselection background gc; Pixel_tfShadowdefault shadow color; TGGC*fShadowGCframe shadow gc; TGFont*fStatusFontstatus bar font; Cursor_tfTextCursortext cursor; Pixel_tfTipBackColordefault tip background color; Pixel_tfTipForeColordefault tip foreground color; TGGC*fTipGCtooltip gc; Cursor_tfWaitCursorwait cursor; Pixel_tfWhitewhite color index; TGGC*fWhiteGCwhite gc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGResourcePool(TGClient* client); Create the global GUI resource pool manager. ~TGResourcePool(); Cleanup the resource pool... TGResourcePool(TGClient* client). TGGCPool * GetGCPool() const; { return fGCPool; }. TGFontPool * GetFontPool() const; { return fFontPool; }. TGPicturePool * GetPicturePool() const; { return fPicturePool; }. Pixel_t GetWhiteColor() const; --- inline functions:; Color values... { return fWhite; }. Pixel_t GetBlackColor() const; { return fBlack; }. Pixel_t GetFrameFgndColor() const; { return fForeColor; }. Pixel_t GetFrameBgndColor() const; { return fBackColor; }. Pixel_t GetFrameHiliteColor() const; { return fHilite; }. Pixel_t GetFrameShadowColor() const; { return fShadow; }. Pixel_t GetHighLightColor() const; { return fHighLightColor; }. Pixel_t GetDocumentFgndColor() const; { return fDocForeColor; }. Pixel_t GetDocumentBgndColor() const; { return fDocBackColor; }. Pixel_t GetSelectedFgndColor() const; { retur,MatchSource.WIKI,root/html604/TGResourcePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGResourcePool.html
https://root.cern/root/html604/TGResourcePool.html:9344,Modifiability,Inherit,Inherited,9344,_tfForeColordefault foreground color; TGGC*fFrameGCframe gc; TGGCPool*fGCPoolgraphics drawing context pool manager; Cursor_tfGrabCursorgrab cursor; Pixel_tfHighLightColorhighlight color; Pixel_tfHilitedefault hilite color; TGGC*fHiliteGCframe hilite gc; TGFont*fIconFonticon font; TGFont*fMenuFontmenu font; TGFont*fMenuHiFontmenu highlight font; TGMimeTypes*fMimeTypeListlist of mime types; TGPicturePool*fPicturePoolpicture pool manager; Pixel_tfSelBackColordefault selection background color; Pixel_tfSelForeColordefault selection foreground color; TGGC*fSelGCselection gc; TGGC*fSelbgndGCselection background gc; Pixel_tfShadowdefault shadow color; TGGC*fShadowGCframe shadow gc; TGFont*fStatusFontstatus bar font; Cursor_tfTextCursortext cursor; Pixel_tfTipBackColordefault tip background color; Pixel_tfTipForeColordefault tip foreground color; TGGC*fTipGCtooltip gc; Cursor_tfWaitCursorwait cursor; Pixel_tfWhitewhite color index; TGGC*fWhiteGCwhite gc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGResourcePool(TGClient* client); Create the global GUI resource pool manager. ~TGResourcePool(); Cleanup the resource pool... TGResourcePool(TGClient* client). TGGCPool * GetGCPool() const; { return fGCPool; }. TGFontPool * GetFontPool() const; { return fFontPool; }. TGPicturePool * GetPicturePool() const; { return fPicturePool; }. Pixel_t GetWhiteColor() const; --- inline functions:; Color values... { return fWhite; }. Pixel_t GetBlackColor() const; { return fBlack; }. Pixel_t GetFrameFgndColor() const; { return fForeColor; }. Pixel_t GetFrameBgndColor() const; { return fBackColor; }. Pixel_t GetFrameHiliteColor() const; { return fHilite; }. Pixel_t GetFrameShadowColor() const; { return fShadow; }. Pixel_t GetHighLightColor() const; { return fHighLightColor; }. Pixel_t GetDocumentFgndColor() const; { return fDocForeColor; }. Pixel_t GetDocumentBgndColor() const; { return fDocBackColor; }. Pixel_t GetSelectedFgndColor() const; { retur,MatchSource.WIKI,root/html604/TGResourcePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGResourcePool.html
https://root.cern/root/html604/TGResourcePool.html:3939,Security,Hash,Hash,3939,"nt() const; virtual const char*TObject::GetIconName() const; Handle_tTGObject::GetId() const; const TGFont*GetMenuFont() const; const TGFont*GetMenuHiliteFont() const; TGMimeTypes*GetMimeTypes() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGPicturePool*GetPicturePool() const; const TGGC*GetSelectedBckgndGC() const; Pixel_tGetSelectedBgndColor() const; Pixel_tGetSelectedFgndColor() const; const TGGC*GetSelectedGC() const; const TGFont*GetStatusFont() const; Cursor_tGetTextCursor() const; Pixel_tGetTipBgndColor() const; Pixel_tGetTipFgndColor() const; const TGGC*GetTipGC() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Cursor_tGetWaitCursor() const; Pixel_tGetWhiteColor() const; const TGGC*GetWhiteGC() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTGObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObjec",MatchSource.WIKI,root/html604/TGResourcePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGResourcePool.html
https://root.cern/root/html604/TGResourcePool.html:6062,Testability,Test,TestBit,6062,"n_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGResourcePool&operator=(const TGResourcePool&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTGObject::SaveAs(const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGResourcePool(TGClient* client); TGResourcePool(const TGResourcePool&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGResourcePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGResourcePool.html
https://root.cern/root/html604/TGResourcePool.html:6101,Testability,Test,TestBits,6101,"n_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGResourcePool&operator=(const TGResourcePool&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTGObject::SaveAs(const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGResourcePool(TGClient* client); TGResourcePool(const TGResourcePool&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGResourcePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGResourcePool.html
https://root.cern/root/html604/TGResourcePool.html:720,Usability,Clear,Clear,720," virtual~TGResourcePool(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Pixel_tGetBlackColor() const; const TGGC*GetBlackGC() const; Pixmap_tGetCheckeredBitmap() const; Pixmap_tGetCheckeredPixmap() const; TGClient*TGObject::GetClient() const; Atom_tGetClipboard() const; Colormap_tGetDefaultColormap() const; Cursor_tGetDe",MatchSource.WIKI,root/html604/TGResourcePool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGResourcePool.html
https://root.cern/root/html604/TGrid.html:1766,Availability,Error,Error,1766,"tractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCd(const char* = """", Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual TGridResult*Command(const char*, Bool_t = kFALSE, UInt_t = 2); virtual Int_tTObject::Compare(const TObject* obj) const; static TGrid*Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetGrid() const; virtual const char*GetHomeDirectory(); const char*GetHost() const; virtual const char*TObject::GetIconName() const; virtual TGridJDL*GetJDLGenerator(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOptions() const; Int_tGetPort() const; c",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:1895,Availability,error,error,1895,"r* b); virtual Bool_tCd(const char* = """", Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual TGridResult*Command(const char*, Bool_t = kFALSE, UInt_t = 2); virtual Int_tTObject::Compare(const TObject* obj) const; static TGrid*Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetGrid() const; virtual const char*GetHomeDirectory(); const char*GetHost() const; virtual const char*TObject::GetIconName() const; virtual TGridJDL*GetJDLGenerator(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOptions() const; Int_tGetPort() const; const char*GetPw() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*Get",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:1979,Availability,error,error,1979,"irtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual TGridResult*Command(const char*, Bool_t = kFALSE, UInt_t = 2); virtual Int_tTObject::Compare(const TObject* obj) const; static TGrid*Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetGrid() const; virtual const char*GetHomeDirectory(); const char*GetHost() const; virtual const char*TObject::GetIconName() const; virtual TGridJDL*GetJDLGenerator(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOptions() const; Int_tGetPort() const; const char*GetPw() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; const char*GridUrl() const; virtual Bool_tTObject::HandleTimer(TTimer*",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:310,Integrability,interface,interface,310,". TGrid. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TGrid. class TGrid: public TObject. TGrid. Abstract base class defining interface to common GRID services. To open a connection to a GRID use the static method Connect().; The argument of Connect() is of the form:; <grid>[://<host>][:<port>], e.g.; alien, alien://alice.cern.ch, globus://glsvr1.cern.ch, ...; Depending on the <grid> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TGridResult. Function Members (Methods); public:. virtual~TGrid(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCd(const char* = """", Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual TGridResult*Command(const char*, Bool_t = kFALSE, UInt_t = 2); virtual Int_tTObject::Compare(const TObject* obj) const; static TGrid*Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual vo",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:547,Integrability,Depend,Depending,547,". TGrid. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TGrid. class TGrid: public TObject. TGrid. Abstract base class defining interface to common GRID services. To open a connection to a GRID use the static method Connect().; The argument of Connect() is of the form:; <grid>[://<host>][:<port>], e.g.; alien, alien://alice.cern.ch, globus://glsvr1.cern.ch, ...; Depending on the <grid> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TGridResult. Function Members (Methods); public:. virtual~TGrid(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCd(const char* = """", Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual TGridResult*Command(const char*, Bool_t = kFALSE, UInt_t = 2); virtual Int_tTObject::Compare(const TObject* obj) const; static TGrid*Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual vo",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:655,Integrability,interface,interface,655,". TGrid. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TGrid. class TGrid: public TObject. TGrid. Abstract base class defining interface to common GRID services. To open a connection to a GRID use the static method Connect().; The argument of Connect() is of the form:; <grid>[://<host>][:<port>], e.g.; alien, alien://alice.cern.ch, globus://glsvr1.cern.ch, ...; Depending on the <grid> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TGridResult. Function Members (Methods); public:. virtual~TGrid(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCd(const char* = """", Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual TGridResult*Command(const char*, Bool_t = kFALSE, UInt_t = 2); virtual Int_tTObject::Compare(const TObject* obj) const; static TGrid*Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual vo",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:8156,Integrability,Depend,Depending,8156,")TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfGridtype of GRID (AliEn, Globus, ...); TStringfGridUrlthe GRID url used to create the grid connection; TStringfHostGRID portal to which we are connected; TStringfOptionsoptions specified; Int_tfPortport to which we are connected; TStringfPwuser passwd; TStringfUseruser name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGrid * Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); The grid should be of the form: <grid>://<host>[:<port>],; e.g.: alien://alice.cern.ch, globus://glsrv1.cern.ch, ...; The uid is the username and pw the password that should be used for; the connection. Depending on the <grid> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. For AliEn the supported options are:; -domain=<domain name>; -debug=<debug level from 1 to 10>; Example: ""-domain=cern.ch -debug=5"". TGrid(); { }. virtual ~TGrid(); { }. const char * GridUrl() const; { return fGridUrl; }. const char * GetGrid() const; { return fGrid; }. const char * GetHost() const; { return fHost; }. const char * GetUser() const; { return fUser; }. const char * GetPw() const; { return fPw; }. const char * GetOptions() const; { return fOptions; }. Int_t GetPort() const; { return fPort; }. Bool_t IsConnected() const; { return fPort == -1 ? kFALSE : kTRUE; }. void Shell(); { MayNotUse(""Shell""); }. void Stdout(); { MayNotUse(""Stdout""); }. void Stderr(); { MayNotUse(""Stderr""); }. TGridResult * Command(const char* , Bool_t = kFALSE, UInt_t = 2); { MayNotUse(""Command""); return 0; }. TGridResult * Query(const char* , const char* , const char* = """", const char* = """"); { MayNo",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:9382,Integrability,Interface,Interface,9382,"omain=<domain name>; -debug=<debug level from 1 to 10>; Example: ""-domain=cern.ch -debug=5"". TGrid(); { }. virtual ~TGrid(); { }. const char * GridUrl() const; { return fGridUrl; }. const char * GetGrid() const; { return fGrid; }. const char * GetHost() const; { return fHost; }. const char * GetUser() const; { return fUser; }. const char * GetPw() const; { return fPw; }. const char * GetOptions() const; { return fOptions; }. Int_t GetPort() const; { return fPort; }. Bool_t IsConnected() const; { return fPort == -1 ? kFALSE : kTRUE; }. void Shell(); { MayNotUse(""Shell""); }. void Stdout(); { MayNotUse(""Stdout""); }. void Stderr(); { MayNotUse(""Stderr""); }. TGridResult * Command(const char* , Bool_t = kFALSE, UInt_t = 2); { MayNotUse(""Command""); return 0; }. TGridResult * Query(const char* , const char* , const char* = """", const char* = """"); { MayNotUse(""Query""); return 0; }. TGridResult * LocateSites(); { MayNotUse(""LocalSites""); return 0; }. TGridResult * Ls(const char* = """", Option_t* = """", Bool_t = kFALSE); --- Catalogue Interface. { MayNotUse(""Ls""); return 0; }. const char * Pwd(Bool_t = kFALSE); { MayNotUse(""Pwd""); return 0; }. const char * GetHomeDirectory(); { MayNotUse(""GetHomeDirectory""); return 0; }. Bool_t Cd(const char* = """", Bool_t = kFALSE); { MayNotUse(""Cd""); return kFALSE; }. Int_t Mkdir(const char* = """", Option_t* = """", Bool_t = kFALSE); { MayNotUse(""Mkdir""); return kFALSE; }. Bool_t Rmdir(const char* = """", Option_t* = """", Bool_t = kFALSE); { MayNotUse(""Mkdir""); return kFALSE; }. Bool_t Register(const char* , const char* , Long_t = -1, const char* = 0, const char* = 0, Bool_t = kFALSE); { MayNotUse(""Mkdir""); return kFALSE; }. Bool_t Rm(const char* , Option_t* = """", Bool_t = kFALSE); { MayNotUse(""Mkdir""); return kFALSE; }. TGridJob * Submit(const char* ); --- Job Submission Interface. { MayNotUse(""Submit""); return 0; }. TGridJDL * GetJDLGenerator(); { MayNotUse(""GetJDLGenerator""); return 0; }. TGridCollection * OpenCollection(const char* , UInt_t = 1000",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:10163,Integrability,Interface,Interface,10163," , const char* , const char* = """", const char* = """"); { MayNotUse(""Query""); return 0; }. TGridResult * LocateSites(); { MayNotUse(""LocalSites""); return 0; }. TGridResult * Ls(const char* = """", Option_t* = """", Bool_t = kFALSE); --- Catalogue Interface. { MayNotUse(""Ls""); return 0; }. const char * Pwd(Bool_t = kFALSE); { MayNotUse(""Pwd""); return 0; }. const char * GetHomeDirectory(); { MayNotUse(""GetHomeDirectory""); return 0; }. Bool_t Cd(const char* = """", Bool_t = kFALSE); { MayNotUse(""Cd""); return kFALSE; }. Int_t Mkdir(const char* = """", Option_t* = """", Bool_t = kFALSE); { MayNotUse(""Mkdir""); return kFALSE; }. Bool_t Rmdir(const char* = """", Option_t* = """", Bool_t = kFALSE); { MayNotUse(""Mkdir""); return kFALSE; }. Bool_t Register(const char* , const char* , Long_t = -1, const char* = 0, const char* = 0, Bool_t = kFALSE); { MayNotUse(""Mkdir""); return kFALSE; }. Bool_t Rm(const char* , Option_t* = """", Bool_t = kFALSE); { MayNotUse(""Mkdir""); return kFALSE; }. TGridJob * Submit(const char* ); --- Job Submission Interface. { MayNotUse(""Submit""); return 0; }. TGridJDL * GetJDLGenerator(); { MayNotUse(""GetJDLGenerator""); return 0; }. TGridCollection * OpenCollection(const char* , UInt_t = 1000000); { MayNotUse(""OpenCollection""); return 0; }. TGridCollection * OpenCollectionQuery(TGridResult* , Bool_t = kFALSE); { MayNotUse(""OpenCollection""); return 0; }. TGridJobStatusList* Ps(const char* , Bool_t = kTRUE); { MayNotUse(""Ps""); return 0; }. Bool_t KillById(TString ); { MayNotUse(""KillById""); return kFALSE; }. Bool_t ResubmitById(TString ); { MayNotUse(""ResubmitById""); return 0; }. Bool_t Kill(TGridJob* gridjob); { return ((gridjob)?KillById(gridjob->GetJobID()):kFALSE); }. Bool_t Resubmit(TGridJob* gridjob); { return ((gridjob)?ResubmitById(gridjob->GetJobID()):kFALSE); }. » Author: Fons Rademakers 3/1/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:06; This page has been automatically generated. F",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:596,Modifiability,plugin,plugin,596,". TGrid. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TGrid. class TGrid: public TObject. TGrid. Abstract base class defining interface to common GRID services. To open a connection to a GRID use the static method Connect().; The argument of Connect() is of the form:; <grid>[://<host>][:<port>], e.g.; alien, alien://alice.cern.ch, globus://glsvr1.cern.ch, ...; Depending on the <grid> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TGridResult. Function Members (Methods); public:. virtual~TGrid(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCd(const char* = """", Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual TGridResult*Command(const char*, Bool_t = kFALSE, UInt_t = 2); virtual Int_tTObject::Compare(const TObject* obj) const; static TGrid*Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual vo",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:3125,Modifiability,Inherit,InheritsFrom,3125,"; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetGrid() const; virtual const char*GetHomeDirectory(); const char*GetHost() const; virtual const char*TObject::GetIconName() const; virtual TGridJDL*GetJDLGenerator(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOptions() const; Int_tGetPort() const; const char*GetPw() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; const char*GridUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsConnected() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tKill(TGridJob* gridjob); virtual Bool_tKillById(TString); virtual TGridResult*LocateSites(); virtual voidTObject::ls(Option_t* option = """") const; virtual TGridResult*Ls(const char* = """", Option_t* = """", Bool_t = kFALSE); voidTObject::MayNotUse(const char* method) const; virtual Int_tMkdir(const char* = """", Option_t* = """", Bool_t = kFALSE); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual TGridCollection*OpenCollection(const char*, UInt_t = 1000",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:3191,Modifiability,Inherit,InheritsFrom,3191,"tual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetGrid() const; virtual const char*GetHomeDirectory(); const char*GetHost() const; virtual const char*TObject::GetIconName() const; virtual TGridJDL*GetJDLGenerator(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOptions() const; Int_tGetPort() const; const char*GetPw() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; const char*GridUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsConnected() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tKill(TGridJob* gridjob); virtual Bool_tKillById(TString); virtual TGridResult*LocateSites(); virtual voidTObject::ls(Option_t* option = """") const; virtual TGridResult*Ls(const char* = """", Option_t* = """", Bool_t = kFALSE); voidTObject::MayNotUse(const char* method) const; virtual Int_tMkdir(const char* = """", Option_t* = """", Bool_t = kFALSE); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual TGridCollection*OpenCollection(const char*, UInt_t = 1000000); virtual TGridCollection*OpenCollectionQuery(TGridResult*, Bo",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:7775,Modifiability,Inherit,Inheritance,7775,"tusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfGridtype of GRID (AliEn, Globus, ...); TStringfGridUrlthe GRID url used to create the grid connection; TStringfHostGRID portal to which we are connected; TStringfOptionsoptions specified; Int_tfPortport to which we are connected; TStringfPwuser passwd; TStringfUseruser name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGrid * Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); The grid should be of the form: <grid>://<host>[:<port>],; e.g.: alien://alice.cern.ch, globus://glsrv1.cern.ch, ...; The uid is the username and pw the password that should be used for; the connection. Depending on the <grid> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. For AliEn the supported options are:; -domain=<domain name>; -debug=<debug level from 1 to 10>; Example: ""-domain=cern.ch -debug=5"". TGrid(); { }. virtual ~TGrid(); { }. const char * GridUrl() const; { return fGridUrl; }. const char * GetGrid() const; { return fGrid; }. const char * GetHost() const; { return fHost; }. const char * GetUser() const; { return fUser; }. const char * GetPw() const; { return fPw; }. const char * GetOptions() const; { return fOptions; }. Int_t GetPort() const; { re",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:7788,Modifiability,Inherit,Inherited,7788,"tusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfGridtype of GRID (AliEn, Globus, ...); TStringfGridUrlthe GRID url used to create the grid connection; TStringfHostGRID portal to which we are connected; TStringfOptionsoptions specified; Int_tfPortport to which we are connected; TStringfPwuser passwd; TStringfUseruser name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGrid * Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); The grid should be of the form: <grid>://<host>[:<port>],; e.g.: alien://alice.cern.ch, globus://glsrv1.cern.ch, ...; The uid is the username and pw the password that should be used for; the connection. Depending on the <grid> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. For AliEn the supported options are:; -domain=<domain name>; -debug=<debug level from 1 to 10>; Example: ""-domain=cern.ch -debug=5"". TGrid(); { }. virtual ~TGrid(); { }. const char * GridUrl() const; { return fGridUrl; }. const char * GetGrid() const; { return fGrid; }. const char * GetHost() const; { return fHost; }. const char * GetUser() const; { return fUser; }. const char * GetPw() const; { return fPw; }. const char * GetOptions() const; { return fOptions; }. Int_t GetPort() const; { re",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:8200,Modifiability,plugin,plugin,8200,")TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfGridtype of GRID (AliEn, Globus, ...); TStringfGridUrlthe GRID url used to create the grid connection; TStringfHostGRID portal to which we are connected; TStringfOptionsoptions specified; Int_tfPortport to which we are connected; TStringfPwuser passwd; TStringfUseruser name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGrid * Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); The grid should be of the form: <grid>://<host>[:<port>],; e.g.: alien://alice.cern.ch, globus://glsrv1.cern.ch, ...; The uid is the username and pw the password that should be used for; the connection. Depending on the <grid> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. For AliEn the supported options are:; -domain=<domain name>; -debug=<debug level from 1 to 10>; Example: ""-domain=cern.ch -debug=5"". TGrid(); { }. virtual ~TGrid(); { }. const char * GridUrl() const; { return fGridUrl; }. const char * GetGrid() const; { return fGrid; }. const char * GetHost() const; { return fHost; }. const char * GetUser() const; { return fUser; }. const char * GetPw() const; { return fPw; }. const char * GetOptions() const; { return fOptions; }. Int_t GetPort() const; { return fPort; }. Bool_t IsConnected() const; { return fPort == -1 ? kFALSE : kTRUE; }. void Shell(); { MayNotUse(""Shell""); }. void Stdout(); { MayNotUse(""Stdout""); }. void Stderr(); { MayNotUse(""Stderr""); }. TGridResult * Command(const char* , Bool_t = kFALSE, UInt_t = 2); { MayNotUse(""Command""); return 0; }. TGridResult * Query(const char* , const char* , const char* = """", const char* = """"); { MayNo",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:620,Performance,load,loaded,620,". TGrid. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TGrid. class TGrid: public TObject. TGrid. Abstract base class defining interface to common GRID services. To open a connection to a GRID use the static method Connect().; The argument of Connect() is of the form:; <grid>[://<host>][:<port>], e.g.; alien, alien://alice.cern.ch, globus://glsvr1.cern.ch, ...; Depending on the <grid> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TGridResult. Function Members (Methods); public:. virtual~TGrid(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCd(const char* = """", Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual TGridResult*Command(const char*, Bool_t = kFALSE, UInt_t = 2); virtual Int_tTObject::Compare(const TObject* obj) const; static TGrid*Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual vo",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:8241,Performance,load,loaded,8241,")TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfGridtype of GRID (AliEn, Globus, ...); TStringfGridUrlthe GRID url used to create the grid connection; TStringfHostGRID portal to which we are connected; TStringfOptionsoptions specified; Int_tfPortport to which we are connected; TStringfPwuser passwd; TStringfUseruser name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGrid * Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); The grid should be of the form: <grid>://<host>[:<port>],; e.g.: alien://alice.cern.ch, globus://glsrv1.cern.ch, ...; The uid is the username and pw the password that should be used for; the connection. Depending on the <grid> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. For AliEn the supported options are:; -domain=<domain name>; -debug=<debug level from 1 to 10>; Example: ""-domain=cern.ch -debug=5"". TGrid(); { }. virtual ~TGrid(); { }. const char * GridUrl() const; { return fGridUrl; }. const char * GetGrid() const; { return fGrid; }. const char * GetHost() const; { return fHost; }. const char * GetUser() const; { return fUser; }. const char * GetPw() const; { return fPw; }. const char * GetOptions() const; { return fOptions; }. Int_t GetPort() const; { return fPort; }. Bool_t IsConnected() const; { return fPort == -1 ? kFALSE : kTRUE; }. void Shell(); { MayNotUse(""Shell""); }. void Stdout(); { MayNotUse(""Stdout""); }. void Stderr(); { MayNotUse(""Stderr""); }. TGridResult * Command(const char* , Bool_t = kFALSE, UInt_t = 2); { MayNotUse(""Command""); return 0; }. TGridResult * Query(const char* , const char* , const char* = """", const char* = """"); { MayNo",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:3015,Security,Hash,Hash,3015,"teEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetGrid() const; virtual const char*GetHomeDirectory(); const char*GetHost() const; virtual const char*TObject::GetIconName() const; virtual TGridJDL*GetJDLGenerator(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOptions() const; Int_tGetPort() const; const char*GetPw() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; const char*GridUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsConnected() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tKill(TGridJob* gridjob); virtual Bool_tKillById(TString); virtual TGridResult*LocateSites(); virtual voidTObject::ls(Option_t* option = """") const; virtual TGridResult*Ls(const char* = """", Option_t* = """", Bool_t = kFALSE); voidTObject::MayNotUse(const char* method) const; virtual Int_tMkdir(const char* = """", Option_t* = """", Bool_t = kFALSE); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const cha",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:8106,Security,password,password,8106,"stCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfGridtype of GRID (AliEn, Globus, ...); TStringfGridUrlthe GRID url used to create the grid connection; TStringfHostGRID portal to which we are connected; TStringfOptionsoptions specified; Int_tfPortport to which we are connected; TStringfPwuser passwd; TStringfUseruser name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGrid * Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); The grid should be of the form: <grid>://<host>[:<port>],; e.g.: alien://alice.cern.ch, globus://glsrv1.cern.ch, ...; The uid is the username and pw the password that should be used for; the connection. Depending on the <grid> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. For AliEn the supported options are:; -domain=<domain name>; -debug=<debug level from 1 to 10>; Example: ""-domain=cern.ch -debug=5"". TGrid(); { }. virtual ~TGrid(); { }. const char * GridUrl() const; { return fGridUrl; }. const char * GetGrid() const; { return fGrid; }. const char * GetHost() const; { return fHost; }. const char * GetUser() const; { return fUser; }. const char * GetPw() const; { return fPw; }. const char * GetOptions() const; { return fOptions; }. Int_t GetPort() const; { return fPort; }. Bool_t IsConnected() const; { return fPort == -1 ? kFALSE : kTRUE; }. void Shell(); { MayNotUse(""Shell""); }. void Stdout(); { MayNotUse(""Stdout""); }. void Stderr(); { MayNotUse(""Stderr""); }. TGridResult * Command(const char* , Bool_t = kFALSE, UInt_t = 2); { MayNotUse(""Command""); return 0; }. TG",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:6181,Testability,Test,TestBit,6181,"oid* vp); TGrid&operator=(const TGrid&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual TGridJobStatusList*Ps(const char*, Bool_t = kTRUE); virtual const char*Pwd(Bool_t = kFALSE); virtual TGridResult*Query(const char*, const char*, const char* = """", const char* = """"); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Bool_tRegister(const char*, const char*, Long_t = -1, const char* = 0, const char* = 0, Bool_t = kFALSE); voidTObject::ResetBit(UInt_t f); virtual Bool_tResubmit(TGridJob* gridjob); virtual Bool_tResubmitById(TString); virtual Bool_tRm(const char*, Option_t* = """", Bool_t = kFALSE); virtual Bool_tRmdir(const char* = """", Option_t* = """", Bool_t = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShell(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStderr(); virtual voidStdout(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual TGridJob*Submit(const char*); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGrid(); TGrid(const TGrid&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:6220,Testability,Test,TestBits,6220,"oid* vp); TGrid&operator=(const TGrid&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual TGridJobStatusList*Ps(const char*, Bool_t = kTRUE); virtual const char*Pwd(Bool_t = kFALSE); virtual TGridResult*Query(const char*, const char*, const char* = """", const char* = """"); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Bool_tRegister(const char*, const char*, Long_t = -1, const char* = 0, const char* = 0, Bool_t = kFALSE); voidTObject::ResetBit(UInt_t f); virtual Bool_tResubmit(TGridJob* gridjob); virtual Bool_tResubmitById(TString); virtual Bool_tRm(const char*, Option_t* = """", Bool_t = kFALSE); virtual Bool_tRmdir(const char* = """", Option_t* = """", Bool_t = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShell(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStderr(); virtual voidStdout(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual TGridJob*Submit(const char*); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGrid(); TGrid(const TGrid&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGrid.html:1049,Usability,Clear,Clear,1049," virtual~TGrid(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCd(const char* = """", Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual TGridResult*Command(const char*, Bool_t = kFALSE, UInt_t = 2); virtual Int_tTObject::Compare(const TObject* obj) const; static TGrid*Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual vo",MatchSource.WIKI,root/html604/TGrid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGrid.html
https://root.cern/root/html604/TGridCollection.html:1386,Availability,Error,Error,1386,"al~TGridCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TGridCollection*); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckIfOnline(Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Bool_tDeselectFile(const char*, Int_t = -1, Int_t = -1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDownscaleSelection(UInt_t = 2); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExportXML(const char*, Bool_t = kTRUE, Bool_t = kTRUE, const char* = ""ROOT xml"", const char* = ""Exported XML""); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetCollectionName() const; virtual TDSet*GetDataset(const char*, const char*, const char*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TEntryList*GetEntryList(const char*); virtual const char*GetExportUrl(); virtual TFileCollection*GetFileCollection(const char* = """", const char* = """") const; virtual TList*GetFileGr",MatchSource.WIKI,root/html604/TGridCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridCollection.html
https://root.cern/root/html604/TGridCollection.html:1515,Availability,error,error,1515,"ct::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckIfOnline(Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Bool_tDeselectFile(const char*, Int_t = -1, Int_t = -1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDownscaleSelection(UInt_t = 2); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExportXML(const char*, Bool_t = kTRUE, Bool_t = kTRUE, const char* = ""ROOT xml"", const char* = ""Exported XML""); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetCollectionName() const; virtual TDSet*GetDataset(const char*, const char*, const char*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TEntryList*GetEntryList(const char*); virtual const char*GetExportUrl(); virtual TFileCollection*GetFileCollection(const char* = """", const char* = """") const; virtual TList*GetFileGroupList() const; virtual TGridResult*GetGridResult(const char* = """", Bool_t = kTRUE, Bool_t = kFALSE); virtual const char*TObject",MatchSource.WIKI,root/html604/TGridCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridCollection.html
https://root.cern/root/html604/TGridCollection.html:1599,Availability,error,error,1599,"ual Bool_tCheckIfOnline(Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Bool_tDeselectFile(const char*, Int_t = -1, Int_t = -1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDownscaleSelection(UInt_t = 2); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExportXML(const char*, Bool_t = kTRUE, Bool_t = kTRUE, const char* = ""ROOT xml"", const char* = ""Exported XML""); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetCollectionName() const; virtual TDSet*GetDataset(const char*, const char*, const char*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TEntryList*GetEntryList(const char*); virtual const char*GetExportUrl(); virtual TFileCollection*GetFileCollection(const char* = """", const char* = """") const; virtual TList*GetFileGroupList() const; virtual TGridResult*GetGridResult(const char* = """", Bool_t = kTRUE, Bool_t = kFALSE); virtual const char*TObject::GetIconName() const; virtual const char*GetInfoComment() const; virtual const char",MatchSource.WIKI,root/html604/TGridCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridCollection.html
https://root.cern/root/html604/TGridCollection.html:8438,Availability,Down,DownscaleSelection,8438,"); }. TMap * Next(); { MayNotUse(""Next""); return 0;}. Bool_t Remove(TMap* ); { MayNotUse(""Remove""); return 0;}. const char * GetTURL(const char* = """"); { MayNotUse(""GetTURL""); return 0;}. const char * GetSURL(const char* = """"); { MayNotUse(""GetSURL""); return 0;}. const char * GetLFN(const char* = """"); { MayNotUse(""GetLFN""); return 0;}. Long64_t GetSize(const char* = """"); { MayNotUse(""GetSize""); return -1;}. Bool_t IsOnline(const char* = """"); { MayNotUse(""IsOnline""); return 0;}. Bool_t IsSelected(const char* = """"); { MayNotUse(""IsSelected""); return 0;}. void Status(); { MayNotUse(""Status""); }. void SetTag(const char* , const char* , TMap* ); { MayNotUse(""SetTag""); }. Bool_t SelectFile(const char* , Int_t = -1, Int_t = -1); { MayNotUse(""SelectFile""); return kFALSE;}. Bool_t DeselectFile(const char* , Int_t = -1, Int_t = -1); { MayNotUse(""DeselectFile""); return kFALSE;}. Bool_t InvertSelection(); { MayNotUse(""InvertSelection""); return kFALSE;}. Bool_t DownscaleSelection(UInt_t = 2); { MayNotUse(""DownscaleSelection""); return kFALSE;}. Bool_t ExportXML(const char* , Bool_t = kTRUE, Bool_t = kTRUE, const char* = ""ROOT xml"", const char* = ""Exported XML""); { MayNotUse(""ExportXML""); return kFALSE;}. const char* GetExportUrl(); { MayNotUse(""GetExportUrl""); return 0;}. Bool_t SetExportUrl(const char* = 0); { MayNotUse(""SetExportUrl""); return kFALSE;}. void Print(Option_t* ) const; { MayNotUse(""Print""); }. TFile * OpenFile(const char* ); { MayNotUse(""OpenFile""); return 0;}. TList * GetFileGroupList() const; { MayNotUse(""GetFileGroupList""); return 0;}. TEntryList * GetEntryList(const char* ); { MayNotUse(""GetEntryList""); return 0;}. UInt_t GetNofGroups() const; { MayNotUse(""GetNofGroups""); return 0;}. UInt_t GetNofGroupfiles() const; { MayNotUse(""GetNofGroupfiles""); return 0;}. Bool_t OverlapCollection(TGridCollection* ); { MayNotUse(""OverlapCollection""); return 0;}. void Add(TGridCollection* ); { MayNotUse(""Add"");}. Bool_t Stage(Bool_t = kFALSE, Option_t* = """"); { MayNotUse(""Sta",MatchSource.WIKI,root/html604/TGridCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridCollection.html
https://root.cern/root/html604/TGridCollection.html:8483,Availability,Down,DownscaleSelection,8483,"); }. TMap * Next(); { MayNotUse(""Next""); return 0;}. Bool_t Remove(TMap* ); { MayNotUse(""Remove""); return 0;}. const char * GetTURL(const char* = """"); { MayNotUse(""GetTURL""); return 0;}. const char * GetSURL(const char* = """"); { MayNotUse(""GetSURL""); return 0;}. const char * GetLFN(const char* = """"); { MayNotUse(""GetLFN""); return 0;}. Long64_t GetSize(const char* = """"); { MayNotUse(""GetSize""); return -1;}. Bool_t IsOnline(const char* = """"); { MayNotUse(""IsOnline""); return 0;}. Bool_t IsSelected(const char* = """"); { MayNotUse(""IsSelected""); return 0;}. void Status(); { MayNotUse(""Status""); }. void SetTag(const char* , const char* , TMap* ); { MayNotUse(""SetTag""); }. Bool_t SelectFile(const char* , Int_t = -1, Int_t = -1); { MayNotUse(""SelectFile""); return kFALSE;}. Bool_t DeselectFile(const char* , Int_t = -1, Int_t = -1); { MayNotUse(""DeselectFile""); return kFALSE;}. Bool_t InvertSelection(); { MayNotUse(""InvertSelection""); return kFALSE;}. Bool_t DownscaleSelection(UInt_t = 2); { MayNotUse(""DownscaleSelection""); return kFALSE;}. Bool_t ExportXML(const char* , Bool_t = kTRUE, Bool_t = kTRUE, const char* = ""ROOT xml"", const char* = ""Exported XML""); { MayNotUse(""ExportXML""); return kFALSE;}. const char* GetExportUrl(); { MayNotUse(""GetExportUrl""); return 0;}. Bool_t SetExportUrl(const char* = 0); { MayNotUse(""SetExportUrl""); return kFALSE;}. void Print(Option_t* ) const; { MayNotUse(""Print""); }. TFile * OpenFile(const char* ); { MayNotUse(""OpenFile""); return 0;}. TList * GetFileGroupList() const; { MayNotUse(""GetFileGroupList""); return 0;}. TEntryList * GetEntryList(const char* ); { MayNotUse(""GetEntryList""); return 0;}. UInt_t GetNofGroups() const; { MayNotUse(""GetNofGroups""); return 0;}. UInt_t GetNofGroupfiles() const; { MayNotUse(""GetNofGroupfiles""); return 0;}. Bool_t OverlapCollection(TGridCollection* ); { MayNotUse(""OverlapCollection""); return 0;}. void Add(TGridCollection* ); { MayNotUse(""Add"");}. Bool_t Stage(Bool_t = kFALSE, Option_t* = """"); { MayNotUse(""Sta",MatchSource.WIKI,root/html604/TGridCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridCollection.html
https://root.cern/root/html604/TGridCollection.html:3347,Modifiability,Inherit,InheritsFrom,3347,"= """") const; virtual TList*GetFileGroupList() const; virtual TGridResult*GetGridResult(const char* = """", Bool_t = kTRUE, Bool_t = kFALSE); virtual const char*TObject::GetIconName() const; virtual const char*GetInfoComment() const; virtual const char*GetLFN(const char* = """"); virtual const char*TObject::GetName() const; virtual UInt_tGetNofGroupfiles() const; virtual UInt_tGetNofGroups() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Long64_tGetSize(const char* = """"); virtual const char*GetSURL(const char* = """"); virtual TList*GetTagFilterList() const; virtual const char*TObject::GetTitle() const; virtual const char*GetTURL(const char* = """"); virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual Bool_tInvertSelection(); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsOnline(const char* = """"); virtual Bool_tIsSelected(const char* = """"); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tLookupSUrls(Bool_t = kTRUE); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual TMap*Next(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual TFile*OpenFile(const char*); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr)",MatchSource.WIKI,root/html604/TGridCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridCollection.html
https://root.cern/root/html604/TGridCollection.html:3413,Modifiability,Inherit,InheritsFrom,3413,"Result*GetGridResult(const char* = """", Bool_t = kTRUE, Bool_t = kFALSE); virtual const char*TObject::GetIconName() const; virtual const char*GetInfoComment() const; virtual const char*GetLFN(const char* = """"); virtual const char*TObject::GetName() const; virtual UInt_tGetNofGroupfiles() const; virtual UInt_tGetNofGroups() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Long64_tGetSize(const char* = """"); virtual const char*GetSURL(const char* = """"); virtual TList*GetTagFilterList() const; virtual const char*TObject::GetTitle() const; virtual const char*GetTURL(const char* = """"); virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual Bool_tInvertSelection(); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsOnline(const char* = """"); virtual Bool_tIsSelected(const char* = """"); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tLookupSUrls(Bool_t = kTRUE); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual TMap*Next(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual TFile*OpenFile(const char*); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObjec",MatchSource.WIKI,root/html604/TGridCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridCollection.html
https://root.cern/root/html604/TGridCollection.html:7308,Modifiability,Inherit,Inheritance,7308,"ite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGridCollection(); { }. virtual ~TGridCollection(); { }. void Reset(); { MayNotUse(""Reset""); }. TMap * Next(); { MayNotUse(""Next""); return 0;}. Bool_t Remove(TMap* ); { MayNotUse(""Remove""); return 0;}. const char * GetTURL(const char* = """"); { MayNotUse(""GetTURL""); return 0;}. const char * GetSURL(const char* = """"); { MayNotUse(""GetSURL""); return 0;}. const char * GetLFN(const char* = """"); { MayNotUse(""GetLFN""); return 0;}. Long64_t GetSize(const char* = """"); { MayNotUse(""GetSize""); return -1;}. Bool_t IsOnline(const char* = """"); { MayNotUse(""IsOnline""); return 0;}. Bool_t IsSelected(const char* = """"); { MayNotUse(""IsSelected""); return 0;}. void Status(); { MayNotUse(""Status""); }. void SetTag(const char* , const char* , TMap* ); { MayNotUse(""SetTag""); }. Bool_t SelectFile(const char* , Int_t = -1, Int_t = -1); { MayNotUse(""SelectFile""); return kFALSE;}. Bool_t DeselectFile(const char* , Int_t = -1, Int_t = -1); { MayNotUse(""DeselectFil",MatchSource.WIKI,root/html604/TGridCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridCollection.html
https://root.cern/root/html604/TGridCollection.html:7321,Modifiability,Inherit,Inherited,7321,"ite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGridCollection(); { }. virtual ~TGridCollection(); { }. void Reset(); { MayNotUse(""Reset""); }. TMap * Next(); { MayNotUse(""Next""); return 0;}. Bool_t Remove(TMap* ); { MayNotUse(""Remove""); return 0;}. const char * GetTURL(const char* = """"); { MayNotUse(""GetTURL""); return 0;}. const char * GetSURL(const char* = """"); { MayNotUse(""GetSURL""); return 0;}. const char * GetLFN(const char* = """"); { MayNotUse(""GetLFN""); return 0;}. Long64_t GetSize(const char* = """"); { MayNotUse(""GetSize""); return -1;}. Bool_t IsOnline(const char* = """"); { MayNotUse(""IsOnline""); return 0;}. Bool_t IsSelected(const char* = """"); { MayNotUse(""IsSelected""); return 0;}. void Status(); { MayNotUse(""Status""); }. void SetTag(const char* , const char* , TMap* ); { MayNotUse(""SetTag""); }. Bool_t SelectFile(const char* , Int_t = -1, Int_t = -1); { MayNotUse(""SelectFile""); return kFALSE;}. Bool_t DeselectFile(const char* , Int_t = -1, Int_t = -1); { MayNotUse(""DeselectFil",MatchSource.WIKI,root/html604/TGridCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridCollection.html
https://root.cern/root/html604/TGridCollection.html:3237,Security,Hash,Hash,3237,"har*); virtual const char*GetExportUrl(); virtual TFileCollection*GetFileCollection(const char* = """", const char* = """") const; virtual TList*GetFileGroupList() const; virtual TGridResult*GetGridResult(const char* = """", Bool_t = kTRUE, Bool_t = kFALSE); virtual const char*TObject::GetIconName() const; virtual const char*GetInfoComment() const; virtual const char*GetLFN(const char* = """"); virtual const char*TObject::GetName() const; virtual UInt_tGetNofGroupfiles() const; virtual UInt_tGetNofGroups() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Long64_tGetSize(const char* = """"); virtual const char*GetSURL(const char* = """"); virtual TList*GetTagFilterList() const; virtual const char*TObject::GetTitle() const; virtual const char*GetTURL(const char* = """"); virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual Bool_tInvertSelection(); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsOnline(const char* = """"); virtual Bool_tIsSelected(const char* = """"); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tLookupSUrls(Bool_t = kTRUE); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual TMap*Next(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual TFile*OpenFile(const char*); voidTObject::operat",MatchSource.WIKI,root/html604/TGridCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridCollection.html
https://root.cern/root/html604/TGridCollection.html:5980,Testability,Test,TestBit,5980,"d* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGridCollection&operator=(const TGridCollection&); virtual Bool_tOverlapCollection(TGridCollection*); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual Bool_tPrepare(Bool_t = kFALSE); virtual voidPrint(Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Bool_tRemove(TMap*); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tSelectFile(const char*, Int_t = -1, Int_t = -1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Bool_tSetExportUrl(const char* = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTag(const char*, const char*, TMap*); virtual voidSetTagFilterList(TList*); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tStage(Bool_t = kFALSE, Option_t* = """"); virtual voidStatus(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGridCollection(); TGridCollection(const TGridCollection&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGridCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridCollection.html
https://root.cern/root/html604/TGridCollection.html:6019,Testability,Test,TestBits,6019,"d* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGridCollection&operator=(const TGridCollection&); virtual Bool_tOverlapCollection(TGridCollection*); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual Bool_tPrepare(Bool_t = kFALSE); virtual voidPrint(Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Bool_tRemove(TMap*); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tSelectFile(const char*, Int_t = -1, Int_t = -1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Bool_tSetExportUrl(const char* = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTag(const char*, const char*, TMap*); virtual voidSetTagFilterList(TList*); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tStage(Bool_t = kFALSE, Option_t* = """"); virtual voidStatus(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGridCollection(); TGridCollection(const TGridCollection&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGridCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridCollection.html
https://root.cern/root/html604/TGridCollection.html:735,Usability,Clear,Clear,735," virtual~TGridCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TGridCollection*); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckIfOnline(Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Bool_tDeselectFile(const char*, Int_t = -1, Int_t = -1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDownscaleSelection(UInt_t = 2); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExportXML(const char*, Bool_t = kTRUE, Bool_t = kTRUE, const char* = ""ROOT xml"", const char* = ""Exported XML""); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const",MatchSource.WIKI,root/html604/TGridCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridCollection.html
https://root.cern/root/html604/TGridJDL.html:533,Availability,avail,available,533,". TGridJDL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TGridJDL. class TGridJDL: public TObject. TGridJDL. Abstract base class to generate JDL files for job submission to the; Grid. Related classes are TGLiteJDL. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGridJDL(); voidTObject::AbstractMethod(const char* method) const; TStringAddQuotes(const char* value); virtual voidAddToInputData(const char* value = 0, const char* description = 0); virtual voidAddToInputDataCollection(const char* value = 0, const char* description = 0); virtual voidAddToInputSandbox(const char* value = 0, const char* description = 0); virtual voidAddToOutputArchive(const char* value = 0, const char* description = 0); virtual voidAddToOutputSandbox(const char* value = 0, const char* description = 0); virtual voidAddToPackages(const char* name = ""AliRoot"", const char* version = ""default"", const char* type = ""VO_ALICE"", const char* description = 0); virtual voidAddToRequirements(const char* value = 0, const char* description = 0); voidAddToSet(const char* key, const char* value); voidAddToSetDescription(const char* key, const char* description); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(const Option_t* = 0); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); vir",MatchSource.WIKI,root/html604/TGridJDL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJDL.html
https://root.cern/root/html604/TGridJDL.html:2174,Availability,Error,Error,2174," ""default"", const char* type = ""VO_ALICE"", const char* description = 0); virtual voidAddToRequirements(const char* value = 0, const char* description = 0); voidAddToSet(const char* key, const char* value); voidAddToSetDescription(const char* key, const char* description); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(const Option_t* = 0); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TStringGenerate(); const char*GetDescription(const char* key); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetValue(cons",MatchSource.WIKI,root/html604/TGridJDL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJDL.html
https://root.cern/root/html604/TGridJDL.html:2303,Availability,error,error,2303,"st char* description = 0); voidAddToSet(const char* key, const char* value); voidAddToSetDescription(const char* key, const char* description); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(const Option_t* = 0); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TStringGenerate(); const char*GetDescription(const char* key); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetValue(const char* key); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(",MatchSource.WIKI,root/html604/TGridJDL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJDL.html
https://root.cern/root/html604/TGridJDL.html:2387,Availability,error,error,2387,"ToSetDescription(const char* key, const char* description); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(const Option_t* = 0); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TStringGenerate(); const char*GetDescription(const char* key); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetValue(const char* key); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(c",MatchSource.WIKI,root/html604/TGridJDL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJDL.html
https://root.cern/root/html604/TGridJDL.html:3376,Modifiability,Inherit,InheritsFrom,3376,"t_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TStringGenerate(); const char*GetDescription(const char* key); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetValue(const char* key); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TGridJDL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJDL.html
https://root.cern/root/html604/TGridJDL.html:3442,Modifiability,Inherit,InheritsFrom,3442,"t_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TStringGenerate(); const char*GetDescription(const char* key); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetValue(const char* key); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGridJDL&operator=(const TGridJDL&); virtual voidTO",MatchSource.WIKI,root/html604/TGridJDL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJDL.html
https://root.cern/root/html604/TGridJDL.html:7985,Modifiability,Inherit,Inheritance,7985,"l, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMapfDescriptionMapstores the key, value pairs of the JDL; TMapfMapstores the key, value pairs of the JDL. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGridJDL(); Cleanup. void Clear(const Option_t* = 0); Clears the JDL information. void SetValue(const char* key, const char* value); Sets a value. If the entry already exists the old one is replaced. const char * GetValue(const char* key); Returns the value corresponding to the provided key. Return 0 in case; key is not found. void SetDescription(const char* key, const char* description); Sets a value. If the entry already exists the old one is replaced. const char * GetDescription(const char* key); Returns the value corresponding to the provided key. Return 0 in case; key is not found. TString AddQuotes(const char* value); Adds quotes to the provided string.; E.g. Value --> ""Value"". void AddToSet(const char* key, const char* value); Adds a value to a key value which hosts a set of values.; E.g. InputSandbox: {""file1"",""file2""}. void AddToSetDescription(const char* key, const char* description); Adds a value to a key value which hosts ",MatchSource.WIKI,root/html604/TGridJDL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJDL.html
https://root.cern/root/html604/TGridJDL.html:7998,Modifiability,Inherit,Inherited,7998,"l, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMapfDescriptionMapstores the key, value pairs of the JDL; TMapfMapstores the key, value pairs of the JDL. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGridJDL(); Cleanup. void Clear(const Option_t* = 0); Clears the JDL information. void SetValue(const char* key, const char* value); Sets a value. If the entry already exists the old one is replaced. const char * GetValue(const char* key); Returns the value corresponding to the provided key. Return 0 in case; key is not found. void SetDescription(const char* key, const char* description); Sets a value. If the entry already exists the old one is replaced. const char * GetDescription(const char* key); Returns the value corresponding to the provided key. Return 0 in case; key is not found. TString AddQuotes(const char* value); Adds quotes to the provided string.; E.g. Value --> ""Value"". void AddToSet(const char* key, const char* value); Adds a value to a key value which hosts a set of values.; E.g. InputSandbox: {""file1"",""file2""}. void AddToSetDescription(const char* key, const char* description); Adds a value to a key value which hosts ",MatchSource.WIKI,root/html604/TGridJDL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJDL.html
https://root.cern/root/html604/TGridJDL.html:3266,Security,Hash,Hash,3266,"method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TStringGenerate(); const char*GetDescription(const char* key); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetValue(const char* key); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TGridJDL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJDL.html
https://root.cern/root/html604/TGridJDL.html:6559,Testability,Test,TestBit,6559," obj); virtual voidSetEMail(const char* value = 0, const char* description = 0); virtual voidSetExecutable(const char* value = 0, const char* description = 0); virtual voidSetInputDataList(const char* list = ""collection.xml"", const char* description = 0); virtual voidSetInputDataListFormat(const char* format = ""xml-single"", const char* description = 0); virtual voidSetJobTag(const char* jobtag = 0, const char* description = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOutputDirectory(const char* value = 0, const char* description = 0); virtual voidSetPrice(UInt_t price = 1, const char* description = 0); virtual voidSetSplitArguments(const char* splitarguments = 0, const char* description = 0); virtual voidSetSplitMode(const char* value, UInt_t maxnumberofinputfiles = 0, UInt_t maxinputfilesize = 0, const char* d1 = 0, const char* d2 = 0, const char* d3 = 0); virtual voidSetTTL(UInt_t ttl = 72000, const char* description = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetValidationCommand(const char* value, const char* description = 0); voidSetValue(const char* key, const char* value); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGridJDL(); TGridJDL(const TGridJDL&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObjec",MatchSource.WIKI,root/html604/TGridJDL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJDL.html
https://root.cern/root/html604/TGridJDL.html:6598,Testability,Test,TestBits,6598," obj); virtual voidSetEMail(const char* value = 0, const char* description = 0); virtual voidSetExecutable(const char* value = 0, const char* description = 0); virtual voidSetInputDataList(const char* list = ""collection.xml"", const char* description = 0); virtual voidSetInputDataListFormat(const char* format = ""xml-single"", const char* description = 0); virtual voidSetJobTag(const char* jobtag = 0, const char* description = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOutputDirectory(const char* value = 0, const char* description = 0); virtual voidSetPrice(UInt_t price = 1, const char* description = 0); virtual voidSetSplitArguments(const char* splitarguments = 0, const char* description = 0); virtual voidSetSplitMode(const char* value, UInt_t maxnumberofinputfiles = 0, UInt_t maxinputfilesize = 0, const char* d1 = 0, const char* d2 = 0, const char* d3 = 0); virtual voidSetTTL(UInt_t ttl = 72000, const char* description = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetValidationCommand(const char* value, const char* description = 0); voidSetValue(const char* key, const char* value); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGridJDL(); TGridJDL(const TGridJDL&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObjec",MatchSource.WIKI,root/html604/TGridJDL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJDL.html
https://root.cern/root/html604/TGridJDL.html:8089,Usability,Clear,Clear,8089,"ublic:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMapfDescriptionMapstores the key, value pairs of the JDL; TMapfMapstores the key, value pairs of the JDL. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGridJDL(); Cleanup. void Clear(const Option_t* = 0); Clears the JDL information. void SetValue(const char* key, const char* value); Sets a value. If the entry already exists the old one is replaced. const char * GetValue(const char* key); Returns the value corresponding to the provided key. Return 0 in case; key is not found. void SetDescription(const char* key, const char* description); Sets a value. If the entry already exists the old one is replaced. const char * GetDescription(const char* key); Returns the value corresponding to the provided key. Return 0 in case; key is not found. TString AddQuotes(const char* value); Adds quotes to the provided string.; E.g. Value --> ""Value"". void AddToSet(const char* key, const char* value); Adds a value to a key value which hosts a set of values.; E.g. InputSandbox: {""file1"",""file2""}. void AddToSetDescription(const char* key, const char* description); Adds a value to a key value which hosts a set of values.; E.g. InputSandbox: {""file1"",""file2""}. TString Generate(); Generates the JDL snippet. ",MatchSource.WIKI,root/html604/TGridJDL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJDL.html
https://root.cern/root/html604/TGridJDL.html:8117,Usability,Clear,Clears,8117,"ublic:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMapfDescriptionMapstores the key, value pairs of the JDL; TMapfMapstores the key, value pairs of the JDL. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGridJDL(); Cleanup. void Clear(const Option_t* = 0); Clears the JDL information. void SetValue(const char* key, const char* value); Sets a value. If the entry already exists the old one is replaced. const char * GetValue(const char* key); Returns the value corresponding to the provided key. Return 0 in case; key is not found. void SetDescription(const char* key, const char* description); Sets a value. If the entry already exists the old one is replaced. const char * GetDescription(const char* key); Returns the value corresponding to the provided key. Return 0 in case; key is not found. TString AddQuotes(const char* value); Adds quotes to the provided string.; E.g. Value --> ""Value"". void AddToSet(const char* key, const char* value); Adds a value to a key value which hosts a set of values.; E.g. InputSandbox: {""file1"",""file2""}. void AddToSetDescription(const char* key, const char* description); Adds a value to a key value which hosts a set of values.; E.g. InputSandbox: {""file1"",""file2""}. TString Generate(); Generates the JDL snippet. ",MatchSource.WIKI,root/html604/TGridJDL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJDL.html
https://root.cern/root/html604/TGridJob.html:517,Availability,avail,available,517,". TGridJob. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TGridJob. class TGridJob: public TObject. TGridJob. Abstract base class defining interface to a GRID job. Related classes are TGridJobStatus. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGridJob(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCancel(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() cons",MatchSource.WIKI,root/html604/TGridJob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJob.html
https://root.cern/root/html604/TGridJob.html:1378,Availability,Error,Error,1378," virtual~TGridJob(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCancel(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() cons",MatchSource.WIKI,root/html604/TGridJob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJob.html
https://root.cern/root/html604/TGridJob.html:1507,Availability,error,error,1507," virtual~TGridJob(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCancel(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() cons",MatchSource.WIKI,root/html604/TGridJob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJob.html
https://root.cern/root/html604/TGridJob.html:1591,Availability,error,error,1591,"thod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCancel(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TStringGetJobID(); virtual TGridJobStatus*GetJobStatus() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetOutputSandbox(const char* localpath, Option_t* opt = 0); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; v",MatchSource.WIKI,root/html604/TGridJob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJob.html
https://root.cern/root/html604/TGridJob.html:6226,Availability,error,error,6226,"t TGridJob&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfJobIDthe job's ID. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetOutputSandbox(const char* localpath, Option_t* opt = 0); Must be implemented by actual GRID job implementation. Returns -1 in; case of error, 0 otherwise. TGridJob(TString jobID); { }. virtual ~TGridJob(); { }. TString GetJobID(); { return fJobID; }. TGridJobStatus * GetJobStatus() const. Bool_t Resubmit(). Bool_t Cancel(). » Author: Jan Fiete Grosse-Oetringhaus 06/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGridJob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJob.html
https://root.cern/root/html604/TGridJob.html:322,Integrability,interface,interface,322,". TGridJob. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TGridJob. class TGridJob: public TObject. TGridJob. Abstract base class defining interface to a GRID job. Related classes are TGridJobStatus. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGridJob(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCancel(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() cons",MatchSource.WIKI,root/html604/TGridJob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJob.html
https://root.cern/root/html604/TGridJob.html:2616,Modifiability,Inherit,InheritsFrom,2616,"::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TStringGetJobID(); virtual TGridJobStatus*GetJobStatus() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetOutputSandbox(const char* localpath, Option_t* opt = 0); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TGridJob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJob.html
https://root.cern/root/html604/TGridJob.html:2682,Modifiability,Inherit,InheritsFrom,2682,"ct::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TStringGetJobID(); virtual TGridJobStatus*GetJobStatus() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetOutputSandbox(const char* localpath, Option_t* opt = 0); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGridJob&operator=(const TGridJob&); virtual voidTO",MatchSource.WIKI,root/html604/TGridJob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJob.html
https://root.cern/root/html604/TGridJob.html:6005,Modifiability,Inherit,Inheritance,6005,"t TGridJob&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfJobIDthe job's ID. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetOutputSandbox(const char* localpath, Option_t* opt = 0); Must be implemented by actual GRID job implementation. Returns -1 in; case of error, 0 otherwise. TGridJob(TString jobID); { }. virtual ~TGridJob(); { }. TString GetJobID(); { return fJobID; }. TGridJobStatus * GetJobStatus() const. Bool_t Resubmit(). Bool_t Cancel(). » Author: Jan Fiete Grosse-Oetringhaus 06/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGridJob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJob.html
https://root.cern/root/html604/TGridJob.html:6018,Modifiability,Inherit,Inherited,6018,"t TGridJob&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfJobIDthe job's ID. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetOutputSandbox(const char* localpath, Option_t* opt = 0); Must be implemented by actual GRID job implementation. Returns -1 in; case of error, 0 otherwise. TGridJob(TString jobID); { }. virtual ~TGridJob(); { }. TString GetJobID(); { return fJobID; }. TGridJobStatus * GetJobStatus() const. Bool_t Resubmit(). Bool_t Cancel(). » Author: Jan Fiete Grosse-Oetringhaus 06/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGridJob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJob.html
https://root.cern/root/html604/TGridJob.html:2506,Security,Hash,Hash,2506,"rror = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TStringGetJobID(); virtual TGridJobStatus*GetJobStatus() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetOutputSandbox(const char* localpath, Option_t* opt = 0); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TGridJob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJob.html
https://root.cern/root/html604/TGridJob.html:4646,Testability,Test,TestBit,4646,"tion_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGridJob&operator=(const TGridJob&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Bool_tResubmit(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGridJob(TString jobID); TGridJob(const TGridJob&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGridJob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJob.html
https://root.cern/root/html604/TGridJob.html:4685,Testability,Test,TestBits,4685,"tion_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGridJob&operator=(const TGridJob&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Bool_tResubmit(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGridJob(TString jobID); TGridJob(const TGridJob&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGridJob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJob.html
https://root.cern/root/html604/TGridJob.html:838,Usability,Clear,Clear,838," virtual~TGridJob(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCancel(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() cons",MatchSource.WIKI,root/html604/TGridJob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJob.html
https://root.cern/root/html604/TGridJobStatus.html:507,Availability,avail,available,507,". TGridJobStatus. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TGridJobStatus. class TGridJobStatus: public TNamed. TGridJobStatus. Abstract base class containing the status of a Grid job. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGridJobStatus(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObjec",MatchSource.WIKI,root/html604/TGridJobStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatus.html
https://root.cern/root/html604/TGridJobStatus.html:1352,Availability,Error,Error,1352," virtual~TGridJobStatus(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObjec",MatchSource.WIKI,root/html604/TGridJobStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatus.html
https://root.cern/root/html604/TGridJobStatus.html:1481,Availability,error,error,1481," virtual~TGridJobStatus(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObjec",MatchSource.WIKI,root/html604/TGridJobStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatus.html
https://root.cern/root/html604/TGridJobStatus.html:1565,Availability,error,error,1565,"oidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TGridJobStatus::EGridJobStatusGetStatus() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const cha",MatchSource.WIKI,root/html604/TGridJobStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatus.html
https://root.cern/root/html604/TGridJobStatus.html:6647,Energy Efficiency,reduce,reduces,6647,":Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TGridJobStatus::EGridJobStatuskABORTED; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGridJobStatus::EGridJobStatuskDONE; static TGridJobStatus::EGridJobStatuskFAIL; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TGridJobStatus::EGridJobStatuskRUNNING; static TObject::(anonymous)TObject::kSingleKey; static TGridJobStatus::EGridJobStatuskUNKNOWN; static TGridJobStatus::EGridJobStatuskWAITING; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGridJobStatus(); { }. virtual ~TGridJobStatus(); { }. EGridJobStatus GetStatus() const; These functions reduces the possible job states to the subset given above; in EGridJobStatus, for detailed status information query the specific; implementation. » Author: Jan Fiete Grosse-Oetringhaus 06/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGridJobStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatus.html
https://root.cern/root/html604/TGridJobStatus.html:2546,Modifiability,Inherit,InheritsFrom,2546,"rams, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TGridJobStatus::EGridJobStatusGetStatus() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html604/TGridJobStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatus.html
https://root.cern/root/html604/TGridJobStatus.html:2612,Modifiability,Inherit,InheritsFrom,2612,"vent, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TGridJobStatus::EGridJobStatusGetStatus() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGridJobStatus&operator=(const TGridJobStatus&); virt",MatchSource.WIKI,root/html604/TGridJobStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatus.html
https://root.cern/root/html604/TGridJobStatus.html:6465,Modifiability,Inherit,Inheritance,6465,":Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TGridJobStatus::EGridJobStatuskABORTED; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGridJobStatus::EGridJobStatuskDONE; static TGridJobStatus::EGridJobStatuskFAIL; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TGridJobStatus::EGridJobStatuskRUNNING; static TObject::(anonymous)TObject::kSingleKey; static TGridJobStatus::EGridJobStatuskUNKNOWN; static TGridJobStatus::EGridJobStatuskWAITING; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGridJobStatus(); { }. virtual ~TGridJobStatus(); { }. EGridJobStatus GetStatus() const; These functions reduces the possible job states to the subset given above; in EGridJobStatus, for detailed status information query the specific; implementation. » Author: Jan Fiete Grosse-Oetringhaus 06/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGridJobStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatus.html
https://root.cern/root/html604/TGridJobStatus.html:6478,Modifiability,Inherit,Inherited,6478,":Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TGridJobStatus::EGridJobStatuskABORTED; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGridJobStatus::EGridJobStatuskDONE; static TGridJobStatus::EGridJobStatuskFAIL; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TGridJobStatus::EGridJobStatuskRUNNING; static TObject::(anonymous)TObject::kSingleKey; static TGridJobStatus::EGridJobStatuskUNKNOWN; static TGridJobStatus::EGridJobStatuskWAITING; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGridJobStatus(); { }. virtual ~TGridJobStatus(); { }. EGridJobStatus GetStatus() const; These functions reduces the possible job states to the subset given above; in EGridJobStatus, for detailed status information query the specific; implementation. » Author: Jan Fiete Grosse-Oetringhaus 06/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGridJobStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatus.html
https://root.cern/root/html604/TGridJobStatus.html:2436,Security,Hash,Hash,2436,"t char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TGridJobStatus::EGridJobStatusGetStatus() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::",MatchSource.WIKI,root/html604/TGridJobStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatus.html
https://root.cern/root/html604/TGridJobStatus.html:4778,Testability,Test,TestBit,4778,"; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGridJobStatus&operator=(const TGridJobStatus&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGridJobStatus(); TGridJobStatus(const TGridJobStatus&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGridJobStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatus.html
https://root.cern/root/html604/TGridJobStatus.html:4817,Testability,Test,TestBits,4817,"; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGridJobStatus&operator=(const TGridJobStatus&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGridJobStatus(); TGridJobStatus(const TGridJobStatus&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGridJobStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatus.html
https://root.cern/root/html604/TGridJobStatus.html:809,Usability,Clear,Clear,809," virtual~TGridJobStatus(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObjec",MatchSource.WIKI,root/html604/TGridJobStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatus.html
https://root.cern/root/html604/TGridJobStatusList.html:2411,Availability,Error,Error,2411,"ual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int",MatchSource.WIKI,root/html604/TGridJobStatusList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatusList.html
https://root.cern/root/html604/TGridJobStatusList.html:2540,Availability,error,error,2540,"); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Opti",MatchSource.WIKI,root/html604/TGridJobStatusList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatusList.html
https://root.cern/root/html604/TGridJobStatusList.html:2624,Availability,error,error,2624,"ject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual ",MatchSource.WIKI,root/html604/TGridJobStatusList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatusList.html
https://root.cern/root/html604/TGridJobStatusList.html:4015,Modifiability,Inherit,InheritsFrom,4015,"ject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TList::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method)",MatchSource.WIKI,root/html604/TGridJobStatusList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatusList.html
https://root.cern/root/html604/TGridJobStatusList.html:4081,Modifiability,Inherit,InheritsFrom,4081,"; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TList::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; Long64_tTSeqCollection::Merge(TCollection* list); virtual ",MatchSource.WIKI,root/html604/TGridJobStatusList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatusList.html
https://root.cern/root/html604/TGridJobStatusList.html:10668,Modifiability,Inherit,Inheritance,10668,"t; virtual voidTCollection::PrintCollectionHeader(Option_t* option) const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TCollection::(anonymous)TCollection::kInitCapacity; static TCollection::(anonymous)TCollection::kInitHashTableCapacity; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TStringfJobIDthe job's ID; TObjLink*TList::fLast! pointer to last entry in linked list; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGridJobStatusList(); { }. virtual ~TGridJobStatusList(); { }. » Author: Andreas-Joachim Peters 10/12/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGridJobStatusList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatusList.html
https://root.cern/root/html604/TGridJobStatusList.html:10681,Modifiability,Inherit,Inherited,10681,"t; virtual voidTCollection::PrintCollectionHeader(Option_t* option) const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TCollection::(anonymous)TCollection::kInitCapacity; static TCollection::(anonymous)TCollection::kInitHashTableCapacity; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TStringfJobIDthe job's ID; TObjLink*TList::fLast! pointer to last entry in linked list; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGridJobStatusList(); { }. virtual ~TGridJobStatusList(); { }. » Author: Andreas-Joachim Peters 10/12/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGridJobStatusList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatusList.html
https://root.cern/root/html604/TGridJobStatusList.html:10207,Performance,cache,cache,10207,"t; virtual voidTCollection::PrintCollectionHeader(Option_t* option) const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TCollection::(anonymous)TCollection::kInitCapacity; static TCollection::(anonymous)TCollection::kInitHashTableCapacity; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TStringfJobIDthe job's ID; TObjLink*TList::fLast! pointer to last entry in linked list; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGridJobStatusList(); { }. virtual ~TGridJobStatusList(); { }. » Author: Andreas-Joachim Peters 10/12/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGridJobStatusList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatusList.html
https://root.cern/root/html604/TGridJobStatusList.html:3841,Security,Hash,Hash,3841,"l TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTCollection::ls(Option_t* option = """") con",MatchSource.WIKI,root/html604/TGridJobStatusList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatusList.html
https://root.cern/root/html604/TGridJobStatusList.html:1335,Testability,Assert,AssertClass,1335," virtual~TGridJobStatusList(); voidTObject::AbstractMethod(const char* method) const; virtual voidTList::Add(TObject* obj); virtual voidTList::Add(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidT",MatchSource.WIKI,root/html604/TGridJobStatusList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatusList.html
https://root.cern/root/html604/TGridJobStatusList.html:7894,Testability,Test,TestBit,7894,"* a, Int_t nBs, TObject*** b, Int_t first, Int_t last); virtual Int_tTObject::Read(const char* name); virtual voidTList::RecursiveRemove(TObject* obj); virtual TObject*TList::Remove(TObject* obj); virtual TObject*TList::Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGridJobStatusList(); TGridJobStatusList(const TGridJobStatusList&); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGridJobStatusList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatusList.html
https://root.cern/root/html604/TGridJobStatusList.html:7933,Testability,Test,TestBits,7933,"* a, Int_t nBs, TObject*** b, Int_t first, Int_t last); virtual Int_tTObject::Read(const char* name); virtual voidTList::RecursiveRemove(TObject* obj); virtual TObject*TList::Remove(TObject* obj); virtual TObject*TList::Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGridJobStatusList(); TGridJobStatusList(const TGridJobStatusList&); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGridJobStatusList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatusList.html
https://root.cern/root/html604/TGridJobStatusList.html:1671,Usability,Clear,Clear,1671,"oidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_",MatchSource.WIKI,root/html604/TGridJobStatusList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridJobStatusList.html
https://root.cern/root/html604/TGridResult.html:2457,Availability,Error,Error,2457,"ual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const TEntryList*GetEntryList(UInt_t) const; virtual TList*GetFileInfoList() const; virtual const char*GetFileName(UInt_t) const; virtual const char*GetFileNamePath(UInt_t) const; virtu",MatchSource.WIKI,root/html604/TGridResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridResult.html
https://root.cern/root/html604/TGridResult.html:2586,Availability,error,error,2586,"); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const TEntryList*GetEntryList(UInt_t) const; virtual TList*GetFileInfoList() const; virtual const char*GetFileName(UInt_t) const; virtual const char*GetFileNamePath(UInt_t) const; virtual const char*TObject::GetIconName() const; virtual const char*GetKey(UInt_t, const char*) const; virtual Int_tTSeqCollection::Ge",MatchSource.WIKI,root/html604/TGridResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridResult.html
https://root.cern/root/html604/TGridResult.html:2670,Availability,error,error,2670,"ject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const TEntryList*GetEntryList(UInt_t) const; virtual TList*GetFileInfoList() const; virtual const char*GetFileName(UInt_t) const; virtual const char*GetFileNamePath(UInt_t) const; virtual const char*TObject::GetIconName() const; virtual const char*GetKey(UInt_t, const char*) const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject",MatchSource.WIKI,root/html604/TGridResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridResult.html
https://root.cern/root/html604/TGridResult.html:332,Integrability,interface,interface,332,". TGridResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TGridResult. class TGridResult: public TList. TGridResult. Abstract base class defining interface to a GRID result.; Objects of this class are created by TGrid methods. Related classes are TGrid. Function Members (Methods); public:. virtual~TGridResult(); voidTObject::AbstractMethod(const char* method) const; virtual voidTList::Add(TObject* obj); virtual voidTList::Add(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObje",MatchSource.WIKI,root/html604/TGridResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridResult.html
https://root.cern/root/html604/TGridResult.html:4345,Modifiability,Inherit,InheritsFrom,4345," const; virtual const char*GetFileName(UInt_t) const; virtual const char*GetFileNamePath(UInt_t) const; virtual const char*TObject::GetIconName() const; virtual const char*GetKey(UInt_t, const char*) const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*GetPath(UInt_t) const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TList::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method)",MatchSource.WIKI,root/html604/TGridResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridResult.html
https://root.cern/root/html604/TGridResult.html:4411,Modifiability,Inherit,InheritsFrom,4411,"t char*GetFileNamePath(UInt_t) const; virtual const char*TObject::GetIconName() const; virtual const char*GetKey(UInt_t, const char*) const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*GetPath(UInt_t) const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TList::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; Long64_tTSeqCollection::Merge(TCollection* list); virtual ",MatchSource.WIKI,root/html604/TGridResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridResult.html
https://root.cern/root/html604/TGridResult.html:10992,Modifiability,Inherit,Inheritance,10992,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGridResult(); { SetOwner(kTRUE); }. virtual ~TGridResult(); { }. const char * GetFileName(UInt_t ) const; { MayNotUse(""GetFileName""); return 0; }. const char * GetFileNamePath(UInt_t ) const; { MayNotUse(""GetFileNamePath""); return 0; }. const char * GetPath(UInt_t ) const; { MayNotUse(""GetPath""); return 0; }. const TEntryList * GetEntryList(UInt_t ) const; { MayNotUse(""GetEntryList""); return 0; }. const char * GetKey(UInt_t , const char* ) const; { MayNotUse(""GetKey""); return 0; }. Bool_t SetKey(UInt_t , const char* , const char* ); { MayNotUse(""SetKey""); return 0; }. TList * GetFileInfoList() const; { MayNotUse(""GetFileInfoList""); return 0; }. » Author: Fons Rademakers 3/1/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a ",MatchSource.WIKI,root/html604/TGridResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridResult.html
https://root.cern/root/html604/TGridResult.html:11005,Modifiability,Inherit,Inherited,11005,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGridResult(); { SetOwner(kTRUE); }. virtual ~TGridResult(); { }. const char * GetFileName(UInt_t ) const; { MayNotUse(""GetFileName""); return 0; }. const char * GetFileNamePath(UInt_t ) const; { MayNotUse(""GetFileNamePath""); return 0; }. const char * GetPath(UInt_t ) const; { MayNotUse(""GetPath""); return 0; }. const TEntryList * GetEntryList(UInt_t ) const; { MayNotUse(""GetEntryList""); return 0; }. const char * GetKey(UInt_t , const char* ) const; { MayNotUse(""GetKey""); return 0; }. Bool_t SetKey(UInt_t , const char* , const char* ); { MayNotUse(""SetKey""); return 0; }. TList * GetFileInfoList() const; { MayNotUse(""GetFileInfoList""); return 0; }. » Author: Fons Rademakers 3/1/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a ",MatchSource.WIKI,root/html604/TGridResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridResult.html
https://root.cern/root/html604/TGridResult.html:10558,Performance,cache,cache,10558,"CannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TCollection::(anonymous)TCollection::kInitCapacity; static TCollection::(anonymous)TCollection::kInitHashTableCapacity; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGridResult(); { SetOwner(kTRUE); }. virtual ~TGridResult(); { }. const char * GetFileName(UInt_t ) const; { MayNotUse(""GetFileName""); return 0; }. const char * GetFileNamePath(UInt_t ) const; { MayNotUse(""GetFileNamePath""); return 0; }. const char * GetPath(UInt_t ) const; { MayNotUse(""GetPath""); return 0; }. const TEntryList * GetEntryList(UInt_t ) const; { MayNotUse(""GetEntryList""); return 0; }. const char * GetKey(UInt_t , const char* ) const; { MayNotUse(""GetKey""); return 0; }. Bool_t SetKey(UInt_t , const char* , const char* ); { MayNotUse(""SetKey""); return 0; }. TList * GetFileInfoList() const; { MayNotUse(""GetFileInfoList""); retur",MatchSource.WIKI,root/html604/TGridResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridResult.html
https://root.cern/root/html604/TGridResult.html:4171,Security,Hash,Hash,4171,"n() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const TEntryList*GetEntryList(UInt_t) const; virtual TList*GetFileInfoList() const; virtual const char*GetFileName(UInt_t) const; virtual const char*GetFileNamePath(UInt_t) const; virtual const char*TObject::GetIconName() const; virtual const char*GetKey(UInt_t, const char*) const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*GetPath(UInt_t) const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTCollection::ls(Option_t* option = """") con",MatchSource.WIKI,root/html604/TGridResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridResult.html
https://root.cern/root/html604/TGridResult.html:1381,Testability,Assert,AssertClass,1381," virtual~TGridResult(); voidTObject::AbstractMethod(const char* method) const; virtual voidTList::Add(TObject* obj); virtual voidTList::Add(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObje",MatchSource.WIKI,root/html604/TGridResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridResult.html
https://root.cern/root/html604/TGridResult.html:8266,Testability,Test,TestBit,8266," first, Int_t last); virtual Int_tTObject::Read(const char* name); virtual voidTList::RecursiveRemove(TObject* obj); virtual TObject*TList::Remove(TObject* obj); virtual TObject*TList::Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Bool_tSetKey(UInt_t, const char*, const char*); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGridResult(); TGridResult(const TGridResult&); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGridResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridResult.html
https://root.cern/root/html604/TGridResult.html:8305,Testability,Test,TestBits,8305," first, Int_t last); virtual Int_tTObject::Read(const char* name); virtual voidTList::RecursiveRemove(TObject* obj); virtual TObject*TList::Remove(TObject* obj); virtual TObject*TList::Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Bool_tSetKey(UInt_t, const char*, const char*); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGridResult(); TGridResult(const TGridResult&); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGridResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridResult.html
https://root.cern/root/html604/TGridResult.html:1717,Usability,Clear,Clear,1717,"oidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_",MatchSource.WIKI,root/html604/TGridResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGridResult.html
https://root.cern/root/html604/TGroupButton.html:5683,Availability,Error,Error,5683,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteAction(); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTP",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:5850,Availability,error,error,5850,"r* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteAction(); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tT",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:5934,Availability,error,error,5934,"idTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteAction(); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTPad::GetCanvasID() const; virtual TCanvasImp*TPad::GetCanvasImp() const; Int_tTPad::",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:26641,Availability,down,down,26641,,MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:18347,Deployability,TOGGLE,TOGGLE,18347,"ePS(Color_t color, Style_t style, Width_t lwidth); virtual voidTPad::SetAttMarkerPS(Color_t color, Style_t style, Size_t msize); virtual voidTPad::SetAttTextPS(Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize); virtual voidTPad::SetBBoxCenter(const TPoint& p); virtual voidTPad::SetBBoxCenterX(const Int_t x); virtual voidTPad::SetBBoxCenterY(const Int_t y); virtual voidTPad::SetBBoxX1(const Int_t x); virtual voidTPad::SetBBoxX2(const Int_t x); virtual voidTPad::SetBBoxY1(const Int_t y); virtual voidTPad::SetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTButton::SetBorderMode(Short_t bordermode); virtual voidTPad::SetBorderSize(Short_t bordersize)MENU ; virtual voidTAttPad::SetBottomMargin(Float_t bottommargin); virtual voidTPad::SetCanvas(TCanvas* c); virtual voidTPad::SetCanvasSize(UInt_t ww, UInt_t wh); virtual voidTPad::SetCopyGLDevice(Bool_t copy); virtual voidTPad::SetCrosshair(Int_t crhair = 1)TOGGLE ; virtual voidTPad::SetCursor(ECursor cursor); virtual voidTPad::SetDoubleBuffer(Int_t mode = 1); virtual voidTPad::SetDrawOption(Option_t* option = """"); static voidTObject::SetDtorOnly(void* obj); virtual voidTPad::SetEditable(Bool_t mode = kTRUE)TOGGLE ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTPad::SetFillStyle(Style_t fstyle); virtual voidTPad::SetFixedAspectRatio(Bool_t fixed = kTRUE)TOGGLE ; voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTButton::SetFraming(Bool_t f = 1); virtual voidTPad::SetGLDevice(Int_t dev); virtual v",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:18602,Deployability,TOGGLE,TOGGLE,18602,"BoxCenter(const TPoint& p); virtual voidTPad::SetBBoxCenterX(const Int_t x); virtual voidTPad::SetBBoxCenterY(const Int_t y); virtual voidTPad::SetBBoxX1(const Int_t x); virtual voidTPad::SetBBoxX2(const Int_t x); virtual voidTPad::SetBBoxY1(const Int_t y); virtual voidTPad::SetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTButton::SetBorderMode(Short_t bordermode); virtual voidTPad::SetBorderSize(Short_t bordersize)MENU ; virtual voidTAttPad::SetBottomMargin(Float_t bottommargin); virtual voidTPad::SetCanvas(TCanvas* c); virtual voidTPad::SetCanvasSize(UInt_t ww, UInt_t wh); virtual voidTPad::SetCopyGLDevice(Bool_t copy); virtual voidTPad::SetCrosshair(Int_t crhair = 1)TOGGLE ; virtual voidTPad::SetCursor(ECursor cursor); virtual voidTPad::SetDoubleBuffer(Int_t mode = 1); virtual voidTPad::SetDrawOption(Option_t* option = """"); static voidTObject::SetDtorOnly(void* obj); virtual voidTPad::SetEditable(Bool_t mode = kTRUE)TOGGLE ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTPad::SetFillStyle(Style_t fstyle); virtual voidTPad::SetFixedAspectRatio(Bool_t fixed = kTRUE)TOGGLE ; voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTButton::SetFraming(Bool_t f = 1); virtual voidTPad::SetGLDevice(Int_t dev); virtual voidTButton::SetGrid(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetGridx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetGridy(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetLeftMargin(Float_t leftmargin); virtual voidTAttLine::SetLineAttribute",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:18891,Deployability,TOGGLE,TOGGLE,18891,"st Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTButton::SetBorderMode(Short_t bordermode); virtual voidTPad::SetBorderSize(Short_t bordersize)MENU ; virtual voidTAttPad::SetBottomMargin(Float_t bottommargin); virtual voidTPad::SetCanvas(TCanvas* c); virtual voidTPad::SetCanvasSize(UInt_t ww, UInt_t wh); virtual voidTPad::SetCopyGLDevice(Bool_t copy); virtual voidTPad::SetCrosshair(Int_t crhair = 1)TOGGLE ; virtual voidTPad::SetCursor(ECursor cursor); virtual voidTPad::SetDoubleBuffer(Int_t mode = 1); virtual voidTPad::SetDrawOption(Option_t* option = """"); static voidTObject::SetDtorOnly(void* obj); virtual voidTPad::SetEditable(Bool_t mode = kTRUE)TOGGLE ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTPad::SetFillStyle(Style_t fstyle); virtual voidTPad::SetFixedAspectRatio(Bool_t fixed = kTRUE)TOGGLE ; voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTButton::SetFraming(Bool_t f = 1); virtual voidTPad::SetGLDevice(Int_t dev); virtual voidTButton::SetGrid(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetGridx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetGridy(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetLeftMargin(Float_t leftmargin); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTButton::SetLogx(Int_t value = 1); vir",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:19451,Deployability,TOGGLE,TOGGLE,19451,"rtual voidTPad::SetDrawOption(Option_t* option = """"); static voidTObject::SetDtorOnly(void* obj); virtual voidTPad::SetEditable(Bool_t mode = kTRUE)TOGGLE ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTPad::SetFillStyle(Style_t fstyle); virtual voidTPad::SetFixedAspectRatio(Bool_t fixed = kTRUE)TOGGLE ; voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTButton::SetFraming(Bool_t f = 1); virtual voidTPad::SetGLDevice(Int_t dev); virtual voidTButton::SetGrid(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetGridx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetGridy(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetLeftMargin(Float_t leftmargin); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTButton::SetLogx(Int_t value = 1); virtual voidTButton::SetLogy(Int_t value = 1); virtual voidTPad::SetLogz(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetMargin(Float_t left, Float_t right, Float_t bottom, Float_t top); static voidTPad::SetMaxPickDistance(Int_t maxPick = 5); virtual voidTButton::SetMethod(const char* method)MENU ; virtual voidTButton::SetName(const char* name); virtual voidTPad::SetNumber(Int_t number); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTPad::SetPad(Double_t xlow, Double_t ylow, Double_t xup, Double_t yup); virtual voidTPad::SetPad(const char* na",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:19503,Deployability,TOGGLE,TOGGLE,19503,"; static voidTObject::SetDtorOnly(void* obj); virtual voidTPad::SetEditable(Bool_t mode = kTRUE)TOGGLE ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTPad::SetFillStyle(Style_t fstyle); virtual voidTPad::SetFixedAspectRatio(Bool_t fixed = kTRUE)TOGGLE ; voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTButton::SetFraming(Bool_t f = 1); virtual voidTPad::SetGLDevice(Int_t dev); virtual voidTButton::SetGrid(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetGridx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetGridy(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetLeftMargin(Float_t leftmargin); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTButton::SetLogx(Int_t value = 1); virtual voidTButton::SetLogy(Int_t value = 1); virtual voidTPad::SetLogz(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetMargin(Float_t left, Float_t right, Float_t bottom, Float_t top); static voidTPad::SetMaxPickDistance(Int_t maxPick = 5); virtual voidTButton::SetMethod(const char* method)MENU ; virtual voidTButton::SetName(const char* name); virtual voidTPad::SetNumber(Int_t number); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTPad::SetPad(Double_t xlow, Double_t ylow, Double_t xup, Double_t yup); virtual voidTPad::SetPad(const char* name, const char* title, Double_t xlow, Double_t ylow,",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:19981,Deployability,TOGGLE,TOGGLE,19981,"th_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTButton::SetFraming(Bool_t f = 1); virtual voidTPad::SetGLDevice(Int_t dev); virtual voidTButton::SetGrid(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetGridx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetGridy(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetLeftMargin(Float_t leftmargin); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTButton::SetLogx(Int_t value = 1); virtual voidTButton::SetLogy(Int_t value = 1); virtual voidTPad::SetLogz(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetMargin(Float_t left, Float_t right, Float_t bottom, Float_t top); static voidTPad::SetMaxPickDistance(Int_t maxPick = 5); virtual voidTButton::SetMethod(const char* method)MENU ; virtual voidTButton::SetName(const char* name); virtual voidTPad::SetNumber(Int_t number); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTPad::SetPad(Double_t xlow, Double_t ylow, Double_t xup, Double_t yup); virtual voidTPad::SetPad(const char* name, const char* title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color = 35, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTPad::SetPhi(Double_t phi = 30); virtual voidTAttPad::SetRightMargin(Float_t rightmargin); virtual voidTPad::SetSelected(TObject* obj); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual vo",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:21368,Deployability,TOGGLE,TOGGLE,21368," Double_t ylow, Double_t xup, Double_t yup); virtual voidTPad::SetPad(const char* name, const char* title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color = 35, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTPad::SetPhi(Double_t phi = 30); virtual voidTAttPad::SetRightMargin(Float_t rightmargin); virtual voidTPad::SetSelected(TObject* obj); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextColorAlpha(Color_t tcolor, Float_t talpha); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTPad::SetTheta(Double_t theta = 30); virtual voidTPad::SetTicks(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetTickx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTicky(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) c",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:21420,Deployability,TOGGLE,TOGGLE,21420," voidTPad::SetPad(const char* name, const char* title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color = 35, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTPad::SetPhi(Double_t phi = 30); virtual voidTAttPad::SetRightMargin(Float_t rightmargin); virtual voidTPad::SetSelected(TObject* obj); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextColorAlpha(Color_t tcolor, Float_t talpha); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTPad::SetTheta(Double_t theta = 30); virtual voidTPad::SetTicks(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetTickx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTicky(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tT",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:22620,Deployability,Update,Update,22620,"Object::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGroupButton(); TGroupButton(const char* groupname, const char* title, const char* method, Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTPad::Update(); virtual voidTPad::UseCurrentStyle()MENU ; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTButton::x3d(Option_t* option = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual voidTPad::XYtoPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual Int_tTPad::YtoAbsPixel(Double_t ",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:12276,Integrability,Message,Message,12276,"dTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTPad::IsBatch() const; Bool_tTVirtualPad::IsBeingResized() const; virtual Bool_tTPad::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTPad::IsFolder() const; virtual Bool_tTPad::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTPad::IsRetained() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; virtual Bool_tTPad::IsVertical() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTPad::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTPad::Modified(Bool_t flag = 1)SIGNAL ; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Bool_tTPad::OpaqueMoving() const; virtual Bool_tTPad::OpaqueResizing() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); static TVirtualPad*&TVirtualPad::Pad(); virtual Bool_tTVirtualPad::PadInHighlightMode() const; virtual Bool_tTVirtualPad::PadInSelectionMode() const; virtual Double_tTPad::PadtoX(Double_t x) const; vi",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:11365,Modifiability,Inherit,InheritsFrom,11365,"h() const; virtual Double_tTPad::GetWNDC() const; virtual UInt_tTPad::GetWw() const; virtual Double_tTPad::GetX1() const; virtual Double_tTPad::GetX2() const; Float_tTAttPad::GetXfile() const; virtual Double_tTPad::GetXlowNDC() const; Float_tTAttPad::GetXstat() const; virtual Double_tTPad::GetY1() const; virtual Double_tTPad::GetY2() const; Float_tTAttPad::GetYfile() const; virtual Double_tTPad::GetYlowNDC() const; Float_tTAttPad::GetYstat() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual Bool_tTPad::HasCrosshair() const; virtual Bool_tTPad::HasFixedAspectRatio() const; virtual ULong_tTPad::Hash() const; virtual Bool_tTPad::HasViewer3D() const; virtual voidTPad::HighLight(Color_t col = kRed, Bool_t set = kTRUE); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTPad::IsBatch() const; Bool_tTVirtualPad::IsBeingResized() const; virtual Bool_tTPad::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTPad::IsFolder() const; virtual Bool_tTPad::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTPad::IsRetained() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; virtual Bool_tTPad::IsVertical() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTPad::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTPad::Modified(Bool_t flag = 1)SIGNAL ; virtual voi",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:11431,Modifiability,Inherit,InheritsFrom,11431,"ad::GetWw() const; virtual Double_tTPad::GetX1() const; virtual Double_tTPad::GetX2() const; Float_tTAttPad::GetXfile() const; virtual Double_tTPad::GetXlowNDC() const; Float_tTAttPad::GetXstat() const; virtual Double_tTPad::GetY1() const; virtual Double_tTPad::GetY2() const; Float_tTAttPad::GetYfile() const; virtual Double_tTPad::GetYlowNDC() const; Float_tTAttPad::GetYstat() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual Bool_tTPad::HasCrosshair() const; virtual Bool_tTPad::HasFixedAspectRatio() const; virtual ULong_tTPad::Hash() const; virtual Bool_tTPad::HasViewer3D() const; virtual voidTPad::HighLight(Color_t col = kRed, Bool_t set = kTRUE); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTPad::IsBatch() const; Bool_tTVirtualPad::IsBeingResized() const; virtual Bool_tTPad::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTPad::IsFolder() const; virtual Bool_tTPad::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTPad::IsRetained() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; virtual Bool_tTPad::IsVertical() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTPad::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTPad::Modified(Bool_t flag = 1)SIGNAL ; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); virtual Int_",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:31688,Modifiability,Inherit,Inheritance,31688," left corner of pad in NDC [0,1]; Float_tTAttPad::fXstatX position where to draw the statistics; Double_tTPad::fXtoAbsPixelkConversion coefficient for X World to absolute pixel; Double_tTPad::fXtoPixelxpixel = fXtoPixelk + fXtoPixel*xworld; Double_tTPad::fXtoPixelkConversion coefficient for X World to pixel; Double_tTPad::fY1Y of lower Y coordinate; Double_tTPad::fY2Y of upper Y coordinate; Double_tTPad::fYUpNDC; Float_tTAttPad::fYfileY position where to draw the file name; Double_tTPad::fYlowNDCY bottom left corner of pad in NDC [0,1]; Float_tTAttPad::fYstatY position where to draw the statistics; Double_tTPad::fYtoAbsPixelkConversion coefficient for Y World to absolute pixel; Double_tTPad::fYtoPixelypixel = fYtoPixelk + fYtoPixel*yworld; Double_tTPad::fYtoPixelkConversion coefficient for Y World to pixel; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static Int_tTPad::fgMaxPickDistanceMaximum Pick Distance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGroupButton(); GroupButton default constructor. TGroupButton(const char* groupname, const char* title, const char* method, Double_t x1, Double_t y1, Double_t x2, Double_t y2); GroupButton normal constructor. ~TGroupButton(); GroupButton default destructor. void DisplayColorTable(const char* action, Double_t x0, Double_t y0, Double_t wc, Double_t hc); Display Color Table in an attribute canvas. void ExecuteAction(); Execute action of this button. If an object has been selected before executing the APPLY button; in the control canvas, The member function and its parameters; for this object is executed via the interpreter. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a Button object is clicked. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. TGroupButton(const TGroupButton& org). TGroup",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:31701,Modifiability,Inherit,Inherited,31701," left corner of pad in NDC [0,1]; Float_tTAttPad::fXstatX position where to draw the statistics; Double_tTPad::fXtoAbsPixelkConversion coefficient for X World to absolute pixel; Double_tTPad::fXtoPixelxpixel = fXtoPixelk + fXtoPixel*xworld; Double_tTPad::fXtoPixelkConversion coefficient for X World to pixel; Double_tTPad::fY1Y of lower Y coordinate; Double_tTPad::fY2Y of upper Y coordinate; Double_tTPad::fYUpNDC; Float_tTAttPad::fYfileY position where to draw the file name; Double_tTPad::fYlowNDCY bottom left corner of pad in NDC [0,1]; Float_tTAttPad::fYstatY position where to draw the statistics; Double_tTPad::fYtoAbsPixelkConversion coefficient for Y World to absolute pixel; Double_tTPad::fYtoPixelypixel = fYtoPixelk + fYtoPixel*yworld; Double_tTPad::fYtoPixelkConversion coefficient for Y World to pixel; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static Int_tTPad::fgMaxPickDistanceMaximum Pick Distance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGroupButton(); GroupButton default constructor. TGroupButton(const char* groupname, const char* title, const char* method, Double_t x1, Double_t y1, Double_t x2, Double_t y2); GroupButton normal constructor. ~TGroupButton(); GroupButton default destructor. void DisplayColorTable(const char* action, Double_t x0, Double_t y0, Double_t wc, Double_t hc); Display Color Table in an attribute canvas. void ExecuteAction(); Execute action of this button. If an object has been selected before executing the APPLY button; in the control canvas, The member function and its parameters; for this object is executed via the interpreter. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a Button object is clicked. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. TGroupButton(const TGroupButton& org). TGroup",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:11057,Security,Hash,Hash,11057,"tUxmin() const; virtual Double_tTPad::GetUymax() const; virtual Double_tTPad::GetUymin() const; virtual TView*TPad::GetView() const; virtual TObject*TPad::GetView3D() const; virtual TVirtualViewer3D*TPad::GetViewer3D(Option_t* type = """"); virtual TVirtualPad*TPad::GetVirtCanvas() const; virtual UInt_tTPad::GetWh() const; virtual Double_tTPad::GetWNDC() const; virtual UInt_tTPad::GetWw() const; virtual Double_tTPad::GetX1() const; virtual Double_tTPad::GetX2() const; Float_tTAttPad::GetXfile() const; virtual Double_tTPad::GetXlowNDC() const; Float_tTAttPad::GetXstat() const; virtual Double_tTPad::GetY1() const; virtual Double_tTPad::GetY2() const; Float_tTAttPad::GetYfile() const; virtual Double_tTPad::GetYlowNDC() const; Float_tTAttPad::GetYstat() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual Bool_tTPad::HasCrosshair() const; virtual Bool_tTPad::HasFixedAspectRatio() const; virtual ULong_tTPad::Hash() const; virtual Bool_tTPad::HasViewer3D() const; virtual voidTPad::HighLight(Color_t col = kRed, Bool_t set = kTRUE); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTPad::IsBatch() const; Bool_tTVirtualPad::IsBeingResized() const; virtual Bool_tTPad::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTPad::IsFolder() const; virtual Bool_tTPad::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTPad::IsRetained() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; virtual Bool_tTPad::IsVertical() const; Bool_tTObject::IsZombie() c",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:22393,Testability,Test,TestBit,22393,"tTicky(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGroupButton(); TGroupButton(const char* groupname, const char* title, const char* method, Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTPad::Update(); virtual voidTPad::UseCurrentStyle()MENU ; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTButton::x3d(Option_t* option = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) c",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:22432,Testability,Test,TestBits,22432," voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGroupButton(); TGroupButton(const char* groupname, const char* title, const char* method, Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTPad::Update(); virtual voidTPad::UseCurrentStyle()MENU ; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTButton::x3d(Option_t* option = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Dou",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:28221,Testability,log,log,28221,"e if fixed aspect ratio; TFrame*TPad::fFrame! Pointer to 2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); TStringTButton::fMethodMethod to be executed by this button; Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TObject*TPad::fPadView3D! 3D View of this TPad; Double_tTPad::fPhiphi angle to view as lego/surface; Double_tTPad::fPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tTPad::fPixeltoXkConversion coefficient for pixel to X World; Double_tTPad::fPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tTPad::fPixeltoYkConversion coefficient for pixel to Y World; Int_tTPad::fPixmapID! Off-screen pixmap identifier; TList*TPad::fPrimitives->List of primitives (subpads); Bool_tTVirtualPad::fResizing!true when resizing the pad; Float_tTAttPad::f",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:28278,Testability,log,log,28278,"2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); TStringTButton::fMethodMethod to be executed by this button; Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TObject*TPad::fPadView3D! 3D View of this TPad; Double_tTPad::fPhiphi angle to view as lego/surface; Double_tTPad::fPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tTPad::fPixeltoXkConversion coefficient for pixel to X World; Double_tTPad::fPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tTPad::fPixeltoYkConversion coefficient for pixel to Y World; Int_tTPad::fPixmapID! Off-screen pixmap identifier; TList*TPad::fPrimitives->List of primitives (subpads); Bool_tTVirtualPad::fResizing!true when resizing the pad; Float_tTAttPad::fRightMarginRightMargin; Bool_tTQObject::fSignalsBlocked! ",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:28335,Testability,log,log,28335,"pad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); TStringTButton::fMethodMethod to be executed by this button; Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TObject*TPad::fPadView3D! 3D View of this TPad; Double_tTPad::fPhiphi angle to view as lego/surface; Double_tTPad::fPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tTPad::fPixeltoXkConversion coefficient for pixel to X World; Double_tTPad::fPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tTPad::fPixeltoYkConversion coefficient for pixel to Y World; Int_tTPad::fPixmapID! Off-screen pixmap identifier; TList*TPad::fPrimitives->List of primitives (subpads); Bool_tTVirtualPad::fResizing!true when resizing the pad; Float_tTAttPad::fRightMarginRightMargin; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Short_tTAttText::fT",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGroupButton.html:1692,Usability,Clear,Clear,1692,"88, const char* title = """")MENU ; virtual TVirtualPad*TPad::cd(Int_t subpadnumber = 0)MENU ; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTPad::Clear(Option_t* option = """"); virtual Int_tTPad::Clip(Float_t* x, Float_t* y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt); virtual Int_tTPad::Clip(Double_t* x, Double_t* y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt); virtual Int_tTPad::ClippingCode(Double_t x, Dou",MatchSource.WIKI,root/html604/TGroupButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGroupButton.html
https://root.cern/root/html604/TGRowLayout.html:783,Availability,down,downward,783,". TGRowLayout. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGRowLayout. class TGRowLayout: public TGVerticalLayout. A number of different layout classes (TGLayoutManager,; TGVerticalLayout, TGHorizontalLayout, TGLayoutHints, etc.). Concerning the TGMatrixLayout class:. It arranges frames in a matrix-like way.; This manager provides :; - a column number (0 means unlimited); - a row number (0 means unlimited); - horizontal & vertical separators. Notes : If both column and row are fixed values, any remaining; frames outside the count won't be managed.; Unlimited rows means the frame can expand downward; (the default behaviour in most UI).; Both unlimited rows and columns is undefined (read: will; crash the algorithm ;-).; With fixed dimensions, frames are always arranged in rows.; That is: 1st frame is at position (0,0), next one is at; row(0), column(1) and so on...; When specifying one dimension as unlimited (i.e. row=0 or; column=0) the frames are arranged according to the direction; of the fixed dimension. This layout manager does not make; use of TGLayoutHints. Function Members (Methods); public:. virtual~TGRowLayout(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject:",MatchSource.WIKI,root/html604/TGRowLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRowLayout.html
https://root.cern/root/html604/TGRowLayout.html:2108,Availability,Error,Error,2108," virtual~TGRowLayout(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject:",MatchSource.WIKI,root/html604/TGRowLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRowLayout.html
https://root.cern/root/html604/TGRowLayout.html:2237,Availability,error,error,2237," virtual~TGRowLayout(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject:",MatchSource.WIKI,root/html604/TGRowLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRowLayout.html
https://root.cern/root/html604/TGRowLayout.html:2321,Availability,error,error,2321," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGDimensionGetDefaultSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(c",MatchSource.WIKI,root/html604/TGRowLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRowLayout.html
https://root.cern/root/html604/TGRowLayout.html:3244,Modifiability,Inherit,InheritsFrom,3244,"irtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGDimensionGetDefaultSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGLayoutManager::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidLayout(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void",MatchSource.WIKI,root/html604/TGRowLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRowLayout.html
https://root.cern/root/html604/TGRowLayout.html:3310,Modifiability,Inherit,InheritsFrom,3310,"t_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGDimensionGetDefaultSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGLayoutManager::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidLayout(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](",MatchSource.WIKI,root/html604/TGRowLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRowLayout.html
https://root.cern/root/html604/TGRowLayout.html:7145,Modifiability,Inherit,Inheritance,7145,"nt_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. Int_tfSepinterval between frames; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TList*TGVerticalLayout::fListlist of frames to arrange; TGCompositeFrame*TGVerticalLayout::fMaincontainer frame; Bool_tTGLayoutManager::fModifiedkTRUE if positions of subframes changed after layout. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Layout(); Make a row layout of all frames in the list. TGDimension GetDefaultSize() const; Return default dimension of the row layout. void SavePrimitive(ostream& out, Option_t* = """"). TGLayoutHints& operator=(const TGLayoutHints&). TGFrameElement& operator=(const TGFrameElement&). TGRowLayout(TGCompositeFrame* main, Int_t s = 0); { }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGRowLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRowLayout.html
https://root.cern/root/html604/TGRowLayout.html:7158,Modifiability,Inherit,Inherited,7158,"nt_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. Int_tfSepinterval between frames; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TList*TGVerticalLayout::fListlist of frames to arrange; TGCompositeFrame*TGVerticalLayout::fMaincontainer frame; Bool_tTGLayoutManager::fModifiedkTRUE if positions of subframes changed after layout. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Layout(); Make a row layout of all frames in the list. TGDimension GetDefaultSize() const; Return default dimension of the row layout. void SavePrimitive(ostream& out, Option_t* = """"). TGLayoutHints& operator=(const TGLayoutHints&). TGFrameElement& operator=(const TGFrameElement&). TGRowLayout(TGCompositeFrame* main, Int_t s = 0); { }. » Author: Fons Rademakers 02/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGRowLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRowLayout.html
https://root.cern/root/html604/TGRowLayout.html:3134,Security,Hash,Hash,3134,"nst char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGDimensionGetDefaultSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGLayoutManager::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidLayout(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](",MatchSource.WIKI,root/html604/TGRowLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRowLayout.html
https://root.cern/root/html604/TGRowLayout.html:5521,Testability,Test,TestBit,5521,"delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGRowLayout&operator=(const TGRowLayout&); TGRowLayout&operator=(TGRowLayout&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGLayoutManager::SetDefaultHeight(UInt_t); virtual voidTGLayoutManager::SetDefaultWidth(UInt_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGLayoutManager::SetModified(Bool_t flag = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGRowLayout(TGRowLayout&&); TGRowLayout(const TGRowLayout&); TGRowLayout(TGCompositeFrame* main, Int_t s = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGRowLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRowLayout.html
https://root.cern/root/html604/TGRowLayout.html:5560,Testability,Test,TestBits,5560,"delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGRowLayout&operator=(const TGRowLayout&); TGRowLayout&operator=(TGRowLayout&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGLayoutManager::SetDefaultHeight(UInt_t); virtual voidTGLayoutManager::SetDefaultWidth(UInt_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGLayoutManager::SetModified(Bool_t flag = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGRowLayout(TGRowLayout&&); TGRowLayout(const TGRowLayout&); TGRowLayout(TGCompositeFrame* main, Int_t s = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGRowLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRowLayout.html
https://root.cern/root/html604/TGRowLayout.html:1568,Usability,Clear,Clear,1568," virtual~TGRowLayout(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject:",MatchSource.WIKI,root/html604/TGRowLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGRowLayout.html
https://root.cern/root/html604/TGScrollBar.html:1033,Availability,avail,available,1033,"s:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGScrollBar. class TGScrollBar: public TGFrame, public TGWidget. TGScrollBar and TGScrollBarElement. The classes in this file implement scrollbars. Scrollbars can be; either placed horizontal or vertical. A scrollbar contains three; TGScrollBarElements: The ""head"", ""tail"" and ""slider"". The head and; tail are fixed at either end and have the typical arrows in them. The TGHScrollBar will generate the following event messages:; kC_HSCROLL, kSB_SLIDERPOS, position, 0; kC_HSCROLL, kSB_SLIDERTRACK, position, 0. The TGVScrollBar will generate the following event messages:; kC_VSCROLL, kSB_SLIDERPOS, position, 0; kC_VSCROLL, kSB_SLIDERTRACK, position, 0. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGScrollBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Conn",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:4462,Availability,Error,Error,4462,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static Pixmap_tGetBckgndPixmap(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground();",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:4591,Availability,error,error,4591," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static Pixmap_tGetBckgndPixmap(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::Ge",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:4675,Availability,error,error,4675,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static Pixmap_tGetBckgndPixmap(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() const; virtual Option_t*TObjec",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:17821,Availability,mask,mask,17821,,MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:19326,Availability,down,down,19326,rame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Int_tfPoslogical current position; Int_tfPsizelogical page size of scrollbar; Int_tfRangelogical upper range of scrollbar; TTimer*fRepeatrepeat rate timer (when mouse stays pressed); Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TGScrollBarElement*fSliderslider; Int_tfSliderRangelogical slider range; Int_tfSliderSizelogical slider size; Int_tfSmallIncSmall Increment in the sliding algorithm; Window_tfSubwsub window in which mouse is pressed; TGScrollBarElement*fTailtail button of scrollbar; const TGPicture*fTailPicpicture in tail (down or right arrow); Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tfX0current slider position in pixels; Int_tfXpprevious slider position in pixels; Int_tTGFrame::fYframe y position; Int_tfY0current slider position in pixels; Int_tfYpprevious slider position in pixels; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static Pixmap_tfgBckgndPixmap; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; stati,MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:662,Integrability,message,messages,662,". TGScrollBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGScrollBar. class TGScrollBar: public TGFrame, public TGWidget. TGScrollBar and TGScrollBarElement. The classes in this file implement scrollbars. Scrollbars can be; either placed horizontal or vertical. A scrollbar contains three; TGScrollBarElements: The ""head"", ""tail"" and ""slider"". The head and; tail are fixed at either end and have the typical arrows in them. The TGHScrollBar will generate the following event messages:; kC_HSCROLL, kSB_SLIDERPOS, position, 0; kC_HSCROLL, kSB_SLIDERTRACK, position, 0. The TGVScrollBar will generate the following event messages:; kC_VSCROLL, kSB_SLIDERPOS, position, 0; kC_VSCROLL, kSB_SLIDERTRACK, position, 0. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGScrollBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) co",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:806,Integrability,message,messages,806,". TGScrollBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGScrollBar. class TGScrollBar: public TGFrame, public TGWidget. TGScrollBar and TGScrollBarElement. The classes in this file implement scrollbars. Scrollbars can be; either placed horizontal or vertical. A scrollbar contains three; TGScrollBarElements: The ""head"", ""tail"" and ""slider"". The head and; tail are fixed at either end and have the typical arrows in them. The TGHScrollBar will generate the following event messages:; kC_HSCROLL, kSB_SLIDERPOS, position, 0; kC_HSCROLL, kSB_SLIDERTRACK, position, 0. The TGVScrollBar will generate the following event messages:; kC_VSCROLL, kSB_SLIDERPOS, position, 0; kC_VSCROLL, kSB_SLIDERTRACK, position, 0. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGScrollBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) co",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:10304,Integrability,Message,Message,10304,"l TClass*IsA() const; Bool_tIsAccelerated() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidLayout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidMapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidMoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGWindow::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidPageSizeChanged(Int_t range)SIGNAL ; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPositionChanged(Int_t pos)SIGNAL ; virtual voidTGFrame::Print(Option_t*",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:9126,Modifiability,Inherit,InheritsFrom,9126,"dleDragEnter(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tHandleMotion(Event_t* event); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tHandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsAccelerated() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidLayout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:9192,Modifiability,Inherit,InheritsFrom,9192,"rame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tHandleMotion(Event_t* event); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tHandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsAccelerated() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidLayout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidMapSubwindows(); v",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:20645,Modifiability,Inherit,Inheritance,20645,"on; Int_tfY0current slider position in pixels; Int_tfYpprevious slider position in pixels; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static Pixmap_tfgBckgndPixmap; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Int_tfgScrollBarWidth; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGScrollBar(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor. ~TGScrollBar(); Delete a scrollbar (either horizontal or vertical). Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. Bool_t HandleTimer(TTimer* t); Handle repeat timer for horizontal or vertical scrollbar. Every time; timer times out we move slider. Pixmap_t GetBckgndPixmap(); Static method returning scrollbar background pixmap. Int_t GetScrollBarWidth(); Static method returning the scrollbar width. void ChangeBackground(Pixel_t back); Change background color. TGScrollBarElement& operator=(const TGScrollBar& ). void DrawBorder(). TGScrollBar(const TGScrollBar& ). void GrabPointer(Bool_t grab); { fGrabPointer = grab; }. Bool_t HandleButton(Event_t* event). Bool_t HandleMotion(Event_t* event). void Layout(). void SetDragging(Bool_t drag); { fDragging = drag; }. void SetR",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:20658,Modifiability,Inherit,Inherited,20658,"on; Int_tfY0current slider position in pixels; Int_tfYpprevious slider position in pixels; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static Pixmap_tfgBckgndPixmap; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Int_tfgScrollBarWidth; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGScrollBar(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor. ~TGScrollBar(); Delete a scrollbar (either horizontal or vertical). Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. Bool_t HandleTimer(TTimer* t); Handle repeat timer for horizontal or vertical scrollbar. Every time; timer times out we move slider. Pixmap_t GetBckgndPixmap(); Static method returning scrollbar background pixmap. Int_t GetScrollBarWidth(); Static method returning the scrollbar width. void ChangeBackground(Pixel_t back); Change background color. TGScrollBarElement& operator=(const TGScrollBar& ). void DrawBorder(). TGScrollBar(const TGScrollBar& ). void GrabPointer(Bool_t grab); { fGrabPointer = grab; }. Bool_t HandleButton(Event_t* event). Bool_t HandleMotion(Event_t* event). void Layout(). void SetDragging(Bool_t drag); { fDragging = drag; }. void SetR",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:8889,Security,Hash,Hash,8889,"ve(); virtual Atom_tTGFrame::HandleDNDPosition(Int_t, Int_t, Atom_t, Int_t, Int_t); virtual Bool_tTGFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGFrame::HandleDragDrop(TGFrame*, Int_t, Int_t, TGLayoutHints*); virtual Bool_tTGFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tHandleMotion(Event_t* event); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tHandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsAccelerated() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:14243,Testability,Test,TestBit,14243,"ame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPosition(Int_t pos); virtual voidSetRange(Int_t range, Int_t page_size); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetSmallIncrement(Int_t increment); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGScrollBar(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:14282,Testability,Test,TestBits,14282,"ame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPosition(Int_t pos); virtual voidSetRange(Int_t range, Int_t page_size); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetSmallIncrement(Int_t increment); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGScrollBar(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:1797,Usability,Clear,Clear,1797," virtual~TGScrollBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) co",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBar.html:15017,Usability,Clear,ClearFlags,15017,"l_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGScrollBar&operator=(const TGScrollBar&); TGScrollBar(const TGScrollBar&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow::EEditModeTGWindow::",MatchSource.WIKI,root/html604/TGScrollBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBar.html
https://root.cern/root/html604/TGScrollBarElement.html:4299,Availability,Error,Error,4299,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame:",MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:4428,Availability,error,error,4428," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() const; virtual Option",MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:4512,Availability,error,error,4512,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() const; virtual Option_t*TObject::GetDrawOption() const; virtual Int_tTGFrame::GetDropType() const; static",MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:16725,Availability,mask,mask,16725,,MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:17752,Availability,down,down,17752,urrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; UInt_tTGFrame::fHeightframe height; Pixel_tfHighColorhighlight color; Handle_tTGObject::fIdX11/Win32 Window identifier; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; const TGPicture*fPicpicture in scrollbar element; const TGPicture*fPicDpicture for disabled state of scrollbar element; const TGPicture*fPicNpicture for normal state of scrollbar element; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tfStatestate of scrollbar element (button up or down); Int_tfStylemodern or classic style; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled.,MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:19109,Availability,down,down,19109,"me width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGScrollBarElement(const TGWindow* p = 0, const TGPicture* pic = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kRaisedFrame | kDoubleBorder, Pixel_t back = GetDefaultFrameBackground()); Constructor. ~TGScrollBarElement(); destructor. void SetState(Int_t state); Change state of scrollbar element (either up or down). void SetEnabled(Bool_t on = kTRUE); Enable/Disable scroll bar button chaging the state. void DrawBorder(); Draw border around scollbar element. Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. TGScrollBarElement(const TGScrollBarElement& ). TGScrollBarElement& operator=(const TGScrollBarElement& ). Bool_t IsEnabled() const; { return !(fState & kButtonDisabled); }. » Author: Fons Rademakers 10/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:666,Integrability,message,messages,666,". TGScrollBarElement. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGScrollBarElement. class TGScrollBarElement: public TGFrame. TGScrollBar and TGScrollBarElement. The classes in this file implement scrollbars. Scrollbars can be; either placed horizontal or vertical. A scrollbar contains three; TGScrollBarElements: The ""head"", ""tail"" and ""slider"". The head and; tail are fixed at either end and have the typical arrows in them. The TGHScrollBar will generate the following event messages:; kC_HSCROLL, kSB_SLIDERPOS, position, 0; kC_HSCROLL, kSB_SLIDERTRACK, position, 0. The TGVScrollBar will generate the following event messages:; kC_VSCROLL, kSB_SLIDERPOS, position, 0; kC_VSCROLL, kSB_SLIDERTRACK, position, 0. Function Members (Methods); public:. virtual~TGScrollBarElement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, co",MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:810,Integrability,message,messages,810,". TGScrollBarElement. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGScrollBarElement. class TGScrollBarElement: public TGFrame. TGScrollBar and TGScrollBarElement. The classes in this file implement scrollbars. Scrollbars can be; either placed horizontal or vertical. A scrollbar contains three; TGScrollBarElements: The ""head"", ""tail"" and ""slider"". The head and; tail are fixed at either end and have the typical arrows in them. The TGHScrollBar will generate the following event messages:; kC_HSCROLL, kSB_SLIDERPOS, position, 0; kC_HSCROLL, kSB_SLIDERTRACK, position, 0. The TGVScrollBar will generate the following event messages:; kC_VSCROLL, kSB_SLIDERPOS, position, 0; kC_VSCROLL, kSB_SLIDERTRACK, position, 0. Function Members (Methods); public:. virtual~TGScrollBarElement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, co",MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:9727,Integrability,Message,Message,9727,"_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tIsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGWindow::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGFrame::Print(Option_t* option = """") const; virtual voidTGFrame::ProcessedConfigure(Event_t* event)SIGNAL ; vi",MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:8562,Modifiability,Inherit,InheritsFrom,8562,"tual Bool_tTGFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tIsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame:",MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:8628,Modifiability,Inherit,InheritsFrom,8628,"me::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tIsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGFrame::MapSubwindows(); virtual voidTG",MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:18720,Modifiability,Inherit,Inheritance,18720," up or down); Int_tfStylemodern or classic style; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGScrollBarElement(const TGWindow* p = 0, const TGPicture* pic = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kRaisedFrame | kDoubleBorder, Pixel_t back = GetDefaultFrameBackground()); Constructor. ~TGScrollBarElement(); destructor. void SetState(Int_t state); Change state of scrollbar element (either up or down). void SetEnabled(Bool_t on = kTRUE); Enable/Disable scroll bar button chaging the state. void DrawBorder(); Draw border around scollbar element. Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. TGScrollBarElement(const TGScrollBarElement& ). TGScrollBarElement& operator=(const TGScrollBarElement& ). Bool_t IsEnabled() const; { return !(fState & kButtonDisabled); }. » Author: Fons Rademakers 10/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding ",MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:18733,Modifiability,Inherit,Inherited,18733," up or down); Int_tfStylemodern or classic style; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGScrollBarElement(const TGWindow* p = 0, const TGPicture* pic = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kRaisedFrame | kDoubleBorder, Pixel_t back = GetDefaultFrameBackground()); Constructor. ~TGScrollBarElement(); destructor. void SetState(Int_t state); Change state of scrollbar element (either up or down). void SetEnabled(Bool_t on = kTRUE); Enable/Disable scroll bar button chaging the state. void DrawBorder(); Draw border around scollbar element. Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. TGScrollBarElement(const TGScrollBarElement& ). TGScrollBarElement& operator=(const TGScrollBarElement& ). Bool_t IsEnabled() const; { return !(fState & kButtonDisabled); }. » Author: Fons Rademakers 10/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding ",MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:8325,Security,Hash,Hash,8325,"_tTGFrame::HandleDNDLeave(); virtual Atom_tTGFrame::HandleDNDPosition(Int_t, Int_t, Atom_t, Int_t, Int_t); virtual Bool_tTGFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGFrame::HandleDragDrop(TGFrame*, Int_t, Int_t, TGLayoutHints*); virtual Bool_tTGFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tIsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZomb",MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:13354,Testability,Test,TestBit,13354,"ool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidSetEnabled(Bool_t on = kTRUE); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetState(Int_t state); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGScrollBarElement(const TGWindow* p = 0, const TGPicture* pic = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kRaisedFrame | kDoubleBorder, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:13393,Testability,Test,TestBits,13393,"ool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidSetEnabled(Bool_t on = kTRUE); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetState(Int_t state); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGScrollBarElement(const TGWindow* p = 0, const TGPicture* pic = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kRaisedFrame | kDoubleBorder, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGScrollBarElement.html:1634,Usability,Clear,Clear,1634," virtual~TGScrollBarElement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, co",MatchSource.WIKI,root/html604/TGScrollBarElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html
https://root.cern/root/html604/TGSearchDialog.html:469,Availability,avail,available,469,". TGSearchDialog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSearchDialog. class TGSearchDialog: public TGTransientFrame. TGTextEditDialogs. This file defines several dialogs that are used by the TGTextEdit; widget via its associated context popup menu.; The following dialogs are available: TGSearchDialog, TGGotoDialog; and TGPrintDialog. Function Members (Methods); public:. virtual~TGSearchDialog(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); sta",MatchSource.WIKI,root/html604/TGSearchDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchDialog.html
https://root.cern/root/html604/TGSearchDialog.html:4390,Availability,Error,Error,4390,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::G",MatchSource.WIKI,root/html604/TGSearchDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchDialog.html
https://root.cern/root/html604/TGSearchDialog.html:4519,Availability,error,error,4519," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html604/TGSearchDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchDialog.html
https://root.cern/root/html604/TGSearchDialog.html:4603,Availability,error,error,4603,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UIn",MatchSource.WIKI,root/html604/TGSearchDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchDialog.html
https://root.cern/root/html604/TGSearchDialog.html:20668,Availability,mask,mask,20668,,MatchSource.WIKI,root/html604/TGSearchDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchDialog.html
https://root.cern/root/html604/TGSearchDialog.html:11247,Integrability,Message,Message,11247,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGSearchDialog&operator=(const TGSearchDialog&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; ",MatchSource.WIKI,root/html604/TGSearchDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchDialog.html
https://root.cern/root/html604/TGSearchDialog.html:25103,Integrability,message,messages,25103,"AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static TGSearchDialog*fgSearchDialogglobal singleton; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSearchDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, TGSearchType* sstruct = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame); Create a search dialog box. Used to get from the user the required; search instructions. Ret_code is kTRUE when sstruct has been set,; kFALSE otherwise (like when dialog was canceled). ~TGSearchDialog(); Clean up search dialog. void CloseWindow(); Close the dialog. On close the dialog will be deleted and cannot be; re-used. void TextEntered(const char* text); emit signal when search text entered. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process search dialog widget messages. TGSearchDialog *& SearchDialog(); Return global search dialog. TGSearchDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, TGSearchType* sstruct = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame). void SetClose(Bool_t on); { fType->fClose = on; }. Bool_t IsClose() const; { return fType->fClose; }. TGSearchType * GetType() const; { return fType; }. » Author: Fons Rademakers 10/7/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGSearchDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchDialog.html
https://root.cern/root/html604/TGSearchDialog.html:9799,Modifiability,Inherit,InheritsFrom,9799,"TGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tIsClose() const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) cons",MatchSource.WIKI,root/html604/TGSearchDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchDialog.html
https://root.cern/root/html604/TGSearchDialog.html:9865,Modifiability,Inherit,InheritsFrom,9865,"e::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tIsClose() const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::",MatchSource.WIKI,root/html604/TGSearchDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchDialog.html
https://root.cern/root/html604/TGSearchDialog.html:24360,Modifiability,Inherit,Inheritance,24360,"ed for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static TGSearchDialog*fgSearchDialogglobal singleton; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSearchDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, TGSearchType* sstruct = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame); Create a search dialog box. Used to get from the user the required; search instructions. Ret_code is kTRUE when sstruct has been set,; kFALSE otherwise (like when dialog was canceled). ~TGSearchDialog(); Clean up search dialog. void CloseWindow(); Close the dialog. On close the dialog will be deleted and cannot be; re-used. void TextEntered(const char* text); emit signal when search text entered. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process search dialog widget messages. TGSearchDialog *& SearchDialog(); Return global search dialog. TGSearchDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, TGSearchType* sstruct = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame). void SetClose(Bool_t on); { fType->f",MatchSource.WIKI,root/html604/TGSearchDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchDialog.html
https://root.cern/root/html604/TGSearchDialog.html:24373,Modifiability,Inherit,Inherited,24373,"ed for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static TGSearchDialog*fgSearchDialogglobal singleton; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSearchDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, TGSearchType* sstruct = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame); Create a search dialog box. Used to get from the user the required; search instructions. Ret_code is kTRUE when sstruct has been set,; kFALSE otherwise (like when dialog was canceled). ~TGSearchDialog(); Clean up search dialog. void CloseWindow(); Close the dialog. On close the dialog will be deleted and cannot be; re-used. void TextEntered(const char* text); emit signal when search text entered. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process search dialog widget messages. TGSearchDialog *& SearchDialog(); Return global search dialog. TGSearchDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, TGSearchType* sstruct = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame). void SetClose(Bool_t on); { fType->f",MatchSource.WIKI,root/html604/TGSearchDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchDialog.html
https://root.cern/root/html604/TGSearchDialog.html:9509,Security,Hash,Hash,9509,"virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tIsClose() const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBro",MatchSource.WIKI,root/html604/TGSearchDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchDialog.html
https://root.cern/root/html604/TGSearchDialog.html:16191,Testability,Test,TestBit,16191,"virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTextEntered(const char* text)SIGNAL ; TGSearchDialog(const TGSearchDialog&); TGSearchDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, TGSearchType* sstruct = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGSearchDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchDialog.html
https://root.cern/root/html604/TGSearchDialog.html:16230,Testability,Test,TestBits,16230,"virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTextEntered(const char* text)SIGNAL ; TGSearchDialog(const TGSearchDialog&); TGSearchDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, TGSearchType* sstruct = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGSearchDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchDialog.html
https://root.cern/root/html604/TGSearchDialog.html:1655,Usability,Clear,Clear,1655,"dTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char",MatchSource.WIKI,root/html604/TGSearchDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchDialog.html
https://root.cern/root/html604/TGSearchType.html:438,Availability,avail,available,438,". TGSearchType. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSearchType. class TGSearchType. TGTextEditDialogs. This file defines several dialogs that are used by the TGTextEdit; widget via its associated context popup menu.; The following dialogs are available: TGSearchDialog, TGGotoDialog; and TGPrintDialog. Function Members (Methods); public:. ~TGSearchType(); TGSearchType&operator=(const TGSearchType&); TGSearchType(); TGSearchType(const TGSearchType&). Data Members; public:. char*fBuffer; Bool_tfCaseSensitive; Bool_tfClose; Bool_tfDirection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSearchType(); { fDirection = kTRUE; fCaseSensitive = kFALSE; fBuffer = 0; fClose = kTRUE; }. ~TGSearchType(); { if (fBuffer) delete [] fBuffer;}. » Author: Fons Rademakers 10/7/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGSearchType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchType.html
https://root.cern/root/html604/TGSearchType.html:753,Modifiability,Inherit,Inheritance,753,". TGSearchType. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSearchType. class TGSearchType. TGTextEditDialogs. This file defines several dialogs that are used by the TGTextEdit; widget via its associated context popup menu.; The following dialogs are available: TGSearchDialog, TGGotoDialog; and TGPrintDialog. Function Members (Methods); public:. ~TGSearchType(); TGSearchType&operator=(const TGSearchType&); TGSearchType(); TGSearchType(const TGSearchType&). Data Members; public:. char*fBuffer; Bool_tfCaseSensitive; Bool_tfClose; Bool_tfDirection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSearchType(); { fDirection = kTRUE; fCaseSensitive = kFALSE; fBuffer = 0; fClose = kTRUE; }. ~TGSearchType(); { if (fBuffer) delete [] fBuffer;}. » Author: Fons Rademakers 10/7/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGSearchType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchType.html
https://root.cern/root/html604/TGSearchType.html:766,Modifiability,Inherit,Inherited,766,". TGSearchType. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSearchType. class TGSearchType. TGTextEditDialogs. This file defines several dialogs that are used by the TGTextEdit; widget via its associated context popup menu.; The following dialogs are available: TGSearchDialog, TGGotoDialog; and TGPrintDialog. Function Members (Methods); public:. ~TGSearchType(); TGSearchType&operator=(const TGSearchType&); TGSearchType(); TGSearchType(const TGSearchType&). Data Members; public:. char*fBuffer; Bool_tfCaseSensitive; Bool_tfClose; Bool_tfDirection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSearchType(); { fDirection = kTRUE; fCaseSensitive = kFALSE; fBuffer = 0; fClose = kTRUE; }. ~TGSearchType(); { if (fBuffer) delete [] fBuffer;}. » Author: Fons Rademakers 10/7/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGSearchType.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSearchType.html
https://root.cern/root/html604/TGSelectBox.html:4273,Availability,Error,Error,4273,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::G",MatchSource.WIKI,root/html604/TGSelectBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectBox.html
https://root.cern/root/html604/TGSelectBox.html:4402,Availability,error,error,4402," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html604/TGSelectBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectBox.html
https://root.cern/root/html604/TGSelectBox.html:4486,Availability,error,error,4486,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UIn",MatchSource.WIKI,root/html604/TGSelectBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectBox.html
https://root.cern/root/html604/TGSelectBox.html:20230,Availability,mask,mask,20230,,MatchSource.WIKI,root/html604/TGSelectBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectBox.html
https://root.cern/root/html604/TGSelectBox.html:11148,Integrability,Message,Message,11148,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGSelectBox&operator=(const TGSelectBox&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; virtua",MatchSource.WIKI,root/html604/TGSelectBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectBox.html
https://root.cern/root/html604/TGSelectBox.html:24525,Integrability,Message,Message,24525,"e_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGLayoutHints*fBLayoutlayout for cancel button; TGLayoutHints*fBLayout1layout for close button; TGHorizontalFrame*fBfbuttons frame; TGTextButton*fCANCELcancel button; TGTextButton*fDONEclose button; TTVLVEntry*fEntryedited expression entry; TGLabel*fLabellabel; TGLabel*fLabelAliasalias label; TGLayoutHints*fLayoutlayout hints for widgets inside; TStringfOldAliasold alias for edited entry; TGTextEntry*fTetext entry box; TGTextEntry*fTeAliasalias text entry; TTreeViewer*fViewerpointer to tree viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSelectBox(const TGWindow* p, const TGWindow* main, UInt_t w = 10, UInt_t h = 10); TGSelectBox constructor. ~TGSelectBox(); TGSelectBox destructor. void CloseWindow(); close the select box. TGSelectBox * GetInstance(); return the pointer to the instantiated singleton. void GrabPointer(); just focus the cursor inside. void SetLabel(const char* title); Set label of selection box. void SaveText(); save the edited entry true name and alias. void SetEntry(TTVLVEntry* entry); connect one entry. void InsertText(const char* text); Insert text in text entry. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Message interpreter. Bool_t ValidateAlias(); return true if edited alias is not a leading string of other expression aliases. TGSelectBox(const TGWindow* p, const TGWindow* main, UInt_t w = 10, UInt_t h = 10). TTVLVEntry * EditedEntry(); {return fEntry;}. » Last changed: root/treeviewer:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGSelectBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectBox.html
https://root.cern/root/html604/TGSelectBox.html:9697,Modifiability,Inherit,InheritsFrom,9697,"TGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInsertText(const char* text); virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) c",MatchSource.WIKI,root/html604/TGSelectBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectBox.html
https://root.cern/root/html604/TGSelectBox.html:9763,Modifiability,Inherit,InheritsFrom,9763,"e::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInsertText(const char* text); virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFram",MatchSource.WIKI,root/html604/TGSelectBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectBox.html
https://root.cern/root/html604/TGSelectBox.html:23828,Modifiability,Inherit,Inheritance,23828,"*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static TGSelectBox*fgInstancepointer to this select box; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGLayoutHints*fBLayoutlayout for cancel button; TGLayoutHints*fBLayout1layout for close button; TGHorizontalFrame*fBfbuttons frame; TGTextButton*fCANCELcancel button; TGTextButton*fDONEclose button; TTVLVEntry*fEntryedited expression entry; TGLabel*fLabellabel; TGLabel*fLabelAliasalias label; TGLayoutHints*fLayoutlayout hints for widgets inside; TStringfOldAliasold alias for edited entry; TGTextEntry*fTetext entry box; TGTextEntry*fTeAliasalias text entry; TTreeViewer*fViewerpointer to tree viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSelectBox(const TGWindow* p, const TGWindow* main, UInt_t w = 10, UInt_t h = 10); TGSelectBox constructor. ~TGSelectBox(); TGSelectBox destructor. void CloseWindow(); close the select box. TGSelectBox * GetInstance(); return the pointer to the instantiated singleton. void GrabPointer(); just focus the cursor inside. void SetLabel(const char* title); Set label of selection box. void SaveText(); save the edited entry true name and alias. void SetEntry(TTVLVEntry* entry); connect one entry. void InsertText(const char* text); Insert text in text entry. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Message interpreter. Bool_t ValidateAlias(); return true if edited alias is not a leading string of other expression aliases. TGSelectBox(const TGWindow* p, const TGWindow* main, UInt_t w = 10, UInt_t h = 10). TTVLVEntry * EditedEntry(); {return fEntry;}. » Last changed: root/treeviewer:$Id$ » Last generated: 2015-06-02 15:56; ",MatchSource.WIKI,root/html604/TGSelectBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectBox.html
https://root.cern/root/html604/TGSelectBox.html:23841,Modifiability,Inherit,Inherited,23841,"*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static TGSelectBox*fgInstancepointer to this select box; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGLayoutHints*fBLayoutlayout for cancel button; TGLayoutHints*fBLayout1layout for close button; TGHorizontalFrame*fBfbuttons frame; TGTextButton*fCANCELcancel button; TGTextButton*fDONEclose button; TTVLVEntry*fEntryedited expression entry; TGLabel*fLabellabel; TGLabel*fLabelAliasalias label; TGLayoutHints*fLayoutlayout hints for widgets inside; TStringfOldAliasold alias for edited entry; TGTextEntry*fTetext entry box; TGTextEntry*fTeAliasalias text entry; TTreeViewer*fViewerpointer to tree viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSelectBox(const TGWindow* p, const TGWindow* main, UInt_t w = 10, UInt_t h = 10); TGSelectBox constructor. ~TGSelectBox(); TGSelectBox destructor. void CloseWindow(); close the select box. TGSelectBox * GetInstance(); return the pointer to the instantiated singleton. void GrabPointer(); just focus the cursor inside. void SetLabel(const char* title); Set label of selection box. void SaveText(); save the edited entry true name and alias. void SetEntry(TTVLVEntry* entry); connect one entry. void InsertText(const char* text); Insert text in text entry. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Message interpreter. Bool_t ValidateAlias(); return true if edited alias is not a leading string of other expression aliases. TGSelectBox(const TGWindow* p, const TGWindow* main, UInt_t w = 10, UInt_t h = 10). TTVLVEntry * EditedEntry(); {return fEntry;}. » Last changed: root/treeviewer:$Id$ » Last generated: 2015-06-02 15:56; ",MatchSource.WIKI,root/html604/TGSelectBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectBox.html
https://root.cern/root/html604/TGSelectBox.html:9407,Security,Hash,Hash,9407,"virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInsertText(const char* text); virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayout",MatchSource.WIKI,root/html604/TGSelectBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectBox.html
https://root.cern/root/html604/TGSelectBox.html:24553,Security,Validat,ValidateAlias,24553,"e_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGLayoutHints*fBLayoutlayout for cancel button; TGLayoutHints*fBLayout1layout for close button; TGHorizontalFrame*fBfbuttons frame; TGTextButton*fCANCELcancel button; TGTextButton*fDONEclose button; TTVLVEntry*fEntryedited expression entry; TGLabel*fLabellabel; TGLabel*fLabelAliasalias label; TGLayoutHints*fLayoutlayout hints for widgets inside; TStringfOldAliasold alias for edited entry; TGTextEntry*fTetext entry box; TGTextEntry*fTeAliasalias text entry; TTreeViewer*fViewerpointer to tree viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSelectBox(const TGWindow* p, const TGWindow* main, UInt_t w = 10, UInt_t h = 10); TGSelectBox constructor. ~TGSelectBox(); TGSelectBox destructor. void CloseWindow(); close the select box. TGSelectBox * GetInstance(); return the pointer to the instantiated singleton. void GrabPointer(); just focus the cursor inside. void SetLabel(const char* title); Set label of selection box. void SaveText(); save the edited entry true name and alias. void SetEntry(TTVLVEntry* entry); connect one entry. void InsertText(const char* text); Insert text in text entry. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Message interpreter. Bool_t ValidateAlias(); return true if edited alias is not a leading string of other expression aliases. TGSelectBox(const TGWindow* p, const TGWindow* main, UInt_t w = 10, UInt_t h = 10). TTVLVEntry * EditedEntry(); {return fEntry;}. » Last changed: root/treeviewer:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGSelectBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectBox.html
https://root.cern/root/html604/TGSelectBox.html:16096,Testability,Test,TestBit,16096,"dTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGSelectBox(const TGSelectBox&); TGSelectBox(const TGWindow* p, const TGWindow* main, UInt_t w = 10, UInt_t h = 10); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tValidateAlias(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGSelectBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectBox.html
https://root.cern/root/html604/TGSelectBox.html:16135,Testability,Test,TestBits,16135,"dTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGSelectBox(const TGSelectBox&); TGSelectBox(const TGWindow* p, const TGWindow* main, UInt_t w = 10, UInt_t h = 10); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tValidateAlias(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGSelectBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectBox.html
https://root.cern/root/html604/TGSelectBox.html:1512,Usability,Clear,Clear,1512,"dTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char",MatchSource.WIKI,root/html604/TGSelectBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectBox.html
https://root.cern/root/html604/TGSelectedPicture.html:1471,Availability,Error,Error,1471," virtual~TGSelectedPicture(); voidTObject::AbstractMethod(const char* method) const; voidTRefCnt::AddReference(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGPicture::Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption",MatchSource.WIKI,root/html604/TGSelectedPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectedPicture.html
https://root.cern/root/html604/TGSelectedPicture.html:1600,Availability,error,error,1600,"ual~TGSelectedPicture(); voidTObject::AbstractMethod(const char* method) const; voidTRefCnt::AddReference(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGPicture::Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); UInt_tTGPicture::GetHeight() const; virtual const char*TObject::GetIconName() const; Pixmap_tTGPicture::GetMask() const; virtual const char*TGPicture::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixmap_tTGPicture::GetPicture() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; UInt_tTGPicture::GetWidth() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTGPicture:",MatchSource.WIKI,root/html604/TGSelectedPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectedPicture.html
https://root.cern/root/html604/TGSelectedPicture.html:1684,Availability,error,error,1684,"TRefCnt::AddReference(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGPicture::Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); UInt_tTGPicture::GetHeight() const; virtual const char*TObject::GetIconName() const; Pixmap_tTGPicture::GetMask() const; virtual const char*TGPicture::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixmap_tTGPicture::GetPicture() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; UInt_tTGPicture::GetWidth() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTGPicture::Hash() const; static const char*TGPicture::HashName(const char* name, Int_t width, ",MatchSource.WIKI,root/html604/TGSelectedPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectedPicture.html
https://root.cern/root/html604/TGSelectedPicture.html:6625,Availability,mask,mask,6625,"ure(const TGSelectedPicture& gp). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tTGPicture::fAttributespicture attributes; const TGClient*fClientclient to which selected picture belongs; Pixmap_tTGPicture::fMaskpicture mask pixmap; TStringTGPicture::fNamename of picture; Pixmap_tTGPicture::fPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tTGPicture::fScaledkTRUE if picture is scaled; static TGGC*fgSelectedGC. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSelectedPicture(const TGClient* client, const TGPicture* p); Create a ""selected"" looking picture based on the original TGPicture. ~TGSelectedPicture(); Delete selected picture. TGGC & GetSelectedGC(); Return selection graphics context in use. TGSelectedPicture(const TGSelectedPicture& gp); { }. TGSelectedPicture& operator=(const TGSelectedPicture& gp). » Author: Fons Rademakers 01/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGSelectedPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectedPicture.html
https://root.cern/root/html604/TGSelectedPicture.html:2798,Modifiability,Inherit,InheritsFrom,2798,"ethod, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); UInt_tTGPicture::GetHeight() const; virtual const char*TObject::GetIconName() const; Pixmap_tTGPicture::GetMask() const; virtual const char*TGPicture::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixmap_tTGPicture::GetPicture() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; UInt_tTGPicture::GetWidth() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTGPicture::Hash() const; static const char*TGPicture::HashName(const char* name, Int_t width, Int_t height); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTGPicture::IsScaled() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); v",MatchSource.WIKI,root/html604/TGSelectedPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectedPicture.html
https://root.cern/root/html604/TGSelectedPicture.html:2864,Modifiability,Inherit,InheritsFrom,2864,"ect(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); UInt_tTGPicture::GetHeight() const; virtual const char*TObject::GetIconName() const; Pixmap_tTGPicture::GetMask() const; virtual const char*TGPicture::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixmap_tTGPicture::GetPicture() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; UInt_tTGPicture::GetWidth() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTGPicture::Hash() const; static const char*TGPicture::HashName(const char* name, Int_t width, Int_t height); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTGPicture::IsScaled() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObj",MatchSource.WIKI,root/html604/TGSelectedPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectedPicture.html
https://root.cern/root/html604/TGSelectedPicture.html:6865,Modifiability,Inherit,Inheritance,6865,"ure(const TGSelectedPicture& gp). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tTGPicture::fAttributespicture attributes; const TGClient*fClientclient to which selected picture belongs; Pixmap_tTGPicture::fMaskpicture mask pixmap; TStringTGPicture::fNamename of picture; Pixmap_tTGPicture::fPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tTGPicture::fScaledkTRUE if picture is scaled; static TGGC*fgSelectedGC. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSelectedPicture(const TGClient* client, const TGPicture* p); Create a ""selected"" looking picture based on the original TGPicture. ~TGSelectedPicture(); Delete selected picture. TGGC & GetSelectedGC(); Return selection graphics context in use. TGSelectedPicture(const TGSelectedPicture& gp); { }. TGSelectedPicture& operator=(const TGSelectedPicture& gp). » Author: Fons Rademakers 01/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGSelectedPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectedPicture.html
https://root.cern/root/html604/TGSelectedPicture.html:6878,Modifiability,Inherit,Inherited,6878,"ure(const TGSelectedPicture& gp). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tTGPicture::fAttributespicture attributes; const TGClient*fClientclient to which selected picture belongs; Pixmap_tTGPicture::fMaskpicture mask pixmap; TStringTGPicture::fNamename of picture; Pixmap_tTGPicture::fPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tTGPicture::fScaledkTRUE if picture is scaled; static TGGC*fgSelectedGC. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSelectedPicture(const TGClient* client, const TGPicture* p); Create a ""selected"" looking picture based on the original TGPicture. ~TGSelectedPicture(); Delete selected picture. TGGC & GetSelectedGC(); Return selection graphics context in use. TGSelectedPicture(const TGSelectedPicture& gp); { }. TGSelectedPicture& operator=(const TGSelectedPicture& gp). » Author: Fons Rademakers 01/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGSelectedPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectedPicture.html
https://root.cern/root/html604/TGSelectedPicture.html:486,Performance,cache,cache,486,". TGSelectedPicture. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSelectedPicture. class TGSelectedPicture: public TGPicture. TGPicture & TGPicturePool. The TGPicture class implements pictures and icons used in the; different GUI elements and widgets. The TGPicturePool class; implements a TGPicture cache. TGPictures are created, managed and; destroyed by the TGPicturePool. Function Members (Methods); public:. virtual~TGSelectedPicture(); voidTObject::AbstractMethod(const char* method) const; voidTRefCnt::AddReference(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGPicture::Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption",MatchSource.WIKI,root/html604/TGSelectedPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectedPicture.html
https://root.cern/root/html604/TGSelectedPicture.html:2604,Security,Hash,Hash,2604,"= 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); UInt_tTGPicture::GetHeight() const; virtual const char*TObject::GetIconName() const; Pixmap_tTGPicture::GetMask() const; virtual const char*TGPicture::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixmap_tTGPicture::GetPicture() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; UInt_tTGPicture::GetWidth() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTGPicture::Hash() const; static const char*TGPicture::HashName(const char* name, Int_t width, Int_t height); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTGPicture::IsScaled() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete",MatchSource.WIKI,root/html604/TGSelectedPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectedPicture.html
https://root.cern/root/html604/TGSelectedPicture.html:2647,Security,Hash,HashName,2647,"ethod, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); UInt_tTGPicture::GetHeight() const; virtual const char*TObject::GetIconName() const; Pixmap_tTGPicture::GetMask() const; virtual const char*TGPicture::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixmap_tTGPicture::GetPicture() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; UInt_tTGPicture::GetWidth() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTGPicture::Hash() const; static const char*TGPicture::HashName(const char* name, Int_t width, Int_t height); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTGPicture::IsScaled() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[]",MatchSource.WIKI,root/html604/TGSelectedPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectedPicture.html
https://root.cern/root/html604/TGSelectedPicture.html:4907,Testability,Test,TestBit,4907,"t char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGPicture::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); UInt_tTRefCnt::References() const; UInt_tTRefCnt::RemoveReference(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTRefCnt::SetRefCount(UInt_t r); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGSelectedPicture(const TGClient* client, const TGPicture* p); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGSelectedPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectedPicture.html
https://root.cern/root/html604/TGSelectedPicture.html:4946,Testability,Test,TestBits,4946,"t char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGPicture::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); UInt_tTRefCnt::References() const; UInt_tTRefCnt::RemoveReference(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTRefCnt::SetRefCount(UInt_t r); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGSelectedPicture(const TGClient* client, const TGPicture* p); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGSelectedPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectedPicture.html
https://root.cern/root/html604/TGSelectedPicture.html:900,Usability,Clear,Clear,900," virtual~TGSelectedPicture(); voidTObject::AbstractMethod(const char* method) const; voidTRefCnt::AddReference(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGPicture::Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption",MatchSource.WIKI,root/html604/TGSelectedPicture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSelectedPicture.html
https://root.cern/root/html604/TGShapedFrame.html:3902,Availability,Error,Error,3902,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html604/TGShapedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShapedFrame.html
https://root.cern/root/html604/TGShapedFrame.html:4031,Availability,error,error,4031," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const;",MatchSource.WIKI,root/html604/TGShapedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShapedFrame.html
https://root.cern/root/html604/TGShapedFrame.html:4115,Availability,error,error,4115,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() c",MatchSource.WIKI,root/html604/TGShapedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShapedFrame.html
https://root.cern/root/html604/TGShapedFrame.html:17413,Availability,mask,mask,17413,,MatchSource.WIKI,root/html604/TGShapedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShapedFrame.html
https://root.cern/root/html604/TGShapedFrame.html:10090,Integrability,Message,Message,10090,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; virtual voidTGFrame::ProcessedConfigure(Event_t* ",MatchSource.WIKI,root/html604/TGShapedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShapedFrame.html
https://root.cern/root/html604/TGShapedFrame.html:8673,Modifiability,Inherit,InheritsFrom,8673,"irtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html604/TGShapedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShapedFrame.html
https://root.cern/root/html604/TGShapedFrame.html:8739,Modifiability,Inherit,InheritsFrom,8739," Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html604/TGShapedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShapedFrame.html
https://root.cern/root/html604/TGShapedFrame.html:19540,Modifiability,Inherit,Inheritance,19540,"arent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGShapedFrame(const char* fname = 0, const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0); Shaped window default constructor. ~TGShapedFrame(); Destructor. void SavePrimitive(ostream& out, Option_t* option = """"); Save a shaped frame as a C++ statement(s) on output stream out. TGShapedFrame(const TGShapedFrame& ). TGShapedFrame& operator=(const TGShapedFrame& ). void DoRedraw(); {}. const TGPicture GetPicture() const; { return *fBgnd; }. TImage GetImage() const; { return *fImage; }. » Author: Bertrand Bellenot 23/01/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGShapedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShapedFrame.html
https://root.cern/root/html604/TGShapedFrame.html:19553,Modifiability,Inherit,Inherited,19553,"arent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGShapedFrame(const char* fname = 0, const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0); Shaped window default constructor. ~TGShapedFrame(); Destructor. void SavePrimitive(ostream& out, Option_t* option = """"); Save a shaped frame as a C++ statement(s) on output stream out. TGShapedFrame(const TGShapedFrame& ). TGShapedFrame& operator=(const TGShapedFrame& ). void DoRedraw(); {}. const TGPicture GetPicture() const; { return *fBgnd; }. TImage GetImage() const; { return *fImage; }. » Author: Bertrand Bellenot 23/01/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGShapedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShapedFrame.html
https://root.cern/root/html604/TGShapedFrame.html:8383,Security,Hash,Hash,8383,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html604/TGShapedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShapedFrame.html
https://root.cern/root/html604/TGShapedFrame.html:14020,Testability,Test,TestBit,14020,"rtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGShapedFrame(const char* fname = 0, const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGShapedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShapedFrame.html
https://root.cern/root/html604/TGShapedFrame.html:14059,Testability,Test,TestBits,14059,"rtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGShapedFrame(const char* fname = 0, const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGShapedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShapedFrame.html
https://root.cern/root/html604/TGShapedFrame.html:1228,Usability,Clear,Clear,1228," virtual~TGShapedFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = ",MatchSource.WIKI,root/html604/TGShapedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShapedFrame.html
https://root.cern/root/html604/TGShutter.html:4259,Availability,Error,Error,4259,"ong_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableItem(const char* name, Bool_t on = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html604/TGShutter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutter.html
https://root.cern/root/html604/TGShutter.html:4388,Availability,error,error,4388,"am); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableItem(const char* name, Bool_t on = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*",MatchSource.WIKI,root/html604/TGShutter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutter.html
https://root.cern/root/html604/TGShutter.html:4472,Availability,error,error,4472,"char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableItem(const char* name, Bool_t on = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() const; virtual Opti",MatchSource.WIKI,root/html604/TGShutter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutter.html
https://root.cern/root/html604/TGShutter.html:17938,Availability,down,down,17938,,MatchSource.WIKI,root/html604/TGShutter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutter.html
https://root.cern/root/html604/TGShutter.html:18146,Availability,mask,mask,18146,,MatchSource.WIKI,root/html604/TGShutter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutter.html
https://root.cern/root/html604/TGShutter.html:10424,Integrability,Message,Message,10424,"te() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidLayout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; virtual voidTGFrame::ProcessedConfigure(Event_t* ",MatchSource.WIKI,root/html604/TGShutter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutter.html
https://root.cern/root/html604/TGShutter.html:20981,Integrability,message,messages,20981,"fault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGShutter(const TGWindow* p = 0, UInt_t options = kSunkenFrame); Create shutter frame. ~TGShutter(); Cleanup shutter widget. void AddItem(TGShutterItem* item); Add shutter item to shutter frame. void RemoveItem(const char* name); Remove item from shutter. void RemovePage(); Remove selected page. void RenamePage(const char* name); Rename selected page. TGShutterItem * AddPage(const char* item = ""Page""); Add new page (shutter item). Bool_t ProcessMessage(Long_t cmd, Long_t parm1, Long_t parm2); Handle shutter messages. Bool_t HandleTimer(TTimer* t); Shutter item animation. void Layout(); Layout shutter items. void SetSelectedItem(TGShutterItem* item); Set item to be the currently open shutter item. void SetSelectedItem(const char* name); Set item to be the currently open shutter item. void EnableItem(const char* name, Bool_t on = kTRUE); Disable/enbale shutter item. TGShutterItem * GetItem(const char* name); returns a shutter item by name (name is hot string of shutter item). TGDimension GetDefaultSize() const; Return the default / minimal size of the widget. void SetDefaultSize(UInt_t w, UInt_t h); Set the default / minimal size of the widget. void SavePrimitive(ostream& out, Option_t* option = """"); Save a shutter widget as a C++ statement(s) on output stream out. TGShutterItem& operator=(const TGShutter& ). void Selected(); { Emit("" Selected()""); }. TGShutter(const TGShutter& ). void SetLayoutManager(TGLayoutManager* ); { }. TGShutterItem * GetSelectedIt",MatchSource.WIKI,root/html604/TGShutter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutter.html
https://root.cern/root/html604/TGShutter.html:9025,Modifiability,Inherit,InheritsFrom,9025,"ame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tHandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html604/TGShutter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutter.html
https://root.cern/root/html604/TGShutter.html:9091,Modifiability,Inherit,InheritsFrom,9091," virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tHandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidLayout(); virtual voidTGWindow::LowerWindow(); vi",MatchSource.WIKI,root/html604/TGShutter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutter.html
https://root.cern/root/html604/TGShutter.html:20391,Modifiability,Inherit,Inheritance,20391,"_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGShutter(const TGWindow* p = 0, UInt_t options = kSunkenFrame); Create shutter frame. ~TGShutter(); Cleanup shutter widget. void AddItem(TGShutterItem* item); Add shutter item to shutter frame. void RemoveItem(const char* name); Remove item from shutter. void RemovePage(); Remove selected page. void RenamePage(const char* name); Rename selected page. TGShutterItem * AddPage(const char* item = ""Page""); Add new page (shutter item). Bool_t ProcessMessage(Long_t cmd, Long_t parm1, Long_t parm2); Handle shutter messages. Bool_t HandleTimer(TTimer* t); Shutter item animation. void Layout(); Layout shutter items. void SetSelectedItem(TGShutterItem* item); Set item to be the currently open shutter item. void SetSelectedItem(const char* name); Set item to be the currently open shutter item. void EnableItem(const char* name, Bool_t on = kTRUE); Disable/enbale shutter item. TGShutterItem * GetItem(const char* name); returns a shutter item by nam",MatchSource.WIKI,root/html604/TGShutter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutter.html
https://root.cern/root/html604/TGShutter.html:20404,Modifiability,Inherit,Inherited,20404,"_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGShutter(const TGWindow* p = 0, UInt_t options = kSunkenFrame); Create shutter frame. ~TGShutter(); Cleanup shutter widget. void AddItem(TGShutterItem* item); Add shutter item to shutter frame. void RemoveItem(const char* name); Remove item from shutter. void RemovePage(); Remove selected page. void RenamePage(const char* name); Rename selected page. TGShutterItem * AddPage(const char* item = ""Page""); Add new page (shutter item). Bool_t ProcessMessage(Long_t cmd, Long_t parm1, Long_t parm2); Handle shutter messages. Bool_t HandleTimer(TTimer* t); Shutter item animation. void Layout(); Layout shutter items. void SetSelectedItem(TGShutterItem* item); Set item to be the currently open shutter item. void SetSelectedItem(const char* name); Set item to be the currently open shutter item. void EnableItem(const char* name, Bool_t on = kTRUE); Disable/enbale shutter item. TGShutterItem * GetItem(const char* name); returns a shutter item by nam",MatchSource.WIKI,root/html604/TGShutter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutter.html
https://root.cern/root/html604/TGShutter.html:8735,Security,Hash,Hash,8735,"om_t, Int_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tHandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html604/TGShutter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutter.html
https://root.cern/root/html604/TGShutter.html:14647,Testability,Test,TestBit,14647,"t_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidSetLayoutManager(TGLayoutManager*); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetSelectedItem(TGShutterItem* item); virtual voidSetSelectedItem(const char* name); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGShutter(const TGWindow* p = 0, UInt_t options = kSunkenFrame); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGShutter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutter.html
https://root.cern/root/html604/TGShutter.html:14686,Testability,Test,TestBits,14686,"t_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidSetLayoutManager(TGLayoutManager*); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetSelectedItem(TGShutterItem* item); virtual voidSetSelectedItem(const char* name); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGShutter(const TGWindow* p = 0, UInt_t options = kSunkenFrame); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGShutter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutter.html
https://root.cern/root/html604/TGShutter.html:1524,Usability,Clear,Clear,1524," virtual~TGShutter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidAddItem(TGShutterItem* item); virtual TGShutterItem*AddPage(const char* item = ""Page"")MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connec",MatchSource.WIKI,root/html604/TGShutter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutter.html
https://root.cern/root/html604/TGShutterItem.html:4177,Availability,Error,Error,4177,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGButton*GetButton() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; TGFrame*GetContainer() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); vi",MatchSource.WIKI,root/html604/TGShutterItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutterItem.html
https://root.cern/root/html604/TGShutterItem.html:4306,Availability,error,error,4306," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGButton*GetButton() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; TGFrame*GetContainer() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensio",MatchSource.WIKI,root/html604/TGShutterItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutterItem.html
https://root.cern/root/html604/TGShutterItem.html:4390,Availability,error,error,4390,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGButton*GetButton() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; TGFrame*GetContainer() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaul",MatchSource.WIKI,root/html604/TGShutterItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutterItem.html
https://root.cern/root/html604/TGShutterItem.html:18157,Availability,mask,mask,18157,,MatchSource.WIKI,root/html604/TGShutterItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutterItem.html
https://root.cern/root/html604/TGShutterItem.html:10474,Integrability,Message,Message,10474,"tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; virtual voidTGFrame::ProcessedConfigure(Event_t* ",MatchSource.WIKI,root/html604/TGShutterItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutterItem.html
https://root.cern/root/html604/TGShutterItem.html:9022,Modifiability,Inherit,InheritsFrom,9022,"dleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) ",MatchSource.WIKI,root/html604/TGShutterItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutterItem.html
https://root.cern/root/html604/TGShutterItem.html:9088,Modifiability,Inherit,InheritsFrom,9088,"t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFra",MatchSource.WIKI,root/html604/TGShutterItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutterItem.html
https://root.cern/root/html604/TGShutterItem.html:20519,Modifiability,Inherit,Inheritance,20519,"idget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGShutterItem(const TGWindow* p = 0, TGHotString* s = 0, Int_t id = -1, UInt_t options = 0); Create a shutter item. ~TGShutterItem(); Clan up shutter item. void SavePrimitive(ostream& out, Option_t* option = """"); Save a shutter item widget as a C++ statement(s) on output stream out. TGShutterItem(const TGShutterItem& ). TGShutterItem& operator=(const TGShutterItem& ). TGButton * GetButton() const; { return fButton; }. TGFrame * GetContainer() const; { return fCanvas->GetContainer(); }. void Selected(); { Emit("" Selected()""); }. » Author: Fons Rademakers 18/9/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGShutterItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutterItem.html
https://root.cern/root/html604/TGShutterItem.html:20532,Modifiability,Inherit,Inherited,20532,"idget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGShutterItem(const TGWindow* p = 0, TGHotString* s = 0, Int_t id = -1, UInt_t options = 0); Create a shutter item. ~TGShutterItem(); Clan up shutter item. void SavePrimitive(ostream& out, Option_t* option = """"); Save a shutter item widget as a C++ statement(s) on output stream out. TGShutterItem(const TGShutterItem& ). TGShutterItem& operator=(const TGShutterItem& ). TGButton * GetButton() const; { return fButton; }. TGFrame * GetContainer() const; { return fCanvas->GetContainer(); }. void Selected(); { Emit("" Selected()""); }. » Author: Fons Rademakers 18/9/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGShutterItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutterItem.html
https://root.cern/root/html604/TGShutterItem.html:8732,Security,Hash,Hash,8732,"siteFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayou",MatchSource.WIKI,root/html604/TGShutterItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutterItem.html
https://root.cern/root/html604/TGShutterItem.html:14490,Testability,Test,TestBit,14490,"oidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGShutterItem(const TGWindow* p = 0, TGHotString* s = 0, Int_t id = -1, UInt_t options = 0); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGShutterItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutterItem.html
https://root.cern/root/html604/TGShutterItem.html:14529,Testability,Test,TestBits,14529,"oidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGShutterItem(const TGWindow* p = 0, TGHotString* s = 0, Int_t id = -1, UInt_t options = 0); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGShutterItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutterItem.html
https://root.cern/root/html604/TGShutterItem.html:1503,Usability,Clear,Clear,1503," virtual~TGShutterItem(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_",MatchSource.WIKI,root/html604/TGShutterItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutterItem.html
https://root.cern/root/html604/TGShutterItem.html:15329,Usability,Clear,ClearFlags,15329,"Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGShutterItem&operator=(const TGShutterItem&); TGShutterItem(const TGShutterItem&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow::EEditModeTG",MatchSource.WIKI,root/html604/TGShutterItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGShutterItem.html
https://root.cern/root/html604/TGSimpleTable.html:4233,Availability,Error,Error,4233,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual const TGTableCell*TGTable::FindCell(TGString label) const; virtual TGTableCell*TGTable::FindCell(TGString label); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TGCanvas*TGTable::GetCanvas(); virtual const TGTableCell*TGTable::GetCell(UInt_t i, UInt_t j) con",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:4362,Availability,error,error,4362," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual const TGTableCell*TGTable::FindCell(TGString label) const; virtual TGTableCell*TGTable::FindCell(TGString label); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TGCanvas*TGTable::GetCanvas(); virtual const TGTableCell*TGTable::GetCell(UInt_t i, UInt_t j) const; virtual TGTableCell*TGTable::GetCell(UInt_t i, UInt_t j); virtual const TGTableHeaderFrame*TGTable::GetCHdrFrame(); TGClient*",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:4446,Availability,error,error,4446,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual const TGTableCell*TGTable::FindCell(TGString label) const; virtual TGTableCell*TGTable::FindCell(TGString label); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TGCanvas*TGTable::GetCanvas(); virtual const TGTableCell*TGTable::GetCell(UInt_t i, UInt_t j) const; virtual TGTableCell*TGTable::GetCell(UInt_t i, UInt_t j); virtual const TGTableHeaderFrame*TGTable::GetCHdrFrame(); TGClient*TGObject::GetClient() const; virtual TObjArray*TGTable::GetColumn(UInt_t columns); v",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:21546,Availability,mask,mask,21546,"ame background color; Int_tTGFrame::fBorderWidthframe border width; TGHorizontalFrame*TGTable::fBottomFrameFrame that contains the bottom part; TGHorizontalFrame*TGTable::fButtonFrameContains the buttons; TGTableHeaderFrame*TGTable::fCHdrFrameFrame that contains the row headers; TList*TGTable::fCHdrHintsList; TGCanvas*TGTable::fCanvasCanvas that will contains the cells; UInt_tTGTable::fCellHeightDefault cell width; TList*TGTable::fCellHintsList; UInt_tTGTable::fCellWidthDefault cell width; TGClient*TGObject::fClientConnection to display server; TObjArray*TGTable::fColumnHeadersArray of column headers; TStringTGWidget::fCommandcommand to be executed; TTableRange*TGTable::fCurrentRangeRange of data currently loaded; Int_tTGFrame::fDNDStateEDNDFlags; TTableRange*TGTable::fDataRangeFull range of the data set; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; Pixel_tTGTable::fEvenRowBackgroundBackground color for even numbered rows; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; TGTextEntry*TGTable::fFirstCellEntryTextEntry for the range frame; TGLabel*TGTable::fFirstCellLabelLabel for the range frame; TGTextButton*TGTable::fGotoButtonButton to goto a new range; TTableRange*TGTable::fGotoRangeRange used by Goto frame; Pixel_tTGTable::fHeaderBackgroundBackground color for headers; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; TVirtualTableInterface*TGTable::fInterfaceInterface to the data source; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TList*TGTable::fMainHintsListList for all hints used in the main table frame; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:16879,Deployability,Update,Update,16879,"::SetHeaderBackground(Pixel_t pixel); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGTable::SetOddRowBackground(Pixel_t pixel); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGTable::Show(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGSimpleTable(const TGSimpleTable&); TGSimpleTable(TGWindow* p, Int_t id, Double_t** data, UInt_t nrows, UInt_t ncolumns); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGTable::Update(); virtual voidTGTable::UpdateView(); virtual voidTObject::UseCurrentStyle(); virtual voidTGTable::UserRangeChange(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:16910,Deployability,Update,UpdateView,16910,"::SetHeaderBackground(Pixel_t pixel); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGTable::SetOddRowBackground(Pixel_t pixel); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGTable::Show(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGSimpleTable(const TGSimpleTable&); TGSimpleTable(TGWindow* p, Int_t id, Double_t** data, UInt_t nrows, UInt_t ncolumns); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGTable::Update(); virtual voidTGTable::UpdateView(); virtual voidTObject::UseCurrentStyle(); virtual voidTGTable::UserRangeChange(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:19071,Deployability,Update,UpdateHeaders,19071,"l Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGTable::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGTable::Expand(UInt_t nrows, UInt_t ncolumns); virtual voidTGTable::ExpandColumns(UInt_t ncolumns); virtual voidTGTable::ExpandRows(UInt_t nrows); virtual UInt_tTGTable::GetCHdrWidth() const; static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual UInt_tTGTable::GetRHdrHeight() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTGTable::Init(); voidTObject::MakeZombie(); virtual voidTGTable::ResizeTable(UInt_t nrows, UInt_t ncolumns); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGTable::SetInterface(TVirtualTableInterface* interface, UInt_t nrows = 50, UInt_t ncolumns = 20); virtual voidTGTable::Shrink(UInt_t nrows, UInt_t ncolumns); virtual voidTGTable::ShrinkColumns(UInt_t ncolumns); virtual voidTGTable::ShrinkRows(UInt_t nrows); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidTGTable::UpdateHeaders(EHeaderType type); virtual voidTGTable::UpdateRangeFrame(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTO",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:19125,Deployability,Update,UpdateRangeFrame,19125,"l Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGTable::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGTable::Expand(UInt_t nrows, UInt_t ncolumns); virtual voidTGTable::ExpandColumns(UInt_t ncolumns); virtual voidTGTable::ExpandRows(UInt_t nrows); virtual UInt_tTGTable::GetCHdrWidth() const; static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual UInt_tTGTable::GetRHdrHeight() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTGTable::Init(); voidTObject::MakeZombie(); virtual voidTGTable::ResizeTable(UInt_t nrows, UInt_t ncolumns); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGTable::SetInterface(TVirtualTableInterface* interface, UInt_t nrows = 50, UInt_t ncolumns = 20); virtual voidTGTable::Shrink(UInt_t nrows, UInt_t ncolumns); virtual voidTGTable::ShrinkColumns(UInt_t ncolumns); virtual voidTGTable::ShrinkRows(UInt_t nrows); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidTGTable::UpdateHeaders(EHeaderType type); virtual voidTGTable::UpdateRangeFrame(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTO",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:24146,Deployability,update,update,24146, options; const TGWindow*TGWindow::fParentParent window; TGTextButton*TGTable::fPrevButtonButton to view previous chunk; TGTableHeaderFrame*TGTable::fRHdrFrameFrame that contains the row headers; TList*TGTable::fRHdrHintsList; TGTextEntry*TGTable::fRangeEntryTextEntry for the range frame; TGHorizontalFrame*TGTable::fRangeFrameFrame that contains the top part; TGLabel*TGTable::fRangeLabelLabel for the range frame; Bool_tTGTable::fReadOnlyTable readonly state; TObjArray*TGTable::fRowHeadersArray of row headers; TObjArray*TGTable::fRowsArray of rows; Pixel_tTGTable::fSelectColorSelect Color; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTGTable::fTModeText justify mode; TGTableFrame*TGTable::fTableFrameContainer for the frames; TGTableHeader*TGTable::fTableHeaderTop left element of the table; TGHorizontalFrame*TGTable::fTopExtraFrameDev idea; TGHorizontalFrame*TGTable::fTopFrameFrame that contains the top part; TGTextButton*TGTable::fUpdateButtonButton to update current view; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTG,MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:528,Integrability,interface,interface,528,". TGSimpleTable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSimpleTable. class TGSimpleTable: public TGTable. TGSimpleTable. To provide a simple class to visualize an array of doubles, the class; TGSimpleTable is provided. TGSimpleTable creates it's own; TGSimpleTableInterface. For more information, see the documentation of; TGTable. The interface is accesible through the GetInterface() method. Function Members (Methods); public:. virtual~TGSimpleTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* s",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:11935,Integrability,Message,Message,11935,"tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual voidTGTable::MoveTable(Int_t rows, Int_t columns); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual voidTGTable::NextChunk(); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual TGTableCell*TGTable::operator()(UInt_t row, UInt_t column); TGSimpleTable&operator=(const TGS",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:18779,Integrability,interface,interface,18779,"l Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGTable::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGTable::Expand(UInt_t nrows, UInt_t ncolumns); virtual voidTGTable::ExpandColumns(UInt_t ncolumns); virtual voidTGTable::ExpandRows(UInt_t nrows); virtual UInt_tTGTable::GetCHdrWidth() const; static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual UInt_tTGTable::GetRHdrHeight() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTGTable::Init(); voidTObject::MakeZombie(); virtual voidTGTable::ResizeTable(UInt_t nrows, UInt_t ncolumns); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGTable::SetInterface(TVirtualTableInterface* interface, UInt_t nrows = 50, UInt_t ncolumns = 20); virtual voidTGTable::Shrink(UInt_t nrows, UInt_t ncolumns); virtual voidTGTable::ShrinkColumns(UInt_t ncolumns); virtual voidTGTable::ShrinkRows(UInt_t nrows); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidTGTable::UpdateHeaders(EHeaderType type); virtual voidTGTable::UpdateRangeFrame(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTO",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:10483,Modifiability,Inherit,InheritsFrom,10483,"dleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) ",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:10549,Modifiability,Inherit,InheritsFrom,10549,"t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFra",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:25316,Modifiability,Inherit,Inheritance,25316,"element of the table; TGHorizontalFrame*TGTable::fTopExtraFrameDev idea; TGHorizontalFrame*TGTable::fTopFrameFrame that contains the top part; TGTextButton*TGTable::fUpdateButtonButton to update current view; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSimpleTable(TGWindow* p, Int_t id, Double_t** data, UInt_t nrows, UInt_t ncolumns); TGSimpleTable constuctor. ~TGSimpleTable(); TGSimpleTable destructor. TGSimpleTable(TGWindow* p, Int_t id, Double_t** data, UInt_t nrows, UInt_t ncolumns). » Author: Roel Aaij 21/07/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: Tue Jun 2 15:56:55 2015 » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:25329,Modifiability,Inherit,Inherited,25329,"element of the table; TGHorizontalFrame*TGTable::fTopExtraFrameDev idea; TGHorizontalFrame*TGTable::fTopFrameFrame that contains the top part; TGTextButton*TGTable::fUpdateButtonButton to update current view; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSimpleTable(TGWindow* p, Int_t id, Double_t** data, UInt_t nrows, UInt_t ncolumns); TGSimpleTable constuctor. ~TGSimpleTable(); TGSimpleTable destructor. TGSimpleTable(TGWindow* p, Int_t id, Double_t** data, UInt_t nrows, UInt_t ncolumns). » Author: Roel Aaij 21/07/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: Tue Jun 2 15:56:55 2015 » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:21264,Performance,load,loaded,21264,,MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:10193,Security,Hash,Hash,10193,"siteFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayou",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:16524,Testability,Test,TestBit,16524,"::SetHeaderBackground(Pixel_t pixel); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGTable::SetOddRowBackground(Pixel_t pixel); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGTable::Show(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGSimpleTable(const TGSimpleTable&); TGSimpleTable(TGWindow* p, Int_t id, Double_t** data, UInt_t nrows, UInt_t ncolumns); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGTable::Update(); virtual voidTGTable::UpdateView(); virtual voidTObject::UseCurrentStyle(); virtual voidTGTable::UserRangeChange(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:16563,Testability,Test,TestBits,16563,"::SetHeaderBackground(Pixel_t pixel); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGTable::SetOddRowBackground(Pixel_t pixel); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGTable::Show(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGSimpleTable(const TGSimpleTable&); TGSimpleTable(TGWindow* p, Int_t id, Double_t** data, UInt_t nrows, UInt_t ncolumns); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGTable::Update(); virtual voidTGTable::UpdateView(); virtual voidTObject::UseCurrentStyle(); virtual voidTGTable::UserRangeChange(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:326,Usability,simpl,simple,326,". TGSimpleTable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSimpleTable. class TGSimpleTable: public TGTable. TGSimpleTable. To provide a simple class to visualize an array of doubles, the class; TGSimpleTable is provided. TGSimpleTable creates it's own; TGSimpleTableInterface. For more information, see the documentation of; TGTable. The interface is accesible through the GetInterface() method. Function Members (Methods); public:. virtual~TGSimpleTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* s",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:1559,Usability,Clear,Clear,1559," virtual~TGSimpleTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* s",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTable.html:17499,Usability,Clear,ClearFlags,17499,"l Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGTable::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGTable::Expand(UInt_t nrows, UInt_t ncolumns); virtual voidTGTable::ExpandColumns(UInt_t ncolumns); virtual voidTGTable::ExpandRows(UInt_t nrows); virtual UInt_tTGTable::GetCHdrWidth() const; static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual UInt_tTGTable::GetRHdrHeight() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTGTable::Init(); voidTObject::MakeZombie(); virtual voidTGTable::ResizeTable(UInt_t nrows, UInt_t ncolumns); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGTable::SetInterface(TVirtualTableInterface* interface, UInt_t nrows = 50, UInt_t ncolumns = 20); virtual voidTGTable::Shrink(UInt_t nrows, UInt_t ncolumns); virtual voidTGTable::ShrinkColumns(UInt_t ncolumns); virtual voidTGTable::ShrinkRows(UInt_t nrows); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidTGTable::UpdateHeaders(EHeaderType type); virtual voidTGTable::UpdateRangeFrame(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTO",MatchSource.WIKI,root/html604/TGSimpleTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTable.html
https://root.cern/root/html604/TGSimpleTableInterface.html:454,Integrability,interface,interface,454,". TGSimpleTableInterface. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSimpleTableInterface. class TGSimpleTableInterface: public TVirtualTableInterface. TGSimpleTableInterface. TGSimpleTableInterface is a very simple implementation of a; TVirtualTableInterface. This interface provides a TGTable with data; from a two dimensional array of doubles in memory. It is mostly; meant as an example implementation for a TVirtualTableInterface. Function Members (Methods); public:. virtual~TGSimpleTableInterface(); static TClass*Class(); virtual const char*GetColumnHeader(UInt_t column); virtual UInt_tGetNColumns(); virtual UInt_tGetNRows(); virtual const char*GetRowHeader(UInt_t row); virtual Double_tGetValue(UInt_t row, UInt_t column); virtual const char*GetValueAsString(UInt_t row, UInt_t column); virtual TClass*IsA() const; TGSimpleTableInterface&operator=(const TGSimpleTableInterface&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGSimpleTableInterface(const TGSimpleTableInterface&); TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2). Data Members; private:. Double_t**fDataPointer to 2 dimensional array of Double_t; UInt_tfNColumns; UInt_tfNRows. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2); TGSimpleTableInterfac constructor. ~TGSimpleTableInterface(); TGSimpleTableInterface destructor. Double_t GetValue(UInt_t row, UInt_t column); Return the value of the double in row,column of the data. const char * GetValueAsString(UInt_t row, UInt_t column); Return the value of the double in row,column of the data as a string. const char * GetRowHeader(",MatchSource.WIKI,root/html604/TGSimpleTableInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTableInterface.html
https://root.cern/root/html604/TGSimpleTableInterface.html:1489,Modifiability,Inherit,Inheritance,1489,"al array of doubles in memory. It is mostly; meant as an example implementation for a TVirtualTableInterface. Function Members (Methods); public:. virtual~TGSimpleTableInterface(); static TClass*Class(); virtual const char*GetColumnHeader(UInt_t column); virtual UInt_tGetNColumns(); virtual UInt_tGetNRows(); virtual const char*GetRowHeader(UInt_t row); virtual Double_tGetValue(UInt_t row, UInt_t column); virtual const char*GetValueAsString(UInt_t row, UInt_t column); virtual TClass*IsA() const; TGSimpleTableInterface&operator=(const TGSimpleTableInterface&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGSimpleTableInterface(const TGSimpleTableInterface&); TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2). Data Members; private:. Double_t**fDataPointer to 2 dimensional array of Double_t; UInt_tfNColumns; UInt_tfNRows. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2); TGSimpleTableInterfac constructor. ~TGSimpleTableInterface(); TGSimpleTableInterface destructor. Double_t GetValue(UInt_t row, UInt_t column); Return the value of the double in row,column of the data. const char * GetValueAsString(UInt_t row, UInt_t column); Return the value of the double in row,column of the data as a string. const char * GetRowHeader(UInt_t row); Return a name for the header at row. const char * GetColumnHeader(UInt_t column); Return a name for the header at column. TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2). UInt_t GetNRows(); { return fNRows; }. UInt_t GetNColumns(); { return fNColumns; }. » Author: Roel Aaij 21/07/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: Tue Jun 2 15:56:56 2015 » Last generated: 2015-06-02 15:56; This page has been automatically generated. For",MatchSource.WIKI,root/html604/TGSimpleTableInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTableInterface.html
https://root.cern/root/html604/TGSimpleTableInterface.html:1502,Modifiability,Inherit,Inherited,1502,"al array of doubles in memory. It is mostly; meant as an example implementation for a TVirtualTableInterface. Function Members (Methods); public:. virtual~TGSimpleTableInterface(); static TClass*Class(); virtual const char*GetColumnHeader(UInt_t column); virtual UInt_tGetNColumns(); virtual UInt_tGetNRows(); virtual const char*GetRowHeader(UInt_t row); virtual Double_tGetValue(UInt_t row, UInt_t column); virtual const char*GetValueAsString(UInt_t row, UInt_t column); virtual TClass*IsA() const; TGSimpleTableInterface&operator=(const TGSimpleTableInterface&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGSimpleTableInterface(const TGSimpleTableInterface&); TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2). Data Members; private:. Double_t**fDataPointer to 2 dimensional array of Double_t; UInt_tfNColumns; UInt_tfNRows. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2); TGSimpleTableInterfac constructor. ~TGSimpleTableInterface(); TGSimpleTableInterface destructor. Double_t GetValue(UInt_t row, UInt_t column); Return the value of the double in row,column of the data. const char * GetValueAsString(UInt_t row, UInt_t column); Return the value of the double in row,column of the data as a string. const char * GetRowHeader(UInt_t row); Return a name for the header at row. const char * GetColumnHeader(UInt_t column); Return a name for the header at column. TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2). UInt_t GetNRows(); { return fNRows; }. UInt_t GetNColumns(); { return fNColumns; }. » Author: Roel Aaij 21/07/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: Tue Jun 2 15:56:56 2015 » Last generated: 2015-06-02 15:56; This page has been automatically generated. For",MatchSource.WIKI,root/html604/TGSimpleTableInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTableInterface.html
https://root.cern/root/html604/TGSimpleTableInterface.html:397,Usability,simpl,simple,397,". TGSimpleTableInterface. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSimpleTableInterface. class TGSimpleTableInterface: public TVirtualTableInterface. TGSimpleTableInterface. TGSimpleTableInterface is a very simple implementation of a; TVirtualTableInterface. This interface provides a TGTable with data; from a two dimensional array of doubles in memory. It is mostly; meant as an example implementation for a TVirtualTableInterface. Function Members (Methods); public:. virtual~TGSimpleTableInterface(); static TClass*Class(); virtual const char*GetColumnHeader(UInt_t column); virtual UInt_tGetNColumns(); virtual UInt_tGetNRows(); virtual const char*GetRowHeader(UInt_t row); virtual Double_tGetValue(UInt_t row, UInt_t column); virtual const char*GetValueAsString(UInt_t row, UInt_t column); virtual TClass*IsA() const; TGSimpleTableInterface&operator=(const TGSimpleTableInterface&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGSimpleTableInterface(const TGSimpleTableInterface&); TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2). Data Members; private:. Double_t**fDataPointer to 2 dimensional array of Double_t; UInt_tfNColumns; UInt_tfNRows. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSimpleTableInterface(Double_t** data, UInt_t nrows = 2, UInt_t ncolumns = 2); TGSimpleTableInterfac constructor. ~TGSimpleTableInterface(); TGSimpleTableInterface destructor. Double_t GetValue(UInt_t row, UInt_t column); Return the value of the double in row,column of the data. const char * GetValueAsString(UInt_t row, UInt_t column); Return the value of the double in row,column of the data as a string. const char * GetRowHeader(",MatchSource.WIKI,root/html604/TGSimpleTableInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSimpleTableInterface.html
https://root.cern/root/html604/TGSlider.html:1257,Availability,avail,available,1257,". class TGSlider: public TGFrame, public TGWidget. TGSlider, TGVSlider and TGHSlider. Slider widgets allow easy selection of a range.; Sliders can be either horizontal or vertical oriented and there is; a choice of two different slider types and three different types; of tick marks. TGSlider is an abstract base class. Use the concrete TGVSlider and; TGHSlider. Dragging the slider will generate the event:; kC_VSLIDER, kSL_POS, slider id, position (for vertical slider); kC_HSLIDER, kSL_POS, slider id, position (for horizontal slider). Pressing the mouse will generate the event:; kC_VSLIDER, kSL_PRESS, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_PRESS, slider id, 0 (for horizontal slider). Releasing the mouse will generate the event:; kC_VSLIDER, kSL_RELEASE, slider id, 0 (for vertical slider); kC_HSLIDER, kSL_RELEASE, slider id, 0 (for horizontal slider). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGSlider(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); virtual voidChangeSliderPic(const char* name); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Co",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:4748,Availability,Error,Error,4748,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDe",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:4877,Availability,error,error,4877," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGF",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:4961,Availability,error,error,4961,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() const; virtual Option_t*TObject::GetDrawOption() const; virtual ",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:17967,Availability,mask,mask,17967,,MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:13098,Deployability,TOGGLE,TOGGLE,13098,"(const char* filename = """", Option_t* option = """") const; virtual voidTGFrame::SavePrimitive(ostream& out, Option_t* option = """"); voidTGFrame::SaveUserColor(ostream& out, Option_t*); virtual voidTGFrame::SendMessage(const TGWindow* w, Long_t msg, Long_t parm1, Long_t parm2); virtual voidTGFrame::SetBackgroundColor(Pixel_t back); virtual voidTGWindow::SetBackgroundPixmap(Pixmap_t pixmap); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGFrame::SetCleanup(Int_t = kLocalCleanup); virtual voidTGWidget::SetCommand(const char* command); voidTGFrame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidSetEnabled(Bool_t flag = kTRUE)TOGGLE GETTER ; virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPosition(Int_t pos)MENU ; virtual voidSetRange(Int_t min, Int_t max)MENU ; virtual voidSetScale(Int_t scale)MENU ; virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetState(Bool_t state); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberIn",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:21526,Deployability,Release,Released,21526,"utton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSlider(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t type = kSlider1 | kScaleBoth, Int_t id = -1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Slider constructor. void CreateDisabledPicture(); Creates disabled picture. void SetState(Bool_t state); Set state of widget. If kTRUE=enabled, kFALSE=disabled. TString GetTypeString() const; Returns the slider type as a string - used in SavePrimitive(). TGSlider(const TGSlider& ). TGSlider& operator=(const TGSlider& ). virtual ~TGSlider(); { }. Bool_t HandleButton(Event_t* event). Bool_t HandleConfigureNotify(Event_t* event). Bool_t HandleMotion(Event_t* event). void SetEnabled(Bool_t flag = kTRUE); { SetState( flag ); }. void SetScale(Int_t scale); { fScale = scale; }. void SetRange(Int_t min, Int_t max); { fVmin = min; fVmax = max; }. void SetPosition(Int_t pos); { fPos = pos; fClient->NeedRedraw(this); }. Int_t GetPosition() const; { return fPos; }. Int_t GetMinPosition() const; { return fVmin; }. Int_t GetMaxPosition() const; { return fVmax; }. Int_t GetScale() const; { return fScale; }. void MapSubwindows(); { TGWindow::MapSubwindows(); }. void ChangeSliderPic(const char* name). void PositionChanged(Int_t pos); { Emit(""PositionChanged(Int_t)"", pos); }. void Pressed(); { Emit(""Pressed()""); }. void Released(); { Emit(""Released()""); }. » Author: Fons Rademakers 14/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:21546,Deployability,Release,Released,21546,"utton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSlider(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t type = kSlider1 | kScaleBoth, Int_t id = -1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Slider constructor. void CreateDisabledPicture(); Creates disabled picture. void SetState(Bool_t state); Set state of widget. If kTRUE=enabled, kFALSE=disabled. TString GetTypeString() const; Returns the slider type as a string - used in SavePrimitive(). TGSlider(const TGSlider& ). TGSlider& operator=(const TGSlider& ). virtual ~TGSlider(); { }. Bool_t HandleButton(Event_t* event). Bool_t HandleConfigureNotify(Event_t* event). Bool_t HandleMotion(Event_t* event). void SetEnabled(Bool_t flag = kTRUE); { SetState( flag ); }. void SetScale(Int_t scale); { fScale = scale; }. void SetRange(Int_t min, Int_t max); { fVmin = min; fVmax = max; }. void SetPosition(Int_t pos); { fPos = pos; fClient->NeedRedraw(this); }. Int_t GetPosition() const; { return fPos; }. Int_t GetMinPosition() const; { return fVmin; }. Int_t GetMaxPosition() const; { return fVmax; }. Int_t GetScale() const; { return fScale; }. void MapSubwindows(); { TGWindow::MapSubwindows(); }. void ChangeSliderPic(const char* name). void PositionChanged(Int_t pos); { Emit(""PositionChanged(Int_t)"", pos); }. void Pressed(); { Emit(""Pressed()""); }. void Released(); { Emit(""Released()""); }. » Author: Fons Rademakers 14/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:10371,Integrability,Message,Message,10371,"it(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidMapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGWindow::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPositionChanged(Int_t pos)SIGNAL ; virtual voidPressed()SIGNAL ; virtual voidTGFrame::Print(Option_t* option = ",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:9213,Modifiability,Inherit,InheritsFrom,9213,"nter(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tHandleMotion(Event_t* event); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFram",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:9279,Modifiability,Inherit,InheritsFrom,9279,"virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tHandleMotion(Event_t* event); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidMapSubwindows(); virtual voidTGFrame::",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:20142,Modifiability,Inherit,Inheritance,20142,"idgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSlider(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t type = kSlider1 | kScaleBoth, Int_t id = -1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Slider constructor. void CreateDisabledPicture(); Creates disabled picture. void SetState(Bool_t state); Set state of widget. If kTRUE=enabled, kFALSE=disabled. TString GetTypeString() const; Returns the slider type as a string - used in SavePrimitive(). TGSlider(const TGSlider& ). TGSlider& operator=(const TGSlider& ). virtual ~TGSlider(); { }. Bool_t HandleButton(Event_t* event). Bool_t HandleConfigureNotify(Event_t* event). Bool_t HandleMotion(Event_t* event). void SetEnabled(Bool_t flag = kTRUE); { SetState( flag ); }. void SetScale(Int_t scale); { fScale = scale; }. void SetRange(Int_t min, Int_t max); { fVmin = min; fVmax = max; }. void SetPosition(Int_t pos); { fPos = pos; fClient->NeedRedraw(this); }. Int_t GetPosition() const; { return fPos; }",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:20155,Modifiability,Inherit,Inherited,20155,"idgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSlider(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t type = kSlider1 | kScaleBoth, Int_t id = -1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Slider constructor. void CreateDisabledPicture(); Creates disabled picture. void SetState(Bool_t state); Set state of widget. If kTRUE=enabled, kFALSE=disabled. TString GetTypeString() const; Returns the slider type as a string - used in SavePrimitive(). TGSlider(const TGSlider& ). TGSlider& operator=(const TGSlider& ). virtual ~TGSlider(); { }. Bool_t HandleButton(Event_t* event). Bool_t HandleConfigureNotify(Event_t* event). Bool_t HandleMotion(Event_t* event). void SetEnabled(Bool_t flag = kTRUE); { SetState( flag ); }. void SetScale(Int_t scale); { fScale = scale; }. void SetRange(Int_t min, Int_t max); { fVmin = min; fVmax = max; }. void SetPosition(Int_t pos); { fPos = pos; fClient->NeedRedraw(this); }. Int_t GetPosition() const; { return fPos; }",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:8976,Security,Hash,Hash,8976,"rtual Atom_tTGFrame::HandleDNDPosition(Int_t, Int_t, Atom_t, Int_t, Int_t); virtual Bool_tTGFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGFrame::HandleDragDrop(TGFrame*, Int_t, Int_t, TGLayoutHints*); virtual Bool_tTGFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tHandleMotion(Event_t* event); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZo",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:14308,Testability,Test,TestBit,14308,"TGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidSetEnabled(Bool_t flag = kTRUE)TOGGLE GETTER ; virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPosition(Int_t pos)MENU ; virtual voidSetRange(Int_t min, Int_t max)MENU ; virtual voidSetScale(Int_t scale)MENU ; virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetState(Bool_t state); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGSlider(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t type = kSlider1 | kScaleBoth, Int_t id = -1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:14347,Testability,Test,TestBits,14347,"TGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidSetEnabled(Bool_t flag = kTRUE)TOGGLE GETTER ; virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPosition(Int_t pos)MENU ; virtual voidSetRange(Int_t min, Int_t max)MENU ; virtual voidSetScale(Int_t scale)MENU ; virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetState(Bool_t state); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGSlider(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t type = kSlider1 | kScaleBoth, Int_t id = -1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:2074,Usability,Clear,Clear,2074," virtual~TGSlider(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); virtual voidChangeSliderPic(const char* name); static TClass*Clas",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSlider.html:15131,Usability,Clear,ClearFlags,15131,"und()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidCreateDisabledPicture(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; TStringGetTypeString() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGSlider&operator=(const TGSlider&); TGSlider(const TGSlider&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow",MatchSource.WIKI,root/html604/TGSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSlider.html
https://root.cern/root/html604/TGSpeedo.html:644,Availability,avail,available,644,". TGSpeedo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSpeedo. class TGSpeedo: public TGFrame, public TGWidget. TGSpeedo. TGSpeedo is a widget looking like a speedometer, with a needle,; a counter and a small odometer window. /*. */; //. Three thresholds are configurable, with their glowing color; A peak mark can be enabled, allowing to keep track of the highest; value displayed. The mark can be reset by right-clicking on the; widget.; Two signals are available:; OdoClicked(): when user click on the small odometer window; LedClicked(): when user click on the small led near the counter. Function Members (Methods); public:. virtual~TGSpeedo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const",MatchSource.WIKI,root/html604/TGSpeedo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSpeedo.html
https://root.cern/root/html604/TGSpeedo.html:4378,Availability,Error,Error,4378," paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEnableMeanMark(); voidEnablePeakMark(); voidEnableThreshold(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefaultSize",MatchSource.WIKI,root/html604/TGSpeedo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSpeedo.html
https://root.cern/root/html604/TGSpeedo.html:4507,Availability,error,error,4507,"oidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEnableMeanMark(); voidEnablePeakMark(); voidEnableThreshold(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::Get",MatchSource.WIKI,root/html604/TGSpeedo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSpeedo.html
https://root.cern/root/html604/TGSpeedo.html:4591,Availability,error,error,4591,"signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEnableMeanMark(); voidEnablePeakMark(); voidEnableThreshold(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() const; virtual Option_t*TObject::GetDrawOption() const; virtual Int_tTGFr",MatchSource.WIKI,root/html604/TGSpeedo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSpeedo.html
https://root.cern/root/html604/TGSpeedo.html:18391,Availability,mask,mask,18391,,MatchSource.WIKI,root/html604/TGSpeedo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSpeedo.html
https://root.cern/root/html604/TGSpeedo.html:18076,Energy Efficiency,meter,meter,18076,,MatchSource.WIKI,root/html604/TGSpeedo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSpeedo.html
https://root.cern/root/html604/TGSpeedo.html:21693,Energy Efficiency,meter,meter,21693,"TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSpeedo(const TGWindow* p = 0, int id = -1); TGSpeedo widget constructor. TGSpeedo(const TGWindow* p, Float_t smin, Float_t smax, const char* lbl1 = """", const char* lbl2 = """", const char* dsp1 = """", const char* dsp2 = """", int id = -1); TGSpeedo widget constructor. void Build(); Build TGSpeedo widget. ~TGSpeedo(); TGSpeedo widget Destructor. TGDimension GetDefaultSize() const; Return default dimension of the widget. void Glow(TGSpeedo::EGlowColor col = kGreen); Make speedo glowing. Bool_t HandleButton(Event_t* event); Handle mouse button event. void SetOdoValue(Int_t val); Set actual value of odo meter. void SetDisplayText(const char* text1, const char* text2 = """"); Set small display text (two lines). void SetLabelText(const char* text1, const char* text2 = """"); Set main label text (two lines). void SetMinMaxScale(Float_t min, Float_t max); Set min and max scale values. void SetScaleValue(Float_t val); Set actual scale (needle position) value. void SetScaleValue(Float_t val, Int_t damping); Set actual scale (needle position) value. void StepScale(Float_t step); Increment/decrement scale (needle position) of ""step"" value. void Translate(Float_t val, Float_t angle, Int_t* x, Int_t* y); Translate distance from center and angle to xy coordinates. void DrawNeedle(); Draw needle in speedo widget. void DrawText(); Draw text in speedo widget. void DoRedraw(); Redraw speedo widget. TGSpeedo(const TGWindow* p = 0, int id = -1). const TGPicture * GetPicture() const; { return fBase; }. TImage * GetImage() const; { return fImage; }. Float_t GetPeakVal() const; { retu",MatchSource.WIKI,root/html604/TGSpeedo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSpeedo.html
https://root.cern/root/html604/TGSpeedo.html:10115,Integrability,Message,Message,10115,"me::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsThresholdActive(); Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); voidLedClicked()SIGNAL ; virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGWindow::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOdoClicked()SIGNAL ; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGSpeedo&operator=(const TGSpeedo&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGFrame::Print(Option_t* option = """") const; virt",MatchSource.WIKI,root/html604/TGSpeedo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSpeedo.html
https://root.cern/root/html604/TGSpeedo.html:447,Modifiability,config,configurable,447,". TGSpeedo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TGSpeedo. class TGSpeedo: public TGFrame, public TGWidget. TGSpeedo. TGSpeedo is a widget looking like a speedometer, with a needle,; a counter and a small odometer window. /*. */; //. Three thresholds are configurable, with their glowing color; A peak mark can be enabled, allowing to keep track of the highest; value displayed. The mark can be reset by right-clicking on the; widget.; Two signals are available:; OdoClicked(): when user click on the small odometer window; LedClicked(): when user click on the small led near the counter. Function Members (Methods); public:. virtual~TGSpeedo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const",MatchSource.WIKI,root/html604/TGSpeedo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSpeedo.html
https://root.cern/root/html604/TGSpeedo.html:8896,Modifiability,Inherit,InheritsFrom,8896,"r(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsThresholdActive(); Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); voidLedClicked()SIGNAL ; virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject:",MatchSource.WIKI,root/html604/TGSpeedo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSpeedo.html
https://root.cern/root/html604/TGSpeedo.html:8962,Modifiability,Inherit,InheritsFrom,8962,"tual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsThresholdActive(); Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); voidLedClicked()SIGNAL ; virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised()",MatchSource.WIKI,root/html604/TGSpeedo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSpeedo.html
https://root.cern/root/html604/TGSpeedo.html:21012,Modifiability,Inherit,Inheritance,21012,"idgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSpeedo(const TGWindow* p = 0, int id = -1); TGSpeedo widget constructor. TGSpeedo(const TGWindow* p, Float_t smin, Float_t smax, const char* lbl1 = """", const char* lbl2 = """", const char* dsp1 = """", const char* dsp2 = """", int id = -1); TGSpeedo widget constructor. void Build(); Build TGSpeedo widget. ~TGSpeedo(); TGSpeedo widget Destructor. TGDimension GetDefaultSize() const; Return default dimension of the widget. void Glow(TGSpeedo::EGlowColor col = kGreen); Make speedo glowing. Bool_t HandleButton(Event_t* event); Handle mouse button event. void SetOdoValue(Int_t val); Set actual value of odo meter. void SetDisplayText(const char* text1, const char* text2 = """"); Set small display text (two lines). void SetLabelText(const char* text1, const char* text2 = """"); Set main label text (two lines). void SetMinMaxScale(Float_t min, Float_t max); Set min and max scale values. void SetScaleValue(Float_t val); Set actual scale (needle position",MatchSource.WIKI,root/html604/TGSpeedo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TGSpeedo.html
